///// THIS FILE WAS AUTO GENERATED ON 03/07/2023 10:04:45 /////

syntax = "proto3";
package ni.teststand.api.grpc.techpreview;
option csharp_namespace = "NationalInstruments.TestStand.AdapterAPI.Grpc";
option go_package = "tsgrpc";
option java_multiple_files = true;
option java_outer_classname = "TestStandAdapterAPIProto";
option java_package = "com.ni.teststand.api.grpc.techpreview";
option objc_class_prefix = "NITAG";
option php_namespace = "NI\\TestStand\\AdapterAPI\\Grpc";
option ruby_package = "NI::TestStand::AdapterAPI::Grpc";

import "ni/teststand/api/grpc/techpreview/common_types_api.proto";
import "ni/teststand/api/grpc/techpreview/NationalInstruments.TestStand.API.proto";

// StructPassingOptions
//
enum StructPassingOptions {
  // Field: StructPassing_AdapterDefault
  //
  StructPassing_AdapterDefault = 0;
  // Field: StructPassing_OneByte
  //
  StructPassing_OneByte = 1;
  // Field: StructPassing_TwoByte
  //
  StructPassing_TwoByte = 2;
  // Field: StructPassing_FourByte
  //
  StructPassing_FourByte = 4;
  // Field: StructPassing_EightByte
  //
  StructPassing_EightByte = 8;
  // Field: StructPassing_SixteenByte
  //
  StructPassing_SixteenByte = 16;
}

// StructMemberTypes
//
enum StructMemberTypes {
  // Field: StructMemberType_Float32
  //
  StructMemberType_Float32 = 0;
  // Field: StructMemberType_Float64
  //
  StructMemberType_Float64 = 1;
  // Field: StructMemberType_Int8
  //
  StructMemberType_Int8 = 2;
  // Field: StructMemberType_UInt8
  //
  StructMemberType_UInt8 = 3;
  // Field: StructMemberType_Int16
  //
  StructMemberType_Int16 = 4;
  // Field: StructMemberType_UInt16
  //
  StructMemberType_UInt16 = 5;
  // Field: StructMemberType_Int32
  //
  StructMemberType_Int32 = 6;
  // Field: StructMemberType_UInt32
  //
  StructMemberType_UInt32 = 7;
  // Field: StructMemberType_Int64
  //
  StructMemberType_Int64 = 8;
  // Field: StructMemberType_UInt64
  //
  StructMemberType_UInt64 = 9;
  // Field: StructMemberType_CString
  //
  StructMemberType_CString = 32;
  // Field: StructMemberType_UnicodeString
  //
  StructMemberType_UnicodeString = 33;
  // Field: StructMemberType_CStringBuffer
  //
  StructMemberType_CStringBuffer = 34;
  // Field: StructMemberType_UnicodeStringBuffer
  //
  StructMemberType_UnicodeStringBuffer = 35;
  // Field: StructMemberType_IDispatch
  //
  StructMemberType_IDispatch = 64;
  // Field: StructMemberType_CVIHandle
  //
  StructMemberType_CVIHandle = 65;
  // Field: StructMemberType_IUnknown
  //
  StructMemberType_IUnknown = 66;
}

// StructMemberStorageOptions
//
enum StructMemberStorageOptions {
  // Field: StructMemberStorage_InlineString
  //
  StructMemberStorage_InlineString = 0;
  // Field: StructMemberStorage_StringPointer
  //
  StructMemberStorage_StringPointer = 1;
  // Field: StructMemberStorage_LabVIEWString
  //
  StructMemberStorage_LabVIEWString = 2;
  // Field: StructMemberStorage_EmbeddedStruct
  //
  StructMemberStorage_EmbeddedStruct = 32;
  // Field: StructMemberStorage_StructPointer
  //
  StructMemberStorage_StructPointer = 33;
}

// StructMemberArrayStorageOptions
//
enum StructMemberArrayStorageOptions {
  StructMemberArrayStorageOptions_reservedZero = 0;
  // Field: StructMemberStorage_InlineArray
  //
  StructMemberStorage_InlineArray = 256;
  // Field: StructMemberStorage_ArrayPointer
  //
  StructMemberStorage_ArrayPointer = 257;
  // Field: StructMemberStorage_LabVIEWArray
  //
  StructMemberStorage_LabVIEWArray = 258;
}

// HTBasicDefaultWorkingDirTypes
//
enum HTBasicDefaultWorkingDirTypes {
  HTBasicDefaultWorkingDirTypes_reservedZero = 0;
  // Field: HTBasicDefaultWorkingDir_DoNotChange
  //
  HTBasicDefaultWorkingDir_DoNotChange = 1;
  // Field: HTBasicDefaultWorkingDir_HTBasicServer
  //
  HTBasicDefaultWorkingDir_HTBasicServer = 2;
  // Field: HTBasicDefaultWorkingDir_SubroutineFile
  //
  HTBasicDefaultWorkingDir_SubroutineFile = 3;
  // Field: HTBasicDefaultWorkingDir_Specific
  //
  HTBasicDefaultWorkingDir_Specific = 4;
}

// LabVIEWServerTypes
//
enum LabVIEWServerTypes {
  // Field: LabVIEWServer_ExecServer
  //
  LabVIEWServer_ExecServer = 0;
  // Field: LabVIEWServer_RTEServer
  //
  LabVIEWServer_RTEServer = 1;
  // Field: LabVIEWServer_ExecServerDeferred
  //
  LabVIEWServer_ExecServerDeferred = 2;
}

// AdapterCodeTemplatePolicies
//
enum AdapterCodeTemplatePolicies {
  // Field: AdapterCodeTemplatePolicy_UseOnlyNew
  //
  AdapterCodeTemplatePolicy_UseOnlyNew = 0;
  // Field: AdapterCodeTemplatePolicy_UseOnlyLegacy
  //
  AdapterCodeTemplatePolicy_UseOnlyLegacy = 1;
  // Field: AdapterCodeTemplatePolicy_UseNewAndLegacy
  //
  AdapterCodeTemplatePolicy_UseNewAndLegacy = 2;
}

// ActiveXModuleCreateOptions
//
enum ActiveXModuleCreateOptions {
  // Field: ActiveXCreate_New
  //
  ActiveXCreate_New = 0;
  // Field: ActiveXCreate_AttachToActive
  //
  ActiveXCreate_AttachToActive = 1;
  // Field: ActiveXCreate_FromFile
  //
  ActiveXCreate_FromFile = 2;
  // Field: ActiveXCreate_DoNotCreate
  //
  ActiveXCreate_DoNotCreate = 3;
}

// ActiveXModuleMemberTypes
//
enum ActiveXModuleMemberTypes {
  ActiveXModuleMemberTypes_reservedZero = 0;
  // Field: ActiveXMember_CallMethod
  //
  ActiveXMember_CallMethod = 1;
  // Field: ActiveXMember_GetProperty
  //
  ActiveXMember_GetProperty = 2;
  // Field: ActiveXMember_SetProperty
  //
  ActiveXMember_SetProperty = 4;
  // Field: ActiveXMember_SetPropertyByRef
  //
  ActiveXMember_SetPropertyByRef = 8;
  // Field: ActiveXMember_DoNotCall
  //
  ActiveXMember_DoNotCall = -1;
}

// module 

// ActiveXParameterDirections
//
// The ActiveXParameter.Direction property returns one or more of the following constants to indicate how the module passes the parameter when it executes. Use the bitwise-AND operator to determine whether any of these flags are set when obtaining the property value.
//
enum ActiveXParameterDirections {
  // Field: ActiveXParamDirection_Unknown
  //
  // (Value: 0x0) Indicates that the module does not have enough information to determine the parameter direction.
  //
  ActiveXParamDirection_Unknown = 0;
  // Field: ActiveXParamDirection_Min
  //
  ActiveXParamDirection_Min = 0;
  // Field: ActiveXParamDirection_In
  //
  // (Value: 0x1) Indicates that the parameter is an input parameter.
  //
  ActiveXParamDirection_In = 1;
  // Field: ActiveXParamDirection_Out
  //
  // (Value: 0x2) Indicates that the parameter is an output parameter.
  //
  ActiveXParamDirection_Out = 2;
  // Field: ActiveXParamDirection_Max
  //
  ActiveXParamDirection_Max = 2;
  option allow_alias = true;
}

// CommonCParameterPassOptions
//
// Use these constants with the CommonCParameter.Pass property and the paramPass parameter of CVIParameters.New and DllParameters.New methods to specify how to pass the parameter.
//
enum CommonCParameterPassOptions {
  // Field: CParamPass_ByVal
  //
  // (Value: 0) Passes a copy of the value.
  //
  CParamPass_ByVal = 0;
  // Field: CParamPass_ByPointer
  //
  // (Value: 1) Passes a pointer to a modifiable value.
  //
  CParamPass_ByPointer = 1;
  // Field: CParamPass_ByReference
  //
  // (Value: 0x10) Passes a reference to a modifiable value.
  //
  CParamPass_ByReference = 16;
  // Field: CParamPass_ByConstPointer
  //
  // (Value: 0x41) Passes a pointer to a constant value.
  //
  CParamPass_ByConstPointer = 65;
  // Field: CParamPass_ByConstReference
  //
  // (Value: 0x50) Passes a reference to a constant value.
  //
  CParamPass_ByConstReference = 80;
}

// CommonCParameterTypes
//
// Use the following constants with the CVIParameter.Type and DllParameter.Type properties to specify the parameters data type, or as the parameterType parameter of the CVIParameters.New and DllParameters.New methods. When you get or set the parameter data type, also get or set the category with the CVIParameter.Category or DllParameter.Category properties, or set the parameterCategory parameter of the CVIParameters.New and DllParameters.New methods.
//
enum CommonCParameterTypes {
  // Field: CParamType_Int8
  //
  // (Value: 0) Specifies that the parameter is an 8-bit integer.
  //
  CParamType_Int8 = 0;
  // Field: CParamType_UInt8
  //
  // (Value: 1) Specifies that the parameter is an 8-bit unsigned integer.
  //
  CParamType_UInt8 = 1;
  // Field: CParamType_Int16
  //
  // (Value: 2) Specifies that the parameter is a 16-bit integer.
  //
  CParamType_Int16 = 2;
  // Field: CParamType_UInt16
  //
  // (Value: 3) Specifies that the parameter is a 16-bit unsigned integer.
  //
  CParamType_UInt16 = 3;
  // Field: CParamType_Int32
  //
  // (Value: 4) Specifies that the parameter is a 32-bit integer.
  //
  CParamType_Int32 = 4;
  // Field: CParamType_UInt32
  //
  // (Value: 5) Specifies that the parameter is a 32-bit unsigned integer.
  //
  CParamType_UInt32 = 5;
  // Field: CParamType_Float32
  //
  // (Value: 6) Specifies that the parameter is a 32-bit floating-point number.
  //
  CParamType_Float32 = 6;
  // Field: CParamType_Float64
  //
  // (Value: 7) Specifies that the parameter is a 64-bit floating-point number.
  //
  CParamType_Float64 = 7;
  // Field: CParamType_Int64
  //
  // (Value: 8) Specifies that the parameter is a 64-bit integer.
  //
  CParamType_Int64 = 8;
  // Field: CParamType_UInt64
  //
  // (Value: 9) Specifies that the parameter is a 64-bit unsigned integer.
  //
  CParamType_UInt64 = 9;
  // Field: CParamType_CString
  //
  // (Value: 0x20) Specifies that the parameter is a C-style string, such as a pointer to an array of single-byte characters. Ensure the code module does not modify the value of a string parameter of this type.
  //
  CParamType_CString = 32;
  // Field: CParamType_UnicodeString
  //
  // (Value: 0x21) Specifies that the parameter is a C-style, wide character string buffer, such as a pointer to an array of double-byte characters. Ensure the code module does not modify the value of a string parameter of this type.
  //
  CParamType_UnicodeString = 33;
  // Field: CParamType_CStringBuffer
  //
  // (Value: 0x22) Specifies that the parameter is a C-style string buffer, such as a pointer to a modifiable array of single-byte characters. The code module can also modify the value of a string parameter of this type.
  //
  CParamType_CStringBuffer = 34;
  // Field: CParamType_UnicodeStringBuffer
  //
  // (Value: 0x23) Specifies that the parameter is a C-style, wide character string buffer, such as a pointer to a modifiable array of dual-byte characters. The code module can also modify the value of a string parameter of this type.
  //
  CParamType_UnicodeStringBuffer = 35;
  // Field: CParamType_IDispatch
  //
  // (Value: 0x40) Specifies that the parameter is a pointer to an ActiveX dispatch interface.
  //
  CParamType_IDispatch = 64;
  // Field: CParamType_CVIHandle
  //
  // (Value: 0x41) Specifies that the parameter is an ActiveX reference passed as a CVI CAObjHandle.
  //
  CParamType_CVIHandle = 65;
  // Field: CParamType_IUnknown
  //
  // (Value: 0x42) Specifies that the parameter is a pointer to an ActiveX IUnknown interface.
  //
  CParamType_IUnknown = 66;
  // Field: CParamType_NotUsed
  //
  // (Value: 200) Specifies that no data type is associated with the category of the parameter. Refer to CVIParameterCategories and DllParameterCategories for more information about category descriptions.
  //
  CParamType_NotUsed = 200;
}

// CommonCParameterResultActions
//
// Use the following constants with the CommonCParameter.ResultAction property to specify what action to take when the code module returns a value. This property is valid only for return values and numeric parameters you pass by pointer.
//
enum CommonCParameterResultActions {
  // Field: CParamResult_NoAction
  //
  // (Value: 0) Specifies to ignore the return value.
  //
  CParamResult_NoAction = 0;
  // Field: CParamResult_SetErrorIfNegative
  //
  // (Value: 1) Specifies to set the error state of the step if the return value is less than zero.
  //
  CParamResult_SetErrorIfNegative = 1;
  // Field: CParamResult_SetErrorIfPositive
  //
  // (Value: 2) Specifies to set the error state of the step if the return value is greater than zero.
  //
  CParamResult_SetErrorIfPositive = 2;
  // Field: CParamResult_SetErrorIfZero
  //
  // (Value: 3) Specifies to set the error state of the step if the return value is equal to zero.
  //
  CParamResult_SetErrorIfZero = 3;
  // Field: CParamResult_SetErrorIfNotZero
  //
  // (Value: 4) Specifies to set the error state of the step if the return value is not zero.
  //
  CParamResult_SetErrorIfNotZero = 4;
}

// module 

// CommonCParameterFlags
//
// Use the following constant with the CommonCParameter.Flags property to specify what action to take when the code module returns a value. A value of zero indicates that no flags are set.
//
enum CommonCParameterFlags {
  CommonCParameterFlags_reservedZero = 0;
  // Field: CParamFlags_SetErrorCodeToReturnValue
  //
  // (Value: 1) Specifies to assign the return value of the parameter to the Error.Code property of the currently executing step. This flag is valid only for return values and numeric parameters passed by pointer or reference.
  //
  CParamFlags_SetErrorCodeToReturnValue = 1;
}

// CommonCParameterUnknownInfoFlags
//
// The CommonCParameter.UnknownInfo property returns one or more of the following constants to indicate how much information TestStand was able to acquire about the parameter when reading the module information from a DLL exports table or a type library:
//
enum CommonCParameterUnknownInfoFlags {
  // Field: CParamInfo_EveryThingKnown
  //
  // (Value: 0) Indicates that TestStand could determine the required information about the parameter.
  //
  CParamInfo_EveryThingKnown = 0;
  // Field: CParamInfo_DontKnowNumElements
  //
  // (Value: 1) Indicates that TestStand could not determine the number of elements in the array parameter.
  //
  CParamInfo_DontKnowNumElements = 1;
  // Field: CParamInfo_DontKnowIfArrayOrPointer
  //
  // (Value: 2) Indicates that TestStand could not determine whether the parameter was an array or pointer.
  //
  CParamInfo_DontKnowIfArrayOrPointer = 2;
  // Field: CParamInfo_DontKnowFirstDimensionSize
  //
  // (Value: 3) Indicates that TestStand could not determine how large the first dimension was for an array parameter.
  //
  CParamInfo_DontKnowFirstDimensionSize = 3;
}

// CVIModuleTypes
//
// Use these constants with the CVIModule.ModuleType property to specify what type of executable the module runs.
//
enum CVIModuleTypes {
  // Field: CVIModuleType_Obj
  //
  // (Value: 0) This constant is obsolete. Specifies that the module is an object file.
  //
  CVIModuleType_Obj = 0;
  // Field: CVIModuleType_Source
  //
  // (Value: 1) This constant is obsolete. Specifies that the module is a source file.
  //
  CVIModuleType_Source = 1;
  // Field: CVIModuleType_DLL
  //
  // (Value: 2) Specifies that the module is a DLL.
  //
  CVIModuleType_DLL = 2;
  // Field: CVIModuleType_Lib
  //
  // (Value: 3) This constant is obsolete. Specifies that the module is a static library.
  //
  CVIModuleType_Lib = 3;
}

// CVIParameterCategories
//
// Use the following constants with the CVIParameter.Category property and the parameterCategory parameter of CVIParameters.New method to specify the group of data types to which the parameter belongs. When you get or set the category of the parameter, also get or set the data type with the CVIParameter.Type property or set the parameterType parameter of the CVIParameters.New method. Some categories do not have an associated data type. For these categories, the only valid value for CVIParameter.Type is ParamType_NotUsed.
//
enum CVIParameterCategories {
  // Field: CVIParamCategory_Numeric
  //
  // (Value: 0) Specifies that the parameter is a numeric data type. Valid data types for this category include CParamType_Float32, CParamType_Float64, CParamType_Int16, CParamType_Int32, CParamType_Int8, CParamType_UInt16, CParamType_UInt32, CParamType_UInt8, CParamType_UInt64, and CParamType_Int64.
  //
  CVIParamCategory_Numeric = 0;
  // Field: CVIParamCategory_NumericArray
  //
  // (Value: 1) Specifies that the parameter is an array of numbers. Valid data types for this category include CParamType_Float32, CParamType_Float64, CParamType_Int16, CParamType_Int32, CParamType_Int8, CParamType_UInt16, CParamType_UInt32, CParamType_UInt8, CParamType_UInt64, and CParamType_Int64.
  //
  CVIParamCategory_NumericArray = 1;
  // Field: CVIParamCategory_String
  //
  // (Value: 2) Specifies that the parameter is a string. Valid data types for this category include CParamType_CString, CParamType_CStringBuffer, CParamType_UnicodeString, and CParamType_UnicodeStringBuffer.
  //
  CVIParamCategory_String = 2;
  // Field: CVIParamCategory_Void
  //
  // (Value: 3) Specifies that the parameter is a void parameter, meaning it has no value. This category applies only to return values.
  //
  CVIParamCategory_Void = 3;
  // Field: CVIParamCategory_Object
  //
  // (Value: 4) Specifies that the parameter is an ActiveX object reference. Valid data types for this category include CParamType_CVIHandle, CParamType_IDispatch, and CParamType_IUnknown.
  //
  CVIParamCategory_Object = 4;
  // Field: CVIParamCategory_CStruct
  //
  // (Value: 5) Specifies that the parameter is a C-style struct. This category does not have any associated data types. However, you can use the CommonCParameter.StructType property to specify the name of the TestStand type the parameter represents.
  //
  CVIParamCategory_CStruct = 5;
  // Field: CVIParamCategory_StringArray
  //
  // (Value: 6) Specifies that the parameter is an array of strings. Valid data types for this category include CParamType_CString, CParamType_CStringBuffer, CParamType_UnicodeString, and CParamType_UnicodeStringBuffer.
  //
  CVIParamCategory_StringArray = 6;
  // Field: CVIParamCategory_ObjectArray
  //
  // (Value: 7) Specifies that the parameter is an array of ActiveX object references. Valid data types for this category include CParamType_CVIHandle, CParamType_IDispatch, and CParamType_IUnknown.
  //
  CVIParamCategory_ObjectArray = 7;
  // Field: CVIParamCategory_CStructArray
  //
  // (Value: 8) Specifies that the parameter is an array of C-style structs. This category does not have any associated data types. However, you can use the CommonCParameter.StructType property to specify the name of the TestStand type that the parameter represents.
  //
  CVIParamCategory_CStructArray = 8;
  // Field: CVIParamCategory_Pointer
  //
  // (Value: 9)
  //
  CVIParamCategory_Pointer = 9;
  // Field: CVIParamCategory_Enum
  //
  // (Value: 10) Specifies that the parameter is an enumeration data type. Valid data types for this category include CParamType_Float32, CParamType_Float64, CParamType_Int16, CParamType_Int32, CParamType_Int8, CParamType_UInt16, CParamType_UInt32, CParamType_UInt8, CParamType_UInt64, and CParamType_Int64.  You can use the CommonCParameter.StructType property to specify the name of the TestStand type that the parameter represents.
  //
  CVIParamCategory_Enum = 10;
  // Field: CVIParamCategory_EnumArray
  //
  // (Value: 11) Specifies that the parameter is an array of C-style structs. Valid data types for this category include CParamType_Float32, CParamType_Float64, CParamType_Int16, CParamType_Int32, CParamType_Int8, CParamType_UInt16, CParamType_UInt32, CParamType_UInt8, CParamType_UInt64, and CParamType_Int64.  You can use the CommonCParameter.StructType property to specify the name of the TestStand type that the parameter represents.
  //
  CVIParamCategory_EnumArray = 11;
  // Field: CVIParamCategory_TestData
  //
  // (Value: 100) Specifies that the parameter is a legacy LabWindows/CVI tTestData struct. This category does not have any associated data types.
  //
  CVIParamCategory_TestData = 100;
  // Field: CVIParamCategory_TestError
  //
  // (Value: 101) Specifies that the parameter is a legacy LabWindows/CVI tTestError struct. This category does not have any associated data types.
  //
  CVIParamCategory_TestError = 101;
}

// DllParameterCategories
//
// Use the following constants with the DllParameter.Category property and the parameterCategory parameter of the DllParameters.New module to specify the group of data types to which the parameter belongs. When you get or set the category of the parameter, also get or set the data type with the DllParameter.Type property, or set the parameterType parameter of the DllParameters.New method. Some categories do not have an associated data type; for these categories, the only valid value for the DllParameter.Type property is CParamType_NotUsed
//
enum DllParameterCategories {
  // Field: DllParamCategory_Numeric
  //
  // (Value: 0) Specifies that the parameter is a numeric data type. Valid data types for this category include CParamType_Float32, CParamType_Float64, CParamType_Int16, CParamType_Int32, CParamType_Int8, CParamType_UInt16, CParamType_UInt32, CParamType_UInt8, CParamType_UInt64, and CParamType_Int64.
  //
  DllParamCategory_Numeric = 0;
  // Field: DllParamCategory_NumericArray
  //
  // (Value: 1) Specifies that the parameter is an array of numbers. Valid data types for this category include CParamType_Float32, CParamType_Float64, CParamType_Int16, CParamType_Int32, CParamType_Int8, CParamType_UInt16, CParamType_UInt32, CParamType_UInt8, CParamType_UInt64, and CParamType_Int64.
  //
  DllParamCategory_NumericArray = 1;
  // Field: DllParamCategory_String
  //
  // (Value: 2) Specifies that the parameter is a string. Valid data types for this category include CParamType_CString, CParamType_CStringBuffer, CParamType_UnicodeString, and CParamType_UnicodeStringBuffer.
  //
  DllParamCategory_String = 2;
  // Field: DllParamCategory_Void
  //
  // (Value: 3) Specifies that the parameter is a void parameter, meaning it has no value. This category applies only to return values.
  //
  DllParamCategory_Void = 3;
  // Field: DllParamCategory_Object
  //
  // (Value: 4) Specifies that the parameter is an ActiveX object reference. Valid data types for this category include CParamType_CVIHandle, CParamType_IDispatch, and CParamType_IUnknown.
  //
  DllParamCategory_Object = 4;
  // Field: DllParamCategory_CStruct
  //
  // (Value: 5) Specifies that the parameter is a C-style struct. This category does not have any associated data types. However, you can use the CommonCParameter.StructType property to specify the name of the TestStand type the parameter represents.
  //
  DllParamCategory_CStruct = 5;
  // Field: DllParamCategory_StringArray
  //
  // (Value: 6) Specifies that the parameter is an array of strings. Valid data types for this category include CParamType_CString, CParamType_CStringBuffer, CParamType_UnicodeString, and CParamType_UnicodeStringBuffer.
  //
  DllParamCategory_StringArray = 6;
  // Field: DllParamCategory_ObjectArray
  //
  // (Value: 7) Specifies that the parameter is an array of ActiveX object references. Valid data types for this category include CParamType_CVIHandle, CParamType_IDispatch, and CParamType_IUnknown.
  //
  DllParamCategory_ObjectArray = 7;
  // Field: DllParamCategory_CStructArray
  //
  // (Value: 8) Specifies that the parameter is an array of C-style structs. This category does not have any associated data types. However, you can use the CommonCParameter.StructType property to specify the name of the TestStand type the parameter represents.
  //
  DllParamCategory_CStructArray = 8;
  // Field: DllParamCategory_Pointer
  //
  // (Value: 9) Specifies that the parameter is a pointer. This category does not have any associated data types.
  //
  DllParamCategory_Pointer = 9;
  // Field: DllParamCategory_Enum
  //
  // (Value: 10) Specifies that the parameter is an enumeration data type. Valid data types for this category include CParamType_Float32, CParamType_Float64, CParamType_Int16, CParamType_Int32, CParamType_Int8, CParamType_UInt16, CParamType_UInt32, CParamType_UInt8, CParamType_UInt64, and CParamType_Int64.  You can use the CommonCParameter.StructType property to specify the name of the TestStand type that the parameter represents.
  //
  DllParamCategory_Enum = 10;
  // Field: DllParamCategory_EnumArray
  //
  // (Value: 11) Specifies that the parameter is an array of C-style structs. Valid data types for this category include CParamType_Float32, CParamType_Float64, CParamType_Int16, CParamType_Int32, CParamType_Int8, CParamType_UInt16, CParamType_UInt32, CParamType_UInt8, CParamType_UInt64, and CParamType_Int64.  You can use the CommonCParameter.StructType property to specify the name of the TestStand type that the parameter represents.
  //
  DllParamCategory_EnumArray = 11;
  // Field: DllParamCategory_Boolean
  //
  // (Value: 100) Specifies that the parameter is a Boolean type. This category does not have any associated data types.
  //
  DllParamCategory_Boolean = 100;
  // Field: DllParamCategory_BooleanArray
  //
  // (Value: 101) Specifies that the parameter is an array of Boolean values. This category does not have any associated data types.
  //
  DllParamCategory_BooleanArray = 101;
  // Field: DllParamCategory_CNiVector
  //
  // (Value: 200) Specifies that the parameter is an instance of the Measurement Studio CNiScalarVector template class. If you get or set this category, also get or set the DllParameter.Type property. This category is associated with numeric data types, such as CParamType_Float32.
  //
  DllParamCategory_CNiVector = 200;
  // Field: DllParamCategory_CNiMatrix
  //
  // (Value: 201) Specifies that the parameter is an instance of the Measurement Studio CNiScalarMatrix template class. If you get or set this category, also get or set the DllParameter.Type property. This category is associated with numeric data types, such as CParamType_Float32.
  //
  DllParamCategory_CNiMatrix = 201;
  // Field: DllParamCategory_CNiComplex
  //
  // (Value: 202) Specifies that the parameter is an instance of the Measurement Studio CNiComplexT template class. If you get or set this category, also get or set the DllParameter.Type property. This category is associated with numeric data types, such as CParamType_Float32.
  //
  DllParamCategory_CNiComplex = 202;
  // Field: DllParamCategory_CNiString
  //
  // (Value: 203) Specifies that the parameter is an instance of the Measurement Studio CNiString class. This category does not have any associated data types.
  //
  DllParamCategory_CNiString = 203;
  // Field: DllParamCategory_CNiComplexVector
  //
  // (Value: 204) Specifies that the parameter is an instance of the Measurement Studio CNiComplexVector class. If you get or set this category, also get or set the DllParameter.Type property. This category is associated with numeric data types, such as CParamType_Float32.
  //
  DllParamCategory_CNiComplexVector = 204;
  // Field: DllParamCategory_TSObject
  //
  // (Value: 205) Specifies that the parameter is an object from the TestStand ActiveX API. This category does not have any associated parameters. However, the DllParameter.TSObjectParameterType property specifies what kind of TestStand object the parameter represents.
  //
  DllParamCategory_TSObject = 205;
  // Field: DllParamCategory_CNiBoolVector
  //
  // (Value: 206) Specifies that the parameter is an instance of the Measurement Studio CNiBoolVector class. This category does not have any associated data types.
  //
  DllParamCategory_CNiBoolVector = 206;
  // Field: DllParamCategory_CString
  //
  // (Value: 207) Specifies that the parameter is an instance of the Microsoft Foundation Classes (MFC) CString class. This category does not have any associated data types.
  //
  DllParamCategory_CString = 207;
  // Field: DllParamCategory_CStringArray
  //
  // (Value: 208) Specifies that the parameter is an instance of the MFC CStringArray class. This category does not have any associated data types.
  //
  DllParamCategory_CStringArray = 208;
  // Field: DllParamCategory_bstr_t
  //
  // (Value: 209) Specifies that the parameter is an instance of the Microsoft Visual Studio _bstr_t class. This category does not have any associated data types.
  //
  DllParamCategory_bstr_t = 209;
  // Field: DllParamCategory_CNiStringVector
  //
  // (Value: 210) Specifies that the parameter is an instance of the Measurement Studio CNiStringVector class. This category does not have any associated data types.
  //
  DllParamCategory_CNiStringVector = 210;
}

// module 

// LabVIEWModuleCallOptions
//
// Use the following constants with the LabVIEWModule.VICallOptions method to get or set options for calling the VI for the module. Use the bitwise-AND operator to determine whether either of these flags are set when obtaining the property value. Use the bitwise-OR operator to set both flags when setting the property value.
//
enum LabVIEWModuleCallOptions {
  LabVIEWModuleCallOptions_reservedZero = 0;
  // Field: LVModuleOptions_ShowFrontPanel
  //
  // (Value: 0x1) Specifies to activate the front panel of the VI of the module when called.
  //
  LVModuleOptions_ShowFrontPanel = 1;
  // Field: LVModuleOptions_AutoDetectLVRT
  //
  // (Value: 0x2) Specifies to automatically detect the version of the LabVIEW Run-Time server to call when executing the VI of the module.
  //
  LVModuleOptions_AutoDetectLVRT = 2;
}

// LabVIEWParameterCategories
//
// The LabVIEWParameter.Category and LabVIEWParameterElement.Category properties return one of the following constants to indicate what group of data types the parameter belongs to. After obtaining the category of the parameter, you can obtain the data type with the LabVIEWParameter.Type or LabVIEWParameterElement.Type property. Some categories do not have an associated data type; for these categories, the only valid value for the LabVIEWParameter.Type property is LVParamType_Unspecified.
//
enum LabVIEWParameterCategories {
  // Field: LVParamCategory_Numeric
  //
  // (Value: 0) Indicates that the parameter is a numeric data type. Numeric data types include enumerations, but do not include complex numbers. Data types associated with this category include LVParamType_Ext, LVParamType_Int16, LVParamType_Int32, LVParamType_Int64, LVParamType_Int8, LVParamType_Real32, LVParamType_Real64, LVParamType_UInt16, LVParamType_UInt32, LVParamType_UInt64, and LVParamType_UInt8.
  //
  LVParamCategory_Numeric = 0;
  // Field: LVParamCategory_String
  //
  // (Value: 1) Indicates that the parameter is a string data type. Data types associated with this category include LVParamType_BinaryString, LVParamType_CString, LVParamType_PathString, and LVParamType_TimestampString.
  //
  LVParamCategory_String = 1;
  // Field: LVParamCategory_Boolean
  //
  // (Value: 2) Indicates that the parameter is a Boolean type This category does not have any associated data types.
  //
  LVParamCategory_Boolean = 2;
  // Field: LVParamCategory_Cluster
  //
  // (Value: 3) Indicates that the parameter is a cluster. Data types associated with this category include LVParamType_DigitalData, LVParamType_DigitalWaveform, LVParamType_ErrorOut, LVParamType_IO, LVParamType_Standard, LVParamType_TestData, and LVParamType_Waveform.
  //
  LVParamCategory_Cluster = 3;
  // Field: LVParamCategory_Reference
  //
  // (Value: 4) Indicates that the parameter is a reference. Data types associated with this category include LVParamType_ActiveXRef, LVParamType_OtherRef, and LVParamType_LVClass but do not include LVParamType_IOCluster, which is considered a cluster data type.
  //
  LVParamCategory_Reference = 4;
  // Field: LVParamCategory_Complex
  //
  // (Value: 6) Indicates that the parameter is a complex numeric data type. Data types associated with this category include LVParamType_Complex128, LVParamType_Complex64, and LVParamType_ComplexEx.
  //
  LVParamCategory_Complex = 6;
  // Field: LVParamCategory_Variant
  //
  // (Value: 7) Indicates the parameter is a COM Variant. This category does not have any associated data types.
  //
  LVParamCategory_Variant = 7;
  // Field: LVParamCategory_Unknown
  //
  // (Value: 8) Indicates that the parameter has a data type TestStand does not recognize.
  //
  LVParamCategory_Unknown = 8;
  // Field: LVParamCategory_Enum
  //
  // (Value: 9) Indicates that the parameter is an enumeration.
  //
  LVParamCategory_Enum = 9;
  // Field: LVParamCategory_Ring
  //
  // (Value: 10) Indicates that the parameter is a ring.
  //
  LVParamCategory_Ring = 10;
  // Field: LVParamCategory_NumericArray
  //
  // (Value: 50) Indicates that the parameter is a an array of numbers. Numeric data types include enumerations, but do not include complex numbers. Data types associated with this category include LVParamType_Ext, LVParamType_Int16, LVParamType_Int32, LVParamType_Int64, LVParamType_Int8, LVParamType_Real32, LVParamType_Real64, LVParamType_UInt16, LVParamType_UInt32, LVParamType_UInt64, and LVParamType_UInt8.
  //
  LVParamCategory_NumericArray = 50;
  // Field: LVParamCategory_StringArray
  //
  // (Value: 51) Indicates that the parameter is an array of strings. Data types associated with this category include LVParamType_BinaryString, LVParamType_CString, LVParamType_PathString, and LVParamType_TimestampString.
  //
  LVParamCategory_StringArray = 51;
  // Field: LVParamCategory_BooleanArray
  //
  // (Value: 52) Indicates that the parameter is an array of Boolean values. This category does not have any associated data types.
  //
  LVParamCategory_BooleanArray = 52;
  // Field: LVParamCategory_ClusterArray
  //
  // (Value: 53) Indicates that the parameter is an array of clusters. Data types associated with this category include LVParamType_DigitalData, LVParamType_DigitalWaveform, LVParamType_ErrorOut, LVParamType_IO, LVParamType_Standard, LVParamType_TestData, and LVParamType_Waveform.
  //
  LVParamCategory_ClusterArray = 53;
  // Field: LVParamCategory_ReferenceArray
  //
  // (Value: 54) Indicates that the parameter is an array of COM references. Data types associated with this category include LVParamType_ActiveXRef, LVParamType_OtherRef, and LVParamType_LVClass but do not include LVParamType_IOCluster, which is considered a cluster data type.
  //
  LVParamCategory_ReferenceArray = 54;
  // Field: LVParamCategory_ComplexArray
  //
  // (Value: 55) Indicates that the parameter is an array of complex numbers. Data types associated with this category include LVParamType_Complex128, LVParamType_Complex64, and LVParamType_ComplexEx.
  //
  LVParamCategory_ComplexArray = 55;
  // Field: LVParamCategory_VariantArray
  //
  // (Value: 56) Indicates the parameter is an array of COM Variants. This category does not have any associated data types.
  //
  LVParamCategory_VariantArray = 56;
  // Field: LVParamCategory_EnumArray
  //
  // (Value: 58) Indicates that the parameter is an array of enumerations.
  //
  LVParamCategory_EnumArray = 58;
  // Field: LVParamCategory_RingArray
  //
  // (Value: 59) Indicates that the parameter is a ring array data type.
  //
  LVParamCategory_RingArray = 59;
}

// LabVIEWParameterTypes
//
// The LabVIEWParameter.Type and LabVIEWParameterElement.Type properties return one of the following constants to indicate the data type of the parameter. Before you get or set the parameter data type, also get or set the category with the LabVIEWParameter.Category or LabVIEWParameterElement.Category property.
//
enum LabVIEWParameterTypes {
  // Field: LVParamType_Int8
  //
  // (Value: 0) Indicates that the parameter is an 8-bit integer.
  //
  LVParamType_Int8 = 0;
  // Field: LVParamType_UInt8
  //
  // (Value: 1) Indicates that the parameter is an 8-bit unsigned integer.
  //
  LVParamType_UInt8 = 1;
  // Field: LVParamType_Int16
  //
  // (Value: 2) Indicates that the parameter is a 16-bit integer.
  //
  LVParamType_Int16 = 2;
  // Field: LVParamType_UInt16
  //
  // (Value: 3) Indicates that the parameter is a 16-bit unsigned integer.
  //
  LVParamType_UInt16 = 3;
  // Field: LVParamType_Int32
  //
  // (Value: 4)  Indicates that the parameter is a 32-bit integer.
  //
  LVParamType_Int32 = 4;
  // Field: LVParamType_UInt32
  //
  // (Value: 5) Indicates that the parameter is a 32-bit unsigned integer.
  //
  LVParamType_UInt32 = 5;
  // Field: LVParamType_Real32
  //
  // (Value: 6) Indicates that the parameter is a 32-bit real number.
  //
  LVParamType_Real32 = 6;
  // Field: LVParamType_Real64
  //
  // (Value: 7) Indicates that the parameter is a 64-bit real number.
  //
  LVParamType_Real64 = 7;
  // Field: LVParamType_Ext
  //
  // (Value: 8) Indicates that the parameter is an extended-precision number. TestStand treats parameters of this type as 64-bit floating point numbers, so some data could be lost.
  //
  LVParamType_Ext = 8;
  // Field: LVParamType_Complex64
  //
  // (Value: 9) Indicates that the parameter is a 64-bit complex number.
  //
  LVParamType_Complex64 = 9;
  // Field: LVParamType_Complex128
  //
  // (Value: 10) Indicates that the parameter is a 128-bit complex number. TestStand treats parameters of this type as two 64-bit floating point numbers.
  //
  LVParamType_Complex128 = 10;
  // Field: LVParamType_ComplexExt
  //
  // (Value: 11) Indicates that the parameter is an extended-precision complex number. TestStand treats parameters of this type as two 64-bit floating point numbers.
  //
  LVParamType_ComplexExt = 11;
  // Field: LVParamType_Int64
  //
  // (Value: 12) Indicates that the parameter is a 64-bit integer.
  //
  LVParamType_Int64 = 12;
  // Field: LVParamType_UInt64
  //
  // (Value: 13) Indicates that the parameter is a 64-bit unsigned integer.
  //
  LVParamType_UInt64 = 13;
  // Field: LVParamType_EnumUInt8
  //
  // (Value: 14) Indicates that the parameter is an enumeration represented by an 8-bit unsigned integer.
  //
  LVParamType_EnumUInt8 = 14;
  // Field: LVParamType_EnumUInt16
  //
  // (Value: 15) Indicates that the parameter is an enumeration represented by a 16-bit unsigned integer.
  //
  LVParamType_EnumUInt16 = 15;
  // Field: LVParamType_EnumUInt32
  //
  // (Value: 16) Indicates that the parameter is an enumeration represented by a 32-bit unsigned integer.
  //
  LVParamType_EnumUInt32 = 16;
  // Field: LVParamType_StandardCluster
  //
  // (Value: 20) Indicates that the parameter is a standard cluster.
  //
  LVParamType_StandardCluster = 20;
  // Field: LVParamType_IO
  //
  // (Value: 21) Indicates that the parameter is an I/O control reference cluster.
  //
  LVParamType_IO = 21;
  // Field: LVParamType_DigitalData
  //
  // (Value: 22) Indicates that the parameter is a Digital Data type. For parameters of this LabVIEW data type, use the TestStand LabVIEWDigitalData data type as a parameter value.
  //
  LVParamType_DigitalData = 22;
  // Field: LVParamType_AnalogWaveform
  //
  // (Value: 23) Indicates that the parameter is an Analog Waveform type. For parameters of this LabVIEW data type, use the TestStand LabVIEWAnalogWaveform data type as a parameter value. Note: If the Y element representation of an analog waveform is set to Quad or Unsigned Quad, do not use the LabVIEWAnalogWaveform data type because the representation of the Y element for the type is set to double-precision, 64-bit floating-point, which cannot store a Quad or unsigned Quad value without the risk of losing precision. In these cases, create a new custom data type and set the representation of the Y element to signed 64-bit integer or unsigned 64-bit integer, respectively.
  //
  LVParamType_AnalogWaveform = 23;
  // Field: LVParamType_DigitalWaveform
  //
  // (Value: 24) Indicates that the parameter is a Digital Waveform type. For parameters of this LabVIEW data type, use the TestStand LabVIEWDigitalWaveform data type as a parameter value.
  //
  LVParamType_DigitalWaveform = 24;
  // Field: LVParamType_DynamicData
  //
  // (Value: 25) Indicates that the parameter is a Dynamic Data type.
  //
  LVParamType_DynamicData = 25;
  // Field: LVParamType_TestData
  //
  // (Value: 0x21) Indicates that the parameter is a legacy TestData data type.
  //
  LVParamType_TestData = 33;
  // Field: LVParamType_ErrorOut
  //
  // (Value: 0x22) Indicates that the parameter is an error out type. For parameters of this LabVIEW data type, use the TestStand Error data type as a parameter value.
  //
  LVParamType_ErrorOut = 34;
  // Field: LVParamType_ActiveXRef
  //
  // (Value: 0x40) Indicates that the parameter is an ActiveX reference.
  //
  LVParamType_ActiveXRef = 64;
  // Field: LVParamType_DotNetRef
  //
  // (Value: 0x41) Indicates that the parameter is a .NET reference.
  //
  LVParamType_DotNetRef = 65;
  // Field: LVParamType_LVObjectRef
  //
  // (Value: 0x42) Indicates that the parameter is a LabVIEW VI or application reference. TestStand treats such references as unsigned, numeric long values.
  //
  LVParamType_LVObjectRef = 66;
  // Field: LVParamType_OtherRef
  //
  // (Value: 0x43) Indicates that the parameter is a LabVIEW reference but not an I/O control reference. TestStand treats such references as unsigned, numeric long values.
  //
  LVParamType_OtherRef = 67;
  // Field: LVParamType_LVClass
  //
  // (Value: 0x44) Indicates that the parameter is a LabVIEW class.
  //
  LVParamType_LVClass = 68;
  // Field: LVParamType_String
  //
  // (Value: 0x60) Indicates that the parameter is a string that contains binary data. Use the LabVIEWParameter.PassAsBinaryString property to instruct TestStand to preserve NUL bytes by unescaping a TestStand string before assigning a value to a LabVIEW control, and by escaping a binary string from a LabVIEW indicator before storing in TestStand.
  //
  LVParamType_String = 96;
  // Field: LVParamType_PathString
  //
  // (Value: 0x62) Indicates that the parameter is a path. TestStand treats paths as C-strings.
  //
  LVParamType_PathString = 98;
  // Field: LVParamType_TimestampString
  //
  // (Value: 0x63) Indicates that the parameter is a timestamp, which TestStand treats as a C-string.
  //
  LVParamType_TimestampString = 99;
  // Field: LVParamType_Unspecified
  //
  // (Value: 200) Indicates that the parameter has an unspecified data type because the category does not have any associated data types.
  //
  LVParamType_Unspecified = 200;
}

// LabVIEWParameterDirections
//
// The LabVIEWParameter.Direction property returns one of the following constants to indicate how the module passes the parameter when it executes.
//
enum LabVIEWParameterDirections {
  // Field: LVParamDirection_In
  //
  // (Value: 0) Indicates that the parameter is passed to the VI.
  //
  LVParamDirection_In = 0;
  // Field: LVParamDirection_Out
  //
  // (Value: 1) Indicates that the parameter is returned from the VI.
  //
  LVParamDirection_Out = 1;
}

// LabVIEWParameterWireRequirements
//
// The LabVIEWParameter.WireRequirement property returns one of the following constants to indicate if the module can pass a default value for the parameter.
//
enum LabVIEWParameterWireRequirements {
  // Field: LVParamWireReq_Required
  //
  // (Value: 0) Indicates that the module must pass a value for the parameter.
  //
  LVParamWireReq_Required = 0;
  // Field: LVParamWireReq_Recommended
  //
  // (Value: 1) Indicates that the module can use the default value for the parameter. However, passing a value is recommended.
  //
  LVParamWireReq_Recommended = 1;
  // Field: LVParamWireReq_Optional
  //
  // (Value: 2) Indicates that the module can use the default value for the parameter instead of passing a value.
  //
  LVParamWireReq_Optional = 2;
}

// SeqCallTraceSettings
//
// Use these constants with the SequenceCallModule.TraceSetting property to control tracing calls to the specified subsequence of the module.
//
enum SeqCallTraceSettings {
  SeqCallTraceSettings_reservedZero = 0;
  // Field: SeqCallTrace_UseCurrent
  //
  // (Value: 1) Specifies to maintain the current tracing state when calling the subsequence. This is the default value for the SequenceCallModule.TraceSetting property. Usually, only process model files use other values for this option.
  //
  SeqCallTrace_UseCurrent = 1;
  // Field: SeqCallTrace_Enable
  //
  // (Value: 2) Specifies to enable tracing for calls to the subsequence and restores the original tracing state when the subsequence returns.
  //
  SeqCallTrace_Enable = 2;
  // Field: SeqCallTrace_Disable
  //
  // (Value: 3) Specifies to disable tracing for calls to the subsequence and restores the original tracing state when the subsequence returns. However, if you enable the Allow Tracing into Sequence Calls Marked with Tracing "Disabled" option on the Execution tab of the Station Options dialog box, TestStand ignores this setting and does not alter the tracing state.
  //
  SeqCallTrace_Disable = 3;
  // Field: SeqCallTrace_UseExecutionSetting
  //
  // (Value: 4) Specifies to enable the tracing state unless the execution was created with tracing disabled. Typically, a process model uses this setting to control the tracing state when the model calls the MainSequence in the client sequence file.
  //
  SeqCallTrace_UseExecutionSetting = 4;
}

// SeqCallMultithreadOptions
//
// Use these constants with the SequenceCallModule.MultithreadingAndRemoteExecOption property to call the subsequence in a new execution, a new thread, or on a remote computer when executing the module.
//
enum SeqCallMultithreadOptions {
  // Field: SeqCallMultithread_None
  //
  // (Value: 0) Specifies to call the subsequence in the current thread and execution on the current computer.
  //
  SeqCallMultithread_None = 0;
  // Field: SeqCallMultithread_NewThread
  //
  // (Value: 1) Specifies to call the subsequence in a new thread.
  //
  SeqCallMultithread_NewThread = 1;
  // Field: SeqCallMultithread_NewExecution
  //
  // (Value: 2) Specifies to call the subsequence in a new execution.
  //
  SeqCallMultithread_NewExecution = 2;
  // Field: SeqCallMultithread_Remote
  //
  // (Value: 0x100) Specifies to call the subsequence on a remote computer.
  //
  SeqCallMultithread_Remote = 256;
}

// module 

// SeqCallNewThreadOptions
//
// Use the following constants with the SequenceCallModule.NewThreadOptions property to specify the options to apply when calling a subsequence in a separate thread. Use the bitwise-AND operator to determine whether any of these options are set when obtaining the property value. Use the bitwise-OR operator to set more than one option when setting the property value.
//
enum SeqCallNewThreadOptions {
  SeqCallNewThreadOptions_reservedZero = 0;
  // Field: SeqCallThread_WaitForThreadCompletion
  //
  // (Value: 0x1) Specifies that the calling sequence waits for the thread it launches to complete before the calling sequence returns.
  //
  SeqCallThread_WaitForThreadCompletion = 1;
  // Field: SeqCallThread_InitiallySuspended
  //
  // (Value: 0x2) Specifies that TestStand creates the new thread in a suspended state. You can call the Thread.Resume method to start the thread.
  //
  SeqCallThread_InitiallySuspended = 2;
  // Field: SeqCallThread_UseSingleThreadedApartment
  //
  // (Value: 0x4) Specifies to initialize the concurrency model of the thread as single-threaded apartment. By default, TestStand initializes new executions and threads to use the multithreaded apartment model. A thread must use the single-threaded apartment model if the thread creates or launches a dialog box that contains ActiveX controls.
  //
  SeqCallThread_UseSingleThreadedApartment = 4;
}

// SeqCallNewExecModelOptions
//
// Use these constants with the SequenceCallModule.NewExecutionModelOption property to specify which process model the new execution uses.
//
enum SeqCallNewExecModelOptions {
  // Field: SeqCallNewExecModel_None
  //
  // (Value: 0) The new execution does not run under a process model.
  //
  SeqCallNewExecModel_None = 0;
  // Field: SeqCallNewExecModel_UseModelOfCurrentFile
  //
  // (Value: 1) When you set this option, the execution runs under the model the sequence file you call specifies. If the file you call does not specify a model, the execution runs under the default station model. You can use the SequenceCallModule.SequenceName property to designate which entry point to call in the process model. Typically, the Process Model entry point calls the MainSequence in the client sequence file you specify.
  //
  SeqCallNewExecModel_UseModelOfCurrentFile = 1;
  // Field: SeqCallNewExecModel_SpecifyModel
  //
  // (Value: 2) When you set this option, you can use the SequenceCallModule.NewExecutionModelPath property to specify the process model under which the new execution runs. You can also use the SequenceCallModule.SequenceName property to specify which entry point to call in the process model. Typically, the Process Model entry point calls the MainSequence in the client sequence file you specify.
  //
  SeqCallNewExecModel_SpecifyModel = 2;
}

// SeqCallWaitForExecOptions
//
// Use these constants with the SequenceCallModule.NewExecutionWaitForCompletion property to specify whether to wait for the execution to complete.
//
enum SeqCallWaitForExecOptions {
  // Field: SeqCallWait_DoNotWait
  //
  // (Value: 0) The calling sequence does not wait for the execution to complete.
  //
  SeqCallWait_DoNotWait = 0;
  // Field: SeqCallWait_BeforeNextStep
  //
  // (Value: 1) The calling sequence waits for the execution to complete before it executes another step.
  //
  SeqCallWait_BeforeNextStep = 1;
  // Field: SeqCallWait_EndOfSequence
  //
  // (Value: 2) The calling sequence waits for the execution to complete before the calling sequence returns.
  //
  SeqCallWait_EndOfSequence = 2;
}

// HTBasicWorkingDirTypes
//
// Use these constants with the HTBasicModule.WorkingDirectory property to specify the working directory for the HTBasic server before invoking the subroutine. Enable this option if the test code assumes a particular working directory path.
//
enum HTBasicWorkingDirTypes {
  // Field: HTBasicWorkingDir_AdapterDefault
  //
  // (Value: 0) Use the setting specified for the HTBasic Adapter.
  //
  HTBasicWorkingDir_AdapterDefault = 0;
  // Field: HTBasicWorkingDir_DoNotChange
  //
  // (Value: 1) Do not change the working directory for the HTBasic server.
  //
  HTBasicWorkingDir_DoNotChange = 1;
  // Field: HTBasicWorkingDir_HTBasicServer
  //
  // (Value: 2) Use the directory in which the HTBasic server is located.
  //
  HTBasicWorkingDir_HTBasicServer = 2;
  // Field: HTBasicWorkingDir_SubroutineFileDir
  //
  // (Value: 3) Use the directory in which the subroutine file is located.
  //
  HTBasicWorkingDir_SubroutineFileDir = 3;
  // Field: HTBasicWorkingDir_Specify
  //
  // (Value: 4) Use the directory specified in the HTBasicModule.WorkingDirectorySpecifiedPath property.
  //
  HTBasicWorkingDir_Specify = 4;
}

// DotNetModuleAssemblyLocations
//
// Use these constants with the DotNetModule.SetAssembly method to specify whether the assembly is located in a file or in the global assembly cache (GAC).
//
enum DotNetModuleAssemblyLocations {
  // Field: DotNetModule_AssemblyLocation_File
  //
  // (Value: 0) Located in a file, such as a DLL.
  //
  DotNetModule_AssemblyLocation_File = 0;
  // Field: DotNetModule_AssemblyLocation_GAC
  //
  // (Value: 1) Located in the GAC.
  //
  DotNetModule_AssemblyLocation_GAC = 1;
}

// DotNetModuleMemberTypes
//
// Use these constants with the DotNetCall.MemberType property to specify the type of member the module accesses when it executes.
//
enum DotNetModuleMemberTypes {
  // Field: DotNetMember_DoNotCall
  //
  // (Value: 0) Specifies that you have not completely specified the DotNetCall object and that the object does not call a method or access a property or field.
  //
  DotNetMember_DoNotCall = 0;
  // Field: DotNetMember_CallMethod
  //
  // (Value: 1) Specifies that the DotNetCall object calls a method.
  //
  DotNetMember_CallMethod = 1;
  // Field: DotNetMember_GetProperty
  //
  // (Value: 2) Specifies that the DotNetCall object gets a property.
  //
  DotNetMember_GetProperty = 2;
  // Field: DotNetMember_SetProperty
  //
  // (Value: 3) Specifies that the DotNetCall object sets a property.
  //
  DotNetMember_SetProperty = 3;
  // Field: DotNetMember_CallConstructor
  //
  // (Value: 4) Specifies that the DotNetCall object calls a constructor.
  //
  DotNetMember_CallConstructor = 4;
  // Field: DotNetMember_CreateRemote
  //
  // (Value: 5) Specifies that the DotNetCall object creates a remote object.
  //
  DotNetMember_CreateRemote = 5;
  // Field: DotNetMember_UseExisting
  //
  // (Value: 6) Specifies that the DotNetCall object uses an existing object a TestStand variable specifies as the .NET object on which to make the next call.
  //
  DotNetMember_UseExisting = 6;
}

// module 

// DotNetModuleMemberFlags
//
enum DotNetModuleMemberFlags {
  DotNetModuleMemberFlags_reservedZero = 0;
  // Field: DotNetMemberFlags_Static
  //
  DotNetMemberFlags_Static = 1;
  // Field: DotNetMemberFlags_TopLevel
  //
  DotNetMemberFlags_TopLevel = 2;
}

// module 

// DotNetParameterFlags
//
// The DotNetParameter.Flags property returns the following constants to indicate certain attributes of the parameter. Use the bitwise-AND operator to determine whether any of these flags are set when obtaining the property value.
//
enum DotNetParameterFlags {
  DotNetParameterFlags_reservedZero = 0;
  // Field: DotNetParamFlags_Lcid
  //
  // (Value: 0x4) Indicates that the parameter is a locale identifier.
  //
  DotNetParamFlags_Lcid = 4;
  // Field: DotNetParamFlags_Optional
  //
  // (Value: 0x10) Indicates that the parameter is optional.
  //
  DotNetParamFlags_Optional = 16;
  // Field: DotNetParamFlags_IsArray
  //
  // (Value: 0x100) Indicates that the parameter is an array.
  //
  DotNetParamFlags_IsArray = 256;
}

// DotNetParameterTypes
//
// The DotNetParameter.Type property returns one of the following constants to indicate the data type of the parameter:
//
enum DotNetParameterTypes {
  // Field: DotNetParamType_Class
  //
  // (Value: 0) Indicates that the parameter is a class reference.
  //
  DotNetParamType_Class = 0;
  // Field: DotNetParamType_String
  //
  // (Value: 1) Indicates that the parameter is a string.
  //
  DotNetParamType_String = 1;
  // Field: DotNetParamType_Boolean
  //
  // (Value: 2) Indicates that the parameter is a Boolean type.
  //
  DotNetParamType_Boolean = 2;
  // Field: DotNetParamType_Byte
  //
  // (Value: 3) Indicates that the parameter is a single-byte value.
  //
  DotNetParamType_Byte = 3;
  // Field: DotNetParamType_SByte
  //
  // (Value: 4) Indicates that the parameter is a signed-byte value.
  //
  DotNetParamType_SByte = 4;
  // Field: DotNetParamType_Int16
  //
  // (Value: 5) Indicates that the parameter is a 16-bit integer.
  //
  DotNetParamType_Int16 = 5;
  // Field: DotNetParamType_Int32
  //
  // (Value: 6) Indicates that the parameter is a 32-bit integer.
  //
  DotNetParamType_Int32 = 6;
  // Field: DotNetParamType_Int64
  //
  // (Value: 7) Indicates that the parameter is a 64-bit integer.
  //
  DotNetParamType_Int64 = 7;
  // Field: DotNetParamType_UInt16
  //
  // (Value: 8) Indicates that the parameter is a 16-bit unsigned integer.
  //
  DotNetParamType_UInt16 = 8;
  // Field: DotNetParamType_UInt32
  //
  // (Value: 9) Indicates that the parameter is a 32-bit unsigned integer.
  //
  DotNetParamType_UInt32 = 9;
  // Field: DotNetParamType_UInt64
  //
  // (Value: 10) Indicates that the parameter is a 64-bit unsigned integer.
  //
  DotNetParamType_UInt64 = 10;
  // Field: DotNetParamType_Single
  //
  // (Value: 11) Indicates that the parameter is a 32-bit single-precision floating point number.
  //
  DotNetParamType_Single = 11;
  // Field: DotNetParamType_Double
  //
  // (Value: 12) Indicates that the parameter is a 64-bit double-precision floating point number.
  //
  DotNetParamType_Double = 12;
  // Field: DotNetParamType_Decimal
  //
  // (Value: 13) Indicates that the parameter is a 96-bit numeric value. TestStand treats parameters of this type as 64-bit floating point numbers, so some data could be lost.
  //
  DotNetParamType_Decimal = 13;
  // Field: DotNetParamType_Char
  //
  // (Value: 14) Indicates that the parameter is a 16-bit Unicode character.
  //
  DotNetParamType_Char = 14;
  // Field: DotNetParamType_IntPtr
  //
  // (Value: 15) A platform-specific type that stores a pointer or a handle. For a 32-bit process, the pointer or handle is stored as a 32-bit integer. For a 64-bit process, the pointer or handle is stored as a 64-bit integer.
  //
  DotNetParamType_IntPtr = 15;
  // Field: DotNetParamType_Enum
  //
  // (Value: 16) Indicates that the parameter is an enumeration value.
  //
  DotNetParamType_Enum = 16;
  // Field: DotNetParamType_Object
  //
  // (Value: 17) Indicates that the parameter is an object reference.
  //
  DotNetParamType_Object = 17;
  // Field: DotNetParamType_Struct
  //
  // (Value: 18) Indicates that the parameter is a struct.
  //
  DotNetParamType_Struct = 18;
  // Field: DotNetParamType_Void
  //
  // (Value: 19) Indicates that the parameter is a void parameter; therefore, it has no value. This type applies only to return values.
  //
  DotNetParamType_Void = 19;
  // Field: DotNetParamType_UIntPtr
  //
  // (Value: 20) A platform-specific type that stores a pointer or a handle. For a 32-bit process, the pointer or handle is stored as an unsigned 32-bit integer. For a 64-bit process, the pointer or handle is stored as an unsigned 64-bit integer.
  //
  DotNetParamType_UIntPtr = 20;
}

// module 

// DotNetParameterDirections
//
// The DotNetParameter.Direction property returns one or more of the following constants to indicate the direction of the parameter. Use the bitwise-AND operator to determine which of these flags are set when obtaining the property value.
//
enum DotNetParameterDirections {
  DotNetParameterDirections_reservedZero = 0;
  // Field: DotNetParamDirection_In
  //
  // (Value: 0x1) Indicates that the parameter is an input parameter.
  //
  DotNetParamDirection_In = 1;
  // Field: DotNetParamDirection_Out
  //
  // (Value: 0x2) Indicates that the parameter is an output parameter.
  //
  DotNetParamDirection_Out = 2;
  // Field: DotNetParamDirection_Return
  //
  // (Value: 0x4) Indicates that the parameter is a return value.
  //
  DotNetParamDirection_Return = 4;
}

// LabVIEWVITypes
//
// Use these constants with the LabVIEWModule.VIType property to specify the type of VI the LabVIEW module calls.
//
enum LabVIEWVITypes {
  // Field: LVVIType_Standard
  //
  // (Value: 0) Indicates that the VI module calls a standard VI.
  //
  LVVIType_Standard = 0;
  // Field: LVVIType_Express
  //
  // (Value: 1) Indicates that the VI module calls an Express VI.
  //
  LVVIType_Express = 1;
}

// ImportVITypes
//
// Use these constants with the LabVIEWModule.ImportVI method to specify the type of VI to import to the module.
//
enum ImportVITypes {
  // Field: ImportVIType_ExpressVIWrapper
  //
  // (Value: 0) Indicates that the VI to import is a TestStand-generated Express VI wrapper.
  //
  ImportVIType_ExpressVIWrapper = 0;
  // Field: ImportVIType_ExpressVITemplate
  //
  // (Value: 1) Indicates that the VI to import is an Express VI template. When you use this option, TestStand generates a wrapper VI to call the given Express VI template and imports the generated wrapper VI into the module.
  //
  ImportVIType_ExpressVITemplate = 1;
  // Field: ImportVIType_PropertyNodeVIWrapper
  //
  // (Value: 2) Indicates that the VI to import is a TestStand-generated LabVIEW Property Node VI wrapper.
  //
  ImportVIType_PropertyNodeVIWrapper = 2;
  // Field: ImportVIType_PropertyNodeVICreate
  //
  // (Value: 3) When you use this option, TestStand generates a wrapper VI to call the LabVIEW Property Node and selected properties already configured in the step. TestStand imports the generated wrapper VI into the code module.
  //
  ImportVIType_PropertyNodeVICreate = 3;
}

// DeployProjectLibraryOptions
//
// Use the following constants with the LabVIEWAdapter.DeployProjectLibrary method to specify whether to deploy or undeploy a LabVIEW project library file:
//
enum DeployProjectLibraryOptions {
  // Field: DeployProjectLibraryOption_Deploy
  //
  // (Value: 0) Specifies to deploy the LabVIEW project library file.
  //
  DeployProjectLibraryOption_Deploy = 0;
  // Field: DeployProjectLibraryOption_Undeploy
  //
  // (Value: 1) Specifies to undeploy the LabVIEW project library file.
  //
  DeployProjectLibraryOption_Undeploy = 1;
}

// module 

// ExpressVIMenuItemProperties
//
// Use these property names with the property objects the LabVIEWAdapter.GetExpressVIMenuStructure method returns to access information about menu structures.
//
service ExpressVIMenuItemProperties {
  // Field: ExpressVIMenu_NameProp
  //
  // (Value: ItemName) String value that specifies the text to display for the menu item.
  //
  rpc Get_ExpressVIMenu_NameProp(ConstantValueRequest) returns (stringResponse);
  // Field: ExpressVIMenu_PathProp
  //
  // Value: ItemPath) String value that specifies the absolute path to the Express VI.
  //
  rpc Get_ExpressVIMenu_PathProp(ConstantValueRequest) returns (stringResponse);
  // Field: ExpressVIMenu_IconProp
  //
  // (Value: IconHandle) Numeric value that is the handle in a metafile that contains the icon of the Express VI.
  //
  rpc Get_ExpressVIMenu_IconProp(ConstantValueRequest) returns (stringResponse);
  // Field: ExpressVIMenu_IsSubmenuProp
  //
  // (Value: IsSubMenu) Boolean value that specifies whether the menu item is a submenu. Use ExpressVIMenu_MenuItemsProp to access the submenu items.
  //
  rpc Get_ExpressVIMenu_IsSubmenuProp(ConstantValueRequest) returns (stringResponse);
  // Field: ExpressVIMenu_SeparatorAboveProp
  //
  // (Value: SeparatorAbove) Boolean value that specifies whether a separator exists above the menu item.
  //
  rpc Get_ExpressVIMenu_SeparatorAboveProp(ConstantValueRequest) returns (stringResponse);
  // Field: ExpressVIMenu_MenuItemsProp
  //
  // (Value: MenuItems) PropertyObject array that represents the menu items in a submenu.
  //
  rpc Get_ExpressVIMenu_MenuItemsProp(ConstantValueRequest) returns (stringResponse);
}

// DllCodeCreationTargets
//
// Use these constants for the DllModule.CodeCreationTarget property.
//
enum DllCodeCreationTargets {
  // Field: DllCodeCreationTarget_TextFile
  //
  // (Value: 0) Specifies that the C/C++ DLL Module creates and edits code using the default application Microsoft Windows associates with the file extension of the source file.
  //
  DllCodeCreationTarget_TextFile = 0;
  // Field: DllCodeCreationTarget_VisualStudio
  //
  // (Value: 1) Specifies the C/C++ DLL Module creates and edits code in Microsoft Visual Studio.
  //
  DllCodeCreationTarget_VisualStudio = 1;
}

// CommonCVerifyPrototypeResults
//
// Use these constants with the result parameter the CommonCModule.VerifyPrototype method returns.
//
enum CommonCVerifyPrototypeResults {
  // Field: CommonCVerifyPrototypeResult_PrototypesMatch
  //
  // (Value: 0) Specifies that the prototype the source code specifies matches the currently loaded parameters.
  //
  CommonCVerifyPrototypeResult_PrototypesMatch = 0;
  // Field: CommonCVerifyPrototypeResult_ModuleUpdated
  //
  // (Value: 1) Specifies that the CommonCModule.VerifyPrototype method modified the currently loaded parameters to match the prototype the source code specifies.
  //
  CommonCVerifyPrototypeResult_ModuleUpdated = 1;
  // Field: CommonCVerifyPrototypeResult_SourceUpdated
  //
  // (Value: 2) Specifies that the CommonCModule.VerifyPrototype method modified the source code to match the prototype the currently loaded parameters specify.
  //
  CommonCVerifyPrototypeResult_SourceUpdated = 2;
  // Field: CommonCVerifyPrototypeResult_UserCancelled
  //
  // (Value: 3) Specifies that the CommonCModule.VerifyPrototype method prompted the user to update the module or source code, but the user cancelled the dialog box.
  //
  CommonCVerifyPrototypeResult_UserCancelled = 3;
}

// module 

// VisualStudioDTEVersions
//
// Use the following constants with the DotNetAdapter.VisualStudioDTEVersionForEditing, DotNetAdapter.VisualStudioDTEVersionForDebugging, DllAdapter.VisualStudioDTEVersionForEditing, and DllAdapter.VisualStudioDTEVersionForDebugging properties.
//
service VisualStudioDTEVersions {
  // Field: VisualStudioDTEVersion_AlwaysPrompt
  //
  // (Value: "AlwaysPrompt") Prompt for each operation to select a version of the Visual Studio DTE. If only one version of the DTE is installed, the adapter does not prompt and instead uses the installed version.
  //
  rpc Get_VisualStudioDTEVersion_AlwaysPrompt(ConstantValueRequest) returns (stringResponse);
  // Field: VisualStudioDTEVersion_MatchProject
  //
  // (Value: "MatchProject") Use the Visual Studio DTE version that corresponds to the project file the step specifies. If only one version of the DTE is installed, the adapter ignores this value and always uses the installed version. If the version of the DTE that corresponds to the project file is not installed, but more than one version of the DTE is installed, the adapter prompts the user to select which version to use. This option applies only to the DotNetAdapter.VisualStudioDTEVersionForEditing and DllAdapter.VisualStudioDTEVersionForEditing properties.
  //
  rpc Get_VisualStudioDTEVersion_MatchProject(ConstantValueRequest) returns (stringResponse);
  // Field: VisualStudioDTEVersion_2015
  //
  // (Value: "VisualStudio.DTE.14.0") The adapter uses the Microsoft Visual Studio 2015 DTE, if installed. If only one version of the DTE is installed, the adapter ignores this value and always uses the installed version. If the Visual Studio 2015 DTE is not installed, but more than one version of the DTE is installed, the adapter prompts the user to select which version to use.
  //
  rpc Get_VisualStudioDTEVersion_2015(ConstantValueRequest) returns (stringResponse);
  // Field: VisualStudioDTEVersion_2017
  //
  // (Value: "VisualStudio.DTE.15.0") The adapter uses the Microsoft Visual Studio 2017 DTE, if installed. If only one version of the DTE is installed, the adapter ignores this value and always uses the installed version. If the Visual Studio 2017 DTE is not installed, but more than one version of the DTE is installed, the adapter prompts the user to select which version to use.
  //
  rpc Get_VisualStudioDTEVersion_2017(ConstantValueRequest) returns (stringResponse);
  // Field: VisualStudioDTEVersion_2019
  //
  // (Value: "VisualStudio.DTE.16.0") The adapter uses the Microsoft Visual Studio 2019 DTE, if installed. If only one version of the DTE is installed, the adapter ignores this value and always uses the installed version. If the Visual Studio 2019 DTE is not installed, but more than one version of the DTE is installed, the adapter prompts the user to select which version to use.
  //
  rpc Get_VisualStudioDTEVersion_2019(ConstantValueRequest) returns (stringResponse);
}

// module 

// DotNetAdapterGetMemberNamesOptions
//
// Use these constants with the options parameter of the DotNetAdapter.GetMemberNames method. If you pass no option (Value: 0x0), the adapter retrieves non-instance members only, including constructors, static members, and special options, such as Create Remote Object and Use Existing Object.
//
enum DotNetAdapterGetMemberNamesOptions {
  DotNetAdapterGetMemberNamesOptions_reservedZero = 0;
  // Field: DotNetAdapterGetMemberNamesOption_InstanceMembers
  //
  // (Value: 0x1) The DotNetAdapter.GetMemberNames method retrieves only instance members. The adapter does not retrieve static members or constructors.
  //
  DotNetAdapterGetMemberNamesOption_InstanceMembers = 1;
}

// LabVIEWProjectPathTypes
//
// Use these constants with the LabVIEWModule.DisplaySelectVIFromProjectDialog, LabVIEWModule.GetProjectUrlPathsForVIs, and LabVIEWModule.FindVIUrlUsingVIPath methods to specify the LabVIEW project path property to use.
//
enum LabVIEWProjectPathTypes {
  // Field: LVProjectPathType_Local
  //
  // (Value: 0) Indicates to use the LabVIEWModule.ProjectPath property.
  // 
  //
  LVProjectPathType_Local = 0;
  // Field: LVProjectPathType_Remote
  //
  // (Value: 1) Indicates to use the LabVIEWModule.RemoteProjectPath property.
  //
  LVProjectPathType_Remote = 1;
}

// module 

// ImportVIOptions
//
// Use these constants with the options parameter of the LabVIEWModule.ImportVI method. Use the bitwise-OR operator to specify more than one option.
//
enum ImportVIOptions {
  // Field: ImportVIOption_NoOptions
  //
  // (Value: 0) No options.
  //
  ImportVIOption_NoOptions = 0;
  // Field: ImportVIOption_ConfigureExpressVI
  //
  // (Value: 0x1) Specifies to configure the Express VI before importing it into the code module. This option is valid only when you pass the ImportVIType_ExpressVITemplate enumeration for the type parameter of the LabVIEWModule.ImportVI method.
  //
  ImportVIOption_ConfigureExpressVI = 1;
}

// LabVIEWCallTypes
//
// Use these constants with the LabVIEWModule.CallType property to specify the type of call the LabVIEW module executes.
//
enum LabVIEWCallTypes {
  // Field: LVCallType_VI_Call
  //
  // (Value: 0) Indicates that the VI code module calls a VI without LabVIEW dynamic dispatching.
  //
  LVCallType_VI_Call = 0;
  // Field: LVCallType_Class_Member_Call
  //
  // (Value: 1) Indicates that the VI code module calls a LabVIEW class member VI with dynamic dispatching enabled.
  //
  LVCallType_Class_Member_Call = 1;
  // Field: LVCallType_Property_Node_Call
  //
  // (Value: 2) Indicates that the VI code module calls a LabVIEW Property Node.
  //
  LVCallType_Property_Node_Call = 2;
}

// module 

// LabVIEWPropertyOptions
//
// Use these constants with the LabVIEWAdapter.GetPropertiesForNodeClass and LabVIEWAdapter.GetPropertiesForLabVIEWClass methods to obtain options for the properties.
//
enum LabVIEWPropertyOptions {
  LabVIEWPropertyOptions_reservedZero = 0;
  // Field: LVPropertyOption_Read
  //
  // (Value: 0x1) Indicates that you can read the property.
  //
  LVPropertyOption_Read = 1;
  // Field: LVPropertyOption_Write
  //
  // (Value: 0x2) Indicates that you can write to the property.
  //
  LVPropertyOption_Write = 2;
  // Field: LVPropertyOption_Default
  //
  // (Value: 0x4) Indicates that the property can use the default value.
  //
  LVPropertyOption_Default = 4;
}

// LabVIEWNodePropertyDirections
//
// The LabVIEWNodeProperty.Direction property returns one of these constants to indicate how the code module passes the property when it executes.
//
enum LabVIEWNodePropertyDirections {
  // Field: LVNodePropertyDirection_In
  //
  // (Value: 0) Indicates that TestStand passes the property to the VI.
  //
  LVNodePropertyDirection_In = 0;
  // Field: LVNodePropertyDirection_Out
  //
  // (Value: 1) Indicates that the VI returns the property.
  //
  LVNodePropertyDirection_Out = 1;
  // Field: LVNodePropertyDirection_Default
  //
  // (Value: 2) Indicates that the property uses the default value.
  //
  LVNodePropertyDirection_Default = 2;
}

// LabVIEWNodeOperationModes
//
// Use these constants with the LabVIEWModule.NodeOperationMode property to indicate the behavior of the Configure Property Node dialog box.
//
enum LabVIEWNodeOperationModes {
  // Field: LVNodeOperationMode_Default
  //
  // (Value: 0) Indicates that the Configure Property Node dialog box operates in default mode.
  //
  LVNodeOperationMode_Default = 0;
  // Field: LVNodeOperationMode_Restricted
  //
  // (Value: 1) Indicates that the Configure Property Node dialog box operates in restricted mode.
  //
  LVNodeOperationMode_Restricted = 1;
}

// LabVIEWDevelopmentEnvironmentBitnessOptions
//
// Use these constants with the LabVIEWAdapter.LabVIEWDevelopmentEnvironmentBitness property to specify the bitness of the LabVIEW Development Environment version to use.
//
enum LabVIEWDevelopmentEnvironmentBitnessOptions {
  // Field: LVDevelopmentEnvironmentBitness_Default
  //
  // (Value: 0) Launches the current active 32-bit or 64-bit LabVIEW development environment, with a preference to match the bitness of TestStand.
  //
  LVDevelopmentEnvironmentBitness_Default = 0;
  // Field: LVDevelopmentEnvironmentBitness_32bit
  //
  // (Value: 1) Launches the current active 32-bit LabVIEW development environment.
  //
  LVDevelopmentEnvironmentBitness_32bit = 1;
  // Field: LVDevelopmentEnvironmentBitness_64bit
  //
  // (Value: 2) Launches the current active 64-bit LabVIEW development environment.
  //
  LVDevelopmentEnvironmentBitness_64bit = 2;
}

// module 

// LabVIEWNXGModuleCallOptions
//
// Use the following constants with the LabVIEWNXGModule.VICallOptions method to get or set options for calling the VI for the module. Use the bitwise-AND operator to determine whether either of these flags are set when obtaining the property value. Use the bitwise-OR operator to set both flags when setting the property value.
//
enum LabVIEWNXGModuleCallOptions {
  // Field: LabVIEWNXGModuleCallOption_None
  //
  // (Value: 0) Specifies no options when executing the VI of the module.
  //
  LabVIEWNXGModuleCallOption_None = 0;
  // Field: LabVIEWNXGModuleCallOption_ReserveforExecution
  //
  // (Value: 1) Specifies to reserve the loaded VI of the module before execution.
  //
  LabVIEWNXGModuleCallOption_ReserveforExecution = 1;
  // Field: LabVIEWNXGModuleCallOption_RunInRuntimeEngine
  //
  // (Value: 2) Specifies to run the loaded VI in the LabVIEW NXG run-time engine.
  //
  LabVIEWNXGModuleCallOption_RunInRuntimeEngine = 2;
  // Field: LabVIEWNXGModuleCallOption_MakeFrontPanelModal
  //
  // (Value: 4) Specifies to display the front panel of the loaded VI as a dialog box that is modal to TestStand's main window.
  //
  LabVIEWNXGModuleCallOption_MakeFrontPanelModal = 4;
  // Field: LabVIEWNXGModuleCallOption_BringFrontPaneltoFront
  //
  // (Value: 8) Specifies to display the front panel of the loaded VI as a dialog box that is in front of TestStand's main window.
  //
  LabVIEWNXGModuleCallOption_BringFrontPaneltoFront = 8;
}

// LabVIEWNXGParameterCategories
//
// Specifies the data type of the NXG parameter.
//
enum LabVIEWNXGParameterCategories {
  // Field: LabVIEWNXGParamCategory_Numeric
  //
  // (Value: 0) Indicates that the parameter is a numeric data type. Numeric data types include enumerations, but do not include complex numbers. Data types associated with this category include LabVIEWNXGParamType_Ext, LabVIEWNXGParamType_Int16, LabVIEWNXGParamType_Int32, LabVIEWNXGParamType_Int64, LabVIEWNXGParamType_Int8, LabVIEWNXGParamType_Real32, LabVIEWNXGParamType_Real64, LabVIEWNXGParamType_UInt16, LabVIEWNXGParamType_UInt32, LabVIEWNXGParamType_UInt64, and LabVIEWNXGParamType_UInt8.
  //
  LabVIEWNXGParamCategory_Numeric = 0;
  // Field: LabVIEWNXGParamCategory_String
  //
  // (Value: 1) Indicates that the parameter is a string data type. Data types associated with this category include LabVIEWNXGParamType_String, LabVIEWNXGParamType_PathString, and LabVIEWNXGParamType_TimestampString.
  //
  LabVIEWNXGParamCategory_String = 1;
  // Field: LabVIEWNXGParamCategory_Boolean
  //
  // (Value: 2) Indicates that the parameter is a Boolean type This category does not have any associated data types.
  //
  LabVIEWNXGParamCategory_Boolean = 2;
  // Field: LabVIEWNXGParamCategory_Cluster
  //
  // (Value: 3) Indicates that the parameter is a cluster. Data types associated with this category include LabVIEWNXGParamType_DigitalWaveform, LabVIEWNXGParamType_ErrorOut, LabVIEWNXGParamType_IO, LabVIEWNXGParamType_StandardCluster, LabVIEWNXGParamType_AnalogWaveform, and LabVIEWNXGParamType_DigitalWaveform.
  //
  LabVIEWNXGParamCategory_Cluster = 3;
  // Field: LabVIEWNXGParamCategory_Reference
  //
  // (Value: 4) Indicates that the parameter is a reference. Data types associated with this category include LabVIEWNXGParamType_ActiveXRef, LabVIEWNXGParamType_OtherRef, and LabVIEWNXGParamType_LVNXGObjectRef but do not include LabVIEWNXGParamType_IO, which is considered a cluster data type.
  //
  LabVIEWNXGParamCategory_Reference = 4;
  // Field: LabVIEWNXGParamCategory_Complex
  //
  // (Value: 6) Indicates that the parameter is a complex numeric data type. This category does not have any associated data types.
  //
  LabVIEWNXGParamCategory_Complex = 6;
  // Field: LabVIEWNXGParamCategory_Variant
  //
  // (Value: 7) Indicates the parameter is a COM Variant. This category does not have any associated data types.
  //
  LabVIEWNXGParamCategory_Variant = 7;
  // Field: LabVIEWNXGParamCategory_Unknown
  //
  // (Value: 8) Indicates that the parameter has a data type TestStand does not recognize.
  //
  LabVIEWNXGParamCategory_Unknown = 8;
  // Field: LabVIEWNXGParamCategory_Enum
  //
  // (Value: 9) Indicates the parameter is an enumeration. This category does not have any associated data types.
  //
  LabVIEWNXGParamCategory_Enum = 9;
  // Field: LabVIEWNXGParamCategory_NumericArray
  //
  // (Value: 50) Indicates that the parameter is a an array of numbers. Numeric data types include enumerations, but do not include complex numbers. Data types associated with this category include LabVIEWNXGParamType_Ext, LabVIEWNXGParamType_Int16, LabVIEWNXGParamType_Int32, LabVIEWNXGParamType_Int64, LabVIEWNXGParamType_Int8, LabVIEWNXGParamType_Real32, LabVIEWNXGParamType_Real64, LabVIEWNXGParamType_UInt16, LabVIEWNXGParamType_UInt32, LabVIEWNXGParamType_UInt64, and LabVIEWNXGParamType_UInt8.
  //
  LabVIEWNXGParamCategory_NumericArray = 50;
  // Field: LabVIEWNXGParamCategory_StringArray
  //
  // (Value: 51) Indicates that the parameter is an array of strings. Data types associated with this category include LabVIEWNXGParamType_BinaryString, LabVIEWNXGParamType_CString, LabVIEWNXGParamType_PathString, and LabVIEWNXGParamType_TimestampString.
  //
  LabVIEWNXGParamCategory_StringArray = 51;
  // Field: LabVIEWNXGParamCategory_BooleanArray
  //
  // (Value: 52) Indicates that the parameter is an array of Boolean values. This category does not have any associated data types.
  //
  LabVIEWNXGParamCategory_BooleanArray = 52;
  // Field: LabVIEWNXGParamCategory_ClusterArray
  //
  // (Value: 53) Indicates that the parameter is an array of clusters. Data types associated with this category include LabVIEWNXGParamType_DigitalWaveform, LabVIEWNXGParamType_ErrorOut, LabVIEWNXGParamType_IO, LabVIEWNXGParamType_StandardCluster, and LabVIEWNXGParamType_AnalogWaveform.
  //
  LabVIEWNXGParamCategory_ClusterArray = 53;
  // Field: LabVIEWNXGParamCategory_ReferenceArray
  //
  // (Value: 54) Indicates that the parameter is an array of COM references. Data types associated with this category include LabVIEWNXGParamType_ActiveXRef, LabVIEWNXGParamType_OtherRef, and LabVIEWNXGParamType_LVNXGObjectRef but do not include LabVIEWNXGParamType_IO, which is considered a cluster data type.
  //
  LabVIEWNXGParamCategory_ReferenceArray = 54;
  // Field: LabVIEWNXGParamCategory_ComplexArray
  //
  // (Value: 55) Indicates that the parameter is an array of complex numbers. This category does not have any associated data types.
  //
  LabVIEWNXGParamCategory_ComplexArray = 55;
  // Field: LabVIEWNXGParamCategory_VariantArray
  //
  // (Value: 56) Indicates the parameter is an array of COM Variants. This category does not have any associated data types.
  //
  LabVIEWNXGParamCategory_VariantArray = 56;
  // Field: LabVIEWNXGParamCategory_EnumArray
  //
  // (Value: 58) Indicates the parameter is an array of enumerations. This category does not have any associated data types.
  //
  LabVIEWNXGParamCategory_EnumArray = 58;
}

// LabVIEWNXGParameterTypes
//
// The LabVIEWNXGParameter.Type property returns one of the following constants to indicate the data type of the parameter. Before you get or set the parameter data type, also get or set the category with the LabVIEWNXGParameter.Category property.
//
enum LabVIEWNXGParameterTypes {
  // Field: LabVIEWNXGParamType_Int8
  //
  // (Value: 0) Indicates that the parameter is an 8-bit integer.
  //
  LabVIEWNXGParamType_Int8 = 0;
  // Field: LabVIEWNXGParamType_UInt8
  //
  // (Value: 1) Indicates that the parameter is an 8-bit unsigned integer.
  //
  LabVIEWNXGParamType_UInt8 = 1;
  // Field: LabVIEWNXGParamType_Int16
  //
  // (Value: 2) Indicates that the parameter is a 16-bit integer.
  //
  LabVIEWNXGParamType_Int16 = 2;
  // Field: LabVIEWNXGParamType_UInt16
  //
  // (Value: 3) Indicates that the parameter is a 16-bit unsigned integer.
  //
  LabVIEWNXGParamType_UInt16 = 3;
  // Field: LabVIEWNXGParamType_Int32
  //
  // (Value: 4)  Indicates that the parameter is a 32-bit integer.
  //
  LabVIEWNXGParamType_Int32 = 4;
  // Field: LabVIEWNXGParamType_UInt32
  //
  // (Value: 5) Indicates that the parameter is a 32-bit unsigned integer.
  //
  LabVIEWNXGParamType_UInt32 = 5;
  // Field: LabVIEWNXGParamType_Real32
  //
  // (Value: 6) Indicates that the parameter is a 32-bit real number.
  //
  LabVIEWNXGParamType_Real32 = 6;
  // Field: LabVIEWNXGParamType_Real64
  //
  // (Value: 7) Indicates that the parameter is a 64-bit real number.
  //
  LabVIEWNXGParamType_Real64 = 7;
  // Field: LabVIEWNXGParamType_Ext
  //
  // (Value: 8) Indicates that the parameter is an extended-precision number. TestStand treats parameters of this type as 64-bit floating point numbers, so some data could be lost.
  //
  LabVIEWNXGParamType_Ext = 8;
  // Field: LabVIEWNXGParamType_Int64
  //
  // (Value: 12) Indicates that the parameter is a 64-bit integer.
  //
  LabVIEWNXGParamType_Int64 = 12;
  // Field: LabVIEWNXGParamType_UInt64
  //
  // (Value: 13) Indicates that the parameter is a 64-bit unsigned integer.
  //
  LabVIEWNXGParamType_UInt64 = 13;
  // Field: LabVIEWNXGParamType_StandardCluster
  //
  // (Value: 20) Indicates that the parameter is a standard cluster.
  //
  LabVIEWNXGParamType_StandardCluster = 20;
  // Field: LabVIEWNXGParamType_IO
  //
  // (Value: 21) Indicates that the parameter is an I/O control reference cluster.
  //
  LabVIEWNXGParamType_IO = 21;
  // Field: LabVIEWNXGParamType_DigitalTable
  //
  // (Value: 22) Indicates that the parameter is an array of digital data.
  //
  LabVIEWNXGParamType_DigitalTable = 22;
  // Field: LabVIEWNXGParamType_AnalogWaveform
  //
  // (Value: 23) Indicates that the parameter is an Analog Waveform type. For parameters of this LabVIEW NXG data type, use the TestStand LabVIEWNXGAnalogWaveform data type as a parameter value. Note: If the Y element representation of an analog waveform is set to Quad or Unsigned Quad, do not use the LabVIEWNXGAnalogWaveform data type because the representation of the Y element for the type is set to double-precision, 64-bit floating-point, which cannot store a Quad or unsigned Quad value without the risk of losing precision. In these cases, create a new custom data type and set the representation of the Y element to signed 64-bit integer or unsigned 64-bit integer, respectively.
  //
  LabVIEWNXGParamType_AnalogWaveform = 23;
  // Field: LabVIEWNXGParamType_DigitalWaveform
  //
  // (Value: 24) Indicates that the parameter is a Digital Waveform type. For parameters of this LabVIEW data type, use the TestStand LabVIEWDigitalWaveform data type as a parameter value.
  //
  LabVIEWNXGParamType_DigitalWaveform = 24;
  // Field: LabVIEWNXGParamType_ErrorOut
  //
  // (Value: 0x25) Indicates that the parameter is an error out type. For parameters of this LabVIEW data type, use the TestStand Error data type as a parameter value.
  //
  LabVIEWNXGParamType_ErrorOut = 25;
  // Field: LabVIEWNXGParamType_ActiveXRef
  //
  // (Value: 0x40) Indicates that the parameter is an ActiveX reference.
  //
  LabVIEWNXGParamType_ActiveXRef = 64;
  // Field: LabVIEWNXGParamType_LVNXGObjectRef
  //
  // (Value: 0x42) Indicates that the parameter is a LabVIEW NXG VI or application reference. TestStand treats such references as unsigned, numeric long values.
  //
  LabVIEWNXGParamType_LVNXGObjectRef = 66;
  // Field: LabVIEWNXGParamType_OtherRef
  //
  // (Value: 0x43) Indicates that the parameter is a LabVIEW reference but not an I/O control reference. TestStand treats such references as unsigned, numeric long values.
  //
  LabVIEWNXGParamType_OtherRef = 67;
  // Field: LabVIEWNXGParamType_String
  //
  // (Value: 0x60) Indicates that the parameter is a string that contains binary data. Use the LabVIEWNXGParameter.PassAsBinaryString property to instruct TestStand to preserve NUL bytes by unescaping a TestStand string before assigning a value to a LabVIEW NXG control, and by escaping a binary string from a LabVIEW NXG indicator before storing in TestStand.
  //
  LabVIEWNXGParamType_String = 96;
  // Field: LabVIEWNXGParamType_PathString
  //
  // (Value: 0x62) Indicates that the parameter is a path. TestStand treats paths as C-strings.
  //
  LabVIEWNXGParamType_PathString = 98;
  // Field: LabVIEWNXGParamType_TimestampString
  //
  // (Value: 0x63) Indicates that the parameter is a timestamp, which TestStand treats as a C-string.
  //
  LabVIEWNXGParamType_TimestampString = 99;
  // Field: LabVIEWNXGParamType_Unspecified
  //
  // (Value: 200) Indicates that the parameter has an unspecified data type because the category does not have any associated data types.
  //
  LabVIEWNXGParamType_Unspecified = 200;
}

// LabVIEWNXGParameterDirections
//
// The LabVIEWParameter.Direction property returns one of the following constants to indicate how the module passes the parameter when it executes.
// 
// 
//
enum LabVIEWNXGParameterDirections {
  // Field: LabVIEWNXGParamDirection_In
  //
  // (Value: 0) Indicates that the parameter is passed to the VI.
  //
  LabVIEWNXGParamDirection_In = 0;
  // Field: LabVIEWNXGParamDirection_Out
  //
  // (Value: 1) Indicates that the parameter is returned from the VI.
  //
  LabVIEWNXGParamDirection_Out = 1;
}

// LabVIEWNXGParameterWireRequirements
//
// The LabVIEWNXGParameter.WireRequirement property returns one of the following constants to indicate if the module can pass a default value for the parameter.
//
enum LabVIEWNXGParameterWireRequirements {
  // Field: LabVIEWNXGParamWireReq_Required
  //
  // (Value: 0) Indicates that the module must pass a value for the parameter.
  //
  LabVIEWNXGParamWireReq_Required = 0;
  // Field: LabVIEWNXGParamWireReq_Recommended
  //
  // (Value: 1) Indicates that the module can use the default value for the parameter. However, passing a value is recommended.
  //
  LabVIEWNXGParamWireReq_Recommended = 1;
  // Field: LabVIEWNXGParamWireReq_Optional
  //
  // (Value: 2) Indicates that the module can use the default value for the parameter instead of passing a value.
  //
  LabVIEWNXGParamWireReq_Optional = 2;
}

// LabVIEWNXGServerTypes
//
// Use these constants with the LabVIEWNXGAdapter.ServerInfo property to determine the type of server the LabVIEW NXG Adapter is using.
//
enum LabVIEWNXGServerTypes {
  // Field: LabVIEWNXGServer_ExecServer
  //
  // (Value: 0) Specifies to use a LabVIEW NXG executable server. LabVIEW NXG executable servers include a LabVIEW NXG development environment or a LabVIEW NXG application that registers itself as a LabVIEW NXG ActiveX Automation server.
  //
  LabVIEWNXGServer_ExecServer = 0;
  // Field: LabVIEWNXGServer_RTEServer
  //
  // (Value: 1) Specifies to use a LabVIEW NXG run-time server.
  //
  LabVIEWNXGServer_RTEServer = 1;
}

// LabVIEWNXGNodePropertyDirections
//
// Indicates the direction of the property.
//
enum LabVIEWNXGNodePropertyDirections {
  // Field: LabVIEWNXGNodePropertyDirection_In
  //
  // (Value: 0) Specifies an input property.
  //
  LabVIEWNXGNodePropertyDirection_In = 0;
  // Field: LabVIEWNXGNodePropertyDirection_Out
  //
  // (Value: 1) Specifies an output property.
  //
  LabVIEWNXGNodePropertyDirection_Out = 1;
  // Field: LabVIEWNXGNodePropertyDirection_Default
  //
  // (Value: 2) Specifies that the property uses the default value.
  //
  LabVIEWNXGNodePropertyDirection_Default = 2;
}

// LabVIEWNXGNodeOperationModes
//
// Use these constants to specify the operation mode for the LabVIEW NXG node.
// 
//
enum LabVIEWNXGNodeOperationModes {
  // Field: LabVIEWNXGNodeOperationMode_Default
  //
  // (Value: 0) Indicates that the Configure Property Node dialog box operates in default mode.
  //
  LabVIEWNXGNodeOperationMode_Default = 0;
  // Field: LabVIEWNXGNodeOperationMode_Restricted
  //
  // (Value: 1) Indicates that the Configure Property Node dialog box operates in restricted mode.
  //
  LabVIEWNXGNodeOperationMode_Restricted = 1;
}

// LabVIEWNXGComponentBuildOutputTypes
//
// Use these constants to specify the type of output to create when creating a build output.
//
enum LabVIEWNXGComponentBuildOutputTypes {
  // Field: LabVIEWNXGComponentBuildOutputType_GLibrary
  //
  // (Value: 0x0)
  //
  LabVIEWNXGComponentBuildOutputType_GLibrary = 0;
  // Field: LabVIEWNXGComponentBuildOutputType_Source
  //
  // (Value: 0x1)
  //
  LabVIEWNXGComponentBuildOutputType_Source = 1;
  // Field: LabVIEWNXGComponentBuildOutputType_Executable
  //
  // (Value: 0x2)
  //
  LabVIEWNXGComponentBuildOutputType_Executable = 2;
}

// LabVIEWNXGProjectItemTypes
//
// Use these constants to specify whether the NXG VI is standalone or part of a component in a LabVIEW NXG project.
//
enum LabVIEWNXGProjectItemTypes {
  // Field: LabVIEWNXGProjectItemType_Component
  //
  // (Value: 0x0) The VI is part of a LabVIEW NXG component.
  //
  LabVIEWNXGProjectItemType_Component = 0;
  // Field: LabVIEWNXGProjectItemType_VirtualInstrument
  //
  // (Value 0x1): The VI is not part of a LabVIEW NXG component.
  //
  LabVIEWNXGProjectItemType_VirtualInstrument = 1;
}

// DllInfoTypes
//
// Specifies the type info for the DLL.
//
enum DllInfoTypes {
  // Field: DllInfoType_None
  //
  // (Value: 0)
  //
  DllInfoType_None = 0;
  // Field: DllInfoType_Enumeration
  //
  // (Value: 1)
  //
  DllInfoType_Enumeration = 1;
  // Field: DllInfoType_Struct
  //
  // (Value: 2)
  //
  DllInfoType_Struct = 2;
}

// PythonParameterCategories
//
// Use the following constants with the PythonParameter.Category property to specify the Python compatible data type that TestStand should consider for the parameter, return value, or attribute for the Python Adapter step.
//
enum PythonParameterCategories {
  // Field: PythonParamCategory_None
  //
  // (Value: 0x0) Specifies that the parameter is a None parameter, meaning it has no value. This category applies only to return value.
  //
  PythonParamCategory_None = 0;
  // Field: PythonParamCategory_Numeric
  //
  // (Value: 0x1) Specifies that the parameter is a number.
  //
  PythonParamCategory_Numeric = 1;
  // Field: PythonParamCategory_String
  //
  // (Value: 0x2) Specifies that the parameter is a string.
  //
  PythonParamCategory_String = 2;
  // Field: PythonParamCategory_Boolean
  //
  // (Value: 0x3) Specifies that the parameter is a boolean.
  //
  PythonParamCategory_Boolean = 3;
  // Field: PythonParamCategory_Tuple
  //
  // (Value: 0x4) Specifies that the parameter is a tuple.
  //
  PythonParamCategory_Tuple = 4;
  // Field: PythonParamCategory_List
  //
  // (Value: 0x5) Specifies that the TestStand array passes to the Python module as a list.
  //
  PythonParamCategory_List = 5;
  // Field: PythonParamCategory_Object
  //
  // (Value: 0x6) Specifies that the parameter is a PyObject.
  //
  PythonParamCategory_Object = 6;
  // Field: PythonParamCategory_Dynamic
  //
  // (Value: 0x7) Specifies the type of the parameter is dynamically detected based on the input provided to the parameter.
  //
  PythonParamCategory_Dynamic = 7;
  // Field: PythonParamCategory_Dispatch
  //
  // (Value: 0x8) Specifies that the parameter is an object reference variable that stores either an ActiveX object that implements IDispatch or a TestStand object.
  //
  // You must install pywin32 in order to pass TestStand objects or ActiveX objects between TestStand and Python.
  //
  PythonParamCategory_Dispatch = 8;
  // Field: PythonParamCategory_Enum
  //
  // (Value: 0x9) Specifies that the parameter is an enum.
  //
  PythonParamCategory_Enum = 9;
  // Field: PythonParamCategory_NumPyArray
  //
  // (Value: 0x10) Specifies that the TestStand array passes to the Python module as a NumPy array.
  //
  PythonParamCategory_NumPyArray = 10;
}

// PythonInterpreterSessionScopes
//
// Use the following constants with the PythonAdapter.InterpreterSessionScope or the PythonModule.InterpreterSessionScope property to specify which Python interpreter session TestStand should use for the Python Adapter step.
//
enum PythonInterpreterSessionScopes {
  // Field: PythonInterpreterSessionScope_ObjectReference
  //
  // (Value: 0x0) Specifies that the interpreter session to use as specified by object reference. This value applies only to step instance.
  //
  PythonInterpreterSessionScope_ObjectReference = 0;
  // Field: PythonInterpreterSessionScope_PerThread
  //
  // (Value: 0x1) Specifies that interpreter session created per TestStand Thread should be used to execute the code module.
  //
  PythonInterpreterSessionScope_PerThread = 1;
  // Field: PythonInterpreterSessionScope_PerExecution
  //
  // (Value: 0x2) Specifies that interpreter session created per TestStand Execution should be used to execute the code module.
  //
  PythonInterpreterSessionScope_PerExecution = 2;
  // Field: PythonInterpreterSessionScope_Global
  //
  // (Value: 0x3) Specifies that interpreter session created per TestStand instance should be used to execute the code module.
  //
  PythonInterpreterSessionScope_Global = 3;
}

// PythonOperationTypes
//
// Use the following constants with the PythonModule.OperationType property to specify which Python operation TestStand should perform for the Python Adapter step.
//
enum PythonOperationTypes {
  // Field: PythonOperationType_CreateClassInstance
  //
  // (Value: 0x0) Specifies to create an instance of class.
  //
  PythonOperationType_CreateClassInstance = 0;
  // Field: PythonOperationType_CallMethod
  //
  // (Value: 0x1) Specifies to call a method.
  //
  PythonOperationType_CallMethod = 1;
  // Field: PythonOperationType_GetAttribute
  //
  // (Value: 0x2) Specifies to get attribute data.
  //
  PythonOperationType_GetAttribute = 2;
  // Field: PythonOperationType_SetAttribute
  //
  // (Value: 0x3) Specifies to set attribute data.
  //
  PythonOperationType_SetAttribute = 3;
}

// PythonOperationScopes
//
// Use the following constants with the PythonModule.OperationScope property to specify the scope at which TestStand should perform the Python operation for the Python Adapter step.
//
enum PythonOperationScopes {
  // Field: PythonOperationScope_Module
  //
  // (Value: 0x0) Specifies to use the module scope.
  //
  PythonOperationScope_Module = 0;
  // Field: PythonOperationScope_Class
  //
  // (Value: 0x1) Specifies to use the class scope.
  //
  PythonOperationScope_Class = 1;
  // Field: PythonOperationScope_ClassInstance
  //
  // (Value: 0x2) Specifies to use the class instance scope.
  //
  PythonOperationScope_ClassInstance = 2;
}

// LabVIEWModuleOverrideTypes
//
// Use these constants with the LabVIEWModule.DisplaySelectClassFromProjectDialogEx, LabVIEWModule.DisplaySelectVIFromProjectDialogEx, LabVIEWModule.FindClassUrlUsingClassPathEx, LabVIEWModule.FindVIUrlUsingVIPathEx, LabVIEWModule.GetClassAbsolutePathEx, and LabVIEWModule.GetVIAbsolutePathEx methods to specify the override type.
// 
//
enum LabVIEWModuleOverrideTypes {
  // Field: LabVIEWModuleOverrideType_Default
  //
  // (Value: 0) Directs the methods to use the VI configured in the code module.
  //
  LabVIEWModuleOverrideType_Default = 0;
  // Field: LabVIEWModuleOverrideType_PPL
  //
  // (Value: 1) Directs the methods to use the VI in the packed project library configured in the Override Module Settings window.
  //
  LabVIEWModuleOverrideType_PPL = 1;
}

// LabVIEWModuleOverrideOptions
//
// Use these constants with the LabVIEWModule.OverrideModuleOptions and LabVIEWAdapter.OverrideModuleOptions properties to specify the override option to use.
//
enum LabVIEWModuleOverrideOptions {
  // Field: LabVIEWModuleOverrideOption_Default
  //
  // (Value: 0) Indicates that the LabVIEW Adapter runs the VI configured in the code module.
  //
  LabVIEWModuleOverrideOption_Default = 0;
  // Field: LabVIEWModuleOverrideOption_PPL
  //
  // (Value: 1) Indicates that the LabVIEW Adapter runs the VI in the packed project library configured in the Override Module Settings window.
  //
  LabVIEWModuleOverrideOption_PPL = 1;
}

// ActiveXAdapter
//
// Use objects from the ActiveXAdapter class to configure and obtain ActiveX/COM Adapter-specific information about the module adapter. Call Engine.GetAdapter or Engine.GetAdapterByKeyName to obtain a reference to the adapter object.
// To access the properties and methods of the Adapter class, use AsAdapter to obtain an object.
//
service ActiveXAdapter {
  // Method: AsAdapter
  //
  // Returns the underlying module Adapter object that represents the ActiveXAdapter object.
  //
  // Use the underlying module Adapter object to access properties and methods common to all adapters.
  //
  // ActiveXAdapter_AsAdapterRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXAdapterInstance - The id of the ActiveXAdapter object.
  //
  // ActiveXAdapter_AsAdapterResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdapterInstance - The return type of the Adapter object.
  //
  rpc AsAdapter(ActiveXAdapter_AsAdapterRequest) returns (ActiveXAdapter_AsAdapterResponse);
  
  
  // Method: UpdateAutomationIDs
  //
  // When you update the interface for an ActiveX Automation server and the object and member identifiers have changed, you must respecify any step that uses the server. Use the UpdateAutomationIDs method to update the identifiers in a sequence file based on the name of the object or member.
  // For steps that create an object, this method updates the object identifiers CLSID and IID. For steps that call a method or property, this method updates the member identifier MEMBERID.
  //
  // This method applies only when you configure the ActiveX/COM Adapter to use early binding.
  //
  // ActiveXAdapter_UpdateAutomationIDsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ActiveXAdapterInstance - The id of the ActiveXAdapter object.
  //    - seqFileToUpdate: SequenceFileInstance - Specifies a reference to the sequence file that contains ActiveX steps to update.
  //
  // ActiveXAdapter_UpdateAutomationIDsResponse - The response message from the server. It provides the output parameters.
  //    - numStepsModified: int3 - Returns the number of steps the method updated.
  //      
  //    - numStepUpdatesFailed: int3 - Returns the number of steps the method failed to update.
  //    - errorDescription: strin - When a syntax error exists, this parameter returns an error message describing the type of error.
  //
  rpc UpdateAutomationIDs(ActiveXAdapter_UpdateAutomationIDsRequest) returns (ActiveXAdapter_UpdateAutomationIDsResponse);
  
  

  // Property: UseLateBinding
  //
  // Specifies whether the ActiveX/COM Adapter uses late binding or early binding. When you specify the module for an ActiveX/COM step, TestStand stores the IDs and names of the object and member the step calls. During execution, the ActiveX/COM Adapter must invoke the ActiveX Automation server and specify which object to create and which member to call.
  // You can use one of the following options to specify how the server performs operations on the objects:
  // * Early Binding—Configures the module adapter to use IDs.    * Late Binding—Configures the module adapter to use names.
  // While early binding is more efficient, it requires that the IDs for objects and methods exposed by automation servers do not change. If you are developing an automation server in an application development environment (ADE) that does not provide direct control over IDs, National Instruments recommends using late binding during development so inadvertent changes to IDs do not invalidate the module information for the step. When you finish developing the automation server, set the Use Late Binding option in the ActiveX/COM Adapter Configuration dialog box to False and update the IDs in the client sequences.
  // To update the IDs in the client sequences, edit the module information for each step that references the server or select Tools»Update Automation Identifiers in each sequence file that contains ActiveX/COM steps that reference the server.
  //
  // If you are using a third-party or release version of an automation server, or if you are developing a server in an ADE in which you can control the server IDs, National Instruments recommends disabling the Use Late Binding option.
  // When you configure the ActiveX/COM Adapter to use late binding, the adapter uses the stored names to determine the proper IDs to use at run time.
  // The ActiveX/COM Adapter looks at the most recent version of type information for the server.
  // Servers can also specify type information in different languages. If the ActiveX/COM Adapter cannot find a version of the type information that uses the system default language ID, it attempts to find type information that uses the English or Neutral language IDs, in that order.
  //
  // ActiveXAdapter_Set_UseLateBindingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXAdapterInstance - The id of the ActiveXAdapter object.
  //    - propertyValue: bool - Specifies whether the ActiveX/COM Adapter uses late binding or early binding. When you specify the module for an ActiveX/COM step, TestStand stores the IDs and names of the object and member the step calls. During execution, the ActiveX/COM Adapter must invoke the ActiveX Automation server and specify which object to create and which member to call. You can use one of the following options to specify how the server performs operations on the objects: * Early Binding—Configures the module adapter to use IDs.    * Late Binding—Configures the module adapter to use names. While early binding is more efficient, it requires that the IDs for objects and methods exposed by automation servers do not change. If you are developing an automation server in an application development environment (ADE) that does not provide direct control over IDs, National Instruments recommends using late binding during development so inadvertent changes to IDs do not invalidate the module information for the step. When you finish developing the automation server, set the Use Late Binding option in the ActiveX/COM Adapter Configuration dialog box to False and update the IDs in the client sequences. To update the IDs in the client sequences, edit the module information for each step that references the server or select Tools»Update Automation Identifiers in each sequence file that contains ActiveX/COM steps that reference the server. 
  //
  // ActiveXAdapter_Set_UseLateBindingResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ActiveXAdapter_Get_UseLateBindingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXAdapterInstance - The id of the ActiveXAdapter object.
  //
  // ActiveXAdapter_Get_UseLateBindingResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the ActiveX/COM Adapter uses late binding or early binding. When you specify the module for an ActiveX/COM step, TestStand stores the IDs and names of the object and member the step calls. During execution, the ActiveX/COM Adapter must invoke the ActiveX Automation server and specify which object to create and which member to call. You can use one of the following options to specify how the server performs operations on the objects: * Early Binding—Configures the module adapter to use IDs.    * Late Binding—Configures the module adapter to use names. While early binding is more efficient, it requires that the IDs for objects and methods exposed by automation servers do not change. If you are developing an automation server in an application development environment (ADE) that does not provide direct control over IDs, National Instruments recommends using late binding during development so inadvertent changes to IDs do not invalidate the module information for the step. When you finish developing the automation server, set the Use Late Binding option in the ActiveX/COM Adapter Configuration dialog box to False and update the IDs in the client sequences. To update the IDs in the client sequences, edit the module information for each step that references the server or select Tools»Update Automation Identifiers in each sequence file that contains ActiveX/COM steps that reference the server. 
  //
  rpc Set_UseLateBinding(ActiveXAdapter_Set_UseLateBindingRequest) returns (ActiveXAdapter_Set_UseLateBindingResponse);
  rpc Get_UseLateBinding(ActiveXAdapter_Get_UseLateBindingRequest) returns (ActiveXAdapter_Get_UseLateBindingResponse);
  
  
  // Property: UnloadUnusedActiveXServersAfterExec
  //
  // Specifies that the ActiveX/COM Adapter requests the operating system to unload in-process (DLL) servers after every execution. The operating system only unloads servers you are no longer using. Disable this option to improve execution speed.
  //
  // ActiveXAdapter_Set_UnloadUnusedActiveXServersAfterExecRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXAdapterInstance - The id of the ActiveXAdapter object.
  //    - propertyValue: bool - Specifies that the ActiveX/COM Adapter requests the operating system to unload in-process (DLL) servers after every execution. The operating system only unloads servers you are no longer using. Disable this option to improve execution speed. 
  //
  // ActiveXAdapter_Set_UnloadUnusedActiveXServersAfterExecResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ActiveXAdapter_Get_UnloadUnusedActiveXServersAfterExecRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXAdapterInstance - The id of the ActiveXAdapter object.
  //
  // ActiveXAdapter_Get_UnloadUnusedActiveXServersAfterExecResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies that the ActiveX/COM Adapter requests the operating system to unload in-process (DLL) servers after every execution. The operating system only unloads servers you are no longer using. Disable this option to improve execution speed. 
  //
  rpc Set_UnloadUnusedActiveXServersAfterExec(ActiveXAdapter_Set_UnloadUnusedActiveXServersAfterExecRequest) returns (ActiveXAdapter_Set_UnloadUnusedActiveXServersAfterExecResponse);
  rpc Get_UnloadUnusedActiveXServersAfterExec(ActiveXAdapter_Get_UnloadUnusedActiveXServersAfterExecRequest) returns (ActiveXAdapter_Get_UnloadUnusedActiveXServersAfterExecResponse);
  
  
  // Property: ShowActiveXControlsWhenSpecifyingModule
  //
  // Specifies that the Specify Module dialog box for the ActiveX/COM Adapter includes ActiveX controls in the list of available servers.
  //
  // ActiveXAdapter_Set_ShowActiveXControlsWhenSpecifyingModuleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXAdapterInstance - The id of the ActiveXAdapter object.
  //    - propertyValue: bool - Specifies that the Specify Module dialog box for the ActiveX/COM Adapter includes ActiveX controls in the list of available servers. 
  //
  // ActiveXAdapter_Set_ShowActiveXControlsWhenSpecifyingModuleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ActiveXAdapter_Get_ShowActiveXControlsWhenSpecifyingModuleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXAdapterInstance - The id of the ActiveXAdapter object.
  //
  // ActiveXAdapter_Get_ShowActiveXControlsWhenSpecifyingModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies that the Specify Module dialog box for the ActiveX/COM Adapter includes ActiveX controls in the list of available servers. 
  //
  rpc Set_ShowActiveXControlsWhenSpecifyingModule(ActiveXAdapter_Set_ShowActiveXControlsWhenSpecifyingModuleRequest) returns (ActiveXAdapter_Set_ShowActiveXControlsWhenSpecifyingModuleResponse);
  rpc Get_ShowActiveXControlsWhenSpecifyingModule(ActiveXAdapter_Get_ShowActiveXControlsWhenSpecifyingModuleRequest) returns (ActiveXAdapter_Get_ShowActiveXControlsWhenSpecifyingModuleResponse);
  
  
  // Property: Servers
  //
  // Returns the list of ActiveX Automation servers registered on this computer.
  //
  // ActiveXAdapter_Get_ServersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXAdapterInstance - The id of the ActiveXAdapter object.
  //
  // ActiveXAdapter_Get_ServersResponse - The response message from the server. It provides the return value.
  //    - returnValue: ActiveXServersInstance - Returns the list of ActiveX Automation servers registered on this computer. 
  //
  rpc Get_Servers(ActiveXAdapter_Get_ServersRequest) returns (ActiveXAdapter_Get_ServersResponse);
  
  
}
message ActiveXAdapterInstance {
  // Specifies the handle of the ActiveXAdapter instance in the server.
  string id = 1;
}

message ActiveXServersInstance {
  // Specifies the handle of the ActiveXServers instance in the server.
  string id = 1;
}
message ActiveXAdapter_AsAdapterRequest {
  // The id of the ActiveXAdapter object.
  ActiveXAdapterInstance instance = 1;
}

message ActiveXAdapter_AsAdapterResponse {
  // The return type of the Adapter object.
  AdapterInstance returnValue = 1;
}

message ActiveXAdapter_UpdateAutomationIDsRequest {
  // The id of the ActiveXAdapter object.
  ActiveXAdapterInstance instance = 1;
  // Specifies a reference to the sequence file that contains ActiveX steps to update.
  SequenceFileInstance seqFileToUpdate = 2;
}

message ActiveXAdapter_UpdateAutomationIDsResponse {
  // Returns the number of steps the method updated.
  // 
  int32 numStepsModified = 1;
  // Returns the number of steps the method failed to update.
  int32 numStepUpdatesFailed = 2;
  // When a syntax error exists, this parameter returns an error message describing the type of error.
  string errorDescription = 3;
}

message ActiveXAdapter_Set_UseLateBindingRequest {
  // The id of the ActiveXAdapter object.
  ActiveXAdapterInstance instance = 1;
  // Specifies whether the ActiveX/COM Adapter uses late binding or early binding. When you specify the module for an ActiveX/COM step, TestStand stores the IDs and names of the object and member the step calls. During execution, the ActiveX/COM Adapter must invoke the ActiveX Automation server and specify which object to create and which member to call.
  // You can use one of the following options to specify how the server performs operations on the objects:
  // * Early Binding—Configures the module adapter to use IDs.    * Late Binding—Configures the module adapter to use names.
  // While early binding is more efficient, it requires that the IDs for objects and methods exposed by automation servers do not change. If you are developing an automation server in an application development environment (ADE) that does not provide direct control over IDs, National Instruments recommends using late binding during development so inadvertent changes to IDs do not invalidate the module information for the step. When you finish developing the automation server, set the Use Late Binding option in the ActiveX/COM Adapter Configuration dialog box to False and update the IDs in the client sequences.
  // To update the IDs in the client sequences, edit the module information for each step that references the server or select Tools»Update Automation Identifiers in each sequence file that contains ActiveX/COM steps that reference the server.
  bool propertyValue = 2;
}

message ActiveXAdapter_Set_UseLateBindingResponse {
}

message ActiveXAdapter_Get_UseLateBindingRequest {
  // The id of the ActiveXAdapter object.
  ActiveXAdapterInstance instance = 1;
}

message ActiveXAdapter_Get_UseLateBindingResponse {
  // Specifies whether the ActiveX/COM Adapter uses late binding or early binding. When you specify the module for an ActiveX/COM step, TestStand stores the IDs and names of the object and member the step calls. During execution, the ActiveX/COM Adapter must invoke the ActiveX Automation server and specify which object to create and which member to call.
  // You can use one of the following options to specify how the server performs operations on the objects:
  // * Early Binding—Configures the module adapter to use IDs.    * Late Binding—Configures the module adapter to use names.
  // While early binding is more efficient, it requires that the IDs for objects and methods exposed by automation servers do not change. If you are developing an automation server in an application development environment (ADE) that does not provide direct control over IDs, National Instruments recommends using late binding during development so inadvertent changes to IDs do not invalidate the module information for the step. When you finish developing the automation server, set the Use Late Binding option in the ActiveX/COM Adapter Configuration dialog box to False and update the IDs in the client sequences.
  // To update the IDs in the client sequences, edit the module information for each step that references the server or select Tools»Update Automation Identifiers in each sequence file that contains ActiveX/COM steps that reference the server.
  bool returnValue = 1;
}

message ActiveXAdapter_Set_UnloadUnusedActiveXServersAfterExecRequest {
  // The id of the ActiveXAdapter object.
  ActiveXAdapterInstance instance = 1;
  // Specifies that the ActiveX/COM Adapter requests the operating system to unload in-process (DLL) servers after every execution. The operating system only unloads servers you are no longer using. Disable this option to improve execution speed.
  bool propertyValue = 2;
}

message ActiveXAdapter_Set_UnloadUnusedActiveXServersAfterExecResponse {
}

message ActiveXAdapter_Get_UnloadUnusedActiveXServersAfterExecRequest {
  // The id of the ActiveXAdapter object.
  ActiveXAdapterInstance instance = 1;
}

message ActiveXAdapter_Get_UnloadUnusedActiveXServersAfterExecResponse {
  // Specifies that the ActiveX/COM Adapter requests the operating system to unload in-process (DLL) servers after every execution. The operating system only unloads servers you are no longer using. Disable this option to improve execution speed.
  bool returnValue = 1;
}

message ActiveXAdapter_Set_ShowActiveXControlsWhenSpecifyingModuleRequest {
  // The id of the ActiveXAdapter object.
  ActiveXAdapterInstance instance = 1;
  // Specifies that the Specify Module dialog box for the ActiveX/COM Adapter includes ActiveX controls in the list of available servers.
  bool propertyValue = 2;
}

message ActiveXAdapter_Set_ShowActiveXControlsWhenSpecifyingModuleResponse {
}

message ActiveXAdapter_Get_ShowActiveXControlsWhenSpecifyingModuleRequest {
  // The id of the ActiveXAdapter object.
  ActiveXAdapterInstance instance = 1;
}

message ActiveXAdapter_Get_ShowActiveXControlsWhenSpecifyingModuleResponse {
  // Specifies that the Specify Module dialog box for the ActiveX/COM Adapter includes ActiveX controls in the list of available servers.
  bool returnValue = 1;
}

message ActiveXAdapter_Get_ServersRequest {
  // The id of the ActiveXAdapter object.
  ActiveXAdapterInstance instance = 1;
}

message ActiveXAdapter_Get_ServersResponse {
  // Returns the list of ActiveX Automation servers registered on this computer.
  ActiveXServersInstance returnValue = 1;
}

// ActiveXServers
//
// A collection of ActiveXServer objects.
// Use the ActiveXAdapter.Servers property to obtain a collection of ActiveXServer objects. You must call the ActiveXServer.LoadTypeLibrary method before you access any type library related properties.
//
service ActiveXServers {
  // Method: RegisterTypeLibrary
  //
  // Registers the specified type library on this computer.
  //
  // This method updates ActiveXServers' collection of ActiveXServer objects to include the type library you specified.
  //
  // ActiveXServers_RegisterTypeLibraryRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ActiveXServersInstance - The id of the ActiveXServers object.
  //    - typeLibraryPath: string - Specifies the absolute path of the file that contains the type library you want to register. Typically you specify a .exe, .dll, or .tlb file.
  //
  // ActiveXServers_RegisterTypeLibraryResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: string - Returns the GUID of the type library this method registers. 
  //    - newerTypeLibraryAlreadyRegistered: boo - Returns True if a newer version of the type library you specified was already registered on the computer.
  //
  rpc RegisterTypeLibrary(ActiveXServers_RegisterTypeLibraryRequest) returns (ActiveXServers_RegisterTypeLibraryResponse);
  
  
  // Method: Refresh
  //
  // Call this method to refresh the ActiveXServer objects in the collection.
  //
  // After calling this method, ActiveXServers contains a new collection of ActiveXServer objects. After calling this method, do not access properties or methods of any ActiveXServer object you acquired before calling this method.
  //
  // ActiveXServers_RefreshRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXServersInstance - The id of the ActiveXServers object.
  //
  // ActiveXServers_RefreshResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Refresh(ActiveXServers_RefreshRequest) returns (ActiveXServers_RefreshResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // The first time you access this property or the ActiveXServer.Count property, ActiveXServers reads the list of servers registered on the computer from the registry.
  //
  // ActiveXServers_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ActiveXServersInstance - The id of the ActiveXServers object.
  //    - index: int32 - Specifies the zero-based index of the item to retrieve.
  //
  // ActiveXServers_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: ActiveXServerInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(ActiveXServers_Get_ItemRequest) returns (ActiveXServers_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // The first time you access the ActiveXServer.Item property or this property, ActiveXServers reads the list of servers registered on the computer from the registry.
  //
  // ActiveXServers_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXServersInstance - The id of the ActiveXServers object.
  //
  // ActiveXServers_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(ActiveXServers_Get_CountRequest) returns (ActiveXServers_Get_CountResponse);
  
  
  // Property: RefreshCount
  //
  // Returns the number of times the ActiveXServer.Refresh method has been called.
  //
  // Use this property to determine whether a call to the ActiveXServer.Refresh method has created new objects in the collection.
  //
  // ActiveXServers_Get_RefreshCountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXServersInstance - The id of the ActiveXServers object.
  //
  // ActiveXServers_Get_RefreshCountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of times the ActiveXServer.Refresh method has been called. 
  //
  rpc Get_RefreshCount(ActiveXServers_Get_RefreshCountRequest) returns (ActiveXServers_Get_RefreshCountResponse);
  
  
}
message ActiveXServerInstance {
  // Specifies the handle of the ActiveXServer instance in the server.
  string id = 1;
}
message ActiveXServers_RegisterTypeLibraryRequest {
  // The id of the ActiveXServers object.
  ActiveXServersInstance instance = 1;
  // Specifies the absolute path of the file that contains the type library you want to register. Typically you specify a .exe, .dll, or .tlb file.
  string typeLibraryPath = 2;
}

message ActiveXServers_RegisterTypeLibraryResponse {
  // Returns the GUID of the type library this method registers.
  string returnValue = 1;
  // Returns True if a newer version of the type library you specified was already registered on the computer.
  bool newerTypeLibraryAlreadyRegistered = 2;
}

message ActiveXServers_RefreshRequest {
  // The id of the ActiveXServers object.
  ActiveXServersInstance instance = 1;
}

message ActiveXServers_RefreshResponse {
}

message ActiveXServers_Get_ItemRequest {
  // The id of the ActiveXServers object.
  ActiveXServersInstance instance = 1;
  // Specifies the zero-based index of the item to retrieve.
  optional int32 index = 2;
}

message ActiveXServers_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  ActiveXServerInstance returnValue = 1;
}

message ActiveXServers_Get_CountRequest {
  // The id of the ActiveXServers object.
  ActiveXServersInstance instance = 1;
}

message ActiveXServers_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

message ActiveXServers_Get_RefreshCountRequest {
  // The id of the ActiveXServers object.
  ActiveXServersInstance instance = 1;
}

message ActiveXServers_Get_RefreshCountResponse {
  // Returns the number of times the ActiveXServer.Refresh method has been called.
  int32 returnValue = 1;
}

// ActiveXServer
//
// Use an ActiveXServer object to obtain information about a server and its type library registered on this computer. Use the ActiveXAdapter.Servers property to obtain a collection of ActiveXServer objects. You must call the ActiveXServer.LoadTypeLibrary method before you access any type library related properties.
//
service ActiveXServer {
  // Method: LoadTypeLibrary
  //
  // Populates the ActiveXServer.CoClasses and ActiveXServer.Interfaces collections from the coclasses and interfaces defined in the type library the ActiveXServer.Path property specifies.
  //
  // ActiveXServer_LoadTypeLibraryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXServerInstance - The id of the ActiveXServer object.
  //
  // ActiveXServer_LoadTypeLibraryResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if this method updates the ActiveXServer.CoClasses and ActiveXServer.Interfaces collections from the type library. This method does nothing and returns False if the type library was not modified on disk since the last time you called this method. 
  //
  rpc LoadTypeLibrary(ActiveXServer_LoadTypeLibraryRequest) returns (ActiveXServer_LoadTypeLibraryResponse);
  
  

  // Property: Path
  //
  // Returns the absolute path of the server.
  //
  // ActiveXServer_Get_PathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXServerInstance - The id of the ActiveXServer object.
  //
  // ActiveXServer_Get_PathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the absolute path of the server. 
  //
  rpc Get_Path(ActiveXServer_Get_PathRequest) returns (ActiveXServer_Get_PathResponse);
  
  
  // Property: Id
  //
  // Returns the GUID of the server.
  //
  // ActiveXServer_Get_IdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXServerInstance - The id of the ActiveXServer object.
  //
  // ActiveXServer_Get_IdResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the GUID of the server. 
  //
  rpc Get_Id(ActiveXServer_Get_IdRequest) returns (ActiveXServer_Get_IdResponse);
  
  
  // Property: Name
  //
  // Returns the name of the server.
  //
  // ActiveXServer_Get_NameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXServerInstance - The id of the ActiveXServer object.
  //
  // ActiveXServer_Get_NameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the server. 
  //
  rpc Get_Name(ActiveXServer_Get_NameRequest) returns (ActiveXServer_Get_NameResponse);
  
  
  // Property: DisplayName
  //
  // Returns the display name of the server.
  //
  // ActiveXServer_Get_DisplayNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXServerInstance - The id of the ActiveXServer object.
  //
  // ActiveXServer_Get_DisplayNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the display name of the server. 
  //
  rpc Get_DisplayName(ActiveXServer_Get_DisplayNameRequest) returns (ActiveXServer_Get_DisplayNameResponse);
  
  
  // Property: MajorVersion
  //
  // Returns the major version of the server.
  //
  // ActiveXServer_Get_MajorVersionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXServerInstance - The id of the ActiveXServer object.
  //
  // ActiveXServer_Get_MajorVersionResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the major version of the server. 
  //
  rpc Get_MajorVersion(ActiveXServer_Get_MajorVersionRequest) returns (ActiveXServer_Get_MajorVersionResponse);
  
  
  // Property: MinorVersion
  //
  // Returns the minor version of the server.
  //
  // ActiveXServer_Get_MinorVersionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXServerInstance - The id of the ActiveXServer object.
  //
  // ActiveXServer_Get_MinorVersionResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the minor version of the server. 
  //
  rpc Get_MinorVersion(ActiveXServer_Get_MinorVersionRequest) returns (ActiveXServer_Get_MinorVersionResponse);
  
  
  // Property: VersionString
  //
  // Returns the version string of the server.
  //
  // This property displays the major version and minor version as hexadecimal numbers.
  //
  // ActiveXServer_Get_VersionStringRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXServerInstance - The id of the ActiveXServer object.
  //
  // ActiveXServer_Get_VersionStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the version string of the server. 
  //
  rpc Get_VersionString(ActiveXServer_Get_VersionStringRequest) returns (ActiveXServer_Get_VersionStringResponse);
  
  
  // Property: HelpFilePath
  //
  // Returns the absolute path of the help file of the server.
  //
  // ActiveXServer_Get_HelpFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXServerInstance - The id of the ActiveXServer object.
  //
  // ActiveXServer_Get_HelpFilePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the absolute path of the help file of the server. 
  //
  rpc Get_HelpFilePath(ActiveXServer_Get_HelpFilePathRequest) returns (ActiveXServer_Get_HelpFilePathResponse);
  
  
  // Property: HelpContext
  //
  // Returns the ID of the help topic for the server in the help file the  ActiveXServer.HelpFilePath property specifies.
  //
  // ActiveXServer_Get_HelpContextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXServerInstance - The id of the ActiveXServer object.
  //
  // ActiveXServer_Get_HelpContextResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the ID of the help topic for the server in the help file the  ActiveXServer.HelpFilePath property specifies. 
  //
  rpc Get_HelpContext(ActiveXServer_Get_HelpContextRequest) returns (ActiveXServer_Get_HelpContextResponse);
  
  
  // Property: LibraryFlags
  //
  // Returns the library flags of the server. This property can be any combination of LIBFLAGS defined in the Microsoft Windows Software Development Kit.
  //
  // ActiveXServer_Get_LibraryFlagsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXServerInstance - The id of the ActiveXServer object.
  //
  // ActiveXServer_Get_LibraryFlagsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the library flags of the server. This property can be any combination of LIBFLAGS defined in the Microsoft Windows Software Development Kit. 
  //
  rpc Get_LibraryFlags(ActiveXServer_Get_LibraryFlagsRequest) returns (ActiveXServer_Get_LibraryFlagsResponse);
  
  
  // Property: LocaleId
  //
  // Returns the locale ID of the server.
  //
  // ActiveXServer_Get_LocaleIdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXServerInstance - The id of the ActiveXServer object.
  //
  // ActiveXServer_Get_LocaleIdResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Returns the locale ID of the server. 
  //
  rpc Get_LocaleId(ActiveXServer_Get_LocaleIdRequest) returns (ActiveXServer_Get_LocaleIdResponse);
  
  
  // Property: CoClasses
  //
  // Returns the coclasses defined in this server.
  //
  // You must call the ActiveXServer.LoadTypeLibrary method to load the coclasses from the type library and populate this collection.
  //
  // ActiveXServer_Get_CoClassesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXServerInstance - The id of the ActiveXServer object.
  //
  // ActiveXServer_Get_CoClassesResponse - The response message from the server. It provides the return value.
  //    - returnValue: ActiveXCoClassesInstance - Returns the coclasses defined in this server. 
  //
  rpc Get_CoClasses(ActiveXServer_Get_CoClassesRequest) returns (ActiveXServer_Get_CoClassesResponse);
  
  
  // Property: Interfaces
  //
  // Returns the interfaces defined in this server.
  //
  // You must call the ActiveXServer.LoadTypeLibrary method to load the interfaces from the type library and populate this collection.
  //
  // ActiveXServer_Get_InterfacesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXServerInstance - The id of the ActiveXServer object.
  //
  // ActiveXServer_Get_InterfacesResponse - The response message from the server. It provides the return value.
  //    - returnValue: ActiveXInterfacesInstance - Returns the interfaces defined in this server. 
  //
  rpc Get_Interfaces(ActiveXServer_Get_InterfacesRequest) returns (ActiveXServer_Get_InterfacesResponse);
  
  
}
message ActiveXCoClassesInstance {
  // Specifies the handle of the ActiveXCoClasses instance in the server.
  string id = 1;
}

message ActiveXInterfacesInstance {
  // Specifies the handle of the ActiveXInterfaces instance in the server.
  string id = 1;
}
message ActiveXServer_LoadTypeLibraryRequest {
  // The id of the ActiveXServer object.
  ActiveXServerInstance instance = 1;
}

message ActiveXServer_LoadTypeLibraryResponse {
  // Returns True if this method updates the ActiveXServer.CoClasses and ActiveXServer.Interfaces collections from the type library. This method does nothing and returns False if the type library was not modified on disk since the last time you called this method.
  bool returnValue = 1;
}

message ActiveXServer_Get_PathRequest {
  // The id of the ActiveXServer object.
  ActiveXServerInstance instance = 1;
}

message ActiveXServer_Get_PathResponse {
  // Returns the absolute path of the server.
  string returnValue = 1;
}

message ActiveXServer_Get_IdRequest {
  // The id of the ActiveXServer object.
  ActiveXServerInstance instance = 1;
}

message ActiveXServer_Get_IdResponse {
  // Returns the GUID of the server.
  string returnValue = 1;
}

message ActiveXServer_Get_NameRequest {
  // The id of the ActiveXServer object.
  ActiveXServerInstance instance = 1;
}

message ActiveXServer_Get_NameResponse {
  // Returns the name of the server.
  string returnValue = 1;
}

message ActiveXServer_Get_DisplayNameRequest {
  // The id of the ActiveXServer object.
  ActiveXServerInstance instance = 1;
}

message ActiveXServer_Get_DisplayNameResponse {
  // Returns the display name of the server.
  string returnValue = 1;
}

message ActiveXServer_Get_MajorVersionRequest {
  // The id of the ActiveXServer object.
  ActiveXServerInstance instance = 1;
}

message ActiveXServer_Get_MajorVersionResponse {
  // Returns the major version of the server.
  int32 returnValue = 1;
}

message ActiveXServer_Get_MinorVersionRequest {
  // The id of the ActiveXServer object.
  ActiveXServerInstance instance = 1;
}

message ActiveXServer_Get_MinorVersionResponse {
  // Returns the minor version of the server.
  int32 returnValue = 1;
}

message ActiveXServer_Get_VersionStringRequest {
  // The id of the ActiveXServer object.
  ActiveXServerInstance instance = 1;
}

message ActiveXServer_Get_VersionStringResponse {
  // Returns the version string of the server.
  string returnValue = 1;
}

message ActiveXServer_Get_HelpFilePathRequest {
  // The id of the ActiveXServer object.
  ActiveXServerInstance instance = 1;
}

message ActiveXServer_Get_HelpFilePathResponse {
  // Returns the absolute path of the help file of the server.
  string returnValue = 1;
}

message ActiveXServer_Get_HelpContextRequest {
  // The id of the ActiveXServer object.
  ActiveXServerInstance instance = 1;
}

message ActiveXServer_Get_HelpContextResponse {
  // Returns the ID of the help topic for the server in the help file the  ActiveXServer.HelpFilePath property specifies.
  int32 returnValue = 1;
}

message ActiveXServer_Get_LibraryFlagsRequest {
  // The id of the ActiveXServer object.
  ActiveXServerInstance instance = 1;
}

message ActiveXServer_Get_LibraryFlagsResponse {
  // Returns the library flags of the server. This property can be any combination of LIBFLAGS defined in the Microsoft Windows Software Development Kit.
  int32 returnValue = 1;
}

message ActiveXServer_Get_LocaleIdRequest {
  // The id of the ActiveXServer object.
  ActiveXServerInstance instance = 1;
}

message ActiveXServer_Get_LocaleIdResponse {
  // Returns the locale ID of the server.
  uint32 returnValue = 1;
}

message ActiveXServer_Get_CoClassesRequest {
  // The id of the ActiveXServer object.
  ActiveXServerInstance instance = 1;
}

message ActiveXServer_Get_CoClassesResponse {
  // Returns the coclasses defined in this server.
  ActiveXCoClassesInstance returnValue = 1;
}

message ActiveXServer_Get_InterfacesRequest {
  // The id of the ActiveXServer object.
  ActiveXServerInstance instance = 1;
}

message ActiveXServer_Get_InterfacesResponse {
  // Returns the interfaces defined in this server.
  ActiveXInterfacesInstance returnValue = 1;
}

// ActiveXCoClasses
//
// A collection of ActiveXCoClass objects.
// Use the ActiveXServer.CoClasses property to obtain a collection of ActiveXCoClass objects the type library for the server defines. You must call the ActiveXServer.LoadTypeLibrary method before accessing any coclass information for the server.
//
service ActiveXCoClasses {
  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // ActiveXCoClasses_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ActiveXCoClassesInstance - The id of the ActiveXCoClasses object.
  //    - index: int32 - Specifies the zero-based index of the item to retrieve.
  //
  // ActiveXCoClasses_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: ActiveXCoClassInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(ActiveXCoClasses_Get_ItemRequest) returns (ActiveXCoClasses_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // ActiveXCoClasses_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXCoClassesInstance - The id of the ActiveXCoClasses object.
  //
  // ActiveXCoClasses_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(ActiveXCoClasses_Get_CountRequest) returns (ActiveXCoClasses_Get_CountResponse);
  
  
}
message ActiveXCoClassInstance {
  // Specifies the handle of the ActiveXCoClass instance in the server.
  string id = 1;
}
message ActiveXCoClasses_Get_ItemRequest {
  // The id of the ActiveXCoClasses object.
  ActiveXCoClassesInstance instance = 1;
  // Specifies the zero-based index of the item to retrieve.
  optional int32 index = 2;
}

message ActiveXCoClasses_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  ActiveXCoClassInstance returnValue = 1;
}

message ActiveXCoClasses_Get_CountRequest {
  // The id of the ActiveXCoClasses object.
  ActiveXCoClassesInstance instance = 1;
}

message ActiveXCoClasses_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// ActiveXCoClass
//
// Use an ActiveXCoClass object to obtain information about a coclass defined in a type library. Use the ActiveXServer.CoClasses property to obtain a collection of coclasses the type library for the server defines. You must call the ActiveXServer.LoadTypeLibrary method before accessing any coclass information for the server.
//
service ActiveXCoClass {
  // Method: GetInterfaceImplementationTypeFlags
  //
  // Returns flags associated with a specified interface in the ActiveXCoClass.Interfaces property.
  //
  // ActiveXCoClass_GetInterfaceImplementationTypeFlagsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ActiveXCoClassInstance - The id of the ActiveXCoClass object.
  //    - interfaceIndex: int32 - Specifies the index of an interface in the ActiveXCoClass.Interfaces property.
  //
  // ActiveXCoClass_GetInterfaceImplementationTypeFlagsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns any combination of TYPEFLAGS defined in the Microsoft Windows Software Development Kit. 
  //
  rpc GetInterfaceImplementationTypeFlags(ActiveXCoClass_GetInterfaceImplementationTypeFlagsRequest) returns (ActiveXCoClass_GetInterfaceImplementationTypeFlagsResponse);
  
  

  // Property: Id
  //
  // Returns the GUID of the coclass.
  //
  // ActiveXCoClass_Get_IdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXCoClassInstance - The id of the ActiveXCoClass object.
  //
  // ActiveXCoClass_Get_IdResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the GUID of the coclass. 
  //
  rpc Get_Id(ActiveXCoClass_Get_IdRequest) returns (ActiveXCoClass_Get_IdResponse);
  
  
  // Property: Name
  //
  // Returns the name of the coclass.
  //
  // ActiveXCoClass_Get_NameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXCoClassInstance - The id of the ActiveXCoClass object.
  //
  // ActiveXCoClass_Get_NameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the coclass. 
  //
  rpc Get_Name(ActiveXCoClass_Get_NameRequest) returns (ActiveXCoClass_Get_NameResponse);
  
  
  // Property: Documentation
  //
  // Returns the brief description of the coclass.
  //
  // ActiveXCoClass_Get_DocumentationRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXCoClassInstance - The id of the ActiveXCoClass object.
  //
  // ActiveXCoClass_Get_DocumentationResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the brief description of the coclass. 
  //
  rpc Get_Documentation(ActiveXCoClass_Get_DocumentationRequest) returns (ActiveXCoClass_Get_DocumentationResponse);
  
  
  // Property: HelpFilePath
  //
  // Returns the absolute path of the help file of the coclass.
  //
  // ActiveXCoClass_Get_HelpFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXCoClassInstance - The id of the ActiveXCoClass object.
  //
  // ActiveXCoClass_Get_HelpFilePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the absolute path of the help file of the coclass. 
  //
  rpc Get_HelpFilePath(ActiveXCoClass_Get_HelpFilePathRequest) returns (ActiveXCoClass_Get_HelpFilePathResponse);
  
  
  // Property: HelpContext
  //
  // Returns the ID of the help topic for the coclass in the help file the  ActiveXCoClass.HelpFilePath property specifies.
  //
  // ActiveXCoClass_Get_HelpContextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXCoClassInstance - The id of the ActiveXCoClass object.
  //
  // ActiveXCoClass_Get_HelpContextResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the ID of the help topic for the coclass in the help file the  ActiveXCoClass.HelpFilePath property specifies. 
  //
  rpc Get_HelpContext(ActiveXCoClass_Get_HelpContextRequest) returns (ActiveXCoClass_Get_HelpContextResponse);
  
  
  // Property: TypeFlags
  //
  // Returns the type flags of the coclass. This property can be any combination of TYPEFLAGS defined in the Microsoft Windows Software Development Kit.
  //
  // ActiveXCoClass_Get_TypeFlagsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXCoClassInstance - The id of the ActiveXCoClass object.
  //
  // ActiveXCoClass_Get_TypeFlagsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the type flags of the coclass. This property can be any combination of TYPEFLAGS defined in the Microsoft Windows Software Development Kit. 
  //
  rpc Get_TypeFlags(ActiveXCoClass_Get_TypeFlagsRequest) returns (ActiveXCoClass_Get_TypeFlagsResponse);
  
  
  // Property: Interfaces
  //
  // Returns the interfaces this coclass implements.
  //
  // ActiveXCoClass_Get_InterfacesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXCoClassInstance - The id of the ActiveXCoClass object.
  //
  // ActiveXCoClass_Get_InterfacesResponse - The response message from the server. It provides the return value.
  //    - returnValue: ActiveXInterfacesInstance - Returns the interfaces this coclass implements. 
  //
  rpc Get_Interfaces(ActiveXCoClass_Get_InterfacesRequest) returns (ActiveXCoClass_Get_InterfacesResponse);
  
  
}
message ActiveXCoClass_GetInterfaceImplementationTypeFlagsRequest {
  // The id of the ActiveXCoClass object.
  ActiveXCoClassInstance instance = 1;
  // Specifies the index of an interface in the ActiveXCoClass.Interfaces property.
  int32 interfaceIndex = 2;
}

message ActiveXCoClass_GetInterfaceImplementationTypeFlagsResponse {
  // Returns any combination of TYPEFLAGS defined in the Microsoft Windows Software Development Kit.
  int32 returnValue = 1;
}

message ActiveXCoClass_Get_IdRequest {
  // The id of the ActiveXCoClass object.
  ActiveXCoClassInstance instance = 1;
}

message ActiveXCoClass_Get_IdResponse {
  // Returns the GUID of the coclass.
  string returnValue = 1;
}

message ActiveXCoClass_Get_NameRequest {
  // The id of the ActiveXCoClass object.
  ActiveXCoClassInstance instance = 1;
}

message ActiveXCoClass_Get_NameResponse {
  // Returns the name of the coclass.
  string returnValue = 1;
}

message ActiveXCoClass_Get_DocumentationRequest {
  // The id of the ActiveXCoClass object.
  ActiveXCoClassInstance instance = 1;
}

message ActiveXCoClass_Get_DocumentationResponse {
  // Returns the brief description of the coclass.
  string returnValue = 1;
}

message ActiveXCoClass_Get_HelpFilePathRequest {
  // The id of the ActiveXCoClass object.
  ActiveXCoClassInstance instance = 1;
}

message ActiveXCoClass_Get_HelpFilePathResponse {
  // Returns the absolute path of the help file of the coclass.
  string returnValue = 1;
}

message ActiveXCoClass_Get_HelpContextRequest {
  // The id of the ActiveXCoClass object.
  ActiveXCoClassInstance instance = 1;
}

message ActiveXCoClass_Get_HelpContextResponse {
  // Returns the ID of the help topic for the coclass in the help file the  ActiveXCoClass.HelpFilePath property specifies.
  int32 returnValue = 1;
}

message ActiveXCoClass_Get_TypeFlagsRequest {
  // The id of the ActiveXCoClass object.
  ActiveXCoClassInstance instance = 1;
}

message ActiveXCoClass_Get_TypeFlagsResponse {
  // Returns the type flags of the coclass. This property can be any combination of TYPEFLAGS defined in the Microsoft Windows Software Development Kit.
  int32 returnValue = 1;
}

message ActiveXCoClass_Get_InterfacesRequest {
  // The id of the ActiveXCoClass object.
  ActiveXCoClassInstance instance = 1;
}

message ActiveXCoClass_Get_InterfacesResponse {
  // Returns the interfaces this coclass implements.
  ActiveXInterfacesInstance returnValue = 1;
}

// ActiveXInterfaces
//
// A collection of ActiveXInterface objects. Use the ActiveXServer.Interfaces property to obtain a collection of interfaces the type library for the server defines. You must call the ActiveXServer.LoadTypeLibrary method before accessing any interface information for the server.
//
service ActiveXInterfaces {
  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // ActiveXInterfaces_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ActiveXInterfacesInstance - The id of the ActiveXInterfaces object.
  //    - index: int32 - Specifies the zero-based index of the item to retrieve.
  //
  // ActiveXInterfaces_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: ActiveXInterfaceInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(ActiveXInterfaces_Get_ItemRequest) returns (ActiveXInterfaces_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // ActiveXInterfaces_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXInterfacesInstance - The id of the ActiveXInterfaces object.
  //
  // ActiveXInterfaces_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(ActiveXInterfaces_Get_CountRequest) returns (ActiveXInterfaces_Get_CountResponse);
  
  
}
message ActiveXInterfaceInstance {
  // Specifies the handle of the ActiveXInterface instance in the server.
  string id = 1;
}
message ActiveXInterfaces_Get_ItemRequest {
  // The id of the ActiveXInterfaces object.
  ActiveXInterfacesInstance instance = 1;
  // Specifies the zero-based index of the item to retrieve.
  optional int32 index = 2;
}

message ActiveXInterfaces_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  ActiveXInterfaceInstance returnValue = 1;
}

message ActiveXInterfaces_Get_CountRequest {
  // The id of the ActiveXInterfaces object.
  ActiveXInterfacesInstance instance = 1;
}

message ActiveXInterfaces_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// ActiveXInterface
//
// Use an ActiveXInterface object to obtain information about an interface defined in a type library. Use the ActiveXServer.Interfaces property to obtain a collection of interfaces the type library for the server defines. You must call the ActiveXServer.LoadTypeLibrary method before accessing any interface information for the server.
//
service ActiveXInterface {
  // Property: Id
  //
  // Returns the GUID of the interface.
  //
  // ActiveXInterface_Get_IdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXInterfaceInstance - The id of the ActiveXInterface object.
  //
  // ActiveXInterface_Get_IdResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the GUID of the interface. 
  //
  rpc Get_Id(ActiveXInterface_Get_IdRequest) returns (ActiveXInterface_Get_IdResponse);
  
  
  // Property: Name
  //
  // Returns the name of the interface.
  //
  // ActiveXInterface_Get_NameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXInterfaceInstance - The id of the ActiveXInterface object.
  //
  // ActiveXInterface_Get_NameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the interface. 
  //
  rpc Get_Name(ActiveXInterface_Get_NameRequest) returns (ActiveXInterface_Get_NameResponse);
  
  
  // Property: Documentation
  //
  // Returns the brief description of the interface.
  //
  // ActiveXInterface_Get_DocumentationRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXInterfaceInstance - The id of the ActiveXInterface object.
  //
  // ActiveXInterface_Get_DocumentationResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the brief description of the interface. 
  //
  rpc Get_Documentation(ActiveXInterface_Get_DocumentationRequest) returns (ActiveXInterface_Get_DocumentationResponse);
  
  
  // Property: HelpFilePath
  //
  // Returns the absolute path of the help file of the interface.
  //
  // ActiveXInterface_Get_HelpFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXInterfaceInstance - The id of the ActiveXInterface object.
  //
  // ActiveXInterface_Get_HelpFilePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the absolute path of the help file of the interface. 
  //
  rpc Get_HelpFilePath(ActiveXInterface_Get_HelpFilePathRequest) returns (ActiveXInterface_Get_HelpFilePathResponse);
  
  
  // Property: HelpContext
  //
  // Returns the ID of the help topic for the interface in the help file the ActiveXInterface.HelpFilePath property specifies.
  //
  // ActiveXInterface_Get_HelpContextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXInterfaceInstance - The id of the ActiveXInterface object.
  //
  // ActiveXInterface_Get_HelpContextResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the ID of the help topic for the interface in the help file the ActiveXInterface.HelpFilePath property specifies. 
  //
  rpc Get_HelpContext(ActiveXInterface_Get_HelpContextRequest) returns (ActiveXInterface_Get_HelpContextResponse);
  
  
  // Property: TypeFlags
  //
  // Returns the type flags of the interface. This property can be any combination of TYPEFLAGS defined in the Microsoft Windows Software Development Kit.
  //
  // ActiveXInterface_Get_TypeFlagsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXInterfaceInstance - The id of the ActiveXInterface object.
  //
  // ActiveXInterface_Get_TypeFlagsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the type flags of the interface. This property can be any combination of TYPEFLAGS defined in the Microsoft Windows Software Development Kit. 
  //
  rpc Get_TypeFlags(ActiveXInterface_Get_TypeFlagsRequest) returns (ActiveXInterface_Get_TypeFlagsResponse);
  
  
  // Property: ForTypedefOnly
  //
  // Returns True if this interface is an alias for another interface.
  //
  // ActiveXInterface_Get_ForTypedefOnlyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXInterfaceInstance - The id of the ActiveXInterface object.
  //
  // ActiveXInterface_Get_ForTypedefOnlyResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if this interface is an alias for another interface. 
  //
  rpc Get_ForTypedefOnly(ActiveXInterface_Get_ForTypedefOnlyRequest) returns (ActiveXInterface_Get_ForTypedefOnlyResponse);
  
  
  // Property: VTableMembers
  //
  // Returns the members of the interface that supports virtual table bindings.
  //
  // ActiveXInterface_Get_VTableMembersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXInterfaceInstance - The id of the ActiveXInterface object.
  //
  // ActiveXInterface_Get_VTableMembersResponse - The response message from the server. It provides the return value.
  //    - returnValue: ActiveXMembersInstance - Returns the members of the interface that supports virtual table bindings. 
  //
  rpc Get_VTableMembers(ActiveXInterface_Get_VTableMembersRequest) returns (ActiveXInterface_Get_VTableMembersResponse);
  
  
  // Property: DispatchMembers
  //
  // Returns the members of the interface that supports IDispatch bindings.
  //
  // ActiveXInterface_Get_DispatchMembersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXInterfaceInstance - The id of the ActiveXInterface object.
  //
  // ActiveXInterface_Get_DispatchMembersResponse - The response message from the server. It provides the return value.
  //    - returnValue: ActiveXMembersInstance - Returns the members of the interface that supports IDispatch bindings. 
  //
  rpc Get_DispatchMembers(ActiveXInterface_Get_DispatchMembersRequest) returns (ActiveXInterface_Get_DispatchMembersResponse);
  
  
}
message ActiveXMembersInstance {
  // Specifies the handle of the ActiveXMembers instance in the server.
  string id = 1;
}
message ActiveXInterface_Get_IdRequest {
  // The id of the ActiveXInterface object.
  ActiveXInterfaceInstance instance = 1;
}

message ActiveXInterface_Get_IdResponse {
  // Returns the GUID of the interface.
  string returnValue = 1;
}

message ActiveXInterface_Get_NameRequest {
  // The id of the ActiveXInterface object.
  ActiveXInterfaceInstance instance = 1;
}

message ActiveXInterface_Get_NameResponse {
  // Returns the name of the interface.
  string returnValue = 1;
}

message ActiveXInterface_Get_DocumentationRequest {
  // The id of the ActiveXInterface object.
  ActiveXInterfaceInstance instance = 1;
}

message ActiveXInterface_Get_DocumentationResponse {
  // Returns the brief description of the interface.
  string returnValue = 1;
}

message ActiveXInterface_Get_HelpFilePathRequest {
  // The id of the ActiveXInterface object.
  ActiveXInterfaceInstance instance = 1;
}

message ActiveXInterface_Get_HelpFilePathResponse {
  // Returns the absolute path of the help file of the interface.
  string returnValue = 1;
}

message ActiveXInterface_Get_HelpContextRequest {
  // The id of the ActiveXInterface object.
  ActiveXInterfaceInstance instance = 1;
}

message ActiveXInterface_Get_HelpContextResponse {
  // Returns the ID of the help topic for the interface in the help file the ActiveXInterface.HelpFilePath property specifies.
  int32 returnValue = 1;
}

message ActiveXInterface_Get_TypeFlagsRequest {
  // The id of the ActiveXInterface object.
  ActiveXInterfaceInstance instance = 1;
}

message ActiveXInterface_Get_TypeFlagsResponse {
  // Returns the type flags of the interface. This property can be any combination of TYPEFLAGS defined in the Microsoft Windows Software Development Kit.
  int32 returnValue = 1;
}

message ActiveXInterface_Get_ForTypedefOnlyRequest {
  // The id of the ActiveXInterface object.
  ActiveXInterfaceInstance instance = 1;
}

message ActiveXInterface_Get_ForTypedefOnlyResponse {
  // Returns True if this interface is an alias for another interface.
  bool returnValue = 1;
}

message ActiveXInterface_Get_VTableMembersRequest {
  // The id of the ActiveXInterface object.
  ActiveXInterfaceInstance instance = 1;
}

message ActiveXInterface_Get_VTableMembersResponse {
  // Returns the members of the interface that supports virtual table bindings.
  ActiveXMembersInstance returnValue = 1;
}

message ActiveXInterface_Get_DispatchMembersRequest {
  // The id of the ActiveXInterface object.
  ActiveXInterfaceInstance instance = 1;
}

message ActiveXInterface_Get_DispatchMembersResponse {
  // Returns the members of the interface that supports IDispatch bindings.
  ActiveXMembersInstance returnValue = 1;
}

// ActiveXMembers
//
// A collection of ActiveXMember objects.
// Use the ActiveXInterface.VTableMembers and ActiveXInterface.DispatchMembers properties to obtain a collection of ActiveXMember objects defined for an interface in the type library of the server.
//
service ActiveXMembers {
  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // ActiveXMembers_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ActiveXMembersInstance - The id of the ActiveXMembers object.
  //    - index: int32 - Specifies the zero-based index of the item to retrieve.
  //
  // ActiveXMembers_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: ActiveXMemberInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(ActiveXMembers_Get_ItemRequest) returns (ActiveXMembers_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // ActiveXMembers_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXMembersInstance - The id of the ActiveXMembers object.
  //
  // ActiveXMembers_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(ActiveXMembers_Get_CountRequest) returns (ActiveXMembers_Get_CountResponse);
  
  
}
message ActiveXMemberInstance {
  // Specifies the handle of the ActiveXMember instance in the server.
  string id = 1;
}
message ActiveXMembers_Get_ItemRequest {
  // The id of the ActiveXMembers object.
  ActiveXMembersInstance instance = 1;
  // Specifies the zero-based index of the item to retrieve.
  optional int32 index = 2;
}

message ActiveXMembers_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  ActiveXMemberInstance returnValue = 1;
}

message ActiveXMembers_Get_CountRequest {
  // The id of the ActiveXMembers object.
  ActiveXMembersInstance instance = 1;
}

message ActiveXMembers_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// ActiveXMember
//
// Use an ActiveXMember object to obtain information about a method or property defined in a type library. Use the ActiveXInterface.VTableMembers and ActiveXInterface.DispatchMembers properties to obtain a collection of members the type library for an interface of the server defines.
//
service ActiveXMember {
  // Property: VTableOffset
  //
  // Returns the offset of the member in the virtual table.
  //
  // ActiveXMember_Get_VTableOffsetRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXMemberInstance - The id of the ActiveXMember object.
  //
  // ActiveXMember_Get_VTableOffsetResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the offset of the member in the virtual table. 
  //
  rpc Get_VTableOffset(ActiveXMember_Get_VTableOffsetRequest) returns (ActiveXMember_Get_VTableOffsetResponse);
  
  
  // Property: DispatchId
  //
  // Returns the ID of the member.
  //
  // ActiveXMember_Get_DispatchIdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXMemberInstance - The id of the ActiveXMember object.
  //
  // ActiveXMember_Get_DispatchIdResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the ID of the member. 
  //
  rpc Get_DispatchId(ActiveXMember_Get_DispatchIdRequest) returns (ActiveXMember_Get_DispatchIdResponse);
  
  
  // Property: Name
  //
  // Returns the name of the member.
  //
  // ActiveXMember_Get_NameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXMemberInstance - The id of the ActiveXMember object.
  //
  // ActiveXMember_Get_NameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the member. 
  //
  rpc Get_Name(ActiveXMember_Get_NameRequest) returns (ActiveXMember_Get_NameResponse);
  
  
  // Property: Documentation
  //
  // Returns the brief description of the member.
  //
  // ActiveXMember_Get_DocumentationRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXMemberInstance - The id of the ActiveXMember object.
  //
  // ActiveXMember_Get_DocumentationResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the brief description of the member. 
  //
  rpc Get_Documentation(ActiveXMember_Get_DocumentationRequest) returns (ActiveXMember_Get_DocumentationResponse);
  
  
  // Property: HelpFilePath
  //
  // Returns the absolute path of the help file of the member.
  //
  // ActiveXMember_Get_HelpFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXMemberInstance - The id of the ActiveXMember object.
  //
  // ActiveXMember_Get_HelpFilePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the absolute path of the help file of the member. 
  //
  rpc Get_HelpFilePath(ActiveXMember_Get_HelpFilePathRequest) returns (ActiveXMember_Get_HelpFilePathResponse);
  
  
  // Property: HelpContext
  //
  // Returns the ID of the help topic for the member in the help file the ActiveXMember.HelpFilePath property specifies.
  //
  // ActiveXMember_Get_HelpContextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXMemberInstance - The id of the ActiveXMember object.
  //
  // ActiveXMember_Get_HelpContextResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the ID of the help topic for the member in the help file the ActiveXMember.HelpFilePath property specifies. 
  //
  rpc Get_HelpContext(ActiveXMember_Get_HelpContextRequest) returns (ActiveXMember_Get_HelpContextResponse);
  
  
  // Property: FunctionFlags
  //
  // Returns the function flags of the member. This property can be any combination of FUNCFLAGS defined in the Microsoft Windows Software Development Kit.
  //
  // ActiveXMember_Get_FunctionFlagsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXMemberInstance - The id of the ActiveXMember object.
  //
  // ActiveXMember_Get_FunctionFlagsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the function flags of the member. This property can be any combination of FUNCFLAGS defined in the Microsoft Windows Software Development Kit. 
  //
  rpc Get_FunctionFlags(ActiveXMember_Get_FunctionFlagsRequest) returns (ActiveXMember_Get_FunctionFlagsResponse);
  
  
  // Property: MemberType
  //
  // Returns a value that indicates whether the member is a method or property.
  //
  // ActiveXMember_Get_MemberTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXMemberInstance - The id of the ActiveXMember object.
  //
  // ActiveXMember_Get_MemberTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: ActiveXModuleMemberTypes - Returns a value that indicates whether the member is a method or property. 
  //
  rpc Get_MemberType(ActiveXMember_Get_MemberTypeRequest) returns (ActiveXMember_Get_MemberTypeResponse);
  
  
  // Property: ParameterTypeWarnings
  //
  // Returns a warning message if the type of any parameter or the type of the return value of this member is incompatible with TestStand types.
  //
  // ActiveXMember_Get_ParameterTypeWarningsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXMemberInstance - The id of the ActiveXMember object.
  //
  // ActiveXMember_Get_ParameterTypeWarningsResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns a warning message if the type of any parameter or the type of the return value of this member is incompatible with TestStand types. 
  //
  rpc Get_ParameterTypeWarnings(ActiveXMember_Get_ParameterTypeWarningsRequest) returns (ActiveXMember_Get_ParameterTypeWarningsResponse);
  
  
}
message ActiveXMember_Get_VTableOffsetRequest {
  // The id of the ActiveXMember object.
  ActiveXMemberInstance instance = 1;
}

message ActiveXMember_Get_VTableOffsetResponse {
  // Returns the offset of the member in the virtual table.
  int32 returnValue = 1;
}

message ActiveXMember_Get_DispatchIdRequest {
  // The id of the ActiveXMember object.
  ActiveXMemberInstance instance = 1;
}

message ActiveXMember_Get_DispatchIdResponse {
  // Returns the ID of the member.
  int32 returnValue = 1;
}

message ActiveXMember_Get_NameRequest {
  // The id of the ActiveXMember object.
  ActiveXMemberInstance instance = 1;
}

message ActiveXMember_Get_NameResponse {
  // Returns the name of the member.
  string returnValue = 1;
}

message ActiveXMember_Get_DocumentationRequest {
  // The id of the ActiveXMember object.
  ActiveXMemberInstance instance = 1;
}

message ActiveXMember_Get_DocumentationResponse {
  // Returns the brief description of the member.
  string returnValue = 1;
}

message ActiveXMember_Get_HelpFilePathRequest {
  // The id of the ActiveXMember object.
  ActiveXMemberInstance instance = 1;
}

message ActiveXMember_Get_HelpFilePathResponse {
  // Returns the absolute path of the help file of the member.
  string returnValue = 1;
}

message ActiveXMember_Get_HelpContextRequest {
  // The id of the ActiveXMember object.
  ActiveXMemberInstance instance = 1;
}

message ActiveXMember_Get_HelpContextResponse {
  // Returns the ID of the help topic for the member in the help file the ActiveXMember.HelpFilePath property specifies.
  int32 returnValue = 1;
}

message ActiveXMember_Get_FunctionFlagsRequest {
  // The id of the ActiveXMember object.
  ActiveXMemberInstance instance = 1;
}

message ActiveXMember_Get_FunctionFlagsResponse {
  // Returns the function flags of the member. This property can be any combination of FUNCFLAGS defined in the Microsoft Windows Software Development Kit.
  int32 returnValue = 1;
}

message ActiveXMember_Get_MemberTypeRequest {
  // The id of the ActiveXMember object.
  ActiveXMemberInstance instance = 1;
}

message ActiveXMember_Get_MemberTypeResponse {
  // Returns a value that indicates whether the member is a method or property.
  ActiveXModuleMemberTypes returnValue = 1;
}

message ActiveXMember_Get_ParameterTypeWarningsRequest {
  // The id of the ActiveXMember object.
  ActiveXMemberInstance instance = 1;
}

message ActiveXMember_Get_ParameterTypeWarningsResponse {
  // Returns a warning message if the type of any parameter or the type of the return value of this member is incompatible with TestStand types.
  string returnValue = 1;
}

// CommonCAdapter
//
// Use objects from the CommonCAdapter class to configure and obtain common information about the LabWindows/CVI and C/C++ DLL Adapters.
// To access the properties and methods of the Adapter class, use the CommonCAdapter.AsAdapter method to obtain an object.
// To access the properties and methods of a specific adapter class, query the CommonCAdapter object for the interface of the adapter-specific interface you want.
//
service CommonCAdapter {
  // Method: AsAdapter
  //
  // Returns the underlying module Adapter object that represents the CommonCAdapter.
  //
  // Use the underlying module Adapter object to access properties and methods common to all adapters.
  //
  // CommonCAdapter_AsAdapterRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCAdapterInstance - The id of the CommonCAdapter object.
  //
  // CommonCAdapter_AsAdapterResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdapterInstance - The return type of the Adapter object.
  //
  rpc AsAdapter(CommonCAdapter_AsAdapterRequest) returns (CommonCAdapter_AsAdapterResponse);
  
  
  // Method: GetAllowStructPassing
  //
  // Returns a value that indicates whether a type definition allows the adapter to pass instances of the type as structures to the corresponding module.
  //
  // CommonCAdapter_GetAllowStructPassingRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommonCAdapterInstance - The id of the CommonCAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  //
  // CommonCAdapter_GetAllowStructPassingResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc GetAllowStructPassing(CommonCAdapter_GetAllowStructPassingRequest) returns (CommonCAdapter_GetAllowStructPassingResponse);
  
  
  // Method: SetAllowStructPassing
  //
  // Specifies whether a type definition allows the adapter to pass instances of the type as structures to the corresponding module.
  //
  // CommonCAdapter_SetAllowStructPassingRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommonCAdapterInstance - The id of the CommonCAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  //    - allowStructPassing: bool - If this parameter is True, structure passing is enabled. Otherwise, structure passing is disabled.
  //
  // CommonCAdapter_SetAllowStructPassingResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetAllowStructPassing(CommonCAdapter_SetAllowStructPassingRequest) returns (CommonCAdapter_SetAllowStructPassingResponse);
  
  
  // Method: GetStructPacking
  //
  // Returns the manner in which an adapter packs the structure parameters it passes to a corresponding module. The packing options must match the structure packing for the struct in the code module.
  //
  // CommonCAdapter_GetStructPackingRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommonCAdapterInstance - The id of the CommonCAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  //
  // CommonCAdapter_GetStructPackingResponse - The response message from the server. It provides the return value.
  //    - returnValue: StructPassingOptions - Indicates the structure passing for the specific type definition. 
  //
  rpc GetStructPacking(CommonCAdapter_GetStructPackingRequest) returns (CommonCAdapter_GetStructPackingResponse);
  
  
  // Method: SetStructPacking
  //
  // Specifies how a type definition allows the adapter to pack the structure parameters it passes to a corresponding module. Set the packing options to match structure packing for the struct in the code module.
  //
  // CommonCAdapter_SetStructPackingRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommonCAdapterInstance - The id of the CommonCAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  //    - structPackingOption: StructPassingOptions - Specifies the structure passing for the specific type definition.
  //
  // CommonCAdapter_SetStructPackingResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetStructPacking(CommonCAdapter_SetStructPackingRequest) returns (CommonCAdapter_SetStructPackingResponse);
  
  
  // Method: GetExcludeFromStruct
  //
  // Returns a value that indicates whether the specified type definition property is excluded when converting instances of the type definition into structures to pass as parameters to the corresponding code module.
  //
  // CommonCAdapter_GetExcludeFromStructRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommonCAdapterInstance - The id of the CommonCAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //
  // CommonCAdapter_GetExcludeFromStructResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc GetExcludeFromStruct(CommonCAdapter_GetExcludeFromStructRequest) returns (CommonCAdapter_GetExcludeFromStructResponse);
  
  
  // Method: SetExcludeFromStruct
  //
  // Specifies whether the specified type definition property is excluded when converting instances of the type definition into structures to pass as parameters to the corresponding code module.
  //
  // CommonCAdapter_SetExcludeFromStructRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommonCAdapterInstance - The id of the CommonCAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //    - excludeFromStruct: bool - Set this parameter to True to exclude the corresponding property. Otherwise, set this parameter to False.
  //
  // CommonCAdapter_SetExcludeFromStructResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetExcludeFromStruct(CommonCAdapter_SetExcludeFromStructRequest) returns (CommonCAdapter_SetExcludeFromStructResponse);
  
  
  // Method: GetStructMemberType
  //
  // Returns the type of the type definition property that the corresponding location specifies.
  //
  // CommonCAdapter_GetStructMemberTypeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommonCAdapterInstance - The id of the CommonCAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //
  // CommonCAdapter_GetStructMemberTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: StructMemberTypes - The return type of the StructMemberTypes object.
  //
  rpc GetStructMemberType(CommonCAdapter_GetStructMemberTypeRequest) returns (CommonCAdapter_GetStructMemberTypeResponse);
  
  
  // Method: SetStructMemberType
  //
  // Specifies the type of the type definition property that the corresponding location specifies.
  //
  // CommonCAdapter_SetStructMemberTypeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommonCAdapterInstance - The id of the CommonCAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //    - structMemberType: StructMemberTypes - Specifies the type of specific property in the corresponding typeDefinition parameter.
  //
  // CommonCAdapter_SetStructMemberTypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetStructMemberType(CommonCAdapter_SetStructMemberTypeRequest) returns (CommonCAdapter_SetStructMemberTypeResponse);
  
  
  // Method: GetStructMemberStorage
  //
  // Returns the kind of storage used for the type definition property that the corresponding location specifies.
  //
  // CommonCAdapter_GetStructMemberStorageRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommonCAdapterInstance - The id of the CommonCAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //
  // CommonCAdapter_GetStructMemberStorageResponse - The response message from the server. It provides the return value.
  //    - returnValue: StructMemberStorageOptions - The return type of the StructMemberStorageOptions object.
  //
  rpc GetStructMemberStorage(CommonCAdapter_GetStructMemberStorageRequest) returns (CommonCAdapter_GetStructMemberStorageResponse);
  
  
  // Method: SetStructMemberStorage
  //
  // Specifies the kind of storage used for the type definition that the corresponding location stores.
  //
  // CommonCAdapter_SetStructMemberStorageRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommonCAdapterInstance - The id of the CommonCAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //    - structMemberStorage: StructMemberStorageOptions - Specifies the kind of storage of the specific property in the corresponding typeDefinition parameter.
  //
  // CommonCAdapter_SetStructMemberStorageResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetStructMemberStorage(CommonCAdapter_SetStructMemberStorageRequest) returns (CommonCAdapter_SetStructMemberStorageResponse);
  
  
  // Method: GetStructMemberArrayStorage
  //
  // Returns the kind of array storage used for the type definition array property that the corresponding location specifies.
  //
  // CommonCAdapter_GetStructMemberArrayStorageRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommonCAdapterInstance - The id of the CommonCAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //
  // CommonCAdapter_GetStructMemberArrayStorageResponse - The response message from the server. It provides the return value.
  //    - returnValue: StructMemberArrayStorageOptions - The return type of the StructMemberArrayStorageOptions object.
  //
  rpc GetStructMemberArrayStorage(CommonCAdapter_GetStructMemberArrayStorageRequest) returns (CommonCAdapter_GetStructMemberArrayStorageResponse);
  
  
  // Method: SetStructMemberArrayStorage
  //
  // Specifies the kind of array storage used for the type definition property that the corresponding location specifies.
  //
  // CommonCAdapter_SetStructMemberArrayStorageRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommonCAdapterInstance - The id of the CommonCAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //    - structMemberArrayStorage: StructMemberArrayStorageOptions - Specifies the kind of array storage of the specific property in the corresponding typeDefinition parameter.
  //
  // CommonCAdapter_SetStructMemberArrayStorageResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetStructMemberArrayStorage(CommonCAdapter_SetStructMemberArrayStorageRequest) returns (CommonCAdapter_SetStructMemberArrayStorageResponse);
  
  
  // Method: GetStructMemberStringBufferSize
  //
  // Returns the string buffer size that corresponds to the property that the corresponding location specifies.
  //
  // CommonCAdapter_GetStructMemberStringBufferSizeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommonCAdapterInstance - The id of the CommonCAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //
  // CommonCAdapter_GetStructMemberStringBufferSizeResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - The return type of the Int32 object.
  //
  rpc GetStructMemberStringBufferSize(CommonCAdapter_GetStructMemberStringBufferSizeRequest) returns (CommonCAdapter_GetStructMemberStringBufferSizeResponse);
  
  
  // Method: SetStructMemberStringBufferSize
  //
  // Specifies the string buffer size corresponding to the property that the corresponding location specifies.
  //
  // CommonCAdapter_SetStructMemberStringBufferSizeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommonCAdapterInstance - The id of the CommonCAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //    - structMemberStringBufferSize: int32 - Specifies the string buffer size for the corresponding property.
  //
  // CommonCAdapter_SetStructMemberStringBufferSizeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetStructMemberStringBufferSize(CommonCAdapter_SetStructMemberStringBufferSizeRequest) returns (CommonCAdapter_SetStructMemberStringBufferSizeResponse);
  
  
  // Method: GetDllFunctions
  //
  // Returns the functions for a specific DLL.
  //
  // This method reads the specified DLL and obtains a list of functions in the DLL. If a type library exists in the same directory as the DLL and the type library has the same base filename as the DLL, this method reads the type library for function parameter information.
  //
  // CommonCAdapter_GetDllFunctionsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommonCAdapterInstance - The id of the CommonCAdapter object.
  //    - dllPath: string - Specifies the absolute path of the DLL.
  //
  // CommonCAdapter_GetDllFunctionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: DllFunctionsInstance - The return type of the DllFunctions object.
  //
  rpc GetDllFunctions(CommonCAdapter_GetDllFunctionsRequest) returns (CommonCAdapter_GetDllFunctionsResponse);
  
  
  // Method: GetStructNames
  //
  // Returns a list of TestStand type names to use to pass to C struct parameters. The list contains all the currently loaded TestStand types you can pass to structure parameters.
  //
  // CommonCAdapter_GetStructNamesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCAdapterInstance - The id of the CommonCAdapter object.
  //
  // CommonCAdapter_GetStructNamesResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated string - The return type of the String[] object.
  //
  rpc GetStructNames(CommonCAdapter_GetStructNamesRequest) returns (CommonCAdapter_GetStructNamesResponse);
  
  
  // Method: GetEnumerationNames
  //
  // Returns a list of TestStand type names to use to pass to enumeration parameters. The list contains all currently loaded TestStand types you can pass to enumeration parameters.
  //
  // CommonCAdapter_GetEnumerationNamesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommonCAdapterInstance - The id of the CommonCAdapter object.
  //    - includeEnumArrays: bool - Set this parameter to True to include Arrays of Enumerations in the list of TestStand type names. Otherwise, set to False.
  //
  // CommonCAdapter_GetEnumerationNamesResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated string - The return type of the String[] object.
  //
  rpc GetEnumerationNames(CommonCAdapter_GetEnumerationNamesRequest) returns (CommonCAdapter_GetEnumerationNamesResponse);
  
  

  // Property: DefaultStructPacking
  //
  // Specifies how an adapter packs the structure parameters it passes to a corresponding module. Set the packing options to match the default for structure packing in the development environment.
  //
  // Specify the type of struct passing by using the StructPassingOptions constants.
  //
  // CommonCAdapter_Set_DefaultStructPackingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCAdapterInstance - The id of the CommonCAdapter object.
  //    - propertyValue: StructPassingOptions - Specifies how an adapter packs the structure parameters it passes to a corresponding module. Set the packing options to match the default for structure packing in the development environment. 
  //
  // CommonCAdapter_Set_DefaultStructPackingResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CommonCAdapter_Get_DefaultStructPackingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCAdapterInstance - The id of the CommonCAdapter object.
  //
  // CommonCAdapter_Get_DefaultStructPackingResponse - The response message from the server. It provides the return value.
  //    - returnValue: StructPassingOptions - Specifies how an adapter packs the structure parameters it passes to a corresponding module. Set the packing options to match the default for structure packing in the development environment. 
  //
  rpc Set_DefaultStructPacking(CommonCAdapter_Set_DefaultStructPackingRequest) returns (CommonCAdapter_Set_DefaultStructPackingResponse);
  rpc Get_DefaultStructPacking(CommonCAdapter_Get_DefaultStructPackingRequest) returns (CommonCAdapter_Get_DefaultStructPackingResponse);
  
  
}
message CommonCAdapterInstance {
  // Specifies the handle of the CommonCAdapter instance in the server.
  string id = 1;
}

message DllFunctionsInstance {
  // Specifies the handle of the DllFunctions instance in the server.
  string id = 1;
}
message CommonCAdapter_AsAdapterRequest {
  // The id of the CommonCAdapter object.
  CommonCAdapterInstance instance = 1;
}

message CommonCAdapter_AsAdapterResponse {
  // The return type of the Adapter object.
  AdapterInstance returnValue = 1;
}

message CommonCAdapter_GetAllowStructPassingRequest {
  // The id of the CommonCAdapter object.
  CommonCAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
}

message CommonCAdapter_GetAllowStructPassingResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message CommonCAdapter_SetAllowStructPassingRequest {
  // The id of the CommonCAdapter object.
  CommonCAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // If this parameter is True, structure passing is enabled. Otherwise, structure passing is disabled.
  bool allowStructPassing = 3;
}

message CommonCAdapter_SetAllowStructPassingResponse {
}

message CommonCAdapter_GetStructPackingRequest {
  // The id of the CommonCAdapter object.
  CommonCAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
}

message CommonCAdapter_GetStructPackingResponse {
  // Indicates the structure passing for the specific type definition.
  StructPassingOptions returnValue = 1;
}

message CommonCAdapter_SetStructPackingRequest {
  // The id of the CommonCAdapter object.
  CommonCAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the structure passing for the specific type definition.
  StructPassingOptions structPackingOption = 3;
}

message CommonCAdapter_SetStructPackingResponse {
}

message CommonCAdapter_GetExcludeFromStructRequest {
  // The id of the CommonCAdapter object.
  CommonCAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
}

message CommonCAdapter_GetExcludeFromStructResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message CommonCAdapter_SetExcludeFromStructRequest {
  // The id of the CommonCAdapter object.
  CommonCAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
  // Set this parameter to True to exclude the corresponding property. Otherwise, set this parameter to False.
  bool excludeFromStruct = 4;
}

message CommonCAdapter_SetExcludeFromStructResponse {
}

message CommonCAdapter_GetStructMemberTypeRequest {
  // The id of the CommonCAdapter object.
  CommonCAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
}

message CommonCAdapter_GetStructMemberTypeResponse {
  // The return type of the StructMemberTypes object.
  StructMemberTypes returnValue = 1;
}

message CommonCAdapter_SetStructMemberTypeRequest {
  // The id of the CommonCAdapter object.
  CommonCAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
  // Specifies the type of specific property in the corresponding typeDefinition parameter.
  StructMemberTypes structMemberType = 4;
}

message CommonCAdapter_SetStructMemberTypeResponse {
}

message CommonCAdapter_GetStructMemberStorageRequest {
  // The id of the CommonCAdapter object.
  CommonCAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
}

message CommonCAdapter_GetStructMemberStorageResponse {
  // The return type of the StructMemberStorageOptions object.
  StructMemberStorageOptions returnValue = 1;
}

message CommonCAdapter_SetStructMemberStorageRequest {
  // The id of the CommonCAdapter object.
  CommonCAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
  // Specifies the kind of storage of the specific property in the corresponding typeDefinition parameter.
  StructMemberStorageOptions structMemberStorage = 4;
}

message CommonCAdapter_SetStructMemberStorageResponse {
}

message CommonCAdapter_GetStructMemberArrayStorageRequest {
  // The id of the CommonCAdapter object.
  CommonCAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
}

message CommonCAdapter_GetStructMemberArrayStorageResponse {
  // The return type of the StructMemberArrayStorageOptions object.
  StructMemberArrayStorageOptions returnValue = 1;
}

message CommonCAdapter_SetStructMemberArrayStorageRequest {
  // The id of the CommonCAdapter object.
  CommonCAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
  // Specifies the kind of array storage of the specific property in the corresponding typeDefinition parameter.
  StructMemberArrayStorageOptions structMemberArrayStorage = 4;
}

message CommonCAdapter_SetStructMemberArrayStorageResponse {
}

message CommonCAdapter_GetStructMemberStringBufferSizeRequest {
  // The id of the CommonCAdapter object.
  CommonCAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
}

message CommonCAdapter_GetStructMemberStringBufferSizeResponse {
  // The return type of the Int32 object.
  int32 returnValue = 1;
}

message CommonCAdapter_SetStructMemberStringBufferSizeRequest {
  // The id of the CommonCAdapter object.
  CommonCAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
  // Specifies the string buffer size for the corresponding property.
  int32 structMemberStringBufferSize = 4;
}

message CommonCAdapter_SetStructMemberStringBufferSizeResponse {
}

message CommonCAdapter_GetDllFunctionsRequest {
  // The id of the CommonCAdapter object.
  CommonCAdapterInstance instance = 1;
  // Specifies the absolute path of the DLL.
  string dllPath = 2;
}

message CommonCAdapter_GetDllFunctionsResponse {
  // The return type of the DllFunctions object.
  DllFunctionsInstance returnValue = 1;
}

message CommonCAdapter_GetStructNamesRequest {
  // The id of the CommonCAdapter object.
  CommonCAdapterInstance instance = 1;
}

message CommonCAdapter_GetStructNamesResponse {
  // The return type of the String[] object.
  repeated string returnValue = 1;
}

message CommonCAdapter_GetEnumerationNamesRequest {
  // The id of the CommonCAdapter object.
  CommonCAdapterInstance instance = 1;
  // Set this parameter to True to include Arrays of Enumerations in the list of TestStand type names. Otherwise, set to False.
  bool includeEnumArrays = 2;
}

message CommonCAdapter_GetEnumerationNamesResponse {
  // The return type of the String[] object.
  repeated string returnValue = 1;
}

message CommonCAdapter_Set_DefaultStructPackingRequest {
  // The id of the CommonCAdapter object.
  CommonCAdapterInstance instance = 1;
  // Specifies how an adapter packs the structure parameters it passes to a corresponding module. Set the packing options to match the default for structure packing in the development environment.
  StructPassingOptions propertyValue = 2;
}

message CommonCAdapter_Set_DefaultStructPackingResponse {
}

message CommonCAdapter_Get_DefaultStructPackingRequest {
  // The id of the CommonCAdapter object.
  CommonCAdapterInstance instance = 1;
}

message CommonCAdapter_Get_DefaultStructPackingResponse {
  // Specifies how an adapter packs the structure parameters it passes to a corresponding module. Set the packing options to match the default for structure packing in the development environment.
  StructPassingOptions returnValue = 1;
}

// DllFunctions
//
// This class is a collection of DllFunction objects. Each item in the collection represents a function exported from a DLL that can be called from TestStand using the LabWindows/CVI or C/C++ DLL adapter.
// 
// Use the CommonCAdapter.GetDllFunctions method to obtain a collection of functions from a DLL.
// 
//
service DllFunctions {
  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // DllFunctions_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DllFunctionsInstance - The id of the DllFunctions object.
  //    - index: int32 - Specifies the zero-based index.
  //
  // DllFunctions_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: DllFunctionInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(DllFunctions_Get_ItemRequest) returns (DllFunctions_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // DllFunctions_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllFunctionsInstance - The id of the DllFunctions object.
  //
  // DllFunctions_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(DllFunctions_Get_CountRequest) returns (DllFunctions_Get_CountResponse);
  
  
}
message DllFunctionInstance {
  // Specifies the handle of the DllFunction instance in the server.
  string id = 1;
}
message DllFunctions_Get_ItemRequest {
  // The id of the DllFunctions object.
  DllFunctionsInstance instance = 1;
  // Specifies the zero-based index.
  optional int32 index = 2;
}

message DllFunctions_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  DllFunctionInstance returnValue = 1;
}

message DllFunctions_Get_CountRequest {
  // The id of the DllFunctions object.
  DllFunctionsInstance instance = 1;
}

message DllFunctions_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// DllFunction
//
// Use objects from the DllFunction class to obtain information about a function exported from a DLL. Use the CommonCAdapter.GetDllFunctions method to obtain a collection of functions from a DLL.
//
service DllFunction {
  // Property: DisplayName
  //
  // Returns the name of a function in a DLL.
  //
  // There can be up to three different names for a function: DisplayName, UniqueDisplayName and SymbolName.
  // The DisplayName is the simple function name. The UniqueDisplayName is a name that contains parameter type information to distinguish different function overloads in the DLL. If no overloads for a function exist, DisplayName is the same as UniqueDisplayName. The SymbolName is the name exported from the DLL. For C++ functions, the SymbolName contains decorations that encode parameter type information. SymbolName is also a unique name, but it is not intended to be displayed.
  //
  // DllFunction_Get_DisplayNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllFunctionInstance - The id of the DllFunction object.
  //
  // DllFunction_Get_DisplayNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of a function in a DLL. 
  //
  rpc Get_DisplayName(DllFunction_Get_DisplayNameRequest) returns (DllFunction_Get_DisplayNameResponse);
  
  
  // Property: UniqueDisplayName
  //
  // Returns a unique name for a function in a DLL.
  //
  // There can be up to three different names for a function: DisplayName, UniqueDisplayName and SymbolName.
  // The DisplayName is the simple function name. The UniqueDisplayName is a name that contains parameter type information to distinguish different function overloads in the DLL. If no overloads exist for a function, DisplayName is the same as UniqueDisplayName. The SymbolName is the name exported from the DLL. For C++ functions, the SymbolName contains decorations that encode parameter type information. SymbolName is also a unique name, but it is not intended to be displayed.
  //
  // DllFunction_Get_UniqueDisplayNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllFunctionInstance - The id of the DllFunction object.
  //
  // DllFunction_Get_UniqueDisplayNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns a unique name for a function in a DLL. 
  //
  rpc Get_UniqueDisplayName(DllFunction_Get_UniqueDisplayNameRequest) returns (DllFunction_Get_UniqueDisplayNameResponse);
  
  
  // Property: SymbolName
  //
  // Returns the symbol name of a function in a DLL.
  //
  // There can be up to three different names for a function: DisplayName, UniqueDisplayName and SymbolName.
  // The DisplayName is the simple function name. The UniqueDisplayName is a name that contains parameter type information to distinguish different function overloads in the DLL. If no overloads for a function exist, DisplayName is the same as UniqueDisplayName. The SymbolName is the name exported from the DLL. For C++ functions, the SymbolName contains decorations that encode parameter type information. SymbolName is also a unique name, but it is not intended to be displayed.
  //
  // DllFunction_Get_SymbolNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllFunctionInstance - The id of the DllFunction object.
  //
  // DllFunction_Get_SymbolNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the symbol name of a function in a DLL. 
  //
  rpc Get_SymbolName(DllFunction_Get_SymbolNameRequest) returns (DllFunction_Get_SymbolNameResponse);
  
  
  // Property: HelpFilePath
  //
  // Returns the absolute path of the help file associated with the function.
  //
  // You can associate a help file with a function in a type library.
  //
  // DllFunction_Get_HelpFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllFunctionInstance - The id of the DllFunction object.
  //
  // DllFunction_Get_HelpFilePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the absolute path of the help file associated with the function. 
  //
  rpc Get_HelpFilePath(DllFunction_Get_HelpFilePathRequest) returns (DllFunction_Get_HelpFilePathResponse);
  
  
  // Property: HelpContext
  //
  // Returns a tag for the help topic for the function in the help file the DllFunction.HelpFilePath property specifies.
  //
  // You can associate a help file with a function in a type library.
  //
  // DllFunction_Get_HelpContextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllFunctionInstance - The id of the DllFunction object.
  //
  // DllFunction_Get_HelpContextResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a tag for the help topic for the function in the help file the DllFunction.HelpFilePath property specifies. 
  //
  rpc Get_HelpContext(DllFunction_Get_HelpContextRequest) returns (DllFunction_Get_HelpContextResponse);
  
  
  // Property: ParameterTypeWarnings
  //
  // Returns a warning message if TestStand could not obtain type information for the parameters from the type library associated with the DLL.
  //
  // TestStand reads a type library to obtain type information for parameters. If TestStand cannot read the type library for some reason, it sets this property to a message that explains what failed.
  //
  // DllFunction_Get_ParameterTypeWarningsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllFunctionInstance - The id of the DllFunction object.
  //
  // DllFunction_Get_ParameterTypeWarningsResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns a warning message if TestStand could not obtain type information for the parameters from the type library associated with the DLL. 
  //
  rpc Get_ParameterTypeWarnings(DllFunction_Get_ParameterTypeWarningsRequest) returns (DllFunction_Get_ParameterTypeWarningsResponse);
  
  
  // Property: HasParameterInformation
  //
  // Returns a value that indicates whether TestStand obtained type information for the parameters of the function in the DLL.
  //
  // TestStand obtains type information for parameters from the DLL or from a type library.
  //
  // DllFunction_Get_HasParameterInformationRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllFunctionInstance - The id of the DllFunction object.
  //
  // DllFunction_Get_HasParameterInformationResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether TestStand obtained type information for the parameters of the function in the DLL. 
  //
  rpc Get_HasParameterInformation(DllFunction_Get_HasParameterInformationRequest) returns (DllFunction_Get_HasParameterInformationResponse);
  
  
}
message DllFunction_Get_DisplayNameRequest {
  // The id of the DllFunction object.
  DllFunctionInstance instance = 1;
}

message DllFunction_Get_DisplayNameResponse {
  // Returns the name of a function in a DLL.
  string returnValue = 1;
}

message DllFunction_Get_UniqueDisplayNameRequest {
  // The id of the DllFunction object.
  DllFunctionInstance instance = 1;
}

message DllFunction_Get_UniqueDisplayNameResponse {
  // Returns a unique name for a function in a DLL.
  string returnValue = 1;
}

message DllFunction_Get_SymbolNameRequest {
  // The id of the DllFunction object.
  DllFunctionInstance instance = 1;
}

message DllFunction_Get_SymbolNameResponse {
  // Returns the symbol name of a function in a DLL.
  string returnValue = 1;
}

message DllFunction_Get_HelpFilePathRequest {
  // The id of the DllFunction object.
  DllFunctionInstance instance = 1;
}

message DllFunction_Get_HelpFilePathResponse {
  // Returns the absolute path of the help file associated with the function.
  string returnValue = 1;
}

message DllFunction_Get_HelpContextRequest {
  // The id of the DllFunction object.
  DllFunctionInstance instance = 1;
}

message DllFunction_Get_HelpContextResponse {
  // Returns a tag for the help topic for the function in the help file the DllFunction.HelpFilePath property specifies.
  int32 returnValue = 1;
}

message DllFunction_Get_ParameterTypeWarningsRequest {
  // The id of the DllFunction object.
  DllFunctionInstance instance = 1;
}

message DllFunction_Get_ParameterTypeWarningsResponse {
  // Returns a warning message if TestStand could not obtain type information for the parameters from the type library associated with the DLL.
  string returnValue = 1;
}

message DllFunction_Get_HasParameterInformationRequest {
  // The id of the DllFunction object.
  DllFunctionInstance instance = 1;
}

message DllFunction_Get_HasParameterInformationResponse {
  // Returns a value that indicates whether TestStand obtained type information for the parameters of the function in the DLL.
  bool returnValue = 1;
}

// CVIAdapter
//
// Use objects from the CVIAdapter class to configure and obtain LabWindows/CVI Adapter-specific information about the module adapter. Call the Engine.GetAdapter or Engine.GetAdapterByKeyName method to obtain a reference to the adapter object.
// To access the properties and methods of the Adapter class, use the CVIAdapter.AsAdapter method to obtain an object.
//
service CVIAdapter {
  // Method: AsCommonCAdapter
  //
  // Returns the underlying CommonCAdapter object that represents the LabWindows/CVI Adapter.
  //
  // Use the CommonCAdapter object to access properties and methods common to all adapters derived from this class.
  //
  // CVIAdapter_AsCommonCAdapterRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CVIAdapterInstance - The id of the CVIAdapter object.
  //
  // CVIAdapter_AsCommonCAdapterResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommonCAdapterInstance - The return type of the CommonCAdapter object.
  //
  rpc AsCommonCAdapter(CVIAdapter_AsCommonCAdapterRequest) returns (CVIAdapter_AsCommonCAdapterResponse);
  
  
  // Method: AsAdapter
  //
  // Returns the underlying module Adapter object that represents the LabWindows/CVI Adapter.
  //
  // Use the adapter to access properties and methods common to all adapters.
  //
  // CVIAdapter_AsAdapterRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CVIAdapterInstance - The id of the CVIAdapter object.
  //
  // CVIAdapter_AsAdapterResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdapterInstance - The return type of the Adapter object.
  //
  rpc AsAdapter(CVIAdapter_AsAdapterRequest) returns (CVIAdapter_AsAdapterResponse);
  
  
  // Method: NewModule
  //
  // Creates and returns a new CVIModule object. Use this method to create a CVIModule object that you can execute without using a step, sequence, or execution.
  //
  // CVIAdapter_NewModuleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CVIAdapterInstance - The id of the CVIAdapter object.
  //
  // CVIAdapter_NewModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: CVIModuleInstance - The return type of the CVIModule object.
  //
  rpc NewModule(CVIAdapter_NewModuleRequest) returns (CVIAdapter_NewModuleResponse);
  
  

  // Property: ExecuteStepsInExternalInstance
  //
  // You can specify the test execution mode as in-process or out-of-process for the LabWindows/CVI Adapter. When the adapter runs tests in-process, it executes them in the same process as the sequence editor or the user interface you are running. When the adapter runs tests out-of-process, it executes them in an external instance of the LabWindows/CVI development environment.
  // If this property is True, the tests run out-of-process. If the property is False, the tests run in-process.
  //
  // When you execute code modules in the same process as the sequence editor or user interface, the adapter loads and runs code modules directly without using the LabWindows/CVI development environment.
  //
  // CVIAdapter_Set_ExecuteStepsInExternalInstanceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CVIAdapterInstance - The id of the CVIAdapter object.
  //    - propertyValue: bool - You can specify the test execution mode as in-process or out-of-process for the LabWindows/CVI Adapter. When the adapter runs tests in-process, it executes them in the same process as the sequence editor or the user interface you are running. When the adapter runs tests out-of-process, it executes them in an external instance of the LabWindows/CVI development environment. If this property is True, the tests run out-of-process. If the property is False, the tests run in-process. 
  //
  // CVIAdapter_Set_ExecuteStepsInExternalInstanceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CVIAdapter_Get_ExecuteStepsInExternalInstanceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CVIAdapterInstance - The id of the CVIAdapter object.
  //
  // CVIAdapter_Get_ExecuteStepsInExternalInstanceResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - You can specify the test execution mode as in-process or out-of-process for the LabWindows/CVI Adapter. When the adapter runs tests in-process, it executes them in the same process as the sequence editor or the user interface you are running. When the adapter runs tests out-of-process, it executes them in an external instance of the LabWindows/CVI development environment. If this property is True, the tests run out-of-process. If the property is False, the tests run in-process. 
  //
  rpc Set_ExecuteStepsInExternalInstance(CVIAdapter_Set_ExecuteStepsInExternalInstanceRequest) returns (CVIAdapter_Set_ExecuteStepsInExternalInstanceResponse);
  rpc Get_ExecuteStepsInExternalInstance(CVIAdapter_Get_ExecuteStepsInExternalInstanceRequest) returns (CVIAdapter_Get_ExecuteStepsInExternalInstanceResponse);
  
  
  // Property: ExecutionServerProjectPathName
  //
  // The LabWindows/CVI Adapter can launch two different copies of LabWindows/CVI.
  // The adapter uses one copy to execute test modules. By default, the adapter opens <TestStand>\AdapterSupport\CVI\tscvirun.prj in the copy of LabWindows/CVI that is executing the code modules. You can use the LabWindows/CVI Adapter Configuration dialog box to change which project the adapter uses to run code modules.
  // The adapter uses the other copy of LabWindows/CVI to allow you to edit the projects you use to create DLLs, static libraries, and object files.
  //
  // When you execute code modules in the same process as the sequence editor or user interface, the adapter loads and runs code modules directly without using the LabWindows/CVI development environment.
  //
  // CVIAdapter_Set_ExecutionServerProjectPathNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CVIAdapterInstance - The id of the CVIAdapter object.
  //    - propertyValue: string - The LabWindows/CVI Adapter can launch two different copies of LabWindows/CVI. The adapter uses one copy to execute test modules. By default, the adapter opens <TestStand>\AdapterSupport\CVI\tscvirun.prj in the copy of LabWindows/CVI that is executing the code modules. You can use the LabWindows/CVI Adapter Configuration dialog box to change which project the adapter uses to run code modules. The adapter uses the other copy of LabWindows/CVI to allow you to edit the projects you use to create DLLs, static libraries, and object files. 
  //
  // CVIAdapter_Set_ExecutionServerProjectPathNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CVIAdapter_Get_ExecutionServerProjectPathNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CVIAdapterInstance - The id of the CVIAdapter object.
  //
  // CVIAdapter_Get_ExecutionServerProjectPathNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The LabWindows/CVI Adapter can launch two different copies of LabWindows/CVI. The adapter uses one copy to execute test modules. By default, the adapter opens <TestStand>\AdapterSupport\CVI\tscvirun.prj in the copy of LabWindows/CVI that is executing the code modules. You can use the LabWindows/CVI Adapter Configuration dialog box to change which project the adapter uses to run code modules. The adapter uses the other copy of LabWindows/CVI to allow you to edit the projects you use to create DLLs, static libraries, and object files. 
  //
  rpc Set_ExecutionServerProjectPathName(CVIAdapter_Set_ExecutionServerProjectPathNameRequest) returns (CVIAdapter_Set_ExecutionServerProjectPathNameResponse);
  rpc Get_ExecutionServerProjectPathName(CVIAdapter_Get_ExecutionServerProjectPathNameRequest) returns (CVIAdapter_Get_ExecutionServerProjectPathNameResponse);
  
  
  // Property: CodeTemplatePolicy
  //
  // Specifies which code templates to use during code creation. You can choose to use new templates, legacy templates, or both new and legacy templates.
  //
  // CVIAdapter_Set_CodeTemplatePolicyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CVIAdapterInstance - The id of the CVIAdapter object.
  //    - propertyValue: AdapterCodeTemplatePolicies - Specifies which code templates to use during code creation. You can choose to use new templates, legacy templates, or both new and legacy templates. 
  //
  // CVIAdapter_Set_CodeTemplatePolicyResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CVIAdapter_Get_CodeTemplatePolicyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CVIAdapterInstance - The id of the CVIAdapter object.
  //
  // CVIAdapter_Get_CodeTemplatePolicyResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdapterCodeTemplatePolicies - Specifies which code templates to use during code creation. You can choose to use new templates, legacy templates, or both new and legacy templates. 
  //
  rpc Set_CodeTemplatePolicy(CVIAdapter_Set_CodeTemplatePolicyRequest) returns (CVIAdapter_Set_CodeTemplatePolicyResponse);
  rpc Get_CodeTemplatePolicy(CVIAdapter_Get_CodeTemplatePolicyRequest) returns (CVIAdapter_Get_CodeTemplatePolicyResponse);
  
  
}
message CVIAdapterInstance {
  // Specifies the handle of the CVIAdapter instance in the server.
  string id = 1;
}

message CVIModuleInstance {
  // Specifies the handle of the CVIModule instance in the server.
  string id = 1;
}
message CVIAdapter_AsCommonCAdapterRequest {
  // The id of the CVIAdapter object.
  CVIAdapterInstance instance = 1;
}

message CVIAdapter_AsCommonCAdapterResponse {
  // The return type of the CommonCAdapter object.
  CommonCAdapterInstance returnValue = 1;
}

message CVIAdapter_AsAdapterRequest {
  // The id of the CVIAdapter object.
  CVIAdapterInstance instance = 1;
}

message CVIAdapter_AsAdapterResponse {
  // The return type of the Adapter object.
  AdapterInstance returnValue = 1;
}

message CVIAdapter_NewModuleRequest {
  // The id of the CVIAdapter object.
  CVIAdapterInstance instance = 1;
}

message CVIAdapter_NewModuleResponse {
  // The return type of the CVIModule object.
  CVIModuleInstance returnValue = 1;
}

message CVIAdapter_Set_ExecuteStepsInExternalInstanceRequest {
  // The id of the CVIAdapter object.
  CVIAdapterInstance instance = 1;
  // You can specify the test execution mode as in-process or out-of-process for the LabWindows/CVI Adapter. When the adapter runs tests in-process, it executes them in the same process as the sequence editor or the user interface you are running. When the adapter runs tests out-of-process, it executes them in an external instance of the LabWindows/CVI development environment.
  // If this property is True, the tests run out-of-process. If the property is False, the tests run in-process.
  bool propertyValue = 2;
}

message CVIAdapter_Set_ExecuteStepsInExternalInstanceResponse {
}

message CVIAdapter_Get_ExecuteStepsInExternalInstanceRequest {
  // The id of the CVIAdapter object.
  CVIAdapterInstance instance = 1;
}

message CVIAdapter_Get_ExecuteStepsInExternalInstanceResponse {
  // You can specify the test execution mode as in-process or out-of-process for the LabWindows/CVI Adapter. When the adapter runs tests in-process, it executes them in the same process as the sequence editor or the user interface you are running. When the adapter runs tests out-of-process, it executes them in an external instance of the LabWindows/CVI development environment.
  // If this property is True, the tests run out-of-process. If the property is False, the tests run in-process.
  bool returnValue = 1;
}

message CVIAdapter_Set_ExecutionServerProjectPathNameRequest {
  // The id of the CVIAdapter object.
  CVIAdapterInstance instance = 1;
  // The LabWindows/CVI Adapter can launch two different copies of LabWindows/CVI.
  // The adapter uses one copy to execute test modules. By default, the adapter opens <TestStand>\AdapterSupport\CVI\tscvirun.prj in the copy of LabWindows/CVI that is executing the code modules. You can use the LabWindows/CVI Adapter Configuration dialog box to change which project the adapter uses to run code modules.
  // The adapter uses the other copy of LabWindows/CVI to allow you to edit the projects you use to create DLLs, static libraries, and object files.
  string propertyValue = 2;
}

message CVIAdapter_Set_ExecutionServerProjectPathNameResponse {
}

message CVIAdapter_Get_ExecutionServerProjectPathNameRequest {
  // The id of the CVIAdapter object.
  CVIAdapterInstance instance = 1;
}

message CVIAdapter_Get_ExecutionServerProjectPathNameResponse {
  // The LabWindows/CVI Adapter can launch two different copies of LabWindows/CVI.
  // The adapter uses one copy to execute test modules. By default, the adapter opens <TestStand>\AdapterSupport\CVI\tscvirun.prj in the copy of LabWindows/CVI that is executing the code modules. You can use the LabWindows/CVI Adapter Configuration dialog box to change which project the adapter uses to run code modules.
  // The adapter uses the other copy of LabWindows/CVI to allow you to edit the projects you use to create DLLs, static libraries, and object files.
  string returnValue = 1;
}

message CVIAdapter_Set_CodeTemplatePolicyRequest {
  // The id of the CVIAdapter object.
  CVIAdapterInstance instance = 1;
  // Specifies which code templates to use during code creation. You can choose to use new templates, legacy templates, or both new and legacy templates.
  AdapterCodeTemplatePolicies propertyValue = 2;
}

message CVIAdapter_Set_CodeTemplatePolicyResponse {
}

message CVIAdapter_Get_CodeTemplatePolicyRequest {
  // The id of the CVIAdapter object.
  CVIAdapterInstance instance = 1;
}

message CVIAdapter_Get_CodeTemplatePolicyResponse {
  // Specifies which code templates to use during code creation. You can choose to use new templates, legacy templates, or both new and legacy templates.
  AdapterCodeTemplatePolicies returnValue = 1;
}

// CVIModule
//
// Use objects from the CVIModule class to specify and obtain  LabWindows/CVI Adapter-specific information about the code module that steps or step type substeps execute. Use the Step.Module property to obtain a reference to a CVIModule object. To access the properties and methods of a specific module class, query the Module object for the interface of the module-specific interface you want to acquire.
// Typically, you use this class only when you are writing a sequence editor.
// To access the properties and methods of the CommonCModule class, use the CVIModule.AsCommonCModule method to obtain an object.
// You can use the Module.LoadPrototype method to load the prototype for the module the step specifies.
//
service CVIModule {
  // Method: AsCommonCModule
  //
  // Returns the underlying CommonCModule that represents the CVIModule.
  //
  // Use the CommonCModule object to access properties and methods common to all modules derived from this class.
  //
  // CVIModule_AsCommonCModuleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CVIModuleInstance - The id of the CVIModule object.
  //
  // CVIModule_AsCommonCModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommonCModuleInstance - The return type of the CommonCModule object.
  //
  rpc AsCommonCModule(CVIModule_AsCommonCModuleRequest) returns (CVIModule_AsCommonCModuleResponse);
  
  
  // Method: Execute
  //
  // Use this method to call a LabWindows/CVI module function directly without using a step, sequence, or execution.
  //
  // When you call a LabWindows/CVI module function using this method you can evaluate the parameter expressions to determine the argument values or specify the argument values directly using a CVIArguments collection.
  // To use the parameter value expressions, pass a valid SequenceContext object to the sequenceContextParam to use to evaluate the CommonCParameter.ValueExpr expressions.
  // To pass specific argument values, use the CVIParameters.NewArguments method to create a collection of CVIArgument objects and set the CVIArgument.Value property on each item in the collection.
  //
  // CVIModule_ExecuteRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CVIModuleInstance - The id of the CVIModule object.
  //    - sequenceContextParam: SequenceContextInstance - Specifies the SequenceContext object that this method uses to evaluate each of the CommonCParameter.ValueExpr expressions in the module parameters. Pass NULL for this parameter if you pass a CVIArguments collection to the argumentsParam parameter.
  //    - argumentsParam: CVIArgumentsInstance - Specifies the argument collection that contains the argument values to pass to the function. Pass NULL for this parameter to pass the values obtained from evaluating each of the CommonCParameter.ValueExpr expressions in the module parameters.
  //
  // CVIModule_ExecuteResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Execute(CVIModule_ExecuteRequest) returns (CVIModule_ExecuteResponse);
  
  
  // Method: GetModulePathFromProject
  //
  // Returns the absolute path of the code module built by the specified LabWindows/CVI project.
  //
  // This method requires LabWindows/CVI 2017 SP1 or later.
  //
  // CVIModule_GetModulePathFromProjectRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CVIModuleInstance - The id of the CVIModule object.
  //    - projectPathParam: string - The absolute path of the LabWindows/CVI project (.prj) file.
  //    - options: int32 - Specifies GetModuleFromProjectOptions:    * GetModuleFromProjectOption_NoOptions–(Value: 0x0) No options.    * GetModuleFromProjectOption_NoPrompts–(Value: 0x1) Suppress prompts.
  //
  // CVIModule_GetModulePathFromProjectResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True upon success. Otherwise, returns False. 
  //    - modulePathParam: strin - The absolute path of the target file (usually a DLL) for the specified project.
  //
  rpc GetModulePathFromProject(CVIModule_GetModulePathFromProjectRequest) returns (CVIModule_GetModulePathFromProjectResponse);
  
  
  // Method: GetProjectFilePathFromDll
  //
  // Returns the path of the LabWindows/CVI project file (.prj) that created the specified DLL.
  //
  // This method requires LabWindows/CVI 2017 SP1 or later.
  //
  // CVIModule_GetProjectFilePathFromDllRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CVIModuleInstance - The id of the CVIModule object.
  //    - dllPath: string - The absolute path of the DLL.
  //
  // CVIModule_GetProjectFilePathFromDllResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True upon success. Otherwise, returns False. 
  //    - projectPathParam: strin - The path of the LabWindows/CVI project (.prj) file.
  //
  rpc GetProjectFilePathFromDll(CVIModule_GetProjectFilePathFromDllRequest) returns (CVIModule_GetProjectFilePathFromDllResponse);
  
  
  // Method: GetSourceFilePathFromDll
  //
  // Returns the path of the C source file containing the definition of the specified function.
  //
  // This method requires LabWindows/CVI 2017 SP1 or later.
  //
  // CVIModule_GetSourceFilePathFromDllRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CVIModuleInstance - The id of the CVIModule object.
  //    - dllPath: string - The absolute path of the DLL.
  //    - function: string - The function name.
  //
  // CVIModule_GetSourceFilePathFromDllResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True upon success. Otherwise, returns False. 
  //    - sourcePath: strin - The path of the C source file.
  //
  rpc GetSourceFilePathFromDll(CVIModule_GetSourceFilePathFromDllRequest) returns (CVIModule_GetSourceFilePathFromDllResponse);
  
  
  // Method: AllowProjectFileWhenSelectingModule
  //
  // Checks if the active version of LabWindows/CVI provides support for CVIModule.GetModulePathFromProject.
  //
  // This method requires LabWindows/CVI 2017 SP1 or later.
  //
  // CVIModule_AllowProjectFileWhenSelectingModuleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CVIModuleInstance - The id of the CVIModule object.
  //
  // CVIModule_AllowProjectFileWhenSelectingModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the active version of LabWindows/CVI provides support for CVIModule.GetModulePathFromProject. Otherwise, returns False. 
  //
  rpc AllowProjectFileWhenSelectingModule(CVIModule_AllowProjectFileWhenSelectingModuleRequest) returns (CVIModule_AllowProjectFileWhenSelectingModuleResponse);
  
  

  // Property: ModuleType
  //
  // Specifies the type of code module the step calls.
  //
  // The LabWindows/CVI Adapter supports calling functions in DLL files.
  //
  // CVIModule_Set_ModuleTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CVIModuleInstance - The id of the CVIModule object.
  //    - propertyValue: CVIModuleTypes - Specifies the type of code module the step calls. 
  //
  // CVIModule_Set_ModuleTypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CVIModule_Get_ModuleTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CVIModuleInstance - The id of the CVIModule object.
  //
  // CVIModule_Get_ModuleTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: CVIModuleTypes - Specifies the type of code module the step calls. 
  //
  rpc Set_ModuleType(CVIModule_Set_ModuleTypeRequest) returns (CVIModule_Set_ModuleTypeResponse);
  rpc Get_ModuleType(CVIModule_Get_ModuleTypeRequest) returns (CVIModule_Get_ModuleTypeResponse);
  
  
  // Property: AlwaysRunInProcess
  //
  // If the value of this property is True, the step always runs in-process even when the LabWindows/CVI Adapter is configured to run out-of-process.
  //
  // CVIModule_Set_AlwaysRunInProcessRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CVIModuleInstance - The id of the CVIModule object.
  //    - propertyValue: bool - If the value of this property is True, the step always runs in-process even when the LabWindows/CVI Adapter is configured to run out-of-process. 
  //
  // CVIModule_Set_AlwaysRunInProcessResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CVIModule_Get_AlwaysRunInProcessRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CVIModuleInstance - The id of the CVIModule object.
  //
  // CVIModule_Get_AlwaysRunInProcessResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - If the value of this property is True, the step always runs in-process even when the LabWindows/CVI Adapter is configured to run out-of-process. 
  //
  rpc Set_AlwaysRunInProcess(CVIModule_Set_AlwaysRunInProcessRequest) returns (CVIModule_Set_AlwaysRunInProcessResponse);
  rpc Get_AlwaysRunInProcess(CVIModule_Get_AlwaysRunInProcessRequest) returns (CVIModule_Get_AlwaysRunInProcessResponse);
  
  
  // Property: Parameters
  //
  // Returns the CVIParameters collection that contains a list of the current parameters used as inputs and outputs of the corresponding module.
  //
  // If you need to add or modify a parameter, you must first obtain the parameters collection.
  //
  // CVIModule_Get_ParametersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CVIModuleInstance - The id of the CVIModule object.
  //
  // CVIModule_Get_ParametersResponse - The response message from the server. It provides the return value.
  //    - returnValue: CVIParametersInstance - Returns the CVIParameters collection that contains a list of the current parameters used as inputs and outputs of the corresponding module. 
  //
  rpc Get_Parameters(CVIModule_Get_ParametersRequest) returns (CVIModule_Get_ParametersResponse);
  
  
}
message CommonCModuleInstance {
  // Specifies the handle of the CommonCModule instance in the server.
  string id = 1;
}

message CVIArgumentsInstance {
  // Specifies the handle of the CVIArguments instance in the server.
  string id = 1;
}

message CVIParametersInstance {
  // Specifies the handle of the CVIParameters instance in the server.
  string id = 1;
}
message CVIModule_AsCommonCModuleRequest {
  // The id of the CVIModule object.
  CVIModuleInstance instance = 1;
}

message CVIModule_AsCommonCModuleResponse {
  // The return type of the CommonCModule object.
  CommonCModuleInstance returnValue = 1;
}

message CVIModule_ExecuteRequest {
  // The id of the CVIModule object.
  CVIModuleInstance instance = 1;
  // Specifies the SequenceContext object that this method uses to evaluate each of the CommonCParameter.ValueExpr expressions in the module parameters. Pass NULL for this parameter if you pass a CVIArguments collection to the argumentsParam parameter.
  SequenceContextInstance sequenceContextParam = 2;
  // Specifies the argument collection that contains the argument values to pass to the function. Pass NULL for this parameter to pass the values obtained from evaluating each of the CommonCParameter.ValueExpr expressions in the module parameters.
  CVIArgumentsInstance argumentsParam = 3;
}

message CVIModule_ExecuteResponse {
}

message CVIModule_GetModulePathFromProjectRequest {
  // The id of the CVIModule object.
  CVIModuleInstance instance = 1;
  // The absolute path of the LabWindows/CVI project (.prj) file.
  string projectPathParam = 2;
  // Specifies GetModuleFromProjectOptions:    * GetModuleFromProjectOption_NoOptions–(Value: 0x0) No options.    * GetModuleFromProjectOption_NoPrompts–(Value: 0x1) Suppress prompts.
  GetModuleFromProjectOptions options = 3;
}

message CVIModule_GetModulePathFromProjectResponse {
  // Returns True upon success. Otherwise, returns False.
  bool returnValue = 1;
  // The absolute path of the target file (usually a DLL) for the specified project.
  string modulePathParam = 2;
}

message CVIModule_GetProjectFilePathFromDllRequest {
  // The id of the CVIModule object.
  CVIModuleInstance instance = 1;
  // The absolute path of the DLL.
  string dllPath = 2;
}

message CVIModule_GetProjectFilePathFromDllResponse {
  // Returns True upon success. Otherwise, returns False.
  bool returnValue = 1;
  // The path of the LabWindows/CVI project (.prj) file.
  string projectPathParam = 2;
}

message CVIModule_GetSourceFilePathFromDllRequest {
  // The id of the CVIModule object.
  CVIModuleInstance instance = 1;
  // The absolute path of the DLL.
  string dllPath = 2;
  // The function name.
  string function = 3;
}

message CVIModule_GetSourceFilePathFromDllResponse {
  // Returns True upon success. Otherwise, returns False.
  bool returnValue = 1;
  // The path of the C source file.
  string sourcePath = 2;
}

message CVIModule_AllowProjectFileWhenSelectingModuleRequest {
  // The id of the CVIModule object.
  CVIModuleInstance instance = 1;
}

message CVIModule_AllowProjectFileWhenSelectingModuleResponse {
  // Returns True if the active version of LabWindows/CVI provides support for CVIModule.GetModulePathFromProject. Otherwise, returns False.
  bool returnValue = 1;
}

message CVIModule_Set_ModuleTypeRequest {
  // The id of the CVIModule object.
  CVIModuleInstance instance = 1;
  // Specifies the type of code module the step calls.
  CVIModuleTypes propertyValue = 2;
}

message CVIModule_Set_ModuleTypeResponse {
}

message CVIModule_Get_ModuleTypeRequest {
  // The id of the CVIModule object.
  CVIModuleInstance instance = 1;
}

message CVIModule_Get_ModuleTypeResponse {
  // Specifies the type of code module the step calls.
  CVIModuleTypes returnValue = 1;
}

message CVIModule_Set_AlwaysRunInProcessRequest {
  // The id of the CVIModule object.
  CVIModuleInstance instance = 1;
  // If the value of this property is True, the step always runs in-process even when the LabWindows/CVI Adapter is configured to run out-of-process.
  bool propertyValue = 2;
}

message CVIModule_Set_AlwaysRunInProcessResponse {
}

message CVIModule_Get_AlwaysRunInProcessRequest {
  // The id of the CVIModule object.
  CVIModuleInstance instance = 1;
}

message CVIModule_Get_AlwaysRunInProcessResponse {
  // If the value of this property is True, the step always runs in-process even when the LabWindows/CVI Adapter is configured to run out-of-process.
  bool returnValue = 1;
}

message CVIModule_Get_ParametersRequest {
  // The id of the CVIModule object.
  CVIModuleInstance instance = 1;
}

message CVIModule_Get_ParametersResponse {
  // Returns the CVIParameters collection that contains a list of the current parameters used as inputs and outputs of the corresponding module.
  CVIParametersInstance returnValue = 1;
}

// CommonCModule
//
// Use objects from the CommonCModule class to specify and obtain common information for the LabWindows/CVI and C/C++ DLL code modules that steps or step type substeps execute. Use the Step.Module property to obtain a reference to a CommonCModule object. To access the properties and methods of a specific module class, query the Module object for the interface of the module-specific interface you want to acquire.
// Typically, you use this class only when you are writing a sequence editor.
// To access the properties and methods of the Module class, use the CommonCModule.AsModule method to obtain an object. To access the properties and methods of a specific module class, query the CommonCModule object for the interface of the module-specific interface you want to acquire.
// You can use the Module.LoadPrototype method to load the prototype for the module the step specifies.
//
service CommonCModule {
  // Method: AsModule
  //
  // Returns the underlying module object that represents the CommonCModule.
  //
  // Use the Module object to access properties and methods common to all modules.
  //
  // CommonCModule_AsModuleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCModuleInstance - The id of the CommonCModule object.
  //
  // CommonCModule_AsModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: ModuleInstance - The return type of the Module object.
  //
  rpc AsModule(CommonCModule_AsModuleRequest) returns (CommonCModule_AsModuleResponse);
  
  
  // Method: LoadPrototype
  //
  // Note: This method is obsolete. Use the Module.LoadPrototype method instead.
  //
  // At any time, you can request the LabWindows/CVI or C/C++ DLL Adapter to query the type library or read the DLL export table for the currently selected function by calling this method. If the module file does not have prototype information, this method returns False. Otherwise, this method returns True.
  // If the module contains prototype information, all the information is updated in the internal structure of the module configuration every time you call this method.
  //
  // CommonCModule_LoadPrototypeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommonCModuleInstance - The id of the CommonCModule object.
  //    - discardParameterValues: bool - Specifies whether to discard the values assigned to the current parameters once the prototype information is updated.
  //
  // CommonCModule_LoadPrototypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the prototype was loaded. This method usually returns True. 
  //
  rpc LoadPrototype(CommonCModule_LoadPrototypeRequest) returns (CommonCModule_LoadPrototypeResponse);
  
  
  // Method: VerifyPrototypeFromSource
  //
  // Call this method to check for conflicts between the source code and the currently loaded parameter information. This method does not prompt the user if a conflict exists
  //
  // CommonCModule_VerifyPrototypeFromSourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCModuleInstance - The id of the CommonCModule object.
  //
  // CommonCModule_VerifyPrototypeFromSourceResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Indicates that there are no conflicts. 
  //
  rpc VerifyPrototypeFromSource(CommonCModule_VerifyPrototypeFromSourceRequest) returns (CommonCModule_VerifyPrototypeFromSourceResponse);
  
  
  // Method: UpdatePrototypeFromSource
  //
  // Call this method to update the current parameters prototype from the source code.
  //
  // If you update the prototype from the source code, TestStand deletes any parameters not present in the source code prototype.
  //
  // CommonCModule_UpdatePrototypeFromSourceRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommonCModuleInstance - The id of the CommonCModule object.
  //    - keepParameterValues: bool - Pass True to keep the parameter values after updating the prototype from the source file.
  //
  // CommonCModule_UpdatePrototypeFromSourceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc UpdatePrototypeFromSource(CommonCModule_UpdatePrototypeFromSourceRequest) returns (CommonCModule_UpdatePrototypeFromSourceResponse);
  
  
  // Method: AcceptFunctionCall
  //
  // This method updates the function name, parameters, and parameter values on the module to match the function call you pass as the funcCall parameter. If the function call you pass modifies the prototype of the function, this method prompts the user to accept the changes to the prototype.
  //
  // Use the CommonCModule.FunctionCall property to obtain a string that represents the current function call using syntax for calling an expression function.
  //
  // CommonCModule_AcceptFunctionCallRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommonCModuleInstance - The id of the CommonCModule object.
  //    - evaluationContext: PropertyObjectInstance - This method uses this object to locate variables the funcCall parameter specifies.
  //    - funcCall: string - Specifies a string for the function call that uses the syntax for calling an expression function.
  //    - allowEditingPrototype: bool - Pass True to allow this method to update the prototype of the currently loaded parameters from the funcCall parameter. Pass False to allow this method to only update the function name and parameter values.
  //
  // CommonCModule_AcceptFunctionCallResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if this method modifies the module. 
  //    - prototypeModified: boo - Returns True if this method added, removed, or changed the type of a parameter in the function call.
  //    - cancelled: boo - Returns True if the user cancels accepting the changes to the prototype.
  //
  rpc AcceptFunctionCall(CommonCModule_AcceptFunctionCallRequest) returns (CommonCModule_AcceptFunctionCallResponse);
  
  
  // Method: LoadPrototypeFromCodeTemplate
  //
  // Updates the parameters of the module to match the prototype and parameter values of the code template the  CommonCModule.CodeTemplateName property specifies.
  //
  // This method does nothing if the CommonCModule.CodeTemplateName property is empty.
  // For adapters that use Microsoft Visual Studio, calling this method can result in prompts to the user if any of the following conditions exist:
  // * Multiple versions of Visual Studio exist on the computer and you select the Always Prompt for Version option from the Version of Visual Studio to Use for Create and Edit Code ring control in the Adapter Configuration dialog box.    * Multiple versions of Visual Studio exist on the computer and you select the Use the Version that Matches the Project File option from the Version of Visual Studio to Use for Create and Edit Code ring control in the Adapter Configuration dialog box, and TestStand cannot match the version of the file.
  //
  // CommonCModule_LoadPrototypeFromCodeTemplateRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCModuleInstance - The id of the CommonCModule object.
  //
  // CommonCModule_LoadPrototypeFromCodeTemplateResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if this method modifies the step. 
  //
  rpc LoadPrototypeFromCodeTemplate(CommonCModule_LoadPrototypeFromCodeTemplateRequest) returns (CommonCModule_LoadPrototypeFromCodeTemplateResponse);
  
  
  // Method: VerifyPrototype
  //
  // Call this method to check for conflicts between the source code and the currently loaded parameter information. This method does not prompt the user if a conflict exists
  //
  // CommonCModule_VerifyPrototypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCModuleInstance - The id of the CommonCModule object.
  //
  // CommonCModule_VerifyPrototypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Indicates that there are no conflicts. 
  //
  rpc VerifyPrototype(CommonCModule_VerifyPrototypeRequest) returns (CommonCModule_VerifyPrototypeResponse);
  
  
  // Method: NotifyModuleFileChanged
  //
  rpc NotifyModuleFileChanged(CommonCModule_NotifyModuleFileChangedRequest) returns (CommonCModule_NotifyModuleFileChangedResponse);
  
  

  // Property: ModulePath
  //
  // Specifies the pathname of the code module file that contains the function the step calls. You can specify an absolute or relative pathname for the module file. Relative pathnames are relative to the TestStand search directory paths.
  //
  // CommonCModule_Set_ModulePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCModuleInstance - The id of the CommonCModule object.
  //    - propertyValue: string - Specifies the pathname of the code module file that contains the function the step calls. You can specify an absolute or relative pathname for the module file. Relative pathnames are relative to the TestStand search directory paths. 
  //
  // CommonCModule_Set_ModulePathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CommonCModule_Get_ModulePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCModuleInstance - The id of the CommonCModule object.
  //
  // CommonCModule_Get_ModulePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the pathname of the code module file that contains the function the step calls. You can specify an absolute or relative pathname for the module file. Relative pathnames are relative to the TestStand search directory paths. 
  //
  rpc Set_ModulePath(CommonCModule_Set_ModulePathRequest) returns (CommonCModule_Set_ModulePathResponse);
  rpc Get_ModulePath(CommonCModule_Get_ModulePathRequest) returns (CommonCModule_Get_ModulePathResponse);
  
  
  // Property: FunctionName
  //
  // Specifies the function in the code module the step calls.
  //
  // CommonCModule_Set_FunctionNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCModuleInstance - The id of the CommonCModule object.
  //    - propertyValue: string - Specifies the function in the code module the step calls. 
  //
  // CommonCModule_Set_FunctionNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CommonCModule_Get_FunctionNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCModuleInstance - The id of the CommonCModule object.
  //
  // CommonCModule_Get_FunctionNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the function in the code module the step calls. 
  //
  rpc Set_FunctionName(CommonCModule_Set_FunctionNameRequest) returns (CommonCModule_Set_FunctionNameResponse);
  rpc Get_FunctionName(CommonCModule_Get_FunctionNameRequest) returns (CommonCModule_Get_FunctionNameResponse);
  
  
  // Property: SourceFilePath
  //
  // Specifies the pathname of the source file. If you want to create a new source file, you must enter an absolute pathname. If you are using an existing source file, you can enter an absolute or relative pathname. Relative pathnames are relative to the TestStand search directory paths.
  //
  // You can specify the source file to generate the source code for the function, edit the source code, and resolve differences between the parameter list in the source code and the parameter information. You do not have to specify the source file for TestStand to call the step code module.
  //
  // CommonCModule_Set_SourceFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCModuleInstance - The id of the CommonCModule object.
  //    - propertyValue: string - Specifies the pathname of the source file. If you want to create a new source file, you must enter an absolute pathname. If you are using an existing source file, you can enter an absolute or relative pathname. Relative pathnames are relative to the TestStand search directory paths. 
  //
  // CommonCModule_Set_SourceFilePathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CommonCModule_Get_SourceFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCModuleInstance - The id of the CommonCModule object.
  //
  // CommonCModule_Get_SourceFilePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the pathname of the source file. If you want to create a new source file, you must enter an absolute pathname. If you are using an existing source file, you can enter an absolute or relative pathname. Relative pathnames are relative to the TestStand search directory paths. 
  //
  rpc Set_SourceFilePath(CommonCModule_Set_SourceFilePathRequest) returns (CommonCModule_Set_SourceFilePathResponse);
  rpc Get_SourceFilePath(CommonCModule_Get_SourceFilePathRequest) returns (CommonCModule_Get_SourceFilePathResponse);
  
  
  // Property: ProjectFilePath
  //
  // Specifies the name of the Microsoft Visual Studio or LabWindows/CVI project used to create the code module.
  //
  // TestStand uses this property when you create or edit source code for this module using the Module.CreateCode or Module.EditCode methods.
  //
  // CommonCModule_Set_ProjectFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCModuleInstance - The id of the CommonCModule object.
  //    - propertyValue: string - Specifies the name of the Microsoft Visual Studio or LabWindows/CVI project used to create the code module. 
  //
  // CommonCModule_Set_ProjectFilePathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CommonCModule_Get_ProjectFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCModuleInstance - The id of the CommonCModule object.
  //
  // CommonCModule_Get_ProjectFilePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the name of the Microsoft Visual Studio or LabWindows/CVI project used to create the code module. 
  //
  rpc Set_ProjectFilePath(CommonCModule_Set_ProjectFilePathRequest) returns (CommonCModule_Set_ProjectFilePathResponse);
  rpc Get_ProjectFilePath(CommonCModule_Get_ProjectFilePathRequest) returns (CommonCModule_Get_ProjectFilePathResponse);
  
  
  // Property: WorkspaceFilePath
  //
  // Specifies the pathname of the LabWindows/CVI workspace file or Microsoft Visual Studio solution file used to create source code for this module.
  //
  // TestStand uses this property when you create or edit source code for this module using the Module.CreateCode or Module.EditCode methods.  If you do not specify a workspace file for this module, TestStand uses a default workspace.
  //
  // CommonCModule_Set_WorkspaceFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCModuleInstance - The id of the CommonCModule object.
  //    - propertyValue: string - Specifies the pathname of the LabWindows/CVI workspace file or Microsoft Visual Studio solution file used to create source code for this module. 
  //
  // CommonCModule_Set_WorkspaceFilePathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CommonCModule_Get_WorkspaceFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCModuleInstance - The id of the CommonCModule object.
  //
  // CommonCModule_Get_WorkspaceFilePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the pathname of the LabWindows/CVI workspace file or Microsoft Visual Studio solution file used to create source code for this module. 
  //
  rpc Set_WorkspaceFilePath(CommonCModule_Set_WorkspaceFilePathRequest) returns (CommonCModule_Set_WorkspaceFilePathResponse);
  rpc Get_WorkspaceFilePath(CommonCModule_Get_WorkspaceFilePathRequest) returns (CommonCModule_Get_WorkspaceFilePathResponse);
  
  
  // Property: FunctionCall
  //
  // Returns the function call using the syntax for calling an expression function.
  //
  // Use the CommonCModule.AcceptFunctionCall method to update the function name, parameters, and parameter values for the module using a string with syntax for calling an expression function.
  //
  // CommonCModule_Get_FunctionCallRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCModuleInstance - The id of the CommonCModule object.
  //
  // CommonCModule_Get_FunctionCallResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the function call using the syntax for calling an expression function. 
  //
  rpc Get_FunctionCall(CommonCModule_Get_FunctionCallRequest) returns (CommonCModule_Get_FunctionCallResponse);
  
  
  // Property: CodeTemplateName
  //
  // Specifies a code template associated with this module.
  //
  // The Module.CreateCode and CommonCModule.LoadPrototypeFromCodeTemplate methods use the code template this property specifies. If this property is empty, the Module.CreateCode method does not use a code template and the CommonCModule.LoadPrototypeFromCodeTemplate method does nothing. You can acquire a list of code template names using the collection the StepType.CodeTemplates property returns.
  //
  // CommonCModule_Set_CodeTemplateNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCModuleInstance - The id of the CommonCModule object.
  //    - val: string - Specifies a code template associated with this module. 
  //
  // CommonCModule_Set_CodeTemplateNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CommonCModule_Get_CodeTemplateNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCModuleInstance - The id of the CommonCModule object.
  //
  // CommonCModule_Get_CodeTemplateNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies a code template associated with this module. 
  //
  rpc Set_CodeTemplateName(CommonCModule_Set_CodeTemplateNameRequest) returns (CommonCModule_Set_CodeTemplateNameResponse);
  rpc Get_CodeTemplateName(CommonCModule_Get_CodeTemplateNameRequest) returns (CommonCModule_Get_CodeTemplateNameResponse);
  
  
}
message CommonCModule_AsModuleRequest {
  // The id of the CommonCModule object.
  CommonCModuleInstance instance = 1;
}

message CommonCModule_AsModuleResponse {
  // The return type of the Module object.
  ModuleInstance returnValue = 1;
}

message CommonCModule_LoadPrototypeRequest {
  // The id of the CommonCModule object.
  CommonCModuleInstance instance = 1;
  // Specifies whether to discard the values assigned to the current parameters once the prototype information is updated.
  bool discardParameterValues = 2;
}

message CommonCModule_LoadPrototypeResponse {
  // Returns a value that indicates whether the prototype was loaded. This method usually returns True.
  bool returnValue = 1;
}

message CommonCModule_VerifyPrototypeFromSourceRequest {
  // The id of the CommonCModule object.
  CommonCModuleInstance instance = 1;
}

message CommonCModule_VerifyPrototypeFromSourceResponse {
  // Indicates that there are no conflicts.
  bool returnValue = 1;
}

message CommonCModule_UpdatePrototypeFromSourceRequest {
  // The id of the CommonCModule object.
  CommonCModuleInstance instance = 1;
  // Pass True to keep the parameter values after updating the prototype from the source file.
  bool keepParameterValues = 2;
}

message CommonCModule_UpdatePrototypeFromSourceResponse {
}

message CommonCModule_AcceptFunctionCallRequest {
  // The id of the CommonCModule object.
  CommonCModuleInstance instance = 1;
  // This method uses this object to locate variables the funcCall parameter specifies.
  PropertyObjectInstance evaluationContext = 2;
  // Specifies a string for the function call that uses the syntax for calling an expression function.
  string funcCall = 3;
  // Pass True to allow this method to update the prototype of the currently loaded parameters from the funcCall parameter. Pass False to allow this method to only update the function name and parameter values.
  bool allowEditingPrototype = 4;
}

message CommonCModule_AcceptFunctionCallResponse {
  // Returns True if this method modifies the module.
  bool returnValue = 1;
  // Returns True if this method added, removed, or changed the type of a parameter in the function call.
  bool prototypeModified = 2;
  // Returns True if the user cancels accepting the changes to the prototype.
  bool cancelled = 3;
}

message CommonCModule_LoadPrototypeFromCodeTemplateRequest {
  // The id of the CommonCModule object.
  CommonCModuleInstance instance = 1;
}

message CommonCModule_LoadPrototypeFromCodeTemplateResponse {
  // Returns True if this method modifies the step.
  bool returnValue = 1;
}

message CommonCModule_VerifyPrototypeRequest {
  // The id of the CommonCModule object.
  CommonCModuleInstance instance = 1;
}

message CommonCModule_VerifyPrototypeResponse {
  // Indicates that there are no conflicts.
  bool returnValue = 1;
  CommonCVerifyPrototypeResults result = 2;
}

message CommonCModule_NotifyModuleFileChangedRequest {
  // The id of the CommonCModule object.
  CommonCModuleInstance instance = 1;
}

message CommonCModule_NotifyModuleFileChangedResponse {
}

message CommonCModule_Set_ModulePathRequest {
  // The id of the CommonCModule object.
  CommonCModuleInstance instance = 1;
  // Specifies the pathname of the code module file that contains the function the step calls. You can specify an absolute or relative pathname for the module file. Relative pathnames are relative to the TestStand search directory paths.
  string propertyValue = 2;
}

message CommonCModule_Set_ModulePathResponse {
}

message CommonCModule_Get_ModulePathRequest {
  // The id of the CommonCModule object.
  CommonCModuleInstance instance = 1;
}

message CommonCModule_Get_ModulePathResponse {
  // Specifies the pathname of the code module file that contains the function the step calls. You can specify an absolute or relative pathname for the module file. Relative pathnames are relative to the TestStand search directory paths.
  string returnValue = 1;
}

message CommonCModule_Set_FunctionNameRequest {
  // The id of the CommonCModule object.
  CommonCModuleInstance instance = 1;
  // Specifies the function in the code module the step calls.
  string propertyValue = 2;
}

message CommonCModule_Set_FunctionNameResponse {
}

message CommonCModule_Get_FunctionNameRequest {
  // The id of the CommonCModule object.
  CommonCModuleInstance instance = 1;
}

message CommonCModule_Get_FunctionNameResponse {
  // Specifies the function in the code module the step calls.
  string returnValue = 1;
}

message CommonCModule_Set_SourceFilePathRequest {
  // The id of the CommonCModule object.
  CommonCModuleInstance instance = 1;
  // Specifies the pathname of the source file. If you want to create a new source file, you must enter an absolute pathname. If you are using an existing source file, you can enter an absolute or relative pathname. Relative pathnames are relative to the TestStand search directory paths.
  string propertyValue = 2;
}

message CommonCModule_Set_SourceFilePathResponse {
}

message CommonCModule_Get_SourceFilePathRequest {
  // The id of the CommonCModule object.
  CommonCModuleInstance instance = 1;
}

message CommonCModule_Get_SourceFilePathResponse {
  // Specifies the pathname of the source file. If you want to create a new source file, you must enter an absolute pathname. If you are using an existing source file, you can enter an absolute or relative pathname. Relative pathnames are relative to the TestStand search directory paths.
  string returnValue = 1;
}

message CommonCModule_Set_ProjectFilePathRequest {
  // The id of the CommonCModule object.
  CommonCModuleInstance instance = 1;
  // Specifies the name of the Microsoft Visual Studio or LabWindows/CVI project used to create the code module.
  string propertyValue = 2;
}

message CommonCModule_Set_ProjectFilePathResponse {
}

message CommonCModule_Get_ProjectFilePathRequest {
  // The id of the CommonCModule object.
  CommonCModuleInstance instance = 1;
}

message CommonCModule_Get_ProjectFilePathResponse {
  // Specifies the name of the Microsoft Visual Studio or LabWindows/CVI project used to create the code module.
  string returnValue = 1;
}

message CommonCModule_Set_WorkspaceFilePathRequest {
  // The id of the CommonCModule object.
  CommonCModuleInstance instance = 1;
  // Specifies the pathname of the LabWindows/CVI workspace file or Microsoft Visual Studio solution file used to create source code for this module.
  string propertyValue = 2;
}

message CommonCModule_Set_WorkspaceFilePathResponse {
}

message CommonCModule_Get_WorkspaceFilePathRequest {
  // The id of the CommonCModule object.
  CommonCModuleInstance instance = 1;
}

message CommonCModule_Get_WorkspaceFilePathResponse {
  // Specifies the pathname of the LabWindows/CVI workspace file or Microsoft Visual Studio solution file used to create source code for this module.
  string returnValue = 1;
}

message CommonCModule_Get_FunctionCallRequest {
  // The id of the CommonCModule object.
  CommonCModuleInstance instance = 1;
}

message CommonCModule_Get_FunctionCallResponse {
  // Returns the function call using the syntax for calling an expression function.
  string returnValue = 1;
}

message CommonCModule_Set_CodeTemplateNameRequest {
  // The id of the CommonCModule object.
  CommonCModuleInstance instance = 1;
  // Specifies a code template associated with this module.
  string val = 2;
}

message CommonCModule_Set_CodeTemplateNameResponse {
}

message CommonCModule_Get_CodeTemplateNameRequest {
  // The id of the CommonCModule object.
  CommonCModuleInstance instance = 1;
}

message CommonCModule_Get_CodeTemplateNameResponse {
  // Specifies a code template associated with this module.
  string returnValue = 1;
}

// CVIParameters
//
// Use objects from the CVIParameters class to configure and obtain parameters for a module that uses the LabWindows/CVI Adapter. Use the CVIModule.Parameters property to obtain the collection of parameters for a module.
//
service CVIParameters {
  // Method: New
  //
  // Adds a new parameter to the collection.
  //
  // CVIParameters_NewRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CVIParametersInstance - The id of the CVIParameters object.
  //    - index: int32 - Specifies the zero-based index of where to insert the parameter.
  //    - parameterValueExpr: string - Specifies the argument expression.
  //      If the parameter is an input, this expression corresponds to the value to pass. If the parameter is an output, this expression specifies where to store the result value.
  //    - parameterCategory: CVIParameterCategories - Specifies the parameter category.
  //    - parameterPass: CommonCParameterPassOptions - Specifies how to pass the value specified in the argument expression property, CommonCParameter.ValueExpr, to the specific function and sets the CommonCParameter.Pass property.
  //    - parameterType: CommonCParameterTypes - Specifies the parameter type.
  //
  // CVIParameters_NewResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc New(CVIParameters_NewRequest) returns (CVIParameters_NewResponse);
  
  
  // Method: Delete
  //
  // Removes the parameter located at the specific index.
  //
  // CVIParameters_DeleteRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CVIParametersInstance - The id of the CVIParameters object.
  //    - index: int32 - Specifies the zero-based index of the parameter to delete.
  //
  // CVIParameters_DeleteResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Delete(CVIParameters_DeleteRequest) returns (CVIParameters_DeleteResponse);
  
  
  // Method: Move
  //
  // Moves a parameter within the collection.
  //
  // CVIParameters_MoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CVIParametersInstance - The id of the CVIParameters object.
  //    - index: int32 - Specifies the zero-based index indicating the current position of the parameter to move.
  //    - newIndex: int32 - Specifies the zero-based index indicating the new position of the parameter.
  //
  // CVIParameters_MoveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Move(CVIParameters_MoveRequest) returns (CVIParameters_MoveResponse);
  
  
  // Method: NewArguments
  //
  // Creates and returns a new CVIArguments collection. Use this collection to pass argument values to a LabWindows/CVI module function using the CVIModule.Execute method.
  //
  // The new collection contains the same number of items as the CVIParameters collection. To pass an argument value to a function parameter, set the CVIArgument.Value property on the item in the CVIArguments collection that has the same index as the parameter in the CVIParameters collection.
  //
  // CVIParameters_NewArgumentsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CVIParametersInstance - The id of the CVIParameters object.
  //
  // CVIParameters_NewArgumentsResponse - The response message from the server. It provides the return value.
  //    - returnValue: CVIArgumentsInstance - The return type of the CVIArguments object.
  //
  rpc NewArguments(CVIParameters_NewArgumentsRequest) returns (CVIParameters_NewArgumentsResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // CVIParameters_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CVIParametersInstance - The id of the CVIParameters object.
  //    - index: int32 - Specifies the zero-based index of the parameter to retrieve.
  //
  // CVIParameters_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: CVIParameterInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(CVIParameters_Get_ItemRequest) returns (CVIParameters_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // CVIParameters_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CVIParametersInstance - The id of the CVIParameters object.
  //
  // CVIParameters_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(CVIParameters_Get_CountRequest) returns (CVIParameters_Get_CountResponse);
  
  
}
message CVIParameterInstance {
  // Specifies the handle of the CVIParameter instance in the server.
  string id = 1;
}
message CVIParameters_NewRequest {
  // The id of the CVIParameters object.
  CVIParametersInstance instance = 1;
  // Specifies the zero-based index of where to insert the parameter.
  int32 index = 2;
  // Specifies the name assigned to the new parameter.
  string ParameterName = 3;
  // Specifies the argument expression.
  // If the parameter is an input, this expression corresponds to the value to pass. If the parameter is an output, this expression specifies where to store the result value.
  string parameterValueExpr = 4;
  // Specifies the parameter category.
  CVIParameterCategories parameterCategory = 5;
  // Specifies how to pass the value specified in the argument expression property, CommonCParameter.ValueExpr, to the specific function and sets the CommonCParameter.Pass property.
  CommonCParameterPassOptions parameterPass = 6;
  // Specifies the parameter type.
  CommonCParameterTypes parameterType = 7;
}

message CVIParameters_NewResponse {
}

message CVIParameters_DeleteRequest {
  // The id of the CVIParameters object.
  CVIParametersInstance instance = 1;
  // Specifies the zero-based index of the parameter to delete.
  int32 index = 2;
}

message CVIParameters_DeleteResponse {
}

message CVIParameters_MoveRequest {
  // The id of the CVIParameters object.
  CVIParametersInstance instance = 1;
  // Specifies the zero-based index indicating the current position of the parameter to move.
  int32 index = 2;
  // Specifies the zero-based index indicating the new position of the parameter.
  int32 newIndex = 3;
}

message CVIParameters_MoveResponse {
}

message CVIParameters_NewArgumentsRequest {
  // The id of the CVIParameters object.
  CVIParametersInstance instance = 1;
}

message CVIParameters_NewArgumentsResponse {
  // The return type of the CVIArguments object.
  CVIArgumentsInstance returnValue = 1;
}

message CVIParameters_Get_ItemRequest {
  // The id of the CVIParameters object.
  CVIParametersInstance instance = 1;
  // Specifies the zero-based index of the parameter to retrieve.
  optional int32 index = 2;
}

message CVIParameters_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  CVIParameterInstance returnValue = 1;
}

message CVIParameters_Get_CountRequest {
  // The id of the CVIParameters object.
  CVIParametersInstance instance = 1;
}

message CVIParameters_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// CVIParameter
//
// Use objects from the CVIParameters class to configure and obtain LabWindows/CVI parameter-specific information for an item in the CVIParameter collection class.
// To access the properties and methods of the CommonCParameter class, use the CVIParameter.AsCommonCParameter method to obtain an object.
//
service CVIParameter {
  // Method: AsCommonCParameter
  //
  // Returns the underlying CommonCParameter that represents the CVIParameter.
  //
  // Use the CommonCParameter object to access properties and methods common to all parameters derived from this class.
  //
  // CVIParameter_AsCommonCParameterRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CVIParameterInstance - The id of the CVIParameter object.
  //
  // CVIParameter_AsCommonCParameterResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommonCParameterInstance - The return type of the CommonCParameter object.
  //
  rpc AsCommonCParameter(CVIParameter_AsCommonCParameterRequest) returns (CVIParameter_AsCommonCParameterResponse);
  
  

  // Property: Category
  //
  // Returns the category of the parameter.
  //
  // CVIParameter_Set_CategoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CVIParameterInstance - The id of the CVIParameter object.
  //    - propertyValue: CVIParameterCategories - Returns the category of the parameter. 
  //
  // CVIParameter_Set_CategoryResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CVIParameter_Get_CategoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CVIParameterInstance - The id of the CVIParameter object.
  //
  // CVIParameter_Get_CategoryResponse - The response message from the server. It provides the return value.
  //    - returnValue: CVIParameterCategories - Returns the category of the parameter. 
  //
  rpc Set_Category(CVIParameter_Set_CategoryRequest) returns (CVIParameter_Set_CategoryResponse);
  rpc Get_Category(CVIParameter_Get_CategoryRequest) returns (CVIParameter_Get_CategoryResponse);
  
  
  // Property: Type
  //
  // Specifies the type of parameter.
  //
  // The parameter category depends on the parameter type. Before you choose the type, ensure you select the correct category.
  //
  // CVIParameter_Set_TypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CVIParameterInstance - The id of the CVIParameter object.
  //    - propertyValue: CommonCParameterTypes - Specifies the type of parameter. 
  //
  // CVIParameter_Set_TypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CVIParameter_Get_TypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CVIParameterInstance - The id of the CVIParameter object.
  //
  // CVIParameter_Get_TypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommonCParameterTypes - Specifies the type of parameter. 
  //
  rpc Set_Type(CVIParameter_Set_TypeRequest) returns (CVIParameter_Set_TypeResponse);
  rpc Get_Type(CVIParameter_Get_TypeRequest) returns (CVIParameter_Get_TypeResponse);
  
  
}
message CommonCParameterInstance {
  // Specifies the handle of the CommonCParameter instance in the server.
  string id = 1;
}
message CVIParameter_AsCommonCParameterRequest {
  // The id of the CVIParameter object.
  CVIParameterInstance instance = 1;
}

message CVIParameter_AsCommonCParameterResponse {
  // The return type of the CommonCParameter object.
  CommonCParameterInstance returnValue = 1;
}

message CVIParameter_Set_CategoryRequest {
  // The id of the CVIParameter object.
  CVIParameterInstance instance = 1;
  // Returns the category of the parameter.
  CVIParameterCategories propertyValue = 2;
}

message CVIParameter_Set_CategoryResponse {
}

message CVIParameter_Get_CategoryRequest {
  // The id of the CVIParameter object.
  CVIParameterInstance instance = 1;
}

message CVIParameter_Get_CategoryResponse {
  // Returns the category of the parameter.
  CVIParameterCategories returnValue = 1;
}

message CVIParameter_Set_TypeRequest {
  // The id of the CVIParameter object.
  CVIParameterInstance instance = 1;
  // Specifies the type of parameter.
  CommonCParameterTypes propertyValue = 2;
}

message CVIParameter_Set_TypeResponse {
}

message CVIParameter_Get_TypeRequest {
  // The id of the CVIParameter object.
  CVIParameterInstance instance = 1;
}

message CVIParameter_Get_TypeResponse {
  // Specifies the type of parameter.
  CommonCParameterTypes returnValue = 1;
}

// CommonCParameter
//
// Use objects from the CommonCParameter class to configure and obtain common parameter information for a CVIParameter or DllParameter object.
// To access the properties and methods of a specific parameter class, query the CommonCParameter object for the interface of the parameter-specific interface you want.
//
service CommonCParameter {
  // Method: AsPropertyObject
  //
  // Returns the underlying PropertyObject that represents the adapter.
  //
  // Use the PropertyObject to edit, add, or remove custom properties of the adapter.
  //
  // CommonCParameter_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //
  // CommonCParameter_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(CommonCParameter_AsPropertyObjectRequest) returns (CommonCParameter_AsPropertyObjectResponse);
  
  
  // Method: GetDescription
  //
  // Returns the parameter description.
  //
  // This property corresponds to the short description of the parameter type using C++ syntax.
  //
  // CommonCParameter_GetDescriptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //
  // CommonCParameter_GetDescriptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetDescription(CommonCParameter_GetDescriptionRequest) returns (CommonCParameter_GetDescriptionResponse);
  
  
  // Method: GetArrayDimensionSize
  //
  // Note: This property is obsolete. Use the CommonCParameter.GetArrayDimensionSizeExpr method instead.
  //
  // Returns the value of the CommonCParameter.GetArrayDimensionSizeExpr method if the expression is a numeric value; otherwise TestStand throws an exception.
  //
  // CommonCParameter_GetArrayDimensionSizeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //    - dimension: int32 - Specifies the zero-based index corresponding to one of the array dimensions.
  //
  // CommonCParameter_GetArrayDimensionSizeResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - The return type of the Int32 object.
  //
  rpc GetArrayDimensionSize(CommonCParameter_GetArrayDimensionSizeRequest) returns (CommonCParameter_GetArrayDimensionSizeResponse);
  
  
  // Method: SetArrayDimensionSize
  //
  // Note: This property is obsolete. Use the CommonCParameter.SetArrayDimensionSizeExpr method instead.
  //
  // Specifies the size of the array corresponding to the zero-based index passed as an input.  TestStand assigns this value to the CommonCParameter.SetArrayDimensionSizeExpr property.
  //
  // CommonCParameter_SetArrayDimensionSizeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //    - dimension: int32 - Specifies the zero-based index corresponding to one of the array dimensions.
  //    - arrayDimensionSize: int32 - Specifies the dimension size.
  //
  // CommonCParameter_SetArrayDimensionSizeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetArrayDimensionSize(CommonCParameter_SetArrayDimensionSizeRequest) returns (CommonCParameter_SetArrayDimensionSizeResponse);
  
  
  // Method: GetArrayDimensionSizeExpr
  //
  // Returns an expression that determines the size of the array corresponding to the zero-based index passed as input.
  //
  // CommonCParameter_GetArrayDimensionSizeExprRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //    - dimension: int32 - Specifies the zero-based index corresponding to one of the array dimensions.
  //
  // CommonCParameter_GetArrayDimensionSizeExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetArrayDimensionSizeExpr(CommonCParameter_GetArrayDimensionSizeExprRequest) returns (CommonCParameter_GetArrayDimensionSizeExprResponse);
  
  
  // Method: SetArrayDimensionSizeExpr
  //
  // Specifies an expression that determines the size of the array corresponding to the zero-based index passed as an input.
  //
  // CommonCParameter_SetArrayDimensionSizeExprRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //    - dimension: int32 - Specifies the zero-based index corresponding to one of the array dimensions.
  //    - arrayDimensionSizeExpr: string - Specifies the dimension size.
  //
  // CommonCParameter_SetArrayDimensionSizeExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetArrayDimensionSizeExpr(CommonCParameter_SetArrayDimensionSizeExprRequest) returns (CommonCParameter_SetArrayDimensionSizeExprResponse);
  
  
  // Method: GetEnumValues
  //
  // Returns the enumeration constants for a parameter that is an enumeration.
  //
  // The property objects in the array this method returns have a name and value that corresponds to the name and value of the enumeration constant.
  // Pass the return value of this method as the additionalConstants parameter of Expression.ValidateEvaluationType when checking the CommonCParameter.ValueExpr property for errors.
  // 
  // If you are using an ExpressionEdit control to specify the CommonCParameter.ValueExpr property, pass the return value of this method to ExpressionEdit.SetAdditionalEvaluationConstants to direct the ExpressionEdit control to recognize the enumeration constants.
  //
  // CommonCParameter_GetEnumValuesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //
  // CommonCParameter_GetEnumValuesResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated PropertyObjectInstance - Returns an array of property objects where each property object represents an enumeration value. 
  //
  rpc GetEnumValues(CommonCParameter_GetEnumValuesRequest) returns (CommonCParameter_GetEnumValuesResponse);
  
  
  // Method: EnumTypeParamIsCompatible
  //
  // 
  //
  // CommonCParameter_EnumTypeParamIsCompatibleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //
  // CommonCParameter_EnumTypeParamIsCompatibleResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - The return type of the Boolean object.
  //    - reasonNotCompatible: strin - 
  //
  rpc EnumTypeParamIsCompatible(CommonCParameter_EnumTypeParamIsCompatibleRequest) returns (CommonCParameter_EnumTypeParamIsCompatibleResponse);
  
  
  // Method: NumericTypeParamIsCompatible
  //
  // 
  //
  // CommonCParameter_NumericTypeParamIsCompatibleRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //    - numericTypeName: string - 
  //
  // CommonCParameter_NumericTypeParamIsCompatibleResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - The return type of the Boolean object.
  //    - reasonNotCompatible: strin - 
  //
  rpc NumericTypeParamIsCompatible(CommonCParameter_NumericTypeParamIsCompatibleRequest) returns (CommonCParameter_NumericTypeParamIsCompatibleResponse);
  
  
  // Method: DisplayCreateCustomDataTypeDialog
  //
  // 
  //
  // CommonCParameter_DisplayCreateCustomDataTypeDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //    - sequenceContext: SequenceContextInstance - 
  //
  // CommonCParameter_DisplayCreateCustomDataTypeDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc DisplayCreateCustomDataTypeDialog(CommonCParameter_DisplayCreateCustomDataTypeDialogRequest) returns (CommonCParameter_DisplayCreateCustomDataTypeDialogResponse);
  
  
  // Method: GetDllInfoType
  //
  // 
  //
  // CommonCParameter_GetDllInfoTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //
  // CommonCParameter_GetDllInfoTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: DllInfoTypes - The return type of the DllInfoTypes object.
  //
  rpc GetDllInfoType(CommonCParameter_GetDllInfoTypeRequest) returns (CommonCParameter_GetDllInfoTypeResponse);
  
  

  // Property: ParameterName
  //
  // Returns the symbolic name for the parameter.
  //
  // CommonCParameter_Set_ParameterNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //    - propertyValue: string - Returns the symbolic name for the parameter. 
  //
  // CommonCParameter_Set_ParameterNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CommonCParameter_Get_ParameterNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //
  // CommonCParameter_Get_ParameterNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the symbolic name for the parameter. 
  //
  rpc Set_ParameterName(CommonCParameter_Set_ParameterNameRequest) returns (CommonCParameter_Set_ParameterNameResponse);
  rpc Get_ParameterName(CommonCParameter_Get_ParameterNameRequest) returns (CommonCParameter_Get_ParameterNameResponse);
  
  
  // Property: ValueExpr
  //
  // Specifies the argument expression.
  //
  // If the parameter is an input, this expression corresponds to the value to pass. If the parameter is an output, this expression specifies where to store the result value.
  //
  // CommonCParameter_Set_ValueExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //    - propertyValue: string - Specifies the argument expression. 
  //
  // CommonCParameter_Set_ValueExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CommonCParameter_Get_ValueExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //
  // CommonCParameter_Get_ValueExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the argument expression. 
  //
  rpc Set_ValueExpr(CommonCParameter_Set_ValueExprRequest) returns (CommonCParameter_Set_ValueExprResponse);
  rpc Get_ValueExpr(CommonCParameter_Get_ValueExprRequest) returns (CommonCParameter_Get_ValueExprResponse);
  
  
  // Property: Pass
  //
  // Specifies how to pass the value specified in the argument expression property, CommonCParameter.ValueExpr, to the specific function. Use the CommonCParameter.PassArrayElementBy property to specify how to pass structure elements of an array parameter.
  //
  // This option is not used for string or array parameters.
  // The CParamPass_ByConstPointer and CParamPass_ByConstReference values are valid only for parameters that have the Category set to one of the C++ classes
  // The CParamPass_ByReference value is valid only for C/C++ DLL module parameters.
  //
  // CommonCParameter_Set_PassRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //    - propertyValue: CommonCParameterPassOptions - Specifies how to pass the value specified in the argument expression property, CommonCParameter.ValueExpr, to the specific function. Use the CommonCParameter.PassArrayElementBy property to specify how to pass structure elements of an array parameter. 
  //
  // CommonCParameter_Set_PassResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CommonCParameter_Get_PassRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //
  // CommonCParameter_Get_PassResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommonCParameterPassOptions - Specifies how to pass the value specified in the argument expression property, CommonCParameter.ValueExpr, to the specific function. Use the CommonCParameter.PassArrayElementBy property to specify how to pass structure elements of an array parameter. 
  //
  rpc Set_Pass(CommonCParameter_Set_PassRequest) returns (CommonCParameter_Set_PassResponse);
  rpc Get_Pass(CommonCParameter_Get_PassRequest) returns (CommonCParameter_Get_PassResponse);
  
  
  // Property: ResultAction
  //
  // Specifies whether TestStand sets the Error.Occurred property of the step to True when the return value or parameter value after the call is greater than zero, less than zero, equal to zero, or not equal to zero.
  //
  // CommonCParameter_Set_ResultActionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //    - propertyValue: CommonCParameterResultActions - Specifies whether TestStand sets the Error.Occurred property of the step to True when the return value or parameter value after the call is greater than zero, less than zero, equal to zero, or not equal to zero. 
  //
  // CommonCParameter_Set_ResultActionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CommonCParameter_Get_ResultActionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //
  // CommonCParameter_Get_ResultActionResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommonCParameterResultActions - Specifies whether TestStand sets the Error.Occurred property of the step to True when the return value or parameter value after the call is greater than zero, less than zero, equal to zero, or not equal to zero. 
  //
  rpc Set_ResultAction(CommonCParameter_Set_ResultActionRequest) returns (CommonCParameter_Set_ResultActionResponse);
  rpc Get_ResultAction(CommonCParameter_Get_ResultActionRequest) returns (CommonCParameter_Get_ResultActionResponse);
  
  
  // Property: Flags
  //
  // Specifies certain attributes for the parameter, such as whether TestStand sets the Error.Code property of the step to the return value or parameter value the argument returns. Refer to CommonCParameterFlags for all the possible values.
  //
  // CommonCParameter_Set_FlagsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //    - propertyValue: int32 - Specifies certain attributes for the parameter, such as whether TestStand sets the Error.Code property of the step to the return value or parameter value the argument returns. Refer to CommonCParameterFlags for all the possible values. 
  //
  // CommonCParameter_Set_FlagsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CommonCParameter_Get_FlagsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //
  // CommonCParameter_Get_FlagsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies certain attributes for the parameter, such as whether TestStand sets the Error.Code property of the step to the return value or parameter value the argument returns. Refer to CommonCParameterFlags for all the possible values. 
  //
  rpc Set_Flags(CommonCParameter_Set_FlagsRequest) returns (CommonCParameter_Set_FlagsResponse);
  rpc Get_Flags(CommonCParameter_Get_FlagsRequest) returns (CommonCParameter_Get_FlagsResponse);
  
  
  // Property: StringBufferSize
  //
  // Note: This property is obsolete. Use the CommonCParameter.StringBufferSizeExpr property instead.
  //
  // Specifies the buffer size for a string parameter. TestStand assigns this value to the CommonCParameter.StringBufferSizeExpr property. When you use this property, TestStand returns the value stored in the CommonCParameter.StringBufferSizeExpr property if the expression is a numeric value; otherwise TestStand throws an exception.
  //
  // CommonCParameter_Set_StringBufferSizeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //    - propertyValue: int32 - Note: This property is obsolete. Use the CommonCParameter.StringBufferSizeExpr property instead. 
  //
  // CommonCParameter_Set_StringBufferSizeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CommonCParameter_Get_StringBufferSizeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //
  // CommonCParameter_Get_StringBufferSizeResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Note: This property is obsolete. Use the CommonCParameter.StringBufferSizeExpr property instead. 
  //
  rpc Set_StringBufferSize(CommonCParameter_Set_StringBufferSizeRequest) returns (CommonCParameter_Set_StringBufferSizeResponse);
  rpc Get_StringBufferSize(CommonCParameter_Get_StringBufferSizeRequest) returns (CommonCParameter_Get_StringBufferSizeResponse);
  
  
  // Property: StructType
  //
  // Specifies the name of the type used when the category of a parameter is a C structure argument or a TestStand object.
  //
  // If you specify DllParamCategory_CStruct or DllParamCategory_CStructArray for the DllParameter.Category property or  CVIParamCategory_CStruct or CVIParamCategory_CStructArray for the CVIParameter.Category property, you can pass variables and properties you create with named data types to function parameters that accept structures. When you create or edit a data type, specify if the type can be a C structure argument and how the type represents itself in memory when you pass it to a structure parameter.
  // If you specify DllParamCategory_TSObject for the DllParameter.Category property, you can pass objects from the TestStand ActiveX API to function parameters that accept object references.
  //
  // CommonCParameter_Set_StructTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //    - propertyValue: string - Specifies the name of the type used when the category of a parameter is a C structure argument or a TestStand object. 
  //
  // CommonCParameter_Set_StructTypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CommonCParameter_Get_StructTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //
  // CommonCParameter_Get_StructTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the name of the type used when the category of a parameter is a C structure argument or a TestStand object. 
  //
  rpc Set_StructType(CommonCParameter_Set_StructTypeRequest) returns (CommonCParameter_Set_StructTypeResponse);
  rpc Get_StructType(CommonCParameter_Get_StructTypeRequest) returns (CommonCParameter_Get_StructTypeResponse);
  
  
  // Property: ArrayDimensions
  //
  // Specifies the number of dimensions for array parameters.
  //
  // CommonCParameter_Set_ArrayDimensionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //    - propertyValue: int32 - Specifies the number of dimensions for array parameters. 
  //
  // CommonCParameter_Set_ArrayDimensionsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CommonCParameter_Get_ArrayDimensionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //
  // CommonCParameter_Get_ArrayDimensionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the number of dimensions for array parameters. 
  //
  rpc Set_ArrayDimensions(CommonCParameter_Set_ArrayDimensionsRequest) returns (CommonCParameter_Set_ArrayDimensionsResponse);
  rpc Get_ArrayDimensions(CommonCParameter_Get_ArrayDimensionsRequest) returns (CommonCParameter_Get_ArrayDimensionsResponse);
  
  
  // Property: UnknownInfo
  //
  // Specifies what part of the parameter information is unknown based on the category and type.
  //
  // You can  have unknown information when you load a prototype from a module that does not contain enough information to determine the exact category and type of the specific parameter.
  //
  // CommonCParameter_Set_UnknownInfoRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //    - propertyValue: CommonCParameterUnknownInfoFlags - Specifies what part of the parameter information is unknown based on the category and type. 
  //
  // CommonCParameter_Set_UnknownInfoResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CommonCParameter_Get_UnknownInfoRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //
  // CommonCParameter_Get_UnknownInfoResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommonCParameterUnknownInfoFlags - Specifies what part of the parameter information is unknown based on the category and type. 
  //
  rpc Set_UnknownInfo(CommonCParameter_Set_UnknownInfoRequest) returns (CommonCParameter_Set_UnknownInfoResponse);
  rpc Get_UnknownInfo(CommonCParameter_Get_UnknownInfoRequest) returns (CommonCParameter_Get_UnknownInfoResponse);
  
  
  // Property: UserData
  //
  // Holds a data item you associate with the parameter object.
  //
  // Typically, you do not use this property.
  //
  // CommonCParameter_Get_UserDataRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //
  // CommonCParameter_Get_UserDataResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Holds a data item you associate with the parameter object. 
  //
  rpc Get_UserData(CommonCParameter_Get_UserDataRequest) returns (CommonCParameter_Get_UserDataResponse);
  
  
  // Property: PassArrayElementBy
  //
  // Specifies how to pass structures in arrays. Valid values are CParamPass_ByPointer and CParamPass_ByVal.
  //
  // CommonCParameter_Set_PassArrayElementByRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //    - propertyValue: CommonCParameterPassOptions - Specifies how to pass structures in arrays. Valid values are CParamPass_ByPointer and CParamPass_ByVal. 
  //
  // CommonCParameter_Set_PassArrayElementByResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CommonCParameter_Get_PassArrayElementByRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //
  // CommonCParameter_Get_PassArrayElementByResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommonCParameterPassOptions - Specifies how to pass structures in arrays. Valid values are CParamPass_ByPointer and CParamPass_ByVal. 
  //
  rpc Set_PassArrayElementBy(CommonCParameter_Set_PassArrayElementByRequest) returns (CommonCParameter_Set_PassArrayElementByResponse);
  rpc Get_PassArrayElementBy(CommonCParameter_Get_PassArrayElementByRequest) returns (CommonCParameter_Get_PassArrayElementByResponse);
  
  
  // Property: ValidEvaluationTypes
  //
  // Returns the valid types to which this parameter can evaluate.
  //
  // You can pass the value of this property to the validEvaluationTypes parameter of the Expression.ValidateEvaluationType method to determine whether the value of the CommonCParameter.ValueExpr property contains errors.
  // If you are using an ExpressionEdit control to display the value of the CommonCParameter.ValueExpr property, pass the value of this property to the  ExpressionEdit.SetValidEvaluationTypes method.
  //
  // CommonCParameter_Get_ValidEvaluationTypesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //
  // CommonCParameter_Get_ValidEvaluationTypesResponse - The response message from the server. It provides the return value.
  //    - returnValue: EvaluationTypesInstance - Returns the valid types to which this parameter can evaluate. 
  //
  rpc Get_ValidEvaluationTypes(CommonCParameter_Get_ValidEvaluationTypesRequest) returns (CommonCParameter_Get_ValidEvaluationTypesResponse);
  
  
  // Property: StringBufferSizeExpr
  //
  // Specifies an expression that determines the buffer size for a string parameter. When you specify one of the string buffer types as the parameter type, the adapter copies the contents of the string argument and a trailing zero element into a temporary buffer before calling the function. Specify the minimum size of the temporary buffer using this property.
  //
  // If the string value is longer than the buffer size you specify, the adapter resizes the temporary buffer so it is large enough to hold the contents of the string argument and the trailing zero element. After the function returns, TestStand copies the value the function writes into the temporary buffer back to the string argument.
  //
  // CommonCParameter_Set_StringBufferSizeExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //    - propertyValue: string - Specifies an expression that determines the buffer size for a string parameter. When you specify one of the string buffer types as the parameter type, the adapter copies the contents of the string argument and a trailing zero element into a temporary buffer before calling the function. Specify the minimum size of the temporary buffer using this property. 
  //
  // CommonCParameter_Set_StringBufferSizeExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CommonCParameter_Get_StringBufferSizeExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //
  // CommonCParameter_Get_StringBufferSizeExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies an expression that determines the buffer size for a string parameter. When you specify one of the string buffer types as the parameter type, the adapter copies the contents of the string argument and a trailing zero element into a temporary buffer before calling the function. Specify the minimum size of the temporary buffer using this property. 
  //
  rpc Set_StringBufferSizeExpr(CommonCParameter_Set_StringBufferSizeExprRequest) returns (CommonCParameter_Set_StringBufferSizeExprResponse);
  rpc Get_StringBufferSizeExpr(CommonCParameter_Get_StringBufferSizeExprRequest) returns (CommonCParameter_Get_StringBufferSizeExprResponse);
  
  
  // Property: EnumTypeName
  //
  // Returns the name of the enumeration type for a parameter that is an enumeration.
  //
  // CommonCParameter_Get_EnumTypeNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //
  // CommonCParameter_Get_EnumTypeNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the enumeration type for a parameter that is an enumeration. 
  //
  rpc Get_EnumTypeName(CommonCParameter_Get_EnumTypeNameRequest) returns (CommonCParameter_Get_EnumTypeNameResponse);
  
  
  // Property: DisplayValueExpr
  //
  // Returns the text to display for the CommonCParameter.ValueExpr property.
  //
  // The text of this property differs from the text of the CommonCParameter.ValueExpr property when the expression contains an enumeration constant. If you set the CommonCParameter.ValueExpr property to an expression that contains an enumeration constant, this property is set to the expression with the constant, and the CommonCParameter.ValueExpr property is set to an expression that contains the value of the constant.
  //
  // CommonCParameter_Get_DisplayValueExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //
  // CommonCParameter_Get_DisplayValueExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the text to display for the CommonCParameter.ValueExpr property. 
  //
  rpc Get_DisplayValueExpr(CommonCParameter_Get_DisplayValueExprRequest) returns (CommonCParameter_Get_DisplayValueExprResponse);
  
  
  // Property: ValueExprIsIgnored
  //
  // Use this property to determine whether the adapter ignores the argument value expression when it calls the module. The LabWindows/CVI and C/C++ DLL Adapters ignore the value expression for the parameter that corresponds to the return value of a void function.
  //
  // CommonCParameter_Get_ValueExprIsIgnoredRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //
  // CommonCParameter_Get_ValueExprIsIgnoredResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Use this property to determine whether the adapter ignores the argument value expression when it calls the module. The LabWindows/CVI and C/C++ DLL Adapters ignore the value expression for the parameter that corresponds to the return value of a void function. 
  //
  rpc Get_ValueExprIsIgnored(CommonCParameter_Get_ValueExprIsIgnoredRequest) returns (CommonCParameter_Get_ValueExprIsIgnoredResponse);
  
  
  // Property: ValueExprIsOptional
  //
  // Use this property to determine whether the argument value expression is optional. You do not have to specify an optional value expression to call the module successfully. Value expressions for return values are optional.
  //
  // CommonCParameter_Get_ValueExprIsOptionalRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommonCParameterInstance - The id of the CommonCParameter object.
  //
  // CommonCParameter_Get_ValueExprIsOptionalResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Use this property to determine whether the argument value expression is optional. You do not have to specify an optional value expression to call the module successfully. Value expressions for return values are optional. 
  //
  rpc Get_ValueExprIsOptional(CommonCParameter_Get_ValueExprIsOptionalRequest) returns (CommonCParameter_Get_ValueExprIsOptionalResponse);
  
  
}
message CommonCParameter_AsPropertyObjectRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
}

message CommonCParameter_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message CommonCParameter_GetDescriptionRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
}

message CommonCParameter_GetDescriptionResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message CommonCParameter_GetArrayDimensionSizeRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
  // Specifies the zero-based index corresponding to one of the array dimensions.
  int32 dimension = 2;
}

message CommonCParameter_GetArrayDimensionSizeResponse {
  // The return type of the Int32 object.
  int32 returnValue = 1;
}

message CommonCParameter_SetArrayDimensionSizeRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
  // Specifies the zero-based index corresponding to one of the array dimensions.
  int32 dimension = 2;
  // Specifies the dimension size.
  int32 arrayDimensionSize = 3;
}

message CommonCParameter_SetArrayDimensionSizeResponse {
}

message CommonCParameter_GetArrayDimensionSizeExprRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
  // Specifies the zero-based index corresponding to one of the array dimensions.
  int32 dimension = 2;
}

message CommonCParameter_GetArrayDimensionSizeExprResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message CommonCParameter_SetArrayDimensionSizeExprRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
  // Specifies the zero-based index corresponding to one of the array dimensions.
  int32 dimension = 2;
  // Specifies the dimension size.
  string arrayDimensionSizeExpr = 3;
}

message CommonCParameter_SetArrayDimensionSizeExprResponse {
}

message CommonCParameter_GetEnumValuesRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
}

message CommonCParameter_GetEnumValuesResponse {
  // Returns an array of property objects where each property object represents an enumeration value.
  repeated PropertyObjectInstance returnValue = 1;
}

message CommonCParameter_EnumTypeParamIsCompatibleRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
  // 
  string EnumTypeName = 2;
}

message CommonCParameter_EnumTypeParamIsCompatibleResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
  // 
  string reasonNotCompatible = 2;
}

message CommonCParameter_NumericTypeParamIsCompatibleRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
  // 
  string numericTypeName = 2;
}

message CommonCParameter_NumericTypeParamIsCompatibleResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
  // 
  string reasonNotCompatible = 2;
}

message CommonCParameter_DisplayCreateCustomDataTypeDialogRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
  // 
  SequenceContextInstance sequenceContext = 2;
}

message CommonCParameter_DisplayCreateCustomDataTypeDialogResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message CommonCParameter_GetDllInfoTypeRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
}

message CommonCParameter_GetDllInfoTypeResponse {
  // The return type of the DllInfoTypes object.
  DllInfoTypes returnValue = 1;
}

message CommonCParameter_Set_ParameterNameRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
  // Returns the symbolic name for the parameter.
  string propertyValue = 2;
}

message CommonCParameter_Set_ParameterNameResponse {
}

message CommonCParameter_Get_ParameterNameRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
}

message CommonCParameter_Get_ParameterNameResponse {
  // Returns the symbolic name for the parameter.
  string returnValue = 1;
}

message CommonCParameter_Set_ValueExprRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
  // Specifies the argument expression.
  string propertyValue = 2;
}

message CommonCParameter_Set_ValueExprResponse {
}

message CommonCParameter_Get_ValueExprRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
}

message CommonCParameter_Get_ValueExprResponse {
  // Specifies the argument expression.
  string returnValue = 1;
}

message CommonCParameter_Set_PassRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
  // Specifies how to pass the value specified in the argument expression property, CommonCParameter.ValueExpr, to the specific function. Use the CommonCParameter.PassArrayElementBy property to specify how to pass structure elements of an array parameter.
  CommonCParameterPassOptions propertyValue = 2;
}

message CommonCParameter_Set_PassResponse {
}

message CommonCParameter_Get_PassRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
}

message CommonCParameter_Get_PassResponse {
  // Specifies how to pass the value specified in the argument expression property, CommonCParameter.ValueExpr, to the specific function. Use the CommonCParameter.PassArrayElementBy property to specify how to pass structure elements of an array parameter.
  CommonCParameterPassOptions returnValue = 1;
}

message CommonCParameter_Set_ResultActionRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
  // Specifies whether TestStand sets the Error.Occurred property of the step to True when the return value or parameter value after the call is greater than zero, less than zero, equal to zero, or not equal to zero.
  CommonCParameterResultActions propertyValue = 2;
}

message CommonCParameter_Set_ResultActionResponse {
}

message CommonCParameter_Get_ResultActionRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
}

message CommonCParameter_Get_ResultActionResponse {
  // Specifies whether TestStand sets the Error.Occurred property of the step to True when the return value or parameter value after the call is greater than zero, less than zero, equal to zero, or not equal to zero.
  CommonCParameterResultActions returnValue = 1;
}

message CommonCParameter_Set_FlagsRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
  // Specifies certain attributes for the parameter, such as whether TestStand sets the Error.Code property of the step to the return value or parameter value the argument returns. Refer to CommonCParameterFlags for all the possible values.
  int32 propertyValue = 2;
}

message CommonCParameter_Set_FlagsResponse {
}

message CommonCParameter_Get_FlagsRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
}

message CommonCParameter_Get_FlagsResponse {
  // Specifies certain attributes for the parameter, such as whether TestStand sets the Error.Code property of the step to the return value or parameter value the argument returns. Refer to CommonCParameterFlags for all the possible values.
  CommonCParameterFlags returnValue = 1;
}

message CommonCParameter_Set_StringBufferSizeRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
  // Note: This property is obsolete. Use the CommonCParameter.StringBufferSizeExpr property instead.
  int32 propertyValue = 2;
}

message CommonCParameter_Set_StringBufferSizeResponse {
}

message CommonCParameter_Get_StringBufferSizeRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
}

message CommonCParameter_Get_StringBufferSizeResponse {
  // Note: This property is obsolete. Use the CommonCParameter.StringBufferSizeExpr property instead.
  int32 returnValue = 1;
}

message CommonCParameter_Set_StructTypeRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
  // Specifies the name of the type used when the category of a parameter is a C structure argument or a TestStand object.
  string propertyValue = 2;
}

message CommonCParameter_Set_StructTypeResponse {
}

message CommonCParameter_Get_StructTypeRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
}

message CommonCParameter_Get_StructTypeResponse {
  // Specifies the name of the type used when the category of a parameter is a C structure argument or a TestStand object.
  string returnValue = 1;
}

message CommonCParameter_Set_ArrayDimensionsRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
  // Specifies the number of dimensions for array parameters.
  int32 propertyValue = 2;
}

message CommonCParameter_Set_ArrayDimensionsResponse {
}

message CommonCParameter_Get_ArrayDimensionsRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
}

message CommonCParameter_Get_ArrayDimensionsResponse {
  // Specifies the number of dimensions for array parameters.
  int32 returnValue = 1;
}

message CommonCParameter_Set_UnknownInfoRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
  // Specifies what part of the parameter information is unknown based on the category and type.
  CommonCParameterUnknownInfoFlags propertyValue = 2;
}

message CommonCParameter_Set_UnknownInfoResponse {
}

message CommonCParameter_Get_UnknownInfoRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
}

message CommonCParameter_Get_UnknownInfoResponse {
  // Specifies what part of the parameter information is unknown based on the category and type.
  CommonCParameterUnknownInfoFlags returnValue = 1;
}

message CommonCParameter_Get_UserDataRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
}

message CommonCParameter_Get_UserDataResponse {
  // Holds a data item you associate with the parameter object.
  PropertyObjectInstance returnValue = 1;
}

message CommonCParameter_Set_PassArrayElementByRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
  // Specifies how to pass structures in arrays. Valid values are CParamPass_ByPointer and CParamPass_ByVal.
  CommonCParameterPassOptions propertyValue = 2;
}

message CommonCParameter_Set_PassArrayElementByResponse {
}

message CommonCParameter_Get_PassArrayElementByRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
}

message CommonCParameter_Get_PassArrayElementByResponse {
  // Specifies how to pass structures in arrays. Valid values are CParamPass_ByPointer and CParamPass_ByVal.
  CommonCParameterPassOptions returnValue = 1;
}

message CommonCParameter_Get_ValidEvaluationTypesRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
}

message CommonCParameter_Get_ValidEvaluationTypesResponse {
  // Returns the valid types to which this parameter can evaluate.
  EvaluationTypesInstance returnValue = 1;
}

message CommonCParameter_Set_StringBufferSizeExprRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
  // Specifies an expression that determines the buffer size for a string parameter. When you specify one of the string buffer types as the parameter type, the adapter copies the contents of the string argument and a trailing zero element into a temporary buffer before calling the function. Specify the minimum size of the temporary buffer using this property.
  string propertyValue = 2;
}

message CommonCParameter_Set_StringBufferSizeExprResponse {
}

message CommonCParameter_Get_StringBufferSizeExprRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
}

message CommonCParameter_Get_StringBufferSizeExprResponse {
  // Specifies an expression that determines the buffer size for a string parameter. When you specify one of the string buffer types as the parameter type, the adapter copies the contents of the string argument and a trailing zero element into a temporary buffer before calling the function. Specify the minimum size of the temporary buffer using this property.
  string returnValue = 1;
}

message CommonCParameter_Get_EnumTypeNameRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
}

message CommonCParameter_Get_EnumTypeNameResponse {
  // Returns the name of the enumeration type for a parameter that is an enumeration.
  string returnValue = 1;
}

message CommonCParameter_Get_DisplayValueExprRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
}

message CommonCParameter_Get_DisplayValueExprResponse {
  // Returns the text to display for the CommonCParameter.ValueExpr property.
  string returnValue = 1;
}

message CommonCParameter_Get_ValueExprIsIgnoredRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
}

message CommonCParameter_Get_ValueExprIsIgnoredResponse {
  // Use this property to determine whether the adapter ignores the argument value expression when it calls the module. The LabWindows/CVI and C/C++ DLL Adapters ignore the value expression for the parameter that corresponds to the return value of a void function.
  bool returnValue = 1;
}

message CommonCParameter_Get_ValueExprIsOptionalRequest {
  // The id of the CommonCParameter object.
  CommonCParameterInstance instance = 1;
}

message CommonCParameter_Get_ValueExprIsOptionalResponse {
  // Use this property to determine whether the argument value expression is optional. You do not have to specify an optional value expression to call the module successfully. Value expressions for return values are optional.
  bool returnValue = 1;
}

// CVIArguments
//
// Use objects from the CVIArguments class to pass specific argument values to a LabWindows/CVI module function using the CVIModule.Execute method. Use the CVIParameters.NewArguments method to create a new arguments collection.
//
service CVIArguments {
  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // CVIArguments_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CVIArgumentsInstance - The id of the CVIArguments object.
  //    - index: int32 - Specifies the zero-based index of the item to retrieve. An argument at a specific index in the CVIArguments collection corresponds to the parameter at the same index in the CVIParameters collection that you used to create the CVIArguments collection.
  //
  // CVIArguments_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: CVIArgumentInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(CVIArguments_Get_ItemRequest) returns (CVIArguments_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // CVIArguments_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CVIArgumentsInstance - The id of the CVIArguments object.
  //
  // CVIArguments_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(CVIArguments_Get_CountRequest) returns (CVIArguments_Get_CountResponse);
  
  
}
message CVIArgumentInstance {
  // Specifies the handle of the CVIArgument instance in the server.
  string id = 1;
}
message CVIArguments_Get_ItemRequest {
  // The id of the CVIArguments object.
  CVIArgumentsInstance instance = 1;
  // Specifies the zero-based index of the item to retrieve. An argument at a specific index in the CVIArguments collection corresponds to the parameter at the same index in the CVIParameters collection that you used to create the CVIArguments collection.
  optional int32 index = 2;
}

message CVIArguments_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  CVIArgumentInstance returnValue = 1;
}

message CVIArguments_Get_CountRequest {
  // The id of the CVIArguments object.
  CVIArgumentsInstance instance = 1;
}

message CVIArguments_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// CVIArgument
//
// Use objects from the CVIArgument class to set the argument value to pass to a LabWindows/CVI module function using the CVIModule.Execute method.
//
service CVIArgument {
  // Property: Value
  //
  // Specifies the argument value to pass for the corresponding parameter.
  //
  // When you pass a CVIArguments collection to the CVIModule.Execute function, the adapter passes this property to the function instead of evaluating the CommonCParameter.ValueExpr expression.
  //
  // CVIArgument_Set_ValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CVIArgumentInstance - The id of the CVIArgument object.
  //    - propertyValue: PropertyObjectInstance - Specifies the argument value to pass for the corresponding parameter. 
  //
  // CVIArgument_Set_ValueResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CVIArgument_Get_ValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CVIArgumentInstance - The id of the CVIArgument object.
  //
  // CVIArgument_Get_ValueResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Specifies the argument value to pass for the corresponding parameter. 
  //
  rpc Set_Value(CVIArgument_Set_ValueRequest) returns (CVIArgument_Set_ValueResponse);
  rpc Get_Value(CVIArgument_Get_ValueRequest) returns (CVIArgument_Get_ValueResponse);
  
  
}
message CVIArgument_Set_ValueRequest {
  // The id of the CVIArgument object.
  CVIArgumentInstance instance = 1;
  // Specifies the argument value to pass for the corresponding parameter.
  PropertyObjectInstance propertyValue = 2;
}

message CVIArgument_Set_ValueResponse {
}

message CVIArgument_Get_ValueRequest {
  // The id of the CVIArgument object.
  CVIArgumentInstance instance = 1;
}

message CVIArgument_Get_ValueResponse {
  // Specifies the argument value to pass for the corresponding parameter.
  PropertyObjectInstance returnValue = 1;
}

// DllAdapter
//
// Use objects from the DllAdapter class to configure and obtain C/C++ DLL Adapter-specific information about the module adapter. Call the Engine.GetAdapter or Engine.GetAdapterByKeyName method to obtain a reference to the adapter object.
// To access the properties and methods of the Adapter class, use the DllAdapter.AsAdapter method to obtain an object.
//
service DllAdapter {
  // Method: AsCommonCAdapter
  //
  // Returns the underlying CommonCAdapter object that represents the C/C++ DLL Adapter.
  //
  // Use the CommonCAdapter object to access properties and methods common to all adapters derived from this class.
  //
  // DllAdapter_AsCommonCAdapterRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllAdapterInstance - The id of the DllAdapter object.
  //
  // DllAdapter_AsCommonCAdapterResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommonCAdapterInstance - The return type of the CommonCAdapter object.
  //
  rpc AsCommonCAdapter(DllAdapter_AsCommonCAdapterRequest) returns (DllAdapter_AsCommonCAdapterResponse);
  
  
  // Method: AsAdapter
  //
  // Returns the underlying module Adapter object that represents the C/C++ DLL Adapter.
  //
  // Use the adapter to access properties and methods common to all adapters.
  //
  // DllAdapter_AsAdapterRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllAdapterInstance - The id of the DllAdapter object.
  //
  // DllAdapter_AsAdapterResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdapterInstance - The return type of the Adapter object.
  //
  rpc AsAdapter(DllAdapter_AsAdapterRequest) returns (DllAdapter_AsAdapterResponse);
  
  
  // Method: NewModule
  //
  // Creates and returns a new DllModule object. Use this method to create a DllModule object that you can execute without using a step, sequence, or execution.
  //
  // DllAdapter_NewModuleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllAdapterInstance - The id of the DllAdapter object.
  //
  // DllAdapter_NewModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: DllModuleInstance - The return type of the DllModule object.
  //
  rpc NewModule(DllAdapter_NewModuleRequest) returns (DllAdapter_NewModuleResponse);
  
  

  // Property: VisualStudioDTEVersionForEditing
  //
  // Specifies the Microsoft Visual Studio development environment (DTE) version the C/C++ DLL Adapter  uses when creating and editing code when more than one version of Visual Studio is installed.
  //
  // If you have only one version of Visual Studio installed, the C/C++ DLL Adapter always uses that version for debugging.
  // You can set this property to a supported value of the VisualStudioDTEVersions constants or to the programmatic identifier of the DTE version you want to use.
  //
  // DllAdapter_Set_VisualStudioDTEVersionForEditingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllAdapterInstance - The id of the DllAdapter object.
  //    - propertyValue: string - Specifies the Microsoft Visual Studio development environment (DTE) version the C/C++ DLL Adapter  uses when creating and editing code when more than one version of Visual Studio is installed. 
  //
  // DllAdapter_Set_VisualStudioDTEVersionForEditingResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DllAdapter_Get_VisualStudioDTEVersionForEditingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllAdapterInstance - The id of the DllAdapter object.
  //
  // DllAdapter_Get_VisualStudioDTEVersionForEditingResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the Microsoft Visual Studio development environment (DTE) version the C/C++ DLL Adapter  uses when creating and editing code when more than one version of Visual Studio is installed. 
  //
  rpc Set_VisualStudioDTEVersionForEditing(DllAdapter_Set_VisualStudioDTEVersionForEditingRequest) returns (DllAdapter_Set_VisualStudioDTEVersionForEditingResponse);
  rpc Get_VisualStudioDTEVersionForEditing(DllAdapter_Get_VisualStudioDTEVersionForEditingRequest) returns (DllAdapter_Get_VisualStudioDTEVersionForEditingResponse);
  
  
  // Property: VisualStudioDTEVersionForDebugging
  //
  // Specifies the Microsoft Visual Studio development environment (DTE) version the C/C++ DLL Adapter uses when debugging into code modules when more than one version of Visual Studio is installed.
  //
  // If you have only one version of Visual Studio installed, the C/C++ DLL Adapter always uses that version for debugging.
  // You can set this property to a supported value of the VisualStudioDTEVersions constants or to the programmatic identifier of the DTE version you want to use.
  // Note: The VisualStudioDTEVersion_MatchProject constant is not a valid value for this property.
  //
  // DllAdapter_Set_VisualStudioDTEVersionForDebuggingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllAdapterInstance - The id of the DllAdapter object.
  //    - propertyValue: string - Specifies the Microsoft Visual Studio development environment (DTE) version the C/C++ DLL Adapter uses when debugging into code modules when more than one version of Visual Studio is installed. 
  //
  // DllAdapter_Set_VisualStudioDTEVersionForDebuggingResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DllAdapter_Get_VisualStudioDTEVersionForDebuggingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllAdapterInstance - The id of the DllAdapter object.
  //
  // DllAdapter_Get_VisualStudioDTEVersionForDebuggingResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the Microsoft Visual Studio development environment (DTE) version the C/C++ DLL Adapter uses when debugging into code modules when more than one version of Visual Studio is installed. 
  //
  rpc Set_VisualStudioDTEVersionForDebugging(DllAdapter_Set_VisualStudioDTEVersionForDebuggingRequest) returns (DllAdapter_Set_VisualStudioDTEVersionForDebuggingResponse);
  rpc Get_VisualStudioDTEVersionForDebugging(DllAdapter_Get_VisualStudioDTEVersionForDebuggingRequest) returns (DllAdapter_Get_VisualStudioDTEVersionForDebuggingResponse);
  
  
}
message DllAdapterInstance {
  // Specifies the handle of the DllAdapter instance in the server.
  string id = 1;
}

message DllModuleInstance {
  // Specifies the handle of the DllModule instance in the server.
  string id = 1;
}
message DllAdapter_AsCommonCAdapterRequest {
  // The id of the DllAdapter object.
  DllAdapterInstance instance = 1;
}

message DllAdapter_AsCommonCAdapterResponse {
  // The return type of the CommonCAdapter object.
  CommonCAdapterInstance returnValue = 1;
}

message DllAdapter_AsAdapterRequest {
  // The id of the DllAdapter object.
  DllAdapterInstance instance = 1;
}

message DllAdapter_AsAdapterResponse {
  // The return type of the Adapter object.
  AdapterInstance returnValue = 1;
}

message DllAdapter_NewModuleRequest {
  // The id of the DllAdapter object.
  DllAdapterInstance instance = 1;
}

message DllAdapter_NewModuleResponse {
  // The return type of the DllModule object.
  DllModuleInstance returnValue = 1;
}

message DllAdapter_Set_VisualStudioDTEVersionForEditingRequest {
  // The id of the DllAdapter object.
  DllAdapterInstance instance = 1;
  // Specifies the Microsoft Visual Studio development environment (DTE) version the C/C++ DLL Adapter  uses when creating and editing code when more than one version of Visual Studio is installed.
  string propertyValue = 2;
}

message DllAdapter_Set_VisualStudioDTEVersionForEditingResponse {
}

message DllAdapter_Get_VisualStudioDTEVersionForEditingRequest {
  // The id of the DllAdapter object.
  DllAdapterInstance instance = 1;
}

message DllAdapter_Get_VisualStudioDTEVersionForEditingResponse {
  // Specifies the Microsoft Visual Studio development environment (DTE) version the C/C++ DLL Adapter  uses when creating and editing code when more than one version of Visual Studio is installed.
  string returnValue = 1;
}

message DllAdapter_Set_VisualStudioDTEVersionForDebuggingRequest {
  // The id of the DllAdapter object.
  DllAdapterInstance instance = 1;
  // Specifies the Microsoft Visual Studio development environment (DTE) version the C/C++ DLL Adapter uses when debugging into code modules when more than one version of Visual Studio is installed.
  string propertyValue = 2;
}

message DllAdapter_Set_VisualStudioDTEVersionForDebuggingResponse {
}

message DllAdapter_Get_VisualStudioDTEVersionForDebuggingRequest {
  // The id of the DllAdapter object.
  DllAdapterInstance instance = 1;
}

message DllAdapter_Get_VisualStudioDTEVersionForDebuggingResponse {
  // Specifies the Microsoft Visual Studio development environment (DTE) version the C/C++ DLL Adapter uses when debugging into code modules when more than one version of Visual Studio is installed.
  string returnValue = 1;
}

// DllModule
//
// Use objects from the DllModule class to specify and obtain C/C++ DLL Adapter-specific information about the code module that steps or step type substeps execute. Use the Step.Module property to obtain a reference to a DllModule object. To access the properties and methods of a specific module class, query the Module object for the interface of the module-specific interface you want to acquire.
// Typically, you use this class only when you are writing a sequence editor.
// To access the properties and methods of the CommonCModule class, use the DllModule.AsCommonCModule method to obtain an object.
// You can use the Module.LoadPrototype method to load the prototype for the module the step specifies.
//
service DllModule {
  // Method: AsCommonCModule
  //
  // Returns the underlying CommonCModule object that represents the DllModule.
  //
  // Use the CommonCModule object to access properties and methods common to all modules derived from this class.
  //
  // DllModule_AsCommonCModuleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllModuleInstance - The id of the DllModule object.
  //
  // DllModule_AsCommonCModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommonCModuleInstance - The return type of the CommonCModule object.
  //
  rpc AsCommonCModule(DllModule_AsCommonCModuleRequest) returns (DllModule_AsCommonCModuleResponse);
  
  
  // Method: Execute
  //
  // Use this method to call a DLL module function directly without using a step, sequence, or execution.
  //
  // When you call a DLL module function using this method you can evaluate the parameter expressions to determine the argument values or specify the argument values directly using a DllArguments collection.
  // To use the parameter value expressions, pass a valid SequenceContext object to the sequenceContextParam to use to evaluate the CommonCParameter.ValueExpr expressions.
  // To pass specific argument values, use the DllParameters.NewArguments method to create a collection of DllArgument objects and set the DllArgument.Value property on each item in the collection.
  //
  // DllModule_ExecuteRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DllModuleInstance - The id of the DllModule object.
  //    - sequenceContextParam: SequenceContextInstance - Specifies the SequenceContext object that this method uses to evaluate each of the CommonCParameter.ValueExpr expressions in the module parameters. Pass NULL for this parameter if you pass a DllArguments collection to the argumentsParam parameter.
  //    - argumentsParam: DllArgumentsInstance - Specifies the argument collection that contains the argument values to pass to the function. Pass NULL for this parameter to pass the values obtained from evaluating each of the CommonCParameter.ValueExpr expressions in the module parameters.
  //
  // DllModule_ExecuteResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Execute(DllModule_ExecuteRequest) returns (DllModule_ExecuteResponse);
  
  

  // Property: Parameters
  //
  // Returns the DllParameters collection that contains a list of the current parameters used as inputs and outputs of the corresponding module.
  //
  // If you need to add or modify a parameter, you must first obtain the DllParameters collection.
  //
  // DllModule_Get_ParametersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllModuleInstance - The id of the DllModule object.
  //
  // DllModule_Get_ParametersResponse - The response message from the server. It provides the return value.
  //    - returnValue: DllParametersInstance - Returns the DllParameters collection that contains a list of the current parameters used as inputs and outputs of the corresponding module. 
  //
  rpc Get_Parameters(DllModule_Get_ParametersRequest) returns (DllModule_Get_ParametersResponse);
  
  
  // Property: CodeCreationTarget
  //
  // Specifies where the module creates and edits code.
  //
  // DllModule_Set_CodeCreationTargetRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllModuleInstance - The id of the DllModule object.
  //    - val: DllCodeCreationTargets - Specifies where the module creates and edits code. 
  //
  // DllModule_Set_CodeCreationTargetResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DllModule_Get_CodeCreationTargetRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllModuleInstance - The id of the DllModule object.
  //
  // DllModule_Get_CodeCreationTargetResponse - The response message from the server. It provides the return value.
  //    - returnValue: DllCodeCreationTargets - Specifies where the module creates and edits code. 
  //
  rpc Set_CodeCreationTarget(DllModule_Set_CodeCreationTargetRequest) returns (DllModule_Set_CodeCreationTargetResponse);
  rpc Get_CodeCreationTarget(DllModule_Get_CodeCreationTargetRequest) returns (DllModule_Get_CodeCreationTargetResponse);
  
  
}
message DllArgumentsInstance {
  // Specifies the handle of the DllArguments instance in the server.
  string id = 1;
}

message DllParametersInstance {
  // Specifies the handle of the DllParameters instance in the server.
  string id = 1;
}
message DllModule_AsCommonCModuleRequest {
  // The id of the DllModule object.
  DllModuleInstance instance = 1;
}

message DllModule_AsCommonCModuleResponse {
  // The return type of the CommonCModule object.
  CommonCModuleInstance returnValue = 1;
}

message DllModule_ExecuteRequest {
  // The id of the DllModule object.
  DllModuleInstance instance = 1;
  // Specifies the SequenceContext object that this method uses to evaluate each of the CommonCParameter.ValueExpr expressions in the module parameters. Pass NULL for this parameter if you pass a DllArguments collection to the argumentsParam parameter.
  SequenceContextInstance sequenceContextParam = 2;
  // Specifies the argument collection that contains the argument values to pass to the function. Pass NULL for this parameter to pass the values obtained from evaluating each of the CommonCParameter.ValueExpr expressions in the module parameters.
  DllArgumentsInstance argumentsParam = 3;
}

message DllModule_ExecuteResponse {
}

message DllModule_Get_ParametersRequest {
  // The id of the DllModule object.
  DllModuleInstance instance = 1;
}

message DllModule_Get_ParametersResponse {
  // Returns the DllParameters collection that contains a list of the current parameters used as inputs and outputs of the corresponding module.
  DllParametersInstance returnValue = 1;
}

message DllModule_Set_CodeCreationTargetRequest {
  // The id of the DllModule object.
  DllModuleInstance instance = 1;
  // Specifies where the module creates and edits code.
  DllCodeCreationTargets val = 2;
}

message DllModule_Set_CodeCreationTargetResponse {
}

message DllModule_Get_CodeCreationTargetRequest {
  // The id of the DllModule object.
  DllModuleInstance instance = 1;
}

message DllModule_Get_CodeCreationTargetResponse {
  // Specifies where the module creates and edits code.
  DllCodeCreationTargets returnValue = 1;
}

// DllParameters
//
// Use objects from the DllParameters class to configure and obtain parameters for a module that uses the C/C++ DLL Adapter. Use the DllModule.Parameters property to obtain the collection of parameters for a module.
//
service DllParameters {
  // Method: New
  //
  // Adds a new parameter to the collection.
  //
  // DllParameters_NewRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DllParametersInstance - The id of the DllParameters object.
  //    - index: int32 - Specifies the zero-based index of where to insert the parameter.
  //    - parameterValueExpr: string - Specifies the argument expression.
  //      If the parameter is an input, this expression corresponds to the value to pass. If the parameter is an output, this expression specifies where TestStand stores the result value.
  //    - parameterCategory: DllParameterCategories - Specifies the parameter category.
  //    - parameterPass: CommonCParameterPassOptions - Specifies how to pass the value specified in the argument expression property, CommonCParameter.ValueExpr, to the specific function and sets the CommonCParameter.Pass property.
  //    - parameterType: CommonCParameterTypes - Specifies the parameter type.
  //
  // DllParameters_NewResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc New(DllParameters_NewRequest) returns (DllParameters_NewResponse);
  
  
  // Method: Delete
  //
  // Removes the DllParameter object located at the specified index.
  //
  // DllParameters_DeleteRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DllParametersInstance - The id of the DllParameters object.
  //    - index: int32 - Specifies the zero-based index of the parameter to delete.
  //
  // DllParameters_DeleteResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Delete(DllParameters_DeleteRequest) returns (DllParameters_DeleteResponse);
  
  
  // Method: Move
  //
  // Moves a DllParameter object within a collection.
  //
  // DllParameters_MoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DllParametersInstance - The id of the DllParameters object.
  //    - index: int32 - Specifies the zero-based index indicating the current position of the parameter to move.
  //    - newIndex: int32 - Specifies the zero-based index indicating the new position of the parameter.
  //
  // DllParameters_MoveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Move(DllParameters_MoveRequest) returns (DllParameters_MoveResponse);
  
  
  // Method: NewArguments
  //
  // Creates and returns a new DllArguments collection. Use this collection to pass argument values to a DLL module function using the DllModule.Execute method.
  //
  // The new collection contains the same number of items as the DllParameters collection.  To pass an argument value to a function parameter, set the DllArgument.Value property on the item in the DllArguments collection that has the same index as the parameter in the DllParameters collection.
  //
  // DllParameters_NewArgumentsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllParametersInstance - The id of the DllParameters object.
  //
  // DllParameters_NewArgumentsResponse - The response message from the server. It provides the return value.
  //    - returnValue: DllArgumentsInstance - The return type of the DllArguments object.
  //
  rpc NewArguments(DllParameters_NewArgumentsRequest) returns (DllParameters_NewArgumentsResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // DllParameters_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DllParametersInstance - The id of the DllParameters object.
  //    - index: int32 - Specifies the zero-based index of the parameter to retrieve.
  //
  // DllParameters_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: DllParameterInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(DllParameters_Get_ItemRequest) returns (DllParameters_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // DllParameters_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllParametersInstance - The id of the DllParameters object.
  //
  // DllParameters_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(DllParameters_Get_CountRequest) returns (DllParameters_Get_CountResponse);
  
  
}
message DllParameterInstance {
  // Specifies the handle of the DllParameter instance in the server.
  string id = 1;
}
message DllParameters_NewRequest {
  // The id of the DllParameters object.
  DllParametersInstance instance = 1;
  // Specifies the zero-based index of where to insert the parameter.
  int32 index = 2;
  // Specifies the name assigned to the new parameter.
  string ParameterName = 3;
  // Specifies the argument expression.
  // If the parameter is an input, this expression corresponds to the value to pass. If the parameter is an output, this expression specifies where TestStand stores the result value.
  string parameterValueExpr = 4;
  // Specifies the parameter category.
  DllParameterCategories parameterCategory = 5;
  // Specifies how to pass the value specified in the argument expression property, CommonCParameter.ValueExpr, to the specific function and sets the CommonCParameter.Pass property.
  CommonCParameterPassOptions parameterPass = 6;
  // Specifies the parameter type.
  CommonCParameterTypes parameterType = 7;
}

message DllParameters_NewResponse {
}

message DllParameters_DeleteRequest {
  // The id of the DllParameters object.
  DllParametersInstance instance = 1;
  // Specifies the zero-based index of the parameter to delete.
  int32 index = 2;
}

message DllParameters_DeleteResponse {
}

message DllParameters_MoveRequest {
  // The id of the DllParameters object.
  DllParametersInstance instance = 1;
  // Specifies the zero-based index indicating the current position of the parameter to move.
  int32 index = 2;
  // Specifies the zero-based index indicating the new position of the parameter.
  int32 newIndex = 3;
}

message DllParameters_MoveResponse {
}

message DllParameters_NewArgumentsRequest {
  // The id of the DllParameters object.
  DllParametersInstance instance = 1;
}

message DllParameters_NewArgumentsResponse {
  // The return type of the DllArguments object.
  DllArgumentsInstance returnValue = 1;
}

message DllParameters_Get_ItemRequest {
  // The id of the DllParameters object.
  DllParametersInstance instance = 1;
  // Specifies the zero-based index of the parameter to retrieve.
  optional int32 index = 2;
}

message DllParameters_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  DllParameterInstance returnValue = 1;
}

message DllParameters_Get_CountRequest {
  // The id of the DllParameters object.
  DllParametersInstance instance = 1;
}

message DllParameters_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// DllParameter
//
// Use objects from the DllParameter class to configure and obtain C/C++ DLL parameter-specific information for an item in the DllParameters collection class.
// To access the properties and methods of the CommonCParameter class, use the DllParameter.AsCommonCParameter method.
//
service DllParameter {
  // Method: AsCommonCParameter
  //
  // Returns the underlying CommonCParameter that represents the DllParameter.
  //
  // Use the CommonCParameter object to access properties and methods common to all parameters derived from this class.
  //
  // DllParameter_AsCommonCParameterRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllParameterInstance - The id of the DllParameter object.
  //
  // DllParameter_AsCommonCParameterResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommonCParameterInstance - The return type of the CommonCParameter object.
  //
  rpc AsCommonCParameter(DllParameter_AsCommonCParameterRequest) returns (DllParameter_AsCommonCParameterResponse);
  
  

  // Property: TSObjectParameterType
  //
  // Use the TS Object category to pass TestStand objects to DLL functions that use the Microsoft Visual Studio #import classes. Use the #import statement in Visual Studio to access the TestStand API and to define C++ classes. When you select the TS object category for the parameter, this property specifies the name of the object you pass to the function.
  //
  // Ensure that the DLL function does not call the Release COM method on the object passed in.
  //
  // DllParameter_Set_TSObjectParameterTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllParameterInstance - The id of the DllParameter object.
  //    - propertyValue: string - Use the TS Object category to pass TestStand objects to DLL functions that use the Microsoft Visual Studio #import classes. Use the #import statement in Visual Studio to access the TestStand API and to define C++ classes. When you select the TS object category for the parameter, this property specifies the name of the object you pass to the function. 
  //
  // DllParameter_Set_TSObjectParameterTypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DllParameter_Get_TSObjectParameterTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllParameterInstance - The id of the DllParameter object.
  //
  // DllParameter_Get_TSObjectParameterTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Use the TS Object category to pass TestStand objects to DLL functions that use the Microsoft Visual Studio #import classes. Use the #import statement in Visual Studio to access the TestStand API and to define C++ classes. When you select the TS object category for the parameter, this property specifies the name of the object you pass to the function. 
  //
  rpc Set_TSObjectParameterType(DllParameter_Set_TSObjectParameterTypeRequest) returns (DllParameter_Set_TSObjectParameterTypeResponse);
  rpc Get_TSObjectParameterType(DllParameter_Get_TSObjectParameterTypeRequest) returns (DllParameter_Get_TSObjectParameterTypeResponse);
  
  
  // Property: Category
  //
  // Returns the category of the parameter.
  //
  // DllParameter_Set_CategoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllParameterInstance - The id of the DllParameter object.
  //    - propertyValue: DllParameterCategories - Returns the category of the parameter. 
  //
  // DllParameter_Set_CategoryResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DllParameter_Get_CategoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllParameterInstance - The id of the DllParameter object.
  //
  // DllParameter_Get_CategoryResponse - The response message from the server. It provides the return value.
  //    - returnValue: DllParameterCategories - Returns the category of the parameter. 
  //
  rpc Set_Category(DllParameter_Set_CategoryRequest) returns (DllParameter_Set_CategoryResponse);
  rpc Get_Category(DllParameter_Get_CategoryRequest) returns (DllParameter_Get_CategoryResponse);
  
  
  // Property: Type
  //
  // Specifies the type of parameter.
  //
  // The parameter category depends on the parameter type. Be sure to select the correct category before selecting the type.
  //
  // DllParameter_Set_TypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllParameterInstance - The id of the DllParameter object.
  //    - propertyValue: CommonCParameterTypes - Specifies the type of parameter. 
  //
  // DllParameter_Set_TypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DllParameter_Get_TypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllParameterInstance - The id of the DllParameter object.
  //
  // DllParameter_Get_TypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommonCParameterTypes - Specifies the type of parameter. 
  //
  rpc Set_Type(DllParameter_Set_TypeRequest) returns (DllParameter_Set_TypeResponse);
  rpc Get_Type(DllParameter_Get_TypeRequest) returns (DllParameter_Get_TypeResponse);
  
  
  // Property: ImaginaryPartValueExpr
  //
  // Specifies the argument expression for the imaginary part of a DllParamCategory_CNiComplex or DllParamCategory_CNiComplexVector parameter.
  //
  // Parameters using the DllParamCategory_CNiComplexVector type and the DllParamCategory_CNiComplex type take two argument expressions: one for the real part and one for the imaginary part. The argument expression for the real part is stored in the CommonCParameter.ValueExpr property. The imaginary part argument expression is stored in this property.
  //
  // DllParameter_Set_ImaginaryPartValueExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllParameterInstance - The id of the DllParameter object.
  //    - propertyValue: string - Specifies the argument expression for the imaginary part of a DllParamCategory_CNiComplex or DllParamCategory_CNiComplexVector parameter. 
  //
  // DllParameter_Set_ImaginaryPartValueExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DllParameter_Get_ImaginaryPartValueExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllParameterInstance - The id of the DllParameter object.
  //
  // DllParameter_Get_ImaginaryPartValueExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the argument expression for the imaginary part of a DllParamCategory_CNiComplex or DllParamCategory_CNiComplexVector parameter. 
  //
  rpc Set_ImaginaryPartValueExpr(DllParameter_Set_ImaginaryPartValueExprRequest) returns (DllParameter_Set_ImaginaryPartValueExprResponse);
  rpc Get_ImaginaryPartValueExpr(DllParameter_Get_ImaginaryPartValueExprRequest) returns (DllParameter_Get_ImaginaryPartValueExprResponse);
  
  
}
message DllParameter_AsCommonCParameterRequest {
  // The id of the DllParameter object.
  DllParameterInstance instance = 1;
}

message DllParameter_AsCommonCParameterResponse {
  // The return type of the CommonCParameter object.
  CommonCParameterInstance returnValue = 1;
}

message DllParameter_Set_TSObjectParameterTypeRequest {
  // The id of the DllParameter object.
  DllParameterInstance instance = 1;
  // Use the TS Object category to pass TestStand objects to DLL functions that use the Microsoft Visual Studio #import classes. Use the #import statement in Visual Studio to access the TestStand API and to define C++ classes. When you select the TS object category for the parameter, this property specifies the name of the object you pass to the function.
  string propertyValue = 2;
}

message DllParameter_Set_TSObjectParameterTypeResponse {
}

message DllParameter_Get_TSObjectParameterTypeRequest {
  // The id of the DllParameter object.
  DllParameterInstance instance = 1;
}

message DllParameter_Get_TSObjectParameterTypeResponse {
  // Use the TS Object category to pass TestStand objects to DLL functions that use the Microsoft Visual Studio #import classes. Use the #import statement in Visual Studio to access the TestStand API and to define C++ classes. When you select the TS object category for the parameter, this property specifies the name of the object you pass to the function.
  string returnValue = 1;
}

message DllParameter_Set_CategoryRequest {
  // The id of the DllParameter object.
  DllParameterInstance instance = 1;
  // Returns the category of the parameter.
  DllParameterCategories propertyValue = 2;
}

message DllParameter_Set_CategoryResponse {
}

message DllParameter_Get_CategoryRequest {
  // The id of the DllParameter object.
  DllParameterInstance instance = 1;
}

message DllParameter_Get_CategoryResponse {
  // Returns the category of the parameter.
  DllParameterCategories returnValue = 1;
}

message DllParameter_Set_TypeRequest {
  // The id of the DllParameter object.
  DllParameterInstance instance = 1;
  // Specifies the type of parameter.
  CommonCParameterTypes propertyValue = 2;
}

message DllParameter_Set_TypeResponse {
}

message DllParameter_Get_TypeRequest {
  // The id of the DllParameter object.
  DllParameterInstance instance = 1;
}

message DllParameter_Get_TypeResponse {
  // Specifies the type of parameter.
  CommonCParameterTypes returnValue = 1;
}

message DllParameter_Set_ImaginaryPartValueExprRequest {
  // The id of the DllParameter object.
  DllParameterInstance instance = 1;
  // Specifies the argument expression for the imaginary part of a DllParamCategory_CNiComplex or DllParamCategory_CNiComplexVector parameter.
  string propertyValue = 2;
}

message DllParameter_Set_ImaginaryPartValueExprResponse {
}

message DllParameter_Get_ImaginaryPartValueExprRequest {
  // The id of the DllParameter object.
  DllParameterInstance instance = 1;
}

message DllParameter_Get_ImaginaryPartValueExprResponse {
  // Specifies the argument expression for the imaginary part of a DllParamCategory_CNiComplex or DllParamCategory_CNiComplexVector parameter.
  string returnValue = 1;
}

// DllArguments
//
// Use objects from the DllArguments class to pass specific argument values to a DLL module function using the DllModule.Execute method. Use the DllParameters.NewArguments method to create a new arguments collection.
//
service DllArguments {
  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // DllArguments_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DllArgumentsInstance - The id of the DllArguments object.
  //    - index: int32 - Specifies the zero-based index of the item to retrieve. An argument at a specific index in the DllArguments collection corresponds to the parameter at the same index in the DllParameters collection that you used to create the DllArguments collection.
  //
  // DllArguments_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: DllArgumentInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(DllArguments_Get_ItemRequest) returns (DllArguments_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // DllArguments_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllArgumentsInstance - The id of the DllArguments object.
  //
  // DllArguments_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(DllArguments_Get_CountRequest) returns (DllArguments_Get_CountResponse);
  
  
}
message DllArgumentInstance {
  // Specifies the handle of the DllArgument instance in the server.
  string id = 1;
}
message DllArguments_Get_ItemRequest {
  // The id of the DllArguments object.
  DllArgumentsInstance instance = 1;
  // Specifies the zero-based index of the item to retrieve. An argument at a specific index in the DllArguments collection corresponds to the parameter at the same index in the DllParameters collection that you used to create the DllArguments collection.
  optional int32 index = 2;
}

message DllArguments_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  DllArgumentInstance returnValue = 1;
}

message DllArguments_Get_CountRequest {
  // The id of the DllArguments object.
  DllArgumentsInstance instance = 1;
}

message DllArguments_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// DllArgument
//
// Use objects from the DllArgument class to set the argument value to pass to a DLL module function using the DllModule.Execute method.
//
service DllArgument {
  // Property: Value
  //
  // Specifies the argument value to pass for the corresponding parameter.
  //
  // When you pass a DllArguments collection to the DllModule.Execute function, the adapter passes this property to the function instead of evaluating the CommonCParameter.ValueExpr expression.
  //
  // DllArgument_Set_ValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllArgumentInstance - The id of the DllArgument object.
  //    - propertyValue: PropertyObjectInstance - Specifies the argument value to pass for the corresponding parameter. 
  //
  // DllArgument_Set_ValueResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DllArgument_Get_ValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllArgumentInstance - The id of the DllArgument object.
  //
  // DllArgument_Get_ValueResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Specifies the argument value to pass for the corresponding parameter. 
  //
  rpc Set_Value(DllArgument_Set_ValueRequest) returns (DllArgument_Set_ValueResponse);
  rpc Get_Value(DllArgument_Get_ValueRequest) returns (DllArgument_Get_ValueResponse);
  
  
  // Property: ImaginaryPartValue
  //
  // Specifies the argument value for to pass for the imaginary part of a DllParamCategory_CNiComplex or DllParamCategory_CNiComplexVector parameter.
  //
  // DllArgument_Set_ImaginaryPartValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllArgumentInstance - The id of the DllArgument object.
  //    - propertyValue: PropertyObjectInstance - Specifies the argument value for to pass for the imaginary part of a DllParamCategory_CNiComplex or DllParamCategory_CNiComplexVector parameter. 
  //
  // DllArgument_Set_ImaginaryPartValueResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DllArgument_Get_ImaginaryPartValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DllArgumentInstance - The id of the DllArgument object.
  //
  // DllArgument_Get_ImaginaryPartValueResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Specifies the argument value for to pass for the imaginary part of a DllParamCategory_CNiComplex or DllParamCategory_CNiComplexVector parameter. 
  //
  rpc Set_ImaginaryPartValue(DllArgument_Set_ImaginaryPartValueRequest) returns (DllArgument_Set_ImaginaryPartValueResponse);
  rpc Get_ImaginaryPartValue(DllArgument_Get_ImaginaryPartValueRequest) returns (DllArgument_Get_ImaginaryPartValueResponse);
  
  
}
message DllArgument_Set_ValueRequest {
  // The id of the DllArgument object.
  DllArgumentInstance instance = 1;
  // Specifies the argument value to pass for the corresponding parameter.
  PropertyObjectInstance propertyValue = 2;
}

message DllArgument_Set_ValueResponse {
}

message DllArgument_Get_ValueRequest {
  // The id of the DllArgument object.
  DllArgumentInstance instance = 1;
}

message DllArgument_Get_ValueResponse {
  // Specifies the argument value to pass for the corresponding parameter.
  PropertyObjectInstance returnValue = 1;
}

message DllArgument_Set_ImaginaryPartValueRequest {
  // The id of the DllArgument object.
  DllArgumentInstance instance = 1;
  // Specifies the argument value for to pass for the imaginary part of a DllParamCategory_CNiComplex or DllParamCategory_CNiComplexVector parameter.
  PropertyObjectInstance propertyValue = 2;
}

message DllArgument_Set_ImaginaryPartValueResponse {
}

message DllArgument_Get_ImaginaryPartValueRequest {
  // The id of the DllArgument object.
  DllArgumentInstance instance = 1;
}

message DllArgument_Get_ImaginaryPartValueResponse {
  // Specifies the argument value for to pass for the imaginary part of a DllParamCategory_CNiComplex or DllParamCategory_CNiComplexVector parameter.
  PropertyObjectInstance returnValue = 1;
}

// LabVIEWAdapter
//
// Use objects from the LabVIEW Adapter class to configure and obtain LabVIEW Adapter-specific information about the module adapter. Call the Engine.GetAdapter or Engine.GetAdapterByKeyName method to obtain a reference to the adapter object.
// To access the properties and methods of the Adapter class, use the LabVIEWAdapter.AsAdapter method to obtain an object.
//
service LabVIEWAdapter {
  // Method: AsAdapter
  //
  // Returns the underlying module Adapter object that represents the LabVIEWAdapter object.
  //
  // Use the underlying module Adapter object to access properties and methods that are common to all adapters.
  //
  // LabVIEWAdapter_AsAdapterRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //
  // LabVIEWAdapter_AsAdapterResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdapterInstance - The return type of the Adapter object.
  //
  rpc AsAdapter(LabVIEWAdapter_AsAdapterRequest) returns (LabVIEWAdapter_AsAdapterResponse);
  
  
  // Method: GetServerInfo
  //
  // Returns information about the LabVIEW server that the LabVIEW Adapter is currently configured to use for running VIs. Returns AutoDetect when you select the Autodetect using VI version option in the Select or Type Which LabVIEW Server to Use section of the LabVIEW Adapter Configuration dialog box.
  //
  // The LabVIEW Adapter uses a LabVIEW ActiveX Automation server or a LabVIEW Run-Time Engine.
  //
  // LabVIEWAdapter_GetServerInfoRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //
  // LabVIEWAdapter_GetServerInfoResponse - The response message from the server. It provides the output parameters.
  //    - serverType: LabVIEWServerType - Returns the LabVIEW server that the LabVIEW Adapter currently uses. 
  //      - "LabVIEW" - TestStand is using the active version of LabVIEW.
  //      - The progID for a LabVIEW ActiveX server.
  //      - The path to a LabVIEW Runtime (lvrt.dll).
  //      - "AutoDetect" - TestStand is using the LabVIEW Runtime that corresponds to the saved version of a VI.
  //    - serverInformation: strin - Returns the progID of the LabVIEW ActiveX server or the path of the LabVIEW Run-Time Engine that the adapter is currently using.
  //
  rpc GetServerInfo(LabVIEWAdapter_GetServerInfoRequest) returns (LabVIEWAdapter_GetServerInfoResponse);
  
  
  // Method: SetServerInfo
  //
  // Specifies which LabVIEW server the LabVIEW Adapter uses to run VIs.
  //
  // You can specify the LabVIEW ADE, a LabVIEW ActiveX server, a LabVIEW Runtime, or instruct TestStand to automatically use the LabVIEW Runtime that corresponds to the saved version of the VI. The LabVIEW Adapter uses either a LabVIEW ActiveX Automation server or a supported LabVIEW Run-Time Engine to run VIs. If you specify an ActiveX server, it can be either a supported LabVIEW development environment or a supported version of a LabVIEW-built application that has enabled the LabVIEW ActiveX server. Refer to the NI TestStand Release Notes for more information about the versions of LabVIEW TestStand supports.
  //
  // LabVIEWAdapter_SetServerInfoRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - serverType: LabVIEWServerTypes - Specifies the type of LabVIEW server—either a LabVIEW ActiveX server or a LabVIEW Run-Time Engine.
  //    - serverInformation: string - Identifies the LabVIEW server that the LabVIEW Adapter currently uses. - "LabVIEW" to instruct TestStand to use the active version of LabVIEW.
  //      - The progID for the LabVIEW ActiveX servers.
  //      - The path to the LabVIEW Runtime (lvrt.dll).
  //      - "AutoDetect" to instruct TestStand to use the LabVIEW Runtime that corresponds to the saved version of a VI.
  //
  // LabVIEWAdapter_SetServerInfoResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetServerInfo(LabVIEWAdapter_SetServerInfoRequest) returns (LabVIEWAdapter_SetServerInfoResponse);
  
  
  // Method: GetClusterPassingEnabled
  //
  // Returns a value that indicates whether a type definition allows the LabVIEW Adapter to pass instances of the type as cluster parameters to VIs.
  //
  // LabVIEWAdapter_GetClusterPassingEnabledRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the property object is not a type definition.
  //
  // LabVIEWAdapter_GetClusterPassingEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc GetClusterPassingEnabled(LabVIEWAdapter_GetClusterPassingEnabledRequest) returns (LabVIEWAdapter_GetClusterPassingEnabledResponse);
  
  
  // Method: SetClusterPassingEnabled
  //
  // Specifies whether a type definition allows the LabVIEW Adapter to pass instances of the type as cluster parameters to VIs.
  //
  // LabVIEWAdapter_SetClusterPassingEnabledRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the property object is not a type definition.
  //    - clusterPassingEnabled: bool - Specifies whether cluster passing is enabled.
  //
  // LabVIEWAdapter_SetClusterPassingEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetClusterPassingEnabled(LabVIEWAdapter_SetClusterPassingEnabledRequest) returns (LabVIEWAdapter_SetClusterPassingEnabledResponse);
  
  
  // Method: GetExcludeFromCluster
  //
  // Returns a value that indicates whether the specified type definition property is excluded when converting instances of the type definition into clusters to pass as parameters to VIs.
  //
  // LabVIEWAdapter_GetExcludeFromClusterRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the property object is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //
  // LabVIEWAdapter_GetExcludeFromClusterResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc GetExcludeFromCluster(LabVIEWAdapter_GetExcludeFromClusterRequest) returns (LabVIEWAdapter_GetExcludeFromClusterResponse);
  
  
  // Method: SetExcludeFromCluster
  //
  // Specifies whether the specified type definition property is excluded when converting instances of the type definition into clusters to pass as parameters to VIs.
  //
  // LabVIEWAdapter_SetExcludeFromClusterRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the property object is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //    - excludeFromCluster: bool - Pass True to exclude the corresponding property. Otherwise, set this parameter to False.
  //
  // LabVIEWAdapter_SetExcludeFromClusterResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetExcludeFromCluster(LabVIEWAdapter_SetExcludeFromClusterRequest) returns (LabVIEWAdapter_SetExcludeFromClusterResponse);
  
  
  // Method: GetClusterMemberLabel
  //
  // Returns the label of the cluster member that corresponds to the specified type definition property.
  //
  // LabVIEWAdapter_GetClusterMemberLabelRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the property object is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the type definition.
  //
  // LabVIEWAdapter_GetClusterMemberLabelResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetClusterMemberLabel(LabVIEWAdapter_GetClusterMemberLabelRequest) returns (LabVIEWAdapter_GetClusterMemberLabelResponse);
  
  
  // Method: SetClusterMemberLabel
  //
  // Specifies the label of the cluster member that corresponds to the specified type definition property.
  //
  // LabVIEWAdapter_SetClusterMemberLabelRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the property object is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //    - clusterMemberLabel: string - Specifies the label of the cluster member.
  //
  // LabVIEWAdapter_SetClusterMemberLabelResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetClusterMemberLabel(LabVIEWAdapter_SetClusterMemberLabelRequest) returns (LabVIEWAdapter_SetClusterMemberLabelResponse);
  
  
  // Method: DeployProjectLibrary
  //
  // Deploys or undeploys the shared variables defined in a LabVIEW project library file to the specified remote computer.
  //
  // TestStand can deploy a shared variable bound to another shared variable only when you use an NI Publish-Subscribe Protocol (NI-PSP) URL to bind the shared variable to deploy to another shared variable. If you attempt to use a Deploy Library step to deploy a shared variable to a variable in a LabVIEW project, the deployment fails. Refer to the LabVIEW Help for more information about deploying shared variables and NI-PSP URLs.
  //
  // LabVIEWAdapter_DeployProjectLibraryRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - targetIPAddress: string - Specifies the remote computer.  Leave this option empty to use the local computer.
  //    - libraryPath: string - Specifies the path to the project library file on the local computer to deploy or undeploy.
  //      Note: The library must only define shared variables and cannot contain any VI files.
  //    - options: DeployProjectLibraryOptions - Specifies whether to deploy or undeploy the LabVIEW project library file.
  //
  // LabVIEWAdapter_DeployProjectLibraryResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc DeployProjectLibrary(LabVIEWAdapter_DeployProjectLibraryRequest) returns (LabVIEWAdapter_DeployProjectLibraryResponse);
  
  
  // Method: CheckRemoteSystemStatus
  //
  // Returns a value that indicates whether a remote system is running LabVIEW and allows TestStand to connect to it. This is particularly useful on a real-time system.
  //
  // LabVIEWAdapter_CheckRemoteSystemStatusRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - targetIPAddress: string - Specifies the remote computer. Leave this option empty to use the local computer.
  //    - portNumber: int32 - Specifies the TCP/IP port number to use to connect to the remote system. 
  //    - timeout: int32 - Specifies the time, in milliseconds, to wait for a connection before timing out. A value of -1 indicates to wait indefinitely.
  //
  // LabVIEWAdapter_CheckRemoteSystemStatusResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - The return type of the Boolean object.
  //    - statusMessage: strin - Returns any error messages generated while checking system status.
  //
  rpc CheckRemoteSystemStatus(LabVIEWAdapter_CheckRemoteSystemStatusRequest) returns (LabVIEWAdapter_CheckRemoteSystemStatusResponse);
  
  
  // Method: Initialize
  //
  // Initializes the LabVIEW Adapter by connecting to the configured LabVIEW server.
  //
  // If you do not call this method, the LabVIEW Adapter connects to the configured LabVIEW server when first needed.
  //
  // LabVIEWAdapter_InitializeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //
  // LabVIEWAdapter_InitializeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Initialize(LabVIEWAdapter_InitializeRequest) returns (LabVIEWAdapter_InitializeResponse);
  
  
  // Method: GetVIVersion
  //
  // Returns the LabVIEW version that saved the specified VI. The version contains only the major and minor version numbers, such as "8.2".
  //
  // LabVIEWAdapter_GetVIVersionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //
  // LabVIEWAdapter_GetVIVersionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetVIVersion(LabVIEWAdapter_GetVIVersionRequest) returns (LabVIEWAdapter_GetVIVersionResponse);
  
  
  // Method: GetExpressVIMenuStructure
  //
  // Returns a PropertyObject array that specifies the structure of the Express VI menu TestStand uses to select an Express VI.
  //
  // TestStand uses this method to create the context menu that becomes visible when you browse for an Express VI in the LabVIEW Module pane. Each element of the array is a PropertyObject container with subproperties that specify the menu name, the path to the Express VI, and the icon for the menu.
  //
  // LabVIEWAdapter_GetExpressVIMenuStructureRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - refreshMenu: bool - Specifies whether to force TestStand to rebuild the Express VI menu. TestStand caches the menu and only rebuilds the menu when you configure the LabVIEW Adapter to use a different LabVIEW version. TestStand does not automatically refresh the menu when you select a different function palette view in LabVIEW.
  //    - parentHWnd: int32 - Specifies the parent window handle TestStand uses for the progress window the method might display.
  //
  // LabVIEWAdapter_GetExpressVIMenuStructureResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc GetExpressVIMenuStructure(LabVIEWAdapter_GetExpressVIMenuStructureRequest) returns (LabVIEWAdapter_GetExpressVIMenuStructureResponse);
  
  
  // Method: IsExpressVI
  //
  // Returns a value that indicates whether the specified VI is an Express VI.
  //
  // Use the absolute path to the Express VI.
  //
  // LabVIEWAdapter_IsExpressVIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //
  // LabVIEWAdapter_IsExpressVIResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - The return type of the Boolean object.
  //    - displayVIName: strin - Returns the display name of the Express VI.  If the VI is not an Express VI, the method returns an empty string.
  //
  rpc IsExpressVI(LabVIEWAdapter_IsExpressVIRequest) returns (LabVIEWAdapter_IsExpressVIResponse);
  
  
  // Method: FileExistsInLLB
  //
  // Returns a value that indicates whether the given file exists in an LLB file.
  //
  // The Engine.FindFileEx method does not search LLB files. Use this method whenever Engine.FindFileEx fails to find a VI.
  //
  // LabVIEWAdapter_FileExistsInLLBRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //
  // LabVIEWAdapter_FileExistsInLLBResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc FileExistsInLLB(LabVIEWAdapter_FileExistsInLLBRequest) returns (LabVIEWAdapter_FileExistsInLLBResponse);
  
  
  // Method: GetClusterMemberIsBinaryString
  //
  // Returns True if the cluster member that corresponds to the specified type definition property contains binary data.
  //
  // TestStand preserves NUL bytes when setting and getting LabVIEW string data for binary strings.
  //
  // LabVIEWAdapter_GetClusterMemberIsBinaryStringRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the property object is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //
  // LabVIEWAdapter_GetClusterMemberIsBinaryStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc GetClusterMemberIsBinaryString(LabVIEWAdapter_GetClusterMemberIsBinaryStringRequest) returns (LabVIEWAdapter_GetClusterMemberIsBinaryStringResponse);
  
  
  // Method: SetClusterMemberIsBinaryString
  //
  // Specifies whether the cluster member that corresponds to the specified type definition property contains binary data.
  //
  // TestStand preserves NUL bytes when setting and getting LabVIEW string data for binary strings.
  //
  // LabVIEWAdapter_SetClusterMemberIsBinaryStringRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the property object is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //    - val: bool - Pass True to specify that the cluster member is a binary string.
  //
  // LabVIEWAdapter_SetClusterMemberIsBinaryStringResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetClusterMemberIsBinaryString(LabVIEWAdapter_SetClusterMemberIsBinaryStringRequest) returns (LabVIEWAdapter_SetClusterMemberIsBinaryStringResponse);
  
  
  // Method: NewModule
  //
  // Creates and returns a new LabVIEWModule object. Use this method to create a LabVIEWModule object that you can use to execute a LabVIEW VI without using a step, sequence, or execution.
  //
  // LabVIEWAdapter_NewModuleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //
  // LabVIEWAdapter_NewModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWModuleInstance - The return type of the LabVIEWModule object.
  //
  rpc NewModule(LabVIEWAdapter_NewModuleRequest) returns (LabVIEWAdapter_NewModuleResponse);
  
  
  // Method: GetMemberNames
  //
  // Returns an array that contains the names for each public member VI found in the specified LabVIEW class.
  //
  // LabVIEWAdapter_GetMemberNamesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - projectAbsolutePath: string - Specifies the absolute path of the LabVIEW project. Pass an empty string if no project exists. 
  //    - classAbsolutePath: string - Specifies the absolute path of the LabVIEW class.
  //
  // LabVIEWAdapter_GetMemberNamesResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated string - The return type of the String[] object.
  //
  rpc GetMemberNames(LabVIEWAdapter_GetMemberNamesRequest) returns (LabVIEWAdapter_GetMemberNamesResponse);
  
  
  // Method: GetVINamespace
  //
  // Returns the LabVIEW namespace of the specified VI. The namespace of the VI is the qualified name of the owning LabVIEW project library.
  //
  // This method requires the LabVIEW 2012 Run-Time Engine or later to be installed. Otherwise, the method returns an empty string.
  //
  // LabVIEWAdapter_GetVINamespaceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //
  // LabVIEWAdapter_GetVINamespaceResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetVINamespace(LabVIEWAdapter_GetVINamespaceRequest) returns (LabVIEWAdapter_GetVINamespaceResponse);
  
  
  // Method: GetNodeLibraries
  //
  // Returns arrays that contain the names, genericTypes, and genericTypeNames for all available LabVIEW node libraries.
  //
  // LabVIEWAdapter_GetNodeLibrariesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //
  // LabVIEWAdapter_GetNodeLibrariesResponse - The response message from the server. It provides the output parameters.
  //    - libraryNames: repeated strin - Specifies the names of the available LabVIEW node libraries.
  //    - genericTypes: repeated strin - Specifies the genericTypes of the available LabVIEW node libraries.
  //    - genericTypeNames: repeated strin - Specifies the genericTypeNames of the available LabVIEW node libraries.
  //
  rpc GetNodeLibraries(LabVIEWAdapter_GetNodeLibrariesRequest) returns (LabVIEWAdapter_GetNodeLibrariesResponse);
  
  
  // Method: GetClassesForNodeLibrary
  //
  // Returns arrays that contain the long names and data names of the classes defined by the LabVIEW node library you specify.
  //
  // LabVIEWAdapter_GetClassesForNodeLibraryRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - libraryName: string - Specifies the name of the LabVIEW node library you select.
  //    - genericType: string - Specifies the genericType of the LabVIEW node library you select.
  //
  // LabVIEWAdapter_GetClassesForNodeLibraryResponse - The response message from the server. It provides the output parameters.
  //    - longNames: repeated strin - Specifies the LongNames of the available properties for the LabVIEW node library class you select.
  //    - dataNames: repeated strin - Specifies the DataNames of the available properties of the LabVIEW node library class you select.
  //
  rpc GetClassesForNodeLibrary(LabVIEWAdapter_GetClassesForNodeLibraryRequest) returns (LabVIEWAdapter_GetClassesForNodeLibraryResponse);
  
  
  // Method: GetPropertiesForNodeClass
  //
  // Returns arrays that contain information about the properties of the LabVIEW node library class you select, such as LongName, ShortName, DataName, HelpDescription, and options.
  //
  // LabVIEWAdapter_GetPropertiesForNodeClassRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - libraryName: string - Specifies the name of the LabVIEW node library you select.
  //    - genericType: string - Specifies the genericType of the LabVIEW node library you select.
  //    - classDataName: string - Specifies the DataName of the LabVIEW node library class you select.
  //
  // LabVIEWAdapter_GetPropertiesForNodeClassResponse - The response message from the server. It provides the output parameters.
  //    - longNames: repeated strin - Specifies the LongNames of the available properties for the LabVIEW node library class you select.
  //    - shortNames: repeated strin - Specifies the ShortNames of the available properties of the LabVIEW node library class you select.
  //    - dataNames: repeated strin - Specifies the DataNames of the available properties of the LabVIEW node library class you select.
  //    - uniqueIDs: repeated strin - Specifies the unique IDs of the available properties for the LabVIEW node library class you select.
  //    - helpDescriptions: repeated strin - Specifies the help descriptions of the available properties of the LabVIEW node library class you select.
  //    - options: repeated int3 - Specifies the options for the available properties of the LabVIEW node library class you select.
  //
  rpc GetPropertiesForNodeClass(LabVIEWAdapter_GetPropertiesForNodeClassRequest) returns (LabVIEWAdapter_GetPropertiesForNodeClassResponse);
  
  
  // Method: DisplayHelpForNodeProperty
  //
  // Launches the LabVIEW Help topic for the property.
  //
  // LabVIEWAdapter_DisplayHelpForNodePropertyRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - libraryName: string - Specifies the name of the LabVIEW node library you select.
  //    - genericType: string - Specifies the genericType of the LabVIEW node library you select.
  //    - classDataName: string - Specifies the Class Data Name of the LabVIEW node property.
  //    - propertyDataName: string - Specifies the Property Data Name of the LabVIEW node property.
  //    - propertyUniqueID: string - Specifies the unique ID of the LabVIEW node property.
  //
  // LabVIEWAdapter_DisplayHelpForNodePropertyResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc DisplayHelpForNodeProperty(LabVIEWAdapter_DisplayHelpForNodePropertyRequest) returns (LabVIEWAdapter_DisplayHelpForNodePropertyResponse);
  
  
  // Method: GetPropertiesForLabVIEWClass
  //
  // Returns arrays that contain information about the properties of the LabVIEW node class you select, such as LongName, ShortName, DataName, HelpDescription, and options.
  //
  // LabVIEWAdapter_GetPropertiesForLabVIEWClassRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - libraryName: string - Specifies the name of the LabVIEW node library you select.
  //    - genericType: string - Specifies the genericType of the LabVIEW node library you select.
  //    - projectAbsolutePath: string - Specifies the absolute path of the LabVIEW project. Pass an empty string if no LabVIEW project exists.
  //    - classAbsolutePath: string - Specifies the absolute path of the LabVIEW node class you select.
  //
  // LabVIEWAdapter_GetPropertiesForLabVIEWClassResponse - The response message from the server. It provides the output parameters.
  //    - classLongName: strin - Specifies the LongName of the LabVIEW node class you select.
  //      
  //    - classDataName: strin - Specifies the DataName of the LabVIEW node library class you select.
  //    - longNames: repeated strin - Specifies the LongNames of the available properties for the LabVIEW node library class you select.
  //    - shortNames: repeated strin - Specifies the ShortNames of the available properties of the LabVIEW node library class you select.
  //    - dataNames: repeated strin - Specifies the DataNames of the available properties of the LabVIEW node library class you select.
  //      
  //    - uniqueIDs: repeated strin - Specifies the unique IDs of the available properties for the LabVIEW node library class you select.
  //    - helpDescriptions: repeated strin - Specifies the help descriptions of the available properties of the LabVIEW node library class you select.
  //    - options: repeated int3 - Specifies the options for the available properties of the LabVIEW node library class you select.
  //
  rpc GetPropertiesForLabVIEWClass(LabVIEWAdapter_GetPropertiesForLabVIEWClassRequest) returns (LabVIEWAdapter_GetPropertiesForLabVIEWClassResponse);
  
  

  // Property: UUTIterationNumberExpression
  //
  // Specifies the expression the LabVIEW Adapter evaluates at run time to generate a value to pass to the UUT # element of the Invocation Information cluster when calling a legacy VI.
  //
  // LabVIEWAdapter_Set_UUTIterationNumberExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - propertyValue: string - Specifies the expression the LabVIEW Adapter evaluates at run time to generate a value to pass to the UUT # element of the Invocation Information cluster when calling a legacy VI. 
  //
  // LabVIEWAdapter_Set_UUTIterationNumberExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWAdapter_Get_UUTIterationNumberExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //
  // LabVIEWAdapter_Get_UUTIterationNumberExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the expression the LabVIEW Adapter evaluates at run time to generate a value to pass to the UUT # element of the Invocation Information cluster when calling a legacy VI. 
  //
  rpc Set_UUTIterationNumberExpression(LabVIEWAdapter_Set_UUTIterationNumberExpressionRequest) returns (LabVIEWAdapter_Set_UUTIterationNumberExpressionResponse);
  rpc Get_UUTIterationNumberExpression(LabVIEWAdapter_Get_UUTIterationNumberExpressionRequest) returns (LabVIEWAdapter_Get_UUTIterationNumberExpressionResponse);
  
  
  // Property: UUTSerialNumberExpression
  //
  // Specifies the expression the LabVIEW Adapter evaluates at run time to generate a value to pass to the UUT Info element of the Invocation Information cluster when calling a legacy VI.
  //
  // LabVIEWAdapter_Set_UUTSerialNumberExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - propertyValue: string - Specifies the expression the LabVIEW Adapter evaluates at run time to generate a value to pass to the UUT Info element of the Invocation Information cluster when calling a legacy VI. 
  //
  // LabVIEWAdapter_Set_UUTSerialNumberExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWAdapter_Get_UUTSerialNumberExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //
  // LabVIEWAdapter_Get_UUTSerialNumberExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the expression the LabVIEW Adapter evaluates at run time to generate a value to pass to the UUT Info element of the Invocation Information cluster when calling a legacy VI. 
  //
  rpc Set_UUTSerialNumberExpression(LabVIEWAdapter_Set_UUTSerialNumberExpressionRequest) returns (LabVIEWAdapter_Set_UUTSerialNumberExpressionResponse);
  rpc Get_UUTSerialNumberExpression(LabVIEWAdapter_Get_UUTSerialNumberExpressionRequest) returns (LabVIEWAdapter_Get_UUTSerialNumberExpressionResponse);
  
  
  // Property: ReserveLoadedVIsForExec
  //
  // Specifies that LabVIEW reserves each VI to run when TestStand loads the VI. This property eliminates the need to use permanent reference VIs for sharing between step modules.
  //
  // When a VI is reserved for execution, references that it creates during execution remain valid until the VI is unreserved. VIs that LabVIEW reserves take less time to call, but you cannot edit them in LabVIEW unless you click the Edit VI button in the Edit LabVIEW VI Call dialog box or select Edit Code from the context menu of the calling step.
  // TestStand unreserves a VI under the following circumstances:
  // * When you select File»Unload All Modules from the File menu.    * When the VI is unloaded based on a sequence file or step unload options.    * When you open a VI for editing from within TestStand.
  // You can create a reference in a VI called by one step in a sequence, use the reference in a VI called by a second step, and close the reference in a third step. For example, you can create a file refnum from Open File, use the reference in Read File or Write File, and close the reference using Close File when you no longer need the reference.
  // If you set the Unload Option for a step that calls a VI to Unload After Step Executes or Unload When Precondition Fails, the LabVIEW references the step creates might be destroyed on completion of the step. If you do not reserve VIs for execution, you can use the permanent reference VIs to maintain LabVIEW references between steps.
  //
  // LabVIEWAdapter_Set_ReserveLoadedVIsForExecRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - propertyValue: bool - Specifies that LabVIEW reserves each VI to run when TestStand loads the VI. This property eliminates the need to use permanent reference VIs for sharing between step modules. 
  //
  // LabVIEWAdapter_Set_ReserveLoadedVIsForExecResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWAdapter_Get_ReserveLoadedVIsForExecRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //
  // LabVIEWAdapter_Get_ReserveLoadedVIsForExecResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies that LabVIEW reserves each VI to run when TestStand loads the VI. This property eliminates the need to use permanent reference VIs for sharing between step modules. 
  //
  rpc Set_ReserveLoadedVIsForExec(LabVIEWAdapter_Set_ReserveLoadedVIsForExecRequest) returns (LabVIEWAdapter_Set_ReserveLoadedVIsForExecResponse);
  rpc Get_ReserveLoadedVIsForExec(LabVIEWAdapter_Get_ReserveLoadedVIsForExecRequest) returns (LabVIEWAdapter_Get_ReserveLoadedVIsForExecResponse);
  
  
  // Property: CodeTemplatePolicy
  //
  // Specifies which code templates to use during code creation. Policies to choose from include using new templates, using legacy templates, or using both new and legacy templates.
  //
  // LabVIEWAdapter_Set_CodeTemplatePolicyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - propertyValue: AdapterCodeTemplatePolicies - Specifies which code templates to use during code creation. Policies to choose from include using new templates, using legacy templates, or using both new and legacy templates. 
  //
  // LabVIEWAdapter_Set_CodeTemplatePolicyResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWAdapter_Get_CodeTemplatePolicyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //
  // LabVIEWAdapter_Get_CodeTemplatePolicyResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdapterCodeTemplatePolicies - Specifies which code templates to use during code creation. Policies to choose from include using new templates, using legacy templates, or using both new and legacy templates. 
  //
  rpc Set_CodeTemplatePolicy(LabVIEWAdapter_Set_CodeTemplatePolicyRequest) returns (LabVIEWAdapter_Set_CodeTemplatePolicyResponse);
  rpc Get_CodeTemplatePolicy(LabVIEWAdapter_Get_CodeTemplatePolicyRequest) returns (LabVIEWAdapter_Get_CodeTemplatePolicyResponse);
  
  
  // Property: IsCurrentLabVIEWServerAnEditor
  //
  // Returns a value that indicates whether the LabVIEW server TestStand is using to run VIs can edit VIs.
  //
  // A LabVIEW server includes a LabVIEW Development Environment, a LabVIEW-created executable that exports the LabVIEW ActiveX Automation server interface, or a LabVIEW Run-Time Engine.
  //
  // LabVIEWAdapter_Get_IsCurrentLabVIEWServerAnEditorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //
  // LabVIEWAdapter_Get_IsCurrentLabVIEWServerAnEditorResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the LabVIEW server TestStand is using to run VIs can edit VIs. 
  //
  rpc Get_IsCurrentLabVIEWServerAnEditor(LabVIEWAdapter_Get_IsCurrentLabVIEWServerAnEditorRequest) returns (LabVIEWAdapter_Get_IsCurrentLabVIEWServerAnEditorResponse);
  
  
  // Property: CurrentLabVIEWServerVersion
  //
  // Returns the version of the LabVIEW server that TestStand is using to run VIs. The version contains only the major and minor version numbers, such as "8.0". Returns AutoDetect when you select the Autodetect using VI version option in the Select or Type Which LabVIEW Server to Use section of the LabVIEW Adapter Configuration dialog box.
  //
  // A LabVIEW server includes a LabVIEW Development Environment, a LabVIEW-created executable that exports the LabVIEW ActiveX Automation server interface, or a LabVIEW Run-Time Engine.
  //
  // LabVIEWAdapter_Get_CurrentLabVIEWServerVersionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //
  // LabVIEWAdapter_Get_CurrentLabVIEWServerVersionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the version of the LabVIEW server that TestStand is using to run VIs. The version contains only the major and minor version numbers, such as "8.0". Returns AutoDetect when you select the Autodetect using VI version option in the Select or Type Which LabVIEW Server to Use section of the LabVIEW Adapter Configuration dialog box. 
  //
  rpc Get_CurrentLabVIEWServerVersion(LabVIEWAdapter_Get_CurrentLabVIEWServerVersionRequest) returns (LabVIEWAdapter_Get_CurrentLabVIEWServerVersionResponse);
  
  
  // Property: AutoDeploySharedVariables
  //
  // Set this property to True for TestStand to deploy shared variables defined in LabVIEW libraries within the LabVIEW projects you use in TestStand. This occurs the first time a loading LabVIEW step references the project.
  //
  // The LabVIEW library to deploy should contain only shared variables.
  // TestStand can deploy a shared variable bound to another shared variable only when you use an NI Publish-Subscribe Protocol (NI-PSP) URL to bind the shared variable to deploy to another shared variable. If you attempt to use a Deploy Library step to deploy a shared variable to a variable in a LabVIEW project, the deployment fails. Refer to the LabVIEW Help for more information about deploying shared variables and NI-PSP URLs.
  //
  // LabVIEWAdapter_Set_AutoDeploySharedVariablesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - propertyValue: bool - Set this property to True for TestStand to deploy shared variables defined in LabVIEW libraries within the LabVIEW projects you use in TestStand. This occurs the first time a loading LabVIEW step references the project. 
  //
  // LabVIEWAdapter_Set_AutoDeploySharedVariablesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWAdapter_Get_AutoDeploySharedVariablesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //
  // LabVIEWAdapter_Get_AutoDeploySharedVariablesResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Set this property to True for TestStand to deploy shared variables defined in LabVIEW libraries within the LabVIEW projects you use in TestStand. This occurs the first time a loading LabVIEW step references the project. 
  //
  rpc Set_AutoDeploySharedVariables(LabVIEWAdapter_Set_AutoDeploySharedVariablesRequest) returns (LabVIEWAdapter_Set_AutoDeploySharedVariablesResponse);
  rpc Get_AutoDeploySharedVariables(LabVIEWAdapter_Get_AutoDeploySharedVariablesRequest) returns (LabVIEWAdapter_Get_AutoDeploySharedVariablesResponse);
  
  
  // Property: AutoUndeploySharedVariables
  //
  // Set this property to True for TestStand to undeploy the shared variables defined in LabVIEW libraries within the LabVIEW project once the last LabVIEW step that references the LabVIEW Project is unloaded.
  //
  // TestStand can deploy a shared variable bound to another shared variable only when you use an NI Publish-Subscribe Protocol (NI-PSP) URL to bind the shared variable to deploy to another shared variable. If you attempt to use a Deploy Library step to deploy a shared variable to a variable in a LabVIEW project, the deployment fails. Refer to the LabVIEW Help for more information about deploying shared variables and NI-PSP URLs.
  //
  // LabVIEWAdapter_Set_AutoUndeploySharedVariablesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - propertyValue: bool - Set this property to True for TestStand to undeploy the shared variables defined in LabVIEW libraries within the LabVIEW project once the last LabVIEW step that references the LabVIEW Project is unloaded. 
  //
  // LabVIEWAdapter_Set_AutoUndeploySharedVariablesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWAdapter_Get_AutoUndeploySharedVariablesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //
  // LabVIEWAdapter_Get_AutoUndeploySharedVariablesResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Set this property to True for TestStand to undeploy the shared variables defined in LabVIEW libraries within the LabVIEW project once the last LabVIEW step that references the LabVIEW Project is unloaded. 
  //
  rpc Set_AutoUndeploySharedVariables(LabVIEWAdapter_Set_AutoUndeploySharedVariablesRequest) returns (LabVIEWAdapter_Set_AutoUndeploySharedVariablesResponse);
  rpc Get_AutoUndeploySharedVariables(LabVIEWAdapter_Get_AutoUndeploySharedVariablesRequest) returns (LabVIEWAdapter_Get_AutoUndeploySharedVariablesResponse);
  
  
  // Property: UseMultipleThreadsWhenExecutingVIsWithRTE
  //
  // Specifies to use multiple LabVIEW execution threads when executing VIs using the LabVIEW Run-Time Engine (RTE).
  // Note: The LabVIEW Adapter uses this property only when executing VIs using the LabVIEW RTE and the preferred execution system of the VIs is same as caller.
  //
  // Changes to this property do not take effect until you restart the TestStand Engine.
  //
  // LabVIEWAdapter_Set_UseMultipleThreadsWhenExecutingVIsWithRTERequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - propertyValue: bool - Specifies to use multiple LabVIEW execution threads when executing VIs using the LabVIEW Run-Time Engine (RTE). Note: The LabVIEW Adapter uses this property only when executing VIs using the LabVIEW RTE and the preferred execution system of the VIs is same as caller. 
  //
  // LabVIEWAdapter_Set_UseMultipleThreadsWhenExecutingVIsWithRTEResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWAdapter_Get_UseMultipleThreadsWhenExecutingVIsWithRTERequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //
  // LabVIEWAdapter_Get_UseMultipleThreadsWhenExecutingVIsWithRTEResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies to use multiple LabVIEW execution threads when executing VIs using the LabVIEW Run-Time Engine (RTE). Note: The LabVIEW Adapter uses this property only when executing VIs using the LabVIEW RTE and the preferred execution system of the VIs is same as caller. 
  //
  rpc Set_UseMultipleThreadsWhenExecutingVIsWithRTE(LabVIEWAdapter_Set_UseMultipleThreadsWhenExecutingVIsWithRTERequest) returns (LabVIEWAdapter_Set_UseMultipleThreadsWhenExecutingVIsWithRTEResponse);
  rpc Get_UseMultipleThreadsWhenExecutingVIsWithRTE(LabVIEWAdapter_Get_UseMultipleThreadsWhenExecutingVIsWithRTERequest) returns (LabVIEWAdapter_Get_UseMultipleThreadsWhenExecutingVIsWithRTEResponse);
  
  
  // Property: NumberOfThreadsUsedWhenExecutingVIsWithRTE
  //
  // Specifies the number of LabVIEW execution threads to use when executing VIs with the LabVIEW Run-Time Engine (RTE).
  // Note: The LabVIEW Adapter uses this property only when executing VIs using the LabVIEW RTE and the preferred execution system of the VIs is same as caller.
  //
  // Changes to this property do not take effect until you restart the TestStand Engine.
  //
  // LabVIEWAdapter_Set_NumberOfThreadsUsedWhenExecutingVIsWithRTERequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - propertyValue: int32 - Specifies the number of LabVIEW execution threads to use when executing VIs with the LabVIEW Run-Time Engine (RTE). Note: The LabVIEW Adapter uses this property only when executing VIs using the LabVIEW RTE and the preferred execution system of the VIs is same as caller. 
  //
  // LabVIEWAdapter_Set_NumberOfThreadsUsedWhenExecutingVIsWithRTEResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWAdapter_Get_NumberOfThreadsUsedWhenExecutingVIsWithRTERequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //
  // LabVIEWAdapter_Get_NumberOfThreadsUsedWhenExecutingVIsWithRTEResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the number of LabVIEW execution threads to use when executing VIs with the LabVIEW Run-Time Engine (RTE). Note: The LabVIEW Adapter uses this property only when executing VIs using the LabVIEW RTE and the preferred execution system of the VIs is same as caller. 
  //
  rpc Set_NumberOfThreadsUsedWhenExecutingVIsWithRTE(LabVIEWAdapter_Set_NumberOfThreadsUsedWhenExecutingVIsWithRTERequest) returns (LabVIEWAdapter_Set_NumberOfThreadsUsedWhenExecutingVIsWithRTEResponse);
  rpc Get_NumberOfThreadsUsedWhenExecutingVIsWithRTE(LabVIEWAdapter_Get_NumberOfThreadsUsedWhenExecutingVIsWithRTERequest) returns (LabVIEWAdapter_Get_NumberOfThreadsUsedWhenExecutingVIsWithRTEResponse);
  
  
  // Property: AdditionalThreadsInheritCallingThreadsCPUAffinity
  //
  // Specifies if the CPU affinity for the additional threads used to execute VIs with the LabVIEW Run-Time Engine (RTE) inherit the CPU affinity of the TestStand execution thread.
  // Note: The LabVIEW Adapter uses this property only when executing VIs using the LabVIEW RTE and the preferred execution system of the VIs is same as caller.
  //
  // Changes to this property do not take effect until you restart the TestStand Engine.
  //
  // LabVIEWAdapter_Set_AdditionalThreadsInheritCallingThreadsCPUAffinityRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - propertyValue: bool - Specifies if the CPU affinity for the additional threads used to execute VIs with the LabVIEW Run-Time Engine (RTE) inherit the CPU affinity of the TestStand execution thread. Note: The LabVIEW Adapter uses this property only when executing VIs using the LabVIEW RTE and the preferred execution system of the VIs is same as caller. 
  //
  // LabVIEWAdapter_Set_AdditionalThreadsInheritCallingThreadsCPUAffinityResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWAdapter_Get_AdditionalThreadsInheritCallingThreadsCPUAffinityRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //
  // LabVIEWAdapter_Get_AdditionalThreadsInheritCallingThreadsCPUAffinityResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if the CPU affinity for the additional threads used to execute VIs with the LabVIEW Run-Time Engine (RTE) inherit the CPU affinity of the TestStand execution thread. Note: The LabVIEW Adapter uses this property only when executing VIs using the LabVIEW RTE and the preferred execution system of the VIs is same as caller. 
  //
  rpc Set_AdditionalThreadsInheritCallingThreadsCPUAffinity(LabVIEWAdapter_Set_AdditionalThreadsInheritCallingThreadsCPUAffinityRequest) returns (LabVIEWAdapter_Set_AdditionalThreadsInheritCallingThreadsCPUAffinityResponse);
  rpc Get_AdditionalThreadsInheritCallingThreadsCPUAffinity(LabVIEWAdapter_Get_AdditionalThreadsInheritCallingThreadsCPUAffinityRequest) returns (LabVIEWAdapter_Get_AdditionalThreadsInheritCallingThreadsCPUAffinityResponse);
  
  
  // Property: LabVIEWDevelopmentEnvironmentBitness
  //
  // Specifies the bitness of the LabVIEW development environment version to use. Options include the current active 32-bit or 64-bit LabVIEW development environment, only the current active 32-bit LabVIEW development environment, or only the current active 64-bit LabVIEW development environment.
  //
  // LabVIEWAdapter_Set_LabVIEWDevelopmentEnvironmentBitnessRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - propertyValue: LabVIEWDevelopmentEnvironmentBitnessOptions - Specifies the bitness of the LabVIEW development environment version to use. Options include the current active 32-bit or 64-bit LabVIEW development environment, only the current active 32-bit LabVIEW development environment, or only the current active 64-bit LabVIEW development environment. 
  //
  // LabVIEWAdapter_Set_LabVIEWDevelopmentEnvironmentBitnessResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWAdapter_Get_LabVIEWDevelopmentEnvironmentBitnessRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //
  // LabVIEWAdapter_Get_LabVIEWDevelopmentEnvironmentBitnessResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWDevelopmentEnvironmentBitnessOptions - Specifies the bitness of the LabVIEW development environment version to use. Options include the current active 32-bit or 64-bit LabVIEW development environment, only the current active 32-bit LabVIEW development environment, or only the current active 64-bit LabVIEW development environment. 
  //
  rpc Set_LabVIEWDevelopmentEnvironmentBitness(LabVIEWAdapter_Set_LabVIEWDevelopmentEnvironmentBitnessRequest) returns (LabVIEWAdapter_Set_LabVIEWDevelopmentEnvironmentBitnessResponse);
  rpc Get_LabVIEWDevelopmentEnvironmentBitness(LabVIEWAdapter_Get_LabVIEWDevelopmentEnvironmentBitnessRequest) returns (LabVIEWAdapter_Get_LabVIEWDevelopmentEnvironmentBitnessResponse);
  
  
  // Property: IsLabVIEWActiveXServerConnectionValid
  //
  // Returns a value that indicates whether the LabVIEW ActiveX server connection TestStand is using is valid.
  //
  // LabVIEWAdapter_Get_IsLabVIEWActiveXServerConnectionValidRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //
  // LabVIEWAdapter_Get_IsLabVIEWActiveXServerConnectionValidResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the LabVIEW ActiveX server connection TestStand is using is valid. 
  //
  rpc Get_IsLabVIEWActiveXServerConnectionValid(LabVIEWAdapter_Get_IsLabVIEWActiveXServerConnectionValidRequest) returns (LabVIEWAdapter_Get_IsLabVIEWActiveXServerConnectionValidResponse);
  
  
  // Property: EnableRTEDebuggingAndTracing
  //
  // Specifies whether LabVIEW Runtime engine (RTE) support for debugging and tracing is enabled.
  //
  // Changes to this property do not take effect until you restart the TestStand engine.
  //
  // LabVIEWAdapter_Set_EnableRTEDebuggingAndTracingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - propertyValue: bool - Specifies whether LabVIEW Runtime engine (RTE) support for debugging and tracing is enabled. 
  //
  // LabVIEWAdapter_Set_EnableRTEDebuggingAndTracingResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWAdapter_Get_EnableRTEDebuggingAndTracingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //
  // LabVIEWAdapter_Get_EnableRTEDebuggingAndTracingResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether LabVIEW Runtime engine (RTE) support for debugging and tracing is enabled. 
  //
  rpc Set_EnableRTEDebuggingAndTracing(LabVIEWAdapter_Set_EnableRTEDebuggingAndTracingRequest) returns (LabVIEWAdapter_Set_EnableRTEDebuggingAndTracingResponse);
  rpc Get_EnableRTEDebuggingAndTracing(LabVIEWAdapter_Get_EnableRTEDebuggingAndTracingRequest) returns (LabVIEWAdapter_Get_EnableRTEDebuggingAndTracingResponse);
  
  
  // Property: EnableVersionIndependentRuntime
  //
  // Specifies whether Version Independent Runtime Engine support is enabled in the LabVIEW Adapter.
  //
  // This option applies to all instances of LabVIEW development environments and LabVIEW runtimes, version 2017 or later, that are used by the TestStand application. Note: You can enable the Enable Version Independent Runtime Engine option only if your machine has LabVIEW or LabVIEW runtime version 2017 or later installed.Note: Changes made to this option do not take effect until you restart the TestStand application.
  //
  // LabVIEWAdapter_Set_EnableVersionIndependentRuntimeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - Value: bool - Specifies whether Version Independent Runtime Engine support is enabled in the LabVIEW Adapter. 
  //
  // LabVIEWAdapter_Set_EnableVersionIndependentRuntimeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWAdapter_Get_EnableVersionIndependentRuntimeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //
  // LabVIEWAdapter_Get_EnableVersionIndependentRuntimeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether Version Independent Runtime Engine support is enabled in the LabVIEW Adapter. 
  //
  rpc Set_EnableVersionIndependentRuntime(LabVIEWAdapter_Set_EnableVersionIndependentRuntimeRequest) returns (LabVIEWAdapter_Set_EnableVersionIndependentRuntimeResponse);
  rpc Get_EnableVersionIndependentRuntime(LabVIEWAdapter_Get_EnableVersionIndependentRuntimeRequest) returns (LabVIEWAdapter_Get_EnableVersionIndependentRuntimeResponse);
  
  
  // Property: OverrideModuleOptions
  //
  // Specifies the global override option to use.
  //
  // LabVIEWAdapter_Set_OverrideModuleOptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - propertyValue: LabVIEWModuleOverrideOptions - Specifies the global override option to use. 
  //
  // LabVIEWAdapter_Set_OverrideModuleOptionsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWAdapter_Get_OverrideModuleOptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //
  // LabVIEWAdapter_Get_OverrideModuleOptionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWModuleOverrideOptions - Specifies the global override option to use. 
  //
  rpc Set_OverrideModuleOptions(LabVIEWAdapter_Set_OverrideModuleOptionsRequest) returns (LabVIEWAdapter_Set_OverrideModuleOptionsResponse);
  rpc Get_OverrideModuleOptions(LabVIEWAdapter_Get_OverrideModuleOptionsRequest) returns (LabVIEWAdapter_Get_OverrideModuleOptionsResponse);
  
  
  // Property: BuildPPLsAtStartOfExecution
  //
  // Specifies whether the LabVIEW Adapter must build the packed project library during execution if the step is configured to use the override settings and the packed project library is missing or out-of-date.
  //
  // This option is available if the LabVIEW development system is installed.
  //
  // LabVIEWAdapter_Set_BuildPPLsAtStartOfExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //    - Value: bool - Specifies whether the LabVIEW Adapter must build the packed project library during execution if the step is configured to use the override settings and the packed project library is missing or out-of-date. 
  //
  // LabVIEWAdapter_Set_BuildPPLsAtStartOfExecutionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWAdapter_Get_BuildPPLsAtStartOfExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //
  // LabVIEWAdapter_Get_BuildPPLsAtStartOfExecutionResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the LabVIEW Adapter must build the packed project library during execution if the step is configured to use the override settings and the packed project library is missing or out-of-date. 
  //
  rpc Set_BuildPPLsAtStartOfExecution(LabVIEWAdapter_Set_BuildPPLsAtStartOfExecutionRequest) returns (LabVIEWAdapter_Set_BuildPPLsAtStartOfExecutionResponse);
  rpc Get_BuildPPLsAtStartOfExecution(LabVIEWAdapter_Get_BuildPPLsAtStartOfExecutionRequest) returns (LabVIEWAdapter_Get_BuildPPLsAtStartOfExecutionResponse);
  
  
  // Property: IsSupportedLabVIEWDevelopmentSystemInstalled
  //
  // Returns True if any supported version of the LabVIEW Development System is installed on the machine.
  //
  // LabVIEWAdapter_Get_IsSupportedLabVIEWDevelopmentSystemInstalledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWAdapterInstance - The id of the LabVIEWAdapter object.
  //
  // LabVIEWAdapter_Get_IsSupportedLabVIEWDevelopmentSystemInstalledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if any supported version of the LabVIEW Development System is installed on the machine. 
  //
  rpc Get_IsSupportedLabVIEWDevelopmentSystemInstalled(LabVIEWAdapter_Get_IsSupportedLabVIEWDevelopmentSystemInstalledRequest) returns (LabVIEWAdapter_Get_IsSupportedLabVIEWDevelopmentSystemInstalledResponse);
  
  
}
message LabVIEWAdapterInstance {
  // Specifies the handle of the LabVIEWAdapter instance in the server.
  string id = 1;
}

message LabVIEWModuleInstance {
  // Specifies the handle of the LabVIEWModule instance in the server.
  string id = 1;
}
message LabVIEWAdapter_AsAdapterRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
}

message LabVIEWAdapter_AsAdapterResponse {
  // The return type of the Adapter object.
  AdapterInstance returnValue = 1;
}

message LabVIEWAdapter_GetServerInfoRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
}

message LabVIEWAdapter_GetServerInfoResponse {
  // Returns the LabVIEW server that the LabVIEW Adapter currently uses.
  // - "LabVIEW" - TestStand is using the active version of LabVIEW.
  // - The progID for a LabVIEW ActiveX server.
  // - The path to a LabVIEW Runtime (lvrt.dll).
  // - "AutoDetect" - TestStand is using the LabVIEW Runtime that corresponds to the saved version of a VI.
  LabVIEWServerTypes serverType = 1;
  // Returns the progID of the LabVIEW ActiveX server or the path of the LabVIEW Run-Time Engine that the adapter is currently using.
  string serverInformation = 2;
}

message LabVIEWAdapter_SetServerInfoRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies the type of LabVIEW server—either a LabVIEW ActiveX server or a LabVIEW Run-Time Engine.
  LabVIEWServerTypes serverType = 2;
  // Identifies the LabVIEW server that the LabVIEW Adapter currently uses. - "LabVIEW" to instruct TestStand to use the active version of LabVIEW.
  // - The progID for the LabVIEW ActiveX servers.
  // - The path to the LabVIEW Runtime (lvrt.dll).
  // - "AutoDetect" to instruct TestStand to use the LabVIEW Runtime that corresponds to the saved version of a VI.
  string serverInformation = 3;
}

message LabVIEWAdapter_SetServerInfoResponse {
}

message LabVIEWAdapter_GetClusterPassingEnabledRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the property object is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
}

message LabVIEWAdapter_GetClusterPassingEnabledResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message LabVIEWAdapter_SetClusterPassingEnabledRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the property object is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies whether cluster passing is enabled.
  bool clusterPassingEnabled = 3;
}

message LabVIEWAdapter_SetClusterPassingEnabledResponse {
}

message LabVIEWAdapter_GetExcludeFromClusterRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the property object is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
}

message LabVIEWAdapter_GetExcludeFromClusterResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message LabVIEWAdapter_SetExcludeFromClusterRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the property object is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
  // Pass True to exclude the corresponding property. Otherwise, set this parameter to False.
  bool excludeFromCluster = 4;
}

message LabVIEWAdapter_SetExcludeFromClusterResponse {
}

message LabVIEWAdapter_GetClusterMemberLabelRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the property object is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the type definition.
  string propertyLookupString = 3;
}

message LabVIEWAdapter_GetClusterMemberLabelResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message LabVIEWAdapter_SetClusterMemberLabelRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the property object is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
  // Specifies the label of the cluster member.
  string clusterMemberLabel = 4;
}

message LabVIEWAdapter_SetClusterMemberLabelResponse {
}

message LabVIEWAdapter_DeployProjectLibraryRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies the remote computer.  Leave this option empty to use the local computer.
  string targetIPAddress = 2;
  // Specifies the path to the project library file on the local computer to deploy or undeploy.
  // Note: The library must only define shared variables and cannot contain any VI files.
  string libraryPath = 3;
  // Specifies whether to deploy or undeploy the LabVIEW project library file.
  DeployProjectLibraryOptions options = 4;
}

message LabVIEWAdapter_DeployProjectLibraryResponse {
}

message LabVIEWAdapter_CheckRemoteSystemStatusRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies the remote computer. Leave this option empty to use the local computer.
  string targetIPAddress = 2;
  // Specifies the TCP/IP port number to use to connect to the remote system.
  int32 portNumber = 3;
  // Specifies the time, in milliseconds, to wait for a connection before timing out. A value of -1 indicates to wait indefinitely.
  int32 timeout = 4;
}

message LabVIEWAdapter_CheckRemoteSystemStatusResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
  // Returns any error messages generated while checking system status.
  string statusMessage = 2;
}

message LabVIEWAdapter_InitializeRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
}

message LabVIEWAdapter_InitializeResponse {
}

message LabVIEWAdapter_GetVIVersionRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies a string containing the absolute pathname of a VI.
  string Path = 2;
}

message LabVIEWAdapter_GetVIVersionResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message LabVIEWAdapter_GetExpressVIMenuStructureRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies whether to force TestStand to rebuild the Express VI menu. TestStand caches the menu and only rebuilds the menu when you configure the LabVIEW Adapter to use a different LabVIEW version. TestStand does not automatically refresh the menu when you select a different function palette view in LabVIEW.
  bool refreshMenu = 2;
  // Specifies the parent window handle TestStand uses for the progress window the method might display.
  int32 parentHWnd = 3;
}

message LabVIEWAdapter_GetExpressVIMenuStructureResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message LabVIEWAdapter_IsExpressVIRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies a string containing the absolute pathname of a VI.
  string Path = 2;
}

message LabVIEWAdapter_IsExpressVIResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
  // Returns the display name of the Express VI.  If the VI is not an Express VI, the method returns an empty string.
  string displayVIName = 2;
}

message LabVIEWAdapter_FileExistsInLLBRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies a string containing the absolute pathname of the VI in the LLB file.
  string Path = 2;
}

message LabVIEWAdapter_FileExistsInLLBResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message LabVIEWAdapter_GetClusterMemberIsBinaryStringRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the property object is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
}

message LabVIEWAdapter_GetClusterMemberIsBinaryStringResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message LabVIEWAdapter_SetClusterMemberIsBinaryStringRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the property object is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
  // Pass True to specify that the cluster member is a binary string.
  bool val = 4;
}

message LabVIEWAdapter_SetClusterMemberIsBinaryStringResponse {
}

message LabVIEWAdapter_NewModuleRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
}

message LabVIEWAdapter_NewModuleResponse {
  // The return type of the LabVIEWModule object.
  LabVIEWModuleInstance returnValue = 1;
}

message LabVIEWAdapter_GetMemberNamesRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies the absolute path of the LabVIEW project. Pass an empty string if no project exists.
  string projectAbsolutePath = 2;
  // Specifies the absolute path of the LabVIEW class.
  string classAbsolutePath = 3;
}

message LabVIEWAdapter_GetMemberNamesResponse {
  // The return type of the String[] object.
  repeated string returnValue = 1;
}

message LabVIEWAdapter_GetVINamespaceRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies a string that contains the absolute pathname of a VI.
  string Path = 2;
}

message LabVIEWAdapter_GetVINamespaceResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message LabVIEWAdapter_GetNodeLibrariesRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
}

message LabVIEWAdapter_GetNodeLibrariesResponse {
  // Specifies the names of the available LabVIEW node libraries.
  repeated string libraryNames = 1;
  // Specifies the genericTypes of the available LabVIEW node libraries.
  repeated string genericTypes = 2;
  // Specifies the genericTypeNames of the available LabVIEW node libraries.
  repeated string genericTypeNames = 3;
}

message LabVIEWAdapter_GetClassesForNodeLibraryRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies the name of the LabVIEW node library you select.
  string libraryName = 2;
  // Specifies the genericType of the LabVIEW node library you select.
  string genericType = 3;
}

message LabVIEWAdapter_GetClassesForNodeLibraryResponse {
  // Specifies the LongNames of the available properties for the LabVIEW node library class you select.
  repeated string longNames = 1;
  // Specifies the DataNames of the available properties of the LabVIEW node library class you select.
  repeated string dataNames = 2;
}

message LabVIEWAdapter_GetPropertiesForNodeClassRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies the name of the LabVIEW node library you select.
  string libraryName = 2;
  // Specifies the genericType of the LabVIEW node library you select.
  string genericType = 3;
  // Specifies the DataName of the LabVIEW node library class you select.
  string classDataName = 4;
}

message LabVIEWAdapter_GetPropertiesForNodeClassResponse {
  // Specifies the LongNames of the available properties for the LabVIEW node library class you select.
  repeated string longNames = 1;
  // Specifies the ShortNames of the available properties of the LabVIEW node library class you select.
  repeated string shortNames = 2;
  // Specifies the DataNames of the available properties of the LabVIEW node library class you select.
  repeated string dataNames = 3;
  // Specifies the unique IDs of the available properties for the LabVIEW node library class you select.
  repeated string uniqueIDs = 4;
  // Specifies the help descriptions of the available properties of the LabVIEW node library class you select.
  repeated string helpDescriptions = 5;
  // Specifies the options for the available properties of the LabVIEW node library class you select.
  repeated int32 options = 6;
}

message LabVIEWAdapter_DisplayHelpForNodePropertyRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies the name of the LabVIEW node library you select.
  string libraryName = 2;
  // Specifies the genericType of the LabVIEW node library you select.
  string genericType = 3;
  // Specifies the Class Data Name of the LabVIEW node property.
  string classDataName = 4;
  // Specifies the Property Data Name of the LabVIEW node property.
  string propertyDataName = 5;
  // Specifies the unique ID of the LabVIEW node property.
  string propertyUniqueID = 6;
}

message LabVIEWAdapter_DisplayHelpForNodePropertyResponse {
}

message LabVIEWAdapter_GetPropertiesForLabVIEWClassRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies the name of the LabVIEW node library you select.
  string libraryName = 2;
  // Specifies the genericType of the LabVIEW node library you select.
  string genericType = 3;
  // Specifies the absolute path of the LabVIEW project. Pass an empty string if no LabVIEW project exists.
  string projectAbsolutePath = 4;
  // Specifies the absolute path of the LabVIEW node class you select.
  string classAbsolutePath = 5;
}

message LabVIEWAdapter_GetPropertiesForLabVIEWClassResponse {
  // Specifies the LongName of the LabVIEW node class you select.
  // 
  string classLongName = 1;
  // Specifies the DataName of the LabVIEW node library class you select.
  string classDataName = 2;
  // Specifies the LongNames of the available properties for the LabVIEW node library class you select.
  repeated string longNames = 3;
  // Specifies the ShortNames of the available properties of the LabVIEW node library class you select.
  repeated string shortNames = 4;
  // Specifies the DataNames of the available properties of the LabVIEW node library class you select.
  // 
  repeated string dataNames = 5;
  // Specifies the unique IDs of the available properties for the LabVIEW node library class you select.
  repeated string uniqueIDs = 6;
  // Specifies the help descriptions of the available properties of the LabVIEW node library class you select.
  repeated string helpDescriptions = 7;
  // Specifies the options for the available properties of the LabVIEW node library class you select.
  repeated int32 options = 8;
}

message LabVIEWAdapter_Set_UUTIterationNumberExpressionRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies the expression the LabVIEW Adapter evaluates at run time to generate a value to pass to the UUT # element of the Invocation Information cluster when calling a legacy VI.
  string propertyValue = 2;
}

message LabVIEWAdapter_Set_UUTIterationNumberExpressionResponse {
}

message LabVIEWAdapter_Get_UUTIterationNumberExpressionRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
}

message LabVIEWAdapter_Get_UUTIterationNumberExpressionResponse {
  // The expression to evaluate at run time.
  string returnValue = 1;
}

message LabVIEWAdapter_Set_UUTSerialNumberExpressionRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies the expression the LabVIEW Adapter evaluates at run time to generate a value to pass to the UUT Info element of the Invocation Information cluster when calling a legacy VI.
  string propertyValue = 2;
}

message LabVIEWAdapter_Set_UUTSerialNumberExpressionResponse {
}

message LabVIEWAdapter_Get_UUTSerialNumberExpressionRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
}

message LabVIEWAdapter_Get_UUTSerialNumberExpressionResponse {
  // The expression to evaluate at run time.
  string returnValue = 1;
}

message LabVIEWAdapter_Set_ReserveLoadedVIsForExecRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies that LabVIEW reserves each VI to run when TestStand loads the VI. This property eliminates the need to use permanent reference VIs for sharing between step modules.
  bool propertyValue = 2;
}

message LabVIEWAdapter_Set_ReserveLoadedVIsForExecResponse {
}

message LabVIEWAdapter_Get_ReserveLoadedVIsForExecRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
}

message LabVIEWAdapter_Get_ReserveLoadedVIsForExecResponse {
  // Specifies that LabVIEW reserves each VI to run when TestStand loads the VI. This property eliminates the need to use permanent reference VIs for sharing between step modules.
  bool returnValue = 1;
}

message LabVIEWAdapter_Set_CodeTemplatePolicyRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies which code templates to use during code creation. Policies to choose from include using new templates, using legacy templates, or using both new and legacy templates.
  AdapterCodeTemplatePolicies propertyValue = 2;
}

message LabVIEWAdapter_Set_CodeTemplatePolicyResponse {
}

message LabVIEWAdapter_Get_CodeTemplatePolicyRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
}

message LabVIEWAdapter_Get_CodeTemplatePolicyResponse {
  // Specifies which code templates to use during code creation. Policies to choose from include using new templates, using legacy templates, or using both new and legacy templates.
  AdapterCodeTemplatePolicies returnValue = 1;
}

message LabVIEWAdapter_Get_IsCurrentLabVIEWServerAnEditorRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
}

message LabVIEWAdapter_Get_IsCurrentLabVIEWServerAnEditorResponse {
  // Returns a value that indicates whether the LabVIEW server TestStand is using to run VIs can edit VIs.
  bool returnValue = 1;
}

message LabVIEWAdapter_Get_CurrentLabVIEWServerVersionRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
}

message LabVIEWAdapter_Get_CurrentLabVIEWServerVersionResponse {
  // Returns the version of the LabVIEW server that TestStand is using to run VIs. The version contains only the major and minor version numbers, such as "8.0". Returns AutoDetect when you select the Autodetect using VI version option in the Select or Type Which LabVIEW Server to Use section of the LabVIEW Adapter Configuration dialog box.
  string returnValue = 1;
}

message LabVIEWAdapter_Set_AutoDeploySharedVariablesRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Set this property to True for TestStand to deploy shared variables defined in LabVIEW libraries within the LabVIEW projects you use in TestStand. This occurs the first time a loading LabVIEW step references the project.
  bool propertyValue = 2;
}

message LabVIEWAdapter_Set_AutoDeploySharedVariablesResponse {
}

message LabVIEWAdapter_Get_AutoDeploySharedVariablesRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
}

message LabVIEWAdapter_Get_AutoDeploySharedVariablesResponse {
  // Set this property to True for TestStand to deploy shared variables defined in LabVIEW libraries within the LabVIEW projects you use in TestStand. This occurs the first time a loading LabVIEW step references the project.
  bool returnValue = 1;
}

message LabVIEWAdapter_Set_AutoUndeploySharedVariablesRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Set this property to True for TestStand to undeploy the shared variables defined in LabVIEW libraries within the LabVIEW project once the last LabVIEW step that references the LabVIEW Project is unloaded.
  bool propertyValue = 2;
}

message LabVIEWAdapter_Set_AutoUndeploySharedVariablesResponse {
}

message LabVIEWAdapter_Get_AutoUndeploySharedVariablesRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
}

message LabVIEWAdapter_Get_AutoUndeploySharedVariablesResponse {
  // Set this property to True for TestStand to undeploy the shared variables defined in LabVIEW libraries within the LabVIEW project once the last LabVIEW step that references the LabVIEW Project is unloaded.
  bool returnValue = 1;
}

message LabVIEWAdapter_Set_UseMultipleThreadsWhenExecutingVIsWithRTERequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies to use multiple LabVIEW execution threads when executing VIs using the LabVIEW Run-Time Engine (RTE).
  // Note: The LabVIEW Adapter uses this property only when executing VIs using the LabVIEW RTE and the preferred execution system of the VIs is same as caller.
  bool propertyValue = 2;
}

message LabVIEWAdapter_Set_UseMultipleThreadsWhenExecutingVIsWithRTEResponse {
}

message LabVIEWAdapter_Get_UseMultipleThreadsWhenExecutingVIsWithRTERequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
}

message LabVIEWAdapter_Get_UseMultipleThreadsWhenExecutingVIsWithRTEResponse {
  // Specifies to use multiple LabVIEW execution threads when executing VIs using the LabVIEW Run-Time Engine (RTE).
  // Note: The LabVIEW Adapter uses this property only when executing VIs using the LabVIEW RTE and the preferred execution system of the VIs is same as caller.
  bool returnValue = 1;
}

message LabVIEWAdapter_Set_NumberOfThreadsUsedWhenExecutingVIsWithRTERequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies the number of LabVIEW execution threads to use when executing VIs with the LabVIEW Run-Time Engine (RTE).
  // Note: The LabVIEW Adapter uses this property only when executing VIs using the LabVIEW RTE and the preferred execution system of the VIs is same as caller.
  int32 propertyValue = 2;
}

message LabVIEWAdapter_Set_NumberOfThreadsUsedWhenExecutingVIsWithRTEResponse {
}

message LabVIEWAdapter_Get_NumberOfThreadsUsedWhenExecutingVIsWithRTERequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
}

message LabVIEWAdapter_Get_NumberOfThreadsUsedWhenExecutingVIsWithRTEResponse {
  // Specifies the number of LabVIEW execution threads to use when executing VIs with the LabVIEW Run-Time Engine (RTE).
  // Note: The LabVIEW Adapter uses this property only when executing VIs using the LabVIEW RTE and the preferred execution system of the VIs is same as caller.
  int32 returnValue = 1;
}

message LabVIEWAdapter_Set_AdditionalThreadsInheritCallingThreadsCPUAffinityRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies if the CPU affinity for the additional threads used to execute VIs with the LabVIEW Run-Time Engine (RTE) inherit the CPU affinity of the TestStand execution thread.
  // Note: The LabVIEW Adapter uses this property only when executing VIs using the LabVIEW RTE and the preferred execution system of the VIs is same as caller.
  bool propertyValue = 2;
}

message LabVIEWAdapter_Set_AdditionalThreadsInheritCallingThreadsCPUAffinityResponse {
}

message LabVIEWAdapter_Get_AdditionalThreadsInheritCallingThreadsCPUAffinityRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
}

message LabVIEWAdapter_Get_AdditionalThreadsInheritCallingThreadsCPUAffinityResponse {
  // Specifies if the CPU affinity for the additional threads used to execute VIs with the LabVIEW Run-Time Engine (RTE) inherit the CPU affinity of the TestStand execution thread.
  // Note: The LabVIEW Adapter uses this property only when executing VIs using the LabVIEW RTE and the preferred execution system of the VIs is same as caller.
  bool returnValue = 1;
}

message LabVIEWAdapter_Set_LabVIEWDevelopmentEnvironmentBitnessRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies the bitness of the LabVIEW development environment version to use. Options include the current active 32-bit or 64-bit LabVIEW development environment, only the current active 32-bit LabVIEW development environment, or only the current active 64-bit LabVIEW development environment.
  LabVIEWDevelopmentEnvironmentBitnessOptions propertyValue = 2;
}

message LabVIEWAdapter_Set_LabVIEWDevelopmentEnvironmentBitnessResponse {
}

message LabVIEWAdapter_Get_LabVIEWDevelopmentEnvironmentBitnessRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
}

message LabVIEWAdapter_Get_LabVIEWDevelopmentEnvironmentBitnessResponse {
  // Specifies the bitness of the LabVIEW development environment version to use. Options include the current active 32-bit or 64-bit LabVIEW development environment, only the current active 32-bit LabVIEW development environment, or only the current active 64-bit LabVIEW development environment.
  LabVIEWDevelopmentEnvironmentBitnessOptions returnValue = 1;
}

message LabVIEWAdapter_Get_IsLabVIEWActiveXServerConnectionValidRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
}

message LabVIEWAdapter_Get_IsLabVIEWActiveXServerConnectionValidResponse {
  // Returns a value that indicates whether the LabVIEW ActiveX server connection TestStand is using is valid.
  bool returnValue = 1;
}

message LabVIEWAdapter_Set_EnableRTEDebuggingAndTracingRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies whether LabVIEW Runtime engine (RTE) support for debugging and tracing is enabled.
  bool propertyValue = 2;
}

message LabVIEWAdapter_Set_EnableRTEDebuggingAndTracingResponse {
}

message LabVIEWAdapter_Get_EnableRTEDebuggingAndTracingRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
}

message LabVIEWAdapter_Get_EnableRTEDebuggingAndTracingResponse {
  // Specifies whether LabVIEW Runtime engine (RTE) support for debugging and tracing is enabled.
  bool returnValue = 1;
}

message LabVIEWAdapter_Set_EnableVersionIndependentRuntimeRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies whether Version Independent Runtime Engine support is enabled in the LabVIEW Adapter.
  bool Value = 2;
}

message LabVIEWAdapter_Set_EnableVersionIndependentRuntimeResponse {
}

message LabVIEWAdapter_Get_EnableVersionIndependentRuntimeRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
}

message LabVIEWAdapter_Get_EnableVersionIndependentRuntimeResponse {
  // Specifies whether Version Independent Runtime Engine support is enabled in the LabVIEW Adapter.
  bool returnValue = 1;
}

message LabVIEWAdapter_Set_OverrideModuleOptionsRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies the global override option to use.
  LabVIEWModuleOverrideOptions propertyValue = 2;
}

message LabVIEWAdapter_Set_OverrideModuleOptionsResponse {
}

message LabVIEWAdapter_Get_OverrideModuleOptionsRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
}

message LabVIEWAdapter_Get_OverrideModuleOptionsResponse {
  // Specifies the global override option to use.
  LabVIEWModuleOverrideOptions returnValue = 1;
}

message LabVIEWAdapter_Set_BuildPPLsAtStartOfExecutionRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
  // Specifies whether the LabVIEW Adapter must build the packed project library during execution if the step is configured to use the override settings and the packed project library is missing or out-of-date.
  bool Value = 2;
}

message LabVIEWAdapter_Set_BuildPPLsAtStartOfExecutionResponse {
}

message LabVIEWAdapter_Get_BuildPPLsAtStartOfExecutionRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
}

message LabVIEWAdapter_Get_BuildPPLsAtStartOfExecutionResponse {
  // Specifies whether the LabVIEW Adapter must build the packed project library during execution if the step is configured to use the override settings and the packed project library is missing or out-of-date.
  bool returnValue = 1;
}

message LabVIEWAdapter_Get_IsSupportedLabVIEWDevelopmentSystemInstalledRequest {
  // The id of the LabVIEWAdapter object.
  LabVIEWAdapterInstance instance = 1;
}

message LabVIEWAdapter_Get_IsSupportedLabVIEWDevelopmentSystemInstalledResponse {
  // Returns True if any supported version of the LabVIEW Development System is installed on the machine.
  bool returnValue = 1;
}

// LabVIEWModule
//
// Use objects from the LabVIEWModule class to specify and obtain LabVIEW Adapter-specific information about the code module that steps or step type substeps execute. Use the Step.Module property to obtain a reference to a LabVIEWModule object. To access the properties and methods of a specific module class, query the Module object for the interface of the module-specific interface you want to acquire.
// Typically, you use this class only when you are writing a sequence editor.
// To access the properties and methods of the Module class, use the LabVIEWModule.AsModule method to obtain an object.
// Use the Module.LoadPrototype method to load the prototype for the module the step specifies.
//
service LabVIEWModule {
  // Method: AsModule
  //
  // Returns the underlying Module object that represents the LabVIEWModule object.
  //
  // Use the Module object to access properties and methods common to all modules.
  //
  // LabVIEWModule_AsModuleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_AsModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: ModuleInstance - The return type of the Module object.
  //
  rpc AsModule(LabVIEWModule_AsModuleRequest) returns (LabVIEWModule_AsModuleResponse);
  
  
  // Method: LoadPrototype
  //
  // Note: This method is obsolete. Use the Module.LoadPrototype method instead.
  //
  // Loads parameter information from the VI of the module.
  // You must set the LabVIEWModule.VIPath property of the module before calling this method. You must call this method before accessing the LabVIEWModule.Parameters property of the module.
  //
  // LabVIEWModule_LoadPrototypeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - discardParameterValues: bool - Specifies whether to reset the LabVIEWParameter.ValueExpr property of the existing parameter values when loading a new prototype.
  //
  // LabVIEWModule_LoadPrototypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the prototype of the VI was loaded. This method usually returns True. 
  //
  rpc LoadPrototype(LabVIEWModule_LoadPrototypeRequest) returns (LabVIEWModule_LoadPrototypeResponse);
  
  
  // Method: ExportVI
  //
  // Exports the embedded VI of the module to a file. Use this function to generate a wrapper VI for a step that you configured to use an Express VI or a LabVIEW Property Node call.
  //
  // To import a VI, call the LabVIEWModule.ImportVI method.
  //
  // LabVIEWModule_ExportVIRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - options: int32 - Reserved for future use. Pass 0.
  //
  // LabVIEWModule_ExportVIResponse - The response message from the server. It provides the output parameters.
  //    - pathString: strin - The new value of pathString if the method modifies it.
  //
  rpc ExportVI(LabVIEWModule_ExportVIRequest) returns (LabVIEWModule_ExportVIResponse);
  
  
  // Method: ImportVI
  //
  // Imports a VI from a file into the module. Use this function to configure a LabVIEW step to call an Express VI from a template or from a wrapper VI generated by a previous call to the LabVIEWModule.ExportVI method. You can also use this function to configure a LabVIEW step to call a LabVIEW Property Node wrapper VI generated by a previous call to the LabVIEWModule.ExportVI method.
  //
  // To export the VI, call the LabVIEWModule.ExportVI method.
  //
  // LabVIEWModule_ImportVIRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - pathString: string - Specifies the pathname of the file to import into the module. Pass an empty path to remove an imported VI from the module.
  //    - options: int32 - Specifies one or more ImportVIOptions constants. Use the bitwise-OR operator to specify multiple flags.
  //
  // LabVIEWModule_ImportVIResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ImportVI(LabVIEWModule_ImportVIRequest) returns (LabVIEWModule_ImportVIResponse);
  
  
  // Method: ConvertExpressVIToStandardVI
  //
  // Converts an Express VI to a standard VI by detaching the Express VI from the module, creating a standard VI on disk that calls the Express VI, and reconfigures the module to call the new VI.
  //
  // This method overwrites an existing VI file without prompting.
  //
  // LabVIEWModule_ConvertExpressVIToStandardVIRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - newVIPath: string - Specifies a string containing the absolute pathname of the new VI to create.
  //
  // LabVIEWModule_ConvertExpressVIToStandardVIResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether TestStand successfully converted the Express VI to a standard VI. 
  //
  rpc ConvertExpressVIToStandardVI(LabVIEWModule_ConvertExpressVIToStandardVIRequest) returns (LabVIEWModule_ConvertExpressVIToStandardVIResponse);
  
  
  // Method: LoadVIInfo
  //
  // Loads information about the VI that the module calls, including default values, enumeration values, the VI help file information, and the VI context help picture.
  //
  // LabVIEWModule_LoadVIInfoRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_LoadVIInfoResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the prototype of the VI specified in the step matches the prototype of the VI on disk. 
  //
  rpc LoadVIInfo(LabVIEWModule_LoadVIInfoRequest) returns (LabVIEWModule_LoadVIInfoResponse);
  
  
  // Method: Execute
  //
  // Use this method to call a LabVIEW VI directly without using a step, sequence, or Execution.
  //
  // When you call a LabVIEW module using this method you can evaluate the parameter expressions to determine the argument values or specify the argument values directly using a LabVIEWArguments collection.
  // To use the parameter value expressions, pass a valid SequenceContext object to the sequenceContextParam to use to evaluate the LabVIEWParameter.ValueExpr expressions.
  // To pass specific argument values, use the LabVIEWParameters.NewArguments method to create a collection of LabVIEWArgument objects and set the LabVIEWArgument.Value property on each item in the collection and on each item in contained collections like the LabVIEWArgument.Elements collection.
  //
  // LabVIEWModule_ExecuteRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - sequenceContextParam: SequenceContextInstance - Specifies the SequenceContext object that this method uses to evaluate each of the LabVIEWParameter.ValueExpr expressions in the module parameters. Pass NULL for this parameter if you pass a LabVIEWArguments collection to the argumentsParam parameter.
  //    - argumentsParam: LabVIEWArgumentsInstance - Specifies the argument collection that contains the argument values to pass to the VI. Pass NULL for this parameter to pass the values obtained from evaluating each of the LabVIEWParameter.ValueExpr expressions in the module parameters.
  //
  // LabVIEWModule_ExecuteResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Execute(LabVIEWModule_ExecuteRequest) returns (LabVIEWModule_ExecuteResponse);
  
  
  // Method: CreateProject
  //
  // Launches LabVIEW to create the LabVIEW project associated with this module.
  //
  // LabVIEWModule_CreateProjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_CreateProjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc CreateProject(LabVIEWModule_CreateProjectRequest) returns (LabVIEWModule_CreateProjectResponse);
  
  
  // Method: EditProject
  //
  // Launches LabVIEW to edit the LabVIEW project associated with this module.
  //
  // LabVIEWModule_EditProjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_EditProjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc EditProject(LabVIEWModule_EditProjectRequest) returns (LabVIEWModule_EditProjectResponse);
  
  
  // Method: DisplaySelectVIFromProjectDialog
  //
  // Launches a dialog box with VIs from the LabVIEW project to select. Returns True if the step was updated.
  //
  // LabVIEWModule_DisplaySelectVIFromProjectDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - pathToUse: LabVIEWProjectPathTypes - Pass LVProjectPathType_Remote to use the value of the LabVIEWModule.RemoteProjectPath property. Pass LVProjectPathType_Local to use the value of the LabVIEWModule.ProjectPath property.
  //
  // LabVIEWModule_DisplaySelectVIFromProjectDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc DisplaySelectVIFromProjectDialog(LabVIEWModule_DisplaySelectVIFromProjectDialogRequest) returns (LabVIEWModule_DisplaySelectVIFromProjectDialogResponse);
  
  
  // Method: IsProjectValid
  //
  // Returns True if the LabVIEW project associated with this module has a valid configuration.
  //
  // LabVIEWModule_IsProjectValidRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_IsProjectValidResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - The return type of the Boolean object.
  //    - errorDescription: strin - Returns a string with the error description when the method returns False.
  //
  rpc IsProjectValid(LabVIEWModule_IsProjectValidRequest) returns (LabVIEWModule_IsProjectValidResponse);
  
  
  // Method: GetVIAbsolutePath
  //
  // Obtains the absolute path of the VI. If the module uses a LabVIEW project path, TestStand uses the URL the LabVIEWModule.VIPath property defines in conjunction with the LabVIEW project to determine the absolute path of the VI.
  //
  // LabVIEWModule_GetVIAbsolutePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_GetVIAbsolutePathResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if TestStand finds the file. 
  //    - viAbsolutePath: strin - Returns the absolute path of the VI. If TestStand does not find the VI, this parameter returns an empty string.
  //
  rpc GetVIAbsolutePath(LabVIEWModule_GetVIAbsolutePathRequest) returns (LabVIEWModule_GetVIAbsolutePathResponse);
  
  
  // Method: GetProjectUrlPathsForVIs
  //
  // Obtains a list of URL paths for the VIs in the LabVIEW project you select. If TestStand cannot find the LabVIEW project, this list is empty.
  //
  // LabVIEWModule_GetProjectUrlPathsForVIsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - pathToUse: LabVIEWProjectPathTypes - Pass LVProjectPathType_Remote to use the value of the LabVIEWModule.RemoteProjectPath property. Pass LVProjectPathType_Local to use the value of the LabVIEWModule.ProjectPath property.
  //
  // LabVIEWModule_GetProjectUrlPathsForVIsResponse - The response message from the server. It provides the output parameters.
  //    - items: repeated strin - Returns the list of URL paths for the VIs in the LabVIEW project you select. 
  //
  rpc GetProjectUrlPathsForVIs(LabVIEWModule_GetProjectUrlPathsForVIsRequest) returns (LabVIEWModule_GetProjectUrlPathsForVIsResponse);
  
  
  // Method: FindVIUrlUsingVIPath
  //
  // Obtains the VI URL by finding an absolute VI path match in the LabVIEW project you select. If TestStand cannot find a match, the viUrl parameter is empty.
  //
  // LabVIEWModule_FindVIUrlUsingVIPathRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - pathToUse: LabVIEWProjectPathTypes - Pass LVProjectPathType_Remote to use the value of the LabVIEWModule.RemoteProjectPath property. Pass LVProjectPathType_Local to use the value of the LabVIEWModule.ProjectPath property.
  //
  // LabVIEWModule_FindVIUrlUsingVIPathResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns a value that indicates whether TestStand successfully found a URL for the VI. 
  //    - viUrl: strin - Returns the VI URL path in the LabVIEW project you select.
  //
  rpc FindVIUrlUsingVIPath(LabVIEWModule_FindVIUrlUsingVIPathRequest) returns (LabVIEWModule_FindVIUrlUsingVIPathResponse);
  
  
  // Method: DisplaySelectClassFromProjectDialog
  //
  // Launches the Select a Class from LabVIEW Project dialog box, in which you can select a LabVIEW class to call from the LabVIEW project. Returns True if the step was updated.
  //
  // LabVIEWModule_DisplaySelectClassFromProjectDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - reserved: int32 - Reserved for future use.
  //
  // LabVIEWModule_DisplaySelectClassFromProjectDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc DisplaySelectClassFromProjectDialog(LabVIEWModule_DisplaySelectClassFromProjectDialogRequest) returns (LabVIEWModule_DisplaySelectClassFromProjectDialogResponse);
  
  
  // Method: GetClassAbsolutePath
  //
  // Obtains the absolute path of the LabVIEW class. If the code module uses a LabVIEW project path, TestStand uses the URL the LabVIEWModule.ClassPath property defines and the LabVIEW project to determine the absolute path of the LabVIEW class.
  //
  // LabVIEWModule_GetClassAbsolutePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_GetClassAbsolutePathResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if TestStand finds the file. 
  //    - classAbsolutePath: strin - Returns the absolute path of the LabVIEW class. If TestStand does not find the class, this parameter returns an empty string.
  //
  rpc GetClassAbsolutePath(LabVIEWModule_GetClassAbsolutePathRequest) returns (LabVIEWModule_GetClassAbsolutePathResponse);
  
  
  // Method: FindClassUrlUsingClassPath
  //
  // Obtains the LabVIEW class URL by finding an absolute class path match in the LabVIEW project you select. If TestStand cannot find a match, the classUrl parameter is empty.
  //
  // LabVIEWModule_FindClassUrlUsingClassPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_FindClassUrlUsingClassPathResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if TestStand successfully finds a URL for the LabVIEW class. 
  //    - classUrl: strin - Returns the LabVIEW class URL path in the LabVIEW project you select.
  //
  rpc FindClassUrlUsingClassPath(LabVIEWModule_FindClassUrlUsingClassPathRequest) returns (LabVIEWModule_FindClassUrlUsingClassPathResponse);
  
  
  // Method: GetProjectUrlPathsForClasses
  //
  // Obtains a list of URL paths for the LabVIEW classes in the LabVIEW project you select. If TestStand cannot find the LabVIEW project, this list is empty.
  //
  // LabVIEWModule_GetProjectUrlPathsForClassesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_GetProjectUrlPathsForClassesResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated string - The return type of the String[] object.
  //
  rpc GetProjectUrlPathsForClasses(LabVIEWModule_GetProjectUrlPathsForClassesRequest) returns (LabVIEWModule_GetProjectUrlPathsForClassesResponse);
  
  
  // Method: DisplaySelectClassMemberFromProjectDialog
  //
  // Launches the Select a Class Member from LabVIEW Project dialog box, in which you can select a LabVIEW class member VI to call from the LabVIEW project. Returns True if the step was updated.
  //
  // LabVIEWModule_DisplaySelectClassMemberFromProjectDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - reserved: int32 - Reserved for future use.
  //
  // LabVIEWModule_DisplaySelectClassMemberFromProjectDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc DisplaySelectClassMemberFromProjectDialog(LabVIEWModule_DisplaySelectClassMemberFromProjectDialogRequest) returns (LabVIEWModule_DisplaySelectClassMemberFromProjectDialogResponse);
  
  
  // Method: DisplaySelectMemberFromClassDialog
  //
  // Launches the Select a Class Member from LabVIEW Class dialog box, in which you can select a LabVIEW class member VI to call from the LabVIEW class. Returns True if the step was updated.
  //
  // LabVIEWModule_DisplaySelectMemberFromClassDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - reserved: int32 - Reserved for future use.
  //
  // LabVIEWModule_DisplaySelectMemberFromClassDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc DisplaySelectMemberFromClassDialog(LabVIEWModule_DisplaySelectMemberFromClassDialogRequest) returns (LabVIEWModule_DisplaySelectMemberFromClassDialogResponse);
  
  
  // Method: DisplayParameterMappingDialog
  //
  // Launches the Parameter Name/Mapping dialog box to configure parameter mapping settings for a LabVIEW step type. Returns True if the step was updated.
  //
  // LabVIEWModule_DisplayParameterMappingDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - commonDialogOptions: int32 - Pass the CommonDlgOption_ReadOnly constant to display the Parameter Name/Mapping dialog box in read-only mode when the step type cannot be changed.
  //
  // LabVIEWModule_DisplayParameterMappingDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc DisplayParameterMappingDialog(LabVIEWModule_DisplayParameterMappingDialogRequest) returns (LabVIEWModule_DisplayParameterMappingDialogResponse);
  
  
  // Method: EditClass
  //
  // Launches LabVIEW and opens the LabVIEW class associated with the code module.
  //
  // LabVIEWModule_EditClassRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_EditClassResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc EditClass(LabVIEWModule_EditClassRequest) returns (LabVIEWModule_EditClassResponse);
  
  
  // Method: ConvertToStandardVI
  //
  // Converts a LabVIEW step configured with an embedded VI to a standard VI call by detaching the embedded VI from the code module, creating a standard VI on disk that contains the previously embedded VI, and reconfiguring the step to call the new VI in a standard VI call.
  //
  // LabVIEWModule_ConvertToStandardVIRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - newVIPath: string - Specifies the file path for the new VI to create on disk.
  //    - options: int32 - Reserved for future use.
  //
  // LabVIEWModule_ConvertToStandardVIResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc ConvertToStandardVI(LabVIEWModule_ConvertToStandardVIRequest) returns (LabVIEWModule_ConvertToStandardVIResponse);
  
  
  // Method: GetVIAbsolutePathEx
  //
  // Obtains the absolute path of the VI configured in the step.
  //
  // LabVIEWModule_GetVIAbsolutePathExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: LabVIEWModuleOverrideTypes - Use the following constants with this data type:
  //      * LabVIEWOverrideType_Default - (Value: 0) Indicates to use the VI specified in the step.    * LabVIEWOverrideType_PPL - (Value: 1) Indicates to use the VI specified in the packed project library configured in the Override Module Settings window.
  //
  // LabVIEWModule_GetVIAbsolutePathExResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if TestStand finds the file. 
  //    - viAbsolutePath: strin - Returns the absolute path of the VI. If TestStand does not find the VI, this parameter returns an empty string.
  //
  rpc GetVIAbsolutePathEx(LabVIEWModule_GetVIAbsolutePathExRequest) returns (LabVIEWModule_GetVIAbsolutePathExResponse);
  
  
  // Method: FindVIUrlUsingVIPathEx
  //
  // Obtains the URL of the VI by finding a match for the absolute path of the VI in the LabVIEW project you select. If TestStand cannot find a match, the viUrl parameter is empty.
  //
  // LabVIEWModule_FindVIUrlUsingVIPathExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: LabVIEWModuleOverrideTypes - Use the following constants with this data type:
  //      * LabVIEWOverrideType_Default - (Value: 0) Indicates to use the VI specified in the step.    * LabVIEWOverrideType_PPL - (Value: 1) Indicates to use the VI specified in the packed project library configured in the Override Module Settings window.
  //    - pathToUse: LabVIEWProjectPathTypes - Pass LVProjectPathType_Remote to use the value of the LabVIEWModule.RemoteProjectPath property. Pass LVProjectPathType_Local to use the value of the LabVIEWModule.ProjectPath property.
  //
  // LabVIEWModule_FindVIUrlUsingVIPathExResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns a value that indicates whether TestStand successfully found a URL for the VI in the project. 
  //    - viUrl: strin - Returns the VI URL path in the LabVIEW project you select.
  //
  rpc FindVIUrlUsingVIPathEx(LabVIEWModule_FindVIUrlUsingVIPathExRequest) returns (LabVIEWModule_FindVIUrlUsingVIPathExResponse);
  
  
  // Method: GetClassAbsolutePathEx
  //
  // Obtains the absolute path of the LabVIEW class. If the code module uses a LabVIEW project path, TestStand uses the URL the LabVIEWModule.ClassPath property defines and the LabVIEW project to determine the absolute path of the LabVIEW class.
  //
  // LabVIEWModule_GetClassAbsolutePathExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: LabVIEWModuleOverrideTypes - Use the following constants with this data type:
  //      * LabVIEWOverrideType_Default - (Value: 0) Indicates to use the VI specified in the step.    * LabVIEWOverrideType_PPL - (Value: 1) Indicates to use the VI specified in the packed project library configured in the Override Module Settings window.
  //
  // LabVIEWModule_GetClassAbsolutePathExResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if TestStand finds the file. 
  //    - sourceClassAbsolutePath: strin - Returns the absolute path of the LabVIEW class. If TestStand does not find the class, this parameter returns an empty string.
  //
  rpc GetClassAbsolutePathEx(LabVIEWModule_GetClassAbsolutePathExRequest) returns (LabVIEWModule_GetClassAbsolutePathExResponse);
  
  
  // Method: FindClassUrlUsingClassPathEx
  //
  // Obtains the URL of the LabVIEW class by finding a match for the absolute path of the class in the LabVIEW project you select. If TestStand cannot find a match, the classUrl parameter is empty.
  //
  // LabVIEWModule_FindClassUrlUsingClassPathExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: LabVIEWModuleOverrideTypes - Use the following constants with this data type:
  //      * LabVIEWOverrideType_Default - (Value: 0) Indicates to use the VI specified in the step.    * LabVIEWOverrideType_PPL - (Value: 1) Indicates to use the VI specified in the packed project library configured in the Override Module Settings window.
  //
  // LabVIEWModule_FindClassUrlUsingClassPathExResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if TestStand successfully finds a URL for the LabVIEW class. 
  //    - sourceClassUrl: strin - Returns the LabVIEW class URL path in the LabVIEW project you select.
  //
  rpc FindClassUrlUsingClassPathEx(LabVIEWModule_FindClassUrlUsingClassPathExRequest) returns (LabVIEWModule_FindClassUrlUsingClassPathExResponse);
  
  
  // Method: GetBinaryBuildSpecifications
  //
  // Obtains the list of build specifications that are configured to build packed project libraries from the LabVIEW project configured in the code module.
  //
  // LabVIEWModule_GetBinaryBuildSpecificationsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_GetBinaryBuildSpecificationsResponse - The response message from the server. It provides the output parameters.
  //    - buildSpecifications: repeated strin - Returns a list of the build specifications found in the project that are configured to build packed project libraries.
  //
  rpc GetBinaryBuildSpecifications(LabVIEWModule_GetBinaryBuildSpecificationsRequest) returns (LabVIEWModule_GetBinaryBuildSpecificationsResponse);
  
  
  // Method: BuildBinary
  //
  // Builds the packed project library using the configuration specified in the Override Module Settings window if the packed project library is missing or out of date.
  //
  // LabVIEWModule_BuildBinaryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_BuildBinaryResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc BuildBinary(LabVIEWModule_BuildBinaryRequest) returns (LabVIEWModule_BuildBinaryResponse);
  
  
  // Method: DisplaySelectVIFromProjectDialogEx
  //
  // Launches a dialog box that displays VIs to select from the LabVIEW project. Returns True if the step was updated.
  //
  // LabVIEWModule_DisplaySelectVIFromProjectDialogExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - pathToUse: LabVIEWProjectPathTypes - Pass LVProjectPathType_Remote to use the value of the LabVIEWModule.RemoteProjectPath property. Pass LVProjectPathType_Local to use the value of the LabVIEWModule.ProjectPath property.
  //    - propertyValue: LabVIEWModuleOverrideTypes - Use the following constants with this data type:
  //      * LabVIEWOverrideType_Default - (Value: 0) Indicates to use the VI specified in the step.    * LabVIEWOverrideType_PPL - (Value: 1) Indicates to use the VI specified in the packed project library configured in the Override Module Settings window.
  //
  // LabVIEWModule_DisplaySelectVIFromProjectDialogExResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc DisplaySelectVIFromProjectDialogEx(LabVIEWModule_DisplaySelectVIFromProjectDialogExRequest) returns (LabVIEWModule_DisplaySelectVIFromProjectDialogExResponse);
  
  
  // Method: DisplaySelectClassFromProjectDialogEx
  //
  // Launches the Select a Class from LabVIEW Project dialog box, in which you can select a LabVIEW class to call from the LabVIEW project. Returns True if the step was updated.
  //
  // LabVIEWModule_DisplaySelectClassFromProjectDialogExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - reserved: int32 - Reserved for future use.
  //    - propertyValue: LabVIEWModuleOverrideTypes - Use the following constants with this data type:
  //      * LabVIEWOverrideType_Default - (Value: 0) Indicates to use the VI specified in the step.    * LabVIEWOverrideType_PPL - (Value: 1) Indicates to use the VI specified in the packed project library configured in the Override Module Settings window.
  //
  // LabVIEWModule_DisplaySelectClassFromProjectDialogExResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc DisplaySelectClassFromProjectDialogEx(LabVIEWModule_DisplaySelectClassFromProjectDialogExRequest) returns (LabVIEWModule_DisplaySelectClassFromProjectDialogExResponse);
  
  
  // Method: ValidateOverrideSettings
  //
  // Validates the override settings and returns false if there are errors.
  //
  // LabVIEWModule_ValidateOverrideSettingsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - options: int32 - Not used.
  //
  // LabVIEWModule_ValidateOverrideSettingsResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - The return type of the Boolean object.
  //    - errorMessage: strin - Specifies the error found while validating the override settings.
  //
  rpc ValidateOverrideSettings(LabVIEWModule_ValidateOverrideSettingsRequest) returns (LabVIEWModule_ValidateOverrideSettingsResponse);
  
  

  // Property: VIPath
  //
  // Specifies the path and name of the VI the LabVIEWModule calls. For remote systems, this property specifies which VI the module calls unless the LabVIEWModule.RemoteVIPath property specifies a path and name of a VI.
  //
  // You can specify an absolute or relative pathname for the file. Relative pathnames are relative to the TestStand search directory paths.
  //
  // LabVIEWModule_Set_VIPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: string - Specifies the path and name of the VI the LabVIEWModule calls. For remote systems, this property specifies which VI the module calls unless the LabVIEWModule.RemoteVIPath property specifies a path and name of a VI. 
  //
  // LabVIEWModule_Set_VIPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_VIPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_VIPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the path and name of the VI the LabVIEWModule calls. For remote systems, this property specifies which VI the module calls unless the LabVIEWModule.RemoteVIPath property specifies a path and name of a VI. 
  //
  rpc Set_VIPath(LabVIEWModule_Set_VIPathRequest) returns (LabVIEWModule_Set_VIPathResponse);
  rpc Get_VIPath(LabVIEWModule_Get_VIPathRequest) returns (LabVIEWModule_Get_VIPathResponse);
  
  
  // Property: VICallOptions
  //
  // Specifies options for calling the VI of the module.
  //
  // LabVIEWModule_Set_VICallOptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: int32 - Specifies options for calling the VI of the module. 
  //
  // LabVIEWModule_Set_VICallOptionsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_VICallOptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_VICallOptionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies options for calling the VI of the module. 
  //
  rpc Set_VICallOptions(LabVIEWModule_Set_VICallOptionsRequest) returns (LabVIEWModule_Set_VICallOptionsResponse);
  rpc Get_VICallOptions(LabVIEWModule_Get_VICallOptionsRequest) returns (LabVIEWModule_Get_VICallOptionsResponse);
  
  
  // Property: RemoteHost
  //
  // Specifies the remote system on which to run the VI. Leave this property empty if you are not using a remote system.
  //
  // If the LabVIEWModule.SpecifyHostByExpression property is True, the value of this property must be in the format of an expression.
  //
  // LabVIEWModule_Set_RemoteHostRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: string - Specifies the remote system on which to run the VI. Leave this property empty if you are not using a remote system. 
  //
  // LabVIEWModule_Set_RemoteHostResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_RemoteHostRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_RemoteHostResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the remote system on which to run the VI. Leave this property empty if you are not using a remote system. 
  //
  rpc Set_RemoteHost(LabVIEWModule_Set_RemoteHostRequest) returns (LabVIEWModule_Set_RemoteHostResponse);
  rpc Get_RemoteHost(LabVIEWModule_Get_RemoteHostRequest) returns (LabVIEWModule_Get_RemoteHostResponse);
  
  
  // Property: SpecifyHostByExpression
  //
  // Specifies that the LabVIEWModule.RemoteHost property contains an expression the LabVIEW Adapter evaluates at run time to determine the name of the remote host.
  //
  // If RemoteHost is empty, this property is ignored.
  //
  // LabVIEWModule_Set_SpecifyHostByExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: bool - Specifies that the LabVIEWModule.RemoteHost property contains an expression the LabVIEW Adapter evaluates at run time to determine the name of the remote host. 
  //
  // LabVIEWModule_Set_SpecifyHostByExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_SpecifyHostByExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_SpecifyHostByExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies that the LabVIEWModule.RemoteHost property contains an expression the LabVIEW Adapter evaluates at run time to determine the name of the remote host. 
  //
  rpc Set_SpecifyHostByExpression(LabVIEWModule_Set_SpecifyHostByExpressionRequest) returns (LabVIEWModule_Set_SpecifyHostByExpressionResponse);
  rpc Get_SpecifyHostByExpression(LabVIEWModule_Get_SpecifyHostByExpressionRequest) returns (LabVIEWModule_Get_SpecifyHostByExpressionResponse);
  
  
  // Property: RemoteVIPath
  //
  // Specifies the path and name of the VI the step calls on the remote system.
  //
  // If the path is relative, the remote system interprets the path as relative to the application directory, if applicable. If an absolute or relative path is specified, the VI is loaded into memory on the remote system, if it is not already open. If a VI of the same name is already in memory, that VI is used regardless of whether the path is the same as the path specified.
  // If a path is not specified for this property, the VI specified in the  LabVIEWModule.VIPath property downloads to the remote system if it is not already in memory and if the remote system is running LabVIEW Real-Time Module.
  // If the step uses a remote project path, the LabVIEWModule.RemoteVIPath property specifies the URL of the VI within the defined LabVIEW project. If the LabVIEWModule.RemoteHost property is empty, this property is ignored.
  //
  // LabVIEWModule_Set_RemoteVIPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: string - Specifies the path and name of the VI the step calls on the remote system. 
  //
  // LabVIEWModule_Set_RemoteVIPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_RemoteVIPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_RemoteVIPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the path and name of the VI the step calls on the remote system. 
  //
  rpc Set_RemoteVIPath(LabVIEWModule_Set_RemoteVIPathRequest) returns (LabVIEWModule_Set_RemoteVIPathResponse);
  rpc Get_RemoteVIPath(LabVIEWModule_Get_RemoteVIPathRequest) returns (LabVIEWModule_Get_RemoteVIPathResponse);
  
  
  // Property: RemotePortNumber
  //
  // Specifies the port number to use to connect to the remote system.
  //
  // If the LabVIEWModule.RemoteHost property is empty, this property is ignored.
  //
  // LabVIEWModule_Set_RemotePortNumberRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: int32 - Specifies the port number to use to connect to the remote system. 
  //
  // LabVIEWModule_Set_RemotePortNumberResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_RemotePortNumberRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_RemotePortNumberResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the port number to use to connect to the remote system. 
  //
  rpc Set_RemotePortNumber(LabVIEWModule_Set_RemotePortNumberRequest) returns (LabVIEWModule_Set_RemotePortNumberResponse);
  rpc Get_RemotePortNumber(LabVIEWModule_Get_RemotePortNumberRequest) returns (LabVIEWModule_Get_RemotePortNumberResponse);
  
  
  // Property: RemoteConnectionTimeout
  //
  // Specifies the time to wait for a connection before timing out, in milliseconds.
  //
  // If the LabVIEWModule.RemoteHost property is empty, this property is ignored.
  //
  // LabVIEWModule_Set_RemoteConnectionTimeoutRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: int32 - Specifies the time to wait for a connection before timing out, in milliseconds. 
  //
  // LabVIEWModule_Set_RemoteConnectionTimeoutResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_RemoteConnectionTimeoutRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_RemoteConnectionTimeoutResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the time to wait for a connection before timing out, in milliseconds. 
  //
  rpc Set_RemoteConnectionTimeout(LabVIEWModule_Set_RemoteConnectionTimeoutRequest) returns (LabVIEWModule_Set_RemoteConnectionTimeoutResponse);
  rpc Get_RemoteConnectionTimeout(LabVIEWModule_Get_RemoteConnectionTimeoutRequest) returns (LabVIEWModule_Get_RemoteConnectionTimeoutResponse);
  
  
  // Property: VIDescription
  //
  // Returns the description of the VI.
  //
  // If no description exists for the VI, this property returns an empty string.
  // The LabVIEW Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the Module.LoadPrototype method before retrieving this property.
  //
  // LabVIEWModule_Get_VIDescriptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_VIDescriptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the description of the VI. 
  //
  rpc Get_VIDescription(LabVIEWModule_Get_VIDescriptionRequest) returns (LabVIEWModule_Get_VIDescriptionResponse);
  
  
  // Property: Parameters
  //
  // Returns the LabVIEWParameters collection that contains a list of the current parameters used as inputs and outputs of the corresponding module.
  //
  // Call the Module.LoadPrototype method before accessing this property.
  //
  // LabVIEWModule_Get_ParametersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_ParametersResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWParametersInstance - Returns the LabVIEWParameters collection that contains a list of the current parameters used as inputs and outputs of the corresponding module. 
  //
  rpc Get_Parameters(LabVIEWModule_Get_ParametersRequest) returns (LabVIEWModule_Get_ParametersResponse);
  
  
  // Property: VIType
  //
  // Specifies the type of VI the module is calling.
  //
  // If you set LabVIEWVITypes to LVVIType_Express, you need to call ImportVI to import the Express VI you want to call.
  //
  // LabVIEWModule_Set_VITypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: LabVIEWVITypes - Specifies the type of VI the module is calling. 
  //
  // LabVIEWModule_Set_VITypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_VITypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_VITypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWVITypes - Specifies the type of VI the module is calling. 
  //
  rpc Set_VIType(LabVIEWModule_Set_VITypeRequest) returns (LabVIEWModule_Set_VITypeResponse);
  rpc Get_VIType(LabVIEWModule_Get_VITypeRequest) returns (LabVIEWModule_Get_VITypeResponse);
  
  
  // Property: ExpressVIName
  //
  // Returns the name of the Express VI the module is calling.
  //
  // If the VI type of the module is Standard, this property returns an empty string.
  // The LabVIEW Adapter persists this property value when you specify an Express VI as the code module for a step.  For an unspecified step, you must call the LabVIEWModule.ImportVI method before retrieving this property.
  //
  // LabVIEWModule_Get_ExpressVINameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_ExpressVINameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the Express VI the module is calling. 
  //
  rpc Get_ExpressVIName(LabVIEWModule_Get_ExpressVINameRequest) returns (LabVIEWModule_Get_ExpressVINameResponse);
  
  
  // Property: VIAttached
  //
  // Returns a value that indicates whether the module contains an embedded VI.
  //
  // You can embed a VI by calling the LabVIEWModule.ImportVI method.
  //
  // LabVIEWModule_Get_VIAttachedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_VIAttachedResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the module contains an embedded VI. 
  //
  rpc Get_VIAttached(LabVIEWModule_Get_VIAttachedRequest) returns (LabVIEWModule_Get_VIAttachedResponse);
  
  
  // Property: HelpPicture
  //
  // Returns the context help picture of the VI that the module calls.
  //
  // Call the LabVIEWModule.LoadVIInfo or Module.LoadPrototype method before calling this method. The values stay in memory until the sequence file closes.
  //
  // LabVIEWModule_Get_HelpPictureRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_HelpPictureResponse - The response message from the server. It provides the return value.
  //    - returnValue: IPictureDispInstance - Returns the context help picture of the VI that the module calls. 
  //
  rpc Get_HelpPicture(LabVIEWModule_Get_HelpPictureRequest) returns (LabVIEWModule_Get_HelpPictureResponse);
  
  
  // Property: HelpPictureRects
  //
  // Returns the coordinates to the rectangles of each label and terminal in the context help picture of the VI the module calls.
  //
  // Call the LabVIEWModule.LoadVIInfo or Module.LoadPrototype method before calling this method. The values stay in memory until the sequence file closes.
  //
  // LabVIEWModule_Get_HelpPictureRectsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_HelpPictureRectsResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Returns the coordinates to the rectangles of each label and terminal in the context help picture of the VI the module calls. 
  //
  rpc Get_HelpPictureRects(LabVIEWModule_Get_HelpPictureRectsRequest) returns (LabVIEWModule_Get_HelpPictureRectsResponse);
  
  
  // Property: HelpFilePath
  //
  // Returns the absolute path to the help file of the VI the module calls.
  //
  // Call the LabVIEWModule.LoadVIInfo or Module.LoadPrototype method before calling this method. The values stay in memory until the sequence file closes.
  //
  // LabVIEWModule_Get_HelpFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_HelpFilePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the absolute path to the help file of the VI the module calls. 
  //
  rpc Get_HelpFilePath(LabVIEWModule_Get_HelpFilePathRequest) returns (LabVIEWModule_Get_HelpFilePathResponse);
  
  
  // Property: HelpContext
  //
  // Returns the tag for the help topic of the VI the module calls.
  //
  // Call the LabVIEWModule.LoadVIInfo or Module.LoadPrototype method before calling this method. The values stay in memory until the sequence file closes.
  //
  // LabVIEWModule_Get_HelpContextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_HelpContextResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the tag for the help topic of the VI the module calls. 
  //
  rpc Get_HelpContext(LabVIEWModule_Get_HelpContextRequest) returns (LabVIEWModule_Get_HelpContextResponse);
  
  
  // Property: ProjectPath
  //
  // Specifies the path and name of the LabVIEW project the LabVIEWModule calls.
  //
  // You can specify an absolute or relative pathname for the file. Relative pathnames are relative to the TestStand search directory paths.
  //
  // LabVIEWModule_Set_ProjectPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: string - Specifies the path and name of the LabVIEW project the LabVIEWModule calls. 
  //
  // LabVIEWModule_Set_ProjectPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_ProjectPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_ProjectPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the path and name of the LabVIEW project the LabVIEWModule calls. 
  //
  rpc Set_ProjectPath(LabVIEWModule_Set_ProjectPathRequest) returns (LabVIEWModule_Set_ProjectPathResponse);
  rpc Get_ProjectPath(LabVIEWModule_Get_ProjectPathRequest) returns (LabVIEWModule_Get_ProjectPathResponse);
  
  
  // Property: RemoteProjectPath
  //
  // Specifies the path and name of the LabVIEW project the step calls on the remote system. Use the LabVIEWModule.RemoteVIPath property to specify the URL of the VI to call within the defined LabVIEW project.
  //
  // LabVIEWModule_Set_RemoteProjectPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: string - Specifies the path and name of the LabVIEW project the step calls on the remote system. Use the LabVIEWModule.RemoteVIPath property to specify the URL of the VI to call within the defined LabVIEW project. 
  //
  // LabVIEWModule_Set_RemoteProjectPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_RemoteProjectPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_RemoteProjectPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the path and name of the LabVIEW project the step calls on the remote system. Use the LabVIEWModule.RemoteVIPath property to specify the URL of the VI to call within the defined LabVIEW project. 
  //
  rpc Set_RemoteProjectPath(LabVIEWModule_Set_RemoteProjectPathRequest) returns (LabVIEWModule_Set_RemoteProjectPathResponse);
  rpc Get_RemoteProjectPath(LabVIEWModule_Get_RemoteProjectPathRequest) returns (LabVIEWModule_Get_RemoteProjectPathResponse);
  
  
  // Property: Namespace
  //
  // Returns the LabVIEW namespace of the VI. The namespace of the VI is the qualified name of the owning LabVIEW project library.
  //
  // LabVIEWModule_Set_NamespaceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: string - Returns the LabVIEW namespace of the VI. The namespace of the VI is the qualified name of the owning LabVIEW project library. 
  //
  // LabVIEWModule_Set_NamespaceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_NamespaceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_NamespaceResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the LabVIEW namespace of the VI. The namespace of the VI is the qualified name of the owning LabVIEW project library. 
  //
  rpc Set_Namespace(LabVIEWModule_Set_NamespaceRequest) returns (LabVIEWModule_Set_NamespaceResponse);
  rpc Get_Namespace(LabVIEWModule_Get_NamespaceRequest) returns (LabVIEWModule_Get_NamespaceResponse);
  
  
  // Property: ConfiguredWithOldChecksum
  //
  // 
  //
  // LabVIEWModule_Get_ConfiguredWithOldChecksumRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_ConfiguredWithOldChecksumResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool -  
  //
  rpc Get_ConfiguredWithOldChecksum(LabVIEWModule_Get_ConfiguredWithOldChecksumRequest) returns (LabVIEWModule_Get_ConfiguredWithOldChecksumResponse);
  
  
  // Property: LabVIEWVersionThatWillBeUsedToRunVI
  //
  // 
  //
  // LabVIEWModule_Get_LabVIEWVersionThatWillBeUsedToRunVIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_LabVIEWVersionThatWillBeUsedToRunVIResponse - The response message from the server. It provides the return value.
  //    - returnValue: string -  
  //
  rpc Get_LabVIEWVersionThatWillBeUsedToRunVI(LabVIEWModule_Get_LabVIEWVersionThatWillBeUsedToRunVIRequest) returns (LabVIEWModule_Get_LabVIEWVersionThatWillBeUsedToRunVIResponse);
  
  
  // Property: TDChecksum
  //
  // 
  //
  // LabVIEWModule_Set_TDChecksumRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: int32 -  
  //
  // LabVIEWModule_Set_TDChecksumResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_TDChecksumRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_TDChecksumResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 -  
  //
  rpc Set_TDChecksum(LabVIEWModule_Set_TDChecksumRequest) returns (LabVIEWModule_Set_TDChecksumResponse);
  rpc Get_TDChecksum(LabVIEWModule_Get_TDChecksumRequest) returns (LabVIEWModule_Get_TDChecksumResponse);
  
  
  // Property: CallType
  //
  // Specifies the type of call the code module executes.
  //
  // You must also set the appropriate properties for the type of call you want to make. For example, for a class member call, you must set the LabVIEWModule.ClassPath and LabVIEWModule.CallName properties. You might also need to set the LabVIEWModule.ProjectPath property depending on the configuration of the code module.
  //
  // LabVIEWModule_Set_CallTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: LabVIEWCallTypes - Specifies the type of call the code module executes. 
  //
  // LabVIEWModule_Set_CallTypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_CallTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_CallTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWCallTypes - Specifies the type of call the code module executes. 
  //
  rpc Set_CallType(LabVIEWModule_Set_CallTypeRequest) returns (LabVIEWModule_Set_CallTypeResponse);
  rpc Get_CallType(LabVIEWModule_Get_CallTypeRequest) returns (LabVIEWModule_Get_CallTypeResponse);
  
  
  // Property: ClassPath
  //
  // Specifies the path and name of the LabVIEW class the LabVIEWModule object calls.
  //
  // You can specify an absolute or relative pathname for the file. Relative pathnames are relative to the TestStand search directory paths.
  //
  // LabVIEWModule_Set_ClassPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: string - Specifies the path and name of the LabVIEW class the LabVIEWModule object calls. 
  //
  // LabVIEWModule_Set_ClassPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_ClassPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_ClassPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the path and name of the LabVIEW class the LabVIEWModule object calls. 
  //
  rpc Set_ClassPath(LabVIEWModule_Set_ClassPathRequest) returns (LabVIEWModule_Set_ClassPathResponse);
  rpc Get_ClassPath(LabVIEWModule_Get_ClassPathRequest) returns (LabVIEWModule_Get_ClassPathResponse);
  
  
  // Property: CallName
  //
  // Returns the name of the LabVIEW class member VI the code module calls.
  //
  // LabVIEWModule_Set_CallNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: string - Returns the name of the LabVIEW class member VI the code module calls. 
  //
  // LabVIEWModule_Set_CallNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_CallNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_CallNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the LabVIEW class member VI the code module calls. 
  //
  rpc Set_CallName(LabVIEWModule_Set_CallNameRequest) returns (LabVIEWModule_Set_CallNameResponse);
  rpc Get_CallName(LabVIEWModule_Get_CallNameRequest) returns (LabVIEWModule_Get_CallNameResponse);
  
  
  // Property: NodeLibraryName
  //
  // Specifies the LabVIEW I/O Library Name when calling a LabVIEW Property Node.
  //
  // LabVIEWModule_Set_NodeLibraryNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: string - Specifies the LabVIEW I/O Library Name when calling a LabVIEW Property Node. 
  //
  // LabVIEWModule_Set_NodeLibraryNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_NodeLibraryNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_NodeLibraryNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the LabVIEW I/O Library Name when calling a LabVIEW Property Node. 
  //
  rpc Set_NodeLibraryName(LabVIEWModule_Set_NodeLibraryNameRequest) returns (LabVIEWModule_Set_NodeLibraryNameResponse);
  rpc Get_NodeLibraryName(LabVIEWModule_Get_NodeLibraryNameRequest) returns (LabVIEWModule_Get_NodeLibraryNameResponse);
  
  
  // Property: NodeLibraryGenericTypeName
  //
  // Specifies the LabVIEW I/O Library Generic Type Name when calling a LabVIEW Property Node.
  //
  // LabVIEWModule_Set_NodeLibraryGenericTypeNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: string - Specifies the LabVIEW I/O Library Generic Type Name when calling a LabVIEW Property Node. 
  //
  // LabVIEWModule_Set_NodeLibraryGenericTypeNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_NodeLibraryGenericTypeNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_NodeLibraryGenericTypeNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the LabVIEW I/O Library Generic Type Name when calling a LabVIEW Property Node. 
  //
  rpc Set_NodeLibraryGenericTypeName(LabVIEWModule_Set_NodeLibraryGenericTypeNameRequest) returns (LabVIEWModule_Set_NodeLibraryGenericTypeNameResponse);
  rpc Get_NodeLibraryGenericTypeName(LabVIEWModule_Get_NodeLibraryGenericTypeNameRequest) returns (LabVIEWModule_Get_NodeLibraryGenericTypeNameResponse);
  
  
  // Property: NodeClassDataName
  //
  // Specifies the LabVIEW I/O Library Class Data Name when calling a LabVIEW Property Node.
  //
  // LabVIEWModule_Set_NodeClassDataNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: string - Specifies the LabVIEW I/O Library Class Data Name when calling a LabVIEW Property Node. 
  //
  // LabVIEWModule_Set_NodeClassDataNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_NodeClassDataNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_NodeClassDataNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the LabVIEW I/O Library Class Data Name when calling a LabVIEW Property Node. 
  //
  rpc Set_NodeClassDataName(LabVIEWModule_Set_NodeClassDataNameRequest) returns (LabVIEWModule_Set_NodeClassDataNameResponse);
  rpc Get_NodeClassDataName(LabVIEWModule_Get_NodeClassDataNameRequest) returns (LabVIEWModule_Get_NodeClassDataNameResponse);
  
  
  // Property: NodeUsesDataValueReference
  //
  // Indicates that the step accesses a LabVIEW class indirectly through a Data Reference Value (DVR) rather than directly by using an object reference.
  //
  // This property is valid only when you build a LabVIEW Property Node for a LabVIEW Class.
  //
  // LabVIEWModule_Set_NodeUsesDataValueReferenceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: bool - Indicates that the step accesses a LabVIEW class indirectly through a Data Reference Value (DVR) rather than directly by using an object reference. 
  //
  // LabVIEWModule_Set_NodeUsesDataValueReferenceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_NodeUsesDataValueReferenceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_NodeUsesDataValueReferenceResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Indicates that the step accesses a LabVIEW class indirectly through a Data Reference Value (DVR) rather than directly by using an object reference. 
  //
  rpc Set_NodeUsesDataValueReference(LabVIEWModule_Set_NodeUsesDataValueReferenceRequest) returns (LabVIEWModule_Set_NodeUsesDataValueReferenceResponse);
  rpc Get_NodeUsesDataValueReference(LabVIEWModule_Get_NodeUsesDataValueReferenceRequest) returns (LabVIEWModule_Get_NodeUsesDataValueReferenceResponse);
  
  
  // Property: NodeIgnoresInternalErrors
  //
  // Indicates that a LabVIEW Property Node should continue to process any remaining properties in the node when it encounters an error while accessing a property.
  //
  // LabVIEWModule_Set_NodeIgnoresInternalErrorsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: bool - Indicates that a LabVIEW Property Node should continue to process any remaining properties in the node when it encounters an error while accessing a property. 
  //
  // LabVIEWModule_Set_NodeIgnoresInternalErrorsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_NodeIgnoresInternalErrorsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_NodeIgnoresInternalErrorsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Indicates that a LabVIEW Property Node should continue to process any remaining properties in the node when it encounters an error while accessing a property. 
  //
  rpc Set_NodeIgnoresInternalErrors(LabVIEWModule_Set_NodeIgnoresInternalErrorsRequest) returns (LabVIEWModule_Set_NodeIgnoresInternalErrorsResponse);
  rpc Get_NodeIgnoresInternalErrors(LabVIEWModule_Get_NodeIgnoresInternalErrorsRequest) returns (LabVIEWModule_Get_NodeIgnoresInternalErrorsResponse);
  
  
  // Property: NodeProperties
  //
  // Contains the properties to use in a step configured to call a LabVIEW Property Node.
  //
  // LabVIEWModule_Get_NodePropertiesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_NodePropertiesResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNodePropertiesInstance - Contains the properties to use in a step configured to call a LabVIEW Property Node. 
  //
  rpc Get_NodeProperties(LabVIEWModule_Get_NodePropertiesRequest) returns (LabVIEWModule_Get_NodePropertiesResponse);
  
  
  // Property: NodeOperationMode
  //
  // Indicates the mode of operation of the Configure Property Node dialog box for LabVIEW property calls.
  //
  // LabVIEWModule_Set_NodeOperationModeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: LabVIEWNodeOperationModes - Indicates the mode of operation of the Configure Property Node dialog box for LabVIEW property calls. 
  //
  // LabVIEWModule_Set_NodeOperationModeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_NodeOperationModeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_NodeOperationModeResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNodeOperationModes - Indicates the mode of operation of the Configure Property Node dialog box for LabVIEW property calls. 
  //
  rpc Set_NodeOperationMode(LabVIEWModule_Set_NodeOperationModeRequest) returns (LabVIEWModule_Set_NodeOperationModeResponse);
  rpc Get_NodeOperationMode(LabVIEWModule_Get_NodeOperationModeRequest) returns (LabVIEWModule_Get_NodeOperationModeResponse);
  
  
  // Property: OverrideModuleOptions
  //
  // Specifies the override option to use.
  //
  // LabVIEWModule_Set_OverrideModuleOptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: LabVIEWModuleOverrideOptions - Specifies the override option to use. 
  //
  // LabVIEWModule_Set_OverrideModuleOptionsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_OverrideModuleOptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_OverrideModuleOptionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWModuleOverrideOptions - Specifies the override option to use. 
  //
  rpc Set_OverrideModuleOptions(LabVIEWModule_Set_OverrideModuleOptionsRequest) returns (LabVIEWModule_Set_OverrideModuleOptionsResponse);
  rpc Get_OverrideModuleOptions(LabVIEWModule_Get_OverrideModuleOptionsRequest) returns (LabVIEWModule_Get_OverrideModuleOptionsResponse);
  
  
  // Property: BuildSpecificationName
  //
  // Specifies the name of the build specification used to build the packed project library.
  //
  // LabVIEWModule_Set_BuildSpecificationNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: string - Specifies the name of the build specification used to build the packed project library. 
  //
  // LabVIEWModule_Set_BuildSpecificationNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_BuildSpecificationNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_BuildSpecificationNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the name of the build specification used to build the packed project library. 
  //
  rpc Set_BuildSpecificationName(LabVIEWModule_Set_BuildSpecificationNameRequest) returns (LabVIEWModule_Set_BuildSpecificationNameResponse);
  rpc Get_BuildSpecificationName(LabVIEWModule_Get_BuildSpecificationNameRequest) returns (LabVIEWModule_Get_BuildSpecificationNameResponse);
  
  
  // Property: OverrideBinaryVIPath
  //
  // Specifies the path of the VI in the packed project library, configured in the Override Module Settings window, that the LabVIEW Adapter runs if Always run VI in Packed Project Library is enabled.
  //
  // You can specify an absolute or relative pathname for the file. Relative pathnames are relative to the TestStand search directory paths.
  //
  // LabVIEWModule_Set_OverrideBinaryVIPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: string - Specifies the path of the VI in the packed project library, configured in the Override Module Settings window, that the LabVIEW Adapter runs if Always run VI in Packed Project Library is enabled. 
  //
  // LabVIEWModule_Set_OverrideBinaryVIPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_OverrideBinaryVIPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_OverrideBinaryVIPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the path of the VI in the packed project library, configured in the Override Module Settings window, that the LabVIEW Adapter runs if Always run VI in Packed Project Library is enabled. 
  //
  rpc Set_OverrideBinaryVIPath(LabVIEWModule_Set_OverrideBinaryVIPathRequest) returns (LabVIEWModule_Set_OverrideBinaryVIPathResponse);
  rpc Get_OverrideBinaryVIPath(LabVIEWModule_Get_OverrideBinaryVIPathRequest) returns (LabVIEWModule_Get_OverrideBinaryVIPathResponse);
  
  
  // Property: OverrideBinaryProjectPath
  //
  // Specifies the path of the LabVIEW project that the LabVIEW Adapter runs when Always run VI in Packed Project Library is enabled.
  //
  // You can specify an absolute or relative pathname for the file. Relative pathnames are relative to the TestStand search directory paths.
  //
  // LabVIEWModule_Set_OverrideBinaryProjectPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: string - Specifies the path of the LabVIEW project that the LabVIEW Adapter runs when Always run VI in Packed Project Library is enabled. 
  //
  // LabVIEWModule_Set_OverrideBinaryProjectPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_OverrideBinaryProjectPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_OverrideBinaryProjectPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the path of the LabVIEW project that the LabVIEW Adapter runs when Always run VI in Packed Project Library is enabled. 
  //
  rpc Set_OverrideBinaryProjectPath(LabVIEWModule_Set_OverrideBinaryProjectPathRequest) returns (LabVIEWModule_Set_OverrideBinaryProjectPathResponse);
  rpc Get_OverrideBinaryProjectPath(LabVIEWModule_Get_OverrideBinaryProjectPathRequest) returns (LabVIEWModule_Get_OverrideBinaryProjectPathResponse);
  
  
  // Property: OverrideBinaryClassPath
  //
  // Specifies the path of the LabVIEW class in the packed project library, configured in the Override Module Settings window, used if Always run VI in Packed Project Library is enabled.
  //
  // You can specify an absolute or relative pathname for the file. Relative pathnames are relative to the TestStand search directory paths.
  //
  // LabVIEWModule_Set_OverrideBinaryClassPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: string - Specifies the path of the LabVIEW class in the packed project library, configured in the Override Module Settings window, used if Always run VI in Packed Project Library is enabled. 
  //
  // LabVIEWModule_Set_OverrideBinaryClassPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_OverrideBinaryClassPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_OverrideBinaryClassPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the path of the LabVIEW class in the packed project library, configured in the Override Module Settings window, used if Always run VI in Packed Project Library is enabled. 
  //
  rpc Set_OverrideBinaryClassPath(LabVIEWModule_Set_OverrideBinaryClassPathRequest) returns (LabVIEWModule_Set_OverrideBinaryClassPathResponse);
  rpc Get_OverrideBinaryClassPath(LabVIEWModule_Get_OverrideBinaryClassPathRequest) returns (LabVIEWModule_Get_OverrideBinaryClassPathResponse);
  
  
  // Property: OverrideBinaryNamespace
  //
  // Returns the LabVIEW namespace of the binary VI. The namespace of the binary VI is the qualified name of the owning LabVIEW project library.
  //
  // LabVIEWModule_Set_OverrideBinaryNamespaceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: string - Returns the LabVIEW namespace of the binary VI. The namespace of the binary VI is the qualified name of the owning LabVIEW project library. 
  //
  // LabVIEWModule_Set_OverrideBinaryNamespaceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_OverrideBinaryNamespaceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_OverrideBinaryNamespaceResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the LabVIEW namespace of the binary VI. The namespace of the binary VI is the qualified name of the owning LabVIEW project library. 
  //
  rpc Set_OverrideBinaryNamespace(LabVIEWModule_Set_OverrideBinaryNamespaceRequest) returns (LabVIEWModule_Set_OverrideBinaryNamespaceResponse);
  rpc Get_OverrideBinaryNamespace(LabVIEWModule_Get_OverrideBinaryNamespaceRequest) returns (LabVIEWModule_Get_OverrideBinaryNamespaceResponse);
  
  
  // Property: MatchArrayParametersToLabVIEWArrayDimensions
  //
  // When True, specifies that all array parameters of the LabVIEW Module must match the corresponding LabVIEW control or indicator in size for each dimension.
  //
  // There is a known issue in TestStand that causes the array parameters in a code module to have the dimensions transposed compared to the corresponding LabVIEW control or indicator. For example, if the LabVIEW array has a size of [2][4][1], then the corresponding TestStand parameter would have a size of [1][4][2] when using default values for the parameter. This issue also causes array data to be incorrectly transposed when TestStand passes the data to LabVIEW.
  // Use MatchArrayParametersToLabVIEWArrayDimensions to correct this behavior on a per-step basis. This property affects the processing of all array parameters in the code module. When MatchArrayParametersToLabVIEWArrayDimensions is True, the TestStand array parameter and the LabVIEW array have the same size for default values, and the data at each index of the array in TestStand and LabVIEW will be the same when passing arrays during execution.
  // Note: If the value of this property is changed, then the module must be reloaded before it can be executed. Call LabVIEWModule.LoadPrototype to reload the code module.
  //
  // LabVIEWModule_Set_MatchArrayParametersToLabVIEWArrayDimensionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //    - propertyValue: bool - When True, specifies that all array parameters of the LabVIEW Module must match the corresponding LabVIEW control or indicator in size for each dimension. 
  //
  // LabVIEWModule_Set_MatchArrayParametersToLabVIEWArrayDimensionsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWModule_Get_MatchArrayParametersToLabVIEWArrayDimensionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWModuleInstance - The id of the LabVIEWModule object.
  //
  // LabVIEWModule_Get_MatchArrayParametersToLabVIEWArrayDimensionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When True, specifies that all array parameters of the LabVIEW Module must match the corresponding LabVIEW control or indicator in size for each dimension. 
  //
  rpc Set_MatchArrayParametersToLabVIEWArrayDimensions(LabVIEWModule_Set_MatchArrayParametersToLabVIEWArrayDimensionsRequest) returns (LabVIEWModule_Set_MatchArrayParametersToLabVIEWArrayDimensionsResponse);
  rpc Get_MatchArrayParametersToLabVIEWArrayDimensions(LabVIEWModule_Get_MatchArrayParametersToLabVIEWArrayDimensionsRequest) returns (LabVIEWModule_Get_MatchArrayParametersToLabVIEWArrayDimensionsResponse);
  
  
}
message LabVIEWArgumentsInstance {
  // Specifies the handle of the LabVIEWArguments instance in the server.
  string id = 1;
}

message LabVIEWParametersInstance {
  // Specifies the handle of the LabVIEWParameters instance in the server.
  string id = 1;
}

message LabVIEWNodePropertiesInstance {
  // Specifies the handle of the LabVIEWNodeProperties instance in the server.
  string id = 1;
}
message LabVIEWModule_AsModuleRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_AsModuleResponse {
  // The return type of the Module object.
  ModuleInstance returnValue = 1;
}

message LabVIEWModule_LoadPrototypeRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Specifies whether to reset the LabVIEWParameter.ValueExpr property of the existing parameter values when loading a new prototype.
  bool discardParameterValues = 2;
}

message LabVIEWModule_LoadPrototypeResponse {
  // Returns a value that indicates whether the prototype of the VI was loaded. This method usually returns True.
  bool returnValue = 1;
}

message LabVIEWModule_ExportVIRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Specifies an existing directory path with a trailing slash or an empty string. This method returns the full path of the exported VI. The VI filename is generated using the ID of the parent step of the module. If an existing directory path is passed, the VI is exported to the given directory. If an empty string is passed, then the VI is exported to a temporary file. The temporary file is deleted when the TestStand Engine shuts down.
  string pathString = 2;
  // Reserved for future use. Pass 0.
  int32 options = 3;
}

message LabVIEWModule_ExportVIResponse {
  // Specifies an existing directory path with a trailing slash or an empty string. This method returns the full path of the exported VI. The VI filename is generated using the ID of the parent step of the module. If an existing directory path is passed, the VI is exported to the given directory. If an empty string is passed, then the VI is exported to a temporary file. The temporary file is deleted when the TestStand Engine shuts down.
  string pathString = 1;
}

message LabVIEWModule_ImportVIRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Specifies the pathname of the file to import into the module. Pass an empty path to remove an imported VI from the module.
  string pathString = 2;
  // Specifies the type of VI to import.
  ImportVITypes Type = 3;
  // Specifies one or more ImportVIOptions constants. Use the bitwise-OR operator to specify multiple flags.
  ImportVIOptions options = 4;
}

message LabVIEWModule_ImportVIResponse {
}

message LabVIEWModule_ConvertExpressVIToStandardVIRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Specifies a string containing the absolute pathname of the new VI to create.
  string newVIPath = 2;
}

message LabVIEWModule_ConvertExpressVIToStandardVIResponse {
  // Returns a value that indicates whether TestStand successfully converted the Express VI to a standard VI.
  bool returnValue = 1;
}

message LabVIEWModule_LoadVIInfoRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_LoadVIInfoResponse {
  // Returns a value that indicates whether the prototype of the VI specified in the step matches the prototype of the VI on disk.
  bool returnValue = 1;
}

message LabVIEWModule_ExecuteRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Specifies the SequenceContext object that this method uses to evaluate each of the LabVIEWParameter.ValueExpr expressions in the module parameters. Pass NULL for this parameter if you pass a LabVIEWArguments collection to the argumentsParam parameter.
  SequenceContextInstance sequenceContextParam = 2;
  // Specifies the argument collection that contains the argument values to pass to the VI. Pass NULL for this parameter to pass the values obtained from evaluating each of the LabVIEWParameter.ValueExpr expressions in the module parameters.
  LabVIEWArgumentsInstance argumentsParam = 3;
}

message LabVIEWModule_ExecuteResponse {
}

message LabVIEWModule_CreateProjectRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_CreateProjectResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message LabVIEWModule_EditProjectRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_EditProjectResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message LabVIEWModule_DisplaySelectVIFromProjectDialogRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Pass LVProjectPathType_Remote to use the value of the LabVIEWModule.RemoteProjectPath property. Pass LVProjectPathType_Local to use the value of the LabVIEWModule.ProjectPath property.
  LabVIEWProjectPathTypes pathToUse = 2;
}

message LabVIEWModule_DisplaySelectVIFromProjectDialogResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message LabVIEWModule_IsProjectValidRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_IsProjectValidResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
  // Returns a string with the error description when the method returns False.
  string errorDescription = 2;
}

message LabVIEWModule_GetVIAbsolutePathRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_GetVIAbsolutePathResponse {
  // Returns True if TestStand finds the file.
  bool returnValue = 1;
  // Returns the absolute path of the VI. If TestStand does not find the VI, this parameter returns an empty string.
  string viAbsolutePath = 2;
}

message LabVIEWModule_GetProjectUrlPathsForVIsRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Pass LVProjectPathType_Remote to use the value of the LabVIEWModule.RemoteProjectPath property. Pass LVProjectPathType_Local to use the value of the LabVIEWModule.ProjectPath property.
  LabVIEWProjectPathTypes pathToUse = 2;
}

message LabVIEWModule_GetProjectUrlPathsForVIsResponse {
  // Returns the list of URL paths for the VIs in the LabVIEW project you select.
  repeated string items = 1;
}

message LabVIEWModule_FindVIUrlUsingVIPathRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Pass LVProjectPathType_Remote to use the value of the LabVIEWModule.RemoteProjectPath property. Pass LVProjectPathType_Local to use the value of the LabVIEWModule.ProjectPath property.
  LabVIEWProjectPathTypes pathToUse = 2;
}

message LabVIEWModule_FindVIUrlUsingVIPathResponse {
  // Returns a value that indicates whether TestStand successfully found a URL for the VI.
  bool returnValue = 1;
  // Returns the VI URL path in the LabVIEW project you select.
  string viUrl = 2;
}

message LabVIEWModule_DisplaySelectClassFromProjectDialogRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Reserved for future use.
  int32 reserved = 2;
}

message LabVIEWModule_DisplaySelectClassFromProjectDialogResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message LabVIEWModule_GetClassAbsolutePathRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_GetClassAbsolutePathResponse {
  // Returns True if TestStand finds the file.
  bool returnValue = 1;
  // Returns the absolute path of the LabVIEW class. If TestStand does not find the class, this parameter returns an empty string.
  string classAbsolutePath = 2;
}

message LabVIEWModule_FindClassUrlUsingClassPathRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_FindClassUrlUsingClassPathResponse {
  // Returns True if TestStand successfully finds a URL for the LabVIEW class.
  bool returnValue = 1;
  // Returns the LabVIEW class URL path in the LabVIEW project you select.
  string classUrl = 2;
}

message LabVIEWModule_GetProjectUrlPathsForClassesRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_GetProjectUrlPathsForClassesResponse {
  // The return type of the String[] object.
  repeated string returnValue = 1;
}

message LabVIEWModule_DisplaySelectClassMemberFromProjectDialogRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Reserved for future use.
  int32 reserved = 2;
}

message LabVIEWModule_DisplaySelectClassMemberFromProjectDialogResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message LabVIEWModule_DisplaySelectMemberFromClassDialogRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Reserved for future use.
  int32 reserved = 2;
}

message LabVIEWModule_DisplaySelectMemberFromClassDialogResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message LabVIEWModule_DisplayParameterMappingDialogRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Pass the CommonDlgOption_ReadOnly constant to display the Parameter Name/Mapping dialog box in read-only mode when the step type cannot be changed.
  int32 commonDialogOptions = 2;
}

message LabVIEWModule_DisplayParameterMappingDialogResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message LabVIEWModule_EditClassRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_EditClassResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message LabVIEWModule_ConvertToStandardVIRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Specifies the file path for the new VI to create on disk.
  string newVIPath = 2;
  // Reserved for future use.
  int32 options = 3;
}

message LabVIEWModule_ConvertToStandardVIResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message LabVIEWModule_GetVIAbsolutePathExRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Use the following constants with this data type:
  // * LabVIEWOverrideType_Default - (Value: 0) Indicates to use the VI specified in the step.    * LabVIEWOverrideType_PPL - (Value: 1) Indicates to use the VI specified in the packed project library configured in the Override Module Settings window.
  LabVIEWModuleOverrideTypes propertyValue = 2;
}

message LabVIEWModule_GetVIAbsolutePathExResponse {
  // Returns True if TestStand finds the file.
  bool returnValue = 1;
  // Returns the absolute path of the VI. If TestStand does not find the VI, this parameter returns an empty string.
  string viAbsolutePath = 2;
}

message LabVIEWModule_FindVIUrlUsingVIPathExRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Use the following constants with this data type:
  // * LabVIEWOverrideType_Default - (Value: 0) Indicates to use the VI specified in the step.    * LabVIEWOverrideType_PPL - (Value: 1) Indicates to use the VI specified in the packed project library configured in the Override Module Settings window.
  LabVIEWModuleOverrideTypes propertyValue = 2;
  // Pass LVProjectPathType_Remote to use the value of the LabVIEWModule.RemoteProjectPath property. Pass LVProjectPathType_Local to use the value of the LabVIEWModule.ProjectPath property.
  LabVIEWProjectPathTypes pathToUse = 3;
}

message LabVIEWModule_FindVIUrlUsingVIPathExResponse {
  // Returns a value that indicates whether TestStand successfully found a URL for the VI in the project.
  bool returnValue = 1;
  // Returns the VI URL path in the LabVIEW project you select.
  string viUrl = 2;
}

message LabVIEWModule_GetClassAbsolutePathExRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Use the following constants with this data type:
  // * LabVIEWOverrideType_Default - (Value: 0) Indicates to use the VI specified in the step.    * LabVIEWOverrideType_PPL - (Value: 1) Indicates to use the VI specified in the packed project library configured in the Override Module Settings window.
  LabVIEWModuleOverrideTypes propertyValue = 2;
}

message LabVIEWModule_GetClassAbsolutePathExResponse {
  // Returns True if TestStand finds the file.
  bool returnValue = 1;
  // Returns the absolute path of the LabVIEW class. If TestStand does not find the class, this parameter returns an empty string.
  string sourceClassAbsolutePath = 2;
}

message LabVIEWModule_FindClassUrlUsingClassPathExRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Use the following constants with this data type:
  // * LabVIEWOverrideType_Default - (Value: 0) Indicates to use the VI specified in the step.    * LabVIEWOverrideType_PPL - (Value: 1) Indicates to use the VI specified in the packed project library configured in the Override Module Settings window.
  LabVIEWModuleOverrideTypes propertyValue = 2;
}

message LabVIEWModule_FindClassUrlUsingClassPathExResponse {
  // Returns True if TestStand successfully finds a URL for the LabVIEW class.
  bool returnValue = 1;
  // Returns the LabVIEW class URL path in the LabVIEW project you select.
  string sourceClassUrl = 2;
}

message LabVIEWModule_GetBinaryBuildSpecificationsRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_GetBinaryBuildSpecificationsResponse {
  // Returns a list of the build specifications found in the project that are configured to build packed project libraries.
  repeated string buildSpecifications = 1;
}

message LabVIEWModule_BuildBinaryRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_BuildBinaryResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message LabVIEWModule_DisplaySelectVIFromProjectDialogExRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Pass LVProjectPathType_Remote to use the value of the LabVIEWModule.RemoteProjectPath property. Pass LVProjectPathType_Local to use the value of the LabVIEWModule.ProjectPath property.
  LabVIEWProjectPathTypes pathToUse = 2;
  // Use the following constants with this data type:
  // * LabVIEWOverrideType_Default - (Value: 0) Indicates to use the VI specified in the step.    * LabVIEWOverrideType_PPL - (Value: 1) Indicates to use the VI specified in the packed project library configured in the Override Module Settings window.
  LabVIEWModuleOverrideTypes propertyValue = 3;
}

message LabVIEWModule_DisplaySelectVIFromProjectDialogExResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message LabVIEWModule_DisplaySelectClassFromProjectDialogExRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Reserved for future use.
  int32 reserved = 2;
  // Use the following constants with this data type:
  // * LabVIEWOverrideType_Default - (Value: 0) Indicates to use the VI specified in the step.    * LabVIEWOverrideType_PPL - (Value: 1) Indicates to use the VI specified in the packed project library configured in the Override Module Settings window.
  LabVIEWModuleOverrideTypes propertyValue = 3;
}

message LabVIEWModule_DisplaySelectClassFromProjectDialogExResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message LabVIEWModule_ValidateOverrideSettingsRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Not used.
  ValidateOverrideSettingsOptions options = 2;
}

message LabVIEWModule_ValidateOverrideSettingsResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
  // Specifies the error found while validating the override settings.
  string errorMessage = 2;
}

message LabVIEWModule_Set_VIPathRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Specifies the path and name of the VI the LabVIEWModule calls. For remote systems, this property specifies which VI the module calls unless the LabVIEWModule.RemoteVIPath property specifies a path and name of a VI.
  string propertyValue = 2;
}

message LabVIEWModule_Set_VIPathResponse {
}

message LabVIEWModule_Get_VIPathRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_VIPathResponse {
  // Specifies the path and name of the VI the LabVIEWModule calls. For remote systems, this property specifies which VI the module calls unless the LabVIEWModule.RemoteVIPath property specifies a path and name of a VI.
  string returnValue = 1;
}

message LabVIEWModule_Set_VICallOptionsRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Specifies options for calling the VI of the module.
  int32 propertyValue = 2;
}

message LabVIEWModule_Set_VICallOptionsResponse {
}

message LabVIEWModule_Get_VICallOptionsRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_VICallOptionsResponse {
  // Specifies options for calling the VI of the module.
  LabVIEWModuleCallOptions returnValue = 1;
}

message LabVIEWModule_Set_RemoteHostRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Specifies the remote system on which to run the VI. Leave this property empty if you are not using a remote system.
  string propertyValue = 2;
}

message LabVIEWModule_Set_RemoteHostResponse {
}

message LabVIEWModule_Get_RemoteHostRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_RemoteHostResponse {
  // Specifies the remote system on which to run the VI. Leave this property empty if you are not using a remote system.
  string returnValue = 1;
}

message LabVIEWModule_Set_SpecifyHostByExpressionRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Specifies that the LabVIEWModule.RemoteHost property contains an expression the LabVIEW Adapter evaluates at run time to determine the name of the remote host.
  bool propertyValue = 2;
}

message LabVIEWModule_Set_SpecifyHostByExpressionResponse {
}

message LabVIEWModule_Get_SpecifyHostByExpressionRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_SpecifyHostByExpressionResponse {
  // Specifies that the LabVIEWModule.RemoteHost property contains an expression the LabVIEW Adapter evaluates at run time to determine the name of the remote host.
  bool returnValue = 1;
}

message LabVIEWModule_Set_RemoteVIPathRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Specifies the path and name of the VI the step calls on the remote system.
  string propertyValue = 2;
}

message LabVIEWModule_Set_RemoteVIPathResponse {
}

message LabVIEWModule_Get_RemoteVIPathRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_RemoteVIPathResponse {
  // Specifies the path and name of the VI the step calls on the remote system.
  string returnValue = 1;
}

message LabVIEWModule_Set_RemotePortNumberRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Specifies the port number to use to connect to the remote system.
  int32 propertyValue = 2;
}

message LabVIEWModule_Set_RemotePortNumberResponse {
}

message LabVIEWModule_Get_RemotePortNumberRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_RemotePortNumberResponse {
  // Specifies the port number to use to connect to the remote system.
  int32 returnValue = 1;
}

message LabVIEWModule_Set_RemoteConnectionTimeoutRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Specifies the time to wait for a connection before timing out, in milliseconds.
  int32 propertyValue = 2;
}

message LabVIEWModule_Set_RemoteConnectionTimeoutResponse {
}

message LabVIEWModule_Get_RemoteConnectionTimeoutRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_RemoteConnectionTimeoutResponse {
  // Specifies the time to wait for a connection before timing out, in milliseconds.
  int32 returnValue = 1;
}

message LabVIEWModule_Get_VIDescriptionRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_VIDescriptionResponse {
  // Returns the description of the VI.
  string returnValue = 1;
}

message LabVIEWModule_Get_ParametersRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_ParametersResponse {
  // The collection of parameters.
  LabVIEWParametersInstance returnValue = 1;
}

message LabVIEWModule_Set_VITypeRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Specifies the type of VI the module is calling.
  LabVIEWVITypes propertyValue = 2;
}

message LabVIEWModule_Set_VITypeResponse {
}

message LabVIEWModule_Get_VITypeRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_VITypeResponse {
  // Specifies the type of VI the module is calling.
  LabVIEWVITypes returnValue = 1;
}

message LabVIEWModule_Get_ExpressVINameRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_ExpressVINameResponse {
  // Returns the name of the Express VI the module is calling.
  string returnValue = 1;
}

message LabVIEWModule_Get_VIAttachedRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_VIAttachedResponse {
  // Returns a value that indicates whether the module contains an embedded VI.
  bool returnValue = 1;
}

message LabVIEWModule_Get_HelpPictureRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_HelpPictureResponse {
  // Returns the context help picture of the VI that the module calls.
  IPictureDispInstance returnValue = 1;
}

message LabVIEWModule_Get_HelpPictureRectsRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_HelpPictureRectsResponse {
  // Returns a PropertyObject array where each element of the array is a PropertyObject that represents a wired terminal on the VI connector pane. The order of the terminals corresponds to the order of the parameters the LabVIEWModule.Parameters property returns. Each element of the array contains two properties, LabelRect and TerminalRect. Each property contains the following four subproperties: Top, Bottom, Left, and Right that represent the absolute coordinate values of the rectangle for the label or the terminal.
  PropertyObjectInstance returnValue = 1;
}

message LabVIEWModule_Get_HelpFilePathRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_HelpFilePathResponse {
  // Returns the absolute path to the help file of the VI the module calls.
  string returnValue = 1;
}

message LabVIEWModule_Get_HelpContextRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_HelpContextResponse {
  // Returns the tag for the help topic of the VI the module calls.
  string returnValue = 1;
}

message LabVIEWModule_Set_ProjectPathRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Specifies the path and name of the LabVIEW project the LabVIEWModule calls.
  string propertyValue = 2;
}

message LabVIEWModule_Set_ProjectPathResponse {
}

message LabVIEWModule_Get_ProjectPathRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_ProjectPathResponse {
  // Specifies the path and name of the LabVIEW project the LabVIEWModule calls.
  string returnValue = 1;
}

message LabVIEWModule_Set_RemoteProjectPathRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Specifies the path and name of the LabVIEW project the step calls on the remote system. Use the LabVIEWModule.RemoteVIPath property to specify the URL of the VI to call within the defined LabVIEW project.
  string propertyValue = 2;
}

message LabVIEWModule_Set_RemoteProjectPathResponse {
}

message LabVIEWModule_Get_RemoteProjectPathRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_RemoteProjectPathResponse {
  // Specifies the path and name of the LabVIEW project the step calls on the remote system. Use the LabVIEWModule.RemoteVIPath property to specify the URL of the VI to call within the defined LabVIEW project.
  string returnValue = 1;
}

message LabVIEWModule_Set_NamespaceRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Returns the LabVIEW namespace of the VI. The namespace of the VI is the qualified name of the owning LabVIEW project library.
  string propertyValue = 2;
}

message LabVIEWModule_Set_NamespaceResponse {
}

message LabVIEWModule_Get_NamespaceRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_NamespaceResponse {
  // Returns the LabVIEW namespace of the VI. The namespace of the VI is the qualified name of the owning LabVIEW project library.
  string returnValue = 1;
}

message LabVIEWModule_Get_ConfiguredWithOldChecksumRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_ConfiguredWithOldChecksumResponse {
  // 
  bool returnValue = 1;
}

message LabVIEWModule_Get_LabVIEWVersionThatWillBeUsedToRunVIRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_LabVIEWVersionThatWillBeUsedToRunVIResponse {
  // 
  string returnValue = 1;
}

message LabVIEWModule_Set_TDChecksumRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // 
  int32 propertyValue = 2;
}

message LabVIEWModule_Set_TDChecksumResponse {
}

message LabVIEWModule_Get_TDChecksumRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_TDChecksumResponse {
  // 
  int32 returnValue = 1;
}

message LabVIEWModule_Set_CallTypeRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Specifies the type of call the code module executes.
  LabVIEWCallTypes propertyValue = 2;
}

message LabVIEWModule_Set_CallTypeResponse {
}

message LabVIEWModule_Get_CallTypeRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_CallTypeResponse {
  // Specifies the type of call the code module executes.
  LabVIEWCallTypes returnValue = 1;
}

message LabVIEWModule_Set_ClassPathRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Specifies the path and name of the LabVIEW class the LabVIEWModule object calls.
  string propertyValue = 2;
}

message LabVIEWModule_Set_ClassPathResponse {
}

message LabVIEWModule_Get_ClassPathRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_ClassPathResponse {
  // Specifies the path and name of the LabVIEW class the LabVIEWModule object calls.
  string returnValue = 1;
}

message LabVIEWModule_Set_CallNameRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Returns the name of the LabVIEW class member VI the code module calls.
  string propertyValue = 2;
}

message LabVIEWModule_Set_CallNameResponse {
}

message LabVIEWModule_Get_CallNameRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_CallNameResponse {
  // Returns the name of the LabVIEW class member VI the code module calls.
  string returnValue = 1;
}

message LabVIEWModule_Set_NodeLibraryNameRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Specifies the LabVIEW I/O Library Name when calling a LabVIEW Property Node.
  string propertyValue = 2;
}

message LabVIEWModule_Set_NodeLibraryNameResponse {
}

message LabVIEWModule_Get_NodeLibraryNameRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_NodeLibraryNameResponse {
  // Specifies the LabVIEW I/O Library Name when calling a LabVIEW Property Node.
  string returnValue = 1;
}

message LabVIEWModule_Set_NodeLibraryGenericTypeNameRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Specifies the LabVIEW I/O Library Generic Type Name when calling a LabVIEW Property Node.
  string propertyValue = 2;
}

message LabVIEWModule_Set_NodeLibraryGenericTypeNameResponse {
}

message LabVIEWModule_Get_NodeLibraryGenericTypeNameRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_NodeLibraryGenericTypeNameResponse {
  // Specifies the LabVIEW I/O Library Generic Type Name when calling a LabVIEW Property Node.
  string returnValue = 1;
}

message LabVIEWModule_Set_NodeClassDataNameRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Specifies the LabVIEW I/O Library Class Data Name when calling a LabVIEW Property Node.
  string propertyValue = 2;
}

message LabVIEWModule_Set_NodeClassDataNameResponse {
}

message LabVIEWModule_Get_NodeClassDataNameRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_NodeClassDataNameResponse {
  // Specifies the LabVIEW I/O Library Class Data Name when calling a LabVIEW Property Node.
  string returnValue = 1;
}

message LabVIEWModule_Set_NodeUsesDataValueReferenceRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Indicates that the step accesses a LabVIEW class indirectly through a Data Reference Value (DVR) rather than directly by using an object reference.
  bool propertyValue = 2;
}

message LabVIEWModule_Set_NodeUsesDataValueReferenceResponse {
}

message LabVIEWModule_Get_NodeUsesDataValueReferenceRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_NodeUsesDataValueReferenceResponse {
  // Indicates that the step accesses a LabVIEW class indirectly through a Data Reference Value (DVR) rather than directly by using an object reference.
  bool returnValue = 1;
}

message LabVIEWModule_Set_NodeIgnoresInternalErrorsRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Indicates that a LabVIEW Property Node should continue to process any remaining properties in the node when it encounters an error while accessing a property.
  bool propertyValue = 2;
}

message LabVIEWModule_Set_NodeIgnoresInternalErrorsResponse {
}

message LabVIEWModule_Get_NodeIgnoresInternalErrorsRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_NodeIgnoresInternalErrorsResponse {
  // Indicates that a LabVIEW Property Node should continue to process any remaining properties in the node when it encounters an error while accessing a property.
  bool returnValue = 1;
}

message LabVIEWModule_Get_NodePropertiesRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_NodePropertiesResponse {
  // Contains the properties to use in a step configured to call a LabVIEW Property Node.
  LabVIEWNodePropertiesInstance returnValue = 1;
}

message LabVIEWModule_Set_NodeOperationModeRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Indicates the mode of operation of the Configure Property Node dialog box for LabVIEW property calls.
  LabVIEWNodeOperationModes propertyValue = 2;
}

message LabVIEWModule_Set_NodeOperationModeResponse {
}

message LabVIEWModule_Get_NodeOperationModeRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_NodeOperationModeResponse {
  // Indicates the mode of operation of the Configure Property Node dialog box for LabVIEW property calls.
  LabVIEWNodeOperationModes returnValue = 1;
}

message LabVIEWModule_Set_OverrideModuleOptionsRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Specifies the override option to use.
  LabVIEWModuleOverrideOptions propertyValue = 2;
}

message LabVIEWModule_Set_OverrideModuleOptionsResponse {
}

message LabVIEWModule_Get_OverrideModuleOptionsRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_OverrideModuleOptionsResponse {
  // Specifies the override option to use.
  LabVIEWModuleOverrideOptions returnValue = 1;
}

message LabVIEWModule_Set_BuildSpecificationNameRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Specifies the name of the build specification used to build the packed project library.
  string propertyValue = 2;
}

message LabVIEWModule_Set_BuildSpecificationNameResponse {
}

message LabVIEWModule_Get_BuildSpecificationNameRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_BuildSpecificationNameResponse {
  // Specifies the name of the build specification used to build the packed project library.
  string returnValue = 1;
}

message LabVIEWModule_Set_OverrideBinaryVIPathRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Specifies the path of the VI in the packed project library, configured in the Override Module Settings window, that the LabVIEW Adapter runs if Always run VI in Packed Project Library is enabled.
  string propertyValue = 2;
}

message LabVIEWModule_Set_OverrideBinaryVIPathResponse {
}

message LabVIEWModule_Get_OverrideBinaryVIPathRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_OverrideBinaryVIPathResponse {
  // Specifies the path of the VI in the packed project library, configured in the Override Module Settings window, that the LabVIEW Adapter runs if Always run VI in Packed Project Library is enabled.
  string returnValue = 1;
}

message LabVIEWModule_Set_OverrideBinaryProjectPathRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Specifies the path of the LabVIEW project that the LabVIEW Adapter runs when Always run VI in Packed Project Library is enabled.
  string propertyValue = 2;
}

message LabVIEWModule_Set_OverrideBinaryProjectPathResponse {
}

message LabVIEWModule_Get_OverrideBinaryProjectPathRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_OverrideBinaryProjectPathResponse {
  // Specifies the path of the LabVIEW project that the LabVIEW Adapter runs when Always run VI in Packed Project Library is enabled.
  string returnValue = 1;
}

message LabVIEWModule_Set_OverrideBinaryClassPathRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Specifies the path of the LabVIEW class in the packed project library, configured in the Override Module Settings window, used if Always run VI in Packed Project Library is enabled.
  string propertyValue = 2;
}

message LabVIEWModule_Set_OverrideBinaryClassPathResponse {
}

message LabVIEWModule_Get_OverrideBinaryClassPathRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_OverrideBinaryClassPathResponse {
  // Specifies the path of the LabVIEW class in the packed project library, configured in the Override Module Settings window, used if Always run VI in Packed Project Library is enabled.
  string returnValue = 1;
}

message LabVIEWModule_Set_OverrideBinaryNamespaceRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // Returns the LabVIEW namespace of the binary VI. The namespace of the binary VI is the qualified name of the owning LabVIEW project library.
  string propertyValue = 2;
}

message LabVIEWModule_Set_OverrideBinaryNamespaceResponse {
}

message LabVIEWModule_Get_OverrideBinaryNamespaceRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_OverrideBinaryNamespaceResponse {
  // Returns the LabVIEW namespace of the binary VI. The namespace of the binary VI is the qualified name of the owning LabVIEW project library.
  string returnValue = 1;
}

message LabVIEWModule_Set_MatchArrayParametersToLabVIEWArrayDimensionsRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
  // When True, specifies that all array parameters of the LabVIEW Module must match the corresponding LabVIEW control or indicator in size for each dimension.
  bool propertyValue = 2;
}

message LabVIEWModule_Set_MatchArrayParametersToLabVIEWArrayDimensionsResponse {
}

message LabVIEWModule_Get_MatchArrayParametersToLabVIEWArrayDimensionsRequest {
  // The id of the LabVIEWModule object.
  LabVIEWModuleInstance instance = 1;
}

message LabVIEWModule_Get_MatchArrayParametersToLabVIEWArrayDimensionsResponse {
  // When True, specifies that all array parameters of the LabVIEW Module must match the corresponding LabVIEW control or indicator in size for each dimension.
  bool returnValue = 1;
}

// LabVIEWParameters
//
// Use objects from the LabVIEWParameters class to configure and obtain parameters for a module that uses the LabVIEW Adapter. Use the LabVIEWModule.Parameters property to obtain the collection of parameters for a module.
//
service LabVIEWParameters {
  // Method: NewArguments
  //
  // Creates and returns a new LabVIEWArguments collection. Use this collection to pass argument values to a LabVIEW module using the LabVIEWModule.Execute method.
  //
  // The new collection contains the same number of items as the LabVIEWParameters collection. To pass a argument value to a VI parameter, set the LabVIEWArgument.Value property on the item in the LabVIEWArguments collection that has the same index as the parameter in the LabVIEWParameters collection.
  //
  // LabVIEWParameters_NewArgumentsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParametersInstance - The id of the LabVIEWParameters object.
  //
  // LabVIEWParameters_NewArgumentsResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWArgumentsInstance - The return type of the LabVIEWArguments object.
  //
  rpc NewArguments(LabVIEWParameters_NewArgumentsRequest) returns (LabVIEWParameters_NewArgumentsResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // LabVIEWParameters_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWParametersInstance - The id of the LabVIEWParameters object.
  //    - index: int32 - Specifies the zero-based index of the parameter to retrieve.
  //
  // LabVIEWParameters_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWParameterInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(LabVIEWParameters_Get_ItemRequest) returns (LabVIEWParameters_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // LabVIEWParameters_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParametersInstance - The id of the LabVIEWParameters object.
  //
  // LabVIEWParameters_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(LabVIEWParameters_Get_CountRequest) returns (LabVIEWParameters_Get_CountResponse);
  
  
}
message LabVIEWParameterInstance {
  // Specifies the handle of the LabVIEWParameter instance in the server.
  string id = 1;
}
message LabVIEWParameters_NewArgumentsRequest {
  // The id of the LabVIEWParameters object.
  LabVIEWParametersInstance instance = 1;
}

message LabVIEWParameters_NewArgumentsResponse {
  // The return type of the LabVIEWArguments object.
  LabVIEWArgumentsInstance returnValue = 1;
}

message LabVIEWParameters_Get_ItemRequest {
  // The id of the LabVIEWParameters object.
  LabVIEWParametersInstance instance = 1;
  // Specifies the zero-based index of the parameter to retrieve.
  optional int32 index = 2;
}

message LabVIEWParameters_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  LabVIEWParameterInstance returnValue = 1;
}

message LabVIEWParameters_Get_CountRequest {
  // The id of the LabVIEWParameters object.
  LabVIEWParametersInstance instance = 1;
}

message LabVIEWParameters_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// LabVIEWParameter
//
// Use objects from the LabVIEWParameter class to configure and obtain LabVIEWParameter-specific information for an item in the LabVIEWParameters collection class.
//
service LabVIEWParameter {
  // Method: AsPropertyObject
  //
  // Returns the underlying PropertyObject that represents the LabVIEWParameter object.
  //
  // Use the PropertyObject to modify, add, or remove custom properties of the object.
  //
  // LabVIEWParameter_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(LabVIEWParameter_AsPropertyObjectRequest) returns (LabVIEWParameter_AsPropertyObjectResponse);
  
  
  // Method: GetDefaultArrayDimensionSize
  //
  // Returns the default size of the array corresponding to the zero-based index passed as input.
  //
  // The default size corresponds to the default size of the array control in the front panel of a VI. Call the LabVIEWModule.LoadVIInfo or Module.LoadPrototype method before calling this method.
  //
  // LabVIEWParameter_GetDefaultArrayDimensionSizeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //    - dimension: int32 - Specifies the zero-based index corresponding to one of the array dimensions.
  //
  // LabVIEWParameter_GetDefaultArrayDimensionSizeResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - The return type of the Int32 object.
  //
  rpc GetDefaultArrayDimensionSize(LabVIEWParameter_GetDefaultArrayDimensionSizeRequest) returns (LabVIEWParameter_GetDefaultArrayDimensionSizeResponse);
  
  
  // Method: GetArrayIndex
  //
  // Returns the index of the array element the offset parameter specifies.
  //
  // LabVIEWParameter_GetArrayIndexRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //    - offset: int32 - Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  //    - options: int32 - Reserved for future use. Pass 0.
  //
  // LabVIEWParameter_GetArrayIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - An array index string. Array index strings are a list of numbers enclosed in brackets that index each dimension of the array. For example, the following is an array index for a two dimensional array: [0][1]. 
  //
  rpc GetArrayIndex(LabVIEWParameter_GetArrayIndexRequest) returns (LabVIEWParameter_GetArrayIndexResponse);
  
  
  // Method: GetEnumValues
  //
  // Returns the enumeration constants for an enumeration parameter or returns the ring control values for a ring control parameter.
  //
  // Call the LabVIEWModule.LoadVIInfo method or the Module.LoadPrototype method before calling this method. The values stay in memory until the sequence file closes.
  // Note: TestStand supports ring control values only when you use LabVIEW 2012 and later.
  // Use the name and value of the property objects in the array this method returns to determine the name and value of the enumeration constants or ring controls.
  // Pass the return value of this method as the additionalConstants parameter of Expression.ValidateEvaluationType when checking the LabVIEWParameter.ValueExpr property for errors.
  // If you are using an ExpressionEdit control to display the value of the LabVIEWParameter.ValueExpr property, pass the return value of this method to the ExpressionEdit.SetAdditionalEvaluationConstants method to instruct the ExpressionEdit control to validate enumeration constants.
  //
  // LabVIEWParameter_GetEnumValuesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_GetEnumValuesResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated PropertyObjectInstance - Returns an array of property objects where each property object represents an enumeration value or a ring control value. 
  //
  rpc GetEnumValues(LabVIEWParameter_GetEnumValuesRequest) returns (LabVIEWParameter_GetEnumValuesResponse);
  
  
  // Method: UpdateClusterMapping
  //
  // Updates the expression values for the cluster parameter elements when the parameter specifies an expression value that evaluates to a named data type that enables cluster passing.
  //
  // This method is valid only on cluster parameters.
  //
  // LabVIEWParameter_UpdateClusterMappingRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //    - sequenceContext: SequenceContextInstance - Pass the sequence context that the dialog box uses to evaluate all value expressions. You can use the Engine.NewEditContext method to obtain an edit-time sequence context.
  //
  // LabVIEWParameter_UpdateClusterMappingResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the method updates any expression values for the elements of the cluster parameter. 
  //
  rpc UpdateClusterMapping(LabVIEWParameter_UpdateClusterMappingRequest) returns (LabVIEWParameter_UpdateClusterMappingResponse);
  
  
  // Method: DisplayCreateCustomDataTypeDialog
  //
  // Launches the Create/Update Custom Data Type from Cluster dialog box, in which you configure a new custom data type or update an existing custom type.
  //
  // LabVIEWParameter_DisplayCreateCustomDataTypeDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //    - sequenceContext: SequenceContextInstance - Specifies the sequence context the dialog box uses to obtain information about the sequence file. You can use the Engine.NewEditContext method to obtain an edit-time sequence context.
  //
  // LabVIEWParameter_DisplayCreateCustomDataTypeDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if you click OK in the dialog box. False if you click Cancel. 
  //
  rpc DisplayCreateCustomDataTypeDialog(LabVIEWParameter_DisplayCreateCustomDataTypeDialogRequest) returns (LabVIEWParameter_DisplayCreateCustomDataTypeDialogResponse);
  
  
  // Method: CreateDefaultArrayElements
  //
  // Creates all the default array elements of an array parameter.
  //
  // This method is valid only on array parameters and creates the elements only if the array control on the VI front panel defines default elements. TestStand replaces any existing array elements the parameter previously specified.
  //
  // LabVIEWParameter_CreateDefaultArrayElementsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_CreateDefaultArrayElementsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the default array elements were created. 
  //
  rpc CreateDefaultArrayElements(LabVIEWParameter_CreateDefaultArrayElementsRequest) returns (LabVIEWParameter_CreateDefaultArrayElementsResponse);
  
  
  // Method: DeleteArrayElements
  //
  // Deletes all the array elements.
  //
  // This method is valid only on array parameters.
  //
  // LabVIEWParameter_DeleteArrayElementsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_DeleteArrayElementsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc DeleteArrayElements(LabVIEWParameter_DeleteArrayElementsRequest) returns (LabVIEWParameter_DeleteArrayElementsResponse);
  
  
  // Method: InsertArrayElement
  //
  // Inserts an array element at the specified index.
  //
  // This method is valid only for one-dimensional array parameters. Use the LabVIEWParameter.ArrayDimensions property to determine the number of array dimensions.
  //
  // LabVIEWParameter_InsertArrayElementRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //    - index: int32 - Specifies the index at which to insert the array element. This value must be greater than or equal to 0 and less than or equal to the number of array elements.
  //
  // LabVIEWParameter_InsertArrayElementResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc InsertArrayElement(LabVIEWParameter_InsertArrayElementRequest) returns (LabVIEWParameter_InsertArrayElementResponse);
  
  
  // Method: DeleteArrayElement
  //
  // Deletes all the array elements.
  //
  // This method is valid only on array parameters.
  //
  // LabVIEWParameter_DeleteArrayElementRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_DeleteArrayElementResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc DeleteArrayElement(LabVIEWParameter_DeleteArrayElementRequest) returns (LabVIEWParameter_DeleteArrayElementResponse);
  
  
  // Method: ExprClusterTypeMismatch
  //
  // Returns True if you enable cluster mapping for the variable or property the expression value returns and the names or types of cluster elements do not match the LabVIEW cluster the VI specifies. Otherwise this method returns False.
  //
  // LabVIEWParameter_ExprClusterTypeMismatchRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //    - sequenceContext: SequenceContextInstance - Specifies the SequenceContext to use to evaluate the parameter expression value.
  //
  // LabVIEWParameter_ExprClusterTypeMismatchResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc ExprClusterTypeMismatch(LabVIEWParameter_ExprClusterTypeMismatchRequest) returns (LabVIEWParameter_ExprClusterTypeMismatchResponse);
  
  
  // Method: IsClusterMappingInvalid
  //
  // Returns a value that indicates whether the argument you specify for a LabVIEW cluster or cluster array parameter is valid by checking the cluster passing information for any custom data types used to confirm that the information matches the cluster definition stored when you specified the module.
  // Note: This method does not load the VI you specify. The method relies on the cluster information stored for the parameter when the module was last specified.
  //
  // LabVIEWParameter_IsClusterMappingInvalidRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_IsClusterMappingInvalidResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True when all the following conditions are true:    * The parameter is a cluster or cluster array    * The argument expression is valid and non-empty    * The argument or cluster mapping of the argument is invalid In all other cases, this method returns False. 
  //    - reasonNotValid: strin - When this method returns True, this parameter returns the reason why the argument is invalid.
  //
  rpc IsClusterMappingInvalid(LabVIEWParameter_IsClusterMappingInvalidRequest) returns (LabVIEWParameter_IsClusterMappingInvalidResponse);
  
  
  // Method: IsParameterMappingValid
  //
  // Returns a value that indicates whether the argument you specify for a LabVIEW cluster or cluster array parameter is valid.
  //
  // This method checks the cluster passing information for any custom data types used and confirms that the information matches the cluster definition stored when you specified the module. For an enumeration parameter, the method validates that: @ol(    * If the argument is a number or TestStand enumeration type instance, the numeric representation is compatible with the LabVIEW parameter’s representation.    * If the argument is a TestStand enumeration type, the enumerators of the TestStand type must match the enumerators of the LabVIEW parameter in @bullet(Number and)@bullet(
  // Name and value.))
  //
  // LabVIEWParameter_IsParameterMappingValidRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_IsParameterMappingValidResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True when all the following conditions are true: @ol(    * the parameter is a cluster or cluster array or enumeration or enumeration array,    * the argument expression is valid and not empty,    * the cluster mapping of the argument is valid if the parameter is a cluster, and    * the argument value is compatible with the enumeration parameter if the parameter is an enumeration.) In all other cases, returns False. 
  //    - reasonNotValid: strin - When this method returns False, this parameter returns an explanation for why the argument is invalid.
  //
  rpc IsParameterMappingValid(LabVIEWParameter_IsParameterMappingValidRequest) returns (LabVIEWParameter_IsParameterMappingValidResponse);
  
  

  // Property: UseDefaultValue
  //
  // Specifies whether to use the default value of the parameter when calling the VI.
  //
  // You can use the default value for recommended or optional parameters.
  //
  // LabVIEWParameter_Set_UseDefaultValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //    - propertyValue: bool - Specifies whether to use the default value of the parameter when calling the VI. 
  //
  // LabVIEWParameter_Set_UseDefaultValueResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWParameter_Get_UseDefaultValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_Get_UseDefaultValueResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether to use the default value of the parameter when calling the VI. 
  //
  rpc Set_UseDefaultValue(LabVIEWParameter_Set_UseDefaultValueRequest) returns (LabVIEWParameter_Set_UseDefaultValueResponse);
  rpc Get_UseDefaultValue(LabVIEWParameter_Get_UseDefaultValueRequest) returns (LabVIEWParameter_Get_UseDefaultValueResponse);
  
  
  // Property: ValueExpr
  //
  // Specifies an expression to define the argument to pass for the parameter when calling the VI.
  //
  // TestStand ignores this parameter if the LabVIEWParameter.UseDefaultValue property is True.
  // Call the LabVIEWModule.LoadVIInfo method before you get or set this property to ensure that LabVIEW parameters, such as enumeration values and ring controls, are updated with their current definitions.
  //
  // LabVIEWParameter_Set_ValueExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //    - propertyValue: string - Specifies an expression to define the argument to pass for the parameter when calling the VI. 
  //
  // LabVIEWParameter_Set_ValueExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWParameter_Get_ValueExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_Get_ValueExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies an expression to define the argument to pass for the parameter when calling the VI. 
  //
  rpc Set_ValueExpr(LabVIEWParameter_Set_ValueExprRequest) returns (LabVIEWParameter_Set_ValueExprResponse);
  rpc Get_ValueExpr(LabVIEWParameter_Get_ValueExprRequest) returns (LabVIEWParameter_Get_ValueExprResponse);
  
  
  // Property: Category
  //
  // Returns the group of data types (number, string, and so on) to which this parameter belongs.
  //
  // After obtaining the category of the parameter, you can obtain the data type with the LabVIEWParameter.Type property.
  // The LabVIEW Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the Module.LoadPrototype method before retrieving this property.
  //
  // LabVIEWParameter_Get_CategoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_Get_CategoryResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWParameterCategories - Returns the group of data types (number, string, and so on) to which this parameter belongs. 
  //
  rpc Get_Category(LabVIEWParameter_Get_CategoryRequest) returns (LabVIEWParameter_Get_CategoryResponse);
  
  
  // Property: Direction
  //
  // Returns a value that indicates whether the parameter is an input or output parameter.
  //
  // The LabVIEW Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the Module.LoadPrototype method before retrieving this property.
  //
  // LabVIEWParameter_Get_DirectionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_Get_DirectionResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWParameterDirections - Returns a value that indicates whether the parameter is an input or output parameter. 
  //
  rpc Get_Direction(LabVIEWParameter_Get_DirectionRequest) returns (LabVIEWParameter_Get_DirectionResponse);
  
  
  // Property: Type
  //
  // Returns the data type of the parameter element, specifically indicating the type of number, string, and so on.
  //
  // Obtain the category using the LabVIEWParameter.Category property before obtaining the data type of the parameter.
  // The LabVIEW Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the Module.LoadPrototype method before retrieving this property.
  //
  // LabVIEWParameter_Get_TypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_Get_TypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWParameterTypes - Returns the data type of the parameter element, specifically indicating the type of number, string, and so on. 
  //
  rpc Get_Type(LabVIEWParameter_Get_TypeRequest) returns (LabVIEWParameter_Get_TypeResponse);
  
  
  // Property: WireRequirement
  //
  // Indicates whether the parameter is required, recommended, or optional.
  //
  // The LabVIEW Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call Module.LoadPrototype before retrieving this property.
  //
  // LabVIEWParameter_Get_WireRequirementRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_Get_WireRequirementResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWParameterWireRequirements - Indicates whether the parameter is required, recommended, or optional. 
  //
  rpc Get_WireRequirement(LabVIEWParameter_Get_WireRequirementRequest) returns (LabVIEWParameter_Get_WireRequirementResponse);
  
  
  // Property: ParameterName
  //
  // Returns the name of the parameter in the VI.
  //
  // The LabVIEW Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the Module.LoadPrototype method before retrieving this property.
  // Use the LabVIEWParameter.ParameterCaption property to determine the caption of the parameter.
  //
  // LabVIEWParameter_Get_ParameterNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_Get_ParameterNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the parameter in the VI. 
  //
  rpc Get_ParameterName(LabVIEWParameter_Get_ParameterNameRequest) returns (LabVIEWParameter_Get_ParameterNameResponse);
  
  
  // Property: DefaultValue
  //
  // Returns a display string that represents the default value defined for the parameter.
  //
  // Default values apply only to recommended and optional parameters. You must call the LabVIEWModule.LoadVIInfo or Module.LoadPrototype method before retrieving the default value. Otherwise, TestStand returns an empty string. The values stay in memory until the sequence file closes.
  //
  // LabVIEWParameter_Get_DefaultValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_Get_DefaultValueResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns a display string that represents the default value defined for the parameter. 
  //
  rpc Get_DefaultValue(LabVIEWParameter_Get_DefaultValueRequest) returns (LabVIEWParameter_Get_DefaultValueResponse);
  
  
  // Property: PassAsBinaryString
  //
  // Specifies if TestStand preserves NUL bytes when setting and getting LabVIEW string data.
  //
  // This property applies only when the LabVIEWParameter.Category property of the parameter is LVParamCategory_String or LVParamCategory_StringArray and the LabVIEWParameter.Type property of the parameter is LVParamType_String.
  // TestStand handles the string data in different ways depending on the version of LabVIEW you are using.
  // When this property is False, the LabVIEW Adapter treats strings as C-style strings with a NUL character to indicate the end of the string. C-strings cannot contain binary data.
  // Call the PropertyObject.GetValBinary method on the variable that stores the binary string to retrieve the raw data in TestStand when the binary data is compressed.
  //
  // LabVIEWParameter_Set_PassAsBinaryStringRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //    - propertyValue: bool - Specifies if TestStand preserves NUL bytes when setting and getting LabVIEW string data. 
  //
  // LabVIEWParameter_Set_PassAsBinaryStringResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWParameter_Get_PassAsBinaryStringRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_Get_PassAsBinaryStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if TestStand preserves NUL bytes when setting and getting LabVIEW string data. 
  //
  rpc Set_PassAsBinaryString(LabVIEWParameter_Set_PassAsBinaryStringRequest) returns (LabVIEWParameter_Set_PassAsBinaryStringResponse);
  rpc Get_PassAsBinaryString(LabVIEWParameter_Get_PassAsBinaryStringRequest) returns (LabVIEWParameter_Get_PassAsBinaryStringResponse);
  
  
  // Property: Elements
  //
  // Returns a collection that accesses the members of a parameter that is a cluster, or accesses the elements of a parameter that is an array of clusters.
  //
  // LabVIEWParameter_Get_ElementsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_Get_ElementsResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWParameterElementsInstance - Returns a collection that accesses the members of a parameter that is a cluster, or accesses the elements of a parameter that is an array of clusters. 
  //
  rpc Get_Elements(LabVIEWParameter_Get_ElementsRequest) returns (LabVIEWParameter_Get_ElementsResponse);
  
  
  // Property: ArrayDimensions
  //
  // Returns the number of dimensions for array parameters.
  //
  // LabVIEWParameter_Get_ArrayDimensionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_Get_ArrayDimensionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of dimensions for array parameters. 
  //
  rpc Get_ArrayDimensions(LabVIEWParameter_Get_ArrayDimensionsRequest) returns (LabVIEWParameter_Get_ArrayDimensionsResponse);
  
  
  // Property: UserData
  //
  // Holds a data item you associate with the parameter object.
  //
  // Typically, you do not use this property.
  //
  // LabVIEWParameter_Get_UserDataRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_Get_UserDataResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Holds a data item you associate with the parameter object. 
  //
  rpc Get_UserData(LabVIEWParameter_Get_UserDataRequest) returns (LabVIEWParameter_Get_UserDataResponse);
  
  
  // Property: DisplayType
  //
  // Returns a localized string that describes the LabVIEW data type for the parameter.
  //
  // The LabVIEW Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the Module.LoadPrototype method before you retrieve this property value.
  //
  // LabVIEWParameter_Get_DisplayTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_Get_DisplayTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns a localized string that describes the LabVIEW data type for the parameter. 
  //
  rpc Get_DisplayType(LabVIEWParameter_Get_DisplayTypeRequest) returns (LabVIEWParameter_Get_DisplayTypeResponse);
  
  
  // Property: ArrayElementPrototype
  //
  // Returns the cluster prototype for the elements of the array.
  //
  // This property is valid only for arrays of LabVIEW clusters. Call the LabVIEWParameter.Category property to determine whether the parameter is an array of LabVIEW clusters. The array element prototype is a template from which new elements are copied when the size of the array increases. The array element prototype represents the expected structure of elements of the array. You can also use the array element prototype to create a TestStand custom data type that maps to the LabVIEW cluster.
  //
  // LabVIEWParameter_Get_ArrayElementPrototypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_Get_ArrayElementPrototypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWParameterElementInstance - Returns the cluster prototype for the elements of the array. 
  //
  rpc Get_ArrayElementPrototype(LabVIEWParameter_Get_ArrayElementPrototypeRequest) returns (LabVIEWParameter_Get_ArrayElementPrototypeResponse);
  
  
  // Property: ParameterCaption
  //
  // Returns the caption of the parameter in the VI.
  //
  // Use the LabVIEWParameter.ParameterName property to determine the label or name of the parameter.
  //
  // LabVIEWParameter_Get_ParameterCaptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_Get_ParameterCaptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the caption of the parameter in the VI. 
  //
  rpc Get_ParameterCaption(LabVIEWParameter_Get_ParameterCaptionRequest) returns (LabVIEWParameter_Get_ParameterCaptionResponse);
  
  
  // Property: TypeDisplayString
  //
  // Returns a string that describes the type of the parameter.
  //
  // LabVIEWParameter_Get_TypeDisplayStringRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_Get_TypeDisplayStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns a string that describes the type of the parameter. 
  //
  rpc Get_TypeDisplayString(LabVIEWParameter_Get_TypeDisplayStringRequest) returns (LabVIEWParameter_Get_TypeDisplayStringResponse);
  
  
  // Property: ValidEvaluationTypes
  //
  // Returns the valid types to which this parameter can evaluate.
  //
  // You can pass the value of this property to the validEvaluationTypes parameter of the Expression.ValidateEvaluationType method to determine whether the value of the LabVIEWParameter.ValueExpr property contains errors.
  // If you are using an ExpressionEdit control to display the value of the LabVIEWParameter.ValueExpr property, pass the value of this property to the ExpressionEdit.SetValidEvaluationTypes method.
  //
  // LabVIEWParameter_Get_ValidEvaluationTypesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_Get_ValidEvaluationTypesResponse - The response message from the server. It provides the return value.
  //    - returnValue: EvaluationTypesInstance - Returns the valid types to which this parameter can evaluate. 
  //
  rpc Get_ValidEvaluationTypes(LabVIEWParameter_Get_ValidEvaluationTypesRequest) returns (LabVIEWParameter_Get_ValidEvaluationTypesResponse);
  
  
  // Property: PartiallySpecified
  //
  // Returns a value that indicates whether the parameter is partially specified.
  //
  // A parameter is partially specified if some of the parameter elements specify to use default values while other parameter elements specify expression values.
  //
  // LabVIEWParameter_Get_PartiallySpecifiedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_Get_PartiallySpecifiedResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the parameter is partially specified. 
  //
  rpc Get_PartiallySpecified(LabVIEWParameter_Get_PartiallySpecifiedRequest) returns (LabVIEWParameter_Get_PartiallySpecifiedResponse);
  
  
  // Property: ComplexRealPartElement
  //
  // Returns the real element of a complex number or array.
  //
  // This method is valid only for a complex number and array of complex number parameters.
  //
  // LabVIEWParameter_Get_ComplexRealPartElementRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_Get_ComplexRealPartElementResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWParameterElementInstance - Returns the real element of a complex number or array. 
  //
  rpc Get_ComplexRealPartElement(LabVIEWParameter_Get_ComplexRealPartElementRequest) returns (LabVIEWParameter_Get_ComplexRealPartElementResponse);
  
  
  // Property: ComplexImaginaryPartElement
  //
  // Returns the imaginary element of a complex number or array.
  //
  // This method is valid only for a complex number or an array of complex number parameters.
  //
  // LabVIEWParameter_Get_ComplexImaginaryPartElementRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_Get_ComplexImaginaryPartElementResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWParameterElementInstance - Returns the imaginary element of a complex number or array. 
  //
  rpc Get_ComplexImaginaryPartElement(LabVIEWParameter_Get_ComplexImaginaryPartElementRequest) returns (LabVIEWParameter_Get_ComplexImaginaryPartElementResponse);
  
  
  // Property: ValueExprIsIgnored
  //
  // Use this property to determine whether the LabVIEW Adapter ignores the argument value expression when it calls the module. The adapter ignores the argument value expression for parameters that use default values.
  //
  // LabVIEWParameter_Get_ValueExprIsIgnoredRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_Get_ValueExprIsIgnoredResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Use this property to determine whether the LabVIEW Adapter ignores the argument value expression when it calls the module. The adapter ignores the argument value expression for parameters that use default values. 
  //
  rpc Get_ValueExprIsIgnored(LabVIEWParameter_Get_ValueExprIsIgnoredRequest) returns (LabVIEWParameter_Get_ValueExprIsIgnoredResponse);
  
  
  // Property: ValueExprIsOptional
  //
  // Use this property to determine whether the argument value expression is optional. You do not have to specify an optional value expression to call the module successfully. Value expressions for output parameters and value expressions for cluster and array parameters that have parameter elements are optional.
  //
  // LabVIEWParameter_Get_ValueExprIsOptionalRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_Get_ValueExprIsOptionalResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Use this property to determine whether the argument value expression is optional. You do not have to specify an optional value expression to call the module successfully. Value expressions for output parameters and value expressions for cluster and array parameters that have parameter elements are optional. 
  //
  rpc Get_ValueExprIsOptional(LabVIEWParameter_Get_ValueExprIsOptionalRequest) returns (LabVIEWParameter_Get_ValueExprIsOptionalResponse);
  
  
  // Property: IsNodeUsingDefault
  //
  // Returns a value that indicates whether the parameter is associated with a LabVIEW property configured to use the default value in a Property Node call.
  //
  // LabVIEWParameter_Get_IsNodeUsingDefaultRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterInstance - The id of the LabVIEWParameter object.
  //
  // LabVIEWParameter_Get_IsNodeUsingDefaultResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the parameter is associated with a LabVIEW property configured to use the default value in a Property Node call. 
  //
  rpc Get_IsNodeUsingDefault(LabVIEWParameter_Get_IsNodeUsingDefaultRequest) returns (LabVIEWParameter_Get_IsNodeUsingDefaultResponse);
  
  
}
message LabVIEWParameterElementsInstance {
  // Specifies the handle of the LabVIEWParameterElements instance in the server.
  string id = 1;
}

message LabVIEWParameterElementInstance {
  // Specifies the handle of the LabVIEWParameterElement instance in the server.
  string id = 1;
}
message LabVIEWParameter_AsPropertyObjectRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message LabVIEWParameter_GetDefaultArrayDimensionSizeRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
  // Specifies the zero-based index corresponding to one of the array dimensions.
  int32 dimension = 2;
}

message LabVIEWParameter_GetDefaultArrayDimensionSizeResponse {
  // The return type of the Int32 object.
  int32 returnValue = 1;
}

message LabVIEWParameter_GetArrayIndexRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
  // Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  int32 offset = 2;
  // Reserved for future use. Pass 0.
  int32 options = 3;
}

message LabVIEWParameter_GetArrayIndexResponse {
  // An array index string. Array index strings are a list of numbers enclosed in brackets that index each dimension of the array. For example, the following is an array index for a two dimensional array: [0][1].
  string returnValue = 1;
}

message LabVIEWParameter_GetEnumValuesRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_GetEnumValuesResponse {
  // Returns an array of property objects where each property object represents an enumeration value or a ring control value.
  repeated PropertyObjectInstance returnValue = 1;
}

message LabVIEWParameter_UpdateClusterMappingRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
  // Pass the sequence context that the dialog box uses to evaluate all value expressions. You can use the Engine.NewEditContext method to obtain an edit-time sequence context.
  SequenceContextInstance sequenceContext = 2;
}

message LabVIEWParameter_UpdateClusterMappingResponse {
  // Returns True if the method updates any expression values for the elements of the cluster parameter.
  bool returnValue = 1;
}

message LabVIEWParameter_DisplayCreateCustomDataTypeDialogRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
  // Specifies the sequence context the dialog box uses to obtain information about the sequence file. You can use the Engine.NewEditContext method to obtain an edit-time sequence context.
  SequenceContextInstance sequenceContext = 2;
}

message LabVIEWParameter_DisplayCreateCustomDataTypeDialogResponse {
  // Returns True if you click OK in the dialog box. False if you click Cancel.
  bool returnValue = 1;
}

message LabVIEWParameter_CreateDefaultArrayElementsRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_CreateDefaultArrayElementsResponse {
  // Returns a value that indicates whether the default array elements were created.
  bool returnValue = 1;
}

message LabVIEWParameter_DeleteArrayElementsRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_DeleteArrayElementsResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message LabVIEWParameter_InsertArrayElementRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
  // Specifies the index at which to insert the array element. This value must be greater than or equal to 0 and less than or equal to the number of array elements.
  int32 index = 2;
}

message LabVIEWParameter_InsertArrayElementResponse {
}

message LabVIEWParameter_DeleteArrayElementRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
  int32 index = 2;
}

message LabVIEWParameter_DeleteArrayElementResponse {
}

message LabVIEWParameter_ExprClusterTypeMismatchRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
  // Specifies the SequenceContext to use to evaluate the parameter expression value.
  SequenceContextInstance sequenceContext = 2;
}

message LabVIEWParameter_ExprClusterTypeMismatchResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message LabVIEWParameter_IsClusterMappingInvalidRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_IsClusterMappingInvalidResponse {
  // Returns True when all the following conditions are true:    * The parameter is a cluster or cluster array    * The argument expression is valid and non-empty    * The argument or cluster mapping of the argument is invalid
  // In all other cases, this method returns False.
  bool returnValue = 1;
  // When this method returns True, this parameter returns the reason why the argument is invalid.
  string reasonNotValid = 2;
}

message LabVIEWParameter_IsParameterMappingValidRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_IsParameterMappingValidResponse {
  // Returns True when all the following conditions are true: @ol(    * the parameter is a cluster or cluster array or enumeration or enumeration array,    *
  // the argument expression is valid and not empty,    * the cluster mapping of the argument is valid if the parameter is a cluster, and    * the argument value is compatible with the enumeration parameter if the parameter is an enumeration.)
  // In all other cases, returns False.
  bool returnValue = 1;
  // When this method returns False, this parameter returns an explanation for why the argument is invalid.
  string reasonNotValid = 2;
}

message LabVIEWParameter_Set_UseDefaultValueRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
  // Specifies whether to use the default value of the parameter when calling the VI.
  bool propertyValue = 2;
}

message LabVIEWParameter_Set_UseDefaultValueResponse {
}

message LabVIEWParameter_Get_UseDefaultValueRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_Get_UseDefaultValueResponse {
  // Specifies whether to use the default value of the parameter when calling the VI.
  bool returnValue = 1;
}

message LabVIEWParameter_Set_ValueExprRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
  // Specifies an expression to define the argument to pass for the parameter when calling the VI.
  string propertyValue = 2;
}

message LabVIEWParameter_Set_ValueExprResponse {
}

message LabVIEWParameter_Get_ValueExprRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_Get_ValueExprResponse {
  // Specifies an expression to define the argument to pass for the parameter when calling the VI.
  string returnValue = 1;
}

message LabVIEWParameter_Get_CategoryRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_Get_CategoryResponse {
  // Returns the group of data types (number, string, and so on) to which this parameter belongs.
  LabVIEWParameterCategories returnValue = 1;
}

message LabVIEWParameter_Get_DirectionRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_Get_DirectionResponse {
  // Returns a value that indicates whether the parameter is an input or output parameter.
  LabVIEWParameterDirections returnValue = 1;
}

message LabVIEWParameter_Get_TypeRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_Get_TypeResponse {
  // Returns the data type of the parameter element, specifically indicating the type of number, string, and so on.
  LabVIEWParameterTypes returnValue = 1;
}

message LabVIEWParameter_Get_WireRequirementRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_Get_WireRequirementResponse {
  // Indicates whether the parameter is required, recommended, or optional.
  LabVIEWParameterWireRequirements returnValue = 1;
}

message LabVIEWParameter_Get_ParameterNameRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_Get_ParameterNameResponse {
  // Returns the name of the parameter in the VI.
  string returnValue = 1;
}

message LabVIEWParameter_Get_DefaultValueRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_Get_DefaultValueResponse {
  // Returns a display string that represents the default value defined for the parameter.
  string returnValue = 1;
}

message LabVIEWParameter_Set_PassAsBinaryStringRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
  // Specifies if TestStand preserves NUL bytes when setting and getting LabVIEW string data.
  bool propertyValue = 2;
}

message LabVIEWParameter_Set_PassAsBinaryStringResponse {
}

message LabVIEWParameter_Get_PassAsBinaryStringRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_Get_PassAsBinaryStringResponse {
  // Specifies if TestStand preserves NUL bytes when setting and getting LabVIEW string data.
  bool returnValue = 1;
}

message LabVIEWParameter_Get_ElementsRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_Get_ElementsResponse {
  // Returns a collection that accesses the members of a parameter that is a cluster, or accesses the elements of a parameter that is an array of clusters.
  LabVIEWParameterElementsInstance returnValue = 1;
}

message LabVIEWParameter_Get_ArrayDimensionsRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_Get_ArrayDimensionsResponse {
  // Returns the number of dimensions for array parameters.
  int32 returnValue = 1;
}

message LabVIEWParameter_Get_UserDataRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_Get_UserDataResponse {
  // Holds a data item you associate with the parameter object.
  PropertyObjectInstance returnValue = 1;
}

message LabVIEWParameter_Get_DisplayTypeRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_Get_DisplayTypeResponse {
  // The display value of the data type of the parameter.
  string returnValue = 1;
}

message LabVIEWParameter_Get_ArrayElementPrototypeRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_Get_ArrayElementPrototypeResponse {
  // Returns the cluster prototype for the elements of the array.
  LabVIEWParameterElementInstance returnValue = 1;
}

message LabVIEWParameter_Get_ParameterCaptionRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_Get_ParameterCaptionResponse {
  // Returns the caption of the parameter in the VI.
  string returnValue = 1;
}

message LabVIEWParameter_Get_TypeDisplayStringRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_Get_TypeDisplayStringResponse {
  // Returns a string that describes the type of the parameter.
  string returnValue = 1;
}

message LabVIEWParameter_Get_ValidEvaluationTypesRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_Get_ValidEvaluationTypesResponse {
  // Returns the valid types to which this parameter can evaluate.
  EvaluationTypesInstance returnValue = 1;
}

message LabVIEWParameter_Get_PartiallySpecifiedRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_Get_PartiallySpecifiedResponse {
  // Returns a value that indicates whether the parameter is partially specified.
  bool returnValue = 1;
}

message LabVIEWParameter_Get_ComplexRealPartElementRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_Get_ComplexRealPartElementResponse {
  // Returns the real element of a complex number or array.
  LabVIEWParameterElementInstance returnValue = 1;
}

message LabVIEWParameter_Get_ComplexImaginaryPartElementRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_Get_ComplexImaginaryPartElementResponse {
  // Returns the imaginary element of a complex number or array.
  LabVIEWParameterElementInstance returnValue = 1;
}

message LabVIEWParameter_Get_ValueExprIsIgnoredRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_Get_ValueExprIsIgnoredResponse {
  // Use this property to determine whether the LabVIEW Adapter ignores the argument value expression when it calls the module. The adapter ignores the argument value expression for parameters that use default values.
  bool returnValue = 1;
}

message LabVIEWParameter_Get_ValueExprIsOptionalRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_Get_ValueExprIsOptionalResponse {
  // Use this property to determine whether the argument value expression is optional. You do not have to specify an optional value expression to call the module successfully. Value expressions for output parameters and value expressions for cluster and array parameters that have parameter elements are optional.
  bool returnValue = 1;
}

message LabVIEWParameter_Get_IsNodeUsingDefaultRequest {
  // The id of the LabVIEWParameter object.
  LabVIEWParameterInstance instance = 1;
}

message LabVIEWParameter_Get_IsNodeUsingDefaultResponse {
  // Returns True when the parameter is associated with a LabVIEW property configured to use the default value.
  bool returnValue = 1;
}

// LabVIEWParameterElements
//
// Use objects from the LabVIEWParameterElements class to configure and obtain elements for a cluster or array parameter of a module that uses the LabVIEW Adapter. Use the LabVIEWParameter.Elements property to obtain the collection of elements for a parameter of a module and the LabVIEWParameterElement.Elements property to obtain the collection of sub-elements for a parameter element.
//
service LabVIEWParameterElements {
  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // LabVIEWParameterElements_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWParameterElementsInstance - The id of the LabVIEWParameterElements object.
  //    - index: int32 - Specifies the zero-based index.
  //
  // LabVIEWParameterElements_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWParameterElementInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(LabVIEWParameterElements_Get_ItemRequest) returns (LabVIEWParameterElements_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // LabVIEWParameterElements_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementsInstance - The id of the LabVIEWParameterElements object.
  //
  // LabVIEWParameterElements_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(LabVIEWParameterElements_Get_CountRequest) returns (LabVIEWParameterElements_Get_CountResponse);
  
  
}
message LabVIEWParameterElements_Get_ItemRequest {
  // The id of the LabVIEWParameterElements object.
  LabVIEWParameterElementsInstance instance = 1;
  // Specifies the zero-based index.
  optional int32 index = 2;
}

message LabVIEWParameterElements_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  LabVIEWParameterElementInstance returnValue = 1;
}

message LabVIEWParameterElements_Get_CountRequest {
  // The id of the LabVIEWParameterElements object.
  LabVIEWParameterElementsInstance instance = 1;
}

message LabVIEWParameterElements_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// LabVIEWParameterElement
//
// Use objects from the LabVIEWParameterElement class to configure and obtain element-specific information in a cluster or array parameter of a module.
// Use the LabVIEWParameter.Elements property to obtain the collection of elements for a parameter of a module.
//
service LabVIEWParameterElement {
  // Method: AsPropertyObject
  //
  // Returns the underlying PropertyObject that represents the LabVIEWParameterElement object.
  //
  // Use the PropertyObject to modify, add, or remove custom properties of the object.
  //
  // LabVIEWParameterElement_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(LabVIEWParameterElement_AsPropertyObjectRequest) returns (LabVIEWParameterElement_AsPropertyObjectResponse);
  
  
  // Method: GetDefaultArrayDimensionSize
  //
  // Returns the default size of the array corresponding to the zero-based index passed as input.
  //
  // The default size corresponds to the default size of the array control in the front panel of a VI. Call the LabVIEWModule.LoadVIInfo or Module.LoadPrototype method before calling this method.
  //
  // LabVIEWParameterElement_GetDefaultArrayDimensionSizeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //    - dimension: int32 - Specifies the zero-based index corresponding to one of the array dimensions.
  //
  // LabVIEWParameterElement_GetDefaultArrayDimensionSizeResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - The return type of the Int32 object.
  //
  rpc GetDefaultArrayDimensionSize(LabVIEWParameterElement_GetDefaultArrayDimensionSizeRequest) returns (LabVIEWParameterElement_GetDefaultArrayDimensionSizeResponse);
  
  
  // Method: GetArrayIndex
  //
  // Returns the index of the array element the offset parameter specifies.
  //
  // LabVIEWParameterElement_GetArrayIndexRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //    - offset: int32 - Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  //    - options: int32 - Reserved for future use. Pass 0.
  //
  // LabVIEWParameterElement_GetArrayIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - An array index string. Array index strings are a list of numbers enclosed in brackets that index each dimension of the array. For example, the following is an array index for a two dimensional array: [0][1]. 
  //
  rpc GetArrayIndex(LabVIEWParameterElement_GetArrayIndexRequest) returns (LabVIEWParameterElement_GetArrayIndexResponse);
  
  
  // Method: GetEnumValues
  //
  // Returns the enumeration constants for an enumeration parameter or returns the ring control values for a ring control parameter.
  //
  // Call the LabVIEWModule.LoadVIInfo method or the Module.LoadPrototype method before calling this method. The values stay in memory until the sequence file closes.
  // Note: TestStand supports ring control values only when you use LabVIEW 2012 and later.
  // Use the name and value of the property objects in the array this method returns to determine the name and value of the enumeration constants or ring controls.
  // Pass the return value of this method as the additionalConstants parameter of Expression.ValidateEvaluationType when checking the LabVIEWParameterElement.ValueExpr property for errors.
  // If you are using an ExpressionEdit control to display the value of the LabVIEWParameterElement.ValueExpr property, pass the return value of this method to the ExpressionEdit.SetAdditionalEvaluationConstants method to instruct the ExpressionEdit control to validate enumeration constants.
  //
  // LabVIEWParameterElement_GetEnumValuesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_GetEnumValuesResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated PropertyObjectInstance - Returns an array of property objects where each property object represents an enumeration value or a ring control value. 
  //
  rpc GetEnumValues(LabVIEWParameterElement_GetEnumValuesRequest) returns (LabVIEWParameterElement_GetEnumValuesResponse);
  
  
  // Method: UpdateClusterMapping
  //
  // Updates the expression values for all the cluster parameter elements when the parameter specifies an expression value that evaluates to a named data type and the data type enables cluster passing.
  //
  // This method is valid only on cluster parameter elements.
  //
  // LabVIEWParameterElement_UpdateClusterMappingRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //    - sequenceContext: SequenceContextInstance - Specifies the sequence context that the dialog box uses to evaluate all value expressions. You can use the Engine.NewEditContext method to obtain an edit-time sequence context.
  //
  // LabVIEWParameterElement_UpdateClusterMappingResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the method updates any expression values for the elements of the cluster parameter element. 
  //
  rpc UpdateClusterMapping(LabVIEWParameterElement_UpdateClusterMappingRequest) returns (LabVIEWParameterElement_UpdateClusterMappingResponse);
  
  
  // Method: DisplayCreateCustomDataTypeDialog
  //
  // Launches the Create/Update Custom Data Type from Cluster dialog box, in which you configure a new custom data type or update an existing custom type.
  //
  // LabVIEWParameterElement_DisplayCreateCustomDataTypeDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //    - sequenceContext: SequenceContextInstance - Specifies the sequence context the dialog box uses to obtain information about the sequence file. You can use the Engine.NewEditContext method to obtain an edit-time sequence context.
  //
  // LabVIEWParameterElement_DisplayCreateCustomDataTypeDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if you click OK in the dialog box. False if you click Cancel. 
  //
  rpc DisplayCreateCustomDataTypeDialog(LabVIEWParameterElement_DisplayCreateCustomDataTypeDialogRequest) returns (LabVIEWParameterElement_DisplayCreateCustomDataTypeDialogResponse);
  
  
  // Method: CreateDefaultArrayElements
  //
  // Creates all the default array elements of an array parameter element.
  //
  // This method is valid only on array parameter elements and creates the elements only if the array control on the VI front panel defines default. TestStand replaces any existing array elements the parameter previously specified.
  //
  // LabVIEWParameterElement_CreateDefaultArrayElementsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_CreateDefaultArrayElementsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the default array elements were created. 
  //
  rpc CreateDefaultArrayElements(LabVIEWParameterElement_CreateDefaultArrayElementsRequest) returns (LabVIEWParameterElement_CreateDefaultArrayElementsResponse);
  
  
  // Method: DeleteArrayElements
  //
  // Deletes all array elements.
  //
  // This method is valid only on array parameter elements.
  //
  // LabVIEWParameterElement_DeleteArrayElementsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_DeleteArrayElementsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc DeleteArrayElements(LabVIEWParameterElement_DeleteArrayElementsRequest) returns (LabVIEWParameterElement_DeleteArrayElementsResponse);
  
  
  // Method: InsertArrayElement
  //
  // Inserts an array element at the specified index.
  //
  // This method is valid only for one-dimensional array parameter elements. Use the LabVIEWParameterElement.ArrayDimensions property to determine the number of array dimensions.
  //
  // LabVIEWParameterElement_InsertArrayElementRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //    - index: int32 - Specifies the index at which to insert the array element. This value must be greater than or equal to 0 and less than or equal to the number of array elements.
  //
  // LabVIEWParameterElement_InsertArrayElementResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc InsertArrayElement(LabVIEWParameterElement_InsertArrayElementRequest) returns (LabVIEWParameterElement_InsertArrayElementResponse);
  
  
  // Method: DeleteArrayElement
  //
  // Deletes all array elements.
  //
  // This method is valid only on array parameter elements.
  //
  // LabVIEWParameterElement_DeleteArrayElementRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_DeleteArrayElementResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc DeleteArrayElement(LabVIEWParameterElement_DeleteArrayElementRequest) returns (LabVIEWParameterElement_DeleteArrayElementResponse);
  
  
  // Method: ExprClusterTypeMismatch
  //
  // Returns True if you enable cluster mapping for the variable or property the expression value returns and the names or types of cluster elements do not match the LabVIEW cluster the VI specifies. Otherwise this method returns False.
  //
  // LabVIEWParameterElement_ExprClusterTypeMismatchRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //    - sequenceContext: SequenceContextInstance - Specifies the SequenceContext to use to evaluate the parameter expression value.
  //
  // LabVIEWParameterElement_ExprClusterTypeMismatchResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc ExprClusterTypeMismatch(LabVIEWParameterElement_ExprClusterTypeMismatchRequest) returns (LabVIEWParameterElement_ExprClusterTypeMismatchResponse);
  
  
  // Method: IsClusterMappingInvalid
  //
  // Returns a value that indicates whether the argument you specify for a LabVIEW cluster or cluster array parameter is valid by checking the cluster passing information for any custom data types used to confirm that the information matches the cluster definition stored when you specified the module.
  // Note: This method does not load the VI you specify. The method relies on the cluster information stored for the parameter when the module was last specified.
  //
  // LabVIEWParameterElement_IsClusterMappingInvalidRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_IsClusterMappingInvalidResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True when all the following conditions are true:    * The parameter is a cluster or cluster array    * The argument expression is valid and non-empty    * The argument or cluster mapping of the argument is invalid In all other cases, this method returns False. 
  //    - reasonNotValid: strin - When this method returns True, this parameter returns the reason why the argument is invalid.
  //
  rpc IsClusterMappingInvalid(LabVIEWParameterElement_IsClusterMappingInvalidRequest) returns (LabVIEWParameterElement_IsClusterMappingInvalidResponse);
  
  
  // Method: IsParameterMappingValid
  //
  // Returns a value that indicates whether the argument you specify for a LabVIEW cluster or cluster array parameter is valid.
  //
  // This method checks the cluster passing information for any custom data types used and confirms that the information matches the cluster definition stored when you specified the module. For an enumeration parameter, the method validates that: @ol(    * If the argument is a number or TestStand enumeration type instance, the numeric representation is compatible with the LabVIEW parameter’s representation.    * If the argument is a TestStand enumeration type, the enumerators of the TestStand type must match the enumerators of the LabVIEW parameter in @bullet(Number and)@bullet(
  // Name and value.))
  //
  // LabVIEWParameterElement_IsParameterMappingValidRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_IsParameterMappingValidResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True when all the following conditions are true: @ol(    * the parameter is a cluster or cluster array or enumeration or enumeration array,    * the argument expression is valid and not empty,    * the cluster mapping of the argument is valid if the parameter is a cluster, and    * the argument value is compatible with the enumeration parameter if the parameter is an enumeration.) In all other cases, returns False. 
  //    - reasonNotValid: strin - When this method returns False, this parameter returns an explanation for why the argument is invalid.
  //
  rpc IsParameterMappingValid(LabVIEWParameterElement_IsParameterMappingValidRequest) returns (LabVIEWParameterElement_IsParameterMappingValidResponse);
  
  

  // Property: ValueExpr
  //
  // Specifies an expression to define the argument to pass for the cluster member or cluster array element when calling the VI.
  //
  // Each cluster member or cluster array element can be passed to LabVIEW individually, or the entire cluster/array can be passed as a TestStand data type.
  // Call the LabVIEWModule.LoadVIInfo method before you get or set this property to ensure that LabVIEW parameters, such as clusters and arrays, are updated with their current definitions.
  //
  // LabVIEWParameterElement_Set_ValueExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //    - propertyValue: string - Specifies an expression to define the argument to pass for the cluster member or cluster array element when calling the VI. 
  //
  // LabVIEWParameterElement_Set_ValueExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWParameterElement_Get_ValueExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_Get_ValueExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies an expression to define the argument to pass for the cluster member or cluster array element when calling the VI. 
  //
  rpc Set_ValueExpr(LabVIEWParameterElement_Set_ValueExprRequest) returns (LabVIEWParameterElement_Set_ValueExprResponse);
  rpc Get_ValueExpr(LabVIEWParameterElement_Get_ValueExprRequest) returns (LabVIEWParameterElement_Get_ValueExprResponse);
  
  
  // Property: Category
  //
  // Returns which group of data types (number, string, and so on) to which the parameter element belongs.
  //
  // After obtaining the category of the parameter, you can obtain the data type with the LabVIEWParameterElement.Type property.
  //
  // LabVIEWParameterElement_Get_CategoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_Get_CategoryResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWParameterCategories - Returns which group of data types (number, string, and so on) to which the parameter element belongs. 
  //
  rpc Get_Category(LabVIEWParameterElement_Get_CategoryRequest) returns (LabVIEWParameterElement_Get_CategoryResponse);
  
  
  // Property: Type
  //
  // Returns the data type of the parameter element. It specifically indicates what type of number, string, etc.
  //
  // Obtain the category using the LabVIEWParameterElement.Category property before obtaining the data type of the parameter.
  //
  // LabVIEWParameterElement_Get_TypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_Get_TypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWParameterTypes - Returns the data type of the parameter element. It specifically indicates what type of number, string, etc. 
  //
  rpc Get_Type(LabVIEWParameterElement_Get_TypeRequest) returns (LabVIEWParameterElement_Get_TypeResponse);
  
  
  // Property: ElementName
  //
  // Returns the name of the parameter element in the cluster. Returns an error for array elements.
  //
  // The LabVIEW Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the Module.LoadPrototype method before retrieving this property.
  // Use the LabVIEWParameterElement.ElementCaption property to determine the caption of the parameter.
  //
  // LabVIEWParameterElement_Get_ElementNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_Get_ElementNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the parameter element in the cluster. Returns an error for array elements. 
  //
  rpc Get_ElementName(LabVIEWParameterElement_Get_ElementNameRequest) returns (LabVIEWParameterElement_Get_ElementNameResponse);
  
  
  // Property: PassAsBinaryString
  //
  // Specifies if TestStand preserves NUL bytes when setting and getting LabVIEW string data.
  //
  // This property applies only when the LabVIEWParameterElement.Category property of the parameter is LVParamCategory_String or LVParamCategory_StringArray and the LabVIEWParameterElement.Type property of the parameter is LVParamType_String.
  // TestStand handles the string data in different ways depending on the version of LabVIEW you are using.
  // When this property is False, the LabVIEW Adapter treats strings as C-style strings with a NUL character to indicate the end of the string. C-strings cannot contain binary data.
  // Call the PropertyObject.GetValBinary method on the variable that stores the binary string to retrieve the raw data in TestStand when the binary data is compressed.
  //
  // LabVIEWParameterElement_Set_PassAsBinaryStringRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //    - propertyValue: bool - Specifies if TestStand preserves NUL bytes when setting and getting LabVIEW string data. 
  //
  // LabVIEWParameterElement_Set_PassAsBinaryStringResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWParameterElement_Get_PassAsBinaryStringRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_Get_PassAsBinaryStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if TestStand preserves NUL bytes when setting and getting LabVIEW string data. 
  //
  rpc Set_PassAsBinaryString(LabVIEWParameterElement_Set_PassAsBinaryStringRequest) returns (LabVIEWParameterElement_Set_PassAsBinaryStringResponse);
  rpc Get_PassAsBinaryString(LabVIEWParameterElement_Get_PassAsBinaryStringRequest) returns (LabVIEWParameterElement_Get_PassAsBinaryStringResponse);
  
  
  // Property: Elements
  //
  // If a parameter element is a cluster or array of clusters, this property returns a collection to access sub-elements of the parameter element.
  //
  // LabVIEWParameterElement_Get_ElementsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_Get_ElementsResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWParameterElementsInstance - If a parameter element is a cluster or array of clusters, this property returns a collection to access sub-elements of the parameter element. 
  //
  rpc Get_Elements(LabVIEWParameterElement_Get_ElementsRequest) returns (LabVIEWParameterElement_Get_ElementsResponse);
  
  
  // Property: ArrayDimensions
  //
  // Returns the number of dimensions for array parameters.
  //
  // LabVIEWParameterElement_Get_ArrayDimensionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_Get_ArrayDimensionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of dimensions for array parameters. 
  //
  rpc Get_ArrayDimensions(LabVIEWParameterElement_Get_ArrayDimensionsRequest) returns (LabVIEWParameterElement_Get_ArrayDimensionsResponse);
  
  
  // Property: UserData
  //
  // Holds a data item you associate with the parameter object.
  //
  // Typically, you do not use this property.
  //
  // LabVIEWParameterElement_Get_UserDataRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_Get_UserDataResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Holds a data item you associate with the parameter object. 
  //
  rpc Get_UserData(LabVIEWParameterElement_Get_UserDataRequest) returns (LabVIEWParameterElement_Get_UserDataResponse);
  
  
  // Property: DisplayType
  //
  // Returns a localized string that describes the LabVIEW data type for the parameter element.
  //
  // The LabVIEW Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the Module.LoadPrototype method before you retrieve this property value.
  //
  // LabVIEWParameterElement_Get_DisplayTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_Get_DisplayTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns a localized string that describes the LabVIEW data type for the parameter element. 
  //
  rpc Get_DisplayType(LabVIEWParameterElement_Get_DisplayTypeRequest) returns (LabVIEWParameterElement_Get_DisplayTypeResponse);
  
  
  // Property: ArrayElementPrototype
  //
  // Returns the cluster prototype for the elements of the array.
  //
  // This property is valid only for arrays of LabVIEW clusters. Call the LabVIEWParameterElement.Category property to determine whether the parameter is an array of LabVIEW clusters. The array element prototype is a template from which new elements are copied when the size of the array increases. The array element prototype represents the expected structure of elements of the array. You can also use the array element prototype to create a TestStand custom data type that maps to the LabVIEW cluster.
  //
  // LabVIEWParameterElement_Get_ArrayElementPrototypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_Get_ArrayElementPrototypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWParameterElementInstance - Returns the cluster prototype for the elements of the array. 
  //
  rpc Get_ArrayElementPrototype(LabVIEWParameterElement_Get_ArrayElementPrototypeRequest) returns (LabVIEWParameterElement_Get_ArrayElementPrototypeResponse);
  
  
  // Property: ElementCaption
  //
  // Returns the caption of the parameter element in the VI.
  //
  // Use the LabVIEWParameterElement.ElementName property to determine the label or name of the parameter element.
  //
  // LabVIEWParameterElement_Get_ElementCaptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_Get_ElementCaptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the caption of the parameter element in the VI. 
  //
  rpc Get_ElementCaption(LabVIEWParameterElement_Get_ElementCaptionRequest) returns (LabVIEWParameterElement_Get_ElementCaptionResponse);
  
  
  // Property: UseDefaultValue
  //
  // Specifies to use the default value of the parameter element when calling the VI.
  //
  // You can use the default value when a parameter is recommended or optional.
  //
  // LabVIEWParameterElement_Set_UseDefaultValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //    - propertyValue: bool - Specifies to use the default value of the parameter element when calling the VI. 
  //
  // LabVIEWParameterElement_Set_UseDefaultValueResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWParameterElement_Get_UseDefaultValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_Get_UseDefaultValueResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies to use the default value of the parameter element when calling the VI. 
  //
  rpc Set_UseDefaultValue(LabVIEWParameterElement_Set_UseDefaultValueRequest) returns (LabVIEWParameterElement_Set_UseDefaultValueResponse);
  rpc Get_UseDefaultValue(LabVIEWParameterElement_Get_UseDefaultValueRequest) returns (LabVIEWParameterElement_Get_UseDefaultValueResponse);
  
  
  // Property: DefaultValue
  //
  // Returns a display string that represents the default value defined for the parameter element.
  //
  // Default values apply only to recommended and optional parameters. You must call the LabVIEWModule.LoadVIInfo or Module.LoadPrototype method before retrieving the default value. Otherwise, TestStand returns an empty string. The values stay in memory until the sequence file closes.
  //
  // LabVIEWParameterElement_Get_DefaultValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_Get_DefaultValueResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns a display string that represents the default value defined for the parameter element. 
  //
  rpc Get_DefaultValue(LabVIEWParameterElement_Get_DefaultValueRequest) returns (LabVIEWParameterElement_Get_DefaultValueResponse);
  
  
  // Property: Direction
  //
  // Returns a value that indicates whether the parameter is an input or output parameter.
  //
  // This method is for convenience and returns the same value the LabVIEWParameter.Direction property returns when called on the parent LabVIEWParameter object.
  // The LabVIEW Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the Module.LoadPrototype method before retrieving this property.
  //
  // LabVIEWParameterElement_Get_DirectionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_Get_DirectionResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWParameterDirections - Returns a value that indicates whether the parameter is an input or output parameter. 
  //
  rpc Get_Direction(LabVIEWParameterElement_Get_DirectionRequest) returns (LabVIEWParameterElement_Get_DirectionResponse);
  
  
  // Property: WireRequirement
  //
  // Indicates whether the parameter is required, recommended, or optional.
  //
  // This method is for convenience and returns the same value the LabVIEWParameter.WireRequirement property returns when called on the parent LabVIEWParameter object.
  // The LabVIEW Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call Module.LoadPrototype before retrieving this property.
  //
  // LabVIEWParameterElement_Get_WireRequirementRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_Get_WireRequirementResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWParameterWireRequirements - Indicates whether the parameter is required, recommended, or optional. 
  //
  rpc Get_WireRequirement(LabVIEWParameterElement_Get_WireRequirementRequest) returns (LabVIEWParameterElement_Get_WireRequirementResponse);
  
  
  // Property: TypeDisplayString
  //
  // Returns a string that describes the type of the parameter element.
  //
  // LabVIEWParameterElement_Get_TypeDisplayStringRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_Get_TypeDisplayStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns a string that describes the type of the parameter element. 
  //
  rpc Get_TypeDisplayString(LabVIEWParameterElement_Get_TypeDisplayStringRequest) returns (LabVIEWParameterElement_Get_TypeDisplayStringResponse);
  
  
  // Property: ValidEvaluationTypes
  //
  // Returns the valid types to which this parameter can evaluate.
  //
  // You can pass the value of this property to the validEvaluationTypes parameter of the Expression.ValidateEvaluationType method to determine whether the value of the LabVIEWParameterElement.ValueExpr property contains errors.
  // If you are using an ExpressionEdit control to display the value of the LabVIEWParameterElement.ValueExpr property, pass the value of this property to the ExpressionEdit.SetValidEvaluationTypes method.
  //
  // LabVIEWParameterElement_Get_ValidEvaluationTypesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_Get_ValidEvaluationTypesResponse - The response message from the server. It provides the return value.
  //    - returnValue: EvaluationTypesInstance - Returns the valid types to which this parameter can evaluate. 
  //
  rpc Get_ValidEvaluationTypes(LabVIEWParameterElement_Get_ValidEvaluationTypesRequest) returns (LabVIEWParameterElement_Get_ValidEvaluationTypesResponse);
  
  
  // Property: PartiallySpecified
  //
  // Returns a value that indicates whether the parameter element is partially specified.
  //
  // A parameter element is partially specified if some of the parameter elements specify to use default values while other parameter elements specify expression values.
  //
  // LabVIEWParameterElement_Get_PartiallySpecifiedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_Get_PartiallySpecifiedResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the parameter element is partially specified. 
  //
  rpc Get_PartiallySpecified(LabVIEWParameterElement_Get_PartiallySpecifiedRequest) returns (LabVIEWParameterElement_Get_PartiallySpecifiedResponse);
  
  
  // Property: IndexString
  //
  // Returns a string that specifies the multi-dimensional array index of the parameter element in the parent LabVIEWParameterElements object.
  //
  // You can use this array index string to display the index of an array parameter.
  //
  // LabVIEWParameterElement_Get_IndexStringRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_Get_IndexStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns a string that specifies the multi-dimensional array index of the parameter element in the parent LabVIEWParameterElements object. 
  //
  rpc Get_IndexString(LabVIEWParameterElement_Get_IndexStringRequest) returns (LabVIEWParameterElement_Get_IndexStringResponse);
  
  
  // Property: ComplexRealPartElement
  //
  // Returns the real part element of a complex number or array.
  //
  // This method is valid only for a complex number and array of complex number parameter elements.
  //
  // LabVIEWParameterElement_Get_ComplexRealPartElementRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_Get_ComplexRealPartElementResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWParameterElementInstance - Returns the real part element of a complex number or array. 
  //
  rpc Get_ComplexRealPartElement(LabVIEWParameterElement_Get_ComplexRealPartElementRequest) returns (LabVIEWParameterElement_Get_ComplexRealPartElementResponse);
  
  
  // Property: ComplexImaginaryPartElement
  //
  // Returns the imaginary part element of a complex number or array.
  //
  // This method is valid only for a complex number or an array of complex number parameter elements.
  //
  // LabVIEWParameterElement_Get_ComplexImaginaryPartElementRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_Get_ComplexImaginaryPartElementResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWParameterElementInstance - Returns the imaginary part element of a complex number or array. 
  //
  rpc Get_ComplexImaginaryPartElement(LabVIEWParameterElement_Get_ComplexImaginaryPartElementRequest) returns (LabVIEWParameterElement_Get_ComplexImaginaryPartElementResponse);
  
  
  // Property: ValueExprIsIgnored
  //
  // Use this property to determine whether the LabVIEW Adapter ignores the argument value expression when it calls the module. The adapter ignores the argument value expression for parameter elements that belong to a parameter that uses default values or that has a non-empty value expression.
  //
  // LabVIEWParameterElement_Get_ValueExprIsIgnoredRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_Get_ValueExprIsIgnoredResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Use this property to determine whether the LabVIEW Adapter ignores the argument value expression when it calls the module. The adapter ignores the argument value expression for parameter elements that belong to a parameter that uses default values or that has a non-empty value expression. 
  //
  rpc Get_ValueExprIsIgnored(LabVIEWParameterElement_Get_ValueExprIsIgnoredRequest) returns (LabVIEWParameterElement_Get_ValueExprIsIgnoredResponse);
  
  
  // Property: ValueExprIsOptional
  //
  // Use this property to determine whether the argument value expression is optional. You do not have to specify an optional value expression to call the module successfully. Value expressions for output parameters and value expressions for cluster and array parameters that have parameter elements are optional.
  //
  // LabVIEWParameterElement_Get_ValueExprIsOptionalRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_Get_ValueExprIsOptionalResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Use this property to determine whether the argument value expression is optional. You do not have to specify an optional value expression to call the module successfully. Value expressions for output parameters and value expressions for cluster and array parameters that have parameter elements are optional. 
  //
  rpc Get_ValueExprIsOptional(LabVIEWParameterElement_Get_ValueExprIsOptionalRequest) returns (LabVIEWParameterElement_Get_ValueExprIsOptionalResponse);
  
  
  // Property: IsNodeUsingDefault
  //
  // Returns a value that indicates whether the parameter is associated with a LabVIEW property configured to use the default value in a Property Node call.
  //
  // LabVIEWParameterElement_Get_IsNodeUsingDefaultRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWParameterElementInstance - The id of the LabVIEWParameterElement object.
  //
  // LabVIEWParameterElement_Get_IsNodeUsingDefaultResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the parameter is associated with a LabVIEW property configured to use the default value in a Property Node call. 
  //
  rpc Get_IsNodeUsingDefault(LabVIEWParameterElement_Get_IsNodeUsingDefaultRequest) returns (LabVIEWParameterElement_Get_IsNodeUsingDefaultResponse);
  
  
}
message LabVIEWParameterElement_AsPropertyObjectRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message LabVIEWParameterElement_GetDefaultArrayDimensionSizeRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
  // Specifies the zero-based index corresponding to one of the array dimensions.
  int32 dimension = 2;
}

message LabVIEWParameterElement_GetDefaultArrayDimensionSizeResponse {
  // The return type of the Int32 object.
  int32 returnValue = 1;
}

message LabVIEWParameterElement_GetArrayIndexRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
  // Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  int32 offset = 2;
  // Reserved for future use. Pass 0.
  int32 options = 3;
}

message LabVIEWParameterElement_GetArrayIndexResponse {
  // An array index string. Array index strings are a list of numbers enclosed in brackets that index each dimension of the array. For example, the following is an array index for a two dimensional array: [0][1].
  string returnValue = 1;
}

message LabVIEWParameterElement_GetEnumValuesRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_GetEnumValuesResponse {
  // Returns an array of property objects where each property object represents an enumeration value or a ring control value.
  repeated PropertyObjectInstance returnValue = 1;
}

message LabVIEWParameterElement_UpdateClusterMappingRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
  // Specifies the sequence context that the dialog box uses to evaluate all value expressions. You can use the Engine.NewEditContext method to obtain an edit-time sequence context.
  SequenceContextInstance sequenceContext = 2;
}

message LabVIEWParameterElement_UpdateClusterMappingResponse {
  // Returns True if the method updates any expression values for the elements of the cluster parameter element.
  bool returnValue = 1;
}

message LabVIEWParameterElement_DisplayCreateCustomDataTypeDialogRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
  // Specifies the sequence context the dialog box uses to obtain information about the sequence file. You can use the Engine.NewEditContext method to obtain an edit-time sequence context.
  SequenceContextInstance sequenceContext = 2;
}

message LabVIEWParameterElement_DisplayCreateCustomDataTypeDialogResponse {
  // Returns True if you click OK in the dialog box. False if you click Cancel.
  bool returnValue = 1;
}

message LabVIEWParameterElement_CreateDefaultArrayElementsRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_CreateDefaultArrayElementsResponse {
  // Returns a value that indicates whether the default array elements were created.
  bool returnValue = 1;
}

message LabVIEWParameterElement_DeleteArrayElementsRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_DeleteArrayElementsResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message LabVIEWParameterElement_InsertArrayElementRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
  // Specifies the index at which to insert the array element. This value must be greater than or equal to 0 and less than or equal to the number of array elements.
  int32 index = 2;
}

message LabVIEWParameterElement_InsertArrayElementResponse {
}

message LabVIEWParameterElement_DeleteArrayElementRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
  int32 index = 2;
}

message LabVIEWParameterElement_DeleteArrayElementResponse {
}

message LabVIEWParameterElement_ExprClusterTypeMismatchRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
  // Specifies the SequenceContext to use to evaluate the parameter expression value.
  SequenceContextInstance sequenceContext = 2;
}

message LabVIEWParameterElement_ExprClusterTypeMismatchResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message LabVIEWParameterElement_IsClusterMappingInvalidRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_IsClusterMappingInvalidResponse {
  // Returns True when all the following conditions are true:    * The parameter is a cluster or cluster array    * The argument expression is valid and non-empty    * The argument or cluster mapping of the argument is invalid
  // In all other cases, this method returns False.
  bool returnValue = 1;
  // When this method returns True, this parameter returns the reason why the argument is invalid.
  string reasonNotValid = 2;
}

message LabVIEWParameterElement_IsParameterMappingValidRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_IsParameterMappingValidResponse {
  // Returns True when all the following conditions are true: @ol(    * the parameter is a cluster or cluster array or enumeration or enumeration array,    *
  // the argument expression is valid and not empty,    * the cluster mapping of the argument is valid if the parameter is a cluster, and    * the argument value is compatible with the enumeration parameter if the parameter is an enumeration.)
  // In all other cases, returns False.
  bool returnValue = 1;
  // When this method returns False, this parameter returns an explanation for why the argument is invalid.
  string reasonNotValid = 2;
}

message LabVIEWParameterElement_Set_ValueExprRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
  // Specifies an expression to define the argument to pass for the cluster member or cluster array element when calling the VI.
  string propertyValue = 2;
}

message LabVIEWParameterElement_Set_ValueExprResponse {
}

message LabVIEWParameterElement_Get_ValueExprRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_Get_ValueExprResponse {
  // Specifies an expression to define the argument to pass for the cluster member or cluster array element when calling the VI.
  string returnValue = 1;
}

message LabVIEWParameterElement_Get_CategoryRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_Get_CategoryResponse {
  // Returns which group of data types (number, string, and so on) to which the parameter element belongs.
  LabVIEWParameterCategories returnValue = 1;
}

message LabVIEWParameterElement_Get_TypeRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_Get_TypeResponse {
  // Returns the data type of the parameter element. It specifically indicates what type of number, string, etc.
  LabVIEWParameterTypes returnValue = 1;
}

message LabVIEWParameterElement_Get_ElementNameRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_Get_ElementNameResponse {
  // Returns the name of the parameter element in the cluster. Returns an error for array elements.
  string returnValue = 1;
}

message LabVIEWParameterElement_Set_PassAsBinaryStringRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
  // Specifies if TestStand preserves NUL bytes when setting and getting LabVIEW string data.
  bool propertyValue = 2;
}

message LabVIEWParameterElement_Set_PassAsBinaryStringResponse {
}

message LabVIEWParameterElement_Get_PassAsBinaryStringRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_Get_PassAsBinaryStringResponse {
  // Specifies if TestStand preserves NUL bytes when setting and getting LabVIEW string data.
  bool returnValue = 1;
}

message LabVIEWParameterElement_Get_ElementsRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_Get_ElementsResponse {
  // If a parameter element is a cluster or array of clusters, this property returns a collection to access sub-elements of the parameter element.
  LabVIEWParameterElementsInstance returnValue = 1;
}

message LabVIEWParameterElement_Get_ArrayDimensionsRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_Get_ArrayDimensionsResponse {
  // Returns the number of dimensions for array parameters.
  int32 returnValue = 1;
}

message LabVIEWParameterElement_Get_UserDataRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_Get_UserDataResponse {
  // Holds a data item you associate with the parameter object.
  PropertyObjectInstance returnValue = 1;
}

message LabVIEWParameterElement_Get_DisplayTypeRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_Get_DisplayTypeResponse {
  // The display value of the data type of the parameter.
  string returnValue = 1;
}

message LabVIEWParameterElement_Get_ArrayElementPrototypeRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_Get_ArrayElementPrototypeResponse {
  // Returns the cluster prototype for the elements of the array.
  LabVIEWParameterElementInstance returnValue = 1;
}

message LabVIEWParameterElement_Get_ElementCaptionRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_Get_ElementCaptionResponse {
  // Returns the caption of the parameter element in the VI.
  string returnValue = 1;
}

message LabVIEWParameterElement_Set_UseDefaultValueRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
  // Specifies to use the default value of the parameter element when calling the VI.
  bool propertyValue = 2;
}

message LabVIEWParameterElement_Set_UseDefaultValueResponse {
}

message LabVIEWParameterElement_Get_UseDefaultValueRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_Get_UseDefaultValueResponse {
  // Specifies to use the default value of the parameter element when calling the VI.
  bool returnValue = 1;
}

message LabVIEWParameterElement_Get_DefaultValueRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_Get_DefaultValueResponse {
  // Returns a display string that represents the default value defined for the parameter element.
  string returnValue = 1;
}

message LabVIEWParameterElement_Get_DirectionRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_Get_DirectionResponse {
  // Returns a value that indicates whether the parameter is an input or output parameter.
  LabVIEWParameterDirections returnValue = 1;
}

message LabVIEWParameterElement_Get_WireRequirementRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_Get_WireRequirementResponse {
  // Indicates whether the parameter is required, recommended, or optional.
  LabVIEWParameterWireRequirements returnValue = 1;
}

message LabVIEWParameterElement_Get_TypeDisplayStringRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_Get_TypeDisplayStringResponse {
  // Returns a string that describes the type of the parameter element.
  string returnValue = 1;
}

message LabVIEWParameterElement_Get_ValidEvaluationTypesRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_Get_ValidEvaluationTypesResponse {
  // Returns the valid types to which this parameter can evaluate.
  EvaluationTypesInstance returnValue = 1;
}

message LabVIEWParameterElement_Get_PartiallySpecifiedRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_Get_PartiallySpecifiedResponse {
  // Returns a value that indicates whether the parameter element is partially specified.
  bool returnValue = 1;
}

message LabVIEWParameterElement_Get_IndexStringRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_Get_IndexStringResponse {
  // Returns a string that specifies the multi-dimensional array index of the parameter element in the parent LabVIEWParameterElements object.
  string returnValue = 1;
}

message LabVIEWParameterElement_Get_ComplexRealPartElementRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_Get_ComplexRealPartElementResponse {
  // Returns the real part element of a complex number or array.
  LabVIEWParameterElementInstance returnValue = 1;
}

message LabVIEWParameterElement_Get_ComplexImaginaryPartElementRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_Get_ComplexImaginaryPartElementResponse {
  // Returns the imaginary part element of a complex number or array.
  LabVIEWParameterElementInstance returnValue = 1;
}

message LabVIEWParameterElement_Get_ValueExprIsIgnoredRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_Get_ValueExprIsIgnoredResponse {
  // Use this property to determine whether the LabVIEW Adapter ignores the argument value expression when it calls the module. The adapter ignores the argument value expression for parameter elements that belong to a parameter that uses default values or that has a non-empty value expression.
  bool returnValue = 1;
}

message LabVIEWParameterElement_Get_ValueExprIsOptionalRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_Get_ValueExprIsOptionalResponse {
  // Use this property to determine whether the argument value expression is optional. You do not have to specify an optional value expression to call the module successfully. Value expressions for output parameters and value expressions for cluster and array parameters that have parameter elements are optional.
  bool returnValue = 1;
}

message LabVIEWParameterElement_Get_IsNodeUsingDefaultRequest {
  // The id of the LabVIEWParameterElement object.
  LabVIEWParameterElementInstance instance = 1;
}

message LabVIEWParameterElement_Get_IsNodeUsingDefaultResponse {
  // Returns True when the parameter is associated with a LabVIEW property configured to use the default value.
  bool returnValue = 1;
}

// LabVIEWArguments
//
// Use objects from the LabVIEWArguments class to pass specific argument values to a LabVIEW VI using the LabVIEWModule.Execute method. Use the LabVIEWParameters.NewArguments method to create a new arguments collection.
//
service LabVIEWArguments {
  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // LabVIEWArguments_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWArgumentsInstance - The id of the LabVIEWArguments object.
  //    - index: oneof index { int32 numericIndex = 2; string nameIndex = 3; } - Specifies the zero-based index of the item to retrieve. An argument at a specific index in the LabVIEWArguments collection corresponds to the parameter at the same index in the LabVIEWParameters collection that you used to create the LabVIEWArguments collection.
  //
  // LabVIEWArguments_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWArgumentInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(LabVIEWArguments_Get_ItemRequest) returns (LabVIEWArguments_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // LabVIEWArguments_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWArgumentsInstance - The id of the LabVIEWArguments object.
  //
  // LabVIEWArguments_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(LabVIEWArguments_Get_CountRequest) returns (LabVIEWArguments_Get_CountResponse);
  
  
}
message LabVIEWArgumentInstance {
  // Specifies the handle of the LabVIEWArgument instance in the server.
  string id = 1;
}
message LabVIEWArguments_Get_ItemRequest {
  // The id of the LabVIEWArguments object.
  LabVIEWArgumentsInstance instance = 1;
  // Specifies the zero-based index of the item to retrieve. An argument at a specific index in the LabVIEWArguments collection corresponds to the parameter at the same index in the LabVIEWParameters collection that you used to create the LabVIEWArguments collection.
  oneof index { int32 numericIndex = 2; string nameIndex = 3; }
}

message LabVIEWArguments_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  LabVIEWArgumentInstance returnValue = 1;
}

message LabVIEWArguments_Get_CountRequest {
  // The id of the LabVIEWArguments object.
  LabVIEWArgumentsInstance instance = 1;
}

message LabVIEWArguments_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// LabVIEWArgument
//
// Use objects from the LabVIEWArgument class to set the argument value to pass to a LabVIEW VI using the LabVIEWModule.Execute method.
//
service LabVIEWArgument {
  // Property: Value
  //
  // Specifies the argument value to pass for the corresponding parameter.
  //
  // LabVIEWArgument_Set_ValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWArgumentInstance - The id of the LabVIEWArgument object.
  //    - propertyValue: PropertyObjectInstance - Specifies the argument value to pass for the corresponding parameter. 
  //
  // LabVIEWArgument_Set_ValueResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWArgument_Get_ValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWArgumentInstance - The id of the LabVIEWArgument object.
  //
  // LabVIEWArgument_Get_ValueResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Specifies the argument value to pass for the corresponding parameter. 
  //
  rpc Set_Value(LabVIEWArgument_Set_ValueRequest) returns (LabVIEWArgument_Set_ValueResponse);
  rpc Get_Value(LabVIEWArgument_Get_ValueRequest) returns (LabVIEWArgument_Get_ValueResponse);
  
  
  // Property: ParameterName
  //
  // Returns the name of the parameter in the VI that is associated with the argument.
  //
  // LabVIEWArgument_Get_ParameterNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWArgumentInstance - The id of the LabVIEWArgument object.
  //
  // LabVIEWArgument_Get_ParameterNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the parameter in the VI that is associated with the argument. 
  //
  rpc Get_ParameterName(LabVIEWArgument_Get_ParameterNameRequest) returns (LabVIEWArgument_Get_ParameterNameResponse);
  
  
  // Property: Elements
  //
  // Returns a collection of LabVIEWArguments to pass to a parameter that is a cluster or an array of clusters.
  //
  // LabVIEWArgument_Get_ElementsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWArgumentInstance - The id of the LabVIEWArgument object.
  //
  // LabVIEWArgument_Get_ElementsResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWArgumentsInstance - Returns a collection of LabVIEWArguments to pass to a parameter that is a cluster or an array of clusters. 
  //
  rpc Get_Elements(LabVIEWArgument_Get_ElementsRequest) returns (LabVIEWArgument_Get_ElementsResponse);
  
  
  // Property: ComplexRealPart
  //
  // Returns the LabVIEWArgument for the real part of a complex number or array.
  //
  // LabVIEWArgument_Get_ComplexRealPartRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWArgumentInstance - The id of the LabVIEWArgument object.
  //
  // LabVIEWArgument_Get_ComplexRealPartResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWArgumentInstance - Returns the LabVIEWArgument for the real part of a complex number or array. 
  //
  rpc Get_ComplexRealPart(LabVIEWArgument_Get_ComplexRealPartRequest) returns (LabVIEWArgument_Get_ComplexRealPartResponse);
  
  
  // Property: ComplexImaginaryPart
  //
  // Returns the LabVIEWArgument for the imaginary part of a complex number or array.
  //
  // LabVIEWArgument_Get_ComplexImaginaryPartRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWArgumentInstance - The id of the LabVIEWArgument object.
  //
  // LabVIEWArgument_Get_ComplexImaginaryPartResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWArgumentInstance - Returns the LabVIEWArgument for the imaginary part of a complex number or array. 
  //
  rpc Get_ComplexImaginaryPart(LabVIEWArgument_Get_ComplexImaginaryPartRequest) returns (LabVIEWArgument_Get_ComplexImaginaryPartResponse);
  
  
}
message LabVIEWArgument_Set_ValueRequest {
  // The id of the LabVIEWArgument object.
  LabVIEWArgumentInstance instance = 1;
  // Specifies the argument value to pass for the corresponding parameter.
  PropertyObjectInstance propertyValue = 2;
}

message LabVIEWArgument_Set_ValueResponse {
}

message LabVIEWArgument_Get_ValueRequest {
  // The id of the LabVIEWArgument object.
  LabVIEWArgumentInstance instance = 1;
}

message LabVIEWArgument_Get_ValueResponse {
  // Specifies the argument value to pass for the corresponding parameter.
  PropertyObjectInstance returnValue = 1;
}

message LabVIEWArgument_Get_ParameterNameRequest {
  // The id of the LabVIEWArgument object.
  LabVIEWArgumentInstance instance = 1;
}

message LabVIEWArgument_Get_ParameterNameResponse {
  // Returns the name of the parameter in the VI that is associated with the argument.
  string returnValue = 1;
}

message LabVIEWArgument_Get_ElementsRequest {
  // The id of the LabVIEWArgument object.
  LabVIEWArgumentInstance instance = 1;
}

message LabVIEWArgument_Get_ElementsResponse {
  // Returns a collection of LabVIEWArguments to pass to a parameter that is a cluster or an array of clusters.
  LabVIEWArgumentsInstance returnValue = 1;
}

message LabVIEWArgument_Get_ComplexRealPartRequest {
  // The id of the LabVIEWArgument object.
  LabVIEWArgumentInstance instance = 1;
}

message LabVIEWArgument_Get_ComplexRealPartResponse {
  // Returns the LabVIEWArgument for the real part of a complex number or array.
  LabVIEWArgumentInstance returnValue = 1;
}

message LabVIEWArgument_Get_ComplexImaginaryPartRequest {
  // The id of the LabVIEWArgument object.
  LabVIEWArgumentInstance instance = 1;
}

message LabVIEWArgument_Get_ComplexImaginaryPartResponse {
  // Returns the LabVIEWArgument for the imaginary part of a complex number or array.
  LabVIEWArgumentInstance returnValue = 1;
}

// LabVIEWNodeProperties
//
// Use objects from the LabVIEWNodeProperties class to configure and obtain LabVIEWNodeProperties for a module that uses the LabVIEW Adapter. Use the LabVIEWModule.NodeProperties property to obtain the collection of LabVIEWNodeProperties for a module.
//
service LabVIEWNodeProperties {
  // Method: New
  //
  // Adds a new item to the collection.
  //
  // LabVIEWNodeProperties_NewRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNodePropertiesInstance - The id of the LabVIEWNodeProperties object.
  //    - index: int32 - Specifies the zero-based index of the item to add.
  //    - nodePropertyDirection: LabVIEWNodePropertyDirections - Indicates the direction of the property. 0 indicates an In property. 1 indicates an Out property.
  //
  // LabVIEWNodeProperties_NewResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc New(LabVIEWNodeProperties_NewRequest) returns (LabVIEWNodeProperties_NewResponse);
  
  
  // Method: Delete
  //
  // Removes the item at the specified index.
  //
  // LabVIEWNodeProperties_DeleteRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNodePropertiesInstance - The id of the LabVIEWNodeProperties object.
  //    - index: int32 - Specifies the zero-based index of the item to delete.
  //
  // LabVIEWNodeProperties_DeleteResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Delete(LabVIEWNodeProperties_DeleteRequest) returns (LabVIEWNodeProperties_DeleteResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // LabVIEWNodeProperties_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNodePropertiesInstance - The id of the LabVIEWNodeProperties object.
  //
  // LabVIEWNodeProperties_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(LabVIEWNodeProperties_ClearRequest) returns (LabVIEWNodeProperties_ClearResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // LabVIEWNodeProperties_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNodePropertiesInstance - The id of the LabVIEWNodeProperties object.
  //    - index: int32 - Specifies the zero-based index.
  //
  // LabVIEWNodeProperties_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNodePropertyInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(LabVIEWNodeProperties_Get_ItemRequest) returns (LabVIEWNodeProperties_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // LabVIEWNodeProperties_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNodePropertiesInstance - The id of the LabVIEWNodeProperties object.
  //
  // LabVIEWNodeProperties_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(LabVIEWNodeProperties_Get_CountRequest) returns (LabVIEWNodeProperties_Get_CountResponse);
  
  
}
message LabVIEWNodePropertyInstance {
  // Specifies the handle of the LabVIEWNodeProperty instance in the server.
  string id = 1;
}
message LabVIEWNodeProperties_NewRequest {
  // The id of the LabVIEWNodeProperties object.
  LabVIEWNodePropertiesInstance instance = 1;
  // Specifies the zero-based index of the item to add.
  int32 index = 2;
  // Specifies the LongName of a particular property.
  string LongName = 3;
  // Specifies the DataName of a particular property.
  string DataName = 4;
  // Specifies the unique ID of a particular property.
  string UniqueID = 5;
  // Indicates the direction of the property. 0 indicates an In property. 1 indicates an Out property.
  LabVIEWNodePropertyDirections nodePropertyDirection = 6;
}

message LabVIEWNodeProperties_NewResponse {
}

message LabVIEWNodeProperties_DeleteRequest {
  // The id of the LabVIEWNodeProperties object.
  LabVIEWNodePropertiesInstance instance = 1;
  // Specifies the zero-based index of the item to delete.
  int32 index = 2;
}

message LabVIEWNodeProperties_DeleteResponse {
}

message LabVIEWNodeProperties_ClearRequest {
  // The id of the LabVIEWNodeProperties object.
  LabVIEWNodePropertiesInstance instance = 1;
}

message LabVIEWNodeProperties_ClearResponse {
}

message LabVIEWNodeProperties_Get_ItemRequest {
  // The id of the LabVIEWNodeProperties object.
  LabVIEWNodePropertiesInstance instance = 1;
  // Specifies the zero-based index.
  optional int32 index = 2;
}

message LabVIEWNodeProperties_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  LabVIEWNodePropertyInstance returnValue = 1;
}

message LabVIEWNodeProperties_Get_CountRequest {
  // The id of the LabVIEWNodeProperties object.
  LabVIEWNodePropertiesInstance instance = 1;
}

message LabVIEWNodeProperties_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// LabVIEWNodeProperty
//
// Use objects from the LabVIEWNodeProperty class to configure and obtain LabVIEWNodeProperty-specific information for an item in the LabVIEWNodeProperties collection class.
//
service LabVIEWNodeProperty {
  // Method: AsPropertyObject
  //
  // Returns the underlying PropertyObject that represents the LabVIEWPropertyNode object.
  //
  // Use the PropertyObject to modify, add, or remove custom properties of the object.
  //
  // LabVIEWNodeProperty_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNodePropertyInstance - The id of the LabVIEWNodeProperty object.
  //
  // LabVIEWNodeProperty_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(LabVIEWNodeProperty_AsPropertyObjectRequest) returns (LabVIEWNodeProperty_AsPropertyObjectResponse);
  
  

  // Property: LongName
  //
  // Specifies the LongName of a particular property.
  //
  // LabVIEWNodeProperty_Set_LongNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNodePropertyInstance - The id of the LabVIEWNodeProperty object.
  //    - Value: string - Specifies the LongName of a particular property. 
  //
  // LabVIEWNodeProperty_Set_LongNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWNodeProperty_Get_LongNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNodePropertyInstance - The id of the LabVIEWNodeProperty object.
  //
  // LabVIEWNodeProperty_Get_LongNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the LongName of a particular property. 
  //
  rpc Set_LongName(LabVIEWNodeProperty_Set_LongNameRequest) returns (LabVIEWNodeProperty_Set_LongNameResponse);
  rpc Get_LongName(LabVIEWNodeProperty_Get_LongNameRequest) returns (LabVIEWNodeProperty_Get_LongNameResponse);
  
  
  // Property: DataName
  //
  // Specifies the DataName of a particular property.
  //
  // LabVIEWNodeProperty_Set_DataNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNodePropertyInstance - The id of the LabVIEWNodeProperty object.
  //    - Value: string - Specifies the DataName of a particular property. 
  //
  // LabVIEWNodeProperty_Set_DataNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWNodeProperty_Get_DataNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNodePropertyInstance - The id of the LabVIEWNodeProperty object.
  //
  // LabVIEWNodeProperty_Get_DataNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the DataName of a particular property. 
  //
  rpc Set_DataName(LabVIEWNodeProperty_Set_DataNameRequest) returns (LabVIEWNodeProperty_Set_DataNameResponse);
  rpc Get_DataName(LabVIEWNodeProperty_Get_DataNameRequest) returns (LabVIEWNodeProperty_Get_DataNameResponse);
  
  
  // Property: Direction
  //
  // Indicates the direction of the property. 0 indicates an In property. 1 indicates an Out property.
  //
  // LabVIEWNodeProperty_Set_DirectionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNodePropertyInstance - The id of the LabVIEWNodeProperty object.
  //    - Value: LabVIEWNodePropertyDirections - Indicates the direction of the property. 0 indicates an In property. 1 indicates an Out property. 
  //
  // LabVIEWNodeProperty_Set_DirectionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWNodeProperty_Get_DirectionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNodePropertyInstance - The id of the LabVIEWNodeProperty object.
  //
  // LabVIEWNodeProperty_Get_DirectionResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNodePropertyDirections - Indicates the direction of the property. 0 indicates an In property. 1 indicates an Out property. 
  //
  rpc Set_Direction(LabVIEWNodeProperty_Set_DirectionRequest) returns (LabVIEWNodeProperty_Set_DirectionResponse);
  rpc Get_Direction(LabVIEWNodeProperty_Get_DirectionRequest) returns (LabVIEWNodeProperty_Get_DirectionResponse);
  
  
  // Property: UniqueID
  //
  // Specifies the UniqueID of a particular property.
  //
  // LabVIEWNodeProperty_Set_UniqueIDRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNodePropertyInstance - The id of the LabVIEWNodeProperty object.
  //    - Value: string - Specifies the UniqueID of a particular property. 
  //
  // LabVIEWNodeProperty_Set_UniqueIDResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWNodeProperty_Get_UniqueIDRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNodePropertyInstance - The id of the LabVIEWNodeProperty object.
  //
  // LabVIEWNodeProperty_Get_UniqueIDResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the UniqueID of a particular property. 
  //
  rpc Set_UniqueID(LabVIEWNodeProperty_Set_UniqueIDRequest) returns (LabVIEWNodeProperty_Set_UniqueIDResponse);
  rpc Get_UniqueID(LabVIEWNodeProperty_Get_UniqueIDRequest) returns (LabVIEWNodeProperty_Get_UniqueIDResponse);
  
  
}
message LabVIEWNodeProperty_AsPropertyObjectRequest {
  // The id of the LabVIEWNodeProperty object.
  LabVIEWNodePropertyInstance instance = 1;
}

message LabVIEWNodeProperty_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message LabVIEWNodeProperty_Set_LongNameRequest {
  // The id of the LabVIEWNodeProperty object.
  LabVIEWNodePropertyInstance instance = 1;
  // Specifies the LongName of a particular property.
  string Value = 2;
}

message LabVIEWNodeProperty_Set_LongNameResponse {
}

message LabVIEWNodeProperty_Get_LongNameRequest {
  // The id of the LabVIEWNodeProperty object.
  LabVIEWNodePropertyInstance instance = 1;
}

message LabVIEWNodeProperty_Get_LongNameResponse {
  // Specifies the LongName of a particular property.
  string returnValue = 1;
}

message LabVIEWNodeProperty_Set_DataNameRequest {
  // The id of the LabVIEWNodeProperty object.
  LabVIEWNodePropertyInstance instance = 1;
  // Specifies the DataName of a particular property.
  string Value = 2;
}

message LabVIEWNodeProperty_Set_DataNameResponse {
}

message LabVIEWNodeProperty_Get_DataNameRequest {
  // The id of the LabVIEWNodeProperty object.
  LabVIEWNodePropertyInstance instance = 1;
}

message LabVIEWNodeProperty_Get_DataNameResponse {
  // Specifies the DataName of a particular property.
  string returnValue = 1;
}

message LabVIEWNodeProperty_Set_DirectionRequest {
  // The id of the LabVIEWNodeProperty object.
  LabVIEWNodePropertyInstance instance = 1;
  // Indicates the direction of the property. 0 indicates an In property. 1 indicates an Out property.
  LabVIEWNodePropertyDirections Value = 2;
}

message LabVIEWNodeProperty_Set_DirectionResponse {
}

message LabVIEWNodeProperty_Get_DirectionRequest {
  // The id of the LabVIEWNodeProperty object.
  LabVIEWNodePropertyInstance instance = 1;
}

message LabVIEWNodeProperty_Get_DirectionResponse {
  // Indicates the direction of the property. 0 indicates an In property. 1 indicates an Out property.
  LabVIEWNodePropertyDirections returnValue = 1;
}

message LabVIEWNodeProperty_Set_UniqueIDRequest {
  // The id of the LabVIEWNodeProperty object.
  LabVIEWNodePropertyInstance instance = 1;
  // Specifies the UniqueID of a particular property.
  string Value = 2;
}

message LabVIEWNodeProperty_Set_UniqueIDResponse {
}

message LabVIEWNodeProperty_Get_UniqueIDRequest {
  // The id of the LabVIEWNodeProperty object.
  LabVIEWNodePropertyInstance instance = 1;
}

message LabVIEWNodeProperty_Get_UniqueIDResponse {
  // Specifies the UniqueID of a particular property.
  string returnValue = 1;
}

// HTBasicAdapter
//
// Use objects from the HTBasicAdapter class to configure and obtain HTBasic Adapter-specific information about the module adapter. Call the Engine.GetAdapter or Engine.GetAdapterByKeyName method to obtain a reference to the adapter object.
// To access the properties and methods of the Adapter class, use the HTBasicAdapter.AsAdapter method to obtain an object.
//
service HTBasicAdapter {
  // Method: AsAdapter
  //
  // Returns the underlying module Adapter object that represents the HTBasicAdapter object.
  //
  // Use the adapter to access properties and methods common to all adapters.
  //
  // HTBasicAdapter_AsAdapterRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: HTBasicAdapterInstance - The id of the HTBasicAdapter object.
  //
  // HTBasicAdapter_AsAdapterResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdapterInstance - The return type of the Adapter object.
  //
  rpc AsAdapter(HTBasicAdapter_AsAdapterRequest) returns (HTBasicAdapter_AsAdapterResponse);
  
  

  // Property: UseDevelopmentServer
  //
  // Specifies whether the HTBasic Adapter uses the development or run-time version of the HTBasic server.
  //
  // If this property is True, the adapter uses the development version. Otherwise, the adapter uses the run-time version.
  //
  // HTBasicAdapter_Set_UseDevelopmentServerRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: HTBasicAdapterInstance - The id of the HTBasicAdapter object.
  //    - propertyValue: bool - Specifies whether the HTBasic Adapter uses the development or run-time version of the HTBasic server. 
  //
  // HTBasicAdapter_Set_UseDevelopmentServerResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // HTBasicAdapter_Get_UseDevelopmentServerRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: HTBasicAdapterInstance - The id of the HTBasicAdapter object.
  //
  // HTBasicAdapter_Get_UseDevelopmentServerResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the HTBasic Adapter uses the development or run-time version of the HTBasic server. 
  //
  rpc Set_UseDevelopmentServer(HTBasicAdapter_Set_UseDevelopmentServerRequest) returns (HTBasicAdapter_Set_UseDevelopmentServerResponse);
  rpc Get_UseDevelopmentServer(HTBasicAdapter_Get_UseDevelopmentServerRequest) returns (HTBasicAdapter_Get_UseDevelopmentServerResponse);
  
  
  // Property: RunTimeServerPath
  //
  // Specifies the location of the run-time version of the HTBasic server.
  //
  // The specified location must be a valid path.
  //
  // HTBasicAdapter_Set_RunTimeServerPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: HTBasicAdapterInstance - The id of the HTBasicAdapter object.
  //    - propertyValue: string - Specifies the location of the run-time version of the HTBasic server. 
  //
  // HTBasicAdapter_Set_RunTimeServerPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // HTBasicAdapter_Get_RunTimeServerPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: HTBasicAdapterInstance - The id of the HTBasicAdapter object.
  //
  // HTBasicAdapter_Get_RunTimeServerPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the location of the run-time version of the HTBasic server. 
  //
  rpc Set_RunTimeServerPath(HTBasicAdapter_Set_RunTimeServerPathRequest) returns (HTBasicAdapter_Set_RunTimeServerPathResponse);
  rpc Get_RunTimeServerPath(HTBasicAdapter_Get_RunTimeServerPathRequest) returns (HTBasicAdapter_Get_RunTimeServerPathResponse);
  
  
  // Property: DevelopmentServerPath
  //
  // Specifies the location of the development version of the HTBasic server.
  //
  // The specified location must be a valid path.
  //
  // HTBasicAdapter_Set_DevelopmentServerPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: HTBasicAdapterInstance - The id of the HTBasicAdapter object.
  //    - propertyValue: string - Specifies the location of the development version of the HTBasic server. 
  //
  // HTBasicAdapter_Set_DevelopmentServerPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // HTBasicAdapter_Get_DevelopmentServerPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: HTBasicAdapterInstance - The id of the HTBasicAdapter object.
  //
  // HTBasicAdapter_Get_DevelopmentServerPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the location of the development version of the HTBasic server. 
  //
  rpc Set_DevelopmentServerPath(HTBasicAdapter_Set_DevelopmentServerPathRequest) returns (HTBasicAdapter_Set_DevelopmentServerPathResponse);
  rpc Get_DevelopmentServerPath(HTBasicAdapter_Get_DevelopmentServerPathRequest) returns (HTBasicAdapter_Get_DevelopmentServerPathResponse);
  
  
  // Property: DefaultWorkingDirectory
  //
  // Specifies whether the HTBasic Adapter sets the working directory prior to invoking a subroutine. This setting applies only to HTBasic steps when you set the Working Directory option of the step to Use Adapter Default.
  //
  // The default value is the subroutine file directory.
  //
  // HTBasicAdapter_Set_DefaultWorkingDirectoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: HTBasicAdapterInstance - The id of the HTBasicAdapter object.
  //    - propertyValue: HTBasicDefaultWorkingDirTypes - Specifies whether the HTBasic Adapter sets the working directory prior to invoking a subroutine. This setting applies only to HTBasic steps when you set the Working Directory option of the step to Use Adapter Default. 
  //
  // HTBasicAdapter_Set_DefaultWorkingDirectoryResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // HTBasicAdapter_Get_DefaultWorkingDirectoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: HTBasicAdapterInstance - The id of the HTBasicAdapter object.
  //
  // HTBasicAdapter_Get_DefaultWorkingDirectoryResponse - The response message from the server. It provides the return value.
  //    - returnValue: HTBasicDefaultWorkingDirTypes - Specifies whether the HTBasic Adapter sets the working directory prior to invoking a subroutine. This setting applies only to HTBasic steps when you set the Working Directory option of the step to Use Adapter Default. 
  //
  rpc Set_DefaultWorkingDirectory(HTBasicAdapter_Set_DefaultWorkingDirectoryRequest) returns (HTBasicAdapter_Set_DefaultWorkingDirectoryResponse);
  rpc Get_DefaultWorkingDirectory(HTBasicAdapter_Get_DefaultWorkingDirectoryRequest) returns (HTBasicAdapter_Get_DefaultWorkingDirectoryResponse);
  
  
  // Property: SpecWorkingDirectoryPath
  //
  // Specifies the working directory used for the HTBasic Adapter. The specified working directory must be a valid path.
  //
  // This path is only used when you select Use Specified Directory as the Default Working Directory option.
  //
  // HTBasicAdapter_Set_SpecWorkingDirectoryPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: HTBasicAdapterInstance - The id of the HTBasicAdapter object.
  //    - propertyValue: string - Specifies the working directory used for the HTBasic Adapter. The specified working directory must be a valid path. 
  //
  // HTBasicAdapter_Set_SpecWorkingDirectoryPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // HTBasicAdapter_Get_SpecWorkingDirectoryPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: HTBasicAdapterInstance - The id of the HTBasicAdapter object.
  //
  // HTBasicAdapter_Get_SpecWorkingDirectoryPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the working directory used for the HTBasic Adapter. The specified working directory must be a valid path. 
  //
  rpc Set_SpecWorkingDirectoryPath(HTBasicAdapter_Set_SpecWorkingDirectoryPathRequest) returns (HTBasicAdapter_Set_SpecWorkingDirectoryPathResponse);
  rpc Get_SpecWorkingDirectoryPath(HTBasicAdapter_Get_SpecWorkingDirectoryPathRequest) returns (HTBasicAdapter_Get_SpecWorkingDirectoryPathResponse);
  
  
}
message HTBasicAdapterInstance {
  // Specifies the handle of the HTBasicAdapter instance in the server.
  string id = 1;
}
message HTBasicAdapter_AsAdapterRequest {
  // The id of the HTBasicAdapter object.
  HTBasicAdapterInstance instance = 1;
}

message HTBasicAdapter_AsAdapterResponse {
  // The return type of the Adapter object.
  AdapterInstance returnValue = 1;
}

message HTBasicAdapter_Set_UseDevelopmentServerRequest {
  // The id of the HTBasicAdapter object.
  HTBasicAdapterInstance instance = 1;
  // Specifies whether the HTBasic Adapter uses the development or run-time version of the HTBasic server.
  bool propertyValue = 2;
}

message HTBasicAdapter_Set_UseDevelopmentServerResponse {
}

message HTBasicAdapter_Get_UseDevelopmentServerRequest {
  // The id of the HTBasicAdapter object.
  HTBasicAdapterInstance instance = 1;
}

message HTBasicAdapter_Get_UseDevelopmentServerResponse {
  // Specifies whether the HTBasic Adapter uses the development or run-time version of the HTBasic server.
  bool returnValue = 1;
}

message HTBasicAdapter_Set_RunTimeServerPathRequest {
  // The id of the HTBasicAdapter object.
  HTBasicAdapterInstance instance = 1;
  // Specifies the location of the run-time version of the HTBasic server.
  string propertyValue = 2;
}

message HTBasicAdapter_Set_RunTimeServerPathResponse {
}

message HTBasicAdapter_Get_RunTimeServerPathRequest {
  // The id of the HTBasicAdapter object.
  HTBasicAdapterInstance instance = 1;
}

message HTBasicAdapter_Get_RunTimeServerPathResponse {
  // Specifies the location of the run-time version of the HTBasic server.
  string returnValue = 1;
}

message HTBasicAdapter_Set_DevelopmentServerPathRequest {
  // The id of the HTBasicAdapter object.
  HTBasicAdapterInstance instance = 1;
  // Specifies the location of the development version of the HTBasic server.
  string propertyValue = 2;
}

message HTBasicAdapter_Set_DevelopmentServerPathResponse {
}

message HTBasicAdapter_Get_DevelopmentServerPathRequest {
  // The id of the HTBasicAdapter object.
  HTBasicAdapterInstance instance = 1;
}

message HTBasicAdapter_Get_DevelopmentServerPathResponse {
  // Specifies the location of the development version of the HTBasic server.
  string returnValue = 1;
}

message HTBasicAdapter_Set_DefaultWorkingDirectoryRequest {
  // The id of the HTBasicAdapter object.
  HTBasicAdapterInstance instance = 1;
  // Specifies whether the HTBasic Adapter sets the working directory prior to invoking a subroutine. This setting applies only to HTBasic steps when you set the Working Directory option of the step to Use Adapter Default.
  HTBasicDefaultWorkingDirTypes propertyValue = 2;
}

message HTBasicAdapter_Set_DefaultWorkingDirectoryResponse {
}

message HTBasicAdapter_Get_DefaultWorkingDirectoryRequest {
  // The id of the HTBasicAdapter object.
  HTBasicAdapterInstance instance = 1;
}

message HTBasicAdapter_Get_DefaultWorkingDirectoryResponse {
  // Specifies whether the HTBasic Adapter sets the working directory prior to invoking a subroutine. This setting applies only to HTBasic steps when you set the Working Directory option of the step to Use Adapter Default.
  HTBasicDefaultWorkingDirTypes returnValue = 1;
}

message HTBasicAdapter_Set_SpecWorkingDirectoryPathRequest {
  // The id of the HTBasicAdapter object.
  HTBasicAdapterInstance instance = 1;
  // Specifies the working directory used for the HTBasic Adapter. The specified working directory must be a valid path.
  string propertyValue = 2;
}

message HTBasicAdapter_Set_SpecWorkingDirectoryPathResponse {
}

message HTBasicAdapter_Get_SpecWorkingDirectoryPathRequest {
  // The id of the HTBasicAdapter object.
  HTBasicAdapterInstance instance = 1;
}

message HTBasicAdapter_Get_SpecWorkingDirectoryPathResponse {
  // Specifies the working directory used for the HTBasic Adapter. The specified working directory must be a valid path.
  string returnValue = 1;
}

// SequenceAdapter
//
// Use objects from the Sequence Adapter class to configure and obtain Sequence Adapter-specific information about the module adapter. Call the Engine.GetAdapter or Engine.GetAdapterByKeyName method to obtain a reference to the adapter object.
// To access the properties and methods of the Adapter class, use the SequenceAdapter.AsAdapter method to obtain an object.
//
service SequenceAdapter {
  // Method: AsAdapter
  //
  // Returns the underlying module Adapter that represents the SequenceAdapter object.
  //
  // Use the underlying module Adapter object to access properties and methods common to all adapters.
  //
  // SequenceAdapter_AsAdapterRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceAdapterInstance - The id of the SequenceAdapter object.
  //
  // SequenceAdapter_AsAdapterResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdapterInstance - The return type of the Adapter object.
  //
  rpc AsAdapter(SequenceAdapter_AsAdapterRequest) returns (SequenceAdapter_AsAdapterResponse);
  
  
  // Method: GetSequenceFile
  //
  // Returns a reference to a SequenceFile object for examining the contents of the file.
  //
  // Use this method to examine the contents of a sequence file without running load and unload callbacks, without preloading modules, and without merging types. Sequence files loaded by this method remain in memory until they have not been referenced after several minutes. As a result, calling this method multiple times for the same file does not usually cause the file to be loaded multiple times.
  // 
  // Do not call Engine.ReleaseSequenceFileEx on this object before releasing it.
  // 
  // To execute or edit a sequence file, use the Engine.GetSequenceFileEx method instead of this method.
  //
  // SequenceAdapter_GetSequenceFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceAdapterInstance - The id of the SequenceAdapter object.
  //
  // SequenceAdapter_GetSequenceFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFileInstance - Returns a reference to a SequenceFile object that represents the sequence file the path parameter specifies. The returned reference is null if the path parameter is invalid or does not specify a valid sequence file. 
  //
  rpc GetSequenceFile(SequenceAdapter_GetSequenceFileRequest) returns (SequenceAdapter_GetSequenceFileResponse);
  
  
}
message SequenceAdapterInstance {
  // Specifies the handle of the SequenceAdapter instance in the server.
  string id = 1;
}
message SequenceAdapter_AsAdapterRequest {
  // The id of the SequenceAdapter object.
  SequenceAdapterInstance instance = 1;
}

message SequenceAdapter_AsAdapterResponse {
  // The return type of the Adapter object.
  AdapterInstance returnValue = 1;
}

message SequenceAdapter_GetSequenceFileRequest {
  // The id of the SequenceAdapter object.
  SequenceAdapterInstance instance = 1;
  // Specifies the absolute pathname of the sequence file.
  string Path = 2;
}

message SequenceAdapter_GetSequenceFileResponse {
  // Returns a reference to a SequenceFile object that represents the sequence file the path parameter specifies. The returned reference is null if the path parameter is invalid or does not specify a valid sequence file.
  SequenceFileInstance returnValue = 1;
}

// DotNetAdapter
//
// Use objects from the DotNetAdapter class to configure and obtain .NET Adapter-specific information about the module adapter. Call the Engine.GetAdapter or Engine.GetAdapterByKeyName method to obtain a reference to the adapter object.
// To access the properties and methods of the Adapter class, use the DotNetAdapter.AsAdapter method to obtain an object.
//
service DotNetAdapter {
  // Method: AsAdapter
  //
  // Returns the underlying module Adapter object that represents the DotNetAdapter object.
  //
  // Use the underlying module Adapter object to access properties and methods common to all adapters.
  //
  // DotNetAdapter_AsAdapterRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetAdapterInstance - The id of the DotNetAdapter object.
  //
  // DotNetAdapter_AsAdapterResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdapterInstance - The return type of the Adapter object.
  //
  rpc AsAdapter(DotNetAdapter_AsAdapterRequest) returns (DotNetAdapter_AsAdapterResponse);
  
  
  // Method: GetStructurePassingEnabled
  //
  // Returns a value that indicates whether a type definition allows the .NET Adapter to pass instances of the type as structure parameters.
  //
  // DotNetAdapter_GetStructurePassingEnabledRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetAdapterInstance - The id of the DotNetAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the property object is not a type definition.
  //
  // DotNetAdapter_GetStructurePassingEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc GetStructurePassingEnabled(DotNetAdapter_GetStructurePassingEnabledRequest) returns (DotNetAdapter_GetStructurePassingEnabledResponse);
  
  
  // Method: SetStructurePassingEnabled
  //
  // Specifies whether a type definition allows the .NET Adapter to pass instances of the type as structure parameters.
  //
  // DotNetAdapter_SetStructurePassingEnabledRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetAdapterInstance - The id of the DotNetAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the property object is not a type definition.
  //    - structPassingEnabled: bool - Specifies whether structure passing is enabled.
  //
  // DotNetAdapter_SetStructurePassingEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetStructurePassingEnabled(DotNetAdapter_SetStructurePassingEnabledRequest) returns (DotNetAdapter_SetStructurePassingEnabledResponse);
  
  
  // Method: GetExcludeFromStructure
  //
  // Returns a value that indicates whether the specified type definition property is excluded when converting instances of the type definition into structures to pass as .NET parameters.
  //
  // DotNetAdapter_GetExcludeFromStructureRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetAdapterInstance - The id of the DotNetAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the property object is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //
  // DotNetAdapter_GetExcludeFromStructureResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc GetExcludeFromStructure(DotNetAdapter_GetExcludeFromStructureRequest) returns (DotNetAdapter_GetExcludeFromStructureResponse);
  
  
  // Method: SetExcludeFromStructure
  //
  // Specifies whether the specified type definition property is excluded when converting instances of the type definition into structures to pass as .NET parameters.
  //
  // DotNetAdapter_SetExcludeFromStructureRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetAdapterInstance - The id of the DotNetAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the property object is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //    - excludeFromStructure: bool - Pass True  to exclude the corresponding property. Otherwise, set this parameter to False.
  //
  // DotNetAdapter_SetExcludeFromStructureResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetExcludeFromStructure(DotNetAdapter_SetExcludeFromStructureRequest) returns (DotNetAdapter_SetExcludeFromStructureResponse);
  
  
  // Method: GetStructureMemberLabel
  //
  // Returns the label of the structure member that corresponds to the specified type definition property.
  //
  // DotNetAdapter_GetStructureMemberLabelRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetAdapterInstance - The id of the DotNetAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the property object is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //
  // DotNetAdapter_GetStructureMemberLabelResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetStructureMemberLabel(DotNetAdapter_GetStructureMemberLabelRequest) returns (DotNetAdapter_GetStructureMemberLabelResponse);
  
  
  // Method: SetStructureMemberLabel
  //
  // Specifies the label of the structure member that corresponds to the specified type definition property.
  //
  // DotNetAdapter_SetStructureMemberLabelRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetAdapterInstance - The id of the DotNetAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the property object is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //    - structureMemberLabel: string - Specifies the label of the structure member.
  //
  // DotNetAdapter_SetStructureMemberLabelResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetStructureMemberLabel(DotNetAdapter_SetStructureMemberLabelRequest) returns (DotNetAdapter_SetStructureMemberLabelResponse);
  
  
  // Method: GetGACAssemblyStrongNames
  //
  // Returns the strong name of each assembly found in the Global Assembly Cache (GAC).
  //
  // DotNetAdapter_GetGACAssemblyStrongNamesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetAdapterInstance - The id of the DotNetAdapter object.
  //
  // DotNetAdapter_GetGACAssemblyStrongNamesResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated string - The return type of the String[] object.
  //
  rpc GetGACAssemblyStrongNames(DotNetAdapter_GetGACAssemblyStrongNamesRequest) returns (DotNetAdapter_GetGACAssemblyStrongNamesResponse);
  
  
  // Method: CacheAssemblyInfo
  //
  // Reads the specified assembly and caches type information for later use in TestStand. This method also reads and caches types and assemblies this assembly references. If a cached assembly changes, TestStand detects the change and updates the cache.
  //
  // DotNetAdapter_CacheAssemblyInfoRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetAdapterInstance - The id of the DotNetAdapter object.
  //    - assemblyLocationParam: DotNetModuleAssemblyLocations - Specifies whether the assembly is located in a file or in the Global Assembly Cache (GAC).
  //    - assemblyPathParam: string - Specifies the pathname if the assembly is located in a file. This parameter passes the strong name if the assembly is located in the GAC.
  //
  // DotNetAdapter_CacheAssemblyInfoResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc CacheAssemblyInfo(DotNetAdapter_CacheAssemblyInfoRequest) returns (DotNetAdapter_CacheAssemblyInfoResponse);
  
  
  // Method: IsClassValid
  //
  // Returns True if the .NET Adapter finds the given class in the given assembly. Otherwise, this method returns False.
  //
  // DotNetAdapter_IsClassValidRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetAdapterInstance - The id of the DotNetAdapter object.
  //    - assemblyLocationParam: DotNetModuleAssemblyLocations - Specifies whether the assembly is located in a file or in the Global Assembly Cache (GAC).
  //    - assemblyPathParam: string - Specifies the pathname if the assembly is located in a file. The parameter passes the strong name if the assembly is located in the GAC.
  //    - classTypeNameParam: string - Specifies the fully specified type name for the class, including namespaces.
  //
  // DotNetAdapter_IsClassValidResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc IsClassValid(DotNetAdapter_IsClassValidRequest) returns (DotNetAdapter_IsClassValidResponse);
  
  
  // Method: GetClassNames
  //
  // Retrieves the list of class names found in the given assembly.
  //
  // DotNetAdapter_GetClassNamesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetAdapterInstance - The id of the DotNetAdapter object.
  //    - assemblyLocationParam: DotNetModuleAssemblyLocations - Specifies whether the assembly is located in a file or in the Global Assembly Cache (GAC).
  //    - assemblyPathParam: string - Specifies the pathname if the assembly is located in a file. The parameter passes the strong name if the assembly is located in the GAC.
  //    - reserved: int32 - This parameter is not currently used but may be used in the future. Pass 0 for this parameter.
  //
  // DotNetAdapter_GetClassNamesResponse - The response message from the server. It provides the output parameters.
  //    - typeNames: repeated strin - Returns an array that contains the fully qualified type names of all classes found in the specified assembly. This array is parallel to the displayNames array.
  //    - displayNames: repeated strin - Returns an array that contains the display names for all classes found in the assembly. This array is parallel to the typeNames array.
  //      The display name for a class might be slightly different than the fully qualified name. For example, if all classes in the assembly share a common namespace, the display names do not include the namespace.
  //
  rpc GetClassNames(DotNetAdapter_GetClassNamesRequest) returns (DotNetAdapter_GetClassNamesResponse);
  
  
  // Method: GetMemberNames
  //
  // Retrieves the list of public member names found in the given class.
  //
  // DotNetAdapter_GetMemberNamesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetAdapterInstance - The id of the DotNetAdapter object.
  //    - assemblyLocationParam: DotNetModuleAssemblyLocations - Specifies whether the assembly is located in a file or in the Global Assembly Cache (GAC).
  //    - assemblyPathParam: string - Specifies the pathname, if the assembly is located in a file. The parameter passes the strong name if the assembly is located in the GAC.
  //    - classTypeNameParam: string - Specifies the fully specified type name for the class, including namespaces.
  //    - options: int32 - Specifies one or more DotNetAdapterGetMemberNamesOptions constants. Use the bitwise-OR operator to specify multiple flags.
  //
  // DotNetAdapter_GetMemberNamesResponse - The response message from the server. It provides the output parameters.
  //    - signatures: repeated strin - Returns an array that contains the full signature for each member found in the specified class. This array is parallel to the displayNames array.
  //    - displayNames: repeated strin - Returns an array that contains the display name for each member found in the specified class. This array is parallel to the signatures array.
  //      Display names may be slightly different than the member signatures. For example, static members have the static suffix at the end of the display name.
  //
  rpc GetMemberNames(DotNetAdapter_GetMemberNamesRequest) returns (DotNetAdapter_GetMemberNamesResponse);
  
  
  // Method: NewModule
  //
  // Creates and returns a new DotNetModule object you can call directly without using a step, sequence, or execution.
  //
  // DotNetAdapter_NewModuleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetAdapterInstance - The id of the DotNetAdapter object.
  //
  // DotNetAdapter_NewModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: DotNetModuleInstance - The return type of the DotNetModule object.
  //
  rpc NewModule(DotNetAdapter_NewModuleRequest) returns (DotNetAdapter_NewModuleResponse);
  
  

  // Property: VisualStudioDTEVersionForEditing
  //
  // Specifies the Microsoft Visual Studio development environment (DTE) version the .NET Adapter uses when creating and editing code when more than one version of Visual Studio is installed.
  //
  // If you have only one version of Visual Studio installed, the .NET Adapter always uses that version for debugging.
  // You can set this property to a supported value of the VisualStudioDTEVersions constants or to the programmatic identifier of the DTE version you want to use.
  //
  // DotNetAdapter_Set_VisualStudioDTEVersionForEditingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetAdapterInstance - The id of the DotNetAdapter object.
  //    - propertyValue: string - Specifies the Microsoft Visual Studio development environment (DTE) version the .NET Adapter uses when creating and editing code when more than one version of Visual Studio is installed. 
  //
  // DotNetAdapter_Set_VisualStudioDTEVersionForEditingResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DotNetAdapter_Get_VisualStudioDTEVersionForEditingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetAdapterInstance - The id of the DotNetAdapter object.
  //
  // DotNetAdapter_Get_VisualStudioDTEVersionForEditingResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the Microsoft Visual Studio development environment (DTE) version the .NET Adapter uses when creating and editing code when more than one version of Visual Studio is installed. 
  //
  rpc Set_VisualStudioDTEVersionForEditing(DotNetAdapter_Set_VisualStudioDTEVersionForEditingRequest) returns (DotNetAdapter_Set_VisualStudioDTEVersionForEditingResponse);
  rpc Get_VisualStudioDTEVersionForEditing(DotNetAdapter_Get_VisualStudioDTEVersionForEditingRequest) returns (DotNetAdapter_Get_VisualStudioDTEVersionForEditingResponse);
  
  
  // Property: VisualStudioDTEVersionForDebugging
  //
  // Specifies the Microsoft Visual Studio development environment (DTE) version the .NET Adapter uses when debugging into code modules when more than one version of Visual Studio is installed.
  //
  // If you have only one version of Visual Studio installed, the .NET Adapter always uses that version for debugging.
  // You can set this property to a supported value of the VisualStudioDTEVersions constants or to the programmatic identifier of the DTE version you want to use.
  // Note: The VisualStudioDTEVersion_MatchProject constant is not a valid value for this property.
  //
  // DotNetAdapter_Set_VisualStudioDTEVersionForDebuggingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetAdapterInstance - The id of the DotNetAdapter object.
  //    - propertyValue: string - Specifies the Microsoft Visual Studio development environment (DTE) version the .NET Adapter uses when debugging into code modules when more than one version of Visual Studio is installed. 
  //
  // DotNetAdapter_Set_VisualStudioDTEVersionForDebuggingResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DotNetAdapter_Get_VisualStudioDTEVersionForDebuggingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetAdapterInstance - The id of the DotNetAdapter object.
  //
  // DotNetAdapter_Get_VisualStudioDTEVersionForDebuggingResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the Microsoft Visual Studio development environment (DTE) version the .NET Adapter uses when debugging into code modules when more than one version of Visual Studio is installed. 
  //
  rpc Set_VisualStudioDTEVersionForDebugging(DotNetAdapter_Set_VisualStudioDTEVersionForDebuggingRequest) returns (DotNetAdapter_Set_VisualStudioDTEVersionForDebuggingResponse);
  rpc Get_VisualStudioDTEVersionForDebugging(DotNetAdapter_Get_VisualStudioDTEVersionForDebuggingRequest) returns (DotNetAdapter_Get_VisualStudioDTEVersionForDebuggingResponse);
  
  
}
message DotNetAdapterInstance {
  // Specifies the handle of the DotNetAdapter instance in the server.
  string id = 1;
}

message DotNetModuleInstance {
  // Specifies the handle of the DotNetModule instance in the server.
  string id = 1;
}
message DotNetAdapter_AsAdapterRequest {
  // The id of the DotNetAdapter object.
  DotNetAdapterInstance instance = 1;
}

message DotNetAdapter_AsAdapterResponse {
  // The return type of the Adapter object.
  AdapterInstance returnValue = 1;
}

message DotNetAdapter_GetStructurePassingEnabledRequest {
  // The id of the DotNetAdapter object.
  DotNetAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the property object is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
}

message DotNetAdapter_GetStructurePassingEnabledResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message DotNetAdapter_SetStructurePassingEnabledRequest {
  // The id of the DotNetAdapter object.
  DotNetAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the property object is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies whether structure passing is enabled.
  bool structPassingEnabled = 3;
}

message DotNetAdapter_SetStructurePassingEnabledResponse {
}

message DotNetAdapter_GetExcludeFromStructureRequest {
  // The id of the DotNetAdapter object.
  DotNetAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the property object is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
}

message DotNetAdapter_GetExcludeFromStructureResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message DotNetAdapter_SetExcludeFromStructureRequest {
  // The id of the DotNetAdapter object.
  DotNetAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the property object is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
  // Pass True  to exclude the corresponding property. Otherwise, set this parameter to False.
  bool excludeFromStructure = 4;
}

message DotNetAdapter_SetExcludeFromStructureResponse {
}

message DotNetAdapter_GetStructureMemberLabelRequest {
  // The id of the DotNetAdapter object.
  DotNetAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the property object is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
}

message DotNetAdapter_GetStructureMemberLabelResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message DotNetAdapter_SetStructureMemberLabelRequest {
  // The id of the DotNetAdapter object.
  DotNetAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the property object is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
  // Specifies the label of the structure member.
  string structureMemberLabel = 4;
}

message DotNetAdapter_SetStructureMemberLabelResponse {
}

message DotNetAdapter_GetGACAssemblyStrongNamesRequest {
  // The id of the DotNetAdapter object.
  DotNetAdapterInstance instance = 1;
}

message DotNetAdapter_GetGACAssemblyStrongNamesResponse {
  // The return type of the String[] object.
  repeated string returnValue = 1;
}

message DotNetAdapter_CacheAssemblyInfoRequest {
  // The id of the DotNetAdapter object.
  DotNetAdapterInstance instance = 1;
  // Specifies whether the assembly is located in a file or in the Global Assembly Cache (GAC).
  DotNetModuleAssemblyLocations assemblyLocationParam = 2;
  // Specifies the pathname if the assembly is located in a file. This parameter passes the strong name if the assembly is located in the GAC.
  string assemblyPathParam = 3;
}

message DotNetAdapter_CacheAssemblyInfoResponse {
}

message DotNetAdapter_IsClassValidRequest {
  // The id of the DotNetAdapter object.
  DotNetAdapterInstance instance = 1;
  // Specifies whether the assembly is located in a file or in the Global Assembly Cache (GAC).
  DotNetModuleAssemblyLocations assemblyLocationParam = 2;
  // Specifies the pathname if the assembly is located in a file. The parameter passes the strong name if the assembly is located in the GAC.
  string assemblyPathParam = 3;
  // Specifies the fully specified type name for the class, including namespaces.
  string classTypeNameParam = 4;
}

message DotNetAdapter_IsClassValidResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message DotNetAdapter_GetClassNamesRequest {
  // The id of the DotNetAdapter object.
  DotNetAdapterInstance instance = 1;
  // Specifies whether the assembly is located in a file or in the Global Assembly Cache (GAC).
  DotNetModuleAssemblyLocations assemblyLocationParam = 2;
  // Specifies the pathname if the assembly is located in a file. The parameter passes the strong name if the assembly is located in the GAC.
  string assemblyPathParam = 3;
  // This parameter is not currently used but may be used in the future. Pass 0 for this parameter.
  int32 reserved = 4;
}

message DotNetAdapter_GetClassNamesResponse {
  // Returns an array that contains the fully qualified type names of all classes found in the specified assembly. This array is parallel to the displayNames array.
  repeated string typeNames = 1;
  // Returns an array that contains the display names for all classes found in the assembly. This array is parallel to the typeNames array.
  // The display name for a class might be slightly different than the fully qualified name. For example, if all classes in the assembly share a common namespace, the display names do not include the namespace.
  repeated string displayNames = 2;
}

message DotNetAdapter_GetMemberNamesRequest {
  // The id of the DotNetAdapter object.
  DotNetAdapterInstance instance = 1;
  // Specifies whether the assembly is located in a file or in the Global Assembly Cache (GAC).
  DotNetModuleAssemblyLocations assemblyLocationParam = 2;
  // Specifies the pathname, if the assembly is located in a file. The parameter passes the strong name if the assembly is located in the GAC.
  string assemblyPathParam = 3;
  // Specifies the fully specified type name for the class, including namespaces.
  string classTypeNameParam = 4;
  // Specifies one or more DotNetAdapterGetMemberNamesOptions constants. Use the bitwise-OR operator to specify multiple flags.
  DotNetAdapterGetMemberNamesOptions options = 5;
}

message DotNetAdapter_GetMemberNamesResponse {
  // Returns an array that contains the full signature for each member found in the specified class. This array is parallel to the displayNames array.
  repeated string signatures = 1;
  // Returns an array that contains the display name for each member found in the specified class. This array is parallel to the signatures array.
  // Display names may be slightly different than the member signatures. For example, static members have the static suffix at the end of the display name.
  repeated string displayNames = 2;
}

message DotNetAdapter_NewModuleRequest {
  // The id of the DotNetAdapter object.
  DotNetAdapterInstance instance = 1;
}

message DotNetAdapter_NewModuleResponse {
  // The return type of the DotNetModule object.
  DotNetModuleInstance returnValue = 1;
}

message DotNetAdapter_Set_VisualStudioDTEVersionForEditingRequest {
  // The id of the DotNetAdapter object.
  DotNetAdapterInstance instance = 1;
  // Specifies the Microsoft Visual Studio development environment (DTE) version the .NET Adapter uses when creating and editing code when more than one version of Visual Studio is installed.
  string propertyValue = 2;
}

message DotNetAdapter_Set_VisualStudioDTEVersionForEditingResponse {
}

message DotNetAdapter_Get_VisualStudioDTEVersionForEditingRequest {
  // The id of the DotNetAdapter object.
  DotNetAdapterInstance instance = 1;
}

message DotNetAdapter_Get_VisualStudioDTEVersionForEditingResponse {
  // Specifies the Microsoft Visual Studio development environment (DTE) version the .NET Adapter uses when creating and editing code when more than one version of Visual Studio is installed.
  string returnValue = 1;
}

message DotNetAdapter_Set_VisualStudioDTEVersionForDebuggingRequest {
  // The id of the DotNetAdapter object.
  DotNetAdapterInstance instance = 1;
  // Specifies the Microsoft Visual Studio development environment (DTE) version the .NET Adapter uses when debugging into code modules when more than one version of Visual Studio is installed.
  string propertyValue = 2;
}

message DotNetAdapter_Set_VisualStudioDTEVersionForDebuggingResponse {
}

message DotNetAdapter_Get_VisualStudioDTEVersionForDebuggingRequest {
  // The id of the DotNetAdapter object.
  DotNetAdapterInstance instance = 1;
}

message DotNetAdapter_Get_VisualStudioDTEVersionForDebuggingResponse {
  // Specifies the Microsoft Visual Studio development environment (DTE) version the .NET Adapter uses when debugging into code modules when more than one version of Visual Studio is installed.
  string returnValue = 1;
}

// DotNetModule
//
// Use objects from the DotNetModule class to specify and obtain .NET Adapter-specific information about the code module that steps or step type substeps execute. Use the Step.Module property to obtain a reference to a DotNetModule object. To access the properties and methods of a specific module class, query the Module object for the interface of the module-specific interface you want to acquire.
// Typically, you use this class only when you are writing a sequence editor.
// To access the properties and methods of the Module class, use the DotNetModule.AsModule method to obtain an object.
//
service DotNetModule {
  // Method: AsModule
  //
  // Returns the underlying Module object that represents the DotNetModule object.
  //
  // Use the Module object to access properties and methods common to all modules.
  //
  // DotNetModule_AsModuleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_AsModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: ModuleInstance - The return type of the Module object.
  //
  rpc AsModule(DotNetModule_AsModuleRequest) returns (DotNetModule_AsModuleResponse);
  
  
  // Method: GetAssembly
  //
  // Returns the location of the assembly and pathname if the assembly is located in a file. This method returns the strong name if the assembly is located in the Global Assembly Cache (GAC).
  //
  // DotNetModule_GetAssemblyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_GetAssemblyResponse - The response message from the server. It provides the output parameters.
  //    - assemblyLocationParam: DotNetModuleAssemblyLocation - Returns a value that indicates whether the assembly is located in a file or in the Global Assembly Cache.
  //    - assemblyPathParam: strin - Returns the pathname, if the assembly is located in a file. Returns the strong name, if the assembly is located in the Global Assembly Cache.
  //
  rpc GetAssembly(DotNetModule_GetAssemblyRequest) returns (DotNetModule_GetAssemblyResponse);
  
  
  // Method: SetAssembly
  //
  // Specifies the location of the assembly and pathname if the assembly is located in a file. Sets the strong name if the assembly is located in the Global Assembly Cache.
  //
  // You can specify an absolute or relative pathname for a file. Relative pathnames are relative to the TestStand search directory paths.
  // The following is an example of a strong name for the Global Assembly Cache:
  // ADODB, Version=7.0.3300.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
  //
  // DotNetModule_SetAssemblyRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //    - assemblyLocationParam: DotNetModuleAssemblyLocations - Specifies whether the assembly is in a file or in the Global Assembly Cache.
  //    - assemblyPathParam: string - Specifies the pathname, if the assembly is located in a file. Specifies the strong name. if the assembly is located in the Global Assembly Cache.
  //
  // DotNetModule_SetAssemblyResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetAssembly(DotNetModule_SetAssemblyRequest) returns (DotNetModule_SetAssemblyResponse);
  
  
  // Method: LoadConstructorInfo
  //
  // Note: This method is obsolete. Use the DotNetCall.LoadPrototypeFromSignature method instead.
  //
  // Loads information for the parameters of the class constructor, if the module has specified one.
  // You must set the DotNetModule.ClassName and DotNetModule.ConstructorIndex properties on the module before calling this method to access the DotNetModule.ConstructorParameters property of the module.
  //
  // DotNetModule_LoadConstructorInfoRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //    - discardParameterValues: bool - Specifies whether to reset the DotNetParameter.ValueExpr property of existing parameter values when loading a new constructor prototype.
  //
  // DotNetModule_LoadConstructorInfoResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the constructor information of the module was loaded. This method usually returns True. 
  //
  rpc LoadConstructorInfo(DotNetModule_LoadConstructorInfoRequest) returns (DotNetModule_LoadConstructorInfoResponse);
  
  
  // Method: LoadMemberInfo
  //
  // Note: This method is obsolete. Use the DotNetCall.LoadPrototypeFromSignature method instead.
  //
  // Loads information for the parameters of the specified member of the module and for constructor parameters of the class constructor, if the module has specified one.
  // 
  // You must set the DotNetModule.ClassName, DotNetModule.MemberName, and DotNetModule.MemberIndex properties on the module before calling LoadMemberInfo to access the DotNetModule.Parameters property of the module.
  //
  // DotNetModule_LoadMemberInfoRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_LoadMemberInfoResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether to reset the DotNetParameter.ValueExpr property of existing parameter values when loading a new prototype. 
  //
  rpc LoadMemberInfo(DotNetModule_LoadMemberInfoRequest) returns (DotNetModule_LoadMemberInfoResponse);
  
  
  // Method: DisplayCreateCustomDataTypeDialog
  //
  // Launches the Create Custom Data Type from Struct dialog box, in which you can create a new data type that you can use as the reference that the module operates on.
  //
  // Call this method only if the class name specified for the module is a struct, otherwise this method returns without launching the Create Custom Data Type from Struct dialog box. Use the DotNetModule.IsStruct property to determine whether the class name is a struct.
  //
  // DotNetModule_DisplayCreateCustomDataTypeDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //    - sequenceContext: SequenceContextInstance - Specifies the sequence context the Create Custom Data Type from Struct dialog box uses to obtain information about the sequence file. You can use the Engine.NewEditContext method to obtain an edit-time sequence context.
  //
  // DotNetModule_DisplayCreateCustomDataTypeDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if you click OK in the dialog box and False if you click Cancel. 
  //
  rpc DisplayCreateCustomDataTypeDialog(DotNetModule_DisplayCreateCustomDataTypeDialogRequest) returns (DotNetModule_DisplayCreateCustomDataTypeDialogResponse);
  
  
  // Method: LoadConstructorPrototypeFromMetadataToken
  //
  // Note: This method is obsolete. Use the DotNetCall.LoadPrototypeFromSignature method on a constructor call instead.
  //
  // Loads the prototype information for the constructor from the specified assembly. Calling this method updates the DotNetModule.ConstructorPrototype property and the DotNetModule.ConstructorParameters collection.
  // This method replaces the DotNetModule.LoadConstructorInfo and DotNetModule.LoadMemberInfo obsolete methods.
  //
  // DotNetModule_LoadConstructorPrototypeFromMetadataTokenRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //    - metadataToken: int32 - Specifies the metadata token property from the .NET class MemberInfo, which you can retrieve using reflection on an assembly.
  //    - options: int32 - Specifies one or more LoadPrototypeOptions constants. Use the bitwise-OR operator to specify multiple flags.
  //
  // DotNetModule_LoadConstructorPrototypeFromMetadataTokenResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Return True if the prototype for the constructor in the specified assembly is different from the current constructor prototype of the module. Otherwise, return False. 
  //
  rpc LoadConstructorPrototypeFromMetadataToken(DotNetModule_LoadConstructorPrototypeFromMetadataTokenRequest) returns (DotNetModule_LoadConstructorPrototypeFromMetadataTokenResponse);
  
  
  // Method: GetMetadataToken
  //
  // Note: This method is obsolete. The .NET Adapter no longer uses metadata tokens to load the prototype. Use the DotNetCall.LoadPrototypeFromSignature method to specify a signature for a call instead.
  //
  // Returns the metadata token for the specified prototype. If the prototype is not compatible, the method returns -1.
  //
  // DotNetModule_GetMetadataTokenRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_GetMetadataTokenResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - The return type of the Int32 object.
  //
  rpc GetMetadataToken(DotNetModule_GetMetadataTokenRequest) returns (DotNetModule_GetMetadataTokenResponse);
  
  
  // Method: GetConstructorMetadataToken
  //
  // Note: This method is obsolete. The .NET Adapter no longer uses metadata tokens to load the prototype. Use the DotNetCall.LoadPrototypeFromSignature method to specify a signature for a call instead.
  //
  // Returns the metadata token for the specified constructor prototype. If the prototype is not compatible, the method returns -1.
  //
  // DotNetModule_GetConstructorMetadataTokenRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_GetConstructorMetadataTokenResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - The return type of the Int32 object.
  //
  rpc GetConstructorMetadataToken(DotNetModule_GetConstructorMetadataTokenRequest) returns (DotNetModule_GetConstructorMetadataTokenResponse);
  
  
  // Method: LoadPrototypeFromMetadataToken
  //
  // Note: This method is obsolete. Use the DotNetCall.LoadPrototypeFromSignature method instead.
  //
  // Loads the prototype information for the class, method, or property from the specified assembly. Calling this method updates the DotNetModule.Parameters collection.
  // This method replaces the DotNetModule.LoadConstructorInfo and DotNetModule.LoadMemberInfo obsolete methods.
  //
  // DotNetModule_LoadPrototypeFromMetadataTokenRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //    - metadataToken: int32 - Specifies the metadata token property from the .NET class MemberInfo, which you can retrieve using reflection on an assembly.
  //    - options: int32 - Specifies one or more LoadPrototypeOptions constants. Use the bitwise-OR operator to specify multiple flags.
  //
  // DotNetModule_LoadPrototypeFromMetadataTokenResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Return True if the prototype for the class in the specified assembly is different from the current prototype of the module. Otherwise, return False. 
  //
  rpc LoadPrototypeFromMetadataToken(DotNetModule_LoadPrototypeFromMetadataTokenRequest) returns (DotNetModule_LoadPrototypeFromMetadataTokenResponse);
  
  
  // Method: ClearUnmappedConstructorArgumentValues
  //
  // Note: This method is obsolete. The Use the DotNetCall.UnmappedArgumentValues method on a constructor call instead.
  //
  // Removes the items in the UnmappedArgumentValues collection.
  // Clear the items if you do not want them available for the next prototype change.
  //
  // DotNetModule_ClearUnmappedConstructorArgumentValuesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_ClearUnmappedConstructorArgumentValuesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ClearUnmappedConstructorArgumentValues(DotNetModule_ClearUnmappedConstructorArgumentValuesRequest) returns (DotNetModule_ClearUnmappedConstructorArgumentValuesResponse);
  
  
  // Method: Execute
  //
  // Use this method to call a .NET code module directly without using a step, sequence, or execution.
  //
  // When you call a .NET code module using this method, you can evaluate the parameter expressions to determine the argument values or specify the argument values directly using a DotNetModuleArguments collection.
  // To use the parameter value expressions, pass a valid SequenceContext object to the sequenceContextParam parameter to evaluate the DotNetParameter.ValueExpr expressions.
  // To pass specific argument values, use the DotNetModule.NewModuleArguments method to create a collection of DotNetArguments objects.  Each DotNetArguments object in the collection is itself a collection of DotNetArgument objects that represents the arguments to pass to the corresponding DotNetCall object in the collection the DotNetModule.Calls property returns. Set the DotNetArgument.Value property on each item in the DotNetArguments collection to the argument value you want to pass to the DotNetCall object.
  //
  // DotNetModule_ExecuteRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //    - sequenceContextParam: SequenceContextInstance - Specifies the SequenceContext object this method uses to evaluate each of the DotNetParameter.ValueExpr expressions in the module parameters. Pass NULL for this parameter if you pass a DotNetModuleArguments collection to the argumentsParam parameter.
  //    - argumentsParam: DotNetModuleArgumentsInstance - Specifies the collection of argument collections that contain the argument values to pass to each DotNetCall object. Pass NULL for this parameter to pass the values obtained from evaluating each of the DotNetParameter.ValueExpr expressions in the module parameters.
  //
  // DotNetModule_ExecuteResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Execute(DotNetModule_ExecuteRequest) returns (DotNetModule_ExecuteResponse);
  
  
  // Method: NewModuleArguments
  //
  // Creates and returns a new DotNetModuleArguments collection. Use this collection to pass argument values to a DotNetModule object using the DotNetModule.Execute method.
  //
  // The new collection contains the same number of items as the DotNetModule.Calls collection. Each item in the collection is a collection of DotNetArguments that contains the same number of items as the corresponding DotNetCall.Parameters collection.
  // To pass an argument value to a parameter, set the DotNetArgument.Value property to an item in the DotNetArguments collection that has the same index as the parameter in the DotNetParameters collection.
  //
  // DotNetModule_NewModuleArgumentsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_NewModuleArgumentsResponse - The response message from the server. It provides the return value.
  //    - returnValue: DotNetModuleArgumentsInstance - The return type of the DotNetModuleArguments object.
  //
  rpc NewModuleArguments(DotNetModule_NewModuleArgumentsRequest) returns (DotNetModule_NewModuleArgumentsResponse);
  
  

  // Property: ClassReference
  //
  // Note: This method is obsolete. Create a Use Existing Object, constructor, or Create Remote Object call as the first call in the module and specify a value for the first parameter instead of using this property.
  //
  // Specifies a variable or property for a reference to the class instance or struct definition to call. If the object being called is an instance of a class, the instance can be stored in an object reference variable. If the object being called is a struct, the members of the struct can be stored in an object reference variable or a variable of a data type that has mapping defined for the struct.
  //
  // DotNetModule_Set_ClassReferenceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //    - propertyValue: string - Note: This method is obsolete. Create a Use Existing Object, constructor, or Create Remote Object call as the first call in the module and specify a value for the first parameter instead of using this property. 
  //
  // DotNetModule_Set_ClassReferenceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DotNetModule_Get_ClassReferenceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_Get_ClassReferenceResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Note: This method is obsolete. Create a Use Existing Object, constructor, or Create Remote Object call as the first call in the module and specify a value for the first parameter instead of using this property. 
  //
  rpc Set_ClassReference(DotNetModule_Set_ClassReferenceRequest) returns (DotNetModule_Set_ClassReferenceResponse);
  rpc Get_ClassReference(DotNetModule_Get_ClassReferenceRequest) returns (DotNetModule_Get_ClassReferenceResponse);
  
  
  // Property: ClassName
  //
  // Specifies the full type name, including the namespace, of the root class to which the first DotNetCall applies.
  //
  // DotNetModule_Set_ClassNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //    - propertyValue: string - Specifies the full type name, including the namespace, of the root class to which the first DotNetCall applies. 
  //
  // DotNetModule_Set_ClassNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DotNetModule_Get_ClassNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_Get_ClassNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the full type name, including the namespace, of the root class to which the first DotNetCall applies. 
  //
  rpc Set_ClassName(DotNetModule_Set_ClassNameRequest) returns (DotNetModule_Set_ClassNameResponse);
  rpc Get_ClassName(DotNetModule_Get_ClassNameRequest) returns (DotNetModule_Get_ClassNameResponse);
  
  
  // Property: CreateObject
  //
  // Note: This property is obsolete. Use a constructor or a remote creation call as the first call in the DotNetModule class instead of setting this property to True. You can specify a constructor or remote creation call by adding a call to the module using the DotNetModule.Calls collection and using the DotNetCall.LoadPrototypeFromSignature method to specify the call.
  //
  // Specifies whether to create a new instance of the class.
  //
  // DotNetModule_Set_CreateObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //    - propertyValue: bool - Note: This property is obsolete. Use a constructor or a remote creation call as the first call in the DotNetModule class instead of setting this property to True. You can specify a constructor or remote creation call by adding a call to the module using the DotNetModule.Calls collection and using the DotNetCall.LoadPrototypeFromSignature method to specify the call. 
  //
  // DotNetModule_Set_CreateObjectResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DotNetModule_Get_CreateObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_Get_CreateObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use a constructor or a remote creation call as the first call in the DotNetModule class instead of setting this property to True. You can specify a constructor or remote creation call by adding a call to the module using the DotNetModule.Calls collection and using the DotNetCall.LoadPrototypeFromSignature method to specify the call. 
  //
  rpc Set_CreateObject(DotNetModule_Set_CreateObjectRequest) returns (DotNetModule_Set_CreateObjectResponse);
  rpc Get_CreateObject(DotNetModule_Get_CreateObjectRequest) returns (DotNetModule_Get_CreateObjectResponse);
  
  
  // Property: ConstructorParameters
  //
  // Note: This property is obsolete. Use a constructor as the first call in the DotNetModule class and then use the DotNetCall.Parameters property instead. You can specify a constructor by adding a call to the module using the DotNetModule.Calls collection and using the DotNetCall.LoadPrototypeFromSignature method to specify the call.
  //
  // Returns the DotNetParameters collection that contains a list of the current parameters used as inputs and outputs of the constructor.
  // Call the DotNetModule.LoadConstructorPrototypeFromMetadataToken method before accessing this property.
  //
  // DotNetModule_Get_ConstructorParametersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_Get_ConstructorParametersResponse - The response message from the server. It provides the return value.
  //    - returnValue: DotNetParametersInstance - Note: This property is obsolete. Use a constructor as the first call in the DotNetModule class and then use the DotNetCall.Parameters property instead. You can specify a constructor by adding a call to the module using the DotNetModule.Calls collection and using the DotNetCall.LoadPrototypeFromSignature method to specify the call. 
  //
  rpc Get_ConstructorParameters(DotNetModule_Get_ConstructorParametersRequest) returns (DotNetModule_Get_ConstructorParametersResponse);
  
  
  // Property: DisposeObject
  //
  // Note: This property is obsolete. Use a constructor or a remote creation call as the first call in the DotNetModule class and then use the DotNetParameter.DisposeObject property on the return value parameter instead. You can specify a constructor or a remote creation call by adding a call to the module using the DotNetModule.Calls collection and using the DotNetCall.LoadPrototypeFromSignature method to specify the call.
  //
  // Specifies whether TestStand attempts to dispose of the object when the object is released or goes out of scope.
  // If the DotNetModule.CreateObject property is False or if the object does not implement the IDisposable interface, this property is ignored.
  //
  // DotNetModule_Set_DisposeObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //    - propertyValue: bool - Note: This property is obsolete. Use a constructor or a remote creation call as the first call in the DotNetModule class and then use the DotNetParameter.DisposeObject property on the return value parameter instead. You can specify a constructor or a remote creation call by adding a call to the module using the DotNetModule.Calls collection and using the DotNetCall.LoadPrototypeFromSignature method to specify the call. 
  //
  // DotNetModule_Set_DisposeObjectResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DotNetModule_Get_DisposeObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_Get_DisposeObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use a constructor or a remote creation call as the first call in the DotNetModule class and then use the DotNetParameter.DisposeObject property on the return value parameter instead. You can specify a constructor or a remote creation call by adding a call to the module using the DotNetModule.Calls collection and using the DotNetCall.LoadPrototypeFromSignature method to specify the call. 
  //
  rpc Set_DisposeObject(DotNetModule_Set_DisposeObjectRequest) returns (DotNetModule_Set_DisposeObjectResponse);
  rpc Get_DisposeObject(DotNetModule_Get_DisposeObjectRequest) returns (DotNetModule_Get_DisposeObjectResponse);
  
  
  // Property: UseStepLoadOptions
  //
  // Controls the lifetime of an object the module creates. If this property is False, the module creates the object when it begins executing. Then, the module releases its internal reference to the object when it completes executing. If this property is True, the module creates the object when the step loads according to Step.ModuleLoadOption and then holds an internal reference to the object until the step unloads according to Step.ModuleUnloadOption.
  //
  // DotNetModule_Set_UseStepLoadOptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //    - propertyValue: bool - Controls the lifetime of an object the module creates. If this property is False, the module creates the object when it begins executing. Then, the module releases its internal reference to the object when it completes executing. If this property is True, the module creates the object when the step loads according to Step.ModuleLoadOption and then holds an internal reference to the object until the step unloads according to Step.ModuleUnloadOption. 
  //
  // DotNetModule_Set_UseStepLoadOptionsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DotNetModule_Get_UseStepLoadOptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_Get_UseStepLoadOptionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Controls the lifetime of an object the module creates. If this property is False, the module creates the object when it begins executing. Then, the module releases its internal reference to the object when it completes executing. If this property is True, the module creates the object when the step loads according to Step.ModuleLoadOption and then holds an internal reference to the object until the step unloads according to Step.ModuleUnloadOption. 
  //
  rpc Set_UseStepLoadOptions(DotNetModule_Set_UseStepLoadOptionsRequest) returns (DotNetModule_Set_UseStepLoadOptionsResponse);
  rpc Get_UseStepLoadOptions(DotNetModule_Get_UseStepLoadOptionsRequest) returns (DotNetModule_Get_UseStepLoadOptionsResponse);
  
  
  // Property: RemoteHost
  //
  // Note: This property is obsolete. Use a remote creation call as the first call in the DotNetModule class instead, and specify the remote host using the first parameter of the call that is not a return value. You can specify a remote creation call by adding a call to the module using the DotNetModule.Calls collection and using the DotNetCall.LoadPrototypeFromSignature method to specify the call.
  //
  // Specifies the Universal Resource Identifier (URI) the .NET Adapter uses to execute the assembly remotely. The URI specifies the type of channel, port number, and endpoint. If the DotNetModule.SpecifyHostByExpression property is True, the value of this property must be in the form of an expression.
  // Leave this property empty to instruct the .NET Adapter to not use a remote endpoint and create the object on the local computer instead.
  // The following is an example of a HTTP channel URI:
  // http://remotecomputername:65100/theEndPointName
  // The following is an example of a TCP channel URI:
  // tcp://localhost:8085/theEndPointName
  //
  // DotNetModule_Set_RemoteHostRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //    - propertyValue: string - Note: This property is obsolete. Use a remote creation call as the first call in the DotNetModule class instead, and specify the remote host using the first parameter of the call that is not a return value. You can specify a remote creation call by adding a call to the module using the DotNetModule.Calls collection and using the DotNetCall.LoadPrototypeFromSignature method to specify the call. 
  //
  // DotNetModule_Set_RemoteHostResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DotNetModule_Get_RemoteHostRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_Get_RemoteHostResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Note: This property is obsolete. Use a remote creation call as the first call in the DotNetModule class instead, and specify the remote host using the first parameter of the call that is not a return value. You can specify a remote creation call by adding a call to the module using the DotNetModule.Calls collection and using the DotNetCall.LoadPrototypeFromSignature method to specify the call. 
  //
  rpc Set_RemoteHost(DotNetModule_Set_RemoteHostRequest) returns (DotNetModule_Set_RemoteHostResponse);
  rpc Get_RemoteHost(DotNetModule_Get_RemoteHostRequest) returns (DotNetModule_Get_RemoteHostResponse);
  
  
  // Property: SpecifyHostByExpression
  //
  // Note: This property is obsolete. Use a remote creation call as the first call in the DotNetModule class instead, and specify the remote host using the first parameter of the call that is not a return value. The parameter value is always an expression. Setting this value affects only the conversion that occurs when you save the file for a version of TestStand earlier than 2010. You can specify a remote creation call by adding a call to the module using the DotNetModule.Calls collection and using the DotNetCall.LoadPrototypeFromSignature method to specify the call.
  //
  // Specifies if the DotNetModule.RemoteHost property contains an expression the module evaluates at run time to determine the name of the remote host.
  // The module ignores this property if RemoteHost is empty.
  //
  // DotNetModule_Set_SpecifyHostByExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //    - propertyValue: bool - Note: This property is obsolete. Use a remote creation call as the first call in the DotNetModule class instead, and specify the remote host using the first parameter of the call that is not a return value. The parameter value is always an expression. Setting this value affects only the conversion that occurs when you save the file for a version of TestStand earlier than 2010. You can specify a remote creation call by adding a call to the module using the DotNetModule.Calls collection and using the DotNetCall.LoadPrototypeFromSignature method to specify the call. 
  //
  // DotNetModule_Set_SpecifyHostByExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DotNetModule_Get_SpecifyHostByExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_Get_SpecifyHostByExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use a remote creation call as the first call in the DotNetModule class instead, and specify the remote host using the first parameter of the call that is not a return value. The parameter value is always an expression. Setting this value affects only the conversion that occurs when you save the file for a version of TestStand earlier than 2010. You can specify a remote creation call by adding a call to the module using the DotNetModule.Calls collection and using the DotNetCall.LoadPrototypeFromSignature method to specify the call. 
  //
  rpc Set_SpecifyHostByExpression(DotNetModule_Set_SpecifyHostByExpressionRequest) returns (DotNetModule_Set_SpecifyHostByExpressionResponse);
  rpc Get_SpecifyHostByExpression(DotNetModule_Get_SpecifyHostByExpressionRequest) returns (DotNetModule_Get_SpecifyHostByExpressionResponse);
  
  
  // Property: MemberType
  //
  // Note: This property is obsolete. Use the DotNetCall.MemberType property instead.
  //
  // Specifies whether to call a method or access a property.
  //
  // DotNetModule_Set_MemberTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //    - propertyValue: DotNetModuleMemberTypes - Note: This property is obsolete. Use the DotNetCall.MemberType property instead. 
  //
  // DotNetModule_Set_MemberTypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DotNetModule_Get_MemberTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_Get_MemberTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: DotNetModuleMemberTypes - Note: This property is obsolete. Use the DotNetCall.MemberType property instead. 
  //
  rpc Set_MemberType(DotNetModule_Set_MemberTypeRequest) returns (DotNetModule_Set_MemberTypeResponse);
  rpc Get_MemberType(DotNetModule_Get_MemberTypeRequest) returns (DotNetModule_Get_MemberTypeResponse);
  
  
  // Property: MemberFlags
  //
  // Note: This property is obsolete. Use the DotNetCall.MemberFlags property instead.
  //
  // Specifies certain attributes of the member the module calls.
  // Use the constants defined by DotNetMemberFlags with this property.
  //
  // DotNetModule_Set_MemberFlagsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //    - propertyValue: int32 - Note: This property is obsolete. Use the DotNetCall.MemberFlags property instead. 
  //
  // DotNetModule_Set_MemberFlagsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DotNetModule_Get_MemberFlagsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_Get_MemberFlagsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Note: This property is obsolete. Use the DotNetCall.MemberFlags property instead. 
  //
  rpc Set_MemberFlags(DotNetModule_Set_MemberFlagsRequest) returns (DotNetModule_Set_MemberFlagsResponse);
  rpc Get_MemberFlags(DotNetModule_Get_MemberFlagsRequest) returns (DotNetModule_Get_MemberFlagsResponse);
  
  
  // Property: MemberName
  //
  // Note: This property is obsolete. Use the DotNetCall.MemberName property instead.
  //
  // Specifies the name of the member function to call or property to access.
  //
  // DotNetModule_Set_MemberNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //    - propertyValue: string - Note: This property is obsolete. Use the DotNetCall.MemberName property instead. 
  //
  // DotNetModule_Set_MemberNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DotNetModule_Get_MemberNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_Get_MemberNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Note: This property is obsolete. Use the DotNetCall.MemberName property instead. 
  //
  rpc Set_MemberName(DotNetModule_Set_MemberNameRequest) returns (DotNetModule_Set_MemberNameResponse);
  rpc Get_MemberName(DotNetModule_Get_MemberNameRequest) returns (DotNetModule_Get_MemberNameResponse);
  
  
  // Property: Parameters
  //
  // Note: This property is obsolete. Use the DotNetCall.Parameters property instead.
  //
  // Returns the DotNetParameters collection that contains a list of the current parameters used as inputs and outputs of the corresponding module.
  // Call the DotNetModule.LoadPrototypeFromMetadataToken method before accessing this property.
  //
  // DotNetModule_Get_ParametersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_Get_ParametersResponse - The response message from the server. It provides the return value.
  //    - returnValue: DotNetParametersInstance - Note: This property is obsolete. Use the DotNetCall.Parameters property instead. 
  //
  rpc Get_Parameters(DotNetModule_Get_ParametersRequest) returns (DotNetModule_Get_ParametersResponse);
  
  
  // Property: ConstructorPrototype
  //
  // Note: This property is obsolete. Use the DotNetCall.Signature property instead.
  //
  // Returns a display string for the constructor prototype.
  //
  // DotNetModule_Get_ConstructorPrototypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_Get_ConstructorPrototypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Note: This property is obsolete. Use the DotNetCall.Signature property instead. 
  //
  rpc Get_ConstructorPrototype(DotNetModule_Get_ConstructorPrototypeRequest) returns (DotNetModule_Get_ConstructorPrototypeResponse);
  
  
  // Property: SourceFilePath
  //
  // Specifies the pathname of the source file for the class the module calls. TestStand uses the source file path when integrating with Microsoft Visual Studio. You can enter an absolute or relative pathname. Relative pathnames are relative to the TestStand search directory paths.
  //
  // DotNetModule_Set_SourceFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //    - propertyValue: string - Specifies the pathname of the source file for the class the module calls. TestStand uses the source file path when integrating with Microsoft Visual Studio. You can enter an absolute or relative pathname. Relative pathnames are relative to the TestStand search directory paths. 
  //
  // DotNetModule_Set_SourceFilePathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DotNetModule_Get_SourceFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_Get_SourceFilePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the pathname of the source file for the class the module calls. TestStand uses the source file path when integrating with Microsoft Visual Studio. You can enter an absolute or relative pathname. Relative pathnames are relative to the TestStand search directory paths. 
  //
  rpc Set_SourceFilePath(DotNetModule_Set_SourceFilePathRequest) returns (DotNetModule_Set_SourceFilePathResponse);
  rpc Get_SourceFilePath(DotNetModule_Get_SourceFilePathRequest) returns (DotNetModule_Get_SourceFilePathResponse);
  
  
  // Property: ProjectFilePath
  //
  // Specifies the pathname of the project file for the class the module calls. TestStand uses the project file path when integrating with Microsoft Visual Studio. You can enter an absolute or relative pathname. Relative pathnames are relative to the TestStand search directory paths.
  //
  // DotNetModule_Set_ProjectFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //    - propertyValue: string - Specifies the pathname of the project file for the class the module calls. TestStand uses the project file path when integrating with Microsoft Visual Studio. You can enter an absolute or relative pathname. Relative pathnames are relative to the TestStand search directory paths. 
  //
  // DotNetModule_Set_ProjectFilePathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DotNetModule_Get_ProjectFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_Get_ProjectFilePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the pathname of the project file for the class the module calls. TestStand uses the project file path when integrating with Microsoft Visual Studio. You can enter an absolute or relative pathname. Relative pathnames are relative to the TestStand search directory paths. 
  //
  rpc Set_ProjectFilePath(DotNetModule_Set_ProjectFilePathRequest) returns (DotNetModule_Set_ProjectFilePathResponse);
  rpc Get_ProjectFilePath(DotNetModule_Get_ProjectFilePathRequest) returns (DotNetModule_Get_ProjectFilePathResponse);
  
  
  // Property: SolutionFilePath
  //
  // Specifies the pathname of the solution file for the class the module calls. TestStand uses the solution file path when integrating with Microsoft Visual Studio. You can enter an absolute or relative pathname. Relative pathnames are relative to the TestStand search directory paths.
  //
  // DotNetModule_Set_SolutionFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //    - propertyValue: string - Specifies the pathname of the solution file for the class the module calls. TestStand uses the solution file path when integrating with Microsoft Visual Studio. You can enter an absolute or relative pathname. Relative pathnames are relative to the TestStand search directory paths. 
  //
  // DotNetModule_Set_SolutionFilePathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DotNetModule_Get_SolutionFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_Get_SolutionFilePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the pathname of the solution file for the class the module calls. TestStand uses the solution file path when integrating with Microsoft Visual Studio. You can enter an absolute or relative pathname. Relative pathnames are relative to the TestStand search directory paths. 
  //
  rpc Set_SolutionFilePath(DotNetModule_Set_SolutionFilePathRequest) returns (DotNetModule_Set_SolutionFilePathResponse);
  rpc Get_SolutionFilePath(DotNetModule_Get_SolutionFilePathRequest) returns (DotNetModule_Get_SolutionFilePathResponse);
  
  
  // Property: IsStruct
  //
  // Returns a value that indicates whether the class the module calls is a struct.
  //
  // DotNetModule_Get_IsStructRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_Get_IsStructResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the class the module calls is a struct. 
  //
  rpc Get_IsStruct(DotNetModule_Get_IsStructRequest) returns (DotNetModule_Get_IsStructResponse);
  
  
  // Property: NameOfMethodToCreate
  //
  // Note: This property is obsolete. Use the DotNetCall.MemberName property as the name of the method to create for the DotNetCall.CreateCode method instead.
  //
  // Specifies the method name the Module.CreateCode method uses.
  //
  // DotNetModule_Set_NameOfMethodToCreateRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //    - propertyValue: string - Note: This property is obsolete. Use the DotNetCall.MemberName property as the name of the method to create for the DotNetCall.CreateCode method instead. 
  //
  // DotNetModule_Set_NameOfMethodToCreateResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DotNetModule_Get_NameOfMethodToCreateRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_Get_NameOfMethodToCreateResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Note: This property is obsolete. Use the DotNetCall.MemberName property as the name of the method to create for the DotNetCall.CreateCode method instead. 
  //
  rpc Set_NameOfMethodToCreate(DotNetModule_Set_NameOfMethodToCreateRequest) returns (DotNetModule_Set_NameOfMethodToCreateResponse);
  rpc Get_NameOfMethodToCreate(DotNetModule_Get_NameOfMethodToCreateRequest) returns (DotNetModule_Get_NameOfMethodToCreateResponse);
  
  
  // Property: IsConstructorPrototypeIncompatible
  //
  // Note: This property is obsolete. Use the DotNetCall.IsPrototypeIncompatible property on a constructor call instead.
  //
  // Returns a value that indicates whether the prototype the current constructor parameters specify is incompatible with the constructor prototype of the specified module.
  // This property obtains the prototype for the specified .NET constructor and compares it to the current constructor parameters. This property returns True if TestStand successfully reads the prototype from the .NET constructor and the current constructor parameters do not match the prototype the .NET constructor specifies. Accessing this property loads the assembly to determine the constructor prototype.
  //
  // DotNetModule_Get_IsConstructorPrototypeIncompatibleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_Get_IsConstructorPrototypeIncompatibleResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the DotNetCall.IsPrototypeIncompatible property on a constructor call instead. 
  //
  rpc Get_IsConstructorPrototypeIncompatible(DotNetModule_Get_IsConstructorPrototypeIncompatibleRequest) returns (DotNetModule_Get_IsConstructorPrototypeIncompatibleResponse);
  
  
  // Property: MemberHelpString
  //
  // Note: This property is obsolete. Use the DotNetCall.MemberHelpString property instead.
  //
  // Returns the help string the assembly associates with the member.
  //
  // DotNetModule_Get_MemberHelpStringRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_Get_MemberHelpStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Note: This property is obsolete. Use the DotNetCall.MemberHelpString property instead. 
  //
  rpc Get_MemberHelpString(DotNetModule_Get_MemberHelpStringRequest) returns (DotNetModule_Get_MemberHelpStringResponse);
  
  
  // Property: ClassHelpString
  //
  // Returns the help string the assembly associates with the selected class.
  //
  // DotNetModule_Get_ClassHelpStringRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_Get_ClassHelpStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the help string the assembly associates with the selected class. 
  //
  rpc Get_ClassHelpString(DotNetModule_Get_ClassHelpStringRequest) returns (DotNetModule_Get_ClassHelpStringResponse);
  
  
  // Property: UnmappedConstructorArgumentValues
  //
  // Note: This property is obsolete. Use the DotNetCall.UnmappedArgumentValues property on a constructor call instead.
  //
  // Returns the UnmappedArgumentValues collection that contains a list of the arguments not used as inputs and outputs of the corresponding constructor for the module.
  // When the constructor prototype changes, TestStand attempts to map the current constructor arguments to the new prototype by looking for matching argument names and data types, and by matching argument positions and data types. If TestStand fails to assign an argument to the new prototype, the argument is added to this collection.
  // TestStand does not clear the collection when you load a new prototype. Use the DotNetModule.ClearUnmappedConstructorArgumentValues method to clear the collection before calling the DotNetModule.LoadConstructorPrototypeFromMetadataToken method.
  //
  // DotNetModule_Get_UnmappedConstructorArgumentValuesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_Get_UnmappedConstructorArgumentValuesResponse - The response message from the server. It provides the return value.
  //    - returnValue: UnmappedArgumentValuesInstance - Note: This property is obsolete. Use the DotNetCall.UnmappedArgumentValues property on a constructor call instead. 
  //
  rpc Get_UnmappedConstructorArgumentValues(DotNetModule_Get_UnmappedConstructorArgumentValuesRequest) returns (DotNetModule_Get_UnmappedConstructorArgumentValuesResponse);
  
  
  // Property: Calls
  //
  // Returns the collection of calls for the module.
  //
  // DotNetModule_Get_CallsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_Get_CallsResponse - The response message from the server. It provides the return value.
  //    - returnValue: DotNetCallsInstance - Returns the collection of calls for the module. 
  //
  rpc Get_Calls(DotNetModule_Get_CallsRequest) returns (DotNetModule_Get_CallsResponse);
  
  
  // Property: AssemblyWarnings
  //
  // Returns warning messages, if any, associated with the use of the currently specified assembly. Returns an empty string if no warnings exist or if TestStand could not load the assembly.
  //
  // DotNetModule_Get_AssemblyWarningsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleInstance - The id of the DotNetModule object.
  //
  // DotNetModule_Get_AssemblyWarningsResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns warning messages, if any, associated with the use of the currently specified assembly. Returns an empty string if no warnings exist or if TestStand could not load the assembly. 
  //
  rpc Get_AssemblyWarnings(DotNetModule_Get_AssemblyWarningsRequest) returns (DotNetModule_Get_AssemblyWarningsResponse);
  
  
}
message DotNetModuleArgumentsInstance {
  // Specifies the handle of the DotNetModuleArguments instance in the server.
  string id = 1;
}

message DotNetParametersInstance {
  // Specifies the handle of the DotNetParameters instance in the server.
  string id = 1;
}

message DotNetCallsInstance {
  // Specifies the handle of the DotNetCalls instance in the server.
  string id = 1;
}
message DotNetModule_AsModuleRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_AsModuleResponse {
  // The return type of the Module object.
  ModuleInstance returnValue = 1;
}

message DotNetModule_GetAssemblyRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_GetAssemblyResponse {
  // Returns a value that indicates whether the assembly is located in a file or in the Global Assembly Cache.
  DotNetModuleAssemblyLocations assemblyLocationParam = 1;
  // Returns the pathname, if the assembly is located in a file. Returns the strong name, if the assembly is located in the Global Assembly Cache.
  string assemblyPathParam = 2;
}

message DotNetModule_SetAssemblyRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
  // Specifies whether the assembly is in a file or in the Global Assembly Cache.
  DotNetModuleAssemblyLocations assemblyLocationParam = 2;
  // Specifies the pathname, if the assembly is located in a file. Specifies the strong name. if the assembly is located in the Global Assembly Cache.
  string assemblyPathParam = 3;
}

message DotNetModule_SetAssemblyResponse {
}

message DotNetModule_LoadConstructorInfoRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
  // Specifies whether to reset the DotNetParameter.ValueExpr property of existing parameter values when loading a new constructor prototype.
  bool discardParameterValues = 2;
}

message DotNetModule_LoadConstructorInfoResponse {
  // Returns a value that indicates whether the constructor information of the module was loaded. This method usually returns True.
  bool returnValue = 1;
}

message DotNetModule_LoadMemberInfoRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
  // Returns a value that indicates whether TestStand loaded the member information of the module. This method usually returns True.
  bool discardParameterValues = 2;
}

message DotNetModule_LoadMemberInfoResponse {
  // Specifies whether to reset the DotNetParameter.ValueExpr property of existing parameter values when loading a new prototype.
  bool returnValue = 1;
}

message DotNetModule_DisplayCreateCustomDataTypeDialogRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
  // Specifies the sequence context the Create Custom Data Type from Struct dialog box uses to obtain information about the sequence file. You can use the Engine.NewEditContext method to obtain an edit-time sequence context.
  SequenceContextInstance sequenceContext = 2;
}

message DotNetModule_DisplayCreateCustomDataTypeDialogResponse {
  // Returns True if you click OK in the dialog box and False if you click Cancel.
  bool returnValue = 1;
}

message DotNetModule_LoadConstructorPrototypeFromMetadataTokenRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
  // Specifies the metadata token property from the .NET class MemberInfo, which you can retrieve using reflection on an assembly.
  int32 metadataToken = 2;
  // Specifies one or more LoadPrototypeOptions constants. Use the bitwise-OR operator to specify multiple flags.
  LoadPrototypeOptions options = 3;
}

message DotNetModule_LoadConstructorPrototypeFromMetadataTokenResponse {
  // Return True if the prototype for the constructor in the specified assembly is different from the current constructor prototype of the module. Otherwise, return False.
  bool returnValue = 1;
}

message DotNetModule_GetMetadataTokenRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_GetMetadataTokenResponse {
  // The return type of the Int32 object.
  int32 returnValue = 1;
}

message DotNetModule_GetConstructorMetadataTokenRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_GetConstructorMetadataTokenResponse {
  // The return type of the Int32 object.
  int32 returnValue = 1;
}

message DotNetModule_LoadPrototypeFromMetadataTokenRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
  // Specifies the metadata token property from the .NET class MemberInfo, which you can retrieve using reflection on an assembly.
  int32 metadataToken = 2;
  // Specifies one or more LoadPrototypeOptions constants. Use the bitwise-OR operator to specify multiple flags.
  LoadPrototypeOptions options = 3;
}

message DotNetModule_LoadPrototypeFromMetadataTokenResponse {
  // Return True if the prototype for the class in the specified assembly is different from the current prototype of the module. Otherwise, return False.
  bool returnValue = 1;
}

message DotNetModule_ClearUnmappedConstructorArgumentValuesRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_ClearUnmappedConstructorArgumentValuesResponse {
}

message DotNetModule_ExecuteRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
  // Specifies the SequenceContext object this method uses to evaluate each of the DotNetParameter.ValueExpr expressions in the module parameters. Pass NULL for this parameter if you pass a DotNetModuleArguments collection to the argumentsParam parameter.
  SequenceContextInstance sequenceContextParam = 2;
  // Specifies the collection of argument collections that contain the argument values to pass to each DotNetCall object. Pass NULL for this parameter to pass the values obtained from evaluating each of the DotNetParameter.ValueExpr expressions in the module parameters.
  DotNetModuleArgumentsInstance argumentsParam = 3;
}

message DotNetModule_ExecuteResponse {
}

message DotNetModule_NewModuleArgumentsRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_NewModuleArgumentsResponse {
  // The return type of the DotNetModuleArguments object.
  DotNetModuleArgumentsInstance returnValue = 1;
}

message DotNetModule_Set_ClassReferenceRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
  // Note: This method is obsolete. Create a Use Existing Object, constructor, or Create Remote Object call as the first call in the module and specify a value for the first parameter instead of using this property.
  string propertyValue = 2;
}

message DotNetModule_Set_ClassReferenceResponse {
}

message DotNetModule_Get_ClassReferenceRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_Get_ClassReferenceResponse {
  // Note: This method is obsolete. Create a Use Existing Object, constructor, or Create Remote Object call as the first call in the module and specify a value for the first parameter instead of using this property.
  string returnValue = 1;
}

message DotNetModule_Set_ClassNameRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
  // Specifies the full type name, including the namespace, of the root class to which the first DotNetCall applies.
  string propertyValue = 2;
}

message DotNetModule_Set_ClassNameResponse {
}

message DotNetModule_Get_ClassNameRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_Get_ClassNameResponse {
  // Specifies the full type name, including the namespace, of the root class to which the first DotNetCall applies.
  string returnValue = 1;
}

message DotNetModule_Set_CreateObjectRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
  // Note: This property is obsolete. Use a constructor or a remote creation call as the first call in the DotNetModule class instead of setting this property to True. You can specify a constructor or remote creation call by adding a call to the module using the DotNetModule.Calls collection and using the DotNetCall.LoadPrototypeFromSignature method to specify the call.
  bool propertyValue = 2;
}

message DotNetModule_Set_CreateObjectResponse {
}

message DotNetModule_Get_CreateObjectRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_Get_CreateObjectResponse {
  // Note: This property is obsolete. Use a constructor or a remote creation call as the first call in the DotNetModule class instead of setting this property to True. You can specify a constructor or remote creation call by adding a call to the module using the DotNetModule.Calls collection and using the DotNetCall.LoadPrototypeFromSignature method to specify the call.
  bool returnValue = 1;
}

message DotNetModule_Get_ConstructorParametersRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_Get_ConstructorParametersResponse {
  // The collection of parameters.
  DotNetParametersInstance returnValue = 1;
}

message DotNetModule_Set_DisposeObjectRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
  // Note: This property is obsolete. Use a constructor or a remote creation call as the first call in the DotNetModule class and then use the DotNetParameter.DisposeObject property on the return value parameter instead. You can specify a constructor or a remote creation call by adding a call to the module using the DotNetModule.Calls collection and using the DotNetCall.LoadPrototypeFromSignature method to specify the call.
  bool propertyValue = 2;
}

message DotNetModule_Set_DisposeObjectResponse {
}

message DotNetModule_Get_DisposeObjectRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_Get_DisposeObjectResponse {
  // Note: This property is obsolete. Use a constructor or a remote creation call as the first call in the DotNetModule class and then use the DotNetParameter.DisposeObject property on the return value parameter instead. You can specify a constructor or a remote creation call by adding a call to the module using the DotNetModule.Calls collection and using the DotNetCall.LoadPrototypeFromSignature method to specify the call.
  bool returnValue = 1;
}

message DotNetModule_Set_UseStepLoadOptionsRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
  // Controls the lifetime of an object the module creates. If this property is False, the module creates the object when it begins executing. Then, the module releases its internal reference to the object when it completes executing. If this property is True, the module creates the object when the step loads according to Step.ModuleLoadOption and then holds an internal reference to the object until the step unloads according to Step.ModuleUnloadOption.
  bool propertyValue = 2;
}

message DotNetModule_Set_UseStepLoadOptionsResponse {
}

message DotNetModule_Get_UseStepLoadOptionsRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_Get_UseStepLoadOptionsResponse {
  // Controls the lifetime of an object the module creates. If this property is False, the module creates the object when it begins executing. Then, the module releases its internal reference to the object when it completes executing. If this property is True, the module creates the object when the step loads according to Step.ModuleLoadOption and then holds an internal reference to the object until the step unloads according to Step.ModuleUnloadOption.
  bool returnValue = 1;
}

message DotNetModule_Set_RemoteHostRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
  // Note: This property is obsolete. Use a remote creation call as the first call in the DotNetModule class instead, and specify the remote host using the first parameter of the call that is not a return value. You can specify a remote creation call by adding a call to the module using the DotNetModule.Calls collection and using the DotNetCall.LoadPrototypeFromSignature method to specify the call.
  string propertyValue = 2;
}

message DotNetModule_Set_RemoteHostResponse {
}

message DotNetModule_Get_RemoteHostRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_Get_RemoteHostResponse {
  // Note: This property is obsolete. Use a remote creation call as the first call in the DotNetModule class instead, and specify the remote host using the first parameter of the call that is not a return value. You can specify a remote creation call by adding a call to the module using the DotNetModule.Calls collection and using the DotNetCall.LoadPrototypeFromSignature method to specify the call.
  string returnValue = 1;
}

message DotNetModule_Set_SpecifyHostByExpressionRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
  // Note: This property is obsolete. Use a remote creation call as the first call in the DotNetModule class instead, and specify the remote host using the first parameter of the call that is not a return value. The parameter value is always an expression. Setting this value affects only the conversion that occurs when you save the file for a version of TestStand earlier than 2010. You can specify a remote creation call by adding a call to the module using the DotNetModule.Calls collection and using the DotNetCall.LoadPrototypeFromSignature method to specify the call.
  bool propertyValue = 2;
}

message DotNetModule_Set_SpecifyHostByExpressionResponse {
}

message DotNetModule_Get_SpecifyHostByExpressionRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_Get_SpecifyHostByExpressionResponse {
  // Note: This property is obsolete. Use a remote creation call as the first call in the DotNetModule class instead, and specify the remote host using the first parameter of the call that is not a return value. The parameter value is always an expression. Setting this value affects only the conversion that occurs when you save the file for a version of TestStand earlier than 2010. You can specify a remote creation call by adding a call to the module using the DotNetModule.Calls collection and using the DotNetCall.LoadPrototypeFromSignature method to specify the call.
  bool returnValue = 1;
}

message DotNetModule_Set_MemberTypeRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
  // Note: This property is obsolete. Use the DotNetCall.MemberType property instead.
  DotNetModuleMemberTypes propertyValue = 2;
}

message DotNetModule_Set_MemberTypeResponse {
}

message DotNetModule_Get_MemberTypeRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_Get_MemberTypeResponse {
  // Note: This property is obsolete. Use the DotNetCall.MemberType property instead.
  DotNetModuleMemberTypes returnValue = 1;
}

message DotNetModule_Set_MemberFlagsRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
  // Note: This property is obsolete. Use the DotNetCall.MemberFlags property instead.
  int32 propertyValue = 2;
}

message DotNetModule_Set_MemberFlagsResponse {
}

message DotNetModule_Get_MemberFlagsRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_Get_MemberFlagsResponse {
  // Note: This property is obsolete. Use the DotNetCall.MemberFlags property instead.
  DotNetModuleMemberFlags returnValue = 1;
}

message DotNetModule_Set_MemberNameRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
  // Note: This property is obsolete. Use the DotNetCall.MemberName property instead.
  string propertyValue = 2;
}

message DotNetModule_Set_MemberNameResponse {
}

message DotNetModule_Get_MemberNameRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_Get_MemberNameResponse {
  // Note: This property is obsolete. Use the DotNetCall.MemberName property instead.
  string returnValue = 1;
}

message DotNetModule_Get_ParametersRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_Get_ParametersResponse {
  // The collection of parameters for the method the module calls or the property the module accesses.
  DotNetParametersInstance returnValue = 1;
}

message DotNetModule_Get_ConstructorPrototypeRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_Get_ConstructorPrototypeResponse {
  // Note: This property is obsolete. Use the DotNetCall.Signature property instead.
  string returnValue = 1;
}

message DotNetModule_Set_SourceFilePathRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
  // Specifies the pathname of the source file for the class the module calls. TestStand uses the source file path when integrating with Microsoft Visual Studio. You can enter an absolute or relative pathname. Relative pathnames are relative to the TestStand search directory paths.
  string propertyValue = 2;
}

message DotNetModule_Set_SourceFilePathResponse {
}

message DotNetModule_Get_SourceFilePathRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_Get_SourceFilePathResponse {
  // Specifies the pathname of the source file for the class the module calls. TestStand uses the source file path when integrating with Microsoft Visual Studio. You can enter an absolute or relative pathname. Relative pathnames are relative to the TestStand search directory paths.
  string returnValue = 1;
}

message DotNetModule_Set_ProjectFilePathRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
  // Specifies the pathname of the project file for the class the module calls. TestStand uses the project file path when integrating with Microsoft Visual Studio. You can enter an absolute or relative pathname. Relative pathnames are relative to the TestStand search directory paths.
  string propertyValue = 2;
}

message DotNetModule_Set_ProjectFilePathResponse {
}

message DotNetModule_Get_ProjectFilePathRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_Get_ProjectFilePathResponse {
  // Specifies the pathname of the project file for the class the module calls. TestStand uses the project file path when integrating with Microsoft Visual Studio. You can enter an absolute or relative pathname. Relative pathnames are relative to the TestStand search directory paths.
  string returnValue = 1;
}

message DotNetModule_Set_SolutionFilePathRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
  // Specifies the pathname of the solution file for the class the module calls. TestStand uses the solution file path when integrating with Microsoft Visual Studio. You can enter an absolute or relative pathname. Relative pathnames are relative to the TestStand search directory paths.
  string propertyValue = 2;
}

message DotNetModule_Set_SolutionFilePathResponse {
}

message DotNetModule_Get_SolutionFilePathRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_Get_SolutionFilePathResponse {
  // Specifies the pathname of the solution file for the class the module calls. TestStand uses the solution file path when integrating with Microsoft Visual Studio. You can enter an absolute or relative pathname. Relative pathnames are relative to the TestStand search directory paths.
  string returnValue = 1;
}

message DotNetModule_Get_IsStructRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_Get_IsStructResponse {
  // Returns a value that indicates whether the class the module calls is a struct.
  bool returnValue = 1;
}

message DotNetModule_Set_NameOfMethodToCreateRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
  // Note: This property is obsolete. Use the DotNetCall.MemberName property as the name of the method to create for the DotNetCall.CreateCode method instead.
  string propertyValue = 2;
}

message DotNetModule_Set_NameOfMethodToCreateResponse {
}

message DotNetModule_Get_NameOfMethodToCreateRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_Get_NameOfMethodToCreateResponse {
  // Note: This property is obsolete. Use the DotNetCall.MemberName property as the name of the method to create for the DotNetCall.CreateCode method instead.
  string returnValue = 1;
}

message DotNetModule_Get_IsConstructorPrototypeIncompatibleRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_Get_IsConstructorPrototypeIncompatibleResponse {
  // Note: This property is obsolete. Use the DotNetCall.IsPrototypeIncompatible property on a constructor call instead.
  bool returnValue = 1;
}

message DotNetModule_Get_MemberHelpStringRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_Get_MemberHelpStringResponse {
  // Note: This property is obsolete. Use the DotNetCall.MemberHelpString property instead.
  string returnValue = 1;
}

message DotNetModule_Get_ClassHelpStringRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_Get_ClassHelpStringResponse {
  // Returns the help string the assembly associates with the selected class.
  string returnValue = 1;
}

message DotNetModule_Get_UnmappedConstructorArgumentValuesRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_Get_UnmappedConstructorArgumentValuesResponse {
  // Note: This property is obsolete. Use the DotNetCall.UnmappedArgumentValues property on a constructor call instead.
  UnmappedArgumentValuesInstance returnValue = 1;
}

message DotNetModule_Get_CallsRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_Get_CallsResponse {
  // Returns the collection of calls for the module.
  DotNetCallsInstance returnValue = 1;
}

message DotNetModule_Get_AssemblyWarningsRequest {
  // The id of the DotNetModule object.
  DotNetModuleInstance instance = 1;
}

message DotNetModule_Get_AssemblyWarningsResponse {
  // Returns warning messages, if any, associated with the use of the currently specified assembly. Returns an empty string if no warnings exist or if TestStand could not load the assembly.
  string returnValue = 1;
}

// DotNetParameters
//
// Use objects from the DotNetParameters class to configure and obtain parameters for a DotNetCall. Use the DotNetCall.Parameters property to obtain the collection of parameters for a call and the DotNetParameter.Elements method to obtain the collection that represents the members of a structure parameter or the elements of an array of structures parameter.
//
service DotNetParameters {
  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // DotNetParameters_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetParametersInstance - The id of the DotNetParameters object.
  //    - index: int32 - Specifies the zero-based index of the parameter to retrieve.
  //
  // DotNetParameters_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: DotNetParameterInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(DotNetParameters_Get_ItemRequest) returns (DotNetParameters_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // DotNetParameters_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetParametersInstance - The id of the DotNetParameters object.
  //
  // DotNetParameters_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(DotNetParameters_Get_CountRequest) returns (DotNetParameters_Get_CountResponse);
  
  
}
message DotNetParameterInstance {
  // Specifies the handle of the DotNetParameter instance in the server.
  string id = 1;
}
message DotNetParameters_Get_ItemRequest {
  // The id of the DotNetParameters object.
  DotNetParametersInstance instance = 1;
  // Specifies the zero-based index of the parameter to retrieve.
  optional int32 index = 2;
}

message DotNetParameters_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  DotNetParameterInstance returnValue = 1;
}

message DotNetParameters_Get_CountRequest {
  // The id of the DotNetParameters object.
  DotNetParametersInstance instance = 1;
}

message DotNetParameters_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// DotNetParameter
//
// Use objects from the DotNetParameters class to configure and obtain parameters for a module that uses the .NET Adapter. Use the DotNetCall.Parameters property to obtain the collection of parameters for a module and the DotNetParameter.Elements property to obtain the collection that represents the members of a structure parameter or the elements of an array of structures parameter.
//
service DotNetParameter {
  // Method: AsPropertyObject
  //
  // Returns the underlying PropertyObject that represents the DotNetParameter object.
  //
  // Use the PropertyObject to modify, add, or remove custom properties of the object.
  //
  // DotNetParameter_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //
  // DotNetParameter_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(DotNetParameter_AsPropertyObjectRequest) returns (DotNetParameter_AsPropertyObjectResponse);
  
  
  // Method: GetEnumValues
  //
  // Returns the enumeration constants for a parameter that is an enumeration.
  //
  // The property objects in the array that this method returns have a name and value that corresponds to the name and value of the enumeration constant.
  // Pass the return value of this method as the additionalConstants parameter of Expression.ValidateEvaluationType when checking the DotNetParameter.ValueExpr property for errors.
  // 
  // If you are using an ExpressionEdit control to specify the DotNetParameter.ValueExpr property, pass the return value of this method to ExpressionEdit.SetAdditionalEvaluationConstants to direct the ExpressionEdit control to recognize the enumeration constants.
  //
  // DotNetParameter_GetEnumValuesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //
  // DotNetParameter_GetEnumValuesResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated PropertyObjectInstance - Returns an array of property objects where each property object represents an enumeration value. 
  //
  rpc GetEnumValues(DotNetParameter_GetEnumValuesRequest) returns (DotNetParameter_GetEnumValuesResponse);
  
  
  // Method: DisplayCreateCustomDataTypeDialog
  //
  // Launches the Create Custom Data Type from Struct dialog box, in which you can create a new data type you can pass to a .NET struct parameter.
  //
  // Call this method only if the parameter is a struct. Otherwise, this method returns without launching the Create Custom Data Type from Struct dialog box. Use the DotNetParameter.Type property to determine whether a parameter is a struct.
  //
  // DotNetParameter_DisplayCreateCustomDataTypeDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //    - sequenceContext: SequenceContextInstance - Specifies the sequence context the Create Custom Data Type from Struct dialog box uses to obtain information about the sequence file. You can use the Engine.NewEditContext method to obtain an edit-time sequence context.
  //
  // DotNetParameter_DisplayCreateCustomDataTypeDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if you click OK in the dialog box and False if you click Cancel. 
  //
  rpc DisplayCreateCustomDataTypeDialog(DotNetParameter_DisplayCreateCustomDataTypeDialogRequest) returns (DotNetParameter_DisplayCreateCustomDataTypeDialogResponse);
  
  
  // Method: InsertArrayElement
  //
  // Inserts an element into an array at the specified index.
  //
  // Call this method only on array parameters. Use the DotNetParameter.Flags property to determine whether a parameter is an array.
  // 
  // This method is valid only for one-dimensional array parameters. Use DotNetParameter.ArrayDimensionsEx to determine the number of array dimensions.
  //
  // DotNetParameter_InsertArrayElementRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //    - index: int32 - Specifies the zero-based index that specifies the location where to insert the element.
  //
  // DotNetParameter_InsertArrayElementResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc InsertArrayElement(DotNetParameter_InsertArrayElementRequest) returns (DotNetParameter_InsertArrayElementResponse);
  
  
  // Method: DeleteArrayElement
  //
  // Deletes an element from an array at the specified index.
  //
  // Call this method only on array parameters. Use the DotNetParameter.Flags property to determine whether a parameter is an array.
  // 
  // This method is valid only for one-dimensional array parameters. Use DotNetParameter.ArrayDimensionsEx to determine the number of array dimensions.
  //
  // DotNetParameter_DeleteArrayElementRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //    - index: int32 - Specifies the zero-based index that specifies the location where to delete the element.
  //
  // DotNetParameter_DeleteArrayElementResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc DeleteArrayElement(DotNetParameter_DeleteArrayElementRequest) returns (DotNetParameter_DeleteArrayElementResponse);
  
  
  // Method: IsStructMappingInvalid
  //
  // Indicates whether the argument you specify for a .NET struct or struct array parameter is valid by checking the struct passing information for any custom data types used to ensure that it matches the struct definition stored when you specified the module.
  // Note: This method does not load the assembly you specify. The method relies on the struct information stored for the parameter when the module was last specified.
  //
  // DotNetParameter_IsStructMappingInvalidRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //
  // DotNetParameter_IsStructMappingInvalidResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True when the parameter is a struct or struct array, the argument expression is valid and non-empty, and the argument or struct mapping of the argument is invalid. In all other cases, this method returns False. 
  //    - reasonNotValid: strin - When this method returns True, this parameter returns the reason why the argument is invalid.
  //
  rpc IsStructMappingInvalid(DotNetParameter_IsStructMappingInvalidRequest) returns (DotNetParameter_IsStructMappingInvalidResponse);
  
  
  // Method: IsParameterMappingInvalid
  //
  // Indicates if the TestStand container or enumeration data type of the argument conflicts with the definition of the corresponding struct or enum parameter in the code module.
  //
  // The primary purpose of this method is to support error reporting. Therefore, cases where the mapping is not well defined, for example when the argument expression is empty, are not considered invalid. If an empty expression is considered an error condition, the application must check for it separately.
  // This method does not load the specified assembly. The method relies on the type information stored for the parameter when the module was last specified.
  //
  // DotNetParameter_IsParameterMappingInvalidRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //
  // DotNetParameter_IsParameterMappingInvalidResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns true if the parameter in the code module is a struct or enum, the argument expression is valid and non-empty, and the mapping of the argument to the parameter in the code module is invalid. Returns false otherwise. 
  //    - reasonNotValid: strin - If the mapping is invalid, reasonNotValid contains an error message explaining why the type definitions do not match.  If the mapping is valid, reasonNotValid is set to an empty string.
  //
  rpc IsParameterMappingInvalid(DotNetParameter_IsParameterMappingInvalidRequest) returns (DotNetParameter_IsParameterMappingInvalidResponse);
  
  

  // Property: UseDefaultValue
  //
  // Specifies whether to use the default value of the parameter when calling the assembly.
  //
  // You can only use the default value for optional parameters. This property does not apply to DotNetParameter objects that represent fields of a structure or elements of an array.
  //
  // DotNetParameter_Set_UseDefaultValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //    - propertyValue: bool - Specifies whether to use the default value of the parameter when calling the assembly. 
  //
  // DotNetParameter_Set_UseDefaultValueResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DotNetParameter_Get_UseDefaultValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //
  // DotNetParameter_Get_UseDefaultValueResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether to use the default value of the parameter when calling the assembly. 
  //
  rpc Set_UseDefaultValue(DotNetParameter_Set_UseDefaultValueRequest) returns (DotNetParameter_Set_UseDefaultValueResponse);
  rpc Get_UseDefaultValue(DotNetParameter_Get_UseDefaultValueRequest) returns (DotNetParameter_Get_UseDefaultValueResponse);
  
  
  // Property: ValueExpr
  //
  // Specifies an expression defining the argument to pass for the parameter when calling the member.
  //
  // DotNetParameter_Set_ValueExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //    - propertyValue: string - Specifies an expression defining the argument to pass for the parameter when calling the member. 
  //
  // DotNetParameter_Set_ValueExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DotNetParameter_Get_ValueExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //
  // DotNetParameter_Get_ValueExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies an expression defining the argument to pass for the parameter when calling the member. 
  //
  rpc Set_ValueExpr(DotNetParameter_Set_ValueExprRequest) returns (DotNetParameter_Set_ValueExprResponse);
  rpc Get_ValueExpr(DotNetParameter_Get_ValueExprRequest) returns (DotNetParameter_Get_ValueExprResponse);
  
  
  // Property: DisposeObject
  //
  // Specifies whether TestStand attempts to dispose the object the DotNetParameter returns when the object is released or goes out of scope.
  //
  // If the parameter is not an object reference or if the object does not implement the IDisposable interface, TestStand ignores this property.
  //
  // DotNetParameter_Set_DisposeObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //    - propertyValue: bool - Specifies whether TestStand attempts to dispose the object the DotNetParameter returns when the object is released or goes out of scope. 
  //
  // DotNetParameter_Set_DisposeObjectResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DotNetParameter_Get_DisposeObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //
  // DotNetParameter_Get_DisposeObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether TestStand attempts to dispose the object the DotNetParameter returns when the object is released or goes out of scope. 
  //
  rpc Set_DisposeObject(DotNetParameter_Set_DisposeObjectRequest) returns (DotNetParameter_Set_DisposeObjectResponse);
  rpc Get_DisposeObject(DotNetParameter_Get_DisposeObjectRequest) returns (DotNetParameter_Get_DisposeObjectResponse);
  
  
  // Property: ParameterName
  //
  // Returns the name of the parameter.
  //
  // The .NET Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the DotNetCall.LoadPrototypeFromSignature method before you retrieve this property value.
  //
  // DotNetParameter_Get_ParameterNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //
  // DotNetParameter_Get_ParameterNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the parameter. 
  //
  rpc Get_ParameterName(DotNetParameter_Get_ParameterNameRequest) returns (DotNetParameter_Get_ParameterNameResponse);
  
  
  // Property: Type
  //
  // Returns the data type of the parameter.
  //
  // The .NET Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the DotNetCall.LoadPrototypeFromSignature method before you retrieve this property value.
  //
  // DotNetParameter_Get_TypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //
  // DotNetParameter_Get_TypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: DotNetParameterTypes - Returns the data type of the parameter. 
  //
  rpc Get_Type(DotNetParameter_Get_TypeRequest) returns (DotNetParameter_Get_TypeResponse);
  
  
  // Property: DisplayType
  //
  // Returns a localized display value for the data type of the parameter.
  //
  // DotNetParameter_Get_DisplayTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //
  // DotNetParameter_Get_DisplayTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns a localized display value for the data type of the parameter. 
  //
  rpc Get_DisplayType(DotNetParameter_Get_DisplayTypeRequest) returns (DotNetParameter_Get_DisplayTypeResponse);
  
  
  // Property: Flags
  //
  // Returns flags that indicate certain attributes of the DotNetParameter. Refer to DotNetParameterFlags for a description of these flags.
  //
  // You must call the DotNetCall.LoadPrototypeFromSignature method before retrieving this property value.
  //
  // DotNetParameter_Get_FlagsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //
  // DotNetParameter_Get_FlagsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns flags that indicate certain attributes of the DotNetParameter. Refer to DotNetParameterFlags for a description of these flags. 
  //
  rpc Get_Flags(DotNetParameter_Get_FlagsRequest) returns (DotNetParameter_Get_FlagsResponse);
  
  
  // Property: Direction
  //
  // Returns a value that indicates whether the parameter is an input parameter, output parameter, input/output parameter, or a return value. Refer to DotNetParameterDirections for all the possible values.
  //
  // The Direction property does not apply to DotNetParameter objects that represent fields of a structure or elements of an array.
  // The .NET Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the DotNetCall.LoadPrototypeFromSignature method before you retrieve this property value.
  //
  // DotNetParameter_Get_DirectionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //
  // DotNetParameter_Get_DirectionResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a value that indicates whether the parameter is an input parameter, output parameter, input/output parameter, or a return value. Refer to DotNetParameterDirections for all the possible values. 
  //
  rpc Get_Direction(DotNetParameter_Get_DirectionRequest) returns (DotNetParameter_Get_DirectionResponse);
  
  
  // Property: DefaultValue
  //
  // Returns a display string that represents the default value defined for the parameter.
  //
  // This value loads dynamically from the metadata stored in the assembly. The assembly you specify for the DotNetCall must exist and you must be able to load the assembly for TestStand to successfully retrieve this value.
  // The DefaultValue property does not apply to DotNetParameter objects that represent fields of a structure or elements of an array.
  //
  // DotNetParameter_Get_DefaultValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //
  // DotNetParameter_Get_DefaultValueResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns a display string that represents the default value defined for the parameter. 
  //
  rpc Get_DefaultValue(DotNetParameter_Get_DefaultValueRequest) returns (DotNetParameter_Get_DefaultValueResponse);
  
  
  // Property: Elements
  //
  // Returns a collection that represents the following types of parameters, depending on the data type of the parameter:
  // * Struct parameters—Fields of the struct.    * Array parameters—Elements of the array for the case in which you configure the code module to explicitly pass each element instead of the entire array.    * Array of struct parameters—Fields of the struct definition for the array.
  //
  // DotNetParameter_Get_ElementsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //
  // DotNetParameter_Get_ElementsResponse - The response message from the server. It provides the return value.
  //    - returnValue: DotNetParametersInstance - Returns a collection that represents the following types of parameters, depending on the data type of the parameter: * Struct parameters—Fields of the struct.    * Array parameters—Elements of the array for the case in which you configure the code module to explicitly pass each element instead of the entire array.    * Array of struct parameters—Fields of the struct definition for the array. 
  //
  rpc Get_Elements(DotNetParameter_Get_ElementsRequest) returns (DotNetParameter_Get_ElementsResponse);
  
  
  // Property: ArrayDimensions
  //
  // Note: This property is obsolete. Use the DotNetParameter.ArrayDimensionsEx property instead.
  //
  // Returns the number of dimensions for array parameters.
  //
  // DotNetParameter_Get_ArrayDimensionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //
  // DotNetParameter_Get_ArrayDimensionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Note: This property is obsolete. Use the DotNetParameter.ArrayDimensionsEx property instead. 
  //
  rpc Get_ArrayDimensions(DotNetParameter_Get_ArrayDimensionsRequest) returns (DotNetParameter_Get_ArrayDimensionsResponse);
  
  
  // Property: UserData
  //
  // Holds a data item you associate with the parameter object.
  //
  // Typically, you do not use this property.
  //
  // DotNetParameter_Get_UserDataRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //
  // DotNetParameter_Get_UserDataResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Holds a data item you associate with the parameter object. 
  //
  rpc Get_UserData(DotNetParameter_Get_UserDataRequest) returns (DotNetParameter_Get_UserDataResponse);
  
  
  // Property: ValidEvaluationTypes
  //
  // Returns the valid types to which this parameter can evaluate.
  //
  // You can pass the value of this property to the validEvaluationTypes parameter of the Expression.ValidateEvaluationType method to determine whether the value of the DotNetParameter.ValueExpr property contains errors.
  // If you are using an ExpressionEdit control to display the value of the DotNetParameter.ValueExpr property, pass the value of this property to the  ExpressionEdit.SetValidEvaluationTypes method.
  //
  // DotNetParameter_Get_ValidEvaluationTypesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //
  // DotNetParameter_Get_ValidEvaluationTypesResponse - The response message from the server. It provides the return value.
  //    - returnValue: EvaluationTypesInstance - Returns the valid types to which this parameter can evaluate. 
  //
  rpc Get_ValidEvaluationTypes(DotNetParameter_Get_ValidEvaluationTypesRequest) returns (DotNetParameter_Get_ValidEvaluationTypesResponse);
  
  
  // Property: HelpString
  //
  // Returns the help string the assembly associates with the parameter.
  //
  // DotNetParameter_Get_HelpStringRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //
  // DotNetParameter_Get_HelpStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the help string the assembly associates with the parameter. 
  //
  rpc Get_HelpString(DotNetParameter_Get_HelpStringRequest) returns (DotNetParameter_Get_HelpStringResponse);
  
  
  // Property: ValueExprIsIgnored
  //
  // Use this property to determine whether the .NET Adapter ignores the argument value expression when it calls the module. The adapter ignores the argument value expression for parameters that use default values.
  //
  // DotNetParameter_Get_ValueExprIsIgnoredRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //
  // DotNetParameter_Get_ValueExprIsIgnoredResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Use this property to determine whether the .NET Adapter ignores the argument value expression when it calls the module. The adapter ignores the argument value expression for parameters that use default values. 
  //
  rpc Get_ValueExprIsIgnored(DotNetParameter_Get_ValueExprIsIgnoredRequest) returns (DotNetParameter_Get_ValueExprIsIgnoredResponse);
  
  
  // Property: ValueExprIsOptional
  //
  // Use this property to determine whether the argument value expression is optional. You do not have to specify an optional value expression to call the module successfully. Value expressions for return values are optional.
  //
  // DotNetParameter_Get_ValueExprIsOptionalRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //
  // DotNetParameter_Get_ValueExprIsOptionalResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Use this property to determine whether the argument value expression is optional. You do not have to specify an optional value expression to call the module successfully. Value expressions for return values are optional. 
  //
  rpc Get_ValueExprIsOptional(DotNetParameter_Get_ValueExprIsOptionalRequest) returns (DotNetParameter_Get_ValueExprIsOptionalResponse);
  
  
  // Property: ArrayDimensionsEx
  //
  // Returns the number of dimensions for array parameters. This property supports arrays of arrays, also known as jagged arrays, which can specify more than one number of dimensions.
  //
  // For non-array parameters, this property returns an empty array.
  // For regular array parameters, this property returns an array with a single element that specifies a value that is the number of dimensions of the array.
  // For jagged arrays, this property returns an array with elements that represent the number of dimensions for each array level.
  //
  // DotNetParameter_Get_ArrayDimensionsExRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //
  // DotNetParameter_Get_ArrayDimensionsExResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated int32 - Returns the number of dimensions for array parameters. This property supports arrays of arrays, also known as jagged arrays, which can specify more than one number of dimensions. 
  //
  rpc Get_ArrayDimensionsEx(DotNetParameter_Get_ArrayDimensionsExRequest) returns (DotNetParameter_Get_ArrayDimensionsExResponse);
  
  
  // Property: TypeName
  //
  // Returns the .NET name for the data type of the parameter.
  //
  // This property is similar to the DotNetParameter.DisplayType property, which contains the TestStand type followed by the .NET type name in parentheses. The DotNetParameter.TypeName property contains only the .NET type name.
  // For the following .NET types, the DotNetParameter.TypeName property omits the System namespace prefix: Boolean, Byte, Char, Double, Int16, Int32, Int64, IntPtr, SByte, Single, UInt16, UInt32, UInt64, and UIntPtr.
  //
  // DotNetParameter_Get_TypeNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetParameterInstance - The id of the DotNetParameter object.
  //
  // DotNetParameter_Get_TypeNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the .NET name for the data type of the parameter. 
  //
  rpc Get_TypeName(DotNetParameter_Get_TypeNameRequest) returns (DotNetParameter_Get_TypeNameResponse);
  
  
}
message DotNetParameter_AsPropertyObjectRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
}

message DotNetParameter_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message DotNetParameter_GetEnumValuesRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
}

message DotNetParameter_GetEnumValuesResponse {
  // Returns an array of property objects where each property object represents an enumeration value.
  repeated PropertyObjectInstance returnValue = 1;
}

message DotNetParameter_DisplayCreateCustomDataTypeDialogRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
  // Specifies the sequence context the Create Custom Data Type from Struct dialog box uses to obtain information about the sequence file. You can use the Engine.NewEditContext method to obtain an edit-time sequence context.
  SequenceContextInstance sequenceContext = 2;
}

message DotNetParameter_DisplayCreateCustomDataTypeDialogResponse {
  // Returns True if you click OK in the dialog box and False if you click Cancel.
  bool returnValue = 1;
}

message DotNetParameter_InsertArrayElementRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
  // Specifies the zero-based index that specifies the location where to insert the element.
  int32 index = 2;
}

message DotNetParameter_InsertArrayElementResponse {
}

message DotNetParameter_DeleteArrayElementRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
  // Specifies the zero-based index that specifies the location where to delete the element.
  int32 index = 2;
}

message DotNetParameter_DeleteArrayElementResponse {
}

message DotNetParameter_IsStructMappingInvalidRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
}

message DotNetParameter_IsStructMappingInvalidResponse {
  // Returns True when the parameter is a struct or struct array, the argument expression is valid and non-empty, and the argument or struct mapping of the argument is invalid. In all other cases, this method returns False.
  bool returnValue = 1;
  // When this method returns True, this parameter returns the reason why the argument is invalid.
  string reasonNotValid = 2;
}

message DotNetParameter_IsParameterMappingInvalidRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
}

message DotNetParameter_IsParameterMappingInvalidResponse {
  // Returns true if the parameter in the code module is a struct or enum, the argument expression is valid and non-empty, and the mapping of the argument to the parameter in the code module is invalid. Returns false otherwise.
  bool returnValue = 1;
  // If the mapping is invalid, reasonNotValid contains an error message explaining why the type definitions do not match.  If the mapping is valid, reasonNotValid is set to an empty string.
  string reasonNotValid = 2;
}

message DotNetParameter_Set_UseDefaultValueRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
  // Specifies whether to use the default value of the parameter when calling the assembly.
  bool propertyValue = 2;
}

message DotNetParameter_Set_UseDefaultValueResponse {
}

message DotNetParameter_Get_UseDefaultValueRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
}

message DotNetParameter_Get_UseDefaultValueResponse {
  // Specifies whether to use the default value of the parameter when calling the assembly.
  bool returnValue = 1;
}

message DotNetParameter_Set_ValueExprRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
  // Specifies an expression defining the argument to pass for the parameter when calling the member.
  string propertyValue = 2;
}

message DotNetParameter_Set_ValueExprResponse {
}

message DotNetParameter_Get_ValueExprRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
}

message DotNetParameter_Get_ValueExprResponse {
  // Specifies an expression defining the argument to pass for the parameter when calling the member.
  string returnValue = 1;
}

message DotNetParameter_Set_DisposeObjectRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
  // Specifies whether TestStand attempts to dispose the object the DotNetParameter returns when the object is released or goes out of scope.
  bool propertyValue = 2;
}

message DotNetParameter_Set_DisposeObjectResponse {
}

message DotNetParameter_Get_DisposeObjectRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
}

message DotNetParameter_Get_DisposeObjectResponse {
  // Specifies whether TestStand attempts to dispose the object the DotNetParameter returns when the object is released or goes out of scope.
  bool returnValue = 1;
}

message DotNetParameter_Get_ParameterNameRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
}

message DotNetParameter_Get_ParameterNameResponse {
  // Returns the name of the parameter.
  string returnValue = 1;
}

message DotNetParameter_Get_TypeRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
}

message DotNetParameter_Get_TypeResponse {
  // Returns the data type of the parameter.
  DotNetParameterTypes returnValue = 1;
}

message DotNetParameter_Get_DisplayTypeRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
}

message DotNetParameter_Get_DisplayTypeResponse {
  // Returns a localized display value for the data type of the parameter.
  string returnValue = 1;
}

message DotNetParameter_Get_FlagsRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
}

message DotNetParameter_Get_FlagsResponse {
  // Returns flags that indicate certain attributes of the DotNetParameter. Refer to DotNetParameterFlags for a description of these flags.
  DotNetParameterFlags returnValue = 1;
}

message DotNetParameter_Get_DirectionRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
}

message DotNetParameter_Get_DirectionResponse {
  // Returns a value that indicates whether the parameter is an input parameter, output parameter, input/output parameter, or a return value. Refer to DotNetParameterDirections for all the possible values.
  DotNetParameterDirections returnValue = 1;
}

message DotNetParameter_Get_DefaultValueRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
}

message DotNetParameter_Get_DefaultValueResponse {
  // Returns a display string that represents the default value defined for the parameter.
  string returnValue = 1;
}

message DotNetParameter_Get_ElementsRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
}

message DotNetParameter_Get_ElementsResponse {
  // Returns a collection that represents the following types of parameters, depending on the data type of the parameter:
  // * Struct parameters—Fields of the struct.    * Array parameters—Elements of the array for the case in which you configure the code module to explicitly pass each element instead of the entire array.    * Array of struct parameters—Fields of the struct definition for the array.
  DotNetParametersInstance returnValue = 1;
}

message DotNetParameter_Get_ArrayDimensionsRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
}

message DotNetParameter_Get_ArrayDimensionsResponse {
  // Note: This property is obsolete. Use the DotNetParameter.ArrayDimensionsEx property instead.
  int32 returnValue = 1;
}

message DotNetParameter_Get_UserDataRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
}

message DotNetParameter_Get_UserDataResponse {
  // Holds a data item you associate with the parameter object.
  PropertyObjectInstance returnValue = 1;
}

message DotNetParameter_Get_ValidEvaluationTypesRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
}

message DotNetParameter_Get_ValidEvaluationTypesResponse {
  // Returns the valid types to which this parameter can evaluate.
  EvaluationTypesInstance returnValue = 1;
}

message DotNetParameter_Get_HelpStringRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
}

message DotNetParameter_Get_HelpStringResponse {
  // Returns the help string the assembly associates with the parameter.
  string returnValue = 1;
}

message DotNetParameter_Get_ValueExprIsIgnoredRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
}

message DotNetParameter_Get_ValueExprIsIgnoredResponse {
  // Use this property to determine whether the .NET Adapter ignores the argument value expression when it calls the module. The adapter ignores the argument value expression for parameters that use default values.
  bool returnValue = 1;
}

message DotNetParameter_Get_ValueExprIsOptionalRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
}

message DotNetParameter_Get_ValueExprIsOptionalResponse {
  // Use this property to determine whether the argument value expression is optional. You do not have to specify an optional value expression to call the module successfully. Value expressions for return values are optional.
  bool returnValue = 1;
}

message DotNetParameter_Get_ArrayDimensionsExRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
}

message DotNetParameter_Get_ArrayDimensionsExResponse {
  // Returns the number of dimensions for array parameters. This property supports arrays of arrays, also known as jagged arrays, which can specify more than one number of dimensions.
  repeated int32 returnValue = 1;
}

message DotNetParameter_Get_TypeNameRequest {
  // The id of the DotNetParameter object.
  DotNetParameterInstance instance = 1;
}

message DotNetParameter_Get_TypeNameResponse {
  // Returns the .NET name for the data type of the parameter.
  string returnValue = 1;
}

// DotNetCalls
//
// Use objects from the DotNetCalls class to configure and obtain calls for a module the .NET Adapter uses.  Use the DotNetModule.Calls property to obtain the collection of calls for a module.
//
service DotNetCalls {
  // Method: New
  //
  // Creates a new DotNetCall object and inserts it into the collection at the specified index.
  //
  // DotNetCalls_NewRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetCallsInstance - The id of the DotNetCalls object.
  //    - index: int32 - Specifies the zero-based index at which to insert the new DotNetCall object into the collection.
  //
  // DotNetCalls_NewResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc New(DotNetCalls_NewRequest) returns (DotNetCalls_NewResponse);
  
  
  // Method: Delete
  //
  // Removes the DotNetCall object at the specified index from the DotNetCalls collection.
  //
  // DotNetCalls_DeleteRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetCallsInstance - The id of the DotNetCalls object.
  //    - index: int32 - Specifies the zero-based index of the DotNetCall object to remove from the DotNetCalls collection.
  //
  // DotNetCalls_DeleteResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Delete(DotNetCalls_DeleteRequest) returns (DotNetCalls_DeleteResponse);
  
  
  // Method: DeleteAllAfterIndex
  //
  // Removes all items after, but not including, the specified index from the collection.
  //
  // DotNetCalls_DeleteAllAfterIndexRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetCallsInstance - The id of the DotNetCalls object.
  //    - index: int32 - Specifies the zero-based index after which this method removes all DotNetCall objects from the collection.
  //
  // DotNetCalls_DeleteAllAfterIndexResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc DeleteAllAfterIndex(DotNetCalls_DeleteAllAfterIndexRequest) returns (DotNetCalls_DeleteAllAfterIndexResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // DotNetCalls_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetCallsInstance - The id of the DotNetCalls object.
  //
  // DotNetCalls_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(DotNetCalls_ClearRequest) returns (DotNetCalls_ClearResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // DotNetCalls_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetCallsInstance - The id of the DotNetCalls object.
  //    - index: int32 - Specifies the zero-based index of the item to retrieve.
  //
  // DotNetCalls_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: DotNetCallInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(DotNetCalls_Get_ItemRequest) returns (DotNetCalls_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // DotNetCalls_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetCallsInstance - The id of the DotNetCalls object.
  //
  // DotNetCalls_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(DotNetCalls_Get_CountRequest) returns (DotNetCalls_Get_CountResponse);
  
  
}
message DotNetCallInstance {
  // Specifies the handle of the DotNetCall instance in the server.
  string id = 1;
}
message DotNetCalls_NewRequest {
  // The id of the DotNetCalls object.
  DotNetCallsInstance instance = 1;
  // Specifies the zero-based index at which to insert the new DotNetCall object into the collection.
  int32 index = 2;
}

message DotNetCalls_NewResponse {
}

message DotNetCalls_DeleteRequest {
  // The id of the DotNetCalls object.
  DotNetCallsInstance instance = 1;
  // Specifies the zero-based index of the DotNetCall object to remove from the DotNetCalls collection.
  int32 index = 2;
}

message DotNetCalls_DeleteResponse {
}

message DotNetCalls_DeleteAllAfterIndexRequest {
  // The id of the DotNetCalls object.
  DotNetCallsInstance instance = 1;
  // Specifies the zero-based index after which this method removes all DotNetCall objects from the collection.
  int32 index = 2;
}

message DotNetCalls_DeleteAllAfterIndexResponse {
}

message DotNetCalls_ClearRequest {
  // The id of the DotNetCalls object.
  DotNetCallsInstance instance = 1;
}

message DotNetCalls_ClearResponse {
}

message DotNetCalls_Get_ItemRequest {
  // The id of the DotNetCalls object.
  DotNetCallsInstance instance = 1;
  // Specifies the zero-based index of the item to retrieve.
  int32 index = 2;
}

message DotNetCalls_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  DotNetCallInstance returnValue = 1;
}

message DotNetCalls_Get_CountRequest {
  // The id of the DotNetCalls object.
  DotNetCallsInstance instance = 1;
}

message DotNetCalls_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// DotNetCall
//
// Use objects from the DotNetCall class to specify and obtain .NET Adapter-specific information about the code module that steps or step type substeps execute.
// Typically, you use this class only when you are writing a sequence editor.
// You can use the DotNetCall.LoadPrototypeFromSignature method to load the prototype for the call.
//
service DotNetCall {
  // Method: GetAssembly
  //
  // Returns the location of the assembly and pathname if the assembly is located in a file. This method returns the strong name if the assembly is located in the Global Assembly Cache (GAC).
  //
  // Returns the assembly that contains the type information for the class that corresponds to the DotNetCall.ClassName property. All calls before this call in the DotNetCalls collection must be valid before calling this method.
  //
  // DotNetCall_GetAssemblyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetCallInstance - The id of the DotNetCall object.
  //
  // DotNetCall_GetAssemblyResponse - The response message from the server. It provides the output parameters.
  //    - assemblyLocationParam: DotNetModuleAssemblyLocation - Returns a value that indicates whether the assembly is in a file or in the GAC.
  //    - assemblyPathParam: strin - Returns the pathname if the assembly is located in a file. This parameter specifies the strong name if the assembly is located in the GAC.
  //
  rpc GetAssembly(DotNetCall_GetAssemblyRequest) returns (DotNetCall_GetAssemblyResponse);
  
  
  // Method: GetAssemblyForNextCall
  //
  // Obtains assembly information for a subsequent call based on the return value for the current call and all previous calls in the call chain. This method returns the location of the assembly and the pathname, if the assembly is located in a file, or the strong name, if the assembly is located in the Global Assembly Cache (GAC).
  //
  // If the current or any previous DotNetCall object in the call chain does not have a return value or does not return a callable type, this method returns an error.
  //
  // DotNetCall_GetAssemblyForNextCallRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetCallInstance - The id of the DotNetCall object.
  //
  // DotNetCall_GetAssemblyForNextCallResponse - The response message from the server. It provides the output parameters.
  //    - assemblyLocationParam: DotNetModuleAssemblyLocation - Returns a value that indicates whether the assembly is located in a file or in the GAC.
  //    - assemblyPathParam: strin - Returns the pathname if the assembly is located in a file. This parameter specifies the strong name if the assembly is located in the GAC.
  //
  rpc GetAssemblyForNextCall(DotNetCall_GetAssemblyForNextCallRequest) returns (DotNetCall_GetAssemblyForNextCallResponse);
  
  
  // Method: LoadPrototypeFromSignature
  //
  // Returns True if the .NET Adapter successfully loaded the prototype for the specified call. This method returns False if the adapter cannot find the signature or member name. This method loads the parameters and prototype information for a .NET member given the signature or name of the member.
  //
  // This method replaces the obsolete DotNetModule.LoadPrototypeFromMetadataToken method.
  // This method is the primary mechanism for specify DotNetCall member prototypes. TestStand finds the member in the assembly that matches the given signature (or member name if you pass True for the allowMemberNameMatching parameter) and loads the prototype while setting all parameters and member information for the call. Use the suffix - Get or - Set to specify a get or set property or field operation. When you specify a property or field, you can omit the suffix and TestStand attempts to find a match by giving priority to properties with a - Get suffix. This behavior occurs even when you pass False for the allowMemberNameMatching parameter.
  // Note: If you specify a member name instead of a full signature when overloads exist for the member (and you pass True for the allowMemberNameMatching parameter), TestStand loads the prototype of the first overload in sorted order.
  // Use the following guidelines to specify a signature string:
  // * For methods and constructors—Specify the method or class name followed by the data types of the parameters in parentheses, separated by commas. For example:MyClass(Int32, System.String[] ByRef)MyMethod(MyNamespace.MyClass ByRef, Double, Int32[,] ByRef)Use the DotNetAdapter.GetMemberNames method to obtain a list of signatures for a particular assembly and class or to review more examples of the format for signatures.    * For Create Remote Object calls—To create a remote object, pass Create Remote Object(System.String). The .NET Adapter treats the System.String portion as a parameter and uses it to specify the universal remote identifier (URI) of the server.    * For Use Existing Objects calls—To use an existing object reference, pass Use Existing Object(MyNameSpace.MyClass), such as Use Existing Object(System.Collections.Queue). The .NET Adapter treats the class name as a parameter and uses it to specify the TestStand variable that holds the object reference you want to use.    * For properties and fields—If a property or field does not have an indexer, specify the property or field name followed by the - Get or - Set suffix to specify the type of operation to perform, as in MyProperty - Get or MyField - Set. If a property or field does have an indexer, add a space after the property name and add square brackets with the indexer types specified in a comma-separated list, as in:MyPropertyWithIndexers [Int32, System.String ByRef] - Get.    * For parameter strings—For basic types other than System.String, such as 32-bit integers and doubles, omit the System. prefix. For arrays, include the square brackets with commas inside to specify the number of dimensions. For ByRef and output parameters, include the string  ByRef, including the initial space, after the parameter data type.Signatures for the First Call in the Collection
  // You can set the first call in the collection only to a constructor or static member, or to specify to create a remote object or use an existing object.Example Signature Formats for System.String Class Members    * Simple member name—Replace. No overload exists for this method so the adapter requires only a simple name (as long as you pass True for the allowMemberNameMatching parameter).    * Full signature with parameter types—Split(Char[], Int32, System.StringSplitOptions). Overloads exist for this method, so the adapter requires the full signature to choose a specific overload (even if you pass True for the allowMemberNameMatching parameter). Note that Char and Int32 types do not have the System. prefix before the type name because they are basic types.    * Property simple member name—Length. This property is read-only so the adapter does not require the - Get suffix because Get is the only option.    * Property—Length - Get. If this property has both public read access and public write access, the adapter requires the - Get or - Set suffix to specify the operation to perform. However, if no suffix is provided, the adapter chooses - Get by default.    * Constructor—String(Char[], Int32, Int32). Multiple constructors exist so the adapter requires a full signature to specify a specific constructor. If only one public constructor exists, you can pass String as the signature (as long as you pass True for the allowMemberNameMatching parameter).
  //
  // DotNetCall_LoadPrototypeFromSignatureRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetCallInstance - The id of the DotNetCall object.
  //    - signatureOrMemberName: string - Specifies the signature or member name of the member with the prototype you want to load. If you want to pass a member name instead of a full signature, you must also pass True for the allowMemberNameMatching parameter.
  //    - allowMemberNameMatching: bool - Specifies whether to allow matching simply by member name instead of requiring a match to the full signature. If you pass False for this parameter, the .NET Adapter loads the prototype only if the signatureOrMemberName parameter exactly matches the full signature of a member. If you pass True for this parameter, the adapter first looks for a full signature match to the signatureOrMemberName parameter. If the adapter cannot find a match, it looks for a member name that matches the signatureOrMemberName parameter. To choose a specific overload, you must specify a signature instead of a member name. Refer to the Remarks section of this topic for more information about specifying a signature.
  //    - options: int32 - Specifies one or more LoadPrototypeOptions constants. Use the bitwise-OR operator to specify multiple flags.
  //
  // DotNetCall_LoadPrototypeFromSignatureResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc LoadPrototypeFromSignature(DotNetCall_LoadPrototypeFromSignatureRequest) returns (DotNetCall_LoadPrototypeFromSignatureResponse);
  
  
  // Method: IsCallValid
  //
  // Returns True if the DotNetCall object specification matches the actual member found in the corresponding class and assembly. Otherwise, returns False.
  //
  // This method also returns False when the .NET Adapter cannot load the assembly or the class or member name does not exist.
  //
  // DotNetCall_IsCallValidRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetCallInstance - The id of the DotNetCall object.
  //
  // DotNetCall_IsCallValidResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - The return type of the Boolean object.
  //    - errorDescription: strin - If this method returns False, this parameter returns the explanation.
  //
  rpc IsCallValid(DotNetCall_IsCallValidRequest) returns (DotNetCall_IsCallValidResponse);
  
  
  // Method: SetIncompleteSignature
  //
  // Stores the given partial signature for the .NET call as the member name, but does not attempt to actually load the prototype. Instead, this method clears parameters and sets the DotNetCall.MemberType property to DotNetMember_DoNotCall.
  //
  // Use this method to store signature information on a DotNetCall object without trying to actually load prototype for the call. For example, if the DotNetCall.LoadPrototypeFromSignature method cannot load the prototype for a given signature, you can store the signature on the DotNetCall object by calling this method.
  //
  // DotNetCall_SetIncompleteSignatureRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetCallInstance - The id of the DotNetCall object.
  //    - partialSignature: string - Specifies the partial signature to store on the DotNetCall object.
  //
  // DotNetCall_SetIncompleteSignatureResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetIncompleteSignature(DotNetCall_SetIncompleteSignatureRequest) returns (DotNetCall_SetIncompleteSignatureResponse);
  
  
  // Method: CreateCode
  //
  // Launches Microsoft Visual Studio to create code for the .NET call.
  //
  // For DotNetModule objects, use this method instead of the Module.CreateCode method.
  // This method creates a method in the class the DotNetCall.ClassName property specifies. This method uses the DotNetCall.MemberName property as the name of the method to create. The content of the code depends on the code templates configured for the step type of the step that contains the DotNetCall object. Use the Module.CanCreateCode property to determine whether this step can create code.
  // If you do not specify any files for the DotNetModule.ProjectFilePath or DotNetModule.SourceFilePath properties, call this method to prompt the user to specify the project and source files. The adapter stores the specified project file in the step, but the source file you select applies only to the current .NET call.
  // When you call this method, you might receive additional prompts to determine whether any of the following conditions exist:     * Multiple versions of Visual Studio exist on the computer and you select the Always Prompt for Version option from the Version of Visual Studio to Use for Create and Edit Code ring control in the .NET Adapter Configuration dialog box.    * Multiple versions of Visual Studio exist on the computer and you select the use the Version that Matches the Project File option from the Version of Visual Studio to Use for Create and Edit Code ring control in the .NET Adapter Configuration dialog box, and TestStand cannot match the version of the file.    * A method already exists with the same signature.    * The specified solution does not contain the specified project.    * The specified project does not contain the specified source file.
  //
  // DotNetCall_CreateCodeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetCallInstance - The id of the DotNetCall object.
  //
  // DotNetCall_CreateCodeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the DotNetCall object was modified. 
  //
  rpc CreateCode(DotNetCall_CreateCodeRequest) returns (DotNetCall_CreateCodeResponse);
  
  
  // Method: EditCode
  //
  // Attempts to launch Microsoft Visual Studio to edit the code associated with the .NET call.
  //
  // For DotNetModule objects, use this method instead of the Module.EditCode method.
  // Use the Module.CanCreateCode property to determine whether this step can edit code.
  // If you do not specify any files for the DotNetModule.ProjectFilePath or DotNetModule.SourceFilePath properties, call this method to prompt the user to specify the project and source files. The adapter stores the specified project file in the step, but the source file you select applies only to the current .NET call.
  // When you call this method, you might receive additional prompts to determine whether any of the following conditions exist:     * Multiple versions of Visual Studio exist on the computer and you select the Always Prompt for Version option from the Version of Visual Studio to Use for Create and Edit Code ring control in the .NET Adapter Configuration dialog box.    * Multiple versions of Visual Studio exist on the computer and you select the use the Version that Matches the Project File option from the Version of Visual Studio to Use for Create and Edit Code ring control in the .NET Adapter Configuration dialog box, and TestStand cannot match the version of the file.    * The specified solution does not contain the specified project.    * The specified project does not contain the specified source file.
  //
  // DotNetCall_EditCodeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetCallInstance - The id of the DotNetCall object.
  //
  // DotNetCall_EditCodeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc EditCode(DotNetCall_EditCodeRequest) returns (DotNetCall_EditCodeResponse);
  
  
  // Method: ReloadPrototype
  //
  // Attempts to reload prototype information for the selected member, including parameter types and return value types. For each parameter, this method updates in/out information, struct definitions, and array dimensions, if applicable.
  //
  // If the .NET Adapter cannot find an assembly, class, or member anywhere in the call chain up to and including the current call, this method returns an error.
  //
  // DotNetCall_ReloadPrototypeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetCallInstance - The id of the DotNetCall object.
  //    - options: int32 - Specifies one or more LoadPrototypeOptions constants. Use the bitwise-OR operator to specify multiple flags.
  //
  // DotNetCall_ReloadPrototypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc ReloadPrototype(DotNetCall_ReloadPrototypeRequest) returns (DotNetCall_ReloadPrototypeResponse);
  
  

  // Property: ClassName
  //
  // Returns the name of the class on which to perform the call. This property is based on the DotNetModule.ClassName property if the current DotNetCall object is the first call on the step. Otherwise, this property is based on the return value of the previous DotNetCall object in the chain of calls.
  //
  // DotNetCall_Get_ClassNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetCallInstance - The id of the DotNetCall object.
  //
  // DotNetCall_Get_ClassNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the class on which to perform the call. This property is based on the DotNetModule.ClassName property if the current DotNetCall object is the first call on the step. Otherwise, this property is based on the return value of the previous DotNetCall object in the chain of calls. 
  //
  rpc Get_ClassName(DotNetCall_Get_ClassNameRequest) returns (DotNetCall_Get_ClassNameResponse);
  
  
  // Property: ClassHelpString
  //
  // Returns the help string the assembly associates with the class for this call.
  //
  // DotNetCall_Get_ClassHelpStringRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetCallInstance - The id of the DotNetCall object.
  //
  // DotNetCall_Get_ClassHelpStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the help string the assembly associates with the class for this call. 
  //
  rpc Get_ClassHelpString(DotNetCall_Get_ClassHelpStringRequest) returns (DotNetCall_Get_ClassHelpStringResponse);
  
  
  // Property: ClassNameForNextCall
  //
  // If you add a new call to the call chain after the current call, this property returns the class name the new call uses. If the current call does not have a return value of a type on which TestStand supports making another call, this property returns an empty string.
  //
  // DotNetCall_Get_ClassNameForNextCallRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetCallInstance - The id of the DotNetCall object.
  //
  // DotNetCall_Get_ClassNameForNextCallResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - If you add a new call to the call chain after the current call, this property returns the class name the new call uses. If the current call does not have a return value of a type on which TestStand supports making another call, this property returns an empty string. 
  //
  rpc Get_ClassNameForNextCall(DotNetCall_Get_ClassNameForNextCallRequest) returns (DotNetCall_Get_ClassNameForNextCallResponse);
  
  
  // Property: MemberType
  //
  // Returns the type of call the current DotNetCall object is configured to make. Use the DotNetCall.LoadPrototypeFromSignature method to change the member specifications for a DotNetCall object.
  //
  // DotNetCall_Get_MemberTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetCallInstance - The id of the DotNetCall object.
  //
  // DotNetCall_Get_MemberTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: DotNetModuleMemberTypes - Returns the type of call the current DotNetCall object is configured to make. Use the DotNetCall.LoadPrototypeFromSignature method to change the member specifications for a DotNetCall object. 
  //
  rpc Get_MemberType(DotNetCall_Get_MemberTypeRequest) returns (DotNetCall_Get_MemberTypeResponse);
  
  
  // Property: MemberFlags
  //
  // Returns certain attributes of the member the DotNetCall object calls. Use the DotNetCall.LoadPrototypeFromSignature method to change the member specifications for a DotNetCall object.
  //
  // DotNetCall_Get_MemberFlagsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetCallInstance - The id of the DotNetCall object.
  //
  // DotNetCall_Get_MemberFlagsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns certain attributes of the member the DotNetCall object calls. Use the DotNetCall.LoadPrototypeFromSignature method to change the member specifications for a DotNetCall object. 
  //
  rpc Get_MemberFlags(DotNetCall_Get_MemberFlagsRequest) returns (DotNetCall_Get_MemberFlagsResponse);
  
  
  // Property: MemberName
  //
  // Returns the name of the member function to call or property or field to access. Use the DotNetCall.LoadPrototypeFromSignature method to change the member specifications for a DotNetCall object.
  //
  // DotNetCall_Get_MemberNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetCallInstance - The id of the DotNetCall object.
  //
  // DotNetCall_Get_MemberNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the member function to call or property or field to access. Use the DotNetCall.LoadPrototypeFromSignature method to change the member specifications for a DotNetCall object. 
  //
  rpc Get_MemberName(DotNetCall_Get_MemberNameRequest) returns (DotNetCall_Get_MemberNameResponse);
  
  
  // Property: MemberHelpString
  //
  // Returns the help string the assembly associates with the member.
  //
  // DotNetCall_Get_MemberHelpStringRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetCallInstance - The id of the DotNetCall object.
  //
  // DotNetCall_Get_MemberHelpStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the help string the assembly associates with the member. 
  //
  rpc Get_MemberHelpString(DotNetCall_Get_MemberHelpStringRequest) returns (DotNetCall_Get_MemberHelpStringResponse);
  
  
  // Property: Signature
  //
  // Returns the signature of the specified .NET member. Use the DotNetCall.LoadPrototypeFromSignature method to specify a signature for a call.
  //
  // DotNetCall_Get_SignatureRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetCallInstance - The id of the DotNetCall object.
  //
  // DotNetCall_Get_SignatureResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the signature of the specified .NET member. Use the DotNetCall.LoadPrototypeFromSignature method to specify a signature for a call. 
  //
  rpc Get_Signature(DotNetCall_Get_SignatureRequest) returns (DotNetCall_Get_SignatureResponse);
  
  
  // Property: Parameters
  //
  // Returns the DotNetParameters collection that contains a list of the current parameters used as inputs and outputs for the corresponding DotNetCall object. Use the DotNetCall.LoadPrototypeFromSignature method to change the member specification and parameters for a DotNetCall object.
  //
  // Call the DotNetCall.LoadPrototypeFromSignature method to specify a call before accessing this property.
  //
  // DotNetCall_Get_ParametersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetCallInstance - The id of the DotNetCall object.
  //
  // DotNetCall_Get_ParametersResponse - The response message from the server. It provides the return value.
  //    - returnValue: DotNetParametersInstance - Returns the DotNetParameters collection that contains a list of the current parameters used as inputs and outputs for the corresponding DotNetCall object. Use the DotNetCall.LoadPrototypeFromSignature method to change the member specification and parameters for a DotNetCall object. 
  //
  rpc Get_Parameters(DotNetCall_Get_ParametersRequest) returns (DotNetCall_Get_ParametersResponse);
  
  
  // Property: IsPrototypeIncompatible
  //
  // Returns a value that indicates whether the DotNetCall object prototype is incompatible with the actual prototype of the .NET member in the assembly.
  //
  // If this property cannot determine the prototype information because the assembly is not loadable, the class does not exist, or no member with the specified name exists, this property returns False. This property returns True only when a member with the specified name exists in the specified assembly and class, but does not match the specified prototype.
  //
  // DotNetCall_Get_IsPrototypeIncompatibleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetCallInstance - The id of the DotNetCall object.
  //
  // DotNetCall_Get_IsPrototypeIncompatibleResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the DotNetCall object prototype is incompatible with the actual prototype of the .NET member in the assembly. 
  //
  rpc Get_IsPrototypeIncompatible(DotNetCall_Get_IsPrototypeIncompatibleRequest) returns (DotNetCall_Get_IsPrototypeIncompatibleResponse);
  
  
  // Property: UnmappedArgumentValues
  //
  // Returns the UnmappedArgumentValues collection that contains a list of the arguments not used as inputs or outputs for the corresponding DotNetCall object.
  //
  // For DotNetModule objects, use this property instead of the Module.UnmappedArgumentValues property.
  // When you use the DotNetCall.LoadPrototypeFromSignature method to change a DotNetCall object prototype and pass the LoadPrototypeOption_MapExistingParameters option, TestStand attempts to map the current DotNetCall arguments to the new prototype by looking for matching argument names and data types and by matching argument positions and data types. If TestStand cannot assign an argument to the new prototype or if you do not pass the LoadPrototypeOption_MapExistingParameters option, the argument is added the current collection.
  // TestStand does not clear the collection when you load a new prototype. Use the UnmappedArgumentValues.Clear method to clear the collection after you call the DotNetCall.LoadPrototypeFromSignature method.
  //
  // DotNetCall_Get_UnmappedArgumentValuesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetCallInstance - The id of the DotNetCall object.
  //
  // DotNetCall_Get_UnmappedArgumentValuesResponse - The response message from the server. It provides the return value.
  //    - returnValue: UnmappedArgumentValuesInstance - Returns the UnmappedArgumentValues collection that contains a list of the arguments not used as inputs or outputs for the corresponding DotNetCall object. 
  //
  rpc Get_UnmappedArgumentValues(DotNetCall_Get_UnmappedArgumentValuesRequest) returns (DotNetCall_Get_UnmappedArgumentValuesResponse);
  
  
  // Property: CallIndex
  //
  // Returns the index of the DotNetCall object in the DotNetCalls collection on the DotNetModule object.
  //
  // DotNetCall_Get_CallIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetCallInstance - The id of the DotNetCall object.
  //
  // DotNetCall_Get_CallIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the index of the DotNetCall object in the DotNetCalls collection on the DotNetModule object. 
  //
  rpc Get_CallIndex(DotNetCall_Get_CallIndexRequest) returns (DotNetCall_Get_CallIndexResponse);
  
  
}
message DotNetCall_GetAssemblyRequest {
  // The id of the DotNetCall object.
  DotNetCallInstance instance = 1;
}

message DotNetCall_GetAssemblyResponse {
  // Returns a value that indicates whether the assembly is in a file or in the GAC.
  DotNetModuleAssemblyLocations assemblyLocationParam = 1;
  // Returns the pathname if the assembly is located in a file. This parameter specifies the strong name if the assembly is located in the GAC.
  string assemblyPathParam = 2;
}

message DotNetCall_GetAssemblyForNextCallRequest {
  // The id of the DotNetCall object.
  DotNetCallInstance instance = 1;
}

message DotNetCall_GetAssemblyForNextCallResponse {
  // Returns a value that indicates whether the assembly is located in a file or in the GAC.
  DotNetModuleAssemblyLocations assemblyLocationParam = 1;
  // Returns the pathname if the assembly is located in a file. This parameter specifies the strong name if the assembly is located in the GAC.
  string assemblyPathParam = 2;
}

message DotNetCall_LoadPrototypeFromSignatureRequest {
  // The id of the DotNetCall object.
  DotNetCallInstance instance = 1;
  // Specifies the signature or member name of the member with the prototype you want to load. If you want to pass a member name instead of a full signature, you must also pass True for the allowMemberNameMatching parameter.
  string signatureOrMemberName = 2;
  // Specifies whether to allow matching simply by member name instead of requiring a match to the full signature. If you pass False for this parameter, the .NET Adapter loads the prototype only if the signatureOrMemberName parameter exactly matches the full signature of a member. If you pass True for this parameter, the adapter first looks for a full signature match to the signatureOrMemberName parameter. If the adapter cannot find a match, it looks for a member name that matches the signatureOrMemberName parameter. To choose a specific overload, you must specify a signature instead of a member name. Refer to the Remarks section of this topic for more information about specifying a signature.
  bool allowMemberNameMatching = 3;
  // Specifies one or more LoadPrototypeOptions constants. Use the bitwise-OR operator to specify multiple flags.
  LoadPrototypeOptions options = 4;
}

message DotNetCall_LoadPrototypeFromSignatureResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message DotNetCall_IsCallValidRequest {
  // The id of the DotNetCall object.
  DotNetCallInstance instance = 1;
}

message DotNetCall_IsCallValidResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
  // If this method returns False, this parameter returns the explanation.
  string errorDescription = 2;
}

message DotNetCall_SetIncompleteSignatureRequest {
  // The id of the DotNetCall object.
  DotNetCallInstance instance = 1;
  // Specifies the partial signature to store on the DotNetCall object.
  string partialSignature = 2;
}

message DotNetCall_SetIncompleteSignatureResponse {
}

message DotNetCall_CreateCodeRequest {
  // The id of the DotNetCall object.
  DotNetCallInstance instance = 1;
}

message DotNetCall_CreateCodeResponse {
  // Specifies whether the DotNetCall object was modified.
  bool returnValue = 1;
}

message DotNetCall_EditCodeRequest {
  // The id of the DotNetCall object.
  DotNetCallInstance instance = 1;
}

message DotNetCall_EditCodeResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message DotNetCall_ReloadPrototypeRequest {
  // The id of the DotNetCall object.
  DotNetCallInstance instance = 1;
  // Specifies one or more LoadPrototypeOptions constants. Use the bitwise-OR operator to specify multiple flags.
  LoadPrototypeOptions options = 2;
}

message DotNetCall_ReloadPrototypeResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message DotNetCall_Get_ClassNameRequest {
  // The id of the DotNetCall object.
  DotNetCallInstance instance = 1;
}

message DotNetCall_Get_ClassNameResponse {
  // Returns the name of the class on which to perform the call. This property is based on the DotNetModule.ClassName property if the current DotNetCall object is the first call on the step. Otherwise, this property is based on the return value of the previous DotNetCall object in the chain of calls.
  string returnValue = 1;
}

message DotNetCall_Get_ClassHelpStringRequest {
  // The id of the DotNetCall object.
  DotNetCallInstance instance = 1;
}

message DotNetCall_Get_ClassHelpStringResponse {
  // Returns the help string the assembly associates with the class for this call.
  string returnValue = 1;
}

message DotNetCall_Get_ClassNameForNextCallRequest {
  // The id of the DotNetCall object.
  DotNetCallInstance instance = 1;
}

message DotNetCall_Get_ClassNameForNextCallResponse {
  // If you add a new call to the call chain after the current call, this property returns the class name the new call uses. If the current call does not have a return value of a type on which TestStand supports making another call, this property returns an empty string.
  string returnValue = 1;
}

message DotNetCall_Get_MemberTypeRequest {
  // The id of the DotNetCall object.
  DotNetCallInstance instance = 1;
}

message DotNetCall_Get_MemberTypeResponse {
  // Returns the type of call the current DotNetCall object is configured to make. Use the DotNetCall.LoadPrototypeFromSignature method to change the member specifications for a DotNetCall object.
  DotNetModuleMemberTypes returnValue = 1;
}

message DotNetCall_Get_MemberFlagsRequest {
  // The id of the DotNetCall object.
  DotNetCallInstance instance = 1;
}

message DotNetCall_Get_MemberFlagsResponse {
  // Returns certain attributes of the member the DotNetCall object calls. Use the DotNetCall.LoadPrototypeFromSignature method to change the member specifications for a DotNetCall object.
  DotNetModuleMemberFlags returnValue = 1;
}

message DotNetCall_Get_MemberNameRequest {
  // The id of the DotNetCall object.
  DotNetCallInstance instance = 1;
}

message DotNetCall_Get_MemberNameResponse {
  // Returns the name of the member function to call or property or field to access. Use the DotNetCall.LoadPrototypeFromSignature method to change the member specifications for a DotNetCall object.
  string returnValue = 1;
}

message DotNetCall_Get_MemberHelpStringRequest {
  // The id of the DotNetCall object.
  DotNetCallInstance instance = 1;
}

message DotNetCall_Get_MemberHelpStringResponse {
  // Returns the help string the assembly associates with the member.
  string returnValue = 1;
}

message DotNetCall_Get_SignatureRequest {
  // The id of the DotNetCall object.
  DotNetCallInstance instance = 1;
}

message DotNetCall_Get_SignatureResponse {
  // Returns the signature of the specified .NET member. Use the DotNetCall.LoadPrototypeFromSignature method to specify a signature for a call.
  string returnValue = 1;
}

message DotNetCall_Get_ParametersRequest {
  // The id of the DotNetCall object.
  DotNetCallInstance instance = 1;
}

message DotNetCall_Get_ParametersResponse {
  // Returns the DotNetParameters collection that contains a list of the current parameters used as inputs and outputs for the corresponding DotNetCall object. Use the DotNetCall.LoadPrototypeFromSignature method to change the member specification and parameters for a DotNetCall object.
  DotNetParametersInstance returnValue = 1;
}

message DotNetCall_Get_IsPrototypeIncompatibleRequest {
  // The id of the DotNetCall object.
  DotNetCallInstance instance = 1;
}

message DotNetCall_Get_IsPrototypeIncompatibleResponse {
  // Returns a value that indicates whether the DotNetCall object prototype is incompatible with the actual prototype of the .NET member in the assembly.
  bool returnValue = 1;
}

message DotNetCall_Get_UnmappedArgumentValuesRequest {
  // The id of the DotNetCall object.
  DotNetCallInstance instance = 1;
}

message DotNetCall_Get_UnmappedArgumentValuesResponse {
  // Returns the UnmappedArgumentValues collection that contains a list of the arguments not used as inputs or outputs for the corresponding DotNetCall object.
  UnmappedArgumentValuesInstance returnValue = 1;
}

message DotNetCall_Get_CallIndexRequest {
  // The id of the DotNetCall object.
  DotNetCallInstance instance = 1;
}

message DotNetCall_Get_CallIndexResponse {
  // Returns the index of the DotNetCall object in the DotNetCalls collection on the DotNetModule object.
  int32 returnValue = 1;
}

// DotNetModuleArguments
//
// Use objects from this class to pass specific argument values to a DotNetModule object using the DotNetModule.Execute method. Use the DotNetModule.NewModuleArguments method to create a new DotNetModuleArguments collection.
//
service DotNetModuleArguments {
  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // DotNetModuleArguments_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetModuleArgumentsInstance - The id of the DotNetModuleArguments object.
  //    - index: int32 - Specifies the zero-based index of the item to retrieve.
  //
  // DotNetModuleArguments_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: DotNetArgumentsInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(DotNetModuleArguments_Get_ItemRequest) returns (DotNetModuleArguments_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // DotNetModuleArguments_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetModuleArgumentsInstance - The id of the DotNetModuleArguments object.
  //
  // DotNetModuleArguments_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(DotNetModuleArguments_Get_CountRequest) returns (DotNetModuleArguments_Get_CountResponse);
  
  
}
message DotNetArgumentsInstance {
  // Specifies the handle of the DotNetArguments instance in the server.
  string id = 1;
}
message DotNetModuleArguments_Get_ItemRequest {
  // The id of the DotNetModuleArguments object.
  DotNetModuleArgumentsInstance instance = 1;
  // Specifies the zero-based index of the item to retrieve.
  optional int32 index = 2;
}

message DotNetModuleArguments_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  DotNetArgumentsInstance returnValue = 1;
}

message DotNetModuleArguments_Get_CountRequest {
  // The id of the DotNetModuleArguments object.
  DotNetModuleArgumentsInstance instance = 1;
}

message DotNetModuleArguments_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// DotNetArguments
//
// Use objects from this class to pass specific argument values to a specific DotNetCall object using the DotNetModule.Execute method. Use the DotNetModule.NewModuleArguments method to create a new DotNetModuleArguments collection of DotNetArguments objects.
//
service DotNetArguments {
  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // DotNetArguments_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: DotNetArgumentsInstance - The id of the DotNetArguments object.
  //    - index: oneof index { int32 numericIndex = 2; string nameIndex = 3; } - Specifies the zero-based index of the item to obtain.
  //
  // DotNetArguments_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: DotNetArgumentInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(DotNetArguments_Get_ItemRequest) returns (DotNetArguments_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // DotNetArguments_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetArgumentsInstance - The id of the DotNetArguments object.
  //
  // DotNetArguments_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(DotNetArguments_Get_CountRequest) returns (DotNetArguments_Get_CountResponse);
  
  
}
message DotNetArgumentInstance {
  // Specifies the handle of the DotNetArgument instance in the server.
  string id = 1;
}
message DotNetArguments_Get_ItemRequest {
  // The id of the DotNetArguments object.
  DotNetArgumentsInstance instance = 1;
  // Specifies the zero-based index of the item to obtain.
  oneof index { int32 numericIndex = 2; string nameIndex = 3; }
}

message DotNetArguments_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  DotNetArgumentInstance returnValue = 1;
}

message DotNetArguments_Get_CountRequest {
  // The id of the DotNetArguments object.
  DotNetArgumentsInstance instance = 1;
}

message DotNetArguments_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// DotNetArgument
//
// Use objects from this class to specify the argument value to pass to a DotNetCall object using the DotNetModule.Execute method.
//
service DotNetArgument {
  // Property: Value
  //
  // Specifies the argument value to pass for the corresponding parameter.
  //
  // When you pass a DotNetModuleArguments collection to the DotNetModule.Execute method, the adapter passes this property to the function instead of evaluating the DotNetParameter.ValueExpr expression.
  //
  // DotNetArgument_Set_ValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetArgumentInstance - The id of the DotNetArgument object.
  //    - propertyValue: PropertyObjectInstance - Specifies the argument value to pass for the corresponding parameter. 
  //
  // DotNetArgument_Set_ValueResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // DotNetArgument_Get_ValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetArgumentInstance - The id of the DotNetArgument object.
  //
  // DotNetArgument_Get_ValueResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Specifies the argument value to pass for the corresponding parameter. 
  //
  rpc Set_Value(DotNetArgument_Set_ValueRequest) returns (DotNetArgument_Set_ValueResponse);
  rpc Get_Value(DotNetArgument_Get_ValueRequest) returns (DotNetArgument_Get_ValueResponse);
  
  
  // Property: ParameterName
  //
  // Returns the name of the parameter with the argument.
  //
  // DotNetArgument_Get_ParameterNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetArgumentInstance - The id of the DotNetArgument object.
  //
  // DotNetArgument_Get_ParameterNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the parameter with the argument. 
  //
  rpc Get_ParameterName(DotNetArgument_Get_ParameterNameRequest) returns (DotNetArgument_Get_ParameterNameResponse);
  
  
  // Property: Elements
  //
  // Returns a collection of DotNetArgument objects to pass to a struct or an array parameter.
  //
  // The collection contains the same number of items as the corresponding DotNetParameter.Elements collection.
  //
  // DotNetArgument_Get_ElementsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: DotNetArgumentInstance - The id of the DotNetArgument object.
  //
  // DotNetArgument_Get_ElementsResponse - The response message from the server. It provides the return value.
  //    - returnValue: DotNetArgumentsInstance - Returns a collection of DotNetArgument objects to pass to a struct or an array parameter. 
  //
  rpc Get_Elements(DotNetArgument_Get_ElementsRequest) returns (DotNetArgument_Get_ElementsResponse);
  
  
}
message DotNetArgument_Set_ValueRequest {
  // The id of the DotNetArgument object.
  DotNetArgumentInstance instance = 1;
  // Specifies the argument value to pass for the corresponding parameter.
  PropertyObjectInstance propertyValue = 2;
}

message DotNetArgument_Set_ValueResponse {
}

message DotNetArgument_Get_ValueRequest {
  // The id of the DotNetArgument object.
  DotNetArgumentInstance instance = 1;
}

message DotNetArgument_Get_ValueResponse {
  // Specifies the argument value to pass for the corresponding parameter.
  PropertyObjectInstance returnValue = 1;
}

message DotNetArgument_Get_ParameterNameRequest {
  // The id of the DotNetArgument object.
  DotNetArgumentInstance instance = 1;
}

message DotNetArgument_Get_ParameterNameResponse {
  // Returns the name of the parameter with the argument.
  string returnValue = 1;
}

message DotNetArgument_Get_ElementsRequest {
  // The id of the DotNetArgument object.
  DotNetArgumentInstance instance = 1;
}

message DotNetArgument_Get_ElementsResponse {
  // Returns a collection of DotNetArgument objects to pass to a struct or an array parameter.
  DotNetArgumentsInstance returnValue = 1;
}

// ActiveXModule
//
// Use objects from the ActiveXModule class to specify and obtain ActiveX/COM Adapter-specific information about the code module that steps or step type substeps execute. Use the Step.Module property to obtain a reference to an ActiveXModule object. To access the properties and methods of a specific module class, query the Module object for the interface of the module-specific interface you want to acquire.
// Typically, you use this class only when you are writing a sequence editor.
// To access the properties and methods of the Module class, use the ActiveXModule.AsModule method to obtain an object.
// You can use the Module.LoadPrototype method to load the prototype for the module the step specifies.
//
service ActiveXModule {
  // Method: AsModule
  //
  // Returns the underlying module that represents the ActiveXModule object.
  //
  // Use the module to access properties and methods common to all modules.
  //
  // ActiveXModule_AsModuleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXModuleInstance - The id of the ActiveXModule object.
  //
  // ActiveXModule_AsModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: ModuleInstance - The return type of the Module object.
  //
  rpc AsModule(ActiveXModule_AsModuleRequest) returns (ActiveXModule_AsModuleResponse);
  
  
  // Method: LoadMemberInfo
  //
  // Note: This method is obsolete. Use the Module.LoadPrototype method instead.
  //
  // Loads information for the parameters of the specified member of the module.
  // You must set the ActiveXModule.ServerId, ActiveXModule.InterfaceName, ActiveXModule.MemberType, and ActiveXModule.MemberName properties for the module before calling this module to access the ActiveXModule.Parameters property.
  //
  // ActiveXModule_LoadMemberInfoRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ActiveXModuleInstance - The id of the ActiveXModule object.
  //    - discardParameterValues: bool - Specifies whether to reset the ActiveXParameter.ValueExpr property of existing parameter values when loading a new prototype.
  //
  // ActiveXModule_LoadMemberInfoResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the member information of the module was loaded. This method usually returns True. 
  //
  rpc LoadMemberInfo(ActiveXModule_LoadMemberInfoRequest) returns (ActiveXModule_LoadMemberInfoResponse);
  
  
  // Method: ReloadServer
  //
  // Call this method to direct the ActiveXModule to update type library information it stores internally.
  //
  // The ActiveXModule stores the type library information of the server specified by ActiveXModule.ServerId internally. The ActiveXModule uses this type library information when you access properties and methods of ActiveXModule or Module. For example, when you call Module.LoadPrototype the ActiveXModule uses this type library information to read the prototype of a property or method. The ActiveXModule obtains this type library information the first time you access a property or method that needs it. Use this method to force the ActiveXModule to update the type library information if the type library information might have changed. When you call this method, the ActiveXModule updates the type library information only if the type library has been modified on disk since the last time the ActiveXModule read the type library.
  //
  // ActiveXModule_ReloadServerRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXModuleInstance - The id of the ActiveXModule object.
  //
  // ActiveXModule_ReloadServerResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the ActiveXModule updates the type library information.  
  //
  rpc ReloadServer(ActiveXModule_ReloadServerRequest) returns (ActiveXModule_ReloadServerResponse);
  
  

  // Property: ActiveXReferenceExpr
  //
  // Specifies a variable or property using the ActiveX Reference type.
  //
  // When an ActiveX module creates an object, it assigns the object reference to the variable or property, if specified. Otherwise, the module automatically releases the object reference after executing. If the module does not create an object, but calls a method or accesses a property instead, the ActiveXReferenceExpr property must contain the value of a valid ActiveX reference that refers to the object on which to call the method or access the property.
  //
  // ActiveXModule_Set_ActiveXReferenceExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXModuleInstance - The id of the ActiveXModule object.
  //    - propertyValue: string - Specifies a variable or property using the ActiveX Reference type. 
  //
  // ActiveXModule_Set_ActiveXReferenceExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ActiveXModule_Get_ActiveXReferenceExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXModuleInstance - The id of the ActiveXModule object.
  //
  // ActiveXModule_Get_ActiveXReferenceExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies a variable or property using the ActiveX Reference type. 
  //
  rpc Set_ActiveXReferenceExpr(ActiveXModule_Set_ActiveXReferenceExprRequest) returns (ActiveXModule_Set_ActiveXReferenceExprResponse);
  rpc Get_ActiveXReferenceExpr(ActiveXModule_Get_ActiveXReferenceExprRequest) returns (ActiveXModule_Get_ActiveXReferenceExprResponse);
  
  
  // Property: ServerId
  //
  // Specifies the name of the ActiveX Automation server the module uses.
  //
  // The server must be registered with Microsoft Windows before the module executes, unless the ActiveXModule.CreateOption property specifies ActiveXCreate_FromFile and the ActiveXModule.FilePath property specifies a path from which to load the object.
  //
  // ActiveXModule_Set_ServerIdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXModuleInstance - The id of the ActiveXModule object.
  //    - propertyValue: string - Specifies the name of the ActiveX Automation server the module uses. 
  //
  // ActiveXModule_Set_ServerIdResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ActiveXModule_Get_ServerIdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXModuleInstance - The id of the ActiveXModule object.
  //
  // ActiveXModule_Get_ServerIdResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the name of the ActiveX Automation server the module uses. 
  //
  rpc Set_ServerId(ActiveXModule_Set_ServerIdRequest) returns (ActiveXModule_Set_ServerIdResponse);
  rpc Get_ServerId(ActiveXModule_Get_ServerIdRequest) returns (ActiveXModule_Get_ServerIdResponse);
  
  
  // Property: CoClassName
  //
  // Specifies the name of the server class the module uses when it creates an object of the class.
  //
  // An ActiveX module can access two groups of server objects. The first group includes all top-level objects the module can create. The second group includes all other objects the server creates as a result of an invocation of a method or a property call. Because objects in this second group do not have a class name, ensure the CoClassName remains empty when specifying a module that accesses them. For either group of objects, ensure the ActiveXModule.InterfaceName property contains the name of the interface with which the module accesses the object.
  //
  // ActiveXModule_Set_CoClassNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXModuleInstance - The id of the ActiveXModule object.
  //    - propertyValue: string - Specifies the name of the server class the module uses when it creates an object of the class. 
  //
  // ActiveXModule_Set_CoClassNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ActiveXModule_Get_CoClassNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXModuleInstance - The id of the ActiveXModule object.
  //
  // ActiveXModule_Get_CoClassNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the name of the server class the module uses when it creates an object of the class. 
  //
  rpc Set_CoClassName(ActiveXModule_Set_CoClassNameRequest) returns (ActiveXModule_Set_CoClassNameResponse);
  rpc Get_CoClassName(ActiveXModule_Get_CoClassNameRequest) returns (ActiveXModule_Get_CoClassNameResponse);
  
  
  // Property: InterfaceName
  //
  // Specifies the name of the interface the module uses when it invokes a server object.
  //
  // An ActiveX module can access two groups of server objects. The first group includes all top-level objects the module can create. The second group includes all other objects the server creates as a result of an invocation of a method or a property call. Because objects in this second group do not have a class name, ensure the ActiveXModule.CoClassName property remains empty when specifying a module that accesses them. For either group of objects, ensure this property contains the name of the interface with which the module accesses the object.
  //
  // ActiveXModule_Set_InterfaceNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXModuleInstance - The id of the ActiveXModule object.
  //    - propertyValue: string - Specifies the name of the interface the module uses when it invokes a server object. 
  //
  // ActiveXModule_Set_InterfaceNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ActiveXModule_Get_InterfaceNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXModuleInstance - The id of the ActiveXModule object.
  //
  // ActiveXModule_Get_InterfaceNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the name of the interface the module uses when it invokes a server object. 
  //
  rpc Set_InterfaceName(ActiveXModule_Set_InterfaceNameRequest) returns (ActiveXModule_Set_InterfaceNameResponse);
  rpc Get_InterfaceName(ActiveXModule_Get_InterfaceNameRequest) returns (ActiveXModule_Get_InterfaceNameResponse);
  
  
  // Property: CreateOption
  //
  // Specifies how a module creates a new instance of the specified object class when it executes.
  //
  // ActiveXModule_Set_CreateOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXModuleInstance - The id of the ActiveXModule object.
  //    - propertyValue: ActiveXModuleCreateOptions - Specifies how a module creates a new instance of the specified object class when it executes. 
  //
  // ActiveXModule_Set_CreateOptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ActiveXModule_Get_CreateOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXModuleInstance - The id of the ActiveXModule object.
  //
  // ActiveXModule_Get_CreateOptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: ActiveXModuleCreateOptions - Specifies how a module creates a new instance of the specified object class when it executes. 
  //
  rpc Set_CreateOption(ActiveXModule_Set_CreateOptionRequest) returns (ActiveXModule_Set_CreateOptionResponse);
  rpc Get_CreateOption(ActiveXModule_Get_CreateOptionRequest) returns (ActiveXModule_Get_CreateOptionResponse);
  
  
  // Property: UseStepLoadOptions
  //
  // Controls the lifetime of an object that the module creates. If this property is False, the module creates the object when it begins executing. The module then releases its internal reference to the object when it completes executing. If this property is True, the module creates the object when the step loads according to the Step.ModuleLoadOption property and then holds an internal reference to the object until the step unloads according to the Step.ModuleUnloadOption property.
  //
  // ActiveXModule_Set_UseStepLoadOptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXModuleInstance - The id of the ActiveXModule object.
  //    - propertyValue: bool - Controls the lifetime of an object that the module creates. If this property is False, the module creates the object when it begins executing. The module then releases its internal reference to the object when it completes executing. If this property is True, the module creates the object when the step loads according to the Step.ModuleLoadOption property and then holds an internal reference to the object until the step unloads according to the Step.ModuleUnloadOption property. 
  //
  // ActiveXModule_Set_UseStepLoadOptionsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ActiveXModule_Get_UseStepLoadOptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXModuleInstance - The id of the ActiveXModule object.
  //
  // ActiveXModule_Get_UseStepLoadOptionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Controls the lifetime of an object that the module creates. If this property is False, the module creates the object when it begins executing. The module then releases its internal reference to the object when it completes executing. If this property is True, the module creates the object when the step loads according to the Step.ModuleLoadOption property and then holds an internal reference to the object until the step unloads according to the Step.ModuleUnloadOption property. 
  //
  rpc Set_UseStepLoadOptions(ActiveXModule_Set_UseStepLoadOptionsRequest) returns (ActiveXModule_Set_UseStepLoadOptionsResponse);
  rpc Get_UseStepLoadOptions(ActiveXModule_Get_UseStepLoadOptionsRequest) returns (ActiveXModule_Get_UseStepLoadOptionsResponse);
  
  
  // Property: RemoteHost
  //
  // Specifies a remote system on which to create the object. Set the ActiveXModule.SpecifyHostByExpression property to True if the value of RemoteHost contains an expression. Otherwise, set the ActiveXModule.SpecifyHostByExpression property to False to indicate that this property contains a literal value.
  //
  // The module ignores this property when the ActiveXModule.CreateOption property specifies ActiveXCreate_AttachToActive or ActiveXCreate_DoNotCreate.
  // Note: Leave this property empty to create the object on a local computer.
  //
  // ActiveXModule_Set_RemoteHostRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXModuleInstance - The id of the ActiveXModule object.
  //    - propertyValue: string - Specifies a remote system on which to create the object. Set the ActiveXModule.SpecifyHostByExpression property to True if the value of RemoteHost contains an expression. Otherwise, set the ActiveXModule.SpecifyHostByExpression property to False to indicate that this property contains a literal value. 
  //
  // ActiveXModule_Set_RemoteHostResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ActiveXModule_Get_RemoteHostRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXModuleInstance - The id of the ActiveXModule object.
  //
  // ActiveXModule_Get_RemoteHostResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies a remote system on which to create the object. Set the ActiveXModule.SpecifyHostByExpression property to True if the value of RemoteHost contains an expression. Otherwise, set the ActiveXModule.SpecifyHostByExpression property to False to indicate that this property contains a literal value. 
  //
  rpc Set_RemoteHost(ActiveXModule_Set_RemoteHostRequest) returns (ActiveXModule_Set_RemoteHostResponse);
  rpc Get_RemoteHost(ActiveXModule_Get_RemoteHostRequest) returns (ActiveXModule_Get_RemoteHostResponse);
  
  
  // Property: SpecifyHostByExpression
  //
  // Specifies if the ActiveXModule.RemoteHost property contains an expression the module evaluates at run time to determine the name of the remote host. Otherwise, the ActiveXModule.RemoteHost property contains a literal value.
  //
  // The module ignores this property if RemoteHost is blank.
  //
  // ActiveXModule_Set_SpecifyHostByExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXModuleInstance - The id of the ActiveXModule object.
  //    - propertyValue: bool - Specifies if the ActiveXModule.RemoteHost property contains an expression the module evaluates at run time to determine the name of the remote host. Otherwise, the ActiveXModule.RemoteHost property contains a literal value. 
  //
  // ActiveXModule_Set_SpecifyHostByExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ActiveXModule_Get_SpecifyHostByExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXModuleInstance - The id of the ActiveXModule object.
  //
  // ActiveXModule_Get_SpecifyHostByExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if the ActiveXModule.RemoteHost property contains an expression the module evaluates at run time to determine the name of the remote host. Otherwise, the ActiveXModule.RemoteHost property contains a literal value. 
  //
  rpc Set_SpecifyHostByExpression(ActiveXModule_Set_SpecifyHostByExpressionRequest) returns (ActiveXModule_Set_SpecifyHostByExpressionResponse);
  rpc Get_SpecifyHostByExpression(ActiveXModule_Get_SpecifyHostByExpressionRequest) returns (ActiveXModule_Get_SpecifyHostByExpressionResponse);
  
  
  // Property: FilePath
  //
  // When the ActiveXModule.CreateOption property specifies ActiveXCreate_FromFile, this property specifies the path of the file from which the module loads the object and obtains a reference.
  //
  // You can specify an absolute or relative pathname for the file. Relative pathnames are relative to the TestStand search directory paths.
  // If a server application is already running, the module might launch another copy of the application. The server application determines when to launch multiple copies of itself.
  //
  // ActiveXModule_Set_FilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXModuleInstance - The id of the ActiveXModule object.
  //    - propertyValue: string - When the ActiveXModule.CreateOption property specifies ActiveXCreate_FromFile, this property specifies the path of the file from which the module loads the object and obtains a reference. 
  //
  // ActiveXModule_Set_FilePathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ActiveXModule_Get_FilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXModuleInstance - The id of the ActiveXModule object.
  //
  // ActiveXModule_Get_FilePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - When the ActiveXModule.CreateOption property specifies ActiveXCreate_FromFile, this property specifies the path of the file from which the module loads the object and obtains a reference. 
  //
  rpc Set_FilePath(ActiveXModule_Set_FilePathRequest) returns (ActiveXModule_Set_FilePathResponse);
  rpc Get_FilePath(ActiveXModule_Get_FilePathRequest) returns (ActiveXModule_Get_FilePathResponse);
  
  
  // Property: MemberType
  //
  // Specifies whether the module calls a method or accesses a property.
  //
  // ActiveXModule_Set_MemberTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXModuleInstance - The id of the ActiveXModule object.
  //    - propertyValue: ActiveXModuleMemberTypes - Specifies whether the module calls a method or accesses a property. 
  //
  // ActiveXModule_Set_MemberTypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ActiveXModule_Get_MemberTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXModuleInstance - The id of the ActiveXModule object.
  //
  // ActiveXModule_Get_MemberTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: ActiveXModuleMemberTypes - Specifies whether the module calls a method or accesses a property. 
  //
  rpc Set_MemberType(ActiveXModule_Set_MemberTypeRequest) returns (ActiveXModule_Set_MemberTypeResponse);
  rpc Get_MemberType(ActiveXModule_Get_MemberTypeRequest) returns (ActiveXModule_Get_MemberTypeResponse);
  
  
  // Property: MemberName
  //
  // Specifies the name of the class method to invoke or the class property to access.
  //
  // ActiveXModule_Set_MemberNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXModuleInstance - The id of the ActiveXModule object.
  //    - propertyValue: string - Specifies the name of the class method to invoke or the class property to access. 
  //
  // ActiveXModule_Set_MemberNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ActiveXModule_Get_MemberNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXModuleInstance - The id of the ActiveXModule object.
  //
  // ActiveXModule_Get_MemberNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the name of the class method to invoke or the class property to access. 
  //
  rpc Set_MemberName(ActiveXModule_Set_MemberNameRequest) returns (ActiveXModule_Set_MemberNameResponse);
  rpc Get_MemberName(ActiveXModule_Get_MemberNameRequest) returns (ActiveXModule_Get_MemberNameResponse);
  
  
  // Property: Parameters
  //
  // Returns the ActiveXParameters collection that contains a list of the current parameters used as inputs and outputs of the corresponding module.
  //
  // Call the Module.LoadPrototype method before you access this property.
  //
  // ActiveXModule_Get_ParametersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXModuleInstance - The id of the ActiveXModule object.
  //
  // ActiveXModule_Get_ParametersResponse - The response message from the server. It provides the return value.
  //    - returnValue: ActiveXParametersInstance - Returns the ActiveXParameters collection that contains a list of the current parameters used as inputs and outputs of the corresponding module. 
  //
  rpc Get_Parameters(ActiveXModule_Get_ParametersRequest) returns (ActiveXModule_Get_ParametersResponse);
  
  
}
message ActiveXModuleInstance {
  // Specifies the handle of the ActiveXModule instance in the server.
  string id = 1;
}

message ActiveXParametersInstance {
  // Specifies the handle of the ActiveXParameters instance in the server.
  string id = 1;
}
message ActiveXModule_AsModuleRequest {
  // The id of the ActiveXModule object.
  ActiveXModuleInstance instance = 1;
}

message ActiveXModule_AsModuleResponse {
  // The return type of the Module object.
  ModuleInstance returnValue = 1;
}

message ActiveXModule_LoadMemberInfoRequest {
  // The id of the ActiveXModule object.
  ActiveXModuleInstance instance = 1;
  // Specifies whether to reset the ActiveXParameter.ValueExpr property of existing parameter values when loading a new prototype.
  bool discardParameterValues = 2;
}

message ActiveXModule_LoadMemberInfoResponse {
  // Returns a value that indicates whether the member information of the module was loaded. This method usually returns True.
  bool returnValue = 1;
}

message ActiveXModule_ReloadServerRequest {
  // The id of the ActiveXModule object.
  ActiveXModuleInstance instance = 1;
}

message ActiveXModule_ReloadServerResponse {
  // Returns True if the ActiveXModule updates the type library information.
  // 
  bool returnValue = 1;
}

message ActiveXModule_Set_ActiveXReferenceExprRequest {
  // The id of the ActiveXModule object.
  ActiveXModuleInstance instance = 1;
  // Specifies a variable or property using the ActiveX Reference type.
  string propertyValue = 2;
}

message ActiveXModule_Set_ActiveXReferenceExprResponse {
}

message ActiveXModule_Get_ActiveXReferenceExprRequest {
  // The id of the ActiveXModule object.
  ActiveXModuleInstance instance = 1;
}

message ActiveXModule_Get_ActiveXReferenceExprResponse {
  // Specifies a variable or property using the ActiveX Reference type.
  string returnValue = 1;
}

message ActiveXModule_Set_ServerIdRequest {
  // The id of the ActiveXModule object.
  ActiveXModuleInstance instance = 1;
  // Specifies the name of the ActiveX Automation server the module uses.
  string propertyValue = 2;
}

message ActiveXModule_Set_ServerIdResponse {
}

message ActiveXModule_Get_ServerIdRequest {
  // The id of the ActiveXModule object.
  ActiveXModuleInstance instance = 1;
}

message ActiveXModule_Get_ServerIdResponse {
  // The name of the server.
  string returnValue = 1;
}

message ActiveXModule_Set_CoClassNameRequest {
  // The id of the ActiveXModule object.
  ActiveXModuleInstance instance = 1;
  // Specifies the name of the server class the module uses when it creates an object of the class.
  string propertyValue = 2;
}

message ActiveXModule_Set_CoClassNameResponse {
}

message ActiveXModule_Get_CoClassNameRequest {
  // The id of the ActiveXModule object.
  ActiveXModuleInstance instance = 1;
}

message ActiveXModule_Get_CoClassNameResponse {
  // The name of the class object.
  string returnValue = 1;
}

message ActiveXModule_Set_InterfaceNameRequest {
  // The id of the ActiveXModule object.
  ActiveXModuleInstance instance = 1;
  // Specifies the name of the interface the module uses when it invokes a server object.
  string propertyValue = 2;
}

message ActiveXModule_Set_InterfaceNameResponse {
}

message ActiveXModule_Get_InterfaceNameRequest {
  // The id of the ActiveXModule object.
  ActiveXModuleInstance instance = 1;
}

message ActiveXModule_Get_InterfaceNameResponse {
  // The name of the interface.
  string returnValue = 1;
}

message ActiveXModule_Set_CreateOptionRequest {
  // The id of the ActiveXModule object.
  ActiveXModuleInstance instance = 1;
  // Specifies how a module creates a new instance of the specified object class when it executes.
  ActiveXModuleCreateOptions propertyValue = 2;
}

message ActiveXModule_Set_CreateOptionResponse {
}

message ActiveXModule_Get_CreateOptionRequest {
  // The id of the ActiveXModule object.
  ActiveXModuleInstance instance = 1;
}

message ActiveXModule_Get_CreateOptionResponse {
  // Specifies how a module creates a new instance of the specified object class when it executes.
  ActiveXModuleCreateOptions returnValue = 1;
}

message ActiveXModule_Set_UseStepLoadOptionsRequest {
  // The id of the ActiveXModule object.
  ActiveXModuleInstance instance = 1;
  // Controls the lifetime of an object that the module creates. If this property is False, the module creates the object when it begins executing. The module then releases its internal reference to the object when it completes executing. If this property is True, the module creates the object when the step loads according to the Step.ModuleLoadOption property and then holds an internal reference to the object until the step unloads according to the Step.ModuleUnloadOption property.
  bool propertyValue = 2;
}

message ActiveXModule_Set_UseStepLoadOptionsResponse {
}

message ActiveXModule_Get_UseStepLoadOptionsRequest {
  // The id of the ActiveXModule object.
  ActiveXModuleInstance instance = 1;
}

message ActiveXModule_Get_UseStepLoadOptionsResponse {
  // Controls the lifetime of an object that the module creates. If this property is False, the module creates the object when it begins executing. The module then releases its internal reference to the object when it completes executing. If this property is True, the module creates the object when the step loads according to the Step.ModuleLoadOption property and then holds an internal reference to the object until the step unloads according to the Step.ModuleUnloadOption property.
  bool returnValue = 1;
}

message ActiveXModule_Set_RemoteHostRequest {
  // The id of the ActiveXModule object.
  ActiveXModuleInstance instance = 1;
  // Specifies a remote system on which to create the object. Set the ActiveXModule.SpecifyHostByExpression property to True if the value of RemoteHost contains an expression. Otherwise, set the ActiveXModule.SpecifyHostByExpression property to False to indicate that this property contains a literal value.
  string propertyValue = 2;
}

message ActiveXModule_Set_RemoteHostResponse {
}

message ActiveXModule_Get_RemoteHostRequest {
  // The id of the ActiveXModule object.
  ActiveXModuleInstance instance = 1;
}

message ActiveXModule_Get_RemoteHostResponse {
  // Specifies the name of the remote system.
  string returnValue = 1;
}

message ActiveXModule_Set_SpecifyHostByExpressionRequest {
  // The id of the ActiveXModule object.
  ActiveXModuleInstance instance = 1;
  // Specifies if the ActiveXModule.RemoteHost property contains an expression the module evaluates at run time to determine the name of the remote host. Otherwise, the ActiveXModule.RemoteHost property contains a literal value.
  bool propertyValue = 2;
}

message ActiveXModule_Set_SpecifyHostByExpressionResponse {
}

message ActiveXModule_Get_SpecifyHostByExpressionRequest {
  // The id of the ActiveXModule object.
  ActiveXModuleInstance instance = 1;
}

message ActiveXModule_Get_SpecifyHostByExpressionResponse {
  // Specifies if the ActiveXModule.RemoteHost property contains an expression the module evaluates at run time to determine the name of the remote host. Otherwise, the ActiveXModule.RemoteHost property contains a literal value.
  bool returnValue = 1;
}

message ActiveXModule_Set_FilePathRequest {
  // The id of the ActiveXModule object.
  ActiveXModuleInstance instance = 1;
  // When the ActiveXModule.CreateOption property specifies ActiveXCreate_FromFile, this property specifies the path of the file from which the module loads the object and obtains a reference.
  string propertyValue = 2;
}

message ActiveXModule_Set_FilePathResponse {
}

message ActiveXModule_Get_FilePathRequest {
  // The id of the ActiveXModule object.
  ActiveXModuleInstance instance = 1;
}

message ActiveXModule_Get_FilePathResponse {
  // The path of the file from which to load the object.
  string returnValue = 1;
}

message ActiveXModule_Set_MemberTypeRequest {
  // The id of the ActiveXModule object.
  ActiveXModuleInstance instance = 1;
  // Specifies whether the module calls a method or accesses a property.
  ActiveXModuleMemberTypes propertyValue = 2;
}

message ActiveXModule_Set_MemberTypeResponse {
}

message ActiveXModule_Get_MemberTypeRequest {
  // The id of the ActiveXModule object.
  ActiveXModuleInstance instance = 1;
}

message ActiveXModule_Get_MemberTypeResponse {
  // Specifies whether the module calls a method or accesses a property.
  ActiveXModuleMemberTypes returnValue = 1;
}

message ActiveXModule_Set_MemberNameRequest {
  // The id of the ActiveXModule object.
  ActiveXModuleInstance instance = 1;
  // Specifies the name of the class method to invoke or the class property to access.
  string propertyValue = 2;
}

message ActiveXModule_Set_MemberNameResponse {
}

message ActiveXModule_Get_MemberNameRequest {
  // The id of the ActiveXModule object.
  ActiveXModuleInstance instance = 1;
}

message ActiveXModule_Get_MemberNameResponse {
  // The name of the method or property.
  string returnValue = 1;
}

message ActiveXModule_Get_ParametersRequest {
  // The id of the ActiveXModule object.
  ActiveXModuleInstance instance = 1;
}

message ActiveXModule_Get_ParametersResponse {
  // Collection of parameters.
  ActiveXParametersInstance returnValue = 1;
}

// ActiveXParameters
//
// Use objects from the ActiveXParameters class to configure and obtain parameters for a module that uses the ActiveX/COM Adapter. Use the ActiveXModule.Parameters property to obtain the collection of parameters for a module.
//
service ActiveXParameters {
  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // ActiveXParameters_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ActiveXParametersInstance - The id of the ActiveXParameters object.
  //    - index: int32 - Specifies the zero-based index of the parameter to retrieve.
  //
  // ActiveXParameters_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: ActiveXParameterInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(ActiveXParameters_Get_ItemRequest) returns (ActiveXParameters_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // ActiveXParameters_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXParametersInstance - The id of the ActiveXParameters object.
  //
  // ActiveXParameters_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(ActiveXParameters_Get_CountRequest) returns (ActiveXParameters_Get_CountResponse);
  
  
}
message ActiveXParameterInstance {
  // Specifies the handle of the ActiveXParameter instance in the server.
  string id = 1;
}
message ActiveXParameters_Get_ItemRequest {
  // The id of the ActiveXParameters object.
  ActiveXParametersInstance instance = 1;
  // Specifies the zero-based index of the parameter to retrieve.
  optional int32 index = 2;
}

message ActiveXParameters_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  ActiveXParameterInstance returnValue = 1;
}

message ActiveXParameters_Get_CountRequest {
  // The id of the ActiveXParameters object.
  ActiveXParametersInstance instance = 1;
}

message ActiveXParameters_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// ActiveXParameter
//
// Use objects from the ActiveXParameter class to configure and obtain parameter-specific information for an item in the ActiveXParameters collection class.
//
service ActiveXParameter {
  // Method: AsPropertyObject
  //
  // Returns the underlying PropertyObject that represents the ActiveXParameter object.
  //
  // Use the PropertyObject to modify, add, or remove custom properties of the object.
  //
  // ActiveXParameter_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXParameterInstance - The id of the ActiveXParameter object.
  //
  // ActiveXParameter_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(ActiveXParameter_AsPropertyObjectRequest) returns (ActiveXParameter_AsPropertyObjectResponse);
  
  
  // Method: GetEnumValues
  //
  // Returns the enumeration constants for a parameter that is an enumeration.
  //
  // The property objects in the array that this method returns have a name and value that corresponds to the name and value of the enumeration constant.
  // Pass the return value of this method as the additionalConstants parameter of Expression.ValidateEvaluationType when checking the ActiveXParameter.ValueExpr property for errors.
  // 
  // If you are using an ExpressionEdit control to specify the ActiveXParameter.ValueExpr property, pass the return value of this method to ExpressionEdit.SetAdditionalEvaluationConstants to direct the ExpressionEdit control to recognize the enumeration constants.
  //
  // ActiveXParameter_GetEnumValuesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXParameterInstance - The id of the ActiveXParameter object.
  //
  // ActiveXParameter_GetEnumValuesResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated PropertyObjectInstance - Returns an array of property objects where each property object represents an enumeration value. 
  //
  rpc GetEnumValues(ActiveXParameter_GetEnumValuesRequest) returns (ActiveXParameter_GetEnumValuesResponse);
  
  
  // Method: IsParameterMappingInvalid
  //
  // Indicates if the TestStand enumeration data type of the argument conflicts with the definition of the corresponding enum parameter in the code module.
  //
  // The primary purpose of this method is to support error reporting. Therefore, cases where the mapping is not well defined, for example when the argument expression is empty, are not considered invalid. If an empty expression is considered an error condition, the application must check for it separately.
  // This method does not load the specified assembly. The method relies on the type information stored for the parameter when the module was last specified.
  // 
  //
  // ActiveXParameter_IsParameterMappingInvalidRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXParameterInstance - The id of the ActiveXParameter object.
  //
  // ActiveXParameter_IsParameterMappingInvalidResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns true if the parameter in the code module is an enum, the argument expression is valid and non-empty, and the mapping of the argument to the parameter in the code module is invalid. Returns false otherwise. 
  //    - reasonNotValid: strin - If the mapping is invalid, reasonNotValid contains an error message explaining why the type definitions do not match. If the mapping is valid, reasonNotValid is set to an empty string.
  //
  rpc IsParameterMappingInvalid(ActiveXParameter_IsParameterMappingInvalidRequest) returns (ActiveXParameter_IsParameterMappingInvalidResponse);
  
  

  // Property: ValueExpr
  //
  // Specifies an expression defining the argument to pass as the parameter when calling the member.
  //
  // ActiveXParameter_Set_ValueExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXParameterInstance - The id of the ActiveXParameter object.
  //    - propertyValue: string - Specifies an expression defining the argument to pass as the parameter when calling the member. 
  //
  // ActiveXParameter_Set_ValueExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ActiveXParameter_Get_ValueExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXParameterInstance - The id of the ActiveXParameter object.
  //
  // ActiveXParameter_Get_ValueExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies an expression defining the argument to pass as the parameter when calling the member. 
  //
  rpc Set_ValueExpr(ActiveXParameter_Set_ValueExprRequest) returns (ActiveXParameter_Set_ValueExprResponse);
  rpc Get_ValueExpr(ActiveXParameter_Get_ValueExprRequest) returns (ActiveXParameter_Get_ValueExprResponse);
  
  
  // Property: ParameterName
  //
  // Returns the name of the parameter.
  //
  // ActiveXParameter_Get_ParameterNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXParameterInstance - The id of the ActiveXParameter object.
  //
  // ActiveXParameter_Get_ParameterNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the parameter. 
  //
  rpc Get_ParameterName(ActiveXParameter_Get_ParameterNameRequest) returns (ActiveXParameter_Get_ParameterNameResponse);
  
  
  // Property: Type
  //
  // Returns the ActiveX data type of the parameter.
  //
  // The standard ActiveX Automation VARTYPE enumeration defines the ActiveX parameter types.
  //
  // ActiveXParameter_Get_TypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXParameterInstance - The id of the ActiveXParameter object.
  //
  // ActiveXParameter_Get_TypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Returns the ActiveX data type of the parameter. 
  //
  rpc Get_Type(ActiveXParameter_Get_TypeRequest) returns (ActiveXParameter_Get_TypeResponse);
  
  
  // Property: DisplayType
  //
  // Returns a localized string that describes the ActiveX data type for the parameter.
  //
  // ActiveXParameter_Get_DisplayTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXParameterInstance - The id of the ActiveXParameter object.
  //
  // ActiveXParameter_Get_DisplayTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns a localized string that describes the ActiveX data type for the parameter. 
  //
  rpc Get_DisplayType(ActiveXParameter_Get_DisplayTypeRequest) returns (ActiveXParameter_Get_DisplayTypeResponse);
  
  
  // Property: Direction
  //
  // Returns a value that indicates whether the parameter is input, output, or both. Refer to ActiveXParameterDirections for all the possible values.
  //
  // For input parameters that have default values, optional input parameters, and output parameters, you can leave the ActiveXParameter.ValueExpr property empty. Otherwise, you must specify the name of a variable, parameter, or property.
  //
  // ActiveXParameter_Get_DirectionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXParameterInstance - The id of the ActiveXParameter object.
  //
  // ActiveXParameter_Get_DirectionResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a value that indicates whether the parameter is input, output, or both. Refer to ActiveXParameterDirections for all the possible values. 
  //
  rpc Get_Direction(ActiveXParameter_Get_DirectionRequest) returns (ActiveXParameter_Get_DirectionResponse);
  
  
  // Property: UseDefault
  //
  // Specifies that the parameter must use the default value when available.
  //
  // ActiveXParameter_Set_UseDefaultRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXParameterInstance - The id of the ActiveXParameter object.
  //    - propertyValue: bool - Specifies that the parameter must use the default value when available. 
  //
  // ActiveXParameter_Set_UseDefaultResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ActiveXParameter_Get_UseDefaultRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXParameterInstance - The id of the ActiveXParameter object.
  //
  // ActiveXParameter_Get_UseDefaultResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies that the parameter must use the default value when available. 
  //
  rpc Set_UseDefault(ActiveXParameter_Set_UseDefaultRequest) returns (ActiveXParameter_Set_UseDefaultResponse);
  rpc Get_UseDefault(ActiveXParameter_Get_UseDefaultRequest) returns (ActiveXParameter_Get_UseDefaultResponse);
  
  
  // Property: UserData
  //
  // Holds a data item you associate with the parameter object.
  //
  // Typically, you do not use this property.
  //
  // ActiveXParameter_Get_UserDataRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXParameterInstance - The id of the ActiveXParameter object.
  //
  // ActiveXParameter_Get_UserDataResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Holds a data item you associate with the parameter object. 
  //
  rpc Get_UserData(ActiveXParameter_Get_UserDataRequest) returns (ActiveXParameter_Get_UserDataResponse);
  
  
  // Property: ValidEvaluationTypes
  //
  // Returns the valid types that this parameter can evaluate to.
  //
  // You can pass the value of this property to the validEvaluationTypes parameter of the Expression.ValidateEvaluationType method to determine whether the value of the ActiveXParameter.ValueExpr property contains errors.
  // If you are using an ExpressionEdit control to display the value of the ActiveXParameter.ValueExpr property, pass the value of this property to the ExpressionEdit.SetValidEvaluationTypes method.
  //
  // ActiveXParameter_Get_ValidEvaluationTypesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXParameterInstance - The id of the ActiveXParameter object.
  //
  // ActiveXParameter_Get_ValidEvaluationTypesResponse - The response message from the server. It provides the return value.
  //    - returnValue: EvaluationTypesInstance - Returns the valid types that this parameter can evaluate to. 
  //
  rpc Get_ValidEvaluationTypes(ActiveXParameter_Get_ValidEvaluationTypesRequest) returns (ActiveXParameter_Get_ValidEvaluationTypesResponse);
  
  
  // Property: EnumTypeName
  //
  // Returns the name of the enumeration type for a parameter that is an enumeration.
  //
  // ActiveXParameter_Get_EnumTypeNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXParameterInstance - The id of the ActiveXParameter object.
  //
  // ActiveXParameter_Get_EnumTypeNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the enumeration type for a parameter that is an enumeration. 
  //
  rpc Get_EnumTypeName(ActiveXParameter_Get_EnumTypeNameRequest) returns (ActiveXParameter_Get_EnumTypeNameResponse);
  
  
  // Property: DefaultValue
  //
  // Returns a display string that represents the default value defined for the parameter.
  //
  // ActiveXParameter_Get_DefaultValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXParameterInstance - The id of the ActiveXParameter object.
  //
  // ActiveXParameter_Get_DefaultValueResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns a display string that represents the default value defined for the parameter. 
  //
  rpc Get_DefaultValue(ActiveXParameter_Get_DefaultValueRequest) returns (ActiveXParameter_Get_DefaultValueResponse);
  
  
  // Property: IsOptional
  //
  // This property is True if the parameter has the COM optional attribute.
  //
  // ActiveXParameter_Get_IsOptionalRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXParameterInstance - The id of the ActiveXParameter object.
  //
  // ActiveXParameter_Get_IsOptionalResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - This property is True if the parameter has the COM optional attribute. 
  //
  rpc Get_IsOptional(ActiveXParameter_Get_IsOptionalRequest) returns (ActiveXParameter_Get_IsOptionalResponse);
  
  
  // Property: ValueExprIsIgnored
  //
  // Use this property to determine whether the ActiveX Adapter ignores the argument value expression when it calls the module. The adapter ignores the argument value expression for parameters that use default values.
  //
  // ActiveXParameter_Get_ValueExprIsIgnoredRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXParameterInstance - The id of the ActiveXParameter object.
  //
  // ActiveXParameter_Get_ValueExprIsIgnoredResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Use this property to determine whether the ActiveX Adapter ignores the argument value expression when it calls the module. The adapter ignores the argument value expression for parameters that use default values. 
  //
  rpc Get_ValueExprIsIgnored(ActiveXParameter_Get_ValueExprIsIgnoredRequest) returns (ActiveXParameter_Get_ValueExprIsIgnoredResponse);
  
  
  // Property: ValueExprIsOptional
  //
  // Use this property to determine whether the argument value expression is optional. You do not have to specify an optional value expression to call the module successfully. Value expressions for return values, output parameters, and parameters with the COM optional attribute are optional.
  //
  // ActiveXParameter_Get_ValueExprIsOptionalRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ActiveXParameterInstance - The id of the ActiveXParameter object.
  //
  // ActiveXParameter_Get_ValueExprIsOptionalResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Use this property to determine whether the argument value expression is optional. You do not have to specify an optional value expression to call the module successfully. Value expressions for return values, output parameters, and parameters with the COM optional attribute are optional. 
  //
  rpc Get_ValueExprIsOptional(ActiveXParameter_Get_ValueExprIsOptionalRequest) returns (ActiveXParameter_Get_ValueExprIsOptionalResponse);
  
  
}
message ActiveXParameter_AsPropertyObjectRequest {
  // The id of the ActiveXParameter object.
  ActiveXParameterInstance instance = 1;
}

message ActiveXParameter_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message ActiveXParameter_GetEnumValuesRequest {
  // The id of the ActiveXParameter object.
  ActiveXParameterInstance instance = 1;
}

message ActiveXParameter_GetEnumValuesResponse {
  // Returns an array of property objects where each property object represents an enumeration value.
  repeated PropertyObjectInstance returnValue = 1;
}

message ActiveXParameter_IsParameterMappingInvalidRequest {
  // The id of the ActiveXParameter object.
  ActiveXParameterInstance instance = 1;
}

message ActiveXParameter_IsParameterMappingInvalidResponse {
  // Returns true if the parameter in the code module is an enum, the argument expression is valid and non-empty, and the mapping of the argument to the parameter in the code module is invalid. Returns false otherwise.
  bool returnValue = 1;
  // If the mapping is invalid, reasonNotValid contains an error message explaining why the type definitions do not match. If the mapping is valid, reasonNotValid is set to an empty string.
  string reasonNotValid = 2;
}

message ActiveXParameter_Set_ValueExprRequest {
  // The id of the ActiveXParameter object.
  ActiveXParameterInstance instance = 1;
  // Specifies an expression defining the argument to pass as the parameter when calling the member.
  string propertyValue = 2;
}

message ActiveXParameter_Set_ValueExprResponse {
}

message ActiveXParameter_Get_ValueExprRequest {
  // The id of the ActiveXParameter object.
  ActiveXParameterInstance instance = 1;
}

message ActiveXParameter_Get_ValueExprResponse {
  // Specifies an expression defining the argument to pass as the parameter when calling the member.
  string returnValue = 1;
}

message ActiveXParameter_Get_ParameterNameRequest {
  // The id of the ActiveXParameter object.
  ActiveXParameterInstance instance = 1;
}

message ActiveXParameter_Get_ParameterNameResponse {
  // The name of the parameter.
  string returnValue = 1;
}

message ActiveXParameter_Get_TypeRequest {
  // The id of the ActiveXParameter object.
  ActiveXParameterInstance instance = 1;
}

message ActiveXParameter_Get_TypeResponse {
  // The data type of the parameter.
  uint32 returnValue = 1;
}

message ActiveXParameter_Get_DisplayTypeRequest {
  // The id of the ActiveXParameter object.
  ActiveXParameterInstance instance = 1;
}

message ActiveXParameter_Get_DisplayTypeResponse {
  // The display value of the data type of the parameter.
  string returnValue = 1;
}

message ActiveXParameter_Get_DirectionRequest {
  // The id of the ActiveXParameter object.
  ActiveXParameterInstance instance = 1;
}

message ActiveXParameter_Get_DirectionResponse {
  // Returns a value that indicates whether the parameter is input, output, or both. Refer to ActiveXParameterDirections for all the possible values.
  ActiveXParameterDirections returnValue = 1;
}

message ActiveXParameter_Set_UseDefaultRequest {
  // The id of the ActiveXParameter object.
  ActiveXParameterInstance instance = 1;
  // Specifies that the parameter must use the default value when available.
  bool propertyValue = 2;
}

message ActiveXParameter_Set_UseDefaultResponse {
}

message ActiveXParameter_Get_UseDefaultRequest {
  // The id of the ActiveXParameter object.
  ActiveXParameterInstance instance = 1;
}

message ActiveXParameter_Get_UseDefaultResponse {
  // Specifies that the parameter must use the default value when available.
  bool returnValue = 1;
}

message ActiveXParameter_Get_UserDataRequest {
  // The id of the ActiveXParameter object.
  ActiveXParameterInstance instance = 1;
}

message ActiveXParameter_Get_UserDataResponse {
  // Holds a data item you associate with the parameter object.
  PropertyObjectInstance returnValue = 1;
}

message ActiveXParameter_Get_ValidEvaluationTypesRequest {
  // The id of the ActiveXParameter object.
  ActiveXParameterInstance instance = 1;
}

message ActiveXParameter_Get_ValidEvaluationTypesResponse {
  // Returns the valid types that this parameter can evaluate to.
  EvaluationTypesInstance returnValue = 1;
}

message ActiveXParameter_Get_EnumTypeNameRequest {
  // The id of the ActiveXParameter object.
  ActiveXParameterInstance instance = 1;
}

message ActiveXParameter_Get_EnumTypeNameResponse {
  // Returns the name of the enumeration type for a parameter that is an enumeration.
  string returnValue = 1;
}

message ActiveXParameter_Get_DefaultValueRequest {
  // The id of the ActiveXParameter object.
  ActiveXParameterInstance instance = 1;
}

message ActiveXParameter_Get_DefaultValueResponse {
  // Returns a display string that represents the default value defined for the parameter.
  string returnValue = 1;
}

message ActiveXParameter_Get_IsOptionalRequest {
  // The id of the ActiveXParameter object.
  ActiveXParameterInstance instance = 1;
}

message ActiveXParameter_Get_IsOptionalResponse {
  // This property is True if the parameter has the COM optional attribute.
  bool returnValue = 1;
}

message ActiveXParameter_Get_ValueExprIsIgnoredRequest {
  // The id of the ActiveXParameter object.
  ActiveXParameterInstance instance = 1;
}

message ActiveXParameter_Get_ValueExprIsIgnoredResponse {
  // Use this property to determine whether the ActiveX Adapter ignores the argument value expression when it calls the module. The adapter ignores the argument value expression for parameters that use default values.
  bool returnValue = 1;
}

message ActiveXParameter_Get_ValueExprIsOptionalRequest {
  // The id of the ActiveXParameter object.
  ActiveXParameterInstance instance = 1;
}

message ActiveXParameter_Get_ValueExprIsOptionalResponse {
  // Use this property to determine whether the argument value expression is optional. You do not have to specify an optional value expression to call the module successfully. Value expressions for return values, output parameters, and parameters with the COM optional attribute are optional.
  bool returnValue = 1;
}

// HTBasicModule
//
// Use objects from the HTBasicModule class to specify and obtain HTBasic Adapter-specific information about the code module that steps or step type substeps execute. Use the Step.Module property to obtain a reference to an HTBasicModule object. To access the properties and methods of a specific module class, query the Module object for the interface of the module-specific interface you want to acquire.
// Typically, you use this class only when you are writing a sequence editor.
// To access the properties and methods of the Module class, use the HTBasicModule.AsModule method to obtain an object.
//
service HTBasicModule {
  // Method: AsModule
  //
  // Returns the underlying module that represents the HTBasicModule object.
  //
  // Use the module to access properties and methods that are common to all modules.
  //
  // HTBasicModule_AsModuleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: HTBasicModuleInstance - The id of the HTBasicModule object.
  //
  // HTBasicModule_AsModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: ModuleInstance - The return type of the Module object.
  //
  rpc AsModule(HTBasicModule_AsModuleRequest) returns (HTBasicModule_AsModuleResponse);
  
  

  // Property: SubroutineFilePath
  //
  // Specifies the pathname of the code module file that contains the subroutine the step calls. You can specify an absolute or relative pathname for the module file. Relative pathnames are relative to the TestStand search directory paths.
  //
  // HTBasicModule_Set_SubroutineFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: HTBasicModuleInstance - The id of the HTBasicModule object.
  //    - propertyValue: string - Specifies the pathname of the code module file that contains the subroutine the step calls. You can specify an absolute or relative pathname for the module file. Relative pathnames are relative to the TestStand search directory paths. 
  //
  // HTBasicModule_Set_SubroutineFilePathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // HTBasicModule_Get_SubroutineFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: HTBasicModuleInstance - The id of the HTBasicModule object.
  //
  // HTBasicModule_Get_SubroutineFilePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the pathname of the code module file that contains the subroutine the step calls. You can specify an absolute or relative pathname for the module file. Relative pathnames are relative to the TestStand search directory paths. 
  //
  rpc Set_SubroutineFilePath(HTBasicModule_Set_SubroutineFilePathRequest) returns (HTBasicModule_Set_SubroutineFilePathResponse);
  rpc Get_SubroutineFilePath(HTBasicModule_Get_SubroutineFilePathRequest) returns (HTBasicModule_Get_SubroutineFilePathResponse);
  
  
  // Property: SubroutineName
  //
  // Specifies the name of the subroutine the step calls.
  //
  // HTBasicModule_Set_SubroutineNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: HTBasicModuleInstance - The id of the HTBasicModule object.
  //    - propertyValue: string - Specifies the name of the subroutine the step calls. 
  //
  // HTBasicModule_Set_SubroutineNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // HTBasicModule_Get_SubroutineNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: HTBasicModuleInstance - The id of the HTBasicModule object.
  //
  // HTBasicModule_Get_SubroutineNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the name of the subroutine the step calls. 
  //
  rpc Set_SubroutineName(HTBasicModule_Set_SubroutineNameRequest) returns (HTBasicModule_Set_SubroutineNameResponse);
  rpc Get_SubroutineName(HTBasicModule_Get_SubroutineNameRequest) returns (HTBasicModule_Get_SubroutineNameResponse);
  
  
  // Property: ShowHTBasicApp
  //
  // Specifies if the HTBasic Adapter activates the HTBasic application when it executes a step that calls a HTBasic subroutine.
  //
  // HTBasicModule_Set_ShowHTBasicAppRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: HTBasicModuleInstance - The id of the HTBasicModule object.
  //    - propertyValue: bool - Specifies if the HTBasic Adapter activates the HTBasic application when it executes a step that calls a HTBasic subroutine. 
  //
  // HTBasicModule_Set_ShowHTBasicAppResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // HTBasicModule_Get_ShowHTBasicAppRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: HTBasicModuleInstance - The id of the HTBasicModule object.
  //
  // HTBasicModule_Get_ShowHTBasicAppResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if the HTBasic Adapter activates the HTBasic application when it executes a step that calls a HTBasic subroutine. 
  //
  rpc Set_ShowHTBasicApp(HTBasicModule_Set_ShowHTBasicAppRequest) returns (HTBasicModule_Set_ShowHTBasicAppResponse);
  rpc Get_ShowHTBasicApp(HTBasicModule_Get_ShowHTBasicAppRequest) returns (HTBasicModule_Get_ShowHTBasicAppResponse);
  
  
  // Property: WorkingDirectory
  //
  // Specifies whether the adapter sets the working directory of the HTBasic server before invoking the subroutine of the module.
  //
  // Set this property if the test code assumes a particular working directory path. The default value of this property is HTBasicWorkingDir_AdapterDefault. If this property has the value HTBasicWorkingDir_Specify, ensure the HTBasicModule.WorkingDirectorySpecifiedPath property contains a path that specifies the desired working directory.
  //
  // HTBasicModule_Set_WorkingDirectoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: HTBasicModuleInstance - The id of the HTBasicModule object.
  //    - propertyValue: HTBasicWorkingDirTypes - Specifies whether the adapter sets the working directory of the HTBasic server before invoking the subroutine of the module. 
  //
  // HTBasicModule_Set_WorkingDirectoryResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // HTBasicModule_Get_WorkingDirectoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: HTBasicModuleInstance - The id of the HTBasicModule object.
  //
  // HTBasicModule_Get_WorkingDirectoryResponse - The response message from the server. It provides the return value.
  //    - returnValue: HTBasicWorkingDirTypes - Specifies whether the adapter sets the working directory of the HTBasic server before invoking the subroutine of the module. 
  //
  rpc Set_WorkingDirectory(HTBasicModule_Set_WorkingDirectoryRequest) returns (HTBasicModule_Set_WorkingDirectoryResponse);
  rpc Get_WorkingDirectory(HTBasicModule_Get_WorkingDirectoryRequest) returns (HTBasicModule_Get_WorkingDirectoryResponse);
  
  
  // Property: WorkingDirectorySpecifiedPath
  //
  // Specifies a working directory to set for the HTBasic server before invoking the subroutine of the module.
  //
  // The module ignores this property unless the value of HTBasicModule.WorkingDirectory is HTBasicWorkingDir_Specify.
  //
  // HTBasicModule_Set_WorkingDirectorySpecifiedPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: HTBasicModuleInstance - The id of the HTBasicModule object.
  //    - propertyValue: string - Specifies a working directory to set for the HTBasic server before invoking the subroutine of the module. 
  //
  // HTBasicModule_Set_WorkingDirectorySpecifiedPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // HTBasicModule_Get_WorkingDirectorySpecifiedPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: HTBasicModuleInstance - The id of the HTBasicModule object.
  //
  // HTBasicModule_Get_WorkingDirectorySpecifiedPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies a working directory to set for the HTBasic server before invoking the subroutine of the module. 
  //
  rpc Set_WorkingDirectorySpecifiedPath(HTBasicModule_Set_WorkingDirectorySpecifiedPathRequest) returns (HTBasicModule_Set_WorkingDirectorySpecifiedPathResponse);
  rpc Get_WorkingDirectorySpecifiedPath(HTBasicModule_Get_WorkingDirectorySpecifiedPathRequest) returns (HTBasicModule_Get_WorkingDirectorySpecifiedPathResponse);
  
  
}
message HTBasicModuleInstance {
  // Specifies the handle of the HTBasicModule instance in the server.
  string id = 1;
}
message HTBasicModule_AsModuleRequest {
  // The id of the HTBasicModule object.
  HTBasicModuleInstance instance = 1;
}

message HTBasicModule_AsModuleResponse {
  // The return type of the Module object.
  ModuleInstance returnValue = 1;
}

message HTBasicModule_Set_SubroutineFilePathRequest {
  // The id of the HTBasicModule object.
  HTBasicModuleInstance instance = 1;
  // Specifies the pathname of the code module file that contains the subroutine the step calls. You can specify an absolute or relative pathname for the module file. Relative pathnames are relative to the TestStand search directory paths.
  string propertyValue = 2;
}

message HTBasicModule_Set_SubroutineFilePathResponse {
}

message HTBasicModule_Get_SubroutineFilePathRequest {
  // The id of the HTBasicModule object.
  HTBasicModuleInstance instance = 1;
}

message HTBasicModule_Get_SubroutineFilePathResponse {
  // Specifies the pathname of the code module file that contains the subroutine the step calls. You can specify an absolute or relative pathname for the module file. Relative pathnames are relative to the TestStand search directory paths.
  string returnValue = 1;
}

message HTBasicModule_Set_SubroutineNameRequest {
  // The id of the HTBasicModule object.
  HTBasicModuleInstance instance = 1;
  // Specifies the name of the subroutine the step calls.
  string propertyValue = 2;
}

message HTBasicModule_Set_SubroutineNameResponse {
}

message HTBasicModule_Get_SubroutineNameRequest {
  // The id of the HTBasicModule object.
  HTBasicModuleInstance instance = 1;
}

message HTBasicModule_Get_SubroutineNameResponse {
  // The subroutine name.
  string returnValue = 1;
}

message HTBasicModule_Set_ShowHTBasicAppRequest {
  // The id of the HTBasicModule object.
  HTBasicModuleInstance instance = 1;
  // Specifies if the HTBasic Adapter activates the HTBasic application when it executes a step that calls a HTBasic subroutine.
  bool propertyValue = 2;
}

message HTBasicModule_Set_ShowHTBasicAppResponse {
}

message HTBasicModule_Get_ShowHTBasicAppRequest {
  // The id of the HTBasicModule object.
  HTBasicModuleInstance instance = 1;
}

message HTBasicModule_Get_ShowHTBasicAppResponse {
  // Specifies if the HTBasic Adapter activates the HTBasic application when it executes a step that calls a HTBasic subroutine.
  bool returnValue = 1;
}

message HTBasicModule_Set_WorkingDirectoryRequest {
  // The id of the HTBasicModule object.
  HTBasicModuleInstance instance = 1;
  // Specifies whether the adapter sets the working directory of the HTBasic server before invoking the subroutine of the module.
  HTBasicWorkingDirTypes propertyValue = 2;
}

message HTBasicModule_Set_WorkingDirectoryResponse {
}

message HTBasicModule_Get_WorkingDirectoryRequest {
  // The id of the HTBasicModule object.
  HTBasicModuleInstance instance = 1;
}

message HTBasicModule_Get_WorkingDirectoryResponse {
  // Specifies whether the adapter sets the working directory of the HTBasic server before invoking the subroutine of the module.
  HTBasicWorkingDirTypes returnValue = 1;
}

message HTBasicModule_Set_WorkingDirectorySpecifiedPathRequest {
  // The id of the HTBasicModule object.
  HTBasicModuleInstance instance = 1;
  // Specifies a working directory to set for the HTBasic server before invoking the subroutine of the module.
  string propertyValue = 2;
}

message HTBasicModule_Set_WorkingDirectorySpecifiedPathResponse {
}

message HTBasicModule_Get_WorkingDirectorySpecifiedPathRequest {
  // The id of the HTBasicModule object.
  HTBasicModuleInstance instance = 1;
}

message HTBasicModule_Get_WorkingDirectorySpecifiedPathResponse {
  // The desired working directory.
  string returnValue = 1;
}

// SequenceCallModule
//
// Use objects from the SequenceCallModule class to specify and obtain Sequence Adapter-specific information about the code module that steps or step type substeps execute. Use the Step.Module property to obtain a reference to a SequenceCallModule object. To access the properties and methods of a specific module class, query the Module object for the interface of the module-specific interface you want to acquire.
// Typically, you use this class only when you are writing a sequence editor.
// To access the properties and methods of the Module class, use the AsModule method to obtain an object.
// You can use the Module.LoadPrototype method to load the prototype for the module that the step specifies.
//
service SequenceCallModule {
  // Method: AsModule
  //
  // Returns the underlying Module object that represents the SequenceCallModule object.
  //
  // Use the Module object to access properties and methods common to all modules.
  //
  // SequenceCallModule_AsModuleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //
  // SequenceCallModule_AsModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: ModuleInstance - The return type of the Module object.
  //
  rpc AsModule(SequenceCallModule_AsModuleRequest) returns (SequenceCallModule_AsModuleResponse);
  
  
  // Method: LoadParameters
  //
  // Note: This method is obsolete. Use the Module.LoadPrototype method instead.
  //
  // Loads parameter information from the sequence file and sequence of the module or a specific sequence file and sequence.
  // If SequenceCallModule.UseSequenceParameterPrototype is True and SequenceCallModule.SpecifyByExpression is False, this method ignores the parameters and loads the parameter information from the sequence the SequenceCallModule.UseCurrentFile, SequenceCallModule.SequenceFilePath, and SequenceCallModule.SequenceName properties specify. Otherwise, this method loads the parameter information from the sequence the parameters of this method specify.
  // You must call this method or the SequenceCallModule.LoadParametersFromSequence method before accessing the SequenceCallModule.Parameters property of the module.
  //
  // SequenceCallModule_LoadParametersRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //    - useCurrentSeqFile: bool - Specifies to use the sequence file and sequence of the sequence call.
  //    - seqFilePath: string - Specifies a specific sequence file when the useCurrentSeqFile parameter is False.
  //    - seqName: string - Specifies a specific sequence name.
  //
  // SequenceCallModule_LoadParametersResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc LoadParameters(SequenceCallModule_LoadParametersRequest) returns (SequenceCallModule_LoadParametersResponse);
  
  
  // Method: LoadParametersFromSequence
  //
  // Note: This property is obsolete. Use the SequenceCallModule.LoadPrototypeFromSequence method instead.
  //
  // Loads parameter information from the specified sequence. If the SequenceCallModule.UseSequenceParameterPrototype property is True, this method ignores the parameters and loads the parameter information from the sequence the sequence parameter of this method specifies.
  // You must call the SequenceCallModule.LoadParameters method or this method before accessing the SequenceCallModule.Parameters property of the module.
  //
  // SequenceCallModule_LoadParametersFromSequenceRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //    - sequence: SequenceInstance - Specifies the sequence that contains the prototype to load.
  //
  // SequenceCallModule_LoadParametersFromSequenceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc LoadParametersFromSequence(SequenceCallModule_LoadParametersFromSequenceRequest) returns (SequenceCallModule_LoadParametersFromSequenceResponse);
  
  
  // Method: LoadPrototypeFromSequence
  //
  // Sets the prototype of the module to the prototype specified by a sequence.
  //
  // Use this method to set the parameters of the SequenceCallModule when the SequenceCallModule.UseSequenceParameterPrototype property is False or if the SequenceCallModule.SpecifyByExpression property is True.
  //
  // SequenceCallModule_LoadPrototypeFromSequenceRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //    - sequence: SequenceInstance - Specifies the sequence with the prototype to use.
  //    - options: int32 - Specify one or more LoadPrototypeOptions constants. Use the bitwise-OR operator to specify multiple flags.
  //
  // SequenceCallModule_LoadPrototypeFromSequenceResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the step was modified. 
  //
  rpc LoadPrototypeFromSequence(SequenceCallModule_LoadPrototypeFromSequenceRequest) returns (SequenceCallModule_LoadPrototypeFromSequenceResponse);
  
  

  // Property: SequenceFilePath
  //
  // Specifies the path of the sequence file that contains the sequence the module calls.
  //
  // You specify an absolute or relative pathname for the file. Relative pathnames are relative to the TestStand search directory paths.
  // You must specify an expression for the file pathname if the SequenceCallModule.SpecifyByExpression property is True. The expression must evaluate to an absolute or relative pathname for the file or a reference to be a SequenceFile object.
  // If you set the SequenceCallModule.UseCurrentFile property to True, TestStand ignores the value of this property.
  //
  // SequenceCallModule_Set_SequenceFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //    - propertyValue: string - Specifies the path of the sequence file that contains the sequence the module calls. 
  //
  // SequenceCallModule_Set_SequenceFilePathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceCallModule_Get_SequenceFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //
  // SequenceCallModule_Get_SequenceFilePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the path of the sequence file that contains the sequence the module calls. 
  //
  rpc Set_SequenceFilePath(SequenceCallModule_Set_SequenceFilePathRequest) returns (SequenceCallModule_Set_SequenceFilePathResponse);
  rpc Get_SequenceFilePath(SequenceCallModule_Get_SequenceFilePathRequest) returns (SequenceCallModule_Get_SequenceFilePathResponse);
  
  
  // Property: SequenceName
  //
  // Specifies the name of the sequence the module calls.
  //
  // You must specify an expression for the file pathname if the SequenceCallModule.SpecifyByExpression property is True.
  //
  // SequenceCallModule_Set_SequenceNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //    - propertyValue: string - Specifies the name of the sequence the module calls. 
  //
  // SequenceCallModule_Set_SequenceNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceCallModule_Get_SequenceNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //
  // SequenceCallModule_Get_SequenceNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the name of the sequence the module calls. 
  //
  rpc Set_SequenceName(SequenceCallModule_Set_SequenceNameRequest) returns (SequenceCallModule_Set_SequenceNameResponse);
  rpc Get_SequenceName(SequenceCallModule_Get_SequenceNameRequest) returns (SequenceCallModule_Get_SequenceNameResponse);
  
  
  // Property: SpecifyByExpression
  //
  // Specifies that the SequenceCallModule.SequenceFilePath, SequenceCallModule.SequenceName, and SequenceCallModule.NewExecutionModelPath properties contain expressions the Sequence Adapter evaluates at run time to determine the actual sequence file path, sequence name, and model file path.
  //
  // SequenceCallModule_Set_SpecifyByExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //    - propertyValue: bool - Specifies that the SequenceCallModule.SequenceFilePath, SequenceCallModule.SequenceName, and SequenceCallModule.NewExecutionModelPath properties contain expressions the Sequence Adapter evaluates at run time to determine the actual sequence file path, sequence name, and model file path. 
  //
  // SequenceCallModule_Set_SpecifyByExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceCallModule_Get_SpecifyByExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //
  // SequenceCallModule_Get_SpecifyByExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies that the SequenceCallModule.SequenceFilePath, SequenceCallModule.SequenceName, and SequenceCallModule.NewExecutionModelPath properties contain expressions the Sequence Adapter evaluates at run time to determine the actual sequence file path, sequence name, and model file path. 
  //
  rpc Set_SpecifyByExpression(SequenceCallModule_Set_SpecifyByExpressionRequest) returns (SequenceCallModule_Set_SpecifyByExpressionResponse);
  rpc Get_SpecifyByExpression(SequenceCallModule_Get_SpecifyByExpressionRequest) returns (SequenceCallModule_Get_SpecifyByExpressionResponse);
  
  
  // Property: UseCurrentFile
  //
  // Specifies that the sequence file of the sequence call contains the sequence the module calls. If you set this property to True, TestStand ignores the value of the SequenceCallModule.SequenceFilePath property.
  //
  // SequenceCallModule_Set_UseCurrentFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //    - propertyValue: bool - Specifies that the sequence file of the sequence call contains the sequence the module calls. If you set this property to True, TestStand ignores the value of the SequenceCallModule.SequenceFilePath property. 
  //
  // SequenceCallModule_Set_UseCurrentFileResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceCallModule_Get_UseCurrentFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //
  // SequenceCallModule_Get_UseCurrentFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies that the sequence file of the sequence call contains the sequence the module calls. If you set this property to True, TestStand ignores the value of the SequenceCallModule.SequenceFilePath property. 
  //
  rpc Set_UseCurrentFile(SequenceCallModule_Set_UseCurrentFileRequest) returns (SequenceCallModule_Set_UseCurrentFileResponse);
  rpc Get_UseCurrentFile(SequenceCallModule_Get_UseCurrentFileRequest) returns (SequenceCallModule_Get_UseCurrentFileResponse);
  
  
  // Property: TraceSetting
  //
  // Specifies to enable or disable tracing for calls to the subsequence.
  //
  // This property corresponds to the Sequence Call Trace Setting control on the Run Options tab of the Step Properties dialog box.
  //
  // SequenceCallModule_Set_TraceSettingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //    - propertyValue: SeqCallTraceSettings - Specifies to enable or disable tracing for calls to the subsequence. 
  //
  // SequenceCallModule_Set_TraceSettingResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceCallModule_Get_TraceSettingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //
  // SequenceCallModule_Get_TraceSettingResponse - The response message from the server. It provides the return value.
  //    - returnValue: SeqCallTraceSettings - Specifies to enable or disable tracing for calls to the subsequence. 
  //
  rpc Set_TraceSetting(SequenceCallModule_Set_TraceSettingRequest) returns (SequenceCallModule_Set_TraceSettingResponse);
  rpc Get_TraceSetting(SequenceCallModule_Get_TraceSettingRequest) returns (SequenceCallModule_Get_TraceSettingResponse);
  
  
  // Property: IgnoreTermination
  //
  // Specifies what happens when the subsequence the module calls causes execution to terminate. If this property is True and TestStand terminates the subsequence, TestStand sets the status of the module step to Terminated but allows the module sequence to proceed normally from the next step. Usually, only one process model file uses this option. This option has no effect when the execution aborts.
  //
  // This property corresponds to the Ignore Termination option on the Run Options tab of the Step Properties dialog box.
  //
  // SequenceCallModule_Set_IgnoreTerminationRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //    - propertyValue: bool - Specifies what happens when the subsequence the module calls causes execution to terminate. If this property is True and TestStand terminates the subsequence, TestStand sets the status of the module step to Terminated but allows the module sequence to proceed normally from the next step. Usually, only one process model file uses this option. This option has no effect when the execution aborts. 
  //
  // SequenceCallModule_Set_IgnoreTerminationResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceCallModule_Get_IgnoreTerminationRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //
  // SequenceCallModule_Get_IgnoreTerminationResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies what happens when the subsequence the module calls causes execution to terminate. If this property is True and TestStand terminates the subsequence, TestStand sets the status of the module step to Terminated but allows the module sequence to proceed normally from the next step. Usually, only one process model file uses this option. This option has no effect when the execution aborts. 
  //
  rpc Set_IgnoreTermination(SequenceCallModule_Set_IgnoreTerminationRequest) returns (SequenceCallModule_Set_IgnoreTerminationResponse);
  rpc Get_IgnoreTermination(SequenceCallModule_Get_IgnoreTerminationRequest) returns (SequenceCallModule_Get_IgnoreTerminationResponse);
  
  
  // Property: UseSequenceParameterPrototype
  //
  // This property affects the behavior of the Module.LoadPrototype method. When this property is True, Module.LoadPrototype loads the parameters of the module from the sequence the SequenceCallModule.UseCurrentFile, SequenceCallModule.SequenceFilePath, and SequenceCallModule.SequenceName properties specify.
  //
  // This property is ignored when the SequenceCallModule.SpecifyByExpression property is True.
  //
  // SequenceCallModule_Set_UseSequenceParameterPrototypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //    - propertyValue: bool - This property affects the behavior of the Module.LoadPrototype method. When this property is True, Module.LoadPrototype loads the parameters of the module from the sequence the SequenceCallModule.UseCurrentFile, SequenceCallModule.SequenceFilePath, and SequenceCallModule.SequenceName properties specify. 
  //
  // SequenceCallModule_Set_UseSequenceParameterPrototypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceCallModule_Get_UseSequenceParameterPrototypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //
  // SequenceCallModule_Get_UseSequenceParameterPrototypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - This property affects the behavior of the Module.LoadPrototype method. When this property is True, Module.LoadPrototype loads the parameters of the module from the sequence the SequenceCallModule.UseCurrentFile, SequenceCallModule.SequenceFilePath, and SequenceCallModule.SequenceName properties specify. 
  //
  rpc Set_UseSequenceParameterPrototype(SequenceCallModule_Set_UseSequenceParameterPrototypeRequest) returns (SequenceCallModule_Set_UseSequenceParameterPrototypeResponse);
  rpc Get_UseSequenceParameterPrototype(SequenceCallModule_Get_UseSequenceParameterPrototypeRequest) returns (SequenceCallModule_Get_UseSequenceParameterPrototypeResponse);
  
  
  // Property: Parameters
  //
  // Returns the SequenceCallParameters collection, which contains a list of the current parameters used as inputs and outputs of the corresponding module.
  //
  // Use the Module.LoadPrototype method to load the parameter information from the sequence file and sequence of the module or a specific sequence file and sequence.
  //
  // SequenceCallModule_Get_ParametersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //
  // SequenceCallModule_Get_ParametersResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceCallParametersInstance - Returns the SequenceCallParameters collection, which contains a list of the current parameters used as inputs and outputs of the corresponding module. 
  //
  rpc Get_Parameters(SequenceCallModule_Get_ParametersRequest) returns (SequenceCallModule_Get_ParametersResponse);
  
  
  // Property: ParameterPrototype
  //
  // Returns a copy of the parameters container from the sequence the module calls.
  //
  // SequenceCallModule_Get_ParameterPrototypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //
  // SequenceCallModule_Get_ParameterPrototypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Returns a copy of the parameters container from the sequence the module calls. 
  //
  rpc Get_ParameterPrototype(SequenceCallModule_Get_ParameterPrototypeRequest) returns (SequenceCallModule_Get_ParameterPrototypeResponse);
  
  
  // Property: MultithreadingAndRemoteExecOption
  //
  // Specifies that the module calls the subsequence in a separate thread, separate execution, or on a remote computer.
  //
  // SequenceCallModule_Set_MultithreadingAndRemoteExecOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //    - propertyValue: SeqCallMultithreadOptions - Specifies that the module calls the subsequence in a separate thread, separate execution, or on a remote computer. 
  //
  // SequenceCallModule_Set_MultithreadingAndRemoteExecOptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceCallModule_Get_MultithreadingAndRemoteExecOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //
  // SequenceCallModule_Get_MultithreadingAndRemoteExecOptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: SeqCallMultithreadOptions - Specifies that the module calls the subsequence in a separate thread, separate execution, or on a remote computer. 
  //
  rpc Set_MultithreadingAndRemoteExecOption(SequenceCallModule_Set_MultithreadingAndRemoteExecOptionRequest) returns (SequenceCallModule_Set_MultithreadingAndRemoteExecOptionResponse);
  rpc Get_MultithreadingAndRemoteExecOption(SequenceCallModule_Get_MultithreadingAndRemoteExecOptionRequest) returns (SequenceCallModule_Get_MultithreadingAndRemoteExecOptionResponse);
  
  
  // Property: StoreActiveXReferenceExpr
  //
  // Specifies an ActiveX reference variable in which to store a reference to the new Thread object. You can use this reference in subsequent calls to the TestStand API. You can also use this reference in the Wait step to wait for the thread to complete.
  //
  // This property can be left blank. The Sequence Adapter ignores this property unless you set the SequenceCallModule.MultithreadingAndRemoteExecOption property to SeqCallMultiThread_NewThread or SeqCallMultiThread_NewExecution.
  //
  // SequenceCallModule_Set_StoreActiveXReferenceExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //    - propertyValue: string - Specifies an ActiveX reference variable in which to store a reference to the new Thread object. You can use this reference in subsequent calls to the TestStand API. You can also use this reference in the Wait step to wait for the thread to complete. 
  //
  // SequenceCallModule_Set_StoreActiveXReferenceExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceCallModule_Get_StoreActiveXReferenceExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //
  // SequenceCallModule_Get_StoreActiveXReferenceExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies an ActiveX reference variable in which to store a reference to the new Thread object. You can use this reference in subsequent calls to the TestStand API. You can also use this reference in the Wait step to wait for the thread to complete. 
  //
  rpc Set_StoreActiveXReferenceExpr(SequenceCallModule_Set_StoreActiveXReferenceExprRequest) returns (SequenceCallModule_Set_StoreActiveXReferenceExprResponse);
  rpc Get_StoreActiveXReferenceExpr(SequenceCallModule_Get_StoreActiveXReferenceExprRequest) returns (SequenceCallModule_Get_StoreActiveXReferenceExprResponse);
  
  
  // Property: NewThreadOptions
  //
  // Specifies the options to apply when calling a subsequence in a separate thread.
  //
  // SequenceCallModule_Set_NewThreadOptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //    - propertyValue: int32 - Specifies the options to apply when calling a subsequence in a separate thread. 
  //
  // SequenceCallModule_Set_NewThreadOptionsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceCallModule_Get_NewThreadOptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //
  // SequenceCallModule_Get_NewThreadOptionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the options to apply when calling a subsequence in a separate thread. 
  //
  rpc Set_NewThreadOptions(SequenceCallModule_Set_NewThreadOptionsRequest) returns (SequenceCallModule_Set_NewThreadOptionsResponse);
  rpc Get_NewThreadOptions(SequenceCallModule_Get_NewThreadOptionsRequest) returns (SequenceCallModule_Get_NewThreadOptionsResponse);
  
  
  // Property: NewExecutionTypeMask
  //
  // Specifies settings to apply when calling a subsequence in a new execution. The Sequence Adapter combines this value with the value to which the SequenceCallModule.NewExecutionTypeMaskExpr property evaluates when you call a subsequence in a new execution.
  //
  // SequenceCallModule_Set_NewExecutionTypeMaskRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //    - propertyValue: int32 - Specifies settings to apply when calling a subsequence in a new execution. The Sequence Adapter combines this value with the value to which the SequenceCallModule.NewExecutionTypeMaskExpr property evaluates when you call a subsequence in a new execution. 
  //
  // SequenceCallModule_Set_NewExecutionTypeMaskResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceCallModule_Get_NewExecutionTypeMaskRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //
  // SequenceCallModule_Get_NewExecutionTypeMaskResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies settings to apply when calling a subsequence in a new execution. The Sequence Adapter combines this value with the value to which the SequenceCallModule.NewExecutionTypeMaskExpr property evaluates when you call a subsequence in a new execution. 
  //
  rpc Set_NewExecutionTypeMask(SequenceCallModule_Set_NewExecutionTypeMaskRequest) returns (SequenceCallModule_Set_NewExecutionTypeMaskResponse);
  rpc Get_NewExecutionTypeMask(SequenceCallModule_Get_NewExecutionTypeMaskRequest) returns (SequenceCallModule_Get_NewExecutionTypeMaskResponse);
  
  
  // Property: NewExecutionTypeMaskExpr
  //
  // Specifies an expression that returns a numeric value to combine with the SequenceCallModule.NewExecutionTypeMask property value when calling a subsequence in a new execution.
  //
  // SequenceCallModule_Set_NewExecutionTypeMaskExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //    - propertyValue: string - Specifies an expression that returns a numeric value to combine with the SequenceCallModule.NewExecutionTypeMask property value when calling a subsequence in a new execution. 
  //
  // SequenceCallModule_Set_NewExecutionTypeMaskExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceCallModule_Get_NewExecutionTypeMaskExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //
  // SequenceCallModule_Get_NewExecutionTypeMaskExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies an expression that returns a numeric value to combine with the SequenceCallModule.NewExecutionTypeMask property value when calling a subsequence in a new execution. 
  //
  rpc Set_NewExecutionTypeMaskExpr(SequenceCallModule_Set_NewExecutionTypeMaskExprRequest) returns (SequenceCallModule_Set_NewExecutionTypeMaskExprResponse);
  rpc Get_NewExecutionTypeMaskExpr(SequenceCallModule_Get_NewExecutionTypeMaskExprRequest) returns (SequenceCallModule_Get_NewExecutionTypeMaskExprResponse);
  
  
  // Property: NewExecutionModelOption
  //
  // Specifies which process model the new execution uses when calling a subsequence in a new execution.
  //
  // SequenceCallModule_Set_NewExecutionModelOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //    - propertyValue: SeqCallNewExecModelOptions - Specifies which process model the new execution uses when calling a subsequence in a new execution. 
  //
  // SequenceCallModule_Set_NewExecutionModelOptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceCallModule_Get_NewExecutionModelOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //
  // SequenceCallModule_Get_NewExecutionModelOptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: SeqCallNewExecModelOptions - Specifies which process model the new execution uses when calling a subsequence in a new execution. 
  //
  rpc Set_NewExecutionModelOption(SequenceCallModule_Set_NewExecutionModelOptionRequest) returns (SequenceCallModule_Set_NewExecutionModelOptionResponse);
  rpc Get_NewExecutionModelOption(SequenceCallModule_Get_NewExecutionModelOptionRequest) returns (SequenceCallModule_Get_NewExecutionModelOptionResponse);
  
  
  // Property: NewExecutionModelPath
  //
  // Specifies the path to the process model the new execution uses when calling a subsequence in a new execution.
  //
  // Specify an absolute or relative pathname for the file. Relative pathnames are relative to the TestStand search directory paths.
  // You must specify an expression for the file pathname if the SequenceCallModule.SpecifyByExpression property is True.
  // The Sequence Adapter ignores this property unless you set the SequenceCallModule.NewExecutionModelOption property equal to SeqCallNewExecModel_SpecifyModel.
  //
  // SequenceCallModule_Set_NewExecutionModelPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //    - propertyValue: string - Specifies the path to the process model the new execution uses when calling a subsequence in a new execution. 
  //
  // SequenceCallModule_Set_NewExecutionModelPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceCallModule_Get_NewExecutionModelPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //
  // SequenceCallModule_Get_NewExecutionModelPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the path to the process model the new execution uses when calling a subsequence in a new execution. 
  //
  rpc Set_NewExecutionModelPath(SequenceCallModule_Set_NewExecutionModelPathRequest) returns (SequenceCallModule_Set_NewExecutionModelPathResponse);
  rpc Get_NewExecutionModelPath(SequenceCallModule_Get_NewExecutionModelPathRequest) returns (SequenceCallModule_Get_NewExecutionModelPathResponse);
  
  
  // Property: NewExecutionBreakOnEntryExpr
  //
  // Specifies an expression that, when it evaluates to True, suspends execution before executing the first step when calling a subsequence.
  //
  // SequenceCallModule_Set_NewExecutionBreakOnEntryExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //    - propertyValue: string - Specifies an expression that, when it evaluates to True, suspends execution before executing the first step when calling a subsequence. 
  //
  // SequenceCallModule_Set_NewExecutionBreakOnEntryExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceCallModule_Get_NewExecutionBreakOnEntryExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //
  // SequenceCallModule_Get_NewExecutionBreakOnEntryExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies an expression that, when it evaluates to True, suspends execution before executing the first step when calling a subsequence. 
  //
  rpc Set_NewExecutionBreakOnEntryExpr(SequenceCallModule_Set_NewExecutionBreakOnEntryExprRequest) returns (SequenceCallModule_Set_NewExecutionBreakOnEntryExprResponse);
  rpc Get_NewExecutionBreakOnEntryExpr(SequenceCallModule_Get_NewExecutionBreakOnEntryExprRequest) returns (SequenceCallModule_Get_NewExecutionBreakOnEntryExprResponse);
  
  
  // Property: NewExecutionWaitForCompletion
  //
  // Specifies whether and when to wait for the execution to complete after calling a subsequence in a new execution.
  //
  // SequenceCallModule_Set_NewExecutionWaitForCompletionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //    - propertyValue: SeqCallWaitForExecOptions - Specifies whether and when to wait for the execution to complete after calling a subsequence in a new execution. 
  //
  // SequenceCallModule_Set_NewExecutionWaitForCompletionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceCallModule_Get_NewExecutionWaitForCompletionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //
  // SequenceCallModule_Get_NewExecutionWaitForCompletionResponse - The response message from the server. It provides the return value.
  //    - returnValue: SeqCallWaitForExecOptions - Specifies whether and when to wait for the execution to complete after calling a subsequence in a new execution. 
  //
  rpc Set_NewExecutionWaitForCompletion(SequenceCallModule_Set_NewExecutionWaitForCompletionRequest) returns (SequenceCallModule_Set_NewExecutionWaitForCompletionResponse);
  rpc Get_NewExecutionWaitForCompletion(SequenceCallModule_Get_NewExecutionWaitForCompletionRequest) returns (SequenceCallModule_Get_NewExecutionWaitForCompletionResponse);
  
  
  // Property: RemoteHost
  //
  // Specifies the name of the remote host when calling a subsequence on a remote computer.
  //
  // If the SequenceCallModule.SpecifyHostByExpression property is True, the value of this property must be in the form of an expression.
  // The Sequence Adapter ignores this property unless you set the SequenceCallModule.MultithreadingAndRemoteExecOption property equal to SeqCallMultiThread_Remote.
  //
  // SequenceCallModule_Set_RemoteHostRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //    - propertyValue: string - Specifies the name of the remote host when calling a subsequence on a remote computer. 
  //
  // SequenceCallModule_Set_RemoteHostResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceCallModule_Get_RemoteHostRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //
  // SequenceCallModule_Get_RemoteHostResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the name of the remote host when calling a subsequence on a remote computer. 
  //
  rpc Set_RemoteHost(SequenceCallModule_Set_RemoteHostRequest) returns (SequenceCallModule_Set_RemoteHostResponse);
  rpc Get_RemoteHost(SequenceCallModule_Get_RemoteHostRequest) returns (SequenceCallModule_Get_RemoteHostResponse);
  
  
  // Property: SpecifyHostByExpression
  //
  // Set this property to True to specify that the value of the SequenceCallModule.RemoteHost property is in the form of an expression.
  //
  // This property affects the behavior of the Module.LoadPrototype method.
  //
  // SequenceCallModule_Set_SpecifyHostByExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //    - propertyValue: bool - Set this property to True to specify that the value of the SequenceCallModule.RemoteHost property is in the form of an expression. 
  //
  // SequenceCallModule_Set_SpecifyHostByExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceCallModule_Get_SpecifyHostByExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //
  // SequenceCallModule_Get_SpecifyHostByExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Set this property to True to specify that the value of the SequenceCallModule.RemoteHost property is in the form of an expression. 
  //
  rpc Set_SpecifyHostByExpression(SequenceCallModule_Set_SpecifyHostByExpressionRequest) returns (SequenceCallModule_Set_SpecifyHostByExpressionResponse);
  rpc Get_SpecifyHostByExpression(SequenceCallModule_Get_SpecifyHostByExpressionRequest) returns (SequenceCallModule_Get_SpecifyHostByExpressionResponse);
  
  
  // Property: CPUAffinityForNewThreadOption
  //
  // Specifies the CPUs on which the new thread executes.
  //
  // The value this property specifies applies only if the value of the  SequenceCallModule.MultithreadingAndRemoteExecOption property is SeqCallMultithread_NewThread or SeqCallMultithread_NewExecution.
  // You can optimize TestStand performance on symmetric multiprocessing (SMP) systems for multithreaded applications.
  //
  // SequenceCallModule_Set_CPUAffinityForNewThreadOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //    - val: CPUAffinityForNewThreadOptions - Specifies the CPUs on which the new thread executes. 
  //
  // SequenceCallModule_Set_CPUAffinityForNewThreadOptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceCallModule_Get_CPUAffinityForNewThreadOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //
  // SequenceCallModule_Get_CPUAffinityForNewThreadOptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: CPUAffinityForNewThreadOptions - Specifies the CPUs on which the new thread executes. 
  //
  rpc Set_CPUAffinityForNewThreadOption(SequenceCallModule_Set_CPUAffinityForNewThreadOptionRequest) returns (SequenceCallModule_Set_CPUAffinityForNewThreadOptionResponse);
  rpc Get_CPUAffinityForNewThreadOption(SequenceCallModule_Get_CPUAffinityForNewThreadOptionRequest) returns (SequenceCallModule_Get_CPUAffinityForNewThreadOptionResponse);
  
  
  // Property: CustomCPUAffinityForNewThread
  //
  // A numeric expression that specifies the CPUs on which the new thread executes when the value of the SequenceCallModule.CPUAffinityForNewThreadOption property is CPUAffinityForNewThreadOption_UseCustomAffinity.
  //
  // This property evaluates to a numeric value in which each bit represents a CPU. The lowest-order bit represents the first CPU. For example, a value of 12, which is 1100 in binary, represents CPUs 3 and 4 on a quad-core computer. A value of -1 specifies to use all CPUs available to the process.
  // The value this property specifies applies only if the value of the  SequenceCallModule.MultithreadingAndRemoteExecOption property is SeqCallMultithread_NewThread or SeqCallMultithread_NewExecution.
  // Refer to Using TestStand on SMP Systems for more information about optimizing TestStand performance on symmetric multiprocessing (SMP) systems for multithreaded applications.
  //
  // SequenceCallModule_Set_CustomCPUAffinityForNewThreadRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //    - val: string - A numeric expression that specifies the CPUs on which the new thread executes when the value of the SequenceCallModule.CPUAffinityForNewThreadOption property is CPUAffinityForNewThreadOption_UseCustomAffinity. 
  //
  // SequenceCallModule_Set_CustomCPUAffinityForNewThreadResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceCallModule_Get_CustomCPUAffinityForNewThreadRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //
  // SequenceCallModule_Get_CustomCPUAffinityForNewThreadResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - A numeric expression that specifies the CPUs on which the new thread executes when the value of the SequenceCallModule.CPUAffinityForNewThreadOption property is CPUAffinityForNewThreadOption_UseCustomAffinity. 
  //
  rpc Set_CustomCPUAffinityForNewThread(SequenceCallModule_Set_CustomCPUAffinityForNewThreadRequest) returns (SequenceCallModule_Set_CustomCPUAffinityForNewThreadResponse);
  rpc Get_CustomCPUAffinityForNewThread(SequenceCallModule_Get_CustomCPUAffinityForNewThreadRequest) returns (SequenceCallModule_Get_CustomCPUAffinityForNewThreadResponse);
  
  
  // Property: SequenceComment
  //
  // Specifies the comment associated with the sequence that the step calls.
  //
  // SequenceCallModule_Get_SequenceCommentRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallModuleInstance - The id of the SequenceCallModule object.
  //
  // SequenceCallModule_Get_SequenceCommentResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the comment associated with the sequence that the step calls. 
  //
  rpc Get_SequenceComment(SequenceCallModule_Get_SequenceCommentRequest) returns (SequenceCallModule_Get_SequenceCommentResponse);
  
  
}
message SequenceCallModuleInstance {
  // Specifies the handle of the SequenceCallModule instance in the server.
  string id = 1;
}

message SequenceCallParametersInstance {
  // Specifies the handle of the SequenceCallParameters instance in the server.
  string id = 1;
}
message SequenceCallModule_AsModuleRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
}

message SequenceCallModule_AsModuleResponse {
  // The return type of the Module object.
  ModuleInstance returnValue = 1;
}

message SequenceCallModule_LoadParametersRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
  // Specifies to use the sequence file and sequence of the sequence call.
  bool useCurrentSeqFile = 2;
  // Specifies a specific sequence file when the useCurrentSeqFile parameter is False.
  string seqFilePath = 3;
  // Specifies a specific sequence name.
  string seqName = 4;
}

message SequenceCallModule_LoadParametersResponse {
}

message SequenceCallModule_LoadParametersFromSequenceRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
  // Specifies the sequence that contains the prototype to load.
  SequenceInstance sequence = 2;
}

message SequenceCallModule_LoadParametersFromSequenceResponse {
}

message SequenceCallModule_LoadPrototypeFromSequenceRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
  // Specifies the sequence with the prototype to use.
  SequenceInstance sequence = 2;
  // Specify one or more LoadPrototypeOptions constants. Use the bitwise-OR operator to specify multiple flags.
  LoadPrototypeOptions options = 3;
}

message SequenceCallModule_LoadPrototypeFromSequenceResponse {
  // Returns a value that indicates whether the step was modified.
  bool returnValue = 1;
}

message SequenceCallModule_Set_SequenceFilePathRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
  // Specifies the path of the sequence file that contains the sequence the module calls.
  string propertyValue = 2;
}

message SequenceCallModule_Set_SequenceFilePathResponse {
}

message SequenceCallModule_Get_SequenceFilePathRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
}

message SequenceCallModule_Get_SequenceFilePathResponse {
  // Specifies the path of the sequence file that contains the sequence the module calls.
  string returnValue = 1;
}

message SequenceCallModule_Set_SequenceNameRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
  // Specifies the name of the sequence the module calls.
  string propertyValue = 2;
}

message SequenceCallModule_Set_SequenceNameResponse {
}

message SequenceCallModule_Get_SequenceNameRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
}

message SequenceCallModule_Get_SequenceNameResponse {
  // Specifies the name of the sequence the module calls.
  string returnValue = 1;
}

message SequenceCallModule_Set_SpecifyByExpressionRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
  // Specifies that the SequenceCallModule.SequenceFilePath, SequenceCallModule.SequenceName, and SequenceCallModule.NewExecutionModelPath properties contain expressions the Sequence Adapter evaluates at run time to determine the actual sequence file path, sequence name, and model file path.
  bool propertyValue = 2;
}

message SequenceCallModule_Set_SpecifyByExpressionResponse {
}

message SequenceCallModule_Get_SpecifyByExpressionRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
}

message SequenceCallModule_Get_SpecifyByExpressionResponse {
  // Specifies that the SequenceCallModule.SequenceFilePath, SequenceCallModule.SequenceName, and SequenceCallModule.NewExecutionModelPath properties contain expressions the Sequence Adapter evaluates at run time to determine the actual sequence file path, sequence name, and model file path.
  bool returnValue = 1;
}

message SequenceCallModule_Set_UseCurrentFileRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
  // Specifies that the sequence file of the sequence call contains the sequence the module calls. If you set this property to True, TestStand ignores the value of the SequenceCallModule.SequenceFilePath property.
  bool propertyValue = 2;
}

message SequenceCallModule_Set_UseCurrentFileResponse {
}

message SequenceCallModule_Get_UseCurrentFileRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
}

message SequenceCallModule_Get_UseCurrentFileResponse {
  // Specifies that the sequence file of the sequence call contains the sequence the module calls. If you set this property to True, TestStand ignores the value of the SequenceCallModule.SequenceFilePath property.
  bool returnValue = 1;
}

message SequenceCallModule_Set_TraceSettingRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
  // Specifies to enable or disable tracing for calls to the subsequence.
  SeqCallTraceSettings propertyValue = 2;
}

message SequenceCallModule_Set_TraceSettingResponse {
}

message SequenceCallModule_Get_TraceSettingRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
}

message SequenceCallModule_Get_TraceSettingResponse {
  // Specifies to enable or disable tracing for calls to the subsequence.
  SeqCallTraceSettings returnValue = 1;
}

message SequenceCallModule_Set_IgnoreTerminationRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
  // Specifies what happens when the subsequence the module calls causes execution to terminate. If this property is True and TestStand terminates the subsequence, TestStand sets the status of the module step to Terminated but allows the module sequence to proceed normally from the next step. Usually, only one process model file uses this option. This option has no effect when the execution aborts.
  bool propertyValue = 2;
}

message SequenceCallModule_Set_IgnoreTerminationResponse {
}

message SequenceCallModule_Get_IgnoreTerminationRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
}

message SequenceCallModule_Get_IgnoreTerminationResponse {
  // Specifies what happens when the subsequence the module calls causes execution to terminate. If this property is True and TestStand terminates the subsequence, TestStand sets the status of the module step to Terminated but allows the module sequence to proceed normally from the next step. Usually, only one process model file uses this option. This option has no effect when the execution aborts.
  bool returnValue = 1;
}

message SequenceCallModule_Set_UseSequenceParameterPrototypeRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
  // This property affects the behavior of the Module.LoadPrototype method. When this property is True, Module.LoadPrototype loads the parameters of the module from the sequence the SequenceCallModule.UseCurrentFile, SequenceCallModule.SequenceFilePath, and SequenceCallModule.SequenceName properties specify.
  bool propertyValue = 2;
}

message SequenceCallModule_Set_UseSequenceParameterPrototypeResponse {
}

message SequenceCallModule_Get_UseSequenceParameterPrototypeRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
}

message SequenceCallModule_Get_UseSequenceParameterPrototypeResponse {
  // This property affects the behavior of the Module.LoadPrototype method. When this property is True, Module.LoadPrototype loads the parameters of the module from the sequence the SequenceCallModule.UseCurrentFile, SequenceCallModule.SequenceFilePath, and SequenceCallModule.SequenceName properties specify.
  bool returnValue = 1;
}

message SequenceCallModule_Get_ParametersRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
}

message SequenceCallModule_Get_ParametersResponse {
  // The collection of parameters.
  SequenceCallParametersInstance returnValue = 1;
}

message SequenceCallModule_Get_ParameterPrototypeRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
}

message SequenceCallModule_Get_ParameterPrototypeResponse {
  // The parameters container.
  PropertyObjectInstance returnValue = 1;
}

message SequenceCallModule_Set_MultithreadingAndRemoteExecOptionRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
  // Specifies that the module calls the subsequence in a separate thread, separate execution, or on a remote computer.
  SeqCallMultithreadOptions propertyValue = 2;
}

message SequenceCallModule_Set_MultithreadingAndRemoteExecOptionResponse {
}

message SequenceCallModule_Get_MultithreadingAndRemoteExecOptionRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
}

message SequenceCallModule_Get_MultithreadingAndRemoteExecOptionResponse {
  // Specifies that the module calls the subsequence in a separate thread, separate execution, or on a remote computer.
  SeqCallMultithreadOptions returnValue = 1;
}

message SequenceCallModule_Set_StoreActiveXReferenceExprRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
  // Specifies an ActiveX reference variable in which to store a reference to the new Thread object. You can use this reference in subsequent calls to the TestStand API. You can also use this reference in the Wait step to wait for the thread to complete.
  string propertyValue = 2;
}

message SequenceCallModule_Set_StoreActiveXReferenceExprResponse {
}

message SequenceCallModule_Get_StoreActiveXReferenceExprRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
}

message SequenceCallModule_Get_StoreActiveXReferenceExprResponse {
  // Specifies an ActiveX reference variable in which to store a reference to the new Thread object. You can use this reference in subsequent calls to the TestStand API. You can also use this reference in the Wait step to wait for the thread to complete.
  string returnValue = 1;
}

message SequenceCallModule_Set_NewThreadOptionsRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
  // Specifies the options to apply when calling a subsequence in a separate thread.
  int32 propertyValue = 2;
}

message SequenceCallModule_Set_NewThreadOptionsResponse {
}

message SequenceCallModule_Get_NewThreadOptionsRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
}

message SequenceCallModule_Get_NewThreadOptionsResponse {
  // Specifies the options to apply when calling a subsequence in a separate thread.
  SeqCallNewThreadOptions returnValue = 1;
}

message SequenceCallModule_Set_NewExecutionTypeMaskRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
  // Specifies settings to apply when calling a subsequence in a new execution. The Sequence Adapter combines this value with the value to which the SequenceCallModule.NewExecutionTypeMaskExpr property evaluates when you call a subsequence in a new execution.
  int32 propertyValue = 2;
}

message SequenceCallModule_Set_NewExecutionTypeMaskResponse {
}

message SequenceCallModule_Get_NewExecutionTypeMaskRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
}

message SequenceCallModule_Get_NewExecutionTypeMaskResponse {
  // Specifies settings to apply when calling a subsequence in a new execution. The Sequence Adapter combines this value with the value to which the SequenceCallModule.NewExecutionTypeMaskExpr property evaluates when you call a subsequence in a new execution.
  ExecutionTypeMask returnValue = 1;
}

message SequenceCallModule_Set_NewExecutionTypeMaskExprRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
  // Specifies an expression that returns a numeric value to combine with the SequenceCallModule.NewExecutionTypeMask property value when calling a subsequence in a new execution.
  string propertyValue = 2;
}

message SequenceCallModule_Set_NewExecutionTypeMaskExprResponse {
}

message SequenceCallModule_Get_NewExecutionTypeMaskExprRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
}

message SequenceCallModule_Get_NewExecutionTypeMaskExprResponse {
  // Specifies an expression that returns a numeric value to combine with the SequenceCallModule.NewExecutionTypeMask property value when calling a subsequence in a new execution.
  string returnValue = 1;
}

message SequenceCallModule_Set_NewExecutionModelOptionRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
  // Specifies which process model the new execution uses when calling a subsequence in a new execution.
  SeqCallNewExecModelOptions propertyValue = 2;
}

message SequenceCallModule_Set_NewExecutionModelOptionResponse {
}

message SequenceCallModule_Get_NewExecutionModelOptionRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
}

message SequenceCallModule_Get_NewExecutionModelOptionResponse {
  // Specifies which process model the new execution uses when calling a subsequence in a new execution.
  SeqCallNewExecModelOptions returnValue = 1;
}

message SequenceCallModule_Set_NewExecutionModelPathRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
  // Specifies the path to the process model the new execution uses when calling a subsequence in a new execution.
  string propertyValue = 2;
}

message SequenceCallModule_Set_NewExecutionModelPathResponse {
}

message SequenceCallModule_Get_NewExecutionModelPathRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
}

message SequenceCallModule_Get_NewExecutionModelPathResponse {
  // Specifies the path to the process model the new execution uses when calling a subsequence in a new execution.
  string returnValue = 1;
}

message SequenceCallModule_Set_NewExecutionBreakOnEntryExprRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
  // Specifies an expression that, when it evaluates to True, suspends execution before executing the first step when calling a subsequence.
  string propertyValue = 2;
}

message SequenceCallModule_Set_NewExecutionBreakOnEntryExprResponse {
}

message SequenceCallModule_Get_NewExecutionBreakOnEntryExprRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
}

message SequenceCallModule_Get_NewExecutionBreakOnEntryExprResponse {
  // Specifies an expression that, when it evaluates to True, suspends execution before executing the first step when calling a subsequence.
  string returnValue = 1;
}

message SequenceCallModule_Set_NewExecutionWaitForCompletionRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
  // Specifies whether and when to wait for the execution to complete after calling a subsequence in a new execution.
  SeqCallWaitForExecOptions propertyValue = 2;
}

message SequenceCallModule_Set_NewExecutionWaitForCompletionResponse {
}

message SequenceCallModule_Get_NewExecutionWaitForCompletionRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
}

message SequenceCallModule_Get_NewExecutionWaitForCompletionResponse {
  // Specifies whether and when to wait for the execution to complete after calling a subsequence in a new execution.
  SeqCallWaitForExecOptions returnValue = 1;
}

message SequenceCallModule_Set_RemoteHostRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
  // Specifies the name of the remote host when calling a subsequence on a remote computer.
  string propertyValue = 2;
}

message SequenceCallModule_Set_RemoteHostResponse {
}

message SequenceCallModule_Get_RemoteHostRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
}

message SequenceCallModule_Get_RemoteHostResponse {
  // Specifies the name of the remote host when calling a subsequence on a remote computer.
  string returnValue = 1;
}

message SequenceCallModule_Set_SpecifyHostByExpressionRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
  // Set this property to True to specify that the value of the SequenceCallModule.RemoteHost property is in the form of an expression.
  bool propertyValue = 2;
}

message SequenceCallModule_Set_SpecifyHostByExpressionResponse {
}

message SequenceCallModule_Get_SpecifyHostByExpressionRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
}

message SequenceCallModule_Get_SpecifyHostByExpressionResponse {
  // Set this property to True to specify that the value of the SequenceCallModule.RemoteHost property is in the form of an expression.
  bool returnValue = 1;
}

message SequenceCallModule_Set_CPUAffinityForNewThreadOptionRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
  // Specifies the CPUs on which the new thread executes.
  CPUAffinityForNewThreadOptions val = 2;
}

message SequenceCallModule_Set_CPUAffinityForNewThreadOptionResponse {
}

message SequenceCallModule_Get_CPUAffinityForNewThreadOptionRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
}

message SequenceCallModule_Get_CPUAffinityForNewThreadOptionResponse {
  // Specifies the CPUs on which the new thread executes.
  CPUAffinityForNewThreadOptions returnValue = 1;
}

message SequenceCallModule_Set_CustomCPUAffinityForNewThreadRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
  // A numeric expression that specifies the CPUs on which the new thread executes when the value of the SequenceCallModule.CPUAffinityForNewThreadOption property is CPUAffinityForNewThreadOption_UseCustomAffinity.
  string val = 2;
}

message SequenceCallModule_Set_CustomCPUAffinityForNewThreadResponse {
}

message SequenceCallModule_Get_CustomCPUAffinityForNewThreadRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
}

message SequenceCallModule_Get_CustomCPUAffinityForNewThreadResponse {
  // A numeric expression that specifies the CPUs on which the new thread executes when the value of the SequenceCallModule.CPUAffinityForNewThreadOption property is CPUAffinityForNewThreadOption_UseCustomAffinity.
  string returnValue = 1;
}

message SequenceCallModule_Get_SequenceCommentRequest {
  // The id of the SequenceCallModule object.
  SequenceCallModuleInstance instance = 1;
}

message SequenceCallModule_Get_SequenceCommentResponse {
  // Specifies the comment associated with the sequence that the step calls.
  string returnValue = 1;
}

// SequenceCallParameters
//
// Use objects from the SequenceCallParameters class to configure and obtain parameters for a module that uses the Sequence Adapter.
// Use the SequenceCallModule.Parameters property to obtain the collection of parameters for a module.
//
service SequenceCallParameters {
  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // SequenceCallParameters_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceCallParametersInstance - The id of the SequenceCallParameters object.
  //    - index: int32 - Specifies the zero-based index of the parameter to retrieve.
  //
  // SequenceCallParameters_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceCallParameterInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(SequenceCallParameters_Get_ItemRequest) returns (SequenceCallParameters_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // SequenceCallParameters_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallParametersInstance - The id of the SequenceCallParameters object.
  //
  // SequenceCallParameters_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(SequenceCallParameters_Get_CountRequest) returns (SequenceCallParameters_Get_CountResponse);
  
  
}
message SequenceCallParameterInstance {
  // Specifies the handle of the SequenceCallParameter instance in the server.
  string id = 1;
}
message SequenceCallParameters_Get_ItemRequest {
  // The id of the SequenceCallParameters object.
  SequenceCallParametersInstance instance = 1;
  // Specifies the zero-based index of the parameter to retrieve.
  optional int32 index = 2;
}

message SequenceCallParameters_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  SequenceCallParameterInstance returnValue = 1;
}

message SequenceCallParameters_Get_CountRequest {
  // The id of the SequenceCallParameters object.
  SequenceCallParametersInstance instance = 1;
}

message SequenceCallParameters_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// SequenceCallParameter
//
// Use objects from the SequenceCallParameter class to configure and obtain SequenceCallParameter-specific information for an item in the SequenceCallParameters collection class.
//
service SequenceCallParameter {
  // Method: AsPropertyObject
  //
  // Note: This method is obsolete. Use the properties and methods in the SequenceCallParameter class to access the contents of the object.
  //
  // Returns the underlying PropertyObject that represents the SequenceCallParameter object. Use the PropertyObject to modify, add, or remove custom properties of the object.
  //
  // SequenceCallParameter_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallParameterInstance - The id of the SequenceCallParameter object.
  //
  // SequenceCallParameter_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(SequenceCallParameter_AsPropertyObjectRequest) returns (SequenceCallParameter_AsPropertyObjectResponse);
  
  

  // Property: UseDefaultValue
  //
  // Specifies whether to use the default value of the parameter when calling the subsequence.
  //
  // SequenceCallParameter_Set_UseDefaultValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallParameterInstance - The id of the SequenceCallParameter object.
  //    - propertyValue: bool - Specifies whether to use the default value of the parameter when calling the subsequence. 
  //
  // SequenceCallParameter_Set_UseDefaultValueResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceCallParameter_Get_UseDefaultValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallParameterInstance - The id of the SequenceCallParameter object.
  //
  // SequenceCallParameter_Get_UseDefaultValueResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether to use the default value of the parameter when calling the subsequence. 
  //
  rpc Set_UseDefaultValue(SequenceCallParameter_Set_UseDefaultValueRequest) returns (SequenceCallParameter_Set_UseDefaultValueResponse);
  rpc Get_UseDefaultValue(SequenceCallParameter_Get_UseDefaultValueRequest) returns (SequenceCallParameter_Get_UseDefaultValueResponse);
  
  
  // Property: ValueExpr
  //
  // An expression defining the argument to pass for the parameter when calling the subsequence.
  //
  // SequenceCallParameter_Set_ValueExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallParameterInstance - The id of the SequenceCallParameter object.
  //    - propertyValue: string - An expression defining the argument to pass for the parameter when calling the subsequence. 
  //
  // SequenceCallParameter_Set_ValueExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceCallParameter_Get_ValueExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallParameterInstance - The id of the SequenceCallParameter object.
  //
  // SequenceCallParameter_Get_ValueExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - An expression defining the argument to pass for the parameter when calling the subsequence. 
  //
  rpc Set_ValueExpr(SequenceCallParameter_Set_ValueExprRequest) returns (SequenceCallParameter_Set_ValueExprResponse);
  rpc Get_ValueExpr(SequenceCallParameter_Get_ValueExprRequest) returns (SequenceCallParameter_Get_ValueExprResponse);
  
  
  // Property: UserData
  //
  // Holds a data item you associate with the parameter object.
  //
  // Typically, you do not use this property.
  //
  // SequenceCallParameter_Get_UserDataRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallParameterInstance - The id of the SequenceCallParameter object.
  //
  // SequenceCallParameter_Get_UserDataResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Holds a data item you associate with the parameter object. 
  //
  rpc Get_UserData(SequenceCallParameter_Get_UserDataRequest) returns (SequenceCallParameter_Get_UserDataResponse);
  
  
  // Property: ValidEvaluationTypes
  //
  // Returns the valid types to which this parameter can evaluate.
  //
  // You can pass the value of this property to the validEvaluationTypes parameter of the Expression.ValidateEvaluationType method to determine whether the value of the SequenceCallParameter.ValueExpr property contains errors.
  // If you are using an ExpressionEdit control to display the value of the SequenceCallParameter.ValueExpr property, pass the value of this property to the ExpressionEdit.SetValidEvaluationTypes method.
  //
  // SequenceCallParameter_Get_ValidEvaluationTypesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallParameterInstance - The id of the SequenceCallParameter object.
  //
  // SequenceCallParameter_Get_ValidEvaluationTypesResponse - The response message from the server. It provides the return value.
  //    - returnValue: EvaluationTypesInstance - Returns the valid types to which this parameter can evaluate. 
  //
  rpc Get_ValidEvaluationTypes(SequenceCallParameter_Get_ValidEvaluationTypesRequest) returns (SequenceCallParameter_Get_ValidEvaluationTypesResponse);
  
  
  // Property: Type
  //
  // Note: This property is obsolete. Use the SequenceCallParameter.PropertyObjectType property instead. You can also use the PropertyObjectType.ValueType property to obtain the equivalent value.
  //
  // Returns the type of the parameter.
  //
  // SequenceCallParameter_Get_TypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallParameterInstance - The id of the SequenceCallParameter object.
  //
  // SequenceCallParameter_Get_TypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyValueTypes - Note: This property is obsolete. Use the SequenceCallParameter.PropertyObjectType property instead. You can also use the PropertyObjectType.ValueType property to obtain the equivalent value. 
  //
  rpc Get_Type(SequenceCallParameter_Get_TypeRequest) returns (SequenceCallParameter_Get_TypeResponse);
  
  
  // Property: Name
  //
  // Returns the name of the parameter.
  //
  // SequenceCallParameter_Get_NameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallParameterInstance - The id of the SequenceCallParameter object.
  //
  // SequenceCallParameter_Get_NameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the parameter. 
  //
  rpc Get_Name(SequenceCallParameter_Get_NameRequest) returns (SequenceCallParameter_Get_NameResponse);
  
  
  // Property: PassByReference
  //
  // Returns a value that indicates whether the parameter is passed by reference or passed by value.
  //
  // SequenceCallParameter_Get_PassByReferenceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallParameterInstance - The id of the SequenceCallParameter object.
  //
  // SequenceCallParameter_Get_PassByReferenceResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the parameter is passed by reference or passed by value. 
  //
  rpc Get_PassByReference(SequenceCallParameter_Get_PassByReferenceRequest) returns (SequenceCallParameter_Get_PassByReferenceResponse);
  
  
  // Property: TypeDisplayString
  //
  // Returns the display string used to describe the parameter type.
  //
  // SequenceCallParameter_Get_TypeDisplayStringRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallParameterInstance - The id of the SequenceCallParameter object.
  //
  // SequenceCallParameter_Get_TypeDisplayStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the display string used to describe the parameter type. 
  //
  rpc Get_TypeDisplayString(SequenceCallParameter_Get_TypeDisplayStringRequest) returns (SequenceCallParameter_Get_TypeDisplayStringResponse);
  
  
  // Property: PropertyObjectType
  //
  // Returns an object that provides type information about the parameter.
  //
  // SequenceCallParameter_Get_PropertyObjectTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallParameterInstance - The id of the SequenceCallParameter object.
  //
  // SequenceCallParameter_Get_PropertyObjectTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectTypeInstance - Returns an object that provides type information about the parameter. 
  //
  rpc Get_PropertyObjectType(SequenceCallParameter_Get_PropertyObjectTypeRequest) returns (SequenceCallParameter_Get_PropertyObjectTypeResponse);
  
  
  // Property: ArgumentObject
  //
  // Returns the underlying PropertyObject that represents the SequenceCallParameter object.
  //
  // Use the PropertyObject to access the attributes associated with the parameter or to edit, add, or remove custom properties of the parameter.
  //
  // SequenceCallParameter_Get_ArgumentObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallParameterInstance - The id of the SequenceCallParameter object.
  //
  // SequenceCallParameter_Get_ArgumentObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Returns the underlying PropertyObject that represents the SequenceCallParameter object. 
  //
  rpc Get_ArgumentObject(SequenceCallParameter_Get_ArgumentObjectRequest) returns (SequenceCallParameter_Get_ArgumentObjectResponse);
  
  
  // Property: Comment
  //
  // Specifies the comment associated with the parameter for the sequence that the step calls.
  //
  // SequenceCallParameter_Get_CommentRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceCallParameterInstance - The id of the SequenceCallParameter object.
  //
  // SequenceCallParameter_Get_CommentResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the comment associated with the parameter for the sequence that the step calls. 
  //
  rpc Get_Comment(SequenceCallParameter_Get_CommentRequest) returns (SequenceCallParameter_Get_CommentResponse);
  
  
}
message SequenceCallParameter_AsPropertyObjectRequest {
  // The id of the SequenceCallParameter object.
  SequenceCallParameterInstance instance = 1;
}

message SequenceCallParameter_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message SequenceCallParameter_Set_UseDefaultValueRequest {
  // The id of the SequenceCallParameter object.
  SequenceCallParameterInstance instance = 1;
  // Specifies whether to use the default value of the parameter when calling the subsequence.
  bool propertyValue = 2;
}

message SequenceCallParameter_Set_UseDefaultValueResponse {
}

message SequenceCallParameter_Get_UseDefaultValueRequest {
  // The id of the SequenceCallParameter object.
  SequenceCallParameterInstance instance = 1;
}

message SequenceCallParameter_Get_UseDefaultValueResponse {
  // Specifies whether to use the default value of the parameter when calling the subsequence.
  bool returnValue = 1;
}

message SequenceCallParameter_Set_ValueExprRequest {
  // The id of the SequenceCallParameter object.
  SequenceCallParameterInstance instance = 1;
  // An expression defining the argument to pass for the parameter when calling the subsequence.
  string propertyValue = 2;
}

message SequenceCallParameter_Set_ValueExprResponse {
}

message SequenceCallParameter_Get_ValueExprRequest {
  // The id of the SequenceCallParameter object.
  SequenceCallParameterInstance instance = 1;
}

message SequenceCallParameter_Get_ValueExprResponse {
  // An expression defining the argument to pass for the parameter when calling the subsequence.
  string returnValue = 1;
}

message SequenceCallParameter_Get_UserDataRequest {
  // The id of the SequenceCallParameter object.
  SequenceCallParameterInstance instance = 1;
}

message SequenceCallParameter_Get_UserDataResponse {
  // Holds a data item you associate with the parameter object.
  PropertyObjectInstance returnValue = 1;
}

message SequenceCallParameter_Get_ValidEvaluationTypesRequest {
  // The id of the SequenceCallParameter object.
  SequenceCallParameterInstance instance = 1;
}

message SequenceCallParameter_Get_ValidEvaluationTypesResponse {
  // Returns the valid types to which this parameter can evaluate.
  EvaluationTypesInstance returnValue = 1;
}

message SequenceCallParameter_Get_TypeRequest {
  // The id of the SequenceCallParameter object.
  SequenceCallParameterInstance instance = 1;
}

message SequenceCallParameter_Get_TypeResponse {
  // Note: This property is obsolete. Use the SequenceCallParameter.PropertyObjectType property instead. You can also use the PropertyObjectType.ValueType property to obtain the equivalent value.
  PropertyValueTypes returnValue = 1;
}

message SequenceCallParameter_Get_NameRequest {
  // The id of the SequenceCallParameter object.
  SequenceCallParameterInstance instance = 1;
}

message SequenceCallParameter_Get_NameResponse {
  // Returns the name of the parameter.
  string returnValue = 1;
}

message SequenceCallParameter_Get_PassByReferenceRequest {
  // The id of the SequenceCallParameter object.
  SequenceCallParameterInstance instance = 1;
}

message SequenceCallParameter_Get_PassByReferenceResponse {
  // Returns a value that indicates whether the parameter is passed by reference or passed by value.
  bool returnValue = 1;
}

message SequenceCallParameter_Get_TypeDisplayStringRequest {
  // The id of the SequenceCallParameter object.
  SequenceCallParameterInstance instance = 1;
}

message SequenceCallParameter_Get_TypeDisplayStringResponse {
  // Returns the display string used to describe the parameter type.
  string returnValue = 1;
}

message SequenceCallParameter_Get_PropertyObjectTypeRequest {
  // The id of the SequenceCallParameter object.
  SequenceCallParameterInstance instance = 1;
}

message SequenceCallParameter_Get_PropertyObjectTypeResponse {
  // Returns an object that provides type information about the parameter.
  PropertyObjectTypeInstance returnValue = 1;
}

message SequenceCallParameter_Get_ArgumentObjectRequest {
  // The id of the SequenceCallParameter object.
  SequenceCallParameterInstance instance = 1;
}

message SequenceCallParameter_Get_ArgumentObjectResponse {
  // Returns the underlying PropertyObject that represents the SequenceCallParameter object.
  PropertyObjectInstance returnValue = 1;
}

message SequenceCallParameter_Get_CommentRequest {
  // The id of the SequenceCallParameter object.
  SequenceCallParameterInstance instance = 1;
}

message SequenceCallParameter_Get_CommentResponse {
  // Specifies the comment associated with the parameter for the sequence that the step calls.
  string returnValue = 1;
}

// LabVIEWNXGArgument
//
// Use objects from the LabVIEWNXGArgument class to set the argument value to pass to a LabVIEW NXG VI using the LabVIEWNXGModule.Execute; method.
//
service LabVIEWNXGArgument {
  // Property: Value
  //
  // Specifies the argument value to pass for the corresponding parameter.
  //
  // LabVIEWNXGArgument_Set_ValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGArgumentInstance - The id of the LabVIEWNXGArgument object.
  //    - val: PropertyObjectInstance - Specifies the argument value to pass for the corresponding parameter. 
  //
  // LabVIEWNXGArgument_Set_ValueResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWNXGArgument_Get_ValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGArgumentInstance - The id of the LabVIEWNXGArgument object.
  //
  // LabVIEWNXGArgument_Get_ValueResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Specifies the argument value to pass for the corresponding parameter. 
  //
  rpc Set_Value(LabVIEWNXGArgument_Set_ValueRequest) returns (LabVIEWNXGArgument_Set_ValueResponse);
  rpc Get_Value(LabVIEWNXGArgument_Get_ValueRequest) returns (LabVIEWNXGArgument_Get_ValueResponse);
  
  
  // Property: ParameterName
  //
  // Returns the name of the parameter in the VI that is associated with the argument.
  //
  // LabVIEWNXGArgument_Get_ParameterNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGArgumentInstance - The id of the LabVIEWNXGArgument object.
  //
  // LabVIEWNXGArgument_Get_ParameterNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the parameter in the VI that is associated with the argument. 
  //
  rpc Get_ParameterName(LabVIEWNXGArgument_Get_ParameterNameRequest) returns (LabVIEWNXGArgument_Get_ParameterNameResponse);
  
  
  // Property: Elements
  //
  // Returns a collection of LabVIEWNXGArguments to pass to a parameter that is a cluster or an array of clusters.
  //
  // LabVIEWNXGArgument_Get_ElementsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGArgumentInstance - The id of the LabVIEWNXGArgument object.
  //
  // LabVIEWNXGArgument_Get_ElementsResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNXGArgumentsInstance - Returns a collection of LabVIEWNXGArguments to pass to a parameter that is a cluster or an array of clusters. 
  //
  rpc Get_Elements(LabVIEWNXGArgument_Get_ElementsRequest) returns (LabVIEWNXGArgument_Get_ElementsResponse);
  
  
  // Property: ComplexRealPart
  //
  // Returns the LabVIEWNXGArgument for the real part of a complex number or array.
  //
  // LabVIEWNXGArgument_Get_ComplexRealPartRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGArgumentInstance - The id of the LabVIEWNXGArgument object.
  //
  // LabVIEWNXGArgument_Get_ComplexRealPartResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNXGArgumentInstance - Returns the LabVIEWNXGArgument for the real part of a complex number or array. 
  //
  rpc Get_ComplexRealPart(LabVIEWNXGArgument_Get_ComplexRealPartRequest) returns (LabVIEWNXGArgument_Get_ComplexRealPartResponse);
  
  
  // Property: ComplexImaginaryPart
  //
  // Returns the LabVIEWNXGArgument for the imaginary part of a complex number or array.
  //
  // LabVIEWNXGArgument_Get_ComplexImaginaryPartRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGArgumentInstance - The id of the LabVIEWNXGArgument object.
  //
  // LabVIEWNXGArgument_Get_ComplexImaginaryPartResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNXGArgumentInstance - Returns the LabVIEWNXGArgument for the imaginary part of a complex number or array. 
  //
  rpc Get_ComplexImaginaryPart(LabVIEWNXGArgument_Get_ComplexImaginaryPartRequest) returns (LabVIEWNXGArgument_Get_ComplexImaginaryPartResponse);
  
  
}
message LabVIEWNXGArgumentInstance {
  // Specifies the handle of the LabVIEWNXGArgument instance in the server.
  string id = 1;
}

message LabVIEWNXGArgumentsInstance {
  // Specifies the handle of the LabVIEWNXGArguments instance in the server.
  string id = 1;
}
message LabVIEWNXGArgument_Set_ValueRequest {
  // The id of the LabVIEWNXGArgument object.
  LabVIEWNXGArgumentInstance instance = 1;
  // Specifies the argument value to pass for the corresponding parameter.
  PropertyObjectInstance val = 2;
}

message LabVIEWNXGArgument_Set_ValueResponse {
}

message LabVIEWNXGArgument_Get_ValueRequest {
  // The id of the LabVIEWNXGArgument object.
  LabVIEWNXGArgumentInstance instance = 1;
}

message LabVIEWNXGArgument_Get_ValueResponse {
  // Specifies the argument value to pass for the corresponding parameter.
  PropertyObjectInstance returnValue = 1;
}

message LabVIEWNXGArgument_Get_ParameterNameRequest {
  // The id of the LabVIEWNXGArgument object.
  LabVIEWNXGArgumentInstance instance = 1;
}

message LabVIEWNXGArgument_Get_ParameterNameResponse {
  // Returns the name of the parameter in the VI that is associated with the argument.
  string returnValue = 1;
}

message LabVIEWNXGArgument_Get_ElementsRequest {
  // The id of the LabVIEWNXGArgument object.
  LabVIEWNXGArgumentInstance instance = 1;
}

message LabVIEWNXGArgument_Get_ElementsResponse {
  // Returns a collection of LabVIEWNXGArguments to pass to a parameter that is a cluster or an array of clusters.
  LabVIEWNXGArgumentsInstance returnValue = 1;
}

message LabVIEWNXGArgument_Get_ComplexRealPartRequest {
  // The id of the LabVIEWNXGArgument object.
  LabVIEWNXGArgumentInstance instance = 1;
}

message LabVIEWNXGArgument_Get_ComplexRealPartResponse {
  // Returns the LabVIEWNXGArgument for the real part of a complex number or array.
  LabVIEWNXGArgumentInstance returnValue = 1;
}

message LabVIEWNXGArgument_Get_ComplexImaginaryPartRequest {
  // The id of the LabVIEWNXGArgument object.
  LabVIEWNXGArgumentInstance instance = 1;
}

message LabVIEWNXGArgument_Get_ComplexImaginaryPartResponse {
  // Returns the LabVIEWNXGArgument for the imaginary part of a complex number or array.
  LabVIEWNXGArgumentInstance returnValue = 1;
}

// LabVIEWNXGArguments
//
// Use objects from the LabVIEWNXGArguments class to pass specific argument values to a LabVIEW NXG VI using the LabVIEWNXGModule.Execute; method. Use the LabVIEWNXGParameters.NewArguments; method to create a new arguments collection.
//
service LabVIEWNXGArguments {
  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // LabVIEWNXGArguments_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNXGArgumentsInstance - The id of the LabVIEWNXGArguments object.
  //    - index: oneof index { int32 numericIndex = 2; string nameIndex = 3; } - Specifies the zero-based index of the item to retrieve. An argument at a specific index in the LabVIEWNXGArguments collection corresponds to the parameter at the same index in the LabVIEWNXGParameters collection that you used to create the LabVIEWNXGArguments collection.
  //
  // LabVIEWNXGArguments_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNXGArgumentInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(LabVIEWNXGArguments_Get_ItemRequest) returns (LabVIEWNXGArguments_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // LabVIEWNXGArguments_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGArgumentsInstance - The id of the LabVIEWNXGArguments object.
  //
  // LabVIEWNXGArguments_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(LabVIEWNXGArguments_Get_CountRequest) returns (LabVIEWNXGArguments_Get_CountResponse);
  
  
}
message LabVIEWNXGArguments_Get_ItemRequest {
  // The id of the LabVIEWNXGArguments object.
  LabVIEWNXGArgumentsInstance instance = 1;
  // Specifies the zero-based index of the item to retrieve. An argument at a specific index in the LabVIEWNXGArguments collection corresponds to the parameter at the same index in the LabVIEWNXGParameters collection that you used to create the LabVIEWNXGArguments collection.
  oneof index { int32 numericIndex = 2; string nameIndex = 3; }
}

message LabVIEWNXGArguments_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  LabVIEWNXGArgumentInstance returnValue = 1;
}

message LabVIEWNXGArguments_Get_CountRequest {
  // The id of the LabVIEWNXGArguments object.
  LabVIEWNXGArgumentsInstance instance = 1;
}

message LabVIEWNXGArguments_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// LabVIEWNXGParameters
//
// Use objects from the LabVIEWNXGParameters class to configure and obtain parameters for a module that uses the LabVIEW NXG Adapter. Use the LabVIEWNXGModule.Parameters property to obtain the collection of parameters for a module.
//
service LabVIEWNXGParameters {
  // Method: NewArguments
  //
  // Creates and returns a new LabVIEWNXGArguments collection. Use this collection to pass argument values to a LabVIEWNXG module using the LabVIEWNXGModule.Execute method.
  //
  // The new collection contains the same number of items as the LabVIEWNXGParameters collection. To pass a argument value to a VI parameter, set the LabVIEWNXGArgument.Value property on the item in the LabVIEWNXGArguments collection that has the same index as the parameter in the LabVIEWNXGParameters collection.
  //
  // LabVIEWNXGParameters_NewArgumentsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParametersInstance - The id of the LabVIEWNXGParameters object.
  //
  // LabVIEWNXGParameters_NewArgumentsResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNXGArgumentsInstance - The return type of the LabVIEWNXGArguments object.
  //
  rpc NewArguments(LabVIEWNXGParameters_NewArgumentsRequest) returns (LabVIEWNXGParameters_NewArgumentsResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // LabVIEWNXGParameters_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNXGParametersInstance - The id of the LabVIEWNXGParameters object.
  //    - index: int32 - Specifies the zero-based index of the parameter to retrieve.
  //
  // LabVIEWNXGParameters_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNXGParameterInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(LabVIEWNXGParameters_Get_ItemRequest) returns (LabVIEWNXGParameters_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // LabVIEWNXGParameters_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParametersInstance - The id of the LabVIEWNXGParameters object.
  //
  // LabVIEWNXGParameters_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(LabVIEWNXGParameters_Get_CountRequest) returns (LabVIEWNXGParameters_Get_CountResponse);
  
  
}
message LabVIEWNXGParametersInstance {
  // Specifies the handle of the LabVIEWNXGParameters instance in the server.
  string id = 1;
}

message LabVIEWNXGParameterInstance {
  // Specifies the handle of the LabVIEWNXGParameter instance in the server.
  string id = 1;
}
message LabVIEWNXGParameters_NewArgumentsRequest {
  // The id of the LabVIEWNXGParameters object.
  LabVIEWNXGParametersInstance instance = 1;
}

message LabVIEWNXGParameters_NewArgumentsResponse {
  // The return type of the LabVIEWNXGArguments object.
  LabVIEWNXGArgumentsInstance returnValue = 1;
}

message LabVIEWNXGParameters_Get_ItemRequest {
  // The id of the LabVIEWNXGParameters object.
  LabVIEWNXGParametersInstance instance = 1;
  // Specifies the zero-based index of the parameter to retrieve.
  optional int32 index = 2;
}

message LabVIEWNXGParameters_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  LabVIEWNXGParameterInstance returnValue = 1;
}

message LabVIEWNXGParameters_Get_CountRequest {
  // The id of the LabVIEWNXGParameters object.
  LabVIEWNXGParametersInstance instance = 1;
}

message LabVIEWNXGParameters_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// LabVIEWNXGParameter
//
// Use objects from the LabVIEWNXGParameter class to configure and obtain LabVIEWNXGParameter-specific information for an item in the LabVIEWNXGParameters collection class.
//
service LabVIEWNXGParameter {
  // Method: AsPropertyObject
  //
  // Returns the underlying PropertyObject that represents the LabVIEWNXGParameter object.
  //
  // Use the PropertyObject to modify, add, or remove custom properties of the object.
  //
  // LabVIEWNXGParameter_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(LabVIEWNXGParameter_AsPropertyObjectRequest) returns (LabVIEWNXGParameter_AsPropertyObjectResponse);
  
  
  // Method: GetDefaultArrayDimensionSize
  //
  // Returns the default size of the array corresponding to the zero-based index passed as input.
  //
  // The default size corresponds to the default size of the array control in the front panel of a VI. Call the LabVIEWNXGModule.LoadVIInfo or Module.LoadPrototype method before calling this method.
  //
  // LabVIEWNXGParameter_GetDefaultArrayDimensionSizeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //    - dimension: int32 - Specifies the zero-based index corresponding to one of the array dimensions.
  //
  // LabVIEWNXGParameter_GetDefaultArrayDimensionSizeResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - The return type of the Int32 object.
  //
  rpc GetDefaultArrayDimensionSize(LabVIEWNXGParameter_GetDefaultArrayDimensionSizeRequest) returns (LabVIEWNXGParameter_GetDefaultArrayDimensionSizeResponse);
  
  
  // Method: GetArrayIndex
  //
  // Returns the index of the array element the offset parameter specifies.
  //
  // LabVIEWNXGParameter_GetArrayIndexRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //    - offset: int32 - Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  //
  // LabVIEWNXGParameter_GetArrayIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - An array index string. Array index strings are a list of numbers enclosed in brackets that index each dimension of the array. For example, the following is an array index for a two dimensional array: [0][1]. 
  //
  rpc GetArrayIndex(LabVIEWNXGParameter_GetArrayIndexRequest) returns (LabVIEWNXGParameter_GetArrayIndexResponse);
  
  
  // Method: GetEnumValues
  //
  // Returns the enumeration constants for an enumeration parameter or returns the ring control values for a ring control parameter.
  //
  // Call the LabVIEWNXGModule.LoadVIInfo method or the Module.LoadPrototype method before calling this method. The values stay in memory until the sequence file closes.
  // Note: TestStand supports ring control values only when you use LabVIEW 2012 and later.
  // Use the name and value of the property objects in the array this method returns to determine the name and value of the enumeration constants or ring controls.
  // Pass the return value of this method as the additionalConstants parameter of Expression.ValidateEvaluationType when checking the LabVIEWNXGParameter.ValueExpr property for errors.
  // If you are using an ExpressionEdit control to display the value of the LabVIEWNXGParameter.ValueExpr property, pass the return value of this method to the ExpressionEdit.SetAdditionalEvaluationConstants method to instruct the ExpressionEdit control to validate enumeration constants.
  //
  // LabVIEWNXGParameter_GetEnumValuesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_GetEnumValuesResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated PropertyObjectInstance - Returns an array of property objects where each property object represents an enumeration value or a ring control value. 
  //
  rpc GetEnumValues(LabVIEWNXGParameter_GetEnumValuesRequest) returns (LabVIEWNXGParameter_GetEnumValuesResponse);
  
  
  // Method: UpdateClusterMapping
  //
  // Updates the expression values for the cluster parameter elements when the parameter specifies an expression value that evaluates to a named data type that enables cluster passing.
  //
  // This method is valid only on cluster parameters.
  //
  // LabVIEWNXGParameter_UpdateClusterMappingRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //    - sequenceContext: SequenceContextInstance - Pass the sequence context that the dialog box uses to evaluate all value expressions. You can use the Engine.NewEditContext method to obtain an edit-time sequence context.
  //
  // LabVIEWNXGParameter_UpdateClusterMappingResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the method updates any expression values for the elements of the cluster parameter. 
  //
  rpc UpdateClusterMapping(LabVIEWNXGParameter_UpdateClusterMappingRequest) returns (LabVIEWNXGParameter_UpdateClusterMappingResponse);
  
  
  // Method: DisplayCreateCustomDataTypeDialog
  //
  // Launches the Create/Update Custom Data Type from Cluster dialog box, in which you configure a new custom data type or update an existing custom type.
  //
  // LabVIEWNXGParameter_DisplayCreateCustomDataTypeDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //    - sequenceContext: SequenceContextInstance - Specifies the sequence context the dialog box uses to obtain information about the sequence file. You can use the Engine.NewEditContext method to obtain an edit-time sequence context.
  //      
  //
  // LabVIEWNXGParameter_DisplayCreateCustomDataTypeDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if you click OK in the dialog box. False if you click Cancel. 
  //
  rpc DisplayCreateCustomDataTypeDialog(LabVIEWNXGParameter_DisplayCreateCustomDataTypeDialogRequest) returns (LabVIEWNXGParameter_DisplayCreateCustomDataTypeDialogResponse);
  
  
  // Method: CreateDefaultArrayElements
  //
  // Creates all the default array elements of an array parameter.
  //
  // This method is valid only on array parameters and creates the elements only if the array control on the VI front panel defines default elements. TestStand replaces any existing array elements the parameter previously specified.
  //
  // LabVIEWNXGParameter_CreateDefaultArrayElementsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_CreateDefaultArrayElementsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the default array elements were created. 
  //
  rpc CreateDefaultArrayElements(LabVIEWNXGParameter_CreateDefaultArrayElementsRequest) returns (LabVIEWNXGParameter_CreateDefaultArrayElementsResponse);
  
  
  // Method: DeleteArrayElements
  //
  // Deletes all the array elements.
  //
  // This method is valid only on array parameters.
  //
  // LabVIEWNXGParameter_DeleteArrayElementsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_DeleteArrayElementsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc DeleteArrayElements(LabVIEWNXGParameter_DeleteArrayElementsRequest) returns (LabVIEWNXGParameter_DeleteArrayElementsResponse);
  
  
  // Method: InsertArrayElement
  //
  // Inserts an array element at the specified index.
  //
  // This method is valid only for one-dimensional array parameters. Use the LabVIEWNXGParameter.ArrayDimensions property to determine the number of array dimensions.
  //
  // LabVIEWNXGParameter_InsertArrayElementRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //    - index: int32 - Specifies the index at which to insert the array element. This value must be greater than or equal to 0 and less than or equal to the number of array elements.
  //
  // LabVIEWNXGParameter_InsertArrayElementResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc InsertArrayElement(LabVIEWNXGParameter_InsertArrayElementRequest) returns (LabVIEWNXGParameter_InsertArrayElementResponse);
  
  
  // Method: DeleteArrayElement
  //
  // Deletes all the array elements.
  //
  // This method is valid only on array parameters.
  //
  // LabVIEWNXGParameter_DeleteArrayElementRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_DeleteArrayElementResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc DeleteArrayElement(LabVIEWNXGParameter_DeleteArrayElementRequest) returns (LabVIEWNXGParameter_DeleteArrayElementResponse);
  
  
  // Method: ExprClusterTypeMismatch
  //
  // Returns True if you enable cluster mapping for the variable or property the expression value returns and the names or types of cluster elements do not match the LabVIEW NXG cluster the VI specifies. Otherwise this method returns False.
  //
  // LabVIEWNXGParameter_ExprClusterTypeMismatchRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //    - sequenceContext: SequenceContextInstance - Specifies the SequenceContext to use to evaluate the parameter expression value.
  //
  // LabVIEWNXGParameter_ExprClusterTypeMismatchResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc ExprClusterTypeMismatch(LabVIEWNXGParameter_ExprClusterTypeMismatchRequest) returns (LabVIEWNXGParameter_ExprClusterTypeMismatchResponse);
  
  
  // Method: IsClusterMappingInvalid
  //
  // Returns a value that indicates whether the argument you specify for a LabVIEW cluster or cluster array parameter is valid by checking the cluster passing information for any custom data types used to confirm that the information matches the cluster definition stored when you specified the module.
  // Note: This method does not load the VI you specify. The method relies on the cluster information stored for the parameter when the module was last specified.
  //
  // LabVIEWNXGParameter_IsClusterMappingInvalidRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_IsClusterMappingInvalidResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True when all the following conditions are true:    * The parameter is a cluster or cluster array    * The argument expression is valid and non-empty    * The argument or cluster mapping of the argument is invalid In all other cases, this method returns False. 
  //    - reasonNotValid: strin - When this method returns True, this parameter returns the reason why the argument is invalid.
  //
  rpc IsClusterMappingInvalid(LabVIEWNXGParameter_IsClusterMappingInvalidRequest) returns (LabVIEWNXGParameter_IsClusterMappingInvalidResponse);
  
  
  // Method: IsParameterMappingValid
  //
  // Returns a value that indicates whether the argument you specify for a LabVIEW cluster or cluster array parameter is valid. This method checks the cluster passing information for any custom data types used and confirms that the information matches the cluster definition stored when you specified the module. For an enumeration parameter, the method validates that: (1) If the argument is a number or TestStand enumeration type instance, the numeric representation is compatible with the LabVIEW parameter’s representation. (2) If the argument is a TestStand enumeration type, the enumerators of the TestStand type must match the enumerators of the LabVIEW parameter in Number and Name and value.
  //
  // LabVIEWNXGParameter_IsParameterMappingValidRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_IsParameterMappingValidResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True when all the following conditions are true: (1) the parameter is a cluster or cluster array or enumeration or enumeration array, (2) the argument expression is valid and not empty, (3) the cluster mapping of the argument is valid if the parameter is a cluster, and (4) the argument value is compatible with the enumeration parameter if the parameter is an enumeration. In all other cases, returns False. 
  //    - reasonNotValid: strin - When this method returns False, this parameter returns an explanation for why the argument is invalid.
  //
  rpc IsParameterMappingValid(LabVIEWNXGParameter_IsParameterMappingValidRequest) returns (LabVIEWNXGParameter_IsParameterMappingValidResponse);
  
  

  // Property: UseDefaultValue
  //
  // Specifies whether to use the default value of the parameter when calling the VI.
  //
  // You can use the default value for recommended or optional parameters.
  //
  // LabVIEWNXGParameter_Set_UseDefaultValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //    - val: bool - Specifies whether to use the default value of the parameter when calling the VI. 
  //
  // LabVIEWNXGParameter_Set_UseDefaultValueResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWNXGParameter_Get_UseDefaultValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_Get_UseDefaultValueResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether to use the default value of the parameter when calling the VI. 
  //
  rpc Set_UseDefaultValue(LabVIEWNXGParameter_Set_UseDefaultValueRequest) returns (LabVIEWNXGParameter_Set_UseDefaultValueResponse);
  rpc Get_UseDefaultValue(LabVIEWNXGParameter_Get_UseDefaultValueRequest) returns (LabVIEWNXGParameter_Get_UseDefaultValueResponse);
  
  
  // Property: ValueExpr
  //
  // Specifies an expression to define the argument to pass for the parameter when calling the VI.
  //
  // TestStand ignores this parameter if the LabVIEWNXGParameter.UseDefaultValue property is True.
  // 
  // Call the LabVIEWNXGModule.LoadVIInfo method before you get or set this property to ensure that LabVIEW parameters, such as enumeration values and ring controls, are updated with their current definitions.
  //
  // LabVIEWNXGParameter_Set_ValueExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //    - val: string - Specifies an expression to define the argument to pass for the parameter when calling the VI. 
  //
  // LabVIEWNXGParameter_Set_ValueExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWNXGParameter_Get_ValueExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_Get_ValueExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies an expression to define the argument to pass for the parameter when calling the VI. 
  //
  rpc Set_ValueExpr(LabVIEWNXGParameter_Set_ValueExprRequest) returns (LabVIEWNXGParameter_Set_ValueExprResponse);
  rpc Get_ValueExpr(LabVIEWNXGParameter_Get_ValueExprRequest) returns (LabVIEWNXGParameter_Get_ValueExprResponse);
  
  
  // Property: Category
  //
  // Returns the group of data types (number, string, and so on) to which this parameter belongs.
  //
  // After obtaining the category of the parameter, you can obtain the data type with the LabVIEWNXGParameter.Type property.
  // 
  // The LabVIEW NXG Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the Module.LoadPrototype method before retrieving this property.
  //
  // LabVIEWNXGParameter_Get_CategoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_Get_CategoryResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNXGParameterCategories - Returns the group of data types (number, string, and so on) to which this parameter belongs. 
  //
  rpc Get_Category(LabVIEWNXGParameter_Get_CategoryRequest) returns (LabVIEWNXGParameter_Get_CategoryResponse);
  
  
  // Property: Direction
  //
  // Returns a value that indicates whether the parameter is an input or output parameter.
  //
  // The LabVIEW NXG Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the Module.LoadPrototype method before retrieving this property.
  //
  // LabVIEWNXGParameter_Get_DirectionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_Get_DirectionResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNXGParameterDirections - Returns a value that indicates whether the parameter is an input or output parameter. 
  //
  rpc Get_Direction(LabVIEWNXGParameter_Get_DirectionRequest) returns (LabVIEWNXGParameter_Get_DirectionResponse);
  
  
  // Property: Type
  //
  // Returns the data type of the parameter element, specifically indicating the type of number, string, and so on.
  //
  // Obtain the category using the LabVIEWNXGParameter.Category property before obtaining the data type of the parameter.
  // The LabVIEW NXG Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the Module.LoadPrototype method before retrieving this property.
  //
  // LabVIEWNXGParameter_Get_TypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_Get_TypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNXGParameterTypes - Returns the data type of the parameter element, specifically indicating the type of number, string, and so on. 
  //
  rpc Get_Type(LabVIEWNXGParameter_Get_TypeRequest) returns (LabVIEWNXGParameter_Get_TypeResponse);
  
  
  // Property: WireRequirement
  //
  // Indicates whether the parameter is required, recommended, or optional.
  //
  // The LabVIEW Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call Module.LoadPrototype before retrieving this property.
  //
  // LabVIEWNXGParameter_Get_WireRequirementRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_Get_WireRequirementResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNXGParameterWireRequirements - Indicates whether the parameter is required, recommended, or optional. 
  //
  rpc Get_WireRequirement(LabVIEWNXGParameter_Get_WireRequirementRequest) returns (LabVIEWNXGParameter_Get_WireRequirementResponse);
  
  
  // Property: ParameterName
  //
  // Returns the name of the parameter in the VI.
  //
  // The LabVIEW NXG Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the Module.LoadPrototype method before retrieving this property.
  //
  // LabVIEWNXGParameter_Get_ParameterNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_Get_ParameterNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the parameter in the VI. 
  //
  rpc Get_ParameterName(LabVIEWNXGParameter_Get_ParameterNameRequest) returns (LabVIEWNXGParameter_Get_ParameterNameResponse);
  
  
  // Property: DefaultValue
  //
  // Returns a display string that represents the default value defined for the parameter.
  //
  // Default values apply only to recommended and optional parameters. You must call the LabVIEWNXGModule.LoadVIInfo or Module.LoadPrototype method before retrieving the default value. Otherwise, TestStand returns an empty string. The values stay in memory until the sequence file closes.
  //
  // LabVIEWNXGParameter_Get_DefaultValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_Get_DefaultValueResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns a display string that represents the default value defined for the parameter. 
  //
  rpc Get_DefaultValue(LabVIEWNXGParameter_Get_DefaultValueRequest) returns (LabVIEWNXGParameter_Get_DefaultValueResponse);
  
  
  // Property: PassAsBinaryString
  //
  // Specifies if TestStand preserves NUL bytes when setting and getting LabVIEW NXG string data.
  //
  // This property applies only when the LabVIEWNXGParameter.Category property of the parameter is LVParamCategory_String or LVParamCategory_StringArray and the LabVIEWNXGParameter.Type property of the parameter is LabVIEWNXGParamType_String.
  // 
  // When this property is False, the LabVIEW NXG Adapter treats strings as C-style strings with a NUL character to indicate the end of the string. C-strings cannot contain binary data.
  // Call the PropertyObject.GetValBinary method on the variable that stores the binary string to retrieve the raw data in TestStand when the binary data is compressed.
  //
  // LabVIEWNXGParameter_Set_PassAsBinaryStringRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //    - val: bool - Specifies if TestStand preserves NUL bytes when setting and getting LabVIEW NXG string data. 
  //
  // LabVIEWNXGParameter_Set_PassAsBinaryStringResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWNXGParameter_Get_PassAsBinaryStringRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_Get_PassAsBinaryStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if TestStand preserves NUL bytes when setting and getting LabVIEW NXG string data. 
  //
  rpc Set_PassAsBinaryString(LabVIEWNXGParameter_Set_PassAsBinaryStringRequest) returns (LabVIEWNXGParameter_Set_PassAsBinaryStringResponse);
  rpc Get_PassAsBinaryString(LabVIEWNXGParameter_Get_PassAsBinaryStringRequest) returns (LabVIEWNXGParameter_Get_PassAsBinaryStringResponse);
  
  
  // Property: UserData
  //
  // Holds a data item you associate with the parameter object.
  //
  // Typically, you do not use this property.
  //
  // LabVIEWNXGParameter_Get_UserDataRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_Get_UserDataResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Holds a data item you associate with the parameter object. 
  //
  rpc Get_UserData(LabVIEWNXGParameter_Get_UserDataRequest) returns (LabVIEWNXGParameter_Get_UserDataResponse);
  
  
  // Property: DisplayType
  //
  // Returns a localized string that describes the LabVIEW NXG data type for the parameter.
  //
  // The LabVIEW NXG Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the Module.LoadPrototype method before you retrieve this property value.
  //
  // LabVIEWNXGParameter_Get_DisplayTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_Get_DisplayTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns a localized string that describes the LabVIEW NXG data type for the parameter. 
  //
  rpc Get_DisplayType(LabVIEWNXGParameter_Get_DisplayTypeRequest) returns (LabVIEWNXGParameter_Get_DisplayTypeResponse);
  
  
  // Property: TypeDisplayString
  //
  // Returns a string that describes the type of the parameter.
  //
  // LabVIEWNXGParameter_Get_TypeDisplayStringRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_Get_TypeDisplayStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns a string that describes the type of the parameter. 
  //
  rpc Get_TypeDisplayString(LabVIEWNXGParameter_Get_TypeDisplayStringRequest) returns (LabVIEWNXGParameter_Get_TypeDisplayStringResponse);
  
  
  // Property: ValidEvaluationTypes
  //
  // Returns the valid types to which this parameter can evaluate.
  //
  // You can pass the value of this property to the validEvaluationTypes parameter of the Expression.ValidateEvaluationType method to determine whether the value of the LabVIEWNXGParameter.ValueExpr property contains errors.
  // 
  // If you are using an ExpressionEdit control to display the value of the LabVIEWParameter.ValueExpr property, pass the value of this property to the ExpressionEdit.SetValidEvaluationTypes method.
  // 
  //
  // LabVIEWNXGParameter_Get_ValidEvaluationTypesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_Get_ValidEvaluationTypesResponse - The response message from the server. It provides the return value.
  //    - returnValue: EvaluationTypesInstance - Returns the valid types to which this parameter can evaluate. 
  //
  rpc Get_ValidEvaluationTypes(LabVIEWNXGParameter_Get_ValidEvaluationTypesRequest) returns (LabVIEWNXGParameter_Get_ValidEvaluationTypesResponse);
  
  
  // Property: ValueExprIsIgnored
  //
  // Use this property to determine whether the LabVIEW Adapter ignores the argument value expression when it calls the module. The adapter ignores the argument value expression for parameters that use default values.
  //
  // LabVIEWNXGParameter_Get_ValueExprIsIgnoredRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_Get_ValueExprIsIgnoredResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Use this property to determine whether the LabVIEW Adapter ignores the argument value expression when it calls the module. The adapter ignores the argument value expression for parameters that use default values. 
  //
  rpc Get_ValueExprIsIgnored(LabVIEWNXGParameter_Get_ValueExprIsIgnoredRequest) returns (LabVIEWNXGParameter_Get_ValueExprIsIgnoredResponse);
  
  
  // Property: ValueExprIsOptional
  //
  // Use this property to determine whether the argument value expression is optional. You do not have to specify an optional value expression to call the module successfully. Value expressions for output parameters and value expressions for cluster and array parameters that have parameter elements are optional.
  //
  // LabVIEWNXGParameter_Get_ValueExprIsOptionalRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_Get_ValueExprIsOptionalResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Use this property to determine whether the argument value expression is optional. You do not have to specify an optional value expression to call the module successfully. Value expressions for output parameters and value expressions for cluster and array parameters that have parameter elements are optional. 
  //
  rpc Get_ValueExprIsOptional(LabVIEWNXGParameter_Get_ValueExprIsOptionalRequest) returns (LabVIEWNXGParameter_Get_ValueExprIsOptionalResponse);
  
  
  // Property: Description
  //
  // Returns the description of the parameter.
  //
  // This is the description available in the Description window in the Items Tab of a LabVIEW NXG VI's properties pane, when the corresponding control or indicator is selected.
  //
  // LabVIEWNXGParameter_Get_DescriptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_Get_DescriptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the description of the parameter. 
  //
  rpc Get_Description(LabVIEWNXGParameter_Get_DescriptionRequest) returns (LabVIEWNXGParameter_Get_DescriptionResponse);
  
  
  // Property: Elements
  //
  // Returns a collection that accesses the members of a parameter that is a cluster, or accesses the elements of a parameter that is an array of clusters.
  //
  // LabVIEWNXGParameter_Get_ElementsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_Get_ElementsResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNXGParametersInstance - Returns a collection that accesses the members of a parameter that is a cluster, or accesses the elements of a parameter that is an array of clusters. 
  //
  rpc Get_Elements(LabVIEWNXGParameter_Get_ElementsRequest) returns (LabVIEWNXGParameter_Get_ElementsResponse);
  
  
  // Property: ArrayDimensions
  //
  // Returns the number of dimensions for array parameters.
  //
  // LabVIEWNXGParameter_Get_ArrayDimensionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_Get_ArrayDimensionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of dimensions for array parameters. 
  //
  rpc Get_ArrayDimensions(LabVIEWNXGParameter_Get_ArrayDimensionsRequest) returns (LabVIEWNXGParameter_Get_ArrayDimensionsResponse);
  
  
  // Property: GetArrayElementIndex
  //
  // Returns the index of the array element as an array index string.
  //
  // Array index strings are a list of numbers enclosed in brackets that index each dimension of the array. For example, the following is an array index for a two dimensional array: [0][1].
  //
  // LabVIEWNXGParameter_Get_GetArrayElementIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_Get_GetArrayElementIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the index of the array element as an array index string. 
  //
  rpc Get_GetArrayElementIndex(LabVIEWNXGParameter_Get_GetArrayElementIndexRequest) returns (LabVIEWNXGParameter_Get_GetArrayElementIndexResponse);
  
  
  // Property: ArrayElementPrototype
  //
  // Returns the cluster prototype for the elements of the array.
  //
  // This property is valid only for arrays of LabVIEW NXG clusters. Call the LabVIEWNXGParameter.Category property to determine whether the parameter is an array of LabVIEW NXG clusters. The array element prototype is a template from which new elements are copied when the size of the array increases. The array element prototype represents the expected structure of elements of the array. You can also use the array element prototype to create a TestStand custom data type that maps to the LabVIEW NXG cluster.
  //
  // LabVIEWNXGParameter_Get_ArrayElementPrototypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_Get_ArrayElementPrototypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNXGParameterInstance - Returns the cluster prototype for the elements of the array. 
  //
  rpc Get_ArrayElementPrototype(LabVIEWNXGParameter_Get_ArrayElementPrototypeRequest) returns (LabVIEWNXGParameter_Get_ArrayElementPrototypeResponse);
  
  
  // Property: PartiallySpecified
  //
  // Returns a value that indicates whether the parameter is partially specified.
  //
  // A parameter is partially specified if some of the parameter elements specify to use default values while other parameter elements specify expression values.
  //
  // LabVIEWNXGParameter_Get_PartiallySpecifiedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_Get_PartiallySpecifiedResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the parameter is partially specified. 
  //
  rpc Get_PartiallySpecified(LabVIEWNXGParameter_Get_PartiallySpecifiedRequest) returns (LabVIEWNXGParameter_Get_PartiallySpecifiedResponse);
  
  
  // Property: NodeUsesDefaultValue
  //
  // Returns a value that indicates whether the parameter is associated with a LabVIEW NXG property configured to use the default value in a call.
  //
  // Returns True when the parameter is associated with a LabVIEW NXG property configured to use the default value.
  //
  // LabVIEWNXGParameter_Get_NodeUsesDefaultValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_Get_NodeUsesDefaultValueResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the parameter is associated with a LabVIEW NXG property configured to use the default value in a call. 
  //
  rpc Get_NodeUsesDefaultValue(LabVIEWNXGParameter_Get_NodeUsesDefaultValueRequest) returns (LabVIEWNXGParameter_Get_NodeUsesDefaultValueResponse);
  
  
  // Property: ComplexRealPartElement
  //
  // Returns the real element of a complex number or array.
  //
  // This method is valid only for a complex number and array of complex number parameters.
  //
  // LabVIEWNXGParameter_Get_ComplexRealPartElementRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_Get_ComplexRealPartElementResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNXGParameterInstance - Returns the real element of a complex number or array. 
  //
  rpc Get_ComplexRealPartElement(LabVIEWNXGParameter_Get_ComplexRealPartElementRequest) returns (LabVIEWNXGParameter_Get_ComplexRealPartElementResponse);
  
  
  // Property: ComplexImaginaryPartElement
  //
  // Returns the imaginary element of a complex number or array.
  //
  // This method is valid only for a complex number or an array of complex number parameters.
  //
  // LabVIEWNXGParameter_Get_ComplexImaginaryPartElementRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGParameterInstance - The id of the LabVIEWNXGParameter object.
  //
  // LabVIEWNXGParameter_Get_ComplexImaginaryPartElementResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNXGParameterInstance - Returns the imaginary element of a complex number or array. 
  //
  rpc Get_ComplexImaginaryPartElement(LabVIEWNXGParameter_Get_ComplexImaginaryPartElementRequest) returns (LabVIEWNXGParameter_Get_ComplexImaginaryPartElementResponse);
  
  
}
message LabVIEWNXGParameter_AsPropertyObjectRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message LabVIEWNXGParameter_GetDefaultArrayDimensionSizeRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
  // Specifies the zero-based index corresponding to one of the array dimensions.
  int32 dimension = 2;
}

message LabVIEWNXGParameter_GetDefaultArrayDimensionSizeResponse {
  // The return type of the Int32 object.
  int32 returnValue = 1;
}

message LabVIEWNXGParameter_GetArrayIndexRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
  // Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  int32 offset = 2;
}

message LabVIEWNXGParameter_GetArrayIndexResponse {
  // An array index string. Array index strings are a list of numbers enclosed in brackets that index each dimension of the array. For example, the following is an array index for a two dimensional array: [0][1].
  string returnValue = 1;
}

message LabVIEWNXGParameter_GetEnumValuesRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_GetEnumValuesResponse {
  // Returns an array of property objects where each property object represents an enumeration value or a ring control value.
  repeated PropertyObjectInstance returnValue = 1;
}

message LabVIEWNXGParameter_UpdateClusterMappingRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
  // Pass the sequence context that the dialog box uses to evaluate all value expressions. You can use the Engine.NewEditContext method to obtain an edit-time sequence context.
  SequenceContextInstance sequenceContext = 2;
}

message LabVIEWNXGParameter_UpdateClusterMappingResponse {
  // Returns True if the method updates any expression values for the elements of the cluster parameter.
  bool returnValue = 1;
}

message LabVIEWNXGParameter_DisplayCreateCustomDataTypeDialogRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
  // Specifies the sequence context the dialog box uses to obtain information about the sequence file. You can use the Engine.NewEditContext method to obtain an edit-time sequence context.
  // 
  SequenceContextInstance sequenceContext = 2;
}

message LabVIEWNXGParameter_DisplayCreateCustomDataTypeDialogResponse {
  // Returns True if you click OK in the dialog box. False if you click Cancel.
  bool returnValue = 1;
}

message LabVIEWNXGParameter_CreateDefaultArrayElementsRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_CreateDefaultArrayElementsResponse {
  // Returns a value that indicates whether the default array elements were created.
  bool returnValue = 1;
}

message LabVIEWNXGParameter_DeleteArrayElementsRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_DeleteArrayElementsResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message LabVIEWNXGParameter_InsertArrayElementRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
  // Specifies the index at which to insert the array element. This value must be greater than or equal to 0 and less than or equal to the number of array elements.
  int32 index = 2;
}

message LabVIEWNXGParameter_InsertArrayElementResponse {
}

message LabVIEWNXGParameter_DeleteArrayElementRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
  int32 index = 2;
}

message LabVIEWNXGParameter_DeleteArrayElementResponse {
}

message LabVIEWNXGParameter_ExprClusterTypeMismatchRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
  // Specifies the SequenceContext to use to evaluate the parameter expression value.
  SequenceContextInstance sequenceContext = 2;
}

message LabVIEWNXGParameter_ExprClusterTypeMismatchResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message LabVIEWNXGParameter_IsClusterMappingInvalidRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_IsClusterMappingInvalidResponse {
  // Returns True when all the following conditions are true:    * The parameter is a cluster or cluster array    * The argument expression is valid and non-empty    * The argument or cluster mapping of the argument is invalid
  // In all other cases, this method returns False.
  bool returnValue = 1;
  // When this method returns True, this parameter returns the reason why the argument is invalid.
  string reasonNotValid = 2;
}

message LabVIEWNXGParameter_IsParameterMappingValidRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_IsParameterMappingValidResponse {
  // Returns True when all the following conditions are true: (1) the parameter is a cluster or cluster array or enumeration or enumeration array, (2) the argument expression is valid and not empty, (3) the cluster mapping of the argument is valid if the parameter is a cluster, and (4) the argument value is compatible with the enumeration parameter if the parameter is an enumeration.
  // In all other cases, returns False.
  bool returnValue = 1;
  // When this method returns False, this parameter returns an explanation for why the argument is invalid.
  string reasonNotValid = 2;
}

message LabVIEWNXGParameter_Set_UseDefaultValueRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
  // Specifies whether to use the default value of the parameter when calling the VI.
  bool val = 2;
}

message LabVIEWNXGParameter_Set_UseDefaultValueResponse {
}

message LabVIEWNXGParameter_Get_UseDefaultValueRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_Get_UseDefaultValueResponse {
  // Specifies whether to use the default value of the parameter when calling the VI.
  bool returnValue = 1;
}

message LabVIEWNXGParameter_Set_ValueExprRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
  // Specifies an expression to define the argument to pass for the parameter when calling the VI.
  string val = 2;
}

message LabVIEWNXGParameter_Set_ValueExprResponse {
}

message LabVIEWNXGParameter_Get_ValueExprRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_Get_ValueExprResponse {
  // Specifies an expression to define the argument to pass for the parameter when calling the VI.
  string returnValue = 1;
}

message LabVIEWNXGParameter_Get_CategoryRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_Get_CategoryResponse {
  // Returns the group of data types (number, string, and so on) to which this parameter belongs.
  LabVIEWNXGParameterCategories returnValue = 1;
}

message LabVIEWNXGParameter_Get_DirectionRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_Get_DirectionResponse {
  // Returns a value that indicates whether the parameter is an input or output parameter.
  LabVIEWNXGParameterDirections returnValue = 1;
}

message LabVIEWNXGParameter_Get_TypeRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_Get_TypeResponse {
  // Returns the data type of the parameter element, specifically indicating the type of number, string, and so on.
  LabVIEWNXGParameterTypes returnValue = 1;
}

message LabVIEWNXGParameter_Get_WireRequirementRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_Get_WireRequirementResponse {
  // Indicates whether the parameter is required, recommended, or optional.
  LabVIEWNXGParameterWireRequirements returnValue = 1;
}

message LabVIEWNXGParameter_Get_ParameterNameRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_Get_ParameterNameResponse {
  // Returns the name of the parameter in the VI.
  string returnValue = 1;
}

message LabVIEWNXGParameter_Get_DefaultValueRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_Get_DefaultValueResponse {
  // Returns a display string that represents the default value defined for the parameter.
  string returnValue = 1;
}

message LabVIEWNXGParameter_Set_PassAsBinaryStringRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
  // Specifies if TestStand preserves NUL bytes when setting and getting LabVIEW NXG string data.
  bool val = 2;
}

message LabVIEWNXGParameter_Set_PassAsBinaryStringResponse {
}

message LabVIEWNXGParameter_Get_PassAsBinaryStringRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_Get_PassAsBinaryStringResponse {
  // Specifies if TestStand preserves NUL bytes when setting and getting LabVIEW NXG string data.
  bool returnValue = 1;
}

message LabVIEWNXGParameter_Get_UserDataRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_Get_UserDataResponse {
  // Holds a data item you associate with the parameter object.
  PropertyObjectInstance returnValue = 1;
}

message LabVIEWNXGParameter_Get_DisplayTypeRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_Get_DisplayTypeResponse {
  // Returns a localized string that describes the LabVIEW NXG data type for the parameter.
  string returnValue = 1;
}

message LabVIEWNXGParameter_Get_TypeDisplayStringRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_Get_TypeDisplayStringResponse {
  // Returns a string that describes the type of the parameter.
  string returnValue = 1;
}

message LabVIEWNXGParameter_Get_ValidEvaluationTypesRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_Get_ValidEvaluationTypesResponse {
  // Returns the valid types to which this parameter can evaluate.
  EvaluationTypesInstance returnValue = 1;
}

message LabVIEWNXGParameter_Get_ValueExprIsIgnoredRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_Get_ValueExprIsIgnoredResponse {
  // Use this property to determine whether the LabVIEW Adapter ignores the argument value expression when it calls the module. The adapter ignores the argument value expression for parameters that use default values.
  bool returnValue = 1;
}

message LabVIEWNXGParameter_Get_ValueExprIsOptionalRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_Get_ValueExprIsOptionalResponse {
  // Use this property to determine whether the argument value expression is optional. You do not have to specify an optional value expression to call the module successfully. Value expressions for output parameters and value expressions for cluster and array parameters that have parameter elements are optional.
  bool returnValue = 1;
}

message LabVIEWNXGParameter_Get_DescriptionRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_Get_DescriptionResponse {
  // Returns the description of the parameter.
  string returnValue = 1;
}

message LabVIEWNXGParameter_Get_ElementsRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_Get_ElementsResponse {
  // Returns a collection that accesses the members of a parameter that is a cluster, or accesses the elements of a parameter that is an array of clusters.
  LabVIEWNXGParametersInstance returnValue = 1;
}

message LabVIEWNXGParameter_Get_ArrayDimensionsRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_Get_ArrayDimensionsResponse {
  // Returns the number of dimensions for array parameters.
  int32 returnValue = 1;
}

message LabVIEWNXGParameter_Get_GetArrayElementIndexRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_Get_GetArrayElementIndexResponse {
  // Returns the index of the array element as an array index string.
  string returnValue = 1;
}

message LabVIEWNXGParameter_Get_ArrayElementPrototypeRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_Get_ArrayElementPrototypeResponse {
  // Returns the cluster prototype for the elements of the array.
  LabVIEWNXGParameterInstance returnValue = 1;
}

message LabVIEWNXGParameter_Get_PartiallySpecifiedRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_Get_PartiallySpecifiedResponse {
  // Returns a value that indicates whether the parameter is partially specified.
  bool returnValue = 1;
}

message LabVIEWNXGParameter_Get_NodeUsesDefaultValueRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_Get_NodeUsesDefaultValueResponse {
  // Returns a value that indicates whether the parameter is associated with a LabVIEW NXG property configured to use the default value in a call.
  bool returnValue = 1;
}

message LabVIEWNXGParameter_Get_ComplexRealPartElementRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_Get_ComplexRealPartElementResponse {
  // Returns the real element of a complex number or array.
  LabVIEWNXGParameterInstance returnValue = 1;
}

message LabVIEWNXGParameter_Get_ComplexImaginaryPartElementRequest {
  // The id of the LabVIEWNXGParameter object.
  LabVIEWNXGParameterInstance instance = 1;
}

message LabVIEWNXGParameter_Get_ComplexImaginaryPartElementResponse {
  // Returns the imaginary element of a complex number or array.
  LabVIEWNXGParameterInstance returnValue = 1;
}

// LabVIEWNXGProject
//
// Use the objects in the LabVIEWNXGProject class to obtain information about the items present in the LabVIEW NXG project.
//
service LabVIEWNXGProject {
  // Method: GetProjectItems
  //
  // Returns information about the items in the LABVIEW NXG project.
  //
  // Use the LabVIEWNXGModule.GetProjectReference method on the LabVIEW NXG module to get the LabVIEW NXG project reference from which this method obtains the collection of project items for a module.
  //
  // LabVIEWNXGProject_GetProjectItemsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGProjectInstance - The id of the LabVIEWNXGProject object.
  //
  // LabVIEWNXGProject_GetProjectItemsResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNXGProjectItemsInstance - The return type of the LabVIEWNXGProjectItems object.
  //
  rpc GetProjectItems(LabVIEWNXGProject_GetProjectItemsRequest) returns (LabVIEWNXGProject_GetProjectItemsResponse);
  
  

  // Property: Name
  //
  // Returns the name of the LabVIEW NXG project.
  //
  // LabVIEWNXGProject_Get_NameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGProjectInstance - The id of the LabVIEWNXGProject object.
  //
  // LabVIEWNXGProject_Get_NameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the LabVIEW NXG project. 
  //
  rpc Get_Name(LabVIEWNXGProject_Get_NameRequest) returns (LabVIEWNXGProject_Get_NameResponse);
  
  
}
message LabVIEWNXGProjectInstance {
  // Specifies the handle of the LabVIEWNXGProject instance in the server.
  string id = 1;
}

message LabVIEWNXGProjectItemsInstance {
  // Specifies the handle of the LabVIEWNXGProjectItems instance in the server.
  string id = 1;
}
message LabVIEWNXGProject_GetProjectItemsRequest {
  // The id of the LabVIEWNXGProject object.
  LabVIEWNXGProjectInstance instance = 1;
}

message LabVIEWNXGProject_GetProjectItemsResponse {
  // The return type of the LabVIEWNXGProjectItems object.
  LabVIEWNXGProjectItemsInstance returnValue = 1;
}

message LabVIEWNXGProject_Get_NameRequest {
  // The id of the LabVIEWNXGProject object.
  LabVIEWNXGProjectInstance instance = 1;
}

message LabVIEWNXGProject_Get_NameResponse {
  // Returns the name of the LabVIEW NXG project.
  string returnValue = 1;
}

// LabVIEWNXGProjectItems
//
// Use objects from the LabVIEWNXGProjectItems class to configure and obtain project items for a module that uses the LabVIEW NXG Adapter.
//
service LabVIEWNXGProjectItems {
  // Method: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // LabVIEWNXGProjectItems_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNXGProjectItemsInstance - The id of the LabVIEWNXGProjectItems object.
  //    - index: int32 - Specifies the zero-based index of the project item to retrieve.
  //
  // LabVIEWNXGProjectItems_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNXGProjectItemInstance - The return type of the LabVIEWNXGProjectItem object.
  //
  rpc Item(LabVIEWNXGProjectItems_ItemRequest) returns (LabVIEWNXGProjectItems_ItemResponse);
  
  

  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // LabVIEWNXGProjectItems_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGProjectItemsInstance - The id of the LabVIEWNXGProjectItems object.
  //
  // LabVIEWNXGProjectItems_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(LabVIEWNXGProjectItems_Get_CountRequest) returns (LabVIEWNXGProjectItems_Get_CountResponse);
  
  
}
message LabVIEWNXGProjectItemInstance {
  // Specifies the handle of the LabVIEWNXGProjectItem instance in the server.
  string id = 1;
}
message LabVIEWNXGProjectItems_ItemRequest {
  // The id of the LabVIEWNXGProjectItems object.
  LabVIEWNXGProjectItemsInstance instance = 1;
  // Specifies the zero-based index of the project item to retrieve.
  int32 index = 2;
}

message LabVIEWNXGProjectItems_ItemResponse {
  // The return type of the LabVIEWNXGProjectItem object.
  LabVIEWNXGProjectItemInstance returnValue = 1;
}

message LabVIEWNXGProjectItems_Get_CountRequest {
  // The id of the LabVIEWNXGProjectItems object.
  LabVIEWNXGProjectItemsInstance instance = 1;
}

message LabVIEWNXGProjectItems_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// LabVIEWNXGProjectItem
//
// Use the objects in the LabVIEWNXGProjectItem class to obtain project item details such as path, component name, and so on.
//
service LabVIEWNXGProjectItem {
  // Property: ModuleQualifiedName
  //
  // Returns the VI selected from a project in a LabVIEW NXG module. This value specifies the VI that is run when the step is executed in the LabVIEW NXG Development system.
  //
  // LabVIEWNXGProjectItem_Get_ModuleQualifiedNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGProjectItemInstance - The id of the LabVIEWNXGProjectItem object.
  //
  // LabVIEWNXGProjectItem_Get_ModuleQualifiedNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the VI selected from a project in a LabVIEW NXG module. This value specifies the VI that is run when the step is executed in the LabVIEW NXG Development system. 
  //
  rpc Get_ModuleQualifiedName(LabVIEWNXGProjectItem_Get_ModuleQualifiedNameRequest) returns (LabVIEWNXGProjectItem_Get_ModuleQualifiedNameResponse);
  
  
  // Property: Path
  //
  // Returns the absolute path of the LabVIEW NXG project item.
  //
  // LabVIEWNXGProjectItem_Get_PathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGProjectItemInstance - The id of the LabVIEWNXGProjectItem object.
  //
  // LabVIEWNXGProjectItem_Get_PathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the absolute path of the LabVIEW NXG project item. 
  //
  rpc Get_Path(LabVIEWNXGProjectItem_Get_PathRequest) returns (LabVIEWNXGProjectItem_Get_PathResponse);
  
  
  // Property: Type
  //
  // Specifies whether the NXG VI is standalone or part of a LabVIEW NXG component.
  //
  // LabVIEWNXGProjectItem_Get_TypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGProjectItemInstance - The id of the LabVIEWNXGProjectItem object.
  //
  // LabVIEWNXGProjectItem_Get_TypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNXGProjectItemTypes - Specifies whether the NXG VI is standalone or part of a LabVIEW NXG component. 
  //
  rpc Get_Type(LabVIEWNXGProjectItem_Get_TypeRequest) returns (LabVIEWNXGProjectItem_Get_TypeResponse);
  
  
  // Property: ComponentName
  //
  // Returns the component name the VI belongs to, including the .gcomp extension.
  //
  // LabVIEWNXGProjectItem_Get_ComponentNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGProjectItemInstance - The id of the LabVIEWNXGProjectItem object.
  //
  // LabVIEWNXGProjectItem_Get_ComponentNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the component name the VI belongs to, including the .gcomp extension. 
  //
  rpc Get_ComponentName(LabVIEWNXGProjectItem_Get_ComponentNameRequest) returns (LabVIEWNXGProjectItem_Get_ComponentNameResponse);
  
  
  // Property: TargetName
  //
  // Returns the target for which the component (.gcomp) is selected to build.
  //
  // LabVIEWNXGProjectItem_Get_TargetNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGProjectItemInstance - The id of the LabVIEWNXGProjectItem object.
  //
  // LabVIEWNXGProjectItem_Get_TargetNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the target for which the component (.gcomp) is selected to build. 
  //
  rpc Get_TargetName(LabVIEWNXGProjectItem_Get_TargetNameRequest) returns (LabVIEWNXGProjectItem_Get_TargetNameResponse);
  
  
  // Property: HelpDescription
  //
  // Returns the help content for the configured LabVIEW NXG VI.
  //
  // LabVIEWNXGProjectItem_Get_HelpDescriptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGProjectItemInstance - The id of the LabVIEWNXGProjectItem object.
  //
  // LabVIEWNXGProjectItem_Get_HelpDescriptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the help content for the configured LabVIEW NXG VI. 
  //
  rpc Get_HelpDescription(LabVIEWNXGProjectItem_Get_HelpDescriptionRequest) returns (LabVIEWNXGProjectItem_Get_HelpDescriptionResponse);
  
  
}
message LabVIEWNXGProjectItem_Get_ModuleQualifiedNameRequest {
  // The id of the LabVIEWNXGProjectItem object.
  LabVIEWNXGProjectItemInstance instance = 1;
}

message LabVIEWNXGProjectItem_Get_ModuleQualifiedNameResponse {
  // Returns the VI selected from a project in a LabVIEW NXG module. This value specifies the VI that is run when the step is executed in the LabVIEW NXG Development system.
  string returnValue = 1;
}

message LabVIEWNXGProjectItem_Get_PathRequest {
  // The id of the LabVIEWNXGProjectItem object.
  LabVIEWNXGProjectItemInstance instance = 1;
}

message LabVIEWNXGProjectItem_Get_PathResponse {
  // Returns the absolute path of the LabVIEW NXG project item.
  string returnValue = 1;
}

message LabVIEWNXGProjectItem_Get_TypeRequest {
  // The id of the LabVIEWNXGProjectItem object.
  LabVIEWNXGProjectItemInstance instance = 1;
}

message LabVIEWNXGProjectItem_Get_TypeResponse {
  // Specifies whether the NXG VI is standalone or part of a LabVIEW NXG component.
  LabVIEWNXGProjectItemTypes returnValue = 1;
}

message LabVIEWNXGProjectItem_Get_ComponentNameRequest {
  // The id of the LabVIEWNXGProjectItem object.
  LabVIEWNXGProjectItemInstance instance = 1;
}

message LabVIEWNXGProjectItem_Get_ComponentNameResponse {
  // Returns the component name the VI belongs to, including the .gcomp extension.
  string returnValue = 1;
}

message LabVIEWNXGProjectItem_Get_TargetNameRequest {
  // The id of the LabVIEWNXGProjectItem object.
  LabVIEWNXGProjectItemInstance instance = 1;
}

message LabVIEWNXGProjectItem_Get_TargetNameResponse {
  // Returns the target for which the component (.gcomp) is selected to build.
  string returnValue = 1;
}

message LabVIEWNXGProjectItem_Get_HelpDescriptionRequest {
  // The id of the LabVIEWNXGProjectItem object.
  LabVIEWNXGProjectItemInstance instance = 1;
}

message LabVIEWNXGProjectItem_Get_HelpDescriptionResponse {
  // Returns the help content for the configured LabVIEW NXG VI.
  string returnValue = 1;
}

// LabVIEWNXGModule
//
// Use objects from the LabVIEWNXGModule class to specify and obtain LabVIEW NXG Adapter-specific information about the code module that steps or step type substeps execute. Use the Step.Module property to obtain a reference to a LabVIEWNXGModule object. To access the properties and methods of a specific module class, query the Module object for the interface of the module-specific interface you want to acquire.
// 
// Typically, you use this class only when you are writing a sequence editor.
// 
// To access the properties and methods of the Module class, use the LabVIEWNXGModule.AsModule method to obtain an object.
// 
// You can use the Module.LoadPrototype method to load the prototype for the module the step specifies.
// 
//
service LabVIEWNXGModule {
  // Method: AsModule
  //
  // Returns the underlying Module object that represents the LabVIEWNXGModule object.
  //
  // Use the Module object to access properties and methods common to all modules.
  //
  // LabVIEWNXGModule_AsModuleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //
  // LabVIEWNXGModule_AsModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: ModuleInstance - The return type of the Module object.
  //
  rpc AsModule(LabVIEWNXGModule_AsModuleRequest) returns (LabVIEWNXGModule_AsModuleResponse);
  
  
  // Method: LoadVIInfo
  //
  // Loads information about the VI that the module calls, including default values, enumeration values, the expected GLL path and the VI help description.
  //
  // LabVIEWNXGModule_LoadVIInfoRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //
  // LabVIEWNXGModule_LoadVIInfoResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the prototype of the VI specified in the step matches the prototype of the VI on disk and if the specified GLL path matches the expected GLL path for the given project, component and target. 
  //
  rpc LoadVIInfo(LabVIEWNXGModule_LoadVIInfoRequest) returns (LabVIEWNXGModule_LoadVIInfoResponse);
  
  
  // Method: Execute
  //
  // Calls a LabVIEW NXG VI directly without using a step, sequence, or Execution.
  //
  // When you call a LabVIEW NXG module using this method you can evaluate the parameter expressions to determine the argument values or specify the argument values directly using a LabVIEWNXGArguments collection.
  // 
  // To use the parameter value expressions, pass a valid SequenceContext object to the sequenceContextParam to use to evaluate the LabVIEWNXGParameter.ValueExpr expressions.
  // 
  // To pass specific argument values, use the LabVIEWNXGParameters.NewArguments method to create a collection of LabVIEWNXGArgument objects and set the LabVIEWNXGArgument.Value property on each item in the collection and on each item in contained collections like the LabVIEWNXGArgument.Elements collection.
  //
  // LabVIEWNXGModule_ExecuteRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //    - sequenceContextParam: SequenceContextInstance - Specifies the SequenceContext object that this method uses to evaluate each of the LabVIEWNXGParameter.ValueExpr expressions in the module parameters. Pass NULL for this parameter if you pass a LabVIEWNXGArguments collection to the argumentsParam parameter.
  //    - argumentsParam: LabVIEWNXGArgumentsInstance - Specifies the argument collection that contains the argument values to pass to the VI. Pass NULL for this parameter to pass the values obtained from evaluating each of the LabVIEWNXGParameter.ValueExpr expressions in the module parameters.
  //
  // LabVIEWNXGModule_ExecuteResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Execute(LabVIEWNXGModule_ExecuteRequest) returns (LabVIEWNXGModule_ExecuteResponse);
  
  
  // Method: CreateProject
  //
  // Creates a LabVIEW NXG project in the path specified in the LabVIEWNXGModule. If no project is specified in the module, you will be prompted to choose a project path.
  //
  // This method requires the LabVIEW NXG Development System to be installed on the machine.
  //
  // LabVIEWNXGModule_CreateProjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //
  // LabVIEWNXGModule_CreateProjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the module was modified by this method call. 
  //
  rpc CreateProject(LabVIEWNXGModule_CreateProjectRequest) returns (LabVIEWNXGModule_CreateProjectResponse);
  
  
  // Method: EditProject
  //
  // Launches LabVIEW NXG to edit the LabVIEW NXG project associated with this module.
  //
  // LabVIEWNXGModule_EditProjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //
  // LabVIEWNXGModule_EditProjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc EditProject(LabVIEWNXGModule_EditProjectRequest) returns (LabVIEWNXGModule_EditProjectResponse);
  
  
  // Method: DisplaySelectVIDialog
  //
  // Displays the "Select Module from Project"javascript:RefLink('/InfoTopics/DB_Select_VI_From_Project%20_NXG.htm'); or the "Select Module from GLL dialog box"javascript:RefLink('/InfoTopics/DB_Select_Module_From_GLL.html'); that allows a user to select a VI from a project or GLL respectively.
  //
  // The Module Qualified Name or Qualified Name of the selected VI is returned by the dialog. The method displays the Select Module from Project dialog box when the Adapter or step is set to use the LabVIEW NXG Development System and the Select Module from GLL dialog box when the Adapter or step is set to use the LabVIEW NXG Runtime Engine.
  //
  // LabVIEWNXGModule_DisplaySelectVIDialogRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //
  // LabVIEWNXGModule_DisplaySelectVIDialogResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - The return type of the Boolean object.
  //    - selectedVIQualifiedName: strin - The Module Qualified Name of the VI selected from a project or the Qualified Name of the VI selected from a GLL.
  //    - selectedGLLPath: strin - The path of the selected GLL. You can change the selected GLL in the dialog.
  //
  rpc DisplaySelectVIDialog(LabVIEWNXGModule_DisplaySelectVIDialogRequest) returns (LabVIEWNXGModule_DisplaySelectVIDialogResponse);
  
  
  // Method: IsProjectValid
  //
  // Returns a value that indicates whether the specified LabVIEW NXG project path is a valid path and the file was found on disk.
  //
  // LabVIEWNXGModule_IsProjectValidRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //
  // LabVIEWNXGModule_IsProjectValidResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - The return type of the Boolean object.
  //    - errorDescription: strin - Returns a description of the error encountered, if any.
  //
  rpc IsProjectValid(LabVIEWNXGModule_IsProjectValidRequest) returns (LabVIEWNXGModule_IsProjectValidResponse);
  
  
  // Method: GetVIAbsolutePath
  //
  // Returns the absolute path of the VI.
  //
  // LabVIEWNXGModule_GetVIAbsolutePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //
  // LabVIEWNXGModule_GetVIAbsolutePathResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if TestStand finds the file. 
  //    - viAbsolutePath: strin - Returns the absolute path of the VI. If TestStand does not find the VI, this parameter returns an empty string.
  //
  rpc GetVIAbsolutePath(LabVIEWNXGModule_GetVIAbsolutePathRequest) returns (LabVIEWNXGModule_GetVIAbsolutePathResponse);
  
  
  // Method: GetProjectReference
  //
  // Returns a reference to the LabVIEW NXG project the module is configured to use.
  //
  // Use this method with the LabVIEW NXG module to get the LabVIEW NXG project reference from which the LabVIEWNXGProject.GetProjectItems method obtains the collection of project items for a module.
  //
  // LabVIEWNXGModule_GetProjectReferenceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //
  // LabVIEWNXGModule_GetProjectReferenceResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNXGProjectInstance - A reference to the LabVIEW NXG project. 
  //
  rpc GetProjectReference(LabVIEWNXGModule_GetProjectReferenceRequest) returns (LabVIEWNXGModule_GetProjectReferenceResponse);
  
  
  // Method: UpdateModuleFromStep
  //
  // Copies parameter values and other options like use default value, logging enabled, show Front Panel etc. from the old module to the current module.
  //
  // The parameter values and settings are only  copied for parameters that match in name and type when the parameters from the old step are compared to the parameters in the current module. The unmapped parameters are returned in unmappedParameters. Use this step to copy parameter information and other step settings from an old LabVIEW step to the equivalent LabVIEW NXG step.
  //
  // LabVIEWNXGModule_UpdateModuleFromStepRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //    - oldStep: ModuleInstance - The LabVIEW module from which parameter values need to be populated.
  //    - options: int32 - Specifies which step or parameter settings should be copied from the old module.
  //
  // LabVIEWNXGModule_UpdateModuleFromStepResponse - The response message from the server. It provides the output parameters.
  //    - unmappedParameters: repeated strin - Contains the names of those parameters from the old module that did not map to any parameter in the new module.
  //
  rpc UpdateModuleFromStep(LabVIEWNXGModule_UpdateModuleFromStepRequest) returns (LabVIEWNXGModule_UpdateModuleFromStepResponse);
  
  
  // Method: BuildComponent
  //
  // Builds the GLL specified in a LabVIEWNXGModule. The GLL will be re-built if it is not present on disk or it is out of date compared to the corresponding source files.
  //
  // The method requires that the LabVIEW NXG Development System is installed on the machine. The module should also have the project and ModuleQualifiedName of the VI specified.
  //
  // LabVIEWNXGModule_BuildComponentRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //
  // LabVIEWNXGModule_BuildComponentResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the module was modified by this method call. 
  //
  rpc BuildComponent(LabVIEWNXGModule_BuildComponentRequest) returns (LabVIEWNXGModule_BuildComponentResponse);
  
  
  // Method: HavePropertiesChanged
  //
  // Returns the properties of a module that need to update. The methods only checks the properties that have been specified in the options parameter.
  //
  // LabVIEWNXGModule_HavePropertiesChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //    - options: int32 - Specify the properties that need to be checked for changes using the CheckUpdatedStatusOption enum.
  //
  // LabVIEWNXGModule_HavePropertiesChangedResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - A Boolean value that indicates whether the method executed without errors. 
  //    - changedProperties: int3 - A long value that indicates which properties were updated. The value returned can be ORed with enumerators in the GetUpdatedStatusOptions to determine which properties have changed.
  //
  rpc HavePropertiesChanged(LabVIEWNXGModule_HavePropertiesChangedRequest) returns (LabVIEWNXGModule_HavePropertiesChangedResponse);
  
  
  // Method: CreatePropertyNodeVI
  //
  // Configures a LabVIEW NXG step to call the LabVIEW NXG property node specified in the Property Node dialog box.
  //
  // LabVIEWNXGModule_CreatePropertyNodeVIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //
  // LabVIEWNXGModule_CreatePropertyNodeVIResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc CreatePropertyNodeVI(LabVIEWNXGModule_CreatePropertyNodeVIRequest) returns (LabVIEWNXGModule_CreatePropertyNodeVIResponse);
  
  

  // Property: VICallOptions
  //
  // Specifies options for calling the VI of the module.
  //
  // LabVIEWNXGModule_Set_VICallOptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //    - val: int32 - Specifies options for calling the VI of the module. 
  //
  // LabVIEWNXGModule_Set_VICallOptionsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWNXGModule_Get_VICallOptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //
  // LabVIEWNXGModule_Get_VICallOptionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies options for calling the VI of the module. 
  //
  rpc Set_VICallOptions(LabVIEWNXGModule_Set_VICallOptionsRequest) returns (LabVIEWNXGModule_Set_VICallOptionsResponse);
  rpc Get_VICallOptions(LabVIEWNXGModule_Get_VICallOptionsRequest) returns (LabVIEWNXGModule_Get_VICallOptionsResponse);
  
  
  // Property: VIDescription
  //
  // Returns the description of the VI.
  //
  // If no description exists for the VI, this property returns an empty string.
  // The LabVIEW NXG Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the Module.LoadPrototype method before retrieving this property.
  //
  // LabVIEWNXGModule_Get_VIDescriptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //
  // LabVIEWNXGModule_Get_VIDescriptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the description of the VI. 
  //
  rpc Get_VIDescription(LabVIEWNXGModule_Get_VIDescriptionRequest) returns (LabVIEWNXGModule_Get_VIDescriptionResponse);
  
  
  // Property: Parameters
  //
  // Returns the LabVIEWNXGParameters collection that contains a list of the current parameters used as inputs and outputs of the corresponding module.
  //
  // Call the Module.LoadPrototype; method before accessing this property.
  //
  // LabVIEWNXGModule_Get_ParametersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //
  // LabVIEWNXGModule_Get_ParametersResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNXGParametersInstance - Returns the LabVIEWNXGParameters collection that contains a list of the current parameters used as inputs and outputs of the corresponding module. 
  //
  rpc Get_Parameters(LabVIEWNXGModule_Get_ParametersRequest) returns (LabVIEWNXGModule_Get_ParametersResponse);
  
  
  // Property: ProjectPath
  //
  // Specifies the path of the project (.lvproject) containing the VI to execute when the module is run in the LabVIEW NXG Development System.
  //
  // LabVIEWNXGModule_Set_ProjectPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //    - val: string - Specifies the path of the project (.lvproject) containing the VI to execute when the module is run in the LabVIEW NXG Development System. 
  //
  // LabVIEWNXGModule_Set_ProjectPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWNXGModule_Get_ProjectPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //
  // LabVIEWNXGModule_Get_ProjectPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the path of the project (.lvproject) containing the VI to execute when the module is run in the LabVIEW NXG Development System. 
  //
  rpc Set_ProjectPath(LabVIEWNXGModule_Set_ProjectPathRequest) returns (LabVIEWNXGModule_Set_ProjectPathResponse);
  rpc Get_ProjectPath(LabVIEWNXGModule_Get_ProjectPathRequest) returns (LabVIEWNXGModule_Get_ProjectPathResponse);
  
  
  // Property: QualifiedName
  //
  // Specifies the VI selected in a GLL in a LabVIEW NXG module. This value determines which VI from the GLL specified is executed when the module is run in the LabVIEW NXG Runtime Engine. It is the value displayed in the Fully Qualified Name window in the Item tab of the component .gcomp document that contains the VI, when the VI is selected in LabVIEW NXG.
  //
  // LabVIEWNXGModule_Set_QualifiedNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //    - val: string - Specifies the VI selected in a GLL in a LabVIEW NXG module. This value determines which VI from the GLL specified is executed when the module is run in the LabVIEW NXG Runtime Engine. It is the value displayed in the Fully Qualified Name window in the Item tab of the component .gcomp document that contains the VI, when the VI is selected in LabVIEW NXG. 
  //
  // LabVIEWNXGModule_Set_QualifiedNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWNXGModule_Get_QualifiedNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //
  // LabVIEWNXGModule_Get_QualifiedNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the VI selected in a GLL in a LabVIEW NXG module. This value determines which VI from the GLL specified is executed when the module is run in the LabVIEW NXG Runtime Engine. It is the value displayed in the Fully Qualified Name window in the Item tab of the component .gcomp document that contains the VI, when the VI is selected in LabVIEW NXG. 
  //
  rpc Set_QualifiedName(LabVIEWNXGModule_Set_QualifiedNameRequest) returns (LabVIEWNXGModule_Set_QualifiedNameResponse);
  rpc Get_QualifiedName(LabVIEWNXGModule_Get_QualifiedNameRequest) returns (LabVIEWNXGModule_Get_QualifiedNameResponse);
  
  
  // Property: VersionThatWillBeUsedToRunVI
  //
  // 
  //
  // LabVIEWNXGModule_Get_VersionThatWillBeUsedToRunVIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //
  // LabVIEWNXGModule_Get_VersionThatWillBeUsedToRunVIResponse - The response message from the server. It provides the return value.
  //    - returnValue: string -  
  //
  rpc Get_VersionThatWillBeUsedToRunVI(LabVIEWNXGModule_Get_VersionThatWillBeUsedToRunVIRequest) returns (LabVIEWNXGModule_Get_VersionThatWillBeUsedToRunVIResponse);
  
  
  // Property: Checksum
  //
  // 
  //
  // LabVIEWNXGModule_Set_ChecksumRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //    - val: int32 -  
  //
  // LabVIEWNXGModule_Set_ChecksumResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWNXGModule_Get_ChecksumRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //
  // LabVIEWNXGModule_Get_ChecksumResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 -  
  //
  rpc Set_Checksum(LabVIEWNXGModule_Set_ChecksumRequest) returns (LabVIEWNXGModule_Set_ChecksumResponse);
  rpc Get_Checksum(LabVIEWNXGModule_Get_ChecksumRequest) returns (LabVIEWNXGModule_Get_ChecksumResponse);
  
  
  // Property: GLLPath
  //
  // Specifies the path of the GLL specified in the step. The GLL is loaded and run when executing LabVIEWNXGModules in the LabVIEW NXG Runtime Engine.
  //
  // LabVIEWNXGModule_Set_GLLPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //    - val: string - Specifies the path of the GLL specified in the step. The GLL is loaded and run when executing LabVIEWNXGModules in the LabVIEW NXG Runtime Engine. 
  //
  // LabVIEWNXGModule_Set_GLLPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWNXGModule_Get_GLLPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //
  // LabVIEWNXGModule_Get_GLLPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the path of the GLL specified in the step. The GLL is loaded and run when executing LabVIEWNXGModules in the LabVIEW NXG Runtime Engine. 
  //
  rpc Set_GLLPath(LabVIEWNXGModule_Set_GLLPathRequest) returns (LabVIEWNXGModule_Set_GLLPathResponse);
  rpc Get_GLLPath(LabVIEWNXGModule_Get_GLLPathRequest) returns (LabVIEWNXGModule_Get_GLLPathResponse);
  
  
  // Property: NodeTypeName
  //
  // Specifies the LabVIEW NXG I/O Library Type Name when calling a LabVIEW NXG Property Node.
  //
  // LabVIEWNXGModule_Set_NodeTypeNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //    - val: string - Specifies the LabVIEW NXG I/O Library Type Name when calling a LabVIEW NXG Property Node. 
  //
  // LabVIEWNXGModule_Set_NodeTypeNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWNXGModule_Get_NodeTypeNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //
  // LabVIEWNXGModule_Get_NodeTypeNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the LabVIEW NXG I/O Library Type Name when calling a LabVIEW NXG Property Node. 
  //
  rpc Set_NodeTypeName(LabVIEWNXGModule_Set_NodeTypeNameRequest) returns (LabVIEWNXGModule_Set_NodeTypeNameResponse);
  rpc Get_NodeTypeName(LabVIEWNXGModule_Get_NodeTypeNameRequest) returns (LabVIEWNXGModule_Get_NodeTypeNameResponse);
  
  
  // Property: NodeClassName
  //
  // Specifies the LabVIEW NXG I/O Library Class Name when calling a LabVIEW NXG Property Node.
  //
  // LabVIEWNXGModule_Set_NodeClassNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //    - val: string - Specifies the LabVIEW NXG I/O Library Class Name when calling a LabVIEW NXG Property Node. 
  //
  // LabVIEWNXGModule_Set_NodeClassNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWNXGModule_Get_NodeClassNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //
  // LabVIEWNXGModule_Get_NodeClassNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the LabVIEW NXG I/O Library Class Name when calling a LabVIEW NXG Property Node. 
  //
  rpc Set_NodeClassName(LabVIEWNXGModule_Set_NodeClassNameRequest) returns (LabVIEWNXGModule_Set_NodeClassNameResponse);
  rpc Get_NodeClassName(LabVIEWNXGModule_Get_NodeClassNameRequest) returns (LabVIEWNXGModule_Get_NodeClassNameResponse);
  
  
  // Property: NodeIgnoresInternalErrors
  //
  // Indicates that a LabVIEW NXG Property Node should continue to process any remaining properties in the node when it encounters an error while accessing a property.
  //
  // LabVIEWNXGModule_Set_NodeIgnoresInternalErrorsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //    - val: bool - Indicates that a LabVIEW NXG Property Node should continue to process any remaining properties in the node when it encounters an error while accessing a property. 
  //
  // LabVIEWNXGModule_Set_NodeIgnoresInternalErrorsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWNXGModule_Get_NodeIgnoresInternalErrorsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //
  // LabVIEWNXGModule_Get_NodeIgnoresInternalErrorsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Indicates that a LabVIEW NXG Property Node should continue to process any remaining properties in the node when it encounters an error while accessing a property. 
  //
  rpc Set_NodeIgnoresInternalErrors(LabVIEWNXGModule_Set_NodeIgnoresInternalErrorsRequest) returns (LabVIEWNXGModule_Set_NodeIgnoresInternalErrorsResponse);
  rpc Get_NodeIgnoresInternalErrors(LabVIEWNXGModule_Get_NodeIgnoresInternalErrorsRequest) returns (LabVIEWNXGModule_Get_NodeIgnoresInternalErrorsResponse);
  
  
  // Property: NodeProperties
  //
  // Contains the properties to use in a step configured to call a LabVIEW NXG Property Node.
  //
  // LabVIEWNXGModule_Get_NodePropertiesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //
  // LabVIEWNXGModule_Get_NodePropertiesResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNXGNodePropertiesInstance - Contains the properties to use in a step configured to call a LabVIEW NXG Property Node. 
  //
  rpc Get_NodeProperties(LabVIEWNXGModule_Get_NodePropertiesRequest) returns (LabVIEWNXGModule_Get_NodePropertiesResponse);
  
  
  // Property: NodeOperationMode
  //
  // Indicates the mode of operation of the Configure Property Node dialog box for LabVIEW NXG property calls.
  //
  // LabVIEWNXGModule_Set_NodeOperationModeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //    - val: LabVIEWNXGNodeOperationModes - Indicates the mode of operation of the Configure Property Node dialog box for LabVIEW NXG property calls. 
  //
  // LabVIEWNXGModule_Set_NodeOperationModeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWNXGModule_Get_NodeOperationModeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //
  // LabVIEWNXGModule_Get_NodeOperationModeResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNXGNodeOperationModes - Indicates the mode of operation of the Configure Property Node dialog box for LabVIEW NXG property calls. 
  //
  rpc Set_NodeOperationMode(LabVIEWNXGModule_Set_NodeOperationModeRequest) returns (LabVIEWNXGModule_Set_NodeOperationModeResponse);
  rpc Get_NodeOperationMode(LabVIEWNXGModule_Get_NodeOperationModeRequest) returns (LabVIEWNXGModule_Get_NodeOperationModeResponse);
  
  
  // Property: ModuleQualifiedName
  //
  // Specifies the Module Qualified Name of the VI. This value determines the VI to execute when the module is executed in the LabVIEW NXG Development System.
  //
  // LabVIEWNXGModule_Set_ModuleQualifiedNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //    - val: string - Specifies the Module Qualified Name of the VI. This value determines the VI to execute when the module is executed in the LabVIEW NXG Development System. 
  //
  // LabVIEWNXGModule_Set_ModuleQualifiedNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWNXGModule_Get_ModuleQualifiedNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //
  // LabVIEWNXGModule_Get_ModuleQualifiedNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the Module Qualified Name of the VI. This value determines the VI to execute when the module is executed in the LabVIEW NXG Development System. 
  //
  rpc Set_ModuleQualifiedName(LabVIEWNXGModule_Set_ModuleQualifiedNameRequest) returns (LabVIEWNXGModule_Set_ModuleQualifiedNameResponse);
  rpc Get_ModuleQualifiedName(LabVIEWNXGModule_Get_ModuleQualifiedNameRequest) returns (LabVIEWNXGModule_Get_ModuleQualifiedNameResponse);
  
  
  // Property: VITarget
  //
  // Specifies the target for which the component (.gcomp) is selected to build.
  //
  // LabVIEWNXGModule_Set_VITargetRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //    - val: string - Specifies the target for which the component (.gcomp) is selected to build. 
  //
  // LabVIEWNXGModule_Set_VITargetResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWNXGModule_Get_VITargetRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //
  // LabVIEWNXGModule_Get_VITargetResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the target for which the component (.gcomp) is selected to build. 
  //
  rpc Set_VITarget(LabVIEWNXGModule_Set_VITargetRequest) returns (LabVIEWNXGModule_Set_VITargetResponse);
  rpc Get_VITarget(LabVIEWNXGModule_Get_VITargetRequest) returns (LabVIEWNXGModule_Get_VITargetResponse);
  
  
  // Property: QualifiedComponentName
  //
  // Returns the name of the component (.gcomp) containing the VI to execute when the module is run in the LabVIEW NXG Development System.
  //
  // LabVIEWNXGModule_Get_QualifiedComponentNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //
  // LabVIEWNXGModule_Get_QualifiedComponentNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the component (.gcomp) containing the VI to execute when the module is run in the LabVIEW NXG Development System. 
  //
  rpc Get_QualifiedComponentName(LabVIEWNXGModule_Get_QualifiedComponentNameRequest) returns (LabVIEWNXGModule_Get_QualifiedComponentNameResponse);
  
  
  // Property: ComponentName
  //
  // Returns the name of the component (.gcomp) containing the VI to execute when the module is run in the LabVIEW NXG Development System.
  //
  // LabVIEWNXGModule_Get_ComponentNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGModuleInstance - The id of the LabVIEWNXGModule object.
  //
  // LabVIEWNXGModule_Get_ComponentNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the component (.gcomp) containing the VI to execute when the module is run in the LabVIEW NXG Development System. 
  //
  rpc Get_ComponentName(LabVIEWNXGModule_Get_ComponentNameRequest) returns (LabVIEWNXGModule_Get_ComponentNameResponse);
  
  
}
message LabVIEWNXGModuleInstance {
  // Specifies the handle of the LabVIEWNXGModule instance in the server.
  string id = 1;
}

message LabVIEWNXGNodePropertiesInstance {
  // Specifies the handle of the LabVIEWNXGNodeProperties instance in the server.
  string id = 1;
}
message LabVIEWNXGModule_AsModuleRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
}

message LabVIEWNXGModule_AsModuleResponse {
  // The return type of the Module object.
  ModuleInstance returnValue = 1;
}

message LabVIEWNXGModule_LoadVIInfoRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
}

message LabVIEWNXGModule_LoadVIInfoResponse {
  // Returns a value that indicates whether the prototype of the VI specified in the step matches the prototype of the VI on disk and if the specified GLL path matches the expected GLL path for the given project, component and target.
  bool returnValue = 1;
}

message LabVIEWNXGModule_ExecuteRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
  // Specifies the SequenceContext object that this method uses to evaluate each of the LabVIEWNXGParameter.ValueExpr expressions in the module parameters. Pass NULL for this parameter if you pass a LabVIEWNXGArguments collection to the argumentsParam parameter.
  SequenceContextInstance sequenceContextParam = 2;
  // Specifies the argument collection that contains the argument values to pass to the VI. Pass NULL for this parameter to pass the values obtained from evaluating each of the LabVIEWNXGParameter.ValueExpr expressions in the module parameters.
  LabVIEWNXGArgumentsInstance argumentsParam = 3;
}

message LabVIEWNXGModule_ExecuteResponse {
}

message LabVIEWNXGModule_CreateProjectRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
}

message LabVIEWNXGModule_CreateProjectResponse {
  // Returns a value that indicates whether the module was modified by this method call.
  bool returnValue = 1;
}

message LabVIEWNXGModule_EditProjectRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
}

message LabVIEWNXGModule_EditProjectResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message LabVIEWNXGModule_DisplaySelectVIDialogRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
}

message LabVIEWNXGModule_DisplaySelectVIDialogResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
  // The Module Qualified Name of the VI selected from a project or the Qualified Name of the VI selected from a GLL.
  string selectedVIQualifiedName = 2;
  // The path of the selected GLL. You can change the selected GLL in the dialog.
  string selectedGLLPath = 3;
}

message LabVIEWNXGModule_IsProjectValidRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
}

message LabVIEWNXGModule_IsProjectValidResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
  // Returns a description of the error encountered, if any.
  string errorDescription = 2;
}

message LabVIEWNXGModule_GetVIAbsolutePathRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
}

message LabVIEWNXGModule_GetVIAbsolutePathResponse {
  // Returns True if TestStand finds the file.
  bool returnValue = 1;
  // Returns the absolute path of the VI. If TestStand does not find the VI, this parameter returns an empty string.
  string viAbsolutePath = 2;
}

message LabVIEWNXGModule_GetProjectReferenceRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
}

message LabVIEWNXGModule_GetProjectReferenceResponse {
  // A reference to the LabVIEW NXG project.
  LabVIEWNXGProjectInstance returnValue = 1;
}

message LabVIEWNXGModule_UpdateModuleFromStepRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
  // The LabVIEW module from which parameter values need to be populated.
  ModuleInstance oldStep = 2;
  // Specifies which step or parameter settings should be copied from the old module.
  UpdateModuleFromStepOptions options = 3;
}

message LabVIEWNXGModule_UpdateModuleFromStepResponse {
  // Contains the names of those parameters from the old module that did not map to any parameter in the new module.
  repeated string unmappedParameters = 1;
}

message LabVIEWNXGModule_BuildComponentRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
}

message LabVIEWNXGModule_BuildComponentResponse {
  // Returns a value that indicates whether the module was modified by this method call.
  bool returnValue = 1;
}

message LabVIEWNXGModule_HavePropertiesChangedRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
  // Specify the properties that need to be checked for changes using the CheckUpdatedStatusOption enum.
  CheckUpdatedStatusOptions options = 2;
}

message LabVIEWNXGModule_HavePropertiesChangedResponse {
  // A Boolean value that indicates whether the method executed without errors.
  bool returnValue = 1;
  // A long value that indicates which properties were updated. The value returned can be ORed with enumerators in the GetUpdatedStatusOptions to determine which properties have changed.
  GetUpdatedStatusOptions changedProperties = 2;
}

message LabVIEWNXGModule_CreatePropertyNodeVIRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
}

message LabVIEWNXGModule_CreatePropertyNodeVIResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message LabVIEWNXGModule_Set_VICallOptionsRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
  // Specifies options for calling the VI of the module.
  LabVIEWNXGModuleCallOptions val = 2;
}

message LabVIEWNXGModule_Set_VICallOptionsResponse {
}

message LabVIEWNXGModule_Get_VICallOptionsRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
}

message LabVIEWNXGModule_Get_VICallOptionsResponse {
  // Specifies options for calling the VI of the module.
  LabVIEWNXGModuleCallOptions returnValue = 1;
}

message LabVIEWNXGModule_Get_VIDescriptionRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
}

message LabVIEWNXGModule_Get_VIDescriptionResponse {
  // Returns the description of the VI.
  string returnValue = 1;
}

message LabVIEWNXGModule_Get_ParametersRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
}

message LabVIEWNXGModule_Get_ParametersResponse {
  // The collection of parameters.
  LabVIEWNXGParametersInstance returnValue = 1;
}

message LabVIEWNXGModule_Set_ProjectPathRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
  // Specifies the path of the project (.lvproject) containing the VI to execute when the module is run in the LabVIEW NXG Development System.
  string val = 2;
}

message LabVIEWNXGModule_Set_ProjectPathResponse {
}

message LabVIEWNXGModule_Get_ProjectPathRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
}

message LabVIEWNXGModule_Get_ProjectPathResponse {
  // Specifies the path of the project (.lvproject) containing the VI to execute when the module is run in the LabVIEW NXG Development System.
  string returnValue = 1;
}

message LabVIEWNXGModule_Set_QualifiedNameRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
  // Specifies the VI selected in a GLL in a LabVIEW NXG module. This value determines which VI from the GLL specified is executed when the module is run in the LabVIEW NXG Runtime Engine. It is the value displayed in the Fully Qualified Name window in the Item tab of the component .gcomp document that contains the VI, when the VI is selected in LabVIEW NXG.
  string val = 2;
}

message LabVIEWNXGModule_Set_QualifiedNameResponse {
}

message LabVIEWNXGModule_Get_QualifiedNameRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
}

message LabVIEWNXGModule_Get_QualifiedNameResponse {
  // Specifies the VI selected in a GLL in a LabVIEW NXG module. This value determines which VI from the GLL specified is executed when the module is run in the LabVIEW NXG Runtime Engine. It is the value displayed in the Fully Qualified Name window in the Item tab of the component .gcomp document that contains the VI, when the VI is selected in LabVIEW NXG.
  string returnValue = 1;
}

message LabVIEWNXGModule_Get_VersionThatWillBeUsedToRunVIRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
}

message LabVIEWNXGModule_Get_VersionThatWillBeUsedToRunVIResponse {
  // 
  string returnValue = 1;
}

message LabVIEWNXGModule_Set_ChecksumRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
  // 
  int32 val = 2;
}

message LabVIEWNXGModule_Set_ChecksumResponse {
}

message LabVIEWNXGModule_Get_ChecksumRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
}

message LabVIEWNXGModule_Get_ChecksumResponse {
  // 
  int32 returnValue = 1;
}

message LabVIEWNXGModule_Set_GLLPathRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
  // Specifies the path of the GLL specified in the step. The GLL is loaded and run when executing LabVIEWNXGModules in the LabVIEW NXG Runtime Engine.
  string val = 2;
}

message LabVIEWNXGModule_Set_GLLPathResponse {
}

message LabVIEWNXGModule_Get_GLLPathRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
}

message LabVIEWNXGModule_Get_GLLPathResponse {
  // Specifies the path of the GLL specified in the step. The GLL is loaded and run when executing LabVIEWNXGModules in the LabVIEW NXG Runtime Engine.
  string returnValue = 1;
}

message LabVIEWNXGModule_Set_NodeTypeNameRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
  // Specifies the LabVIEW NXG I/O Library Type Name when calling a LabVIEW NXG Property Node.
  string val = 2;
}

message LabVIEWNXGModule_Set_NodeTypeNameResponse {
}

message LabVIEWNXGModule_Get_NodeTypeNameRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
}

message LabVIEWNXGModule_Get_NodeTypeNameResponse {
  // Specifies the LabVIEW NXG I/O Library Type Name when calling a LabVIEW NXG Property Node.
  string returnValue = 1;
}

message LabVIEWNXGModule_Set_NodeClassNameRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
  // Specifies the LabVIEW NXG I/O Library Class Name when calling a LabVIEW NXG Property Node.
  string val = 2;
}

message LabVIEWNXGModule_Set_NodeClassNameResponse {
}

message LabVIEWNXGModule_Get_NodeClassNameRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
}

message LabVIEWNXGModule_Get_NodeClassNameResponse {
  // Specifies the LabVIEW NXG I/O Library Class Name when calling a LabVIEW NXG Property Node.
  string returnValue = 1;
}

message LabVIEWNXGModule_Set_NodeIgnoresInternalErrorsRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
  // Indicates that a LabVIEW NXG Property Node should continue to process any remaining properties in the node when it encounters an error while accessing a property.
  bool val = 2;
}

message LabVIEWNXGModule_Set_NodeIgnoresInternalErrorsResponse {
}

message LabVIEWNXGModule_Get_NodeIgnoresInternalErrorsRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
}

message LabVIEWNXGModule_Get_NodeIgnoresInternalErrorsResponse {
  // Indicates that a LabVIEW NXG Property Node should continue to process any remaining properties in the node when it encounters an error while accessing a property.
  bool returnValue = 1;
}

message LabVIEWNXGModule_Get_NodePropertiesRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
}

message LabVIEWNXGModule_Get_NodePropertiesResponse {
  // Contains the properties to use in a step configured to call a LabVIEW NXG Property Node.
  LabVIEWNXGNodePropertiesInstance returnValue = 1;
}

message LabVIEWNXGModule_Set_NodeOperationModeRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
  // Indicates the mode of operation of the Configure Property Node dialog box for LabVIEW NXG property calls.
  LabVIEWNXGNodeOperationModes val = 2;
}

message LabVIEWNXGModule_Set_NodeOperationModeResponse {
}

message LabVIEWNXGModule_Get_NodeOperationModeRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
}

message LabVIEWNXGModule_Get_NodeOperationModeResponse {
  // Indicates the mode of operation of the Configure Property Node dialog box for LabVIEW NXG property calls.
  LabVIEWNXGNodeOperationModes returnValue = 1;
}

message LabVIEWNXGModule_Set_ModuleQualifiedNameRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
  // Specifies the Module Qualified Name of the VI. This value determines the VI to execute when the module is executed in the LabVIEW NXG Development System.
  string val = 2;
}

message LabVIEWNXGModule_Set_ModuleQualifiedNameResponse {
}

message LabVIEWNXGModule_Get_ModuleQualifiedNameRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
}

message LabVIEWNXGModule_Get_ModuleQualifiedNameResponse {
  // Specifies the Module Qualified Name of the VI. This value determines the VI to execute when the module is executed in the LabVIEW NXG Development System.
  string returnValue = 1;
}

message LabVIEWNXGModule_Set_VITargetRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
  // Specifies the target for which the component (.gcomp) is selected to build.
  string val = 2;
}

message LabVIEWNXGModule_Set_VITargetResponse {
}

message LabVIEWNXGModule_Get_VITargetRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
}

message LabVIEWNXGModule_Get_VITargetResponse {
  // Specifies the target for which the component (.gcomp) is selected to build.
  string returnValue = 1;
}

message LabVIEWNXGModule_Get_QualifiedComponentNameRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
}

message LabVIEWNXGModule_Get_QualifiedComponentNameResponse {
  // Returns the name of the component (.gcomp) containing the VI to execute when the module is run in the LabVIEW NXG Development System.
  string returnValue = 1;
}

message LabVIEWNXGModule_Get_ComponentNameRequest {
  // The id of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance instance = 1;
}

message LabVIEWNXGModule_Get_ComponentNameResponse {
  // Returns the name of the component (.gcomp) containing the VI to execute when the module is run in the LabVIEW NXG Development System.
  string returnValue = 1;
}

// LabVIEWNXGNodeProperties
//
// Use objects from the LabVIEWNXGNodeProperties class to configure and obtain LabVIEWNXGNodeProperties for a module that uses the LabVIEW NXG Adapter. Use the LabVIEWNXGModule.NodeProperties property to obtain the collection of LabVIEWNXGNodeProperties for a module.
//
service LabVIEWNXGNodeProperties {
  // Method: New
  //
  // Adds a new item to the collection.
  //
  // LabVIEWNXGNodeProperties_NewRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNXGNodePropertiesInstance - The id of the LabVIEWNXGNodeProperties object.
  //    - index: int32 - Specifies the zero-based index of the item to add.
  //    - nodePropertyDirection: LabVIEWNXGNodePropertyDirections - Indicates the direction of the property. 0 indicates an input property. 1 indicates an output property.
  //
  // LabVIEWNXGNodeProperties_NewResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc New(LabVIEWNXGNodeProperties_NewRequest) returns (LabVIEWNXGNodeProperties_NewResponse);
  
  
  // Method: Delete
  //
  // Removes the item at the specified index.
  //
  // LabVIEWNXGNodeProperties_DeleteRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNXGNodePropertiesInstance - The id of the LabVIEWNXGNodeProperties object.
  //    - index: int32 - Specifies the zero-based index of the item to delete.
  //
  // LabVIEWNXGNodeProperties_DeleteResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Delete(LabVIEWNXGNodeProperties_DeleteRequest) returns (LabVIEWNXGNodeProperties_DeleteResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // LabVIEWNXGNodeProperties_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGNodePropertiesInstance - The id of the LabVIEWNXGNodeProperties object.
  //
  // LabVIEWNXGNodeProperties_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(LabVIEWNXGNodeProperties_ClearRequest) returns (LabVIEWNXGNodeProperties_ClearResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // LabVIEWNXGNodeProperties_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNXGNodePropertiesInstance - The id of the LabVIEWNXGNodeProperties object.
  //    - index: int32 - Specifies the zero-based index.
  //
  // LabVIEWNXGNodeProperties_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNXGNodePropertyInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(LabVIEWNXGNodeProperties_Get_ItemRequest) returns (LabVIEWNXGNodeProperties_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // LabVIEWNXGNodeProperties_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGNodePropertiesInstance - The id of the LabVIEWNXGNodeProperties object.
  //
  // LabVIEWNXGNodeProperties_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(LabVIEWNXGNodeProperties_Get_CountRequest) returns (LabVIEWNXGNodeProperties_Get_CountResponse);
  
  
}
message LabVIEWNXGNodePropertyInstance {
  // Specifies the handle of the LabVIEWNXGNodeProperty instance in the server.
  string id = 1;
}
message LabVIEWNXGNodeProperties_NewRequest {
  // The id of the LabVIEWNXGNodeProperties object.
  LabVIEWNXGNodePropertiesInstance instance = 1;
  // Specifies the zero-based index of the item to add.
  int32 index = 2;
  // Specifies the LongName of a particular property.
  string LongName = 3;
  // Specifies the DataName of a particular property.
  string DataName = 4;
  // Specifies the unique ID of a particular property.
  string UniqueID = 5;
  // Indicates the direction of the property. 0 indicates an input property. 1 indicates an output property.
  LabVIEWNXGNodePropertyDirections nodePropertyDirection = 6;
}

message LabVIEWNXGNodeProperties_NewResponse {
}

message LabVIEWNXGNodeProperties_DeleteRequest {
  // The id of the LabVIEWNXGNodeProperties object.
  LabVIEWNXGNodePropertiesInstance instance = 1;
  // Specifies the zero-based index of the item to delete.
  int32 index = 2;
}

message LabVIEWNXGNodeProperties_DeleteResponse {
}

message LabVIEWNXGNodeProperties_ClearRequest {
  // The id of the LabVIEWNXGNodeProperties object.
  LabVIEWNXGNodePropertiesInstance instance = 1;
}

message LabVIEWNXGNodeProperties_ClearResponse {
}

message LabVIEWNXGNodeProperties_Get_ItemRequest {
  // The id of the LabVIEWNXGNodeProperties object.
  LabVIEWNXGNodePropertiesInstance instance = 1;
  // Specifies the zero-based index.
  optional int32 index = 2;
}

message LabVIEWNXGNodeProperties_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  LabVIEWNXGNodePropertyInstance returnValue = 1;
}

message LabVIEWNXGNodeProperties_Get_CountRequest {
  // The id of the LabVIEWNXGNodeProperties object.
  LabVIEWNXGNodePropertiesInstance instance = 1;
}

message LabVIEWNXGNodeProperties_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// LabVIEWNXGNodeProperty
//
// Use objects from the LabVIEWNXGNodeProperty class to configure and obtain LabVIEWNXGNodeProperty-specific information for an item in the LabVIEWNXGNodeProperties collection class.
//
service LabVIEWNXGNodeProperty {
  // Method: AsPropertyObject
  //
  // Returns the underlying PropertyObject that represents the LabVIEWNXGPropertyNode object.
  //
  // Use the PropertyObject to modify, add, or remove custom properties of the object.
  //
  // LabVIEWNXGNodeProperty_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGNodePropertyInstance - The id of the LabVIEWNXGNodeProperty object.
  //
  // LabVIEWNXGNodeProperty_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(LabVIEWNXGNodeProperty_AsPropertyObjectRequest) returns (LabVIEWNXGNodeProperty_AsPropertyObjectResponse);
  
  

  // Property: LongName
  //
  // Specifies the LongName of a particular property.
  //
  // LabVIEWNXGNodeProperty_Set_LongNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGNodePropertyInstance - The id of the LabVIEWNXGNodeProperty object.
  //    - val: string - Specifies the LongName of a particular property. 
  //
  // LabVIEWNXGNodeProperty_Set_LongNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWNXGNodeProperty_Get_LongNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGNodePropertyInstance - The id of the LabVIEWNXGNodeProperty object.
  //
  // LabVIEWNXGNodeProperty_Get_LongNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the LongName of a particular property. 
  //
  rpc Set_LongName(LabVIEWNXGNodeProperty_Set_LongNameRequest) returns (LabVIEWNXGNodeProperty_Set_LongNameResponse);
  rpc Get_LongName(LabVIEWNXGNodeProperty_Get_LongNameRequest) returns (LabVIEWNXGNodeProperty_Get_LongNameResponse);
  
  
  // Property: DataName
  //
  // Specifies the DataName of a particular property.
  //
  // LabVIEWNXGNodeProperty_Set_DataNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGNodePropertyInstance - The id of the LabVIEWNXGNodeProperty object.
  //    - val: string - Specifies the DataName of a particular property. 
  //
  // LabVIEWNXGNodeProperty_Set_DataNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWNXGNodeProperty_Get_DataNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGNodePropertyInstance - The id of the LabVIEWNXGNodeProperty object.
  //
  // LabVIEWNXGNodeProperty_Get_DataNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the DataName of a particular property. 
  //
  rpc Set_DataName(LabVIEWNXGNodeProperty_Set_DataNameRequest) returns (LabVIEWNXGNodeProperty_Set_DataNameResponse);
  rpc Get_DataName(LabVIEWNXGNodeProperty_Get_DataNameRequest) returns (LabVIEWNXGNodeProperty_Get_DataNameResponse);
  
  
  // Property: Direction
  //
  // Indicates the direction of the property. Use the followign constants with this data type:
  //
  // LabVIEWNXGNodeProperty_Set_DirectionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGNodePropertyInstance - The id of the LabVIEWNXGNodeProperty object.
  //    - val: LabVIEWNXGNodePropertyDirections - Indicates the direction of the property. Use the followign constants with this data type: 
  //
  // LabVIEWNXGNodeProperty_Set_DirectionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWNXGNodeProperty_Get_DirectionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGNodePropertyInstance - The id of the LabVIEWNXGNodeProperty object.
  //
  // LabVIEWNXGNodeProperty_Get_DirectionResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNXGNodePropertyDirections - Indicates the direction of the property. Use the followign constants with this data type: 
  //
  rpc Set_Direction(LabVIEWNXGNodeProperty_Set_DirectionRequest) returns (LabVIEWNXGNodeProperty_Set_DirectionResponse);
  rpc Get_Direction(LabVIEWNXGNodeProperty_Get_DirectionRequest) returns (LabVIEWNXGNodeProperty_Get_DirectionResponse);
  
  
  // Property: UniqueID
  //
  // Specifies the UniqueID of a particular property.
  //
  // LabVIEWNXGNodeProperty_Set_UniqueIDRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGNodePropertyInstance - The id of the LabVIEWNXGNodeProperty object.
  //    - val: string - Specifies the UniqueID of a particular property. 
  //
  // LabVIEWNXGNodeProperty_Set_UniqueIDResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWNXGNodeProperty_Get_UniqueIDRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGNodePropertyInstance - The id of the LabVIEWNXGNodeProperty object.
  //
  // LabVIEWNXGNodeProperty_Get_UniqueIDResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the UniqueID of a particular property. 
  //
  rpc Set_UniqueID(LabVIEWNXGNodeProperty_Set_UniqueIDRequest) returns (LabVIEWNXGNodeProperty_Set_UniqueIDResponse);
  rpc Get_UniqueID(LabVIEWNXGNodeProperty_Get_UniqueIDRequest) returns (LabVIEWNXGNodeProperty_Get_UniqueIDResponse);
  
  
}
message LabVIEWNXGNodeProperty_AsPropertyObjectRequest {
  // The id of the LabVIEWNXGNodeProperty object.
  LabVIEWNXGNodePropertyInstance instance = 1;
}

message LabVIEWNXGNodeProperty_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message LabVIEWNXGNodeProperty_Set_LongNameRequest {
  // The id of the LabVIEWNXGNodeProperty object.
  LabVIEWNXGNodePropertyInstance instance = 1;
  // Specifies the LongName of a particular property.
  string val = 2;
}

message LabVIEWNXGNodeProperty_Set_LongNameResponse {
}

message LabVIEWNXGNodeProperty_Get_LongNameRequest {
  // The id of the LabVIEWNXGNodeProperty object.
  LabVIEWNXGNodePropertyInstance instance = 1;
}

message LabVIEWNXGNodeProperty_Get_LongNameResponse {
  // Specifies the LongName of a particular property.
  string returnValue = 1;
}

message LabVIEWNXGNodeProperty_Set_DataNameRequest {
  // The id of the LabVIEWNXGNodeProperty object.
  LabVIEWNXGNodePropertyInstance instance = 1;
  // Specifies the DataName of a particular property.
  string val = 2;
}

message LabVIEWNXGNodeProperty_Set_DataNameResponse {
}

message LabVIEWNXGNodeProperty_Get_DataNameRequest {
  // The id of the LabVIEWNXGNodeProperty object.
  LabVIEWNXGNodePropertyInstance instance = 1;
}

message LabVIEWNXGNodeProperty_Get_DataNameResponse {
  // Specifies the DataName of a particular property.
  string returnValue = 1;
}

message LabVIEWNXGNodeProperty_Set_DirectionRequest {
  // The id of the LabVIEWNXGNodeProperty object.
  LabVIEWNXGNodePropertyInstance instance = 1;
  // Indicates the direction of the property. Use the followign constants with this data type:
  LabVIEWNXGNodePropertyDirections val = 2;
}

message LabVIEWNXGNodeProperty_Set_DirectionResponse {
}

message LabVIEWNXGNodeProperty_Get_DirectionRequest {
  // The id of the LabVIEWNXGNodeProperty object.
  LabVIEWNXGNodePropertyInstance instance = 1;
}

message LabVIEWNXGNodeProperty_Get_DirectionResponse {
  // Indicates the direction of the property. Use the followign constants with this data type:
  LabVIEWNXGNodePropertyDirections returnValue = 1;
}

message LabVIEWNXGNodeProperty_Set_UniqueIDRequest {
  // The id of the LabVIEWNXGNodeProperty object.
  LabVIEWNXGNodePropertyInstance instance = 1;
  // Specifies the UniqueID of a particular property.
  string val = 2;
}

message LabVIEWNXGNodeProperty_Set_UniqueIDResponse {
}

message LabVIEWNXGNodeProperty_Get_UniqueIDRequest {
  // The id of the LabVIEWNXGNodeProperty object.
  LabVIEWNXGNodePropertyInstance instance = 1;
}

message LabVIEWNXGNodeProperty_Get_UniqueIDResponse {
  // Specifies the UniqueID of a particular property.
  string returnValue = 1;
}

// PythonAdapter
//
// Use objects from the PythonAdapter class to configure and obtain Python Adapter-specific information about the module adapter. Call the Engine.GetAdapter or Engine.GetAdapterByKeyName method to obtain a reference to the adapter object.
// To access the properties and methods of the Adapter class, use the PythonAdapter.AsAdapter method to obtain an object.
// 
//
service PythonAdapter {
  // Method: AsAdapter
  //
  // Returns the underlying module Adapter object that represents the PythonAdapter object.
  //
  // Use the underlying module Adapter object to access properties and methods common to all adapters.
  //
  // PythonAdapter_AsAdapterRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonAdapterInstance - The id of the PythonAdapter object.
  //
  // PythonAdapter_AsAdapterResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdapterInstance - The return type of the Adapter object.
  //
  rpc AsAdapter(PythonAdapter_AsAdapterRequest) returns (PythonAdapter_AsAdapterResponse);
  
  
  // Method: NewModule
  //
  // Creates and returns a new PythonModule object you can call directly without using a step, sequence, or execution.
  //
  // PythonAdapter_NewModuleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonAdapterInstance - The id of the PythonAdapter object.
  //
  // PythonAdapter_NewModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: PythonModuleInstance - The return type of the PythonModule object.
  //
  rpc NewModule(PythonAdapter_NewModuleRequest) returns (PythonAdapter_NewModuleResponse);
  
  
  // Method: GetClassNames
  //
  // 
  //
  // PythonAdapter_GetClassNamesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PythonAdapterInstance - The id of the PythonAdapter object.
  //    - pyVersion: string - 
  //    - pyVirtualEnvironmentAbsolutePath: string - 
  //    - moduleAbsolutePath: string - 
  //
  // PythonAdapter_GetClassNamesResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated string - The return type of the String[] object.
  //
  rpc GetClassNames(PythonAdapter_GetClassNamesRequest) returns (PythonAdapter_GetClassNamesResponse);
  
  
  // Method: GetFunctionAndAttributes
  //
  // 
  //
  // PythonAdapter_GetFunctionAndAttributesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PythonAdapterInstance - The id of the PythonAdapter object.
  //    - pyVersion: string - 
  //    - pyVirtualEnvironmentAbsolutePath: string - 
  //    - moduleAbsolutePath: string - 
  //
  // PythonAdapter_GetFunctionAndAttributesResponse - The response message from the server. It provides the output parameters.
  //    - functionNames: repeated strin - 
  //    - attributeNames: repeated strin - 
  //
  rpc GetFunctionAndAttributes(PythonAdapter_GetFunctionAndAttributesRequest) returns (PythonAdapter_GetFunctionAndAttributesResponse);
  
  
  // Method: ValidatePythonVersionAndVirtualEnvironmentPath
  //
  // Validates the specified Python version and virtual environment path.
  //
  // The method generates an error when the validation of the Python version or virtual environment path fails.
  //
  // PythonAdapter_ValidatePythonVersionAndVirtualEnvironmentPathRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PythonAdapterInstance - The id of the PythonAdapter object.
  //    - pyVersion: string - Specifies the Python version to use for validating the Python module.
  //    - pyVirtualEnvironmentAbsolutePath: string - Specifies the absolute path of the Python virtual environment to use for validating the Python module. Leave this field empty to use the default environment.
  //
  // PythonAdapter_ValidatePythonVersionAndVirtualEnvironmentPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ValidatePythonVersionAndVirtualEnvironmentPath(PythonAdapter_ValidatePythonVersionAndVirtualEnvironmentPathRequest) returns (PythonAdapter_ValidatePythonVersionAndVirtualEnvironmentPathResponse);
  
  
  // Method: ValidateModule
  //
  // Validates whether the Python Adapter can import the specified Python module.
  //
  // The method generates an error when the validation of the Python module fails.
  //
  // PythonAdapter_ValidateModuleRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PythonAdapterInstance - The id of the PythonAdapter object.
  //    - pyVersion: string - Specifies the Python version to use for validating the Python module.
  //    - pyVirtualEnvironmentAbsolutePath: string - Specifies the absolute path of the Python virtual environment to use for validating the Python module. Leave this field empty to use the default environment.
  //    - moduleAbsolutePath: string - Specifies the absolute path of the Python module to validate.
  //
  // PythonAdapter_ValidateModuleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ValidateModule(PythonAdapter_ValidateModuleRequest) returns (PythonAdapter_ValidateModuleResponse);
  
  
  // Method: GetPythonSearchPaths
  //
  // 
  //
  // PythonAdapter_GetPythonSearchPathsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PythonAdapterInstance - The id of the PythonAdapter object.
  //    - pyVersion: string - 
  //    - pyVirtualEnvironmentAbsolutePath: string - 
  //
  // PythonAdapter_GetPythonSearchPathsResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated string - The return type of the String[] object.
  //
  rpc GetPythonSearchPaths(PythonAdapter_GetPythonSearchPathsRequest) returns (PythonAdapter_GetPythonSearchPathsResponse);
  
  
  // Method: GetExcludeFromObject
  //
  // Returns True if the specified type definition property is excluded when passing instances of the type definition between TestStand and the Python module.
  //
  // PythonAdapter_GetExcludeFromObjectRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PythonAdapterInstance - The id of the PythonAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //
  // PythonAdapter_GetExcludeFromObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc GetExcludeFromObject(PythonAdapter_GetExcludeFromObjectRequest) returns (PythonAdapter_GetExcludeFromObjectResponse);
  
  
  // Method: SetExcludeFromObject
  //
  // Specifies whether the type definition property is excluded when passing instances of the type definition between TestStand and the Python module.
  //
  // PythonAdapter_SetExcludeFromObjectRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PythonAdapterInstance - The id of the PythonAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //    - excludeFromObject: bool - Set this parameter to True to exclude the corresponding property. Otherwise, set this parameter to False.
  //
  // PythonAdapter_SetExcludeFromObjectResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetExcludeFromObject(PythonAdapter_SetExcludeFromObjectRequest) returns (PythonAdapter_SetExcludeFromObjectResponse);
  
  
  // Method: GetEnumTypeMapping
  //
  // Returns the Python module path and enumeration name for the type definition and property lookup string you specify.
  //
  // PythonAdapter_GetEnumTypeMappingRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PythonAdapterInstance - The id of the PythonAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if PropertyObject is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //
  // PythonAdapter_GetEnumTypeMappingResponse - The response message from the server. It provides the output parameters.
  //    - enumName: strin - Returns the name of the Python enumeration mapped to the TestStand enumeration type definition.
  //
  rpc GetEnumTypeMapping(PythonAdapter_GetEnumTypeMappingRequest) returns (PythonAdapter_GetEnumTypeMappingResponse);
  
  
  // Method: SetEnumTypeMapping
  //
  // Specifies the Python module path and enumeration name to map to the TestStand enumeration type definition.
  //
  // PythonAdapter_SetEnumTypeMappingRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PythonAdapterInstance - The id of the PythonAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if PropertyObject is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //    - enumName: string - Specifies the name of the Python enumeration to map to the TestStand enumeration type definition.
  //
  // PythonAdapter_SetEnumTypeMappingResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetEnumTypeMapping(PythonAdapter_SetEnumTypeMappingRequest) returns (PythonAdapter_SetEnumTypeMappingResponse);
  
  
  // Method: GetParameterCategoryInObject
  //
  // Returns a value that indicates how TestStand passes the property to the Python module.
  //
  // PythonAdapter_GetParameterCategoryInObjectRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PythonAdapterInstance - The id of the PythonAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if PropertyObject is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //
  // PythonAdapter_GetParameterCategoryInObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PythonParameterCategories - The return type of the PythonParameterCategories object.
  //
  rpc GetParameterCategoryInObject(PythonAdapter_GetParameterCategoryInObjectRequest) returns (PythonAdapter_GetParameterCategoryInObjectResponse);
  
  
  // Method: SetParameterCategoryInObject
  //
  // Specifies how TestStand passes a property to the Python module.
  //
  // PythonAdapter_SetParameterCategoryInObjectRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PythonAdapterInstance - The id of the PythonAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if PropertyObject is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //    - pythonParameterCategory: PythonParameterCategories - Specifies how TestStand passes the property to the Python module.
  //
  // PythonAdapter_SetParameterCategoryInObjectResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetParameterCategoryInObject(PythonAdapter_SetParameterCategoryInObjectRequest) returns (PythonAdapter_SetParameterCategoryInObjectResponse);
  
  

  // Property: PythonVersion
  //
  // Specifies the Python version to use for executing Python modules. Format the version number as @keycode(major version number).@keycode(minor version number), such as 2.7 or 3.6.
  //
  // Use this setting for a Python step only when you set the Python interpreter session for the step to use the Adapter settings.
  // Note: Make sure the specified version of CPythonInterpreter is installed before using it for execution.
  //
  // PythonAdapter_Set_PythonVersionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonAdapterInstance - The id of the PythonAdapter object.
  //    - propertyValue: string - Specifies the Python version to use for executing Python modules. Format the version number as @keycode(major version number).@keycode(minor version number), such as 2.7 or 3.6. 
  //
  // PythonAdapter_Set_PythonVersionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PythonAdapter_Get_PythonVersionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonAdapterInstance - The id of the PythonAdapter object.
  //
  // PythonAdapter_Get_PythonVersionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the Python version to use for executing Python modules. Format the version number as @keycode(major version number).@keycode(minor version number), such as 2.7 or 3.6. 
  //
  rpc Set_PythonVersion(PythonAdapter_Set_PythonVersionRequest) returns (PythonAdapter_Set_PythonVersionResponse);
  rpc Get_PythonVersion(PythonAdapter_Get_PythonVersionRequest) returns (PythonAdapter_Get_PythonVersionResponse);
  
  
  // Property: PythonVirtualEnvironmentPath
  //
  // The Python virtual environment directory that the Python virtualenv tool created. Leave this field empty to use the default environment.
  //
  // Use this setting for a Python step only when you set the Python interpreter session for the step to use the Adapter settings.
  //
  // PythonAdapter_Set_PythonVirtualEnvironmentPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonAdapterInstance - The id of the PythonAdapter object.
  //    - propertyValue: string - The Python virtual environment directory that the Python virtualenv tool created. Leave this field empty to use the default environment. 
  //
  // PythonAdapter_Set_PythonVirtualEnvironmentPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PythonAdapter_Get_PythonVirtualEnvironmentPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonAdapterInstance - The id of the PythonAdapter object.
  //
  // PythonAdapter_Get_PythonVirtualEnvironmentPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The Python virtual environment directory that the Python virtualenv tool created. Leave this field empty to use the default environment. 
  //
  rpc Set_PythonVirtualEnvironmentPath(PythonAdapter_Set_PythonVirtualEnvironmentPathRequest) returns (PythonAdapter_Set_PythonVirtualEnvironmentPathResponse);
  rpc Get_PythonVirtualEnvironmentPath(PythonAdapter_Get_PythonVirtualEnvironmentPathRequest) returns (PythonAdapter_Get_PythonVirtualEnvironmentPathResponse);
  
  
  // Property: InterpreterSessionScope
  //
  // Specifies the Python interpreter session to use for executing Python modules.
  //
  // Use this setting for a Python step only when you set the Python interpreter session for the step to use the Adapter settings.
  //
  // PythonAdapter_Set_InterpreterSessionScopeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonAdapterInstance - The id of the PythonAdapter object.
  //    - propertyValue: PythonInterpreterSessionScopes - Specifies the Python interpreter session to use for executing Python modules. 
  //
  // PythonAdapter_Set_InterpreterSessionScopeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PythonAdapter_Get_InterpreterSessionScopeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonAdapterInstance - The id of the PythonAdapter object.
  //
  // PythonAdapter_Get_InterpreterSessionScopeResponse - The response message from the server. It provides the return value.
  //    - returnValue: PythonInterpreterSessionScopes - Specifies the Python interpreter session to use for executing Python modules. 
  //
  rpc Set_InterpreterSessionScope(PythonAdapter_Set_InterpreterSessionScopeRequest) returns (PythonAdapter_Set_InterpreterSessionScopeResponse);
  rpc Get_InterpreterSessionScope(PythonAdapter_Get_InterpreterSessionScopeRequest) returns (PythonAdapter_Get_InterpreterSessionScopeResponse);
  
  
  // Property: DisplayConsoleForInterpreterSessions
  //
  // Displays the console for the Python interpreter session in which code modules are executed.
  //
  // Avoid closing the Python interpreter session console when executing the Python code module. Closing the console will close the Python interpreter session, which could produce errors. You can safely close the console by calling Unload All Modules.
  //
  // PythonAdapter_Set_DisplayConsoleForInterpreterSessionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonAdapterInstance - The id of the PythonAdapter object.
  //    - propertyValue: bool - Displays the console for the Python interpreter session in which code modules are executed. 
  //
  // PythonAdapter_Set_DisplayConsoleForInterpreterSessionsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PythonAdapter_Get_DisplayConsoleForInterpreterSessionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonAdapterInstance - The id of the PythonAdapter object.
  //
  // PythonAdapter_Get_DisplayConsoleForInterpreterSessionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Displays the console for the Python interpreter session in which code modules are executed. 
  //
  rpc Set_DisplayConsoleForInterpreterSessions(PythonAdapter_Set_DisplayConsoleForInterpreterSessionsRequest) returns (PythonAdapter_Set_DisplayConsoleForInterpreterSessionsResponse);
  rpc Get_DisplayConsoleForInterpreterSessions(PythonAdapter_Get_DisplayConsoleForInterpreterSessionsRequest) returns (PythonAdapter_Get_DisplayConsoleForInterpreterSessionsResponse);
  
  
  // Property: PythonExecutablePath
  //
  // Specifies the Python executable to use to perform step into debugging operations on Python modules.
  //
  // The version of the Python executable must match the PythonVersion.
  //
  // PythonAdapter_Set_PythonExecutablePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonAdapterInstance - The id of the PythonAdapter object.
  //    - propertyValue: string - Specifies the Python executable to use to perform step into debugging operations on Python modules. 
  //
  // PythonAdapter_Set_PythonExecutablePathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PythonAdapter_Get_PythonExecutablePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonAdapterInstance - The id of the PythonAdapter object.
  //
  // PythonAdapter_Get_PythonExecutablePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the Python executable to use to perform step into debugging operations on Python modules. 
  //
  rpc Set_PythonExecutablePath(PythonAdapter_Set_PythonExecutablePathRequest) returns (PythonAdapter_Set_PythonExecutablePathResponse);
  rpc Get_PythonExecutablePath(PythonAdapter_Get_PythonExecutablePathRequest) returns (PythonAdapter_Get_PythonExecutablePathResponse);
  
  
  // Property: DebugJustMyCode
  //
  // Specifies whether you want to debug installed libraries when you step into a Python code module.
  //
  // PythonAdapter_Set_DebugJustMyCodeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonAdapterInstance - The id of the PythonAdapter object.
  //    - propertyValue: bool - Specifies whether you want to debug installed libraries when you step into a Python code module. 
  //
  // PythonAdapter_Set_DebugJustMyCodeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PythonAdapter_Get_DebugJustMyCodeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonAdapterInstance - The id of the PythonAdapter object.
  //
  // PythonAdapter_Get_DebugJustMyCodeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether you want to debug installed libraries when you step into a Python code module. 
  //
  rpc Set_DebugJustMyCode(PythonAdapter_Set_DebugJustMyCodeRequest) returns (PythonAdapter_Set_DebugJustMyCodeResponse);
  rpc Get_DebugJustMyCode(PythonAdapter_Get_DebugJustMyCodeRequest) returns (PythonAdapter_Get_DebugJustMyCodeResponse);
  
  
  // Property: EnableDebugging
  //
  // Enables step into debugging operations when executing a Python module.
  //
  // You must install Visual Studio code to step into Python modules.
  //
  // PythonAdapter_Set_EnableDebuggingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonAdapterInstance - The id of the PythonAdapter object.
  //    - propertyValue: bool - Enables step into debugging operations when executing a Python module. 
  //
  // PythonAdapter_Set_EnableDebuggingResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PythonAdapter_Get_EnableDebuggingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonAdapterInstance - The id of the PythonAdapter object.
  //
  // PythonAdapter_Get_EnableDebuggingResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Enables step into debugging operations when executing a Python module. 
  //
  rpc Set_EnableDebugging(PythonAdapter_Set_EnableDebuggingRequest) returns (PythonAdapter_Set_EnableDebuggingResponse);
  rpc Get_EnableDebugging(PythonAdapter_Get_EnableDebuggingRequest) returns (PythonAdapter_Get_EnableDebuggingResponse);
  
  
}
message PythonAdapterInstance {
  // Specifies the handle of the PythonAdapter instance in the server.
  string id = 1;
}

message PythonModuleInstance {
  // Specifies the handle of the PythonModule instance in the server.
  string id = 1;
}
message PythonAdapter_AsAdapterRequest {
  // The id of the PythonAdapter object.
  PythonAdapterInstance instance = 1;
}

message PythonAdapter_AsAdapterResponse {
  // The return type of the Adapter object.
  AdapterInstance returnValue = 1;
}

message PythonAdapter_NewModuleRequest {
  // The id of the PythonAdapter object.
  PythonAdapterInstance instance = 1;
}

message PythonAdapter_NewModuleResponse {
  // The return type of the PythonModule object.
  PythonModuleInstance returnValue = 1;
}

message PythonAdapter_GetClassNamesRequest {
  // The id of the PythonAdapter object.
  PythonAdapterInstance instance = 1;
  // 
  string pyVersion = 2;
  // 
  string pyVirtualEnvironmentAbsolutePath = 3;
  // 
  string moduleAbsolutePath = 4;
}

message PythonAdapter_GetClassNamesResponse {
  // The return type of the String[] object.
  repeated string returnValue = 1;
}

message PythonAdapter_GetFunctionAndAttributesRequest {
  // The id of the PythonAdapter object.
  PythonAdapterInstance instance = 1;
  // 
  string pyVersion = 2;
  // 
  string pyVirtualEnvironmentAbsolutePath = 3;
  // 
  string moduleAbsolutePath = 4;
  // 
  PythonOperationScopes OperationScope = 5;
  // 
  string ClassName = 6;
}

message PythonAdapter_GetFunctionAndAttributesResponse {
  // 
  repeated string functionNames = 1;
  // 
  repeated string attributeNames = 2;
}

message PythonAdapter_ValidatePythonVersionAndVirtualEnvironmentPathRequest {
  // The id of the PythonAdapter object.
  PythonAdapterInstance instance = 1;
  // Specifies the Python version to use for validating the Python module.
  string pyVersion = 2;
  // Specifies the absolute path of the Python virtual environment to use for validating the Python module. Leave this field empty to use the default environment.
  string pyVirtualEnvironmentAbsolutePath = 3;
}

message PythonAdapter_ValidatePythonVersionAndVirtualEnvironmentPathResponse {
}

message PythonAdapter_ValidateModuleRequest {
  // The id of the PythonAdapter object.
  PythonAdapterInstance instance = 1;
  // Specifies the Python version to use for validating the Python module.
  string pyVersion = 2;
  // Specifies the absolute path of the Python virtual environment to use for validating the Python module. Leave this field empty to use the default environment.
  string pyVirtualEnvironmentAbsolutePath = 3;
  // Specifies the absolute path of the Python module to validate.
  string moduleAbsolutePath = 4;
}

message PythonAdapter_ValidateModuleResponse {
}

message PythonAdapter_GetPythonSearchPathsRequest {
  // The id of the PythonAdapter object.
  PythonAdapterInstance instance = 1;
  // 
  string pyVersion = 2;
  // 
  string pyVirtualEnvironmentAbsolutePath = 3;
}

message PythonAdapter_GetPythonSearchPathsResponse {
  // The return type of the String[] object.
  repeated string returnValue = 1;
}

message PythonAdapter_GetExcludeFromObjectRequest {
  // The id of the PythonAdapter object.
  PythonAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
}

message PythonAdapter_GetExcludeFromObjectResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message PythonAdapter_SetExcludeFromObjectRequest {
  // The id of the PythonAdapter object.
  PythonAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
  // Set this parameter to True to exclude the corresponding property. Otherwise, set this parameter to False.
  bool excludeFromObject = 4;
}

message PythonAdapter_SetExcludeFromObjectResponse {
}

message PythonAdapter_GetEnumTypeMappingRequest {
  // The id of the PythonAdapter object.
  PythonAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if PropertyObject is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
}

message PythonAdapter_GetEnumTypeMappingResponse {
  // Returns the path to the Python module.
  string ModulePath = 1;
  // Returns the name of the Python enumeration mapped to the TestStand enumeration type definition.
  string enumName = 2;
}

message PythonAdapter_SetEnumTypeMappingRequest {
  // The id of the PythonAdapter object.
  PythonAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if PropertyObject is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
  // Specifies the path to the Python module.
  string ModulePath = 4;
  // Specifies the name of the Python enumeration to map to the TestStand enumeration type definition.
  string enumName = 5;
}

message PythonAdapter_SetEnumTypeMappingResponse {
}

message PythonAdapter_GetParameterCategoryInObjectRequest {
  // The id of the PythonAdapter object.
  PythonAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if PropertyObject is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
}

message PythonAdapter_GetParameterCategoryInObjectResponse {
  // The return type of the PythonParameterCategories object.
  PythonParameterCategories returnValue = 1;
}

message PythonAdapter_SetParameterCategoryInObjectRequest {
  // The id of the PythonAdapter object.
  PythonAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if PropertyObject is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
  // Specifies how TestStand passes the property to the Python module.
  PythonParameterCategories pythonParameterCategory = 4;
}

message PythonAdapter_SetParameterCategoryInObjectResponse {
}

message PythonAdapter_Set_PythonVersionRequest {
  // The id of the PythonAdapter object.
  PythonAdapterInstance instance = 1;
  // Specifies the Python version to use for executing Python modules. Format the version number as @keycode(major version number).@keycode(minor version number), such as 2.7 or 3.6.
  string propertyValue = 2;
}

message PythonAdapter_Set_PythonVersionResponse {
}

message PythonAdapter_Get_PythonVersionRequest {
  // The id of the PythonAdapter object.
  PythonAdapterInstance instance = 1;
}

message PythonAdapter_Get_PythonVersionResponse {
  // Specifies the Python version to use for executing Python modules. Format the version number as @keycode(major version number).@keycode(minor version number), such as 2.7 or 3.6.
  string returnValue = 1;
}

message PythonAdapter_Set_PythonVirtualEnvironmentPathRequest {
  // The id of the PythonAdapter object.
  PythonAdapterInstance instance = 1;
  // The Python virtual environment directory that the Python virtualenv tool created. Leave this field empty to use the default environment.
  string propertyValue = 2;
}

message PythonAdapter_Set_PythonVirtualEnvironmentPathResponse {
}

message PythonAdapter_Get_PythonVirtualEnvironmentPathRequest {
  // The id of the PythonAdapter object.
  PythonAdapterInstance instance = 1;
}

message PythonAdapter_Get_PythonVirtualEnvironmentPathResponse {
  // The Python virtual environment directory that the Python virtualenv tool created. Leave this field empty to use the default environment.
  string returnValue = 1;
}

message PythonAdapter_Set_InterpreterSessionScopeRequest {
  // The id of the PythonAdapter object.
  PythonAdapterInstance instance = 1;
  // Specifies the Python interpreter session to use for executing Python modules.
  PythonInterpreterSessionScopes propertyValue = 2;
}

message PythonAdapter_Set_InterpreterSessionScopeResponse {
}

message PythonAdapter_Get_InterpreterSessionScopeRequest {
  // The id of the PythonAdapter object.
  PythonAdapterInstance instance = 1;
}

message PythonAdapter_Get_InterpreterSessionScopeResponse {
  // Specifies the Python interpreter session to use for executing Python modules.
  PythonInterpreterSessionScopes returnValue = 1;
}

message PythonAdapter_Set_DisplayConsoleForInterpreterSessionsRequest {
  // The id of the PythonAdapter object.
  PythonAdapterInstance instance = 1;
  // Displays the console for the Python interpreter session in which code modules are executed.
  bool propertyValue = 2;
}

message PythonAdapter_Set_DisplayConsoleForInterpreterSessionsResponse {
}

message PythonAdapter_Get_DisplayConsoleForInterpreterSessionsRequest {
  // The id of the PythonAdapter object.
  PythonAdapterInstance instance = 1;
}

message PythonAdapter_Get_DisplayConsoleForInterpreterSessionsResponse {
  // Displays the console for the Python interpreter session in which code modules are executed.
  bool returnValue = 1;
}

message PythonAdapter_Set_PythonExecutablePathRequest {
  // The id of the PythonAdapter object.
  PythonAdapterInstance instance = 1;
  // Specifies the Python executable to use to perform step into debugging operations on Python modules.
  string propertyValue = 2;
}

message PythonAdapter_Set_PythonExecutablePathResponse {
}

message PythonAdapter_Get_PythonExecutablePathRequest {
  // The id of the PythonAdapter object.
  PythonAdapterInstance instance = 1;
}

message PythonAdapter_Get_PythonExecutablePathResponse {
  // Specifies the Python executable to use to perform step into debugging operations on Python modules.
  string returnValue = 1;
}

message PythonAdapter_Set_DebugJustMyCodeRequest {
  // The id of the PythonAdapter object.
  PythonAdapterInstance instance = 1;
  // Specifies whether you want to debug installed libraries when you step into a Python code module.
  bool propertyValue = 2;
}

message PythonAdapter_Set_DebugJustMyCodeResponse {
}

message PythonAdapter_Get_DebugJustMyCodeRequest {
  // The id of the PythonAdapter object.
  PythonAdapterInstance instance = 1;
}

message PythonAdapter_Get_DebugJustMyCodeResponse {
  // Specifies whether you want to debug installed libraries when you step into a Python code module.
  bool returnValue = 1;
}

message PythonAdapter_Set_EnableDebuggingRequest {
  // The id of the PythonAdapter object.
  PythonAdapterInstance instance = 1;
  // Enables step into debugging operations when executing a Python module.
  bool propertyValue = 2;
}

message PythonAdapter_Set_EnableDebuggingResponse {
}

message PythonAdapter_Get_EnableDebuggingRequest {
  // The id of the PythonAdapter object.
  PythonAdapterInstance instance = 1;
}

message PythonAdapter_Get_EnableDebuggingResponse {
  // Enables step into debugging operations when executing a Python module.
  bool returnValue = 1;
}

// PythonModule
//
// Use objects from the PythonModule class to specify and obtain Python Adapter-specific information about the code module that steps or step type substeps execute. Use the Step.Module property to obtain a reference to a PythonModule object. To access the properties and methods of a specific module class, query the Module object for the interface of the module-specific interface you want to acquire.
// Typically, you use this class only when you are writing a sequence editor.
// To access the properties and methods of the Module class, use the PythonModule.AsModule method to obtain an object.
//
service PythonModule {
  // Method: AsModule
  //
  // Returns the underlying Module object that represents the PythonModule object.
  //
  // Use the Module object to access properties and methods common to all modules.
  //
  // PythonModule_AsModuleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //
  // PythonModule_AsModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: ModuleInstance - The return type of the Module object.
  //
  rpc AsModule(PythonModule_AsModuleRequest) returns (PythonModule_AsModuleResponse);
  
  
  // Method: Execute
  //
  // Use this method to call a Python code module directly without using a step, sequence, or execution.
  //
  // When you execute a Python module using this method, you can either evaluate the parameter expressions to determine the argument values or specify the argument values directly using a PythonArguments collection. Create the PythonArguments collection using the PythonModule.NewArguments method.
  // To use the parameter value expressions, class instance expression and interpreter reference expression, pass a valid SequenceContext object to the sequenceContextParam you want to use to evaluate the expressions.
  // To pass specific values for the expressions, use the PythonModule.NewArguments method and set the values for each item.
  //
  // PythonModule_ExecuteRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //    - sequenceContextParam: SequenceContextInstance - Specifies the SequenceContext object that this method uses to evaluate each of the PythonParameter.ValueExpr expressions in the module parameters. Pass NULL for this parameter if you pass a PythonArguments object to the arguments parameter.
  //    - arguments: PythonArgumentsInstance - Specifies the arguments to pass to the function. Pass NULL for this parameter to pass the values obtained from evaluating each of the PythonParameter.ValueExpr expressions in the module parameters.
  //
  // PythonModule_ExecuteResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Execute(PythonModule_ExecuteRequest) returns (PythonModule_ExecuteResponse);
  
  
  // Method: NewArguments
  //
  // Creates and returns a new PythonArguments object. Use this object to pass the argument, interpreter reference, and class reference values to the PythonModule object using the PythonModule.Execute method.
  //
  // The new PythonArguments collection contains the same number of items as the corresponding PythonModule.Parameters collection.
  // To pass an argument value to a parameter, set the PythonArgument.Value property to an item in the PythonArguments collection that has the same index as the parameter in the PythonParameters collection.
  //
  // PythonModule_NewArgumentsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //
  // PythonModule_NewArgumentsResponse - The response message from the server. It provides the return value.
  //    - returnValue: PythonArgumentsInstance - The return type of the PythonArguments object.
  //
  rpc NewArguments(PythonModule_NewArgumentsRequest) returns (PythonModule_NewArgumentsResponse);
  
  

  // Property: Parameters
  //
  // Returns a PythonParameters collection  for the specified operation in the Python module. The collection contains a list of the current parameters used as inputs and the return values for the specified operation.
  //
  // You must obtain the PythonParameters collection before you can add or modify a parameter.
  //
  // PythonModule_Get_ParametersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //
  // PythonModule_Get_ParametersResponse - The response message from the server. It provides the return value.
  //    - returnValue: PythonParametersInstance - Returns a PythonParameters collection  for the specified operation in the Python module. The collection contains a list of the current parameters used as inputs and the return values for the specified operation. 
  //
  rpc Get_Parameters(PythonModule_Get_ParametersRequest) returns (PythonModule_Get_ParametersResponse);
  
  
  // Property: PythonVersion
  //
  // Specifies the Python version to use for executing Python modules. Format the version number as @keycode(major version number).@keycode(minor version number), such as 2.7 or 3.6.
  //
  // PythonModule_Set_PythonVersionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //    - propertyValue: string - Specifies the Python version to use for executing Python modules. Format the version number as @keycode(major version number).@keycode(minor version number), such as 2.7 or 3.6. 
  //
  // PythonModule_Set_PythonVersionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PythonModule_Get_PythonVersionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //
  // PythonModule_Get_PythonVersionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the Python version to use for executing Python modules. Format the version number as @keycode(major version number).@keycode(minor version number), such as 2.7 or 3.6. 
  //
  rpc Set_PythonVersion(PythonModule_Set_PythonVersionRequest) returns (PythonModule_Set_PythonVersionResponse);
  rpc Get_PythonVersion(PythonModule_Get_PythonVersionRequest) returns (PythonModule_Get_PythonVersionResponse);
  
  
  // Property: PythonVirtualEnvironmentPath
  //
  // The Python virtual environment directory that the Python virtualenv tool created. Leave this field empty to use the default environment.
  //
  // PythonModule_Set_PythonVirtualEnvironmentPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //    - propertyValue: string - The Python virtual environment directory that the Python virtualenv tool created. Leave this field empty to use the default environment. 
  //
  // PythonModule_Set_PythonVirtualEnvironmentPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PythonModule_Get_PythonVirtualEnvironmentPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //
  // PythonModule_Get_PythonVirtualEnvironmentPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The Python virtual environment directory that the Python virtualenv tool created. Leave this field empty to use the default environment. 
  //
  rpc Set_PythonVirtualEnvironmentPath(PythonModule_Set_PythonVirtualEnvironmentPathRequest) returns (PythonModule_Set_PythonVirtualEnvironmentPathResponse);
  rpc Get_PythonVirtualEnvironmentPath(PythonModule_Get_PythonVirtualEnvironmentPathRequest) returns (PythonModule_Get_PythonVirtualEnvironmentPathResponse);
  
  
  // Property: InterpreterSessionScope
  //
  // The Python interpreter session to use for executing the specified operation in the Python module.
  //
  // PythonModule_Set_InterpreterSessionScopeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //    - propertyValue: PythonInterpreterSessionScopes - The Python interpreter session to use for executing the specified operation in the Python module. 
  //
  // PythonModule_Set_InterpreterSessionScopeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PythonModule_Get_InterpreterSessionScopeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //
  // PythonModule_Get_InterpreterSessionScopeResponse - The response message from the server. It provides the return value.
  //    - returnValue: PythonInterpreterSessionScopes - The Python interpreter session to use for executing the specified operation in the Python module. 
  //
  rpc Set_InterpreterSessionScope(PythonModule_Set_InterpreterSessionScopeRequest) returns (PythonModule_Set_InterpreterSessionScopeResponse);
  rpc Get_InterpreterSessionScope(PythonModule_Get_InterpreterSessionScopeRequest) returns (PythonModule_Get_InterpreterSessionScopeResponse);
  
  
  // Property: InterpreterReferenceExpr
  //
  // The location of the interpreter session to use (stored in a TestStand object reference variable).
  //
  // If the location contains a valid Python interpreter reference, TestStand uses the Python interpreter to execute the code module. If the location is empty, TestStand creates a temporary Python interpreter session to execute the Python module.
  //
  // PythonModule_Set_InterpreterReferenceExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //    - propertyValue: string - The location of the interpreter session to use (stored in a TestStand object reference variable). 
  //
  // PythonModule_Set_InterpreterReferenceExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PythonModule_Get_InterpreterReferenceExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //
  // PythonModule_Get_InterpreterReferenceExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The location of the interpreter session to use (stored in a TestStand object reference variable). 
  //
  rpc Set_InterpreterReferenceExpr(PythonModule_Set_InterpreterReferenceExprRequest) returns (PythonModule_Set_InterpreterReferenceExprResponse);
  rpc Get_InterpreterReferenceExpr(PythonModule_Get_InterpreterReferenceExprRequest) returns (PythonModule_Get_InterpreterReferenceExprResponse);
  
  
  // Property: CreateInterpreterSessionIfDoesNotExist
  //
  // If True, creates a Python interpreter session and stores it in the location the interpreter reference specifies, if the object specified in the interpreter reference doesn't already contain the required Python interpreter session.
  //
  // PythonModule_Set_CreateInterpreterSessionIfDoesNotExistRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //    - propertyValue: bool - If True, creates a Python interpreter session and stores it in the location the interpreter reference specifies, if the object specified in the interpreter reference doesn't already contain the required Python interpreter session. 
  //
  // PythonModule_Set_CreateInterpreterSessionIfDoesNotExistResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PythonModule_Get_CreateInterpreterSessionIfDoesNotExistRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //
  // PythonModule_Get_CreateInterpreterSessionIfDoesNotExistResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - If True, creates a Python interpreter session and stores it in the location the interpreter reference specifies, if the object specified in the interpreter reference doesn't already contain the required Python interpreter session. 
  //
  rpc Set_CreateInterpreterSessionIfDoesNotExist(PythonModule_Set_CreateInterpreterSessionIfDoesNotExistRequest) returns (PythonModule_Set_CreateInterpreterSessionIfDoesNotExistResponse);
  rpc Get_CreateInterpreterSessionIfDoesNotExist(PythonModule_Get_CreateInterpreterSessionIfDoesNotExistRequest) returns (PythonModule_Get_CreateInterpreterSessionIfDoesNotExistResponse);
  
  
  // Property: ModulePath
  //
  // The path of the Python module to execute.
  //
  // PythonModule_Set_ModulePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //    - propertyValue: string - The path of the Python module to execute. 
  //
  // PythonModule_Set_ModulePathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PythonModule_Get_ModulePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //
  // PythonModule_Get_ModulePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The path of the Python module to execute. 
  //
  rpc Set_ModulePath(PythonModule_Set_ModulePathRequest) returns (PythonModule_Set_ModulePathResponse);
  rpc Get_ModulePath(PythonModule_Get_ModulePathRequest) returns (PythonModule_Get_ModulePathResponse);
  
  
  // Property: OperationType
  //
  // The type of operation to perform when executing the Python module.
  //
  // PythonModule_Set_OperationTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //    - propertyValue: PythonOperationTypes - The type of operation to perform when executing the Python module. 
  //
  // PythonModule_Set_OperationTypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PythonModule_Get_OperationTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //
  // PythonModule_Get_OperationTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: PythonOperationTypes - The type of operation to perform when executing the Python module. 
  //
  rpc Set_OperationType(PythonModule_Set_OperationTypeRequest) returns (PythonModule_Set_OperationTypeResponse);
  rpc Get_OperationType(PythonModule_Get_OperationTypeRequest) returns (PythonModule_Get_OperationTypeResponse);
  
  
  // Property: OperationScope
  //
  // The scope of the operation to execute in the Python module.
  //
  // PythonModule_Set_OperationScopeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //    - propertyValue: PythonOperationScopes - The scope of the operation to execute in the Python module. 
  //
  // PythonModule_Set_OperationScopeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PythonModule_Get_OperationScopeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //
  // PythonModule_Get_OperationScopeResponse - The response message from the server. It provides the return value.
  //    - returnValue: PythonOperationScopes - The scope of the operation to execute in the Python module. 
  //
  rpc Set_OperationScope(PythonModule_Set_OperationScopeRequest) returns (PythonModule_Set_OperationScopeResponse);
  rpc Get_OperationScope(PythonModule_Get_OperationScopeRequest) returns (PythonModule_Get_OperationScopeResponse);
  
  
  // Property: ClassName
  //
  // Specifies the name of the class containing the function or attribute.
  //
  // PythonModule_Set_ClassNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //    - propertyValue: string - Specifies the name of the class containing the function or attribute. 
  //
  // PythonModule_Set_ClassNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PythonModule_Get_ClassNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //
  // PythonModule_Get_ClassNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the name of the class containing the function or attribute. 
  //
  rpc Set_ClassName(PythonModule_Set_ClassNameRequest) returns (PythonModule_Set_ClassNameResponse);
  rpc Get_ClassName(PythonModule_Get_ClassNameRequest) returns (PythonModule_Get_ClassNameResponse);
  
  
  // Property: ClassInstanceLocationExpr
  //
  // The location of the Python class instance (stored in a TestStand object reference variable).
  //
  // PythonModule_Set_ClassInstanceLocationExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //    - propertyValue: string - The location of the Python class instance (stored in a TestStand object reference variable). 
  //
  // PythonModule_Set_ClassInstanceLocationExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PythonModule_Get_ClassInstanceLocationExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //
  // PythonModule_Get_ClassInstanceLocationExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The location of the Python class instance (stored in a TestStand object reference variable). 
  //
  rpc Set_ClassInstanceLocationExpr(PythonModule_Set_ClassInstanceLocationExprRequest) returns (PythonModule_Set_ClassInstanceLocationExprResponse);
  rpc Get_ClassInstanceLocationExpr(PythonModule_Get_ClassInstanceLocationExprRequest) returns (PythonModule_Get_ClassInstanceLocationExprResponse);
  
  
  // Property: FunctionOrAttributeName
  //
  // The name of the function to execute, or the name of the attribute to get or set.
  //
  // PythonModule_Set_FunctionOrAttributeNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //    - propertyValue: string - The name of the function to execute, or the name of the attribute to get or set. 
  //
  // PythonModule_Set_FunctionOrAttributeNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PythonModule_Get_FunctionOrAttributeNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //
  // PythonModule_Get_FunctionOrAttributeNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The name of the function to execute, or the name of the attribute to get or set. 
  //
  rpc Set_FunctionOrAttributeName(PythonModule_Set_FunctionOrAttributeNameRequest) returns (PythonModule_Set_FunctionOrAttributeNameResponse);
  rpc Get_FunctionOrAttributeName(PythonModule_Get_FunctionOrAttributeNameRequest) returns (PythonModule_Get_FunctionOrAttributeNameResponse);
  
  
  // Property: UseAdapterSettingsForInterpreterSession
  //
  // If True, this property uses the Python version, Python virtual environment path and Python interpreter session configured in the adapter settings.
  //
  // PythonModule_Set_UseAdapterSettingsForInterpreterSessionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //    - propertyValue: bool - If True, this property uses the Python version, Python virtual environment path and Python interpreter session configured in the adapter settings. 
  //
  // PythonModule_Set_UseAdapterSettingsForInterpreterSessionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PythonModule_Get_UseAdapterSettingsForInterpreterSessionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //
  // PythonModule_Get_UseAdapterSettingsForInterpreterSessionResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - If True, this property uses the Python version, Python virtual environment path and Python interpreter session configured in the adapter settings. 
  //
  rpc Set_UseAdapterSettingsForInterpreterSession(PythonModule_Set_UseAdapterSettingsForInterpreterSessionRequest) returns (PythonModule_Set_UseAdapterSettingsForInterpreterSessionResponse);
  rpc Get_UseAdapterSettingsForInterpreterSession(PythonModule_Get_UseAdapterSettingsForInterpreterSessionRequest) returns (PythonModule_Get_UseAdapterSettingsForInterpreterSessionResponse);
  
  
  // Property: DefaultParameterCategoryForArray
  //
  // Specifies how TestStand passes an array of numbers to the Python module. Set the option to either PythonParamCategory_List or PythonParamCategory_NumPyArray.
  //
  // TestStand uses the option when you set the Python parameter type to Dynamic or when you specify an unstructured container containing an array of numbers as a parameter.
  //
  // PythonModule_Set_DefaultParameterCategoryForArrayRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //    - propertyValue: PythonParameterCategories - Specifies how TestStand passes an array of numbers to the Python module. Set the option to either PythonParamCategory_List or PythonParamCategory_NumPyArray. 
  //
  // PythonModule_Set_DefaultParameterCategoryForArrayResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PythonModule_Get_DefaultParameterCategoryForArrayRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonModuleInstance - The id of the PythonModule object.
  //
  // PythonModule_Get_DefaultParameterCategoryForArrayResponse - The response message from the server. It provides the return value.
  //    - returnValue: PythonParameterCategories - Specifies how TestStand passes an array of numbers to the Python module. Set the option to either PythonParamCategory_List or PythonParamCategory_NumPyArray. 
  //
  rpc Set_DefaultParameterCategoryForArray(PythonModule_Set_DefaultParameterCategoryForArrayRequest) returns (PythonModule_Set_DefaultParameterCategoryForArrayResponse);
  rpc Get_DefaultParameterCategoryForArray(PythonModule_Get_DefaultParameterCategoryForArrayRequest) returns (PythonModule_Get_DefaultParameterCategoryForArrayResponse);
  
  
}
message PythonArgumentsInstance {
  // Specifies the handle of the PythonArguments instance in the server.
  string id = 1;
}

message PythonParametersInstance {
  // Specifies the handle of the PythonParameters instance in the server.
  string id = 1;
}
message PythonModule_AsModuleRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
}

message PythonModule_AsModuleResponse {
  // The return type of the Module object.
  ModuleInstance returnValue = 1;
}

message PythonModule_ExecuteRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
  // Specifies the SequenceContext object that this method uses to evaluate each of the PythonParameter.ValueExpr expressions in the module parameters. Pass NULL for this parameter if you pass a PythonArguments object to the arguments parameter.
  SequenceContextInstance sequenceContextParam = 2;
  // Specifies the arguments to pass to the function. Pass NULL for this parameter to pass the values obtained from evaluating each of the PythonParameter.ValueExpr expressions in the module parameters.
  PythonArgumentsInstance arguments = 3;
}

message PythonModule_ExecuteResponse {
}

message PythonModule_NewArgumentsRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
}

message PythonModule_NewArgumentsResponse {
  // The return type of the PythonArguments object.
  PythonArgumentsInstance returnValue = 1;
}

message PythonModule_Get_ParametersRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
}

message PythonModule_Get_ParametersResponse {
  // Returns a PythonParameters collection  for the specified operation in the Python module. The collection contains a list of the current parameters used as inputs and the return values for the specified operation.
  PythonParametersInstance returnValue = 1;
}

message PythonModule_Set_PythonVersionRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
  // Specifies the Python version to use for executing Python modules. Format the version number as @keycode(major version number).@keycode(minor version number), such as 2.7 or 3.6.
  string propertyValue = 2;
}

message PythonModule_Set_PythonVersionResponse {
}

message PythonModule_Get_PythonVersionRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
}

message PythonModule_Get_PythonVersionResponse {
  // Specifies the Python version to use for executing Python modules. Format the version number as @keycode(major version number).@keycode(minor version number), such as 2.7 or 3.6.
  string returnValue = 1;
}

message PythonModule_Set_PythonVirtualEnvironmentPathRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
  // The Python virtual environment directory that the Python virtualenv tool created. Leave this field empty to use the default environment.
  string propertyValue = 2;
}

message PythonModule_Set_PythonVirtualEnvironmentPathResponse {
}

message PythonModule_Get_PythonVirtualEnvironmentPathRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
}

message PythonModule_Get_PythonVirtualEnvironmentPathResponse {
  // The Python virtual environment directory that the Python virtualenv tool created. Leave this field empty to use the default environment.
  string returnValue = 1;
}

message PythonModule_Set_InterpreterSessionScopeRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
  // The Python interpreter session to use for executing the specified operation in the Python module.
  PythonInterpreterSessionScopes propertyValue = 2;
}

message PythonModule_Set_InterpreterSessionScopeResponse {
}

message PythonModule_Get_InterpreterSessionScopeRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
}

message PythonModule_Get_InterpreterSessionScopeResponse {
  // The Python interpreter session to use for executing the specified operation in the Python module.
  PythonInterpreterSessionScopes returnValue = 1;
}

message PythonModule_Set_InterpreterReferenceExprRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
  // The location of the interpreter session to use (stored in a TestStand object reference variable).
  string propertyValue = 2;
}

message PythonModule_Set_InterpreterReferenceExprResponse {
}

message PythonModule_Get_InterpreterReferenceExprRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
}

message PythonModule_Get_InterpreterReferenceExprResponse {
  // The location of the interpreter session to use (stored in a TestStand object reference variable).
  string returnValue = 1;
}

message PythonModule_Set_CreateInterpreterSessionIfDoesNotExistRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
  // If True, creates a Python interpreter session and stores it in the location the interpreter reference specifies, if the object specified in the interpreter reference doesn't already contain the required Python interpreter session.
  bool propertyValue = 2;
}

message PythonModule_Set_CreateInterpreterSessionIfDoesNotExistResponse {
}

message PythonModule_Get_CreateInterpreterSessionIfDoesNotExistRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
}

message PythonModule_Get_CreateInterpreterSessionIfDoesNotExistResponse {
  // If True, creates a Python interpreter session and stores it in the location the interpreter reference specifies, if the object specified in the interpreter reference doesn't already contain the required Python interpreter session.
  bool returnValue = 1;
}

message PythonModule_Set_ModulePathRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
  // The path of the Python module to execute.
  string propertyValue = 2;
}

message PythonModule_Set_ModulePathResponse {
}

message PythonModule_Get_ModulePathRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
}

message PythonModule_Get_ModulePathResponse {
  // The path of the Python module to execute.
  string returnValue = 1;
}

message PythonModule_Set_OperationTypeRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
  // The type of operation to perform when executing the Python module.
  PythonOperationTypes propertyValue = 2;
}

message PythonModule_Set_OperationTypeResponse {
}

message PythonModule_Get_OperationTypeRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
}

message PythonModule_Get_OperationTypeResponse {
  // The type of operation to perform when executing the Python module.
  PythonOperationTypes returnValue = 1;
}

message PythonModule_Set_OperationScopeRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
  // The scope of the operation to execute in the Python module.
  PythonOperationScopes propertyValue = 2;
}

message PythonModule_Set_OperationScopeResponse {
}

message PythonModule_Get_OperationScopeRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
}

message PythonModule_Get_OperationScopeResponse {
  // The scope of the operation to execute in the Python module.
  PythonOperationScopes returnValue = 1;
}

message PythonModule_Set_ClassNameRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
  // Specifies the name of the class containing the function or attribute.
  string propertyValue = 2;
}

message PythonModule_Set_ClassNameResponse {
}

message PythonModule_Get_ClassNameRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
}

message PythonModule_Get_ClassNameResponse {
  // Specifies the name of the class containing the function or attribute.
  string returnValue = 1;
}

message PythonModule_Set_ClassInstanceLocationExprRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
  // The location of the Python class instance (stored in a TestStand object reference variable).
  string propertyValue = 2;
}

message PythonModule_Set_ClassInstanceLocationExprResponse {
}

message PythonModule_Get_ClassInstanceLocationExprRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
}

message PythonModule_Get_ClassInstanceLocationExprResponse {
  // The location of the Python class instance (stored in a TestStand object reference variable).
  string returnValue = 1;
}

message PythonModule_Set_FunctionOrAttributeNameRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
  // The name of the function to execute, or the name of the attribute to get or set.
  string propertyValue = 2;
}

message PythonModule_Set_FunctionOrAttributeNameResponse {
}

message PythonModule_Get_FunctionOrAttributeNameRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
}

message PythonModule_Get_FunctionOrAttributeNameResponse {
  // The name of the function to execute, or the name of the attribute to get or set.
  string returnValue = 1;
}

message PythonModule_Set_UseAdapterSettingsForInterpreterSessionRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
  // If True, this property uses the Python version, Python virtual environment path and Python interpreter session configured in the adapter settings.
  bool propertyValue = 2;
}

message PythonModule_Set_UseAdapterSettingsForInterpreterSessionResponse {
}

message PythonModule_Get_UseAdapterSettingsForInterpreterSessionRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
}

message PythonModule_Get_UseAdapterSettingsForInterpreterSessionResponse {
  // If True, this property uses the Python version, Python virtual environment path and Python interpreter session configured in the adapter settings.
  bool returnValue = 1;
}

message PythonModule_Set_DefaultParameterCategoryForArrayRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
  // Specifies how TestStand passes an array of numbers to the Python module. Set the option to either PythonParamCategory_List or PythonParamCategory_NumPyArray.
  PythonParameterCategories propertyValue = 2;
}

message PythonModule_Set_DefaultParameterCategoryForArrayResponse {
}

message PythonModule_Get_DefaultParameterCategoryForArrayRequest {
  // The id of the PythonModule object.
  PythonModuleInstance instance = 1;
}

message PythonModule_Get_DefaultParameterCategoryForArrayResponse {
  // Specifies how TestStand passes an array of numbers to the Python module. Set the option to either PythonParamCategory_List or PythonParamCategory_NumPyArray.
  PythonParameterCategories returnValue = 1;
}

// PythonParameters
//
// Use objects from the PythonParameters class to configure and obtain parameters for a module that uses the Python Adapter. Use the PythonModule.Parameters property to obtain the collection of parameters for a module.
//
service PythonParameters {
  // Method: New
  //
  // Adds a new parameter to the collection.
  //
  // PythonParameters_NewRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PythonParametersInstance - The id of the PythonParameters object.
  //    - index: int32 - Specifies the zero-based index of where to insert the parameter.
  //    - parameterValueExpr: string - Specifies the argument expression.
  //      If the parameter is an input, this expression corresponds to the value to pass. If the parameter is a return value or returned property, this expression specifies where TestStand stores the result value.
  //    - parameterCategory: PythonParameterCategories - Specifies the parameter category.
  //
  // PythonParameters_NewResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc New(PythonParameters_NewRequest) returns (PythonParameters_NewResponse);
  
  
  // Method: Delete
  //
  // Removes the PythonParameter object located at the specified index.
  //
  // PythonParameters_DeleteRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PythonParametersInstance - The id of the PythonParameters object.
  //    - index: int32 - Specifies the zero-based index of the parameter to delete.
  //
  // PythonParameters_DeleteResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Delete(PythonParameters_DeleteRequest) returns (PythonParameters_DeleteResponse);
  
  
  // Method: Move
  //
  // Moves a PythonParameter object within a collection.
  //
  // PythonParameters_MoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PythonParametersInstance - The id of the PythonParameters object.
  //    - index: int32 - Specifies the zero-based index indicating the current position of the parameter to move.
  //    - newIndex: int32 - Specifies the zero-based index indicating the new position of the parameter.
  //
  // PythonParameters_MoveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Move(PythonParameters_MoveRequest) returns (PythonParameters_MoveResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // PythonParameters_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PythonParametersInstance - The id of the PythonParameters object.
  //    - index: int32 - Specifies the zero-based index of the parameter to retrieve.
  //
  // PythonParameters_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: PythonParameterInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(PythonParameters_Get_ItemRequest) returns (PythonParameters_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // PythonParameters_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonParametersInstance - The id of the PythonParameters object.
  //
  // PythonParameters_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(PythonParameters_Get_CountRequest) returns (PythonParameters_Get_CountResponse);
  
  
}
message PythonParameterInstance {
  // Specifies the handle of the PythonParameter instance in the server.
  string id = 1;
}
message PythonParameters_NewRequest {
  // The id of the PythonParameters object.
  PythonParametersInstance instance = 1;
  // Specifies the zero-based index of where to insert the parameter.
  int32 index = 2;
  // Specifies the name assigned to the new parameter.
  string ParameterName = 3;
  // Specifies the argument expression.
  // If the parameter is an input, this expression corresponds to the value to pass. If the parameter is a return value or returned property, this expression specifies where TestStand stores the result value.
  string parameterValueExpr = 4;
  // Specifies the parameter category.
  PythonParameterCategories parameterCategory = 5;
}

message PythonParameters_NewResponse {
}

message PythonParameters_DeleteRequest {
  // The id of the PythonParameters object.
  PythonParametersInstance instance = 1;
  // Specifies the zero-based index of the parameter to delete.
  int32 index = 2;
}

message PythonParameters_DeleteResponse {
}

message PythonParameters_MoveRequest {
  // The id of the PythonParameters object.
  PythonParametersInstance instance = 1;
  // Specifies the zero-based index indicating the current position of the parameter to move.
  int32 index = 2;
  // Specifies the zero-based index indicating the new position of the parameter.
  int32 newIndex = 3;
}

message PythonParameters_MoveResponse {
}

message PythonParameters_Get_ItemRequest {
  // The id of the PythonParameters object.
  PythonParametersInstance instance = 1;
  // Specifies the zero-based index of the parameter to retrieve.
  optional int32 index = 2;
}

message PythonParameters_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  PythonParameterInstance returnValue = 1;
}

message PythonParameters_Get_CountRequest {
  // The id of the PythonParameters object.
  PythonParametersInstance instance = 1;
}

message PythonParameters_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// PythonParameter
//
// Use objects from the PythonParameter class to configure and obtain parameter-specific information for an item in the PythonParameters collection class. Use the PythonModule.Parameters property to obtain the collection of parameters for a module.
//
service PythonParameter {
  // Method: AsPropertyObject
  //
  // Returns the underlying PropertyObject that represents the PythonParameter object.
  //
  // Use the PropertyObject to modify, add, or remove custom properties of the object.
  //
  // PythonParameter_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonParameterInstance - The id of the PythonParameter object.
  //
  // PythonParameter_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(PythonParameter_AsPropertyObjectRequest) returns (PythonParameter_AsPropertyObjectResponse);
  
  
  // Method: DisplayCreateCustomDataTypeDialog
  //
  // 
  //
  // PythonParameter_DisplayCreateCustomDataTypeDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PythonParameterInstance - The id of the PythonParameter object.
  //    - sequenceContext: SequenceContextInstance - 
  //
  // PythonParameter_DisplayCreateCustomDataTypeDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc DisplayCreateCustomDataTypeDialog(PythonParameter_DisplayCreateCustomDataTypeDialogRequest) returns (PythonParameter_DisplayCreateCustomDataTypeDialogResponse);
  
  

  // Property: ParameterName
  //
  // Returns the name of the parameter.
  //
  // PythonParameter_Set_ParameterNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonParameterInstance - The id of the PythonParameter object.
  //    - propertyValue: string - Returns the name of the parameter. 
  //
  // PythonParameter_Set_ParameterNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PythonParameter_Get_ParameterNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonParameterInstance - The id of the PythonParameter object.
  //
  // PythonParameter_Get_ParameterNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the parameter. 
  //
  rpc Set_ParameterName(PythonParameter_Set_ParameterNameRequest) returns (PythonParameter_Set_ParameterNameResponse);
  rpc Get_ParameterName(PythonParameter_Get_ParameterNameRequest) returns (PythonParameter_Get_ParameterNameResponse);
  
  
  // Property: ValueExpr
  //
  // Specifies an expression defining the argument to pass for the parameter.
  //
  // PythonParameter_Set_ValueExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonParameterInstance - The id of the PythonParameter object.
  //    - propertyValue: string - Specifies an expression defining the argument to pass for the parameter. 
  //
  // PythonParameter_Set_ValueExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PythonParameter_Get_ValueExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonParameterInstance - The id of the PythonParameter object.
  //
  // PythonParameter_Get_ValueExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies an expression defining the argument to pass for the parameter. 
  //
  rpc Set_ValueExpr(PythonParameter_Set_ValueExprRequest) returns (PythonParameter_Set_ValueExprResponse);
  rpc Get_ValueExpr(PythonParameter_Get_ValueExprRequest) returns (PythonParameter_Get_ValueExprResponse);
  
  
  // Property: Category
  //
  // Returns the category of the parameter.
  //
  // PythonParameter_Set_CategoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonParameterInstance - The id of the PythonParameter object.
  //    - propertyValue: PythonParameterCategories - Returns the category of the parameter. 
  //
  // PythonParameter_Set_CategoryResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PythonParameter_Get_CategoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonParameterInstance - The id of the PythonParameter object.
  //
  // PythonParameter_Get_CategoryResponse - The response message from the server. It provides the return value.
  //    - returnValue: PythonParameterCategories - Returns the category of the parameter. 
  //
  rpc Set_Category(PythonParameter_Set_CategoryRequest) returns (PythonParameter_Set_CategoryResponse);
  rpc Get_Category(PythonParameter_Get_CategoryRequest) returns (PythonParameter_Get_CategoryResponse);
  
  
  // Property: ValidEvaluationTypes
  //
  // Returns the valid types to which this parameter can evaluate.
  //
  // You can pass the value of this property to the validEvaluationTypes parameter of the Expression.ValidateEvaluationType method to determine whether the value of the PythonParameter.ValueExpr property contains errors.
  // If you are using an ExpressionEdit control to display the value of the PythonParameter.ValueExpr property, pass the value of this property to the ExpressionEdit.SetValidEvaluationTypes method.
  //
  // PythonParameter_Get_ValidEvaluationTypesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonParameterInstance - The id of the PythonParameter object.
  //
  // PythonParameter_Get_ValidEvaluationTypesResponse - The response message from the server. It provides the return value.
  //    - returnValue: EvaluationTypesInstance - Returns the valid types to which this parameter can evaluate. 
  //
  rpc Get_ValidEvaluationTypes(PythonParameter_Get_ValidEvaluationTypesRequest) returns (PythonParameter_Get_ValidEvaluationTypesResponse);
  
  
}
message PythonParameter_AsPropertyObjectRequest {
  // The id of the PythonParameter object.
  PythonParameterInstance instance = 1;
}

message PythonParameter_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message PythonParameter_DisplayCreateCustomDataTypeDialogRequest {
  // The id of the PythonParameter object.
  PythonParameterInstance instance = 1;
  // 
  SequenceContextInstance sequenceContext = 2;
}

message PythonParameter_DisplayCreateCustomDataTypeDialogResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message PythonParameter_Set_ParameterNameRequest {
  // The id of the PythonParameter object.
  PythonParameterInstance instance = 1;
  // Returns the name of the parameter.
  string propertyValue = 2;
}

message PythonParameter_Set_ParameterNameResponse {
}

message PythonParameter_Get_ParameterNameRequest {
  // The id of the PythonParameter object.
  PythonParameterInstance instance = 1;
}

message PythonParameter_Get_ParameterNameResponse {
  // Returns the name of the parameter.
  string returnValue = 1;
}

message PythonParameter_Set_ValueExprRequest {
  // The id of the PythonParameter object.
  PythonParameterInstance instance = 1;
  // Specifies an expression defining the argument to pass for the parameter.
  string propertyValue = 2;
}

message PythonParameter_Set_ValueExprResponse {
}

message PythonParameter_Get_ValueExprRequest {
  // The id of the PythonParameter object.
  PythonParameterInstance instance = 1;
}

message PythonParameter_Get_ValueExprResponse {
  // Specifies an expression defining the argument to pass for the parameter.
  string returnValue = 1;
}

message PythonParameter_Set_CategoryRequest {
  // The id of the PythonParameter object.
  PythonParameterInstance instance = 1;
  // Returns the category of the parameter.
  PythonParameterCategories propertyValue = 2;
}

message PythonParameter_Set_CategoryResponse {
}

message PythonParameter_Get_CategoryRequest {
  // The id of the PythonParameter object.
  PythonParameterInstance instance = 1;
}

message PythonParameter_Get_CategoryResponse {
  // Returns the category of the parameter.
  PythonParameterCategories returnValue = 1;
}

message PythonParameter_Get_ValidEvaluationTypesRequest {
  // The id of the PythonParameter object.
  PythonParameterInstance instance = 1;
}

message PythonParameter_Get_ValidEvaluationTypesResponse {
  // Returns the valid types to which this parameter can evaluate.
  EvaluationTypesInstance returnValue = 1;
}

// PythonArguments
//
// Use the object of the PythonArguments class to pass specific argument values to a Python module operation (function call, get/set attribute, create class instance) using the PythonModule.Execute method. Use the PythonModule.Arguments property to obtain the PythonArguments object.
// Creating a new PythonArguments object using the PythonModule.NewArguments method populates this collection of PythonArgument objects. The number of PythonArgument objects is the same as the number of PythonParameter objects for the PythonModule.
//
service PythonArguments {
  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // PythonArguments_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PythonArgumentsInstance - The id of the PythonArguments object.
  //    - index: int32 - Specifies the zero-based index of the item to retrieve. An argument at a specified index in the PythonArguments collection corresponds to the parameter at the same index in the PythonParameters collection that you used to create the PythonArguments collection.
  //
  // PythonArguments_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: PythonArgumentInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(PythonArguments_Get_ItemRequest) returns (PythonArguments_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // PythonArguments_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonArgumentsInstance - The id of the PythonArguments object.
  //
  // PythonArguments_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(PythonArguments_Get_CountRequest) returns (PythonArguments_Get_CountResponse);
  
  
  // Property: InterpreterReferenceObject
  //
  // Specifies the object that holds the Python interpreter session for the Python module.
  //
  // PythonArguments_Set_InterpreterReferenceObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonArgumentsInstance - The id of the PythonArguments object.
  //    - propertyValue: PropertyObjectInstance - Specifies the object that holds the Python interpreter session for the Python module. 
  //
  // PythonArguments_Set_InterpreterReferenceObjectResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PythonArguments_Get_InterpreterReferenceObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonArgumentsInstance - The id of the PythonArguments object.
  //
  // PythonArguments_Get_InterpreterReferenceObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Specifies the object that holds the Python interpreter session for the Python module. 
  //
  rpc Set_InterpreterReferenceObject(PythonArguments_Set_InterpreterReferenceObjectRequest) returns (PythonArguments_Set_InterpreterReferenceObjectResponse);
  rpc Get_InterpreterReferenceObject(PythonArguments_Get_InterpreterReferenceObjectRequest) returns (PythonArguments_Get_InterpreterReferenceObjectResponse);
  
  
  // Property: ClassInstanceReferenceObject
  //
  // Specifies the object that holds the Python class instance for the Python module.
  //
  // PythonArguments_Set_ClassInstanceReferenceObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonArgumentsInstance - The id of the PythonArguments object.
  //    - propertyValue: PropertyObjectInstance - Specifies the object that holds the Python class instance for the Python module. 
  //
  // PythonArguments_Set_ClassInstanceReferenceObjectResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PythonArguments_Get_ClassInstanceReferenceObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonArgumentsInstance - The id of the PythonArguments object.
  //
  // PythonArguments_Get_ClassInstanceReferenceObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Specifies the object that holds the Python class instance for the Python module. 
  //
  rpc Set_ClassInstanceReferenceObject(PythonArguments_Set_ClassInstanceReferenceObjectRequest) returns (PythonArguments_Set_ClassInstanceReferenceObjectResponse);
  rpc Get_ClassInstanceReferenceObject(PythonArguments_Get_ClassInstanceReferenceObjectRequest) returns (PythonArguments_Get_ClassInstanceReferenceObjectResponse);
  
  
}
message PythonArgumentInstance {
  // Specifies the handle of the PythonArgument instance in the server.
  string id = 1;
}
message PythonArguments_Get_ItemRequest {
  // The id of the PythonArguments object.
  PythonArgumentsInstance instance = 1;
  // Specifies the zero-based index of the item to retrieve. An argument at a specified index in the PythonArguments collection corresponds to the parameter at the same index in the PythonParameters collection that you used to create the PythonArguments collection.
  optional int32 index = 2;
}

message PythonArguments_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  PythonArgumentInstance returnValue = 1;
}

message PythonArguments_Get_CountRequest {
  // The id of the PythonArguments object.
  PythonArgumentsInstance instance = 1;
}

message PythonArguments_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

message PythonArguments_Set_InterpreterReferenceObjectRequest {
  // The id of the PythonArguments object.
  PythonArgumentsInstance instance = 1;
  // Specifies the object that holds the Python interpreter session for the Python module.
  PropertyObjectInstance propertyValue = 2;
}

message PythonArguments_Set_InterpreterReferenceObjectResponse {
}

message PythonArguments_Get_InterpreterReferenceObjectRequest {
  // The id of the PythonArguments object.
  PythonArgumentsInstance instance = 1;
}

message PythonArguments_Get_InterpreterReferenceObjectResponse {
  // Specifies the object that holds the Python interpreter session for the Python module.
  PropertyObjectInstance returnValue = 1;
}

message PythonArguments_Set_ClassInstanceReferenceObjectRequest {
  // The id of the PythonArguments object.
  PythonArgumentsInstance instance = 1;
  // Specifies the object that holds the Python class instance for the Python module.
  PropertyObjectInstance propertyValue = 2;
}

message PythonArguments_Set_ClassInstanceReferenceObjectResponse {
}

message PythonArguments_Get_ClassInstanceReferenceObjectRequest {
  // The id of the PythonArguments object.
  PythonArgumentsInstance instance = 1;
}

message PythonArguments_Get_ClassInstanceReferenceObjectResponse {
  // Specifies the object that holds the Python class instance for the Python module.
  PropertyObjectInstance returnValue = 1;
}

// PythonArgument
//
// Use objects from the PythonArgument class to set the argument value to pass to a Python module operation (function call, get/set attribute, create class instance) using the PythonModule.Execute method. Use the PythonArguments.Item property to obtain the PythonArgument objects.
//
service PythonArgument {
  // Property: Value
  //
  // Specifies the argument value to pass for the corresponding parameter.
  //
  // PythonArgument_Set_ValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonArgumentInstance - The id of the PythonArgument object.
  //    - propertyValue: PropertyObjectInstance - Specifies the argument value to pass for the corresponding parameter. 
  //
  // PythonArgument_Set_ValueResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PythonArgument_Get_ValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PythonArgumentInstance - The id of the PythonArgument object.
  //
  // PythonArgument_Get_ValueResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Specifies the argument value to pass for the corresponding parameter. 
  //
  rpc Set_Value(PythonArgument_Set_ValueRequest) returns (PythonArgument_Set_ValueResponse);
  rpc Get_Value(PythonArgument_Get_ValueRequest) returns (PythonArgument_Get_ValueResponse);
  
  
}
message PythonArgument_Set_ValueRequest {
  // The id of the PythonArgument object.
  PythonArgumentInstance instance = 1;
  // Specifies the argument value to pass for the corresponding parameter.
  PropertyObjectInstance propertyValue = 2;
}

message PythonArgument_Set_ValueResponse {
}

message PythonArgument_Get_ValueRequest {
  // The id of the PythonArgument object.
  PythonArgumentInstance instance = 1;
}

message PythonArgument_Get_ValueResponse {
  // Specifies the argument value to pass for the corresponding parameter.
  PropertyObjectInstance returnValue = 1;
}

// LabVIEWNXGAdapter
//
// Use objects from the LabVIEW NXG Adapter class to configure and obtain LabVIEW NXG Adapter-specific information about the module adapter. Call the Engine.GetAdapter or Engine.GetAdapterByKeyName method to obtain a reference to the adapter object.
// 
// To access the properties and methods of the Adapter class, use the LabVIEWNXGAdapter.AsAdapter method to obtain an object.
//
service LabVIEWNXGAdapter {
  // Method: AsAdapter
  //
  // Returns the underlying module Adapter object that represents the LabVIEWNXGAdapter object.
  //
  // Use the underlying module Adapter object to access properties and methods that are common to all adapters.
  //
  // LabVIEWNXGAdapter_AsAdapterRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGAdapterInstance - The id of the LabVIEWNXGAdapter object.
  //
  // LabVIEWNXGAdapter_AsAdapterResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdapterInstance - The return type of the Adapter object.
  //
  rpc AsAdapter(LabVIEWNXGAdapter_AsAdapterRequest) returns (LabVIEWNXGAdapter_AsAdapterResponse);
  
  
  // Method: Initialize
  //
  // Initializes the LabVIEW NXG Adapter by connecting to the configured LabVIEW NXG server.
  //
  // If you do not call this method, the LabVIEW NXG Adapter connects to the configured LabVIEW NXG server when first needed.
  //
  // LabVIEWNXGAdapter_InitializeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGAdapterInstance - The id of the LabVIEWNXGAdapter object.
  //
  // LabVIEWNXGAdapter_InitializeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Initialize(LabVIEWNXGAdapter_InitializeRequest) returns (LabVIEWNXGAdapter_InitializeResponse);
  
  
  // Method: GetVIVersion
  //
  // Returns the LabVIEW NXG version that saved the specified VI. The version contains only the major and minor version numbers, such as 2.0.
  //
  // LabVIEWNXGAdapter_GetVIVersionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNXGAdapterInstance - The id of the LabVIEWNXGAdapter object.
  //    - projectOrGLLAbsolutePath: string - Specifies a string containing the absolute path of the project or GLL containing the VI.
  //
  // LabVIEWNXGAdapter_GetVIVersionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetVIVersion(LabVIEWNXGAdapter_GetVIVersionRequest) returns (LabVIEWNXGAdapter_GetVIVersionResponse);
  
  
  // Method: NewModule
  //
  // Creates and returns a new LabVIEWNXGModule object. Use this method to create a LabVIEWNXGModule object that you can use to execute a LabVIEW NXG VI without using a step, sequence, or execution.
  //
  // LabVIEWNXGAdapter_NewModuleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGAdapterInstance - The id of the LabVIEWNXGAdapter object.
  //
  // LabVIEWNXGAdapter_NewModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNXGModuleInstance - The return type of the LabVIEWNXGModule object.
  //
  rpc NewModule(LabVIEWNXGAdapter_NewModuleRequest) returns (LabVIEWNXGAdapter_NewModuleResponse);
  
  
  // Method: GetItemsInGLL
  //
  // Returns the qualified names of the VIs in the GLL.
  //
  // LabVIEWNXGAdapter_GetItemsInGLLRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNXGAdapterInstance - The id of the LabVIEWNXGAdapter object.
  //    - gllAbsolutePath: string - Specifies a string containing the absolute path of the GLL.
  //
  // LabVIEWNXGAdapter_GetItemsInGLLResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated string - The return type of the String[] object.
  //
  rpc GetItemsInGLL(LabVIEWNXGAdapter_GetItemsInGLLRequest) returns (LabVIEWNXGAdapter_GetItemsInGLLResponse);
  
  
  // Method: GetClusterPassingEnabled
  //
  // Returns a value that indicates whether a type definition allows the LabVIEW NXG Adapter to pass instances of the type as cluster parameters to VIs.
  //
  // LabVIEWNXGAdapter_GetClusterPassingEnabledRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNXGAdapterInstance - The id of the LabVIEWNXGAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the property object is not a type definition.
  //
  // LabVIEWNXGAdapter_GetClusterPassingEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc GetClusterPassingEnabled(LabVIEWNXGAdapter_GetClusterPassingEnabledRequest) returns (LabVIEWNXGAdapter_GetClusterPassingEnabledResponse);
  
  
  // Method: SetClusterPassingEnabled
  //
  // Specifies whether a type definition allows the LabVIEW NXG Adapter to pass instances of the type as cluster parameters to VIs.
  //
  // LabVIEWNXGAdapter_SetClusterPassingEnabledRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNXGAdapterInstance - The id of the LabVIEWNXGAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the property object is not a type definition.
  //    - clusterPassingEnabled: bool - Specifies whether cluster passing is enabled.
  //
  // LabVIEWNXGAdapter_SetClusterPassingEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetClusterPassingEnabled(LabVIEWNXGAdapter_SetClusterPassingEnabledRequest) returns (LabVIEWNXGAdapter_SetClusterPassingEnabledResponse);
  
  
  // Method: GetExcludeFromCluster
  //
  // Returns a value that indicates whether the specified type definition property is excluded when converting instances of the type definition into clusters to pass as parameters to VIs.
  //
  // LabVIEWNXGAdapter_GetExcludeFromClusterRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNXGAdapterInstance - The id of the LabVIEWNXGAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the property object is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //
  // LabVIEWNXGAdapter_GetExcludeFromClusterResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc GetExcludeFromCluster(LabVIEWNXGAdapter_GetExcludeFromClusterRequest) returns (LabVIEWNXGAdapter_GetExcludeFromClusterResponse);
  
  
  // Method: SetExcludeFromCluster
  //
  // Specifies whether the specified type definition property is excluded when converting instances of the type definition into clusters to pass as parameters to VIs.
  //
  // LabVIEWNXGAdapter_SetExcludeFromClusterRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNXGAdapterInstance - The id of the LabVIEWNXGAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the property object is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //    - excludeFromCluster: bool - Set this parameter to True to exclude the corresponding property. Otherwise, set this parameter to False.
  //
  // LabVIEWNXGAdapter_SetExcludeFromClusterResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetExcludeFromCluster(LabVIEWNXGAdapter_SetExcludeFromClusterRequest) returns (LabVIEWNXGAdapter_SetExcludeFromClusterResponse);
  
  
  // Method: GetClusterMemberLabel
  //
  // Returns the label of the cluster member that corresponds to the specified type definition property.
  //
  // LabVIEWNXGAdapter_GetClusterMemberLabelRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNXGAdapterInstance - The id of the LabVIEWNXGAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the property object is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the type definition.
  //
  // LabVIEWNXGAdapter_GetClusterMemberLabelResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetClusterMemberLabel(LabVIEWNXGAdapter_GetClusterMemberLabelRequest) returns (LabVIEWNXGAdapter_GetClusterMemberLabelResponse);
  
  
  // Method: SetClusterMemberLabel
  //
  // Specifies the label of the cluster member that corresponds to the specified type definition property.
  //
  // LabVIEWNXGAdapter_SetClusterMemberLabelRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNXGAdapterInstance - The id of the LabVIEWNXGAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the property object is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //    - clusterMemberLabel: string - Specifies the label of the cluster member.
  //
  // LabVIEWNXGAdapter_SetClusterMemberLabelResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetClusterMemberLabel(LabVIEWNXGAdapter_SetClusterMemberLabelRequest) returns (LabVIEWNXGAdapter_SetClusterMemberLabelResponse);
  
  
  // Method: GetNodeLibraries
  //
  // Returns arrays that contain the typeNames and displayNames for all available LabVIEW NXG node libraries.
  //
  // LabVIEWNXGAdapter_GetNodeLibrariesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGAdapterInstance - The id of the LabVIEWNXGAdapter object.
  //
  // LabVIEWNXGAdapter_GetNodeLibrariesResponse - The response message from the server. It provides the output parameters.
  //    - typeNames: repeated strin - Specifies the genericTypes of the available LabVIEW NXG node libraries.
  //    - displayNames: repeated strin - Specifies the displayNames of the available LabVIEW NXG node libraries.
  //
  rpc GetNodeLibraries(LabVIEWNXGAdapter_GetNodeLibrariesRequest) returns (LabVIEWNXGAdapter_GetNodeLibrariesResponse);
  
  
  // Method: GetClassesForNodeLibrary
  //
  // Returns arrays that contain the long names and class names of the classes defined by the LabVIEW NXG node library you specify.
  //
  // LabVIEWNXGAdapter_GetClassesForNodeLibraryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGAdapterInstance - The id of the LabVIEWNXGAdapter object.
  //
  // LabVIEWNXGAdapter_GetClassesForNodeLibraryResponse - The response message from the server. It provides the output parameters.
  //    - classLongNames: repeated strin - Specifies the LongNames of the available properties for the LabVIEW NXG node library class you select.
  //    - classNames: repeated strin - Specifies the DataNames of the available properties of the LabVIEW NXG node library class you select.
  //
  rpc GetClassesForNodeLibrary(LabVIEWNXGAdapter_GetClassesForNodeLibraryRequest) returns (LabVIEWNXGAdapter_GetClassesForNodeLibraryResponse);
  
  
  // Method: GetPropertiesForNodeClass
  //
  // Returns arrays that contain information about the properties of the LabVIEW NXG node library class you select, such as LongName, ShortName, DataName, HelpDescription, and options.
  //
  // LabVIEWNXGAdapter_GetPropertiesForNodeClassRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGAdapterInstance - The id of the LabVIEWNXGAdapter object.
  //
  // LabVIEWNXGAdapter_GetPropertiesForNodeClassResponse - The response message from the server. It provides the output parameters.
  //    - longNames: repeated strin - Specifies the LongNames of the available properties for the LabVIEW NXG node library class you select.
  //    - shortNames: repeated strin - Specifies the ShortNames of the available properties of the LabVIEW NXG node library class you select.
  //    - dataNames: repeated strin - Specifies the DataNames of the available properties of the LabVIEW NXG node library class you select.
  //    - uniqueIDs: repeated strin - Specifies the unique IDs of the available properties for the LabVIEW NXG node library class you select.
  //    - helpDescriptions: repeated strin - Specifies the help descriptions of the available properties of the LabVIEW NXG node library class you select.
  //    - options: repeated int3 - Specifies the options for the available properties of the LabVIEW NXG node library class you select.
  //
  rpc GetPropertiesForNodeClass(LabVIEWNXGAdapter_GetPropertiesForNodeClassRequest) returns (LabVIEWNXGAdapter_GetPropertiesForNodeClassResponse);
  
  
  // Method: GetClusterMemberIsBinaryString
  //
  // Returns True if the cluster member that corresponds to the specified type definition property contains binary data.
  //
  // TestStand preserves NUL bytes when setting and getting LabVIEW NXG string data for binary strings.
  //
  // LabVIEWNXGAdapter_GetClusterMemberIsBinaryStringRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNXGAdapterInstance - The id of the LabVIEWNXGAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the property object is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //
  // LabVIEWNXGAdapter_GetClusterMemberIsBinaryStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc GetClusterMemberIsBinaryString(LabVIEWNXGAdapter_GetClusterMemberIsBinaryStringRequest) returns (LabVIEWNXGAdapter_GetClusterMemberIsBinaryStringResponse);
  
  
  // Method: SetClusterMemberIsBinaryString
  //
  // Specifies whether the cluster member that corresponds to the specified type definition property contains binary data.
  //
  // TestStand preserves NUL bytes when setting and getting LabVIEW NXG string data for binary strings.
  //
  // LabVIEWNXGAdapter_SetClusterMemberIsBinaryStringRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNXGAdapterInstance - The id of the LabVIEWNXGAdapter object.
  //    - typeDefinition: PropertyObjectInstance - Specifies the type definition. This method returns an error if the property object is not a type definition.
  //    - propertyLookupString: string - Specifies the location of the property in the type definition.
  //    - val: bool - Pass True to specify that the cluster member is a binary string.
  //
  // LabVIEWNXGAdapter_SetClusterMemberIsBinaryStringResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetClusterMemberIsBinaryString(LabVIEWNXGAdapter_SetClusterMemberIsBinaryStringRequest) returns (LabVIEWNXGAdapter_SetClusterMemberIsBinaryStringResponse);
  
  
  // Method: IsLabVIEWNXGInstalled
  //
  // Returns a value indicating if a supported version of  LabVIEW NXG Development System is installed in the machine.
  //
  // If you do not call this method, the LabVIEW NXG Adapter connects to the configured LabVIEW NXG server when first needed.
  //
  // LabVIEWNXGAdapter_IsLabVIEWNXGInstalledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGAdapterInstance - The id of the LabVIEWNXGAdapter object.
  //
  // LabVIEWNXGAdapter_IsLabVIEWNXGInstalledResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - The return type of the Boolean object.
  //    - displayVersion: strin - Returns the version of a supported LabVIEW NXG Development System installed in the machine.
  //    - longVersion: strin - Returns the major.minor version of a supported LabVIEW NXG Development System installed in the machine.
  //    - installationDirectory: strin - Returns the path on disk to which LabVIEW NXG is installed.
  //
  rpc IsLabVIEWNXGInstalled(LabVIEWNXGAdapter_IsLabVIEWNXGInstalledRequest) returns (LabVIEWNXGAdapter_IsLabVIEWNXGInstalledResponse);
  
  
  // Method: ConvertQualifiedName
  //
  // 
  //
  // LabVIEWNXGAdapter_ConvertQualifiedNameRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabVIEWNXGAdapterInstance - The id of the LabVIEWNXGAdapter object.
  //    - toTestStand: bool - 
  //
  // LabVIEWNXGAdapter_ConvertQualifiedNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc ConvertQualifiedName(LabVIEWNXGAdapter_ConvertQualifiedNameRequest) returns (LabVIEWNXGAdapter_ConvertQualifiedNameResponse);
  
  

  // Property: ServerInfo
  //
  // 
  //
  // LabVIEWNXGAdapter_Set_ServerInfoRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGAdapterInstance - The id of the LabVIEWNXGAdapter object.
  //    - serverType: LabVIEWNXGServerTypes -  
  //
  // LabVIEWNXGAdapter_Set_ServerInfoResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWNXGAdapter_Get_ServerInfoRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGAdapterInstance - The id of the LabVIEWNXGAdapter object.
  //
  // LabVIEWNXGAdapter_Get_ServerInfoResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabVIEWNXGServerTypes -  
  //
  rpc Set_ServerInfo(LabVIEWNXGAdapter_Set_ServerInfoRequest) returns (LabVIEWNXGAdapter_Set_ServerInfoResponse);
  rpc Get_ServerInfo(LabVIEWNXGAdapter_Get_ServerInfoRequest) returns (LabVIEWNXGAdapter_Get_ServerInfoResponse);
  
  
  // Property: IsCurrentServerAnEditor
  //
  // Returns a value that indicates whether the LabVIEW NXG server TestStand is using to run VIs can edit VIs.
  //
  // A LabVIEW NXG server includes a LabVIEW NXG Development Environment and a LabVIEW NXG Run-Time Engine.
  //
  // LabVIEWNXGAdapter_Get_IsCurrentServerAnEditorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGAdapterInstance - The id of the LabVIEWNXGAdapter object.
  //
  // LabVIEWNXGAdapter_Get_IsCurrentServerAnEditorResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the LabVIEW NXG server TestStand is using to run VIs can edit VIs. 
  //
  rpc Get_IsCurrentServerAnEditor(LabVIEWNXGAdapter_Get_IsCurrentServerAnEditorRequest) returns (LabVIEWNXGAdapter_Get_IsCurrentServerAnEditorResponse);
  
  
  // Property: CurrentServerVersion
  //
  // Returns the version of the LabVIEW NXG server that TestStand is using to run VIs. The version contains only the major and minor version numbers, such as "2.0".
  //
  // A LabVIEW NXG server includes a LabVIEW NXG Development Environment and a LabVIEW NXG Run-Time Engine.
  //
  // LabVIEWNXGAdapter_Get_CurrentServerVersionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGAdapterInstance - The id of the LabVIEWNXGAdapter object.
  //
  // LabVIEWNXGAdapter_Get_CurrentServerVersionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the version of the LabVIEW NXG server that TestStand is using to run VIs. The version contains only the major and minor version numbers, such as "2.0". 
  //
  rpc Get_CurrentServerVersion(LabVIEWNXGAdapter_Get_CurrentServerVersionRequest) returns (LabVIEWNXGAdapter_Get_CurrentServerVersionResponse);
  
  
  // Property: IsActiveXServerConnectionValid
  //
  // Returns a value that indicates whether the LabVIEW NXG ActiveX server connection TestStand is using is valid.
  //
  // LabVIEWNXGAdapter_Get_IsActiveXServerConnectionValidRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGAdapterInstance - The id of the LabVIEWNXGAdapter object.
  //
  // LabVIEWNXGAdapter_Get_IsActiveXServerConnectionValidResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the LabVIEW NXG ActiveX server connection TestStand is using is valid. 
  //
  rpc Get_IsActiveXServerConnectionValid(LabVIEWNXGAdapter_Get_IsActiveXServerConnectionValidRequest) returns (LabVIEWNXGAdapter_Get_IsActiveXServerConnectionValidResponse);
  
  
  // Property: AutoBuildComponentOutput
  //
  // Specifies whether a GLL that is absent on disk or is out of date compared to the LabVIEW NXG source project and VIs, should be built at execution time.
  //
  // Enabling this option allows TestStand to launch LabVIEW NXG, even when the LabVIEW NXG adapter is set to use the Runtime Engine. This option is only applicable when the step has the source files corresponding to the GLL (the project and VI) specified. Note: NOTE: Building large GLLs might take significant time and affect execution speed.
  //
  // LabVIEWNXGAdapter_Set_AutoBuildComponentOutputRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGAdapterInstance - The id of the LabVIEWNXGAdapter object.
  //    - val: bool - Specifies whether a GLL that is absent on disk or is out of date compared to the LabVIEW NXG source project and VIs, should be built at execution time. 
  //
  // LabVIEWNXGAdapter_Set_AutoBuildComponentOutputResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWNXGAdapter_Get_AutoBuildComponentOutputRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGAdapterInstance - The id of the LabVIEWNXGAdapter object.
  //
  // LabVIEWNXGAdapter_Get_AutoBuildComponentOutputResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether a GLL that is absent on disk or is out of date compared to the LabVIEW NXG source project and VIs, should be built at execution time. 
  //
  rpc Set_AutoBuildComponentOutput(LabVIEWNXGAdapter_Set_AutoBuildComponentOutputRequest) returns (LabVIEWNXGAdapter_Set_AutoBuildComponentOutputResponse);
  rpc Get_AutoBuildComponentOutput(LabVIEWNXGAdapter_Get_AutoBuildComponentOutputRequest) returns (LabVIEWNXGAdapter_Get_AutoBuildComponentOutputResponse);
  
  
  // Property: ValidateGLLPath
  //
  // Indicates whether the specified GLL path is a valid path.
  //
  // LabVIEWNXGAdapter_Set_ValidateGLLPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGAdapterInstance - The id of the LabVIEWNXGAdapter object.
  //    - val: bool - Indicates whether the specified GLL path is a valid path. 
  //
  // LabVIEWNXGAdapter_Set_ValidateGLLPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // LabVIEWNXGAdapter_Get_ValidateGLLPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabVIEWNXGAdapterInstance - The id of the LabVIEWNXGAdapter object.
  //
  // LabVIEWNXGAdapter_Get_ValidateGLLPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Indicates whether the specified GLL path is a valid path. 
  //
  rpc Set_ValidateGLLPath(LabVIEWNXGAdapter_Set_ValidateGLLPathRequest) returns (LabVIEWNXGAdapter_Set_ValidateGLLPathResponse);
  rpc Get_ValidateGLLPath(LabVIEWNXGAdapter_Get_ValidateGLLPathRequest) returns (LabVIEWNXGAdapter_Get_ValidateGLLPathResponse);
  
  
}
message LabVIEWNXGAdapterInstance {
  // Specifies the handle of the LabVIEWNXGAdapter instance in the server.
  string id = 1;
}
message LabVIEWNXGAdapter_AsAdapterRequest {
  // The id of the LabVIEWNXGAdapter object.
  LabVIEWNXGAdapterInstance instance = 1;
}

message LabVIEWNXGAdapter_AsAdapterResponse {
  // The return type of the Adapter object.
  AdapterInstance returnValue = 1;
}

message LabVIEWNXGAdapter_InitializeRequest {
  // The id of the LabVIEWNXGAdapter object.
  LabVIEWNXGAdapterInstance instance = 1;
}

message LabVIEWNXGAdapter_InitializeResponse {
}

message LabVIEWNXGAdapter_GetVIVersionRequest {
  // The id of the LabVIEWNXGAdapter object.
  LabVIEWNXGAdapterInstance instance = 1;
  // Specifies a string containing the absolute path of the project or GLL containing the VI.
  string projectOrGLLAbsolutePath = 2;
  // Specifies a string containing the Module Qualified Name or Qualified Name of the VI respectively.
  string QualifiedName = 3;
}

message LabVIEWNXGAdapter_GetVIVersionResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message LabVIEWNXGAdapter_NewModuleRequest {
  // The id of the LabVIEWNXGAdapter object.
  LabVIEWNXGAdapterInstance instance = 1;
}

message LabVIEWNXGAdapter_NewModuleResponse {
  // The return type of the LabVIEWNXGModule object.
  LabVIEWNXGModuleInstance returnValue = 1;
}

message LabVIEWNXGAdapter_GetItemsInGLLRequest {
  // The id of the LabVIEWNXGAdapter object.
  LabVIEWNXGAdapterInstance instance = 1;
  // Specifies a string containing the absolute path of the GLL.
  string gllAbsolutePath = 2;
}

message LabVIEWNXGAdapter_GetItemsInGLLResponse {
  // The return type of the String[] object.
  repeated string returnValue = 1;
}

message LabVIEWNXGAdapter_GetClusterPassingEnabledRequest {
  // The id of the LabVIEWNXGAdapter object.
  LabVIEWNXGAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the property object is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
}

message LabVIEWNXGAdapter_GetClusterPassingEnabledResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message LabVIEWNXGAdapter_SetClusterPassingEnabledRequest {
  // The id of the LabVIEWNXGAdapter object.
  LabVIEWNXGAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the property object is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies whether cluster passing is enabled.
  bool clusterPassingEnabled = 3;
}

message LabVIEWNXGAdapter_SetClusterPassingEnabledResponse {
}

message LabVIEWNXGAdapter_GetExcludeFromClusterRequest {
  // The id of the LabVIEWNXGAdapter object.
  LabVIEWNXGAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the property object is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
}

message LabVIEWNXGAdapter_GetExcludeFromClusterResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message LabVIEWNXGAdapter_SetExcludeFromClusterRequest {
  // The id of the LabVIEWNXGAdapter object.
  LabVIEWNXGAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the property object is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
  // Set this parameter to True to exclude the corresponding property. Otherwise, set this parameter to False.
  bool excludeFromCluster = 4;
}

message LabVIEWNXGAdapter_SetExcludeFromClusterResponse {
}

message LabVIEWNXGAdapter_GetClusterMemberLabelRequest {
  // The id of the LabVIEWNXGAdapter object.
  LabVIEWNXGAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the property object is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the type definition.
  string propertyLookupString = 3;
}

message LabVIEWNXGAdapter_GetClusterMemberLabelResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message LabVIEWNXGAdapter_SetClusterMemberLabelRequest {
  // The id of the LabVIEWNXGAdapter object.
  LabVIEWNXGAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the property object is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
  // Specifies the label of the cluster member.
  string clusterMemberLabel = 4;
}

message LabVIEWNXGAdapter_SetClusterMemberLabelResponse {
}

message LabVIEWNXGAdapter_GetNodeLibrariesRequest {
  // The id of the LabVIEWNXGAdapter object.
  LabVIEWNXGAdapterInstance instance = 1;
}

message LabVIEWNXGAdapter_GetNodeLibrariesResponse {
  // Specifies the genericTypes of the available LabVIEW NXG node libraries.
  repeated string typeNames = 1;
  // Specifies the displayNames of the available LabVIEW NXG node libraries.
  repeated string displayNames = 2;
}

message LabVIEWNXGAdapter_GetClassesForNodeLibraryRequest {
  // The id of the LabVIEWNXGAdapter object.
  LabVIEWNXGAdapterInstance instance = 1;
  // Specifies the genericType of the LabVIEW NXG node library you select.
  string TypeName = 2;
}

message LabVIEWNXGAdapter_GetClassesForNodeLibraryResponse {
  // Specifies the LongNames of the available properties for the LabVIEW NXG node library class you select.
  repeated string classLongNames = 1;
  // Specifies the DataNames of the available properties of the LabVIEW NXG node library class you select.
  repeated string classNames = 2;
}

message LabVIEWNXGAdapter_GetPropertiesForNodeClassRequest {
  // The id of the LabVIEWNXGAdapter object.
  LabVIEWNXGAdapterInstance instance = 1;
  // Specifies the genericType of the LabVIEW NXG node library you select.
  string TypeName = 2;
  // Specifies the className of the LabVIEW NXG node library class you select.
  string ClassName = 3;
}

message LabVIEWNXGAdapter_GetPropertiesForNodeClassResponse {
  // Specifies the LongNames of the available properties for the LabVIEW NXG node library class you select.
  repeated string longNames = 1;
  // Specifies the ShortNames of the available properties of the LabVIEW NXG node library class you select.
  repeated string shortNames = 2;
  // Specifies the DataNames of the available properties of the LabVIEW NXG node library class you select.
  repeated string dataNames = 3;
  // Specifies the unique IDs of the available properties for the LabVIEW NXG node library class you select.
  repeated string uniqueIDs = 4;
  // Specifies the help descriptions of the available properties of the LabVIEW NXG node library class you select.
  repeated string helpDescriptions = 5;
  // Specifies the options for the available properties of the LabVIEW NXG node library class you select.
  repeated int32 options = 6;
}

message LabVIEWNXGAdapter_GetClusterMemberIsBinaryStringRequest {
  // The id of the LabVIEWNXGAdapter object.
  LabVIEWNXGAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the property object is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
}

message LabVIEWNXGAdapter_GetClusterMemberIsBinaryStringResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message LabVIEWNXGAdapter_SetClusterMemberIsBinaryStringRequest {
  // The id of the LabVIEWNXGAdapter object.
  LabVIEWNXGAdapterInstance instance = 1;
  // Specifies the type definition. This method returns an error if the property object is not a type definition.
  PropertyObjectInstance typeDefinition = 2;
  // Specifies the location of the property in the type definition.
  string propertyLookupString = 3;
  // Pass True to specify that the cluster member is a binary string.
  bool val = 4;
}

message LabVIEWNXGAdapter_SetClusterMemberIsBinaryStringResponse {
}

message LabVIEWNXGAdapter_IsLabVIEWNXGInstalledRequest {
  // The id of the LabVIEWNXGAdapter object.
  LabVIEWNXGAdapterInstance instance = 1;
}

message LabVIEWNXGAdapter_IsLabVIEWNXGInstalledResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
  // Returns the version of a supported LabVIEW NXG Development System installed in the machine.
  string displayVersion = 2;
  // Returns the major.minor version of a supported LabVIEW NXG Development System installed in the machine.
  string longVersion = 3;
  // Returns the path on disk to which LabVIEW NXG is installed.
  string installationDirectory = 4;
}

message LabVIEWNXGAdapter_ConvertQualifiedNameRequest {
  // The id of the LabVIEWNXGAdapter object.
  LabVIEWNXGAdapterInstance instance = 1;
  // 
  bool toTestStand = 2;
  // 
  string QualifiedName = 3;
}

message LabVIEWNXGAdapter_ConvertQualifiedNameResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message LabVIEWNXGAdapter_Set_ServerInfoRequest {
  // The id of the LabVIEWNXGAdapter object.
  LabVIEWNXGAdapterInstance instance = 1;
  // 
  LabVIEWNXGServerTypes serverType = 2;
}

message LabVIEWNXGAdapter_Set_ServerInfoResponse {
}

message LabVIEWNXGAdapter_Get_ServerInfoRequest {
  // The id of the LabVIEWNXGAdapter object.
  LabVIEWNXGAdapterInstance instance = 1;
}

message LabVIEWNXGAdapter_Get_ServerInfoResponse {
  // 
  LabVIEWNXGServerTypes returnValue = 1;
}

message LabVIEWNXGAdapter_Get_IsCurrentServerAnEditorRequest {
  // The id of the LabVIEWNXGAdapter object.
  LabVIEWNXGAdapterInstance instance = 1;
}

message LabVIEWNXGAdapter_Get_IsCurrentServerAnEditorResponse {
  // Returns a value that indicates whether the LabVIEW NXG server TestStand is using to run VIs can edit VIs.
  bool returnValue = 1;
}

message LabVIEWNXGAdapter_Get_CurrentServerVersionRequest {
  // The id of the LabVIEWNXGAdapter object.
  LabVIEWNXGAdapterInstance instance = 1;
}

message LabVIEWNXGAdapter_Get_CurrentServerVersionResponse {
  // Returns the version of the LabVIEW NXG server that TestStand is using to run VIs. The version contains only the major and minor version numbers, such as "2.0".
  string returnValue = 1;
}

message LabVIEWNXGAdapter_Get_IsActiveXServerConnectionValidRequest {
  // The id of the LabVIEWNXGAdapter object.
  LabVIEWNXGAdapterInstance instance = 1;
}

message LabVIEWNXGAdapter_Get_IsActiveXServerConnectionValidResponse {
  // Returns a value that indicates whether the LabVIEW NXG ActiveX server connection TestStand is using is valid.
  bool returnValue = 1;
}

message LabVIEWNXGAdapter_Set_AutoBuildComponentOutputRequest {
  // The id of the LabVIEWNXGAdapter object.
  LabVIEWNXGAdapterInstance instance = 1;
  // Specifies whether a GLL that is absent on disk or is out of date compared to the LabVIEW NXG source project and VIs, should be built at execution time.
  bool val = 2;
}

message LabVIEWNXGAdapter_Set_AutoBuildComponentOutputResponse {
}

message LabVIEWNXGAdapter_Get_AutoBuildComponentOutputRequest {
  // The id of the LabVIEWNXGAdapter object.
  LabVIEWNXGAdapterInstance instance = 1;
}

message LabVIEWNXGAdapter_Get_AutoBuildComponentOutputResponse {
  // Specifies whether a GLL that is absent on disk or is out of date compared to the LabVIEW NXG source project and VIs, should be built at execution time.
  bool returnValue = 1;
}

message LabVIEWNXGAdapter_Set_ValidateGLLPathRequest {
  // The id of the LabVIEWNXGAdapter object.
  LabVIEWNXGAdapterInstance instance = 1;
  // Indicates whether the specified GLL path is a valid path.
  bool val = 2;
}

message LabVIEWNXGAdapter_Set_ValidateGLLPathResponse {
}

message LabVIEWNXGAdapter_Get_ValidateGLLPathRequest {
  // The id of the LabVIEWNXGAdapter object.
  LabVIEWNXGAdapterInstance instance = 1;
}

message LabVIEWNXGAdapter_Get_ValidateGLLPathResponse {
  // Indicates whether the specified GLL path is a valid path.
  bool returnValue = 1;
}

///////////////////////// Referenced Types /////////////////////

// Generation of referenced types is disabled.

