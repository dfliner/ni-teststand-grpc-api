///// THIS FILE WAS AUTO GENERATED ON 03/07/2023 10:04:46 /////

syntax = "proto3";
package ni.teststand.api.grpc.techpreview;
option csharp_namespace = "NationalInstruments.TestStand.SequenceAnalyzer.Grpc";
option go_package = "tsgrpc";
option java_multiple_files = true;
option java_outer_classname = "TestStandSequenceAnalyzerProto";
option java_package = "com.ni.teststand.api.grpc.techpreview";
option objc_class_prefix = "NITSG";
option php_namespace = "NI\\TestStand\\SequenceAnalyzer\\Grpc";
option ruby_package = "NI::TestStand::SequenceAnalyzer::Grpc";

import "google/protobuf/timestamp.proto";
import "ni/teststand/api/grpc/techpreview/common_types_api.proto";
import "ni/teststand/api/grpc/techpreview/NationalInstruments.TestStand.API.proto";

// RuleSeverity
//
enum RuleSeverity {
  // Field: RuleSeverity_Error
  //
  RuleSeverity_Error = 0;
  // Field: RuleSeverity_Warning
  //
  RuleSeverity_Warning = 1;
  // Field: RuleSeverity_Information
  //
  RuleSeverity_Information = 2;
  // Field: RuleSeverity_Default
  //
  RuleSeverity_Default = 3;
  // Field: RuleSeverity_Unknown
  //
  RuleSeverity_Unknown = 4;
}

// ModuleAdapter
//
enum ModuleAdapter {
  // Field: ModuleAdapter_DLL
  //
  ModuleAdapter_DLL = 0;
  // Field: ModuleAdapter_LabVIEW
  //
  ModuleAdapter_LabVIEW = 1;
  // Field: ModuleAdapter_DotNet
  //
  ModuleAdapter_DotNet = 2;
  // Field: ModuleAdapter_LabVIEWNXG
  //
  ModuleAdapter_LabVIEWNXG = 3;
}

// ModuleType
//
enum ModuleType {
  // Field: ModuleType_RuleAnalysisModule
  //
  ModuleType_RuleAnalysisModule = 0;
  // Field: ModuleType_RuleConfigurationModule
  //
  ModuleType_RuleConfigurationModule = 1;
}

// MessageStatus
//
enum MessageStatus {
  // Field: MessageStatus_Active
  //
  MessageStatus_Active = 0;
  // Field: MessageStatus_Fixed
  //
  MessageStatus_Fixed = 1;
  // Field: MessageStatus_Ignored
  //
  MessageStatus_Ignored = 2;
}

// RuleSettingType
//
enum RuleSettingType {
  // Field: RuleSettingType_Number
  //
  RuleSettingType_Number = 0;
  // Field: RuleSettingType_String
  //
  RuleSettingType_String = 1;
  // Field: RuleSettingType_Boolean
  //
  RuleSettingType_Boolean = 2;
}

// module 

// ObjectKinds
//
// 
//
enum ObjectKinds {
  ObjectKinds_reservedZero = 0;
  // Field: ObjectKind_Step
  //
  // 
  //
  ObjectKind_Step = 1;
  // Field: ObjectKind_Sequence
  //
  // 
  //
  ObjectKind_Sequence = 2;
  // Field: ObjectKind_SequenceLocal
  //
  // 
  //
  ObjectKind_SequenceLocal = 4;
  // Field: ObjectKind_SequenceParameter
  //
  // 
  //
  ObjectKind_SequenceParameter = 8;
  // Field: ObjectKind_SequenceFileGlobal
  //
  // 
  //
  ObjectKind_SequenceFileGlobal = 16;
  // Field: ObjectKind_StationGlobal
  //
  // 
  //
  ObjectKind_StationGlobal = 32;
  // Field: ObjectKind_TemplateItem
  //
  // 
  //
  ObjectKind_TemplateItem = 64;
  // Field: ObjectKind_User
  //
  // 
  //
  ObjectKind_User = 128;
  // Field: ObjectKind_UserGroup
  //
  // 
  //
  ObjectKind_UserGroup = 256;
  // Field: ObjectKind_WorkspaceObject
  //
  // 
  //
  ObjectKind_WorkspaceObject = 512;
  // Field: ObjectKind_SequenceFile
  //
  // 
  //
  ObjectKind_SequenceFile = 1024;
  // Field: ObjectKind_WorkspaceFile
  //
  // 
  //
  ObjectKind_WorkspaceFile = 2048;
  // Field: ObjectKind_TypePalette
  //
  // 
  //
  ObjectKind_TypePalette = 8192;
  // Field: ObjectKind_UsersFile
  //
  // 
  //
  ObjectKind_UsersFile = 16384;
  // Field: ObjectKind_StationGlobalsFile
  //
  // 
  //
  ObjectKind_StationGlobalsFile = 32768;
  // Field: ObjectKind_TemplatesFile
  //
  // 
  //
  ObjectKind_TemplatesFile = 65536;
  // Field: ObjectKind_StepType
  //
  // 
  //
  ObjectKind_StepType = 131072;
  // Field: ObjectKind_CustomDataType
  //
  // 
  //
  ObjectKind_CustomDataType = 262144;
  // Field: ObjectKind_BuiltinDataType
  //
  // 
  //
  ObjectKind_BuiltinDataType = 524288;
  // Field: ObjectKind_SubProperty
  //
  // 
  //
  ObjectKind_SubProperty = 1048576;
  // Field: ObjectKind_SkippedStep
  //
  // 
  //
  ObjectKind_SkippedStep = 2097152;
}

// AnalysisTransition
//
// Use this enumeration with the AnalysisContext.Transition property to determine the current analysis transition of the TestStand Sequence Analyzer.
// 
//
enum AnalysisTransition {
  // Field: AnalysisTransition_None
  //
  // (Value: 0) Indicates that the sequence analyzer is not in a transition.
  //
  AnalysisTransition_None = 0;
  // Field: AnalysisTransition_BeforeSystem
  //
  // (Value: 1) Indicates that the sequence analyzer is preparing to start analyzing.
  //
  AnalysisTransition_BeforeSystem = 1;
  // Field: AnalysisTransition_BeforeTypePalettes
  //
  // (Value: 2) Indicates that the sequence analyzer is preparing to analyze type palette files.
  //
  AnalysisTransition_BeforeTypePalettes = 2;
  // Field: AnalysisTransition_BeforeTypePalette
  //
  // (Value: 3) Indicates that the sequence analyzer is preparing to analyze a specific type palette file. Use the AnalysisContext.File property to obtain a reference to the type palette file. The AnalysisContext.Object property also contains a reference to the file.
  //
  AnalysisTransition_BeforeTypePalette = 3;
  // Field: AnalysisTransition_AfterTypePalette
  //
  // (Value: 4) Indicates that the sequence analyzer finished analyzing a specific type palette file. Use the AnalysisContext.File property to obtain a reference to the type palette file that was analyzed. The AnalysisContext.Object property also contains a reference to the file.
  //
  AnalysisTransition_AfterTypePalette = 4;
  // Field: AnalysisTransition_AfterTypePalettes
  //
  // (Value: 5) Indicates that the sequence analyzer finished analyzing the type palette files.
  //
  AnalysisTransition_AfterTypePalettes = 5;
  // Field: AnalysisTransition_BeforeUsersFile
  //
  // (Value: 6) Indicates that the sequence analyzer is preparing to analyze the users file. Use the AnalysisContext.File property to obtain a reference to the users file. The AnalysisContext.Object property also contains a reference to the file.
  //
  AnalysisTransition_BeforeUsersFile = 6;
  // Field: AnalysisTransition_BeforeUsers
  //
  // (Value: 7) Indicates that the sequence analyzer is preparing to analyze the users in the users file.
  //
  AnalysisTransition_BeforeUsers = 7;
  // Field: AnalysisTransition_AfterUsers
  //
  // (Value: 8) Indicates that the sequence analyzer finished analyzing the users in the users file. Use the AnalysisContext.File property to obtain a reference to the users file.
  //
  AnalysisTransition_AfterUsers = 8;
  // Field: AnalysisTransition_BeforeUserGroups
  //
  // (Value: 9) Indicates that the sequence analyzer is preparing to analyze the user groups in the users file.
  //
  AnalysisTransition_BeforeUserGroups = 9;
  // Field: AnalysisTransition_AfterUserGroups
  //
  // (Value: 10) Indicates that the sequence analyzer finished analyzing the user groups in the users file.
  //
  AnalysisTransition_AfterUserGroups = 10;
  // Field: AnalysisTransition_AfterUsersFile
  //
  // (Value: 11) Indicates that the sequence analyzer finished analyzing the users file. Use the AnalysisContext.File property to obtain a reference to the users file. The AnalysisContext.Object property also contains a reference to the file.
  //
  AnalysisTransition_AfterUsersFile = 11;
  // Field: AnalysisTransition_BeforeStationGlobalsFile
  //
  // (Value: 12) Indicates that the sequence analyzer is preparing to analyze the station global variables file. Use the AnalysisContext.File property to obtain a reference to the station global variables file. The AnalysisContext.Object property also contains a reference to the file.
  //
  AnalysisTransition_BeforeStationGlobalsFile = 12;
  // Field: AnalysisTransition_BeforeStationGlobals
  //
  // (Value: 13) Indicates that the sequence analyzer is preparing to analyze the global variables in the station global variables file.
  //
  AnalysisTransition_BeforeStationGlobals = 13;
  // Field: AnalysisTransition_AfterStationGlobals
  //
  // (Value: 14) Indicates that the sequence analyzer finished analyzing the global variables in the station global variables file. Use the AnalysisContext.File property to obtain a reference to the station global variables file.
  //
  AnalysisTransition_AfterStationGlobals = 14;
  // Field: AnalysisTransition_AfterStationGlobalsFile
  //
  // (Value: 15) Indicates that the sequence analyzer finished analyzing the station global variables file. Use the AnalysisContext.File property to obtain a reference to the station global variables file. The AnalysisContext.Object property also contains a reference to the file.
  //
  AnalysisTransition_AfterStationGlobalsFile = 15;
  // Field: AnalysisTransition_BeforeTemplatesFile
  //
  // (Value: 16) Indicates that the sequence analyzer is preparing to analyze the templates file. The templates file contains the configuration settings for the Templates list. Use the AnalysisContext.File property to obtain a reference to the templates file. The AnalysisContext.Object property also contains a reference to the file.
  //
  AnalysisTransition_BeforeTemplatesFile = 16;
  // Field: AnalysisTransition_BeforeTemplates
  //
  // (Value: 17) Indicates that the sequence analyzer is preparing to analyze the templates in the templates file.
  //
  AnalysisTransition_BeforeTemplates = 17;
  // Field: AnalysisTransition_AfterTemplates
  //
  // (Value: 18) Indicates that the sequence analyzer finished analyzing the templates in the templates file.
  //
  AnalysisTransition_AfterTemplates = 18;
  // Field: AnalysisTransition_AfterTemplatesFile
  //
  // (Value: 19) Indicates that the sequence analyzer finished analyzing the templates file. The templates file contains the configuration settings for the Templates list on the Insertion Palette. Use the AnalysisContext.File property to obtain a reference to the templates file. The AnalysisContext.Object property also contains a reference to the file.
  //
  AnalysisTransition_AfterTemplatesFile = 19;
  // Field: AnalysisTransition_BeforeWorkspaceFile
  //
  // (Value: 20) Indicates that the sequence analyzer is preparing to analyze the workspace file. Use the AnalysisContext.File property to obtain a reference to the workspace file. The AnalysisContext.Object property also contains a reference to the file.
  //
  AnalysisTransition_BeforeWorkspaceFile = 20;
  // Field: AnalysisTransition_AfterWorkspaceFile
  //
  // (Value: 21) Indicates that the sequence analyzer finished analyzing the workspace file. Use the AnalysisContext.File property to obtain a reference to the workspace file. The AnalysisContext.Object property also contains a reference to the file.
  //
  AnalysisTransition_AfterWorkspaceFile = 21;
  // Field: AnalysisTransition_BeforeSequenceFile
  //
  // (Value: 22) Indicates that the sequence analyzer is preparing to analyze a sequence file. Use the AnalysisContext.File property to obtain a reference to the sequence file. The AnalysisContext.Object property also contains a reference to the file.
  //
  AnalysisTransition_BeforeSequenceFile = 22;
  // Field: AnalysisTransition_BeforeSequenceFileGlobals
  //
  // (Value: 23) Indicates that the sequence analyzer is preparing to analyze the global variables in a sequence file.
  //
  AnalysisTransition_BeforeSequenceFileGlobals = 23;
  // Field: AnalysisTransition_AfterSequenceFileGlobals
  //
  // (Value: 24) Indicates that the sequence analyzer finished analyzing the global variables in a sequence file.
  //
  AnalysisTransition_AfterSequenceFileGlobals = 24;
  // Field: AnalysisTransition_BeforeSequences
  //
  // (Value: 25) Indicates that the sequence analyzer is preparing to analyze the sequences in a sequence file.
  //
  AnalysisTransition_BeforeSequences = 25;
  // Field: AnalysisTransition_BeforeSequence
  //
  // (Value: 26) Indicates that the sequence analyzer is preparing to analyze one sequence in a sequence file. Use the AnalysisContext.Object property to obtain a reference to the sequence.
  //
  AnalysisTransition_BeforeSequence = 26;
  // Field: AnalysisTransition_BeforeSequenceVariables
  //
  // (Value: 27) Indicates that the sequence analyzer is preparing to analyze the variables in a sequence. Use the AnalysisContext.Object property to obtain a reference to the sequence.
  //
  AnalysisTransition_BeforeSequenceVariables = 27;
  // Field: AnalysisTransition_BeforeSequenceLocals
  //
  // (Value: 28) Indicates that the sequence analyzer is preparing to analyze the local variables in a sequence. Use the AnalysisContext.Object property to obtain a reference to the sequence.
  //
  AnalysisTransition_BeforeSequenceLocals = 28;
  // Field: AnalysisTransition_AfterSequenceLocals
  //
  // (Value: 29) Indicates that the sequence analyzer finished analyzing the local variables in a sequence. Use the AnalysisContext.Object property to obtain a reference to the sequence.
  //
  AnalysisTransition_AfterSequenceLocals = 29;
  // Field: AnalysisTransition_BeforeSequenceParameters
  //
  // (Value: 30) Indicates that the sequence analyzer is preparing to analyze the parameters in a sequence. Use the AnalysisContext.Object property to obtain a reference to the sequence.
  //
  AnalysisTransition_BeforeSequenceParameters = 30;
  // Field: AnalysisTransition_AfterSequenceParameters
  //
  // (Value: 31) Indicates that the sequence analyzer finished analyzing the parameters in a sequence. Use the AnalysisContext.Object property to obtain a reference to the sequence.
  //
  AnalysisTransition_AfterSequenceParameters = 31;
  // Field: AnalysisTransition_AfterSequenceVariables
  //
  // (Value: 32) Indicates that the sequence analyzer finished analyzing the variables in a sequence. Use the AnalysisContext.Object property to obtain a reference to the sequence.
  //
  AnalysisTransition_AfterSequenceVariables = 32;
  // Field: AnalysisTransition_BeforeSteps
  //
  // (Value: 33) Indicates that the sequence analyzer is preparing to analyze the steps in a sequence. Use the AnalysisContext.Object property to obtain a reference to the sequence.
  //
  AnalysisTransition_BeforeSteps = 33;
  // Field: AnalysisTransition_BeforeSetupStepGroup
  //
  // (Value: 34) Indicates that the sequence analyzer is preparing to analyze the Setup step group in a sequence. Use the AnalysisContext.Object property to obtain a reference to the sequence.
  //
  AnalysisTransition_BeforeSetupStepGroup = 34;
  // Field: AnalysisTransition_AfterSetupStepGroup
  //
  // (Value: 35) Indicates that the sequence analyzer finished analyzing the Setup step group in a sequence. Use the AnalysisContext.Object property to obtain a reference to the sequence.
  //
  AnalysisTransition_AfterSetupStepGroup = 35;
  // Field: AnalysisTransition_BeforeMainStepGroup
  //
  // (Value: 36) Indicates that the sequence analyzer is preparing to analyze the Main step group in a sequence. Use the AnalysisContext.Object property to obtain a reference to the sequence.
  //
  AnalysisTransition_BeforeMainStepGroup = 36;
  // Field: AnalysisTransition_AfterMainStepGroup
  //
  // (Value: 37) Indicates that the sequence analyzer finished analyzing the Main step group in a sequence. Use the AnalysisContext.Object property to obtain a reference to the sequence.
  //
  AnalysisTransition_AfterMainStepGroup = 37;
  // Field: AnalysisTransition_BeforeCleanupStepGroup
  //
  // (Value: 38) Indicates that the sequence analyzer is preparing to analyze the Cleanup step group in a sequence. Use the AnalysisContext.Object property to obtain a reference to the sequence.
  //
  AnalysisTransition_BeforeCleanupStepGroup = 38;
  // Field: AnalysisTransition_AfterCleanupStepGroup
  //
  // (Value: 39) Indicates that the sequence analyzer finished analyzing the Cleanup step group in a sequence. Use the AnalysisContext.Object property to obtain a reference to the sequence.
  //
  AnalysisTransition_AfterCleanupStepGroup = 39;
  // Field: AnalysisTransition_AfterSteps
  //
  // (Value: 40) Indicates that the sequence analyzer finished analyzing the steps in a sequence. Use the AnalysisContext.Object property to obtain a reference to the sequence.
  //
  AnalysisTransition_AfterSteps = 40;
  // Field: AnalysisTransition_AfterSequence
  //
  // (Value: 41) Indicates that the sequence analyzer finished analyzing one sequence in a sequence file. Use the AnalysisContext.Object property to obtain a reference to the sequence.
  //
  AnalysisTransition_AfterSequence = 41;
  // Field: AnalysisTransition_AfterSequences
  //
  // (Value: 42) Indicates that the sequence analyzer finished analyzing the sequences in a sequence file.
  //
  AnalysisTransition_AfterSequences = 42;
  // Field: AnalysisTransition_AfterSequenceFile
  //
  // (Value: 43) Indicates that the sequence analyzer finished analyzing a sequence file. Use the AnalysisContext.File property to obtain a reference to the sequence file. The AnalysisContext.Object property also contains a reference to the file.
  //
  AnalysisTransition_AfterSequenceFile = 43;
  // Field: AnalysisTransition_AfterSystem
  //
  // (Value: 44) Indicates that the sequence analyzer finished analyzing all files.
  //
  AnalysisTransition_AfterSystem = 44;
  // Field: AnalysisTransition_BeforeStep
  //
  // (Value: 45) Indicates that the sequence analyzer is preparing to analyze a step. Use the AnalysisContext.Object property to obtain a reference to the step.
  //
  AnalysisTransition_BeforeStep = 45;
  // Field: AnalysisTransition_AfterStep
  //
  // (Value: 46) Indicates that the sequence analyzer finished analyzing a step. Use the AnalysisContext.Object property to obtain a reference to the step.
  //
  AnalysisTransition_AfterStep = 46;
  // Field: AnalysisTransition_BeforeFileTypes
  //
  // (Value: 47) Indicates that the sequence analyzer is preparing to analyze the types defined in a TestStand file, including type palette files, sequence files, and workspace files. Use the AnalysisContext.File property to obtain a reference to the file.
  //
  AnalysisTransition_BeforeFileTypes = 47;
  // Field: AnalysisTransition_AfterFileTypes
  //
  // (Value: 48) Indicates that the sequence analyzer finished analyzing the types defined in a TestStand file, including type palette files, sequence files, and workspace files. Use the AnalysisContext.File property to obtain a reference to the file.
  //
  AnalysisTransition_AfterFileTypes = 48;
}

// module 

// GetRuleAnalysisDataOptions
//
// Use this enumeration with the AnalysisContext.GetRuleAnalysisData method.
//
enum GetRuleAnalysisDataOptions {
  // Field: GetRuleAnalysisDataOption_NoOptions
  //
  // (Value: 0x0) No options.
  //
  GetRuleAnalysisDataOption_NoOptions = 0;
  // Field: GetRuleAnalysisDataOption_Lock
  //
  // (Value: 0x1) Locks the data and prevents other threads from accessing the data. You must use this option if you change any of the rule analysis data. The TestStand Sequence Analyzer unlocks the data after the call to the analysis module completes.
  //
  GetRuleAnalysisDataOption_Lock = 1;
}

// module 

// RuleIds
//
// 
//
service RuleIds {
  // Field: NI_InvalidPropertyValue
  //
  // 
  //
  rpc Get_NI_InvalidPropertyValue(ConstantValueRequest) returns (stringResponse);
  // Field: NI_ExpressionEvaluationError
  //
  // 
  //
  rpc Get_NI_ExpressionEvaluationError(ConstantValueRequest) returns (stringResponse);
  // Field: NI_FileNotFound
  //
  // 
  //
  rpc Get_NI_FileNotFound(ConstantValueRequest) returns (stringResponse);
  // Field: NI_FileNotFoundWarning
  //
  // 
  //
  rpc Get_NI_FileNotFoundWarning(ConstantValueRequest) returns (stringResponse);
  // Field: NI_ModuleLoadable
  //
  // 
  //
  rpc Get_NI_ModuleLoadable(ConstantValueRequest) returns (stringResponse);
  // Field: NI_ModuleLoadWarnings
  //
  // 
  //
  rpc Get_NI_ModuleLoadWarnings(ConstantValueRequest) returns (stringResponse);
  // Field: NI_PrototypeCompatible
  //
  // 
  //
  rpc Get_NI_PrototypeCompatible(ConstantValueRequest) returns (stringResponse);
  // Field: NI_RemoteHostExists
  //
  // 
  //
  rpc Get_NI_RemoteHostExists(ConstantValueRequest) returns (stringResponse);
  // Field: NI_BlockErrors
  //
  // 
  //
  rpc Get_NI_BlockErrors(ConstantValueRequest) returns (stringResponse);
  // Field: NI_UnusedVariables
  //
  // 
  //
  rpc Get_NI_UnusedVariables(ConstantValueRequest) returns (stringResponse);
  // Field: NI_UnusedSequence
  //
  // 
  //
  rpc Get_NI_UnusedSequence(ConstantValueRequest) returns (stringResponse);
  // Field: NI_NormalRunMode
  //
  // 
  //
  rpc Get_NI_NormalRunMode(ConstantValueRequest) returns (stringResponse);
  // Field: NI_SequencePrototypeMatch
  //
  // 
  //
  rpc Get_NI_SequencePrototypeMatch(ConstantValueRequest) returns (stringResponse);
  // Field: NI_StepCount
  //
  // 
  //
  rpc Get_NI_StepCount(ConstantValueRequest) returns (stringResponse);
  // Field: NI_SequenceCount
  //
  // 
  //
  rpc Get_NI_SequenceCount(ConstantValueRequest) returns (stringResponse);
  // Field: NI_SequenceFileCount
  //
  // 
  //
  rpc Get_NI_SequenceFileCount(ConstantValueRequest) returns (stringResponse);
  // Field: NI_FileByExpression
  //
  // 
  //
  rpc Get_NI_FileByExpression(ConstantValueRequest) returns (stringResponse);
  // Field: NI_WatchExpressionsEnabled
  //
  // 
  //
  rpc Get_NI_WatchExpressionsEnabled(ConstantValueRequest) returns (stringResponse);
  // Field: NI_AbsolutePaths
  //
  // 
  //
  rpc Get_NI_AbsolutePaths(ConstantValueRequest) returns (stringResponse);
  // Field: NI_ValidPath
  //
  // 
  //
  rpc Get_NI_ValidPath(ConstantValueRequest) returns (stringResponse);
  // Field: NI_EscapeSequenceValid
  //
  // 
  //
  rpc Get_NI_EscapeSequenceValid(ConstantValueRequest) returns (stringResponse);
  // Field: NI_DynamicPropertyDoesNotExist
  //
  // 
  //
  rpc Get_NI_DynamicPropertyDoesNotExist(ConstantValueRequest) returns (stringResponse);
  // Field: NI_TypeVersionInvalid
  //
  // 
  //
  rpc Get_NI_TypeVersionInvalid(ConstantValueRequest) returns (stringResponse);
  // Field: NI_LVChecksumInvalid
  //
  // 
  //
  rpc Get_NI_LVChecksumInvalid(ConstantValueRequest) returns (stringResponse);
  // Field: NI_PartialOutputArrayLogged
  //
  // 
  //
  rpc Get_NI_PartialOutputArrayLogged(ConstantValueRequest) returns (stringResponse);
  // Field: NI_SuppressedEvaluationErrors
  //
  // 
  //
  rpc Get_NI_SuppressedEvaluationErrors(ConstantValueRequest) returns (stringResponse);
  // Field: NI_ModelSequenceCallResultsEnabled
  //
  // 
  //
  rpc Get_NI_ModelSequenceCallResultsEnabled(ConstantValueRequest) returns (stringResponse);
  // Field: NI_InvalidEnumerationValue
  //
  // 
  //
  rpc Get_NI_InvalidEnumerationValue(ConstantValueRequest) returns (stringResponse);
  // Field: NI_CodeModuleOutOfDateWarning
  //
  // 
  //
  rpc Get_NI_CodeModuleOutOfDateWarning(ConstantValueRequest) returns (stringResponse);
  // Field: NI_NotSupportedFeature
  //
  // 
  //
  rpc Get_NI_NotSupportedFeature(ConstantValueRequest) returns (stringResponse);
  // Field: NI_FeatureToggleEnabled
  //
  rpc Get_NI_FeatureToggleEnabled(ConstantValueRequest) returns (stringResponse);
}

// RuleAnalysisDataScope
//
// Use this enumeration with the AnalysisContext.GetRuleAnalysisData method.
//
enum RuleAnalysisDataScope {
  // Field: RuleAnalysisDataScope_Global
  //
  // (Value: 0) Specifies the rule analysis data that is global to the analysis session. The sequence analyzer creates the global data before the analysis begins and destroys it after the analysis completes.
  //
  RuleAnalysisDataScope_Global = 0;
  // Field: RuleAnalysisDataScope_File
  //
  // (Value: 1) Specifies the rule analysis data that is specific to the file being analyzed. The TestStand Sequence Analyzer creates the file data the first time you call the AnalysisContext.GetRuleAnalysisData method while analyzing the file and destroys it after the analysis of the file completes and after calling analysis modules for the after file transition. Do not use this option for the AnalysisTransition_BeforeSystem and AnalysisTransition_AfterSystem transitions.
  //
  RuleAnalysisDataScope_File = 1;
}

// module 

// ValidateExpressionOptions
//
// Use this enumeration with the AnalysisUtilities.ValidateExpression method.
//
enum ValidateExpressionOptions {
  // Field: ValidateExpressionOption_NoOptions
  //
  // (Value: 0x0) No options.
  //
  ValidateExpressionOption_NoOptions = 0;
  // Field: ValidateExpressionOption_Path
  //
  // (Value: 0x1) Specifies to expect a path in the expression the TestStand Sequence Analyzer validates.
  //
  ValidateExpressionOption_Path = 1;
  // Field: ValidateExpressionOption_MustEvaluateToProperty
  //
  // (Value: 0x2) Specifies that an expression must evaluate to a property location.
  //
  ValidateExpressionOption_MustEvaluateToProperty = 2;
}

// module 

// ValidatePathOptions
//
// Use this enumeration with the AnalysisUtilities.ValidatePath method.
//
enum ValidatePathOptions {
  // Field: ValidatePathOption_NoOptions
  //
  // (Value: 0x0) No options.
  //
  ValidatePathOption_NoOptions = 0;
  // Field: ValidatePathOption_IgnoreAbsolutePath
  //
  // (Value: 0x1) Specifies that the validation does not generate messages from the NI_AbsolutePaths rule. Pass this flag when you pass an absolute path to the AnalysisUtilities.ValidatePath method and do not want the validation to generate a message.
  //
  ValidatePathOption_IgnoreAbsolutePath = 1;
  // Field: ValidatePathOption_DoNotCheckIfExists
  //
  // (Value: 0x2) Specifies that a path does not have to exist. You typically use this option when a path refers to a directory or the location of a file to create at run time.
  //
  ValidatePathOption_DoNotCheckIfExists = 2;
  // Field: ValidatePathOption_NotRequiredForExecution
  //
  // (Value: 0x4) Use this option to indicate that a file is not required for execution. If you use this option, the AnalysisUtilities.ValidatePath method generates a warning instead of an error if the file you specified is missing.
  //
  ValidatePathOption_NotRequiredForExecution = 4;
  // Field: ValidatePathOption_IsCommand
  //
  // (Value: 0x8) Specifies that the path is an executable command. When you use this option and the path has no file extension, the AnalysisUtilities.ValidatePath method searches for files with the same basename that end in the .exe, .com, and .bat common command extensions.
  //
  ValidatePathOption_IsCommand = 8;
  // Field: ValidatePathOption_IsDirectory
  //
  // (Value: 0x10) Specifies that the path is a directory.
  //
  ValidatePathOption_IsDirectory = 16;
  // Field: ValidatePathOption_DoNotAllowEmpty
  //
  // (Value: 0x20) Specifies that empty paths are not allowed.
  //
  ValidatePathOption_DoNotAllowEmpty = 32;
}

// RuleModule
//
service RuleModule {
  // Method: Clone
  //
  rpc Clone(RuleModule_CloneRequest) returns (RuleModule_CloneResponse);
  
  

  // Property: Scope
  //
  rpc Get_Scope(RuleModule_Get_ScopeRequest) returns (RuleModule_Get_ScopeResponse);
  
  
  // Property: Module
  //
  rpc Get_Module(RuleModule_Get_ModuleRequest) returns (RuleModule_Get_ModuleResponse);
  
  
  // Property: IsBuiltin
  //
  rpc Set_IsBuiltin(RuleModule_Set_IsBuiltinRequest) returns (RuleModule_Set_IsBuiltinResponse);
  rpc Get_IsBuiltin(RuleModule_Get_IsBuiltinRequest) returns (RuleModule_Get_IsBuiltinResponse);
  
  
}
message RuleModuleInstance {
  // Specifies the handle of the RuleModule instance in the server.
  string id = 1;
}
message RuleModule_CloneRequest {
  // The id of the RuleModule object.
  RuleModuleInstance instance = 1;
}

message RuleModule_CloneResponse {
  RuleModuleInstance returnValue = 1;
}

message RuleModule_Get_ScopeRequest {
  // The id of the RuleModule object.
  RuleModuleInstance instance = 1;
}

message RuleModule_Get_ScopeResponse {
  RuleModuleScopeInstance returnValue = 1;
}

message RuleModule_Get_ModuleRequest {
  // The id of the RuleModule object.
  RuleModuleInstance instance = 1;
}

message RuleModule_Get_ModuleResponse {
  AnalyzerModuleInstance returnValue = 1;
}

message RuleModule_Set_IsBuiltinRequest {
  // The id of the RuleModule object.
  RuleModuleInstance instance = 1;
  bool val = 2;
}

message RuleModule_Set_IsBuiltinResponse {
}

message RuleModule_Get_IsBuiltinRequest {
  // The id of the RuleModule object.
  RuleModuleInstance instance = 1;
}

message RuleModule_Get_IsBuiltinResponse {
  bool returnValue = 1;
}
message RuleModuleScopeInstance {
  // Specifies the handle of the RuleModuleScope instance in the server.
  string id = 1;
}

message AnalyzerModuleInstance {
  // Specifies the handle of the AnalyzerModule instance in the server.
  string id = 1;
}

// RuleModuleScope
//
service RuleModuleScope {
  // Property: NamedTypes
  //
  rpc Set_NamedTypes(RuleModuleScope_Set_NamedTypesRequest) returns (RuleModuleScope_Set_NamedTypesResponse);
  rpc Get_NamedTypes(RuleModuleScope_Get_NamedTypesRequest) returns (RuleModuleScope_Get_NamedTypesResponse);
  
  
  // Property: ArrayOfNamedTypes
  //
  rpc Set_ArrayOfNamedTypes(RuleModuleScope_Set_ArrayOfNamedTypesRequest) returns (RuleModuleScope_Set_ArrayOfNamedTypesResponse);
  rpc Get_ArrayOfNamedTypes(RuleModuleScope_Get_ArrayOfNamedTypesRequest) returns (RuleModuleScope_Get_ArrayOfNamedTypesResponse);
  
  
  // Property: ObjectKinds
  //
  rpc Set_ObjectKinds(RuleModuleScope_Set_ObjectKindsRequest) returns (RuleModuleScope_Set_ObjectKindsResponse);
  rpc Get_ObjectKinds(RuleModuleScope_Get_ObjectKindsRequest) returns (RuleModuleScope_Get_ObjectKindsResponse);
  
  
  // Property: Transitions
  //
  rpc Set_Transitions(RuleModuleScope_Set_TransitionsRequest) returns (RuleModuleScope_Set_TransitionsResponse);
  rpc Get_Transitions(RuleModuleScope_Get_TransitionsRequest) returns (RuleModuleScope_Get_TransitionsResponse);
  
  
  // Property: Adapters
  //
  rpc Set_Adapters(RuleModuleScope_Set_AdaptersRequest) returns (RuleModuleScope_Set_AdaptersResponse);
  rpc Get_Adapters(RuleModuleScope_Get_AdaptersRequest) returns (RuleModuleScope_Get_AdaptersResponse);
  
  
  // Property: PropertyValueTypeFlags
  //
  rpc Set_PropertyValueTypeFlags(RuleModuleScope_Set_PropertyValueTypeFlagsRequest) returns (RuleModuleScope_Set_PropertyValueTypeFlagsResponse);
  rpc Get_PropertyValueTypeFlags(RuleModuleScope_Get_PropertyValueTypeFlagsRequest) returns (RuleModuleScope_Get_PropertyValueTypeFlagsResponse);
  
  
}
message RuleModuleScope_Set_NamedTypesRequest {
  // The id of the RuleModuleScope object.
  RuleModuleScopeInstance instance = 1;
  repeated string val = 2;
}

message RuleModuleScope_Set_NamedTypesResponse {
}

message RuleModuleScope_Get_NamedTypesRequest {
  // The id of the RuleModuleScope object.
  RuleModuleScopeInstance instance = 1;
}

message RuleModuleScope_Get_NamedTypesResponse {
  repeated string returnValue = 1;
}

message RuleModuleScope_Set_ArrayOfNamedTypesRequest {
  // The id of the RuleModuleScope object.
  RuleModuleScopeInstance instance = 1;
  repeated string val = 2;
}

message RuleModuleScope_Set_ArrayOfNamedTypesResponse {
}

message RuleModuleScope_Get_ArrayOfNamedTypesRequest {
  // The id of the RuleModuleScope object.
  RuleModuleScopeInstance instance = 1;
}

message RuleModuleScope_Get_ArrayOfNamedTypesResponse {
  repeated string returnValue = 1;
}

message RuleModuleScope_Set_ObjectKindsRequest {
  // The id of the RuleModuleScope object.
  RuleModuleScopeInstance instance = 1;
  ObjectKinds val = 2;
}

message RuleModuleScope_Set_ObjectKindsResponse {
}

message RuleModuleScope_Get_ObjectKindsRequest {
  // The id of the RuleModuleScope object.
  RuleModuleScopeInstance instance = 1;
}

message RuleModuleScope_Get_ObjectKindsResponse {
  ObjectKinds returnValue = 1;
}

message RuleModuleScope_Set_TransitionsRequest {
  // The id of the RuleModuleScope object.
  RuleModuleScopeInstance instance = 1;
  repeated AnalysisTransition val = 2;
}

message RuleModuleScope_Set_TransitionsResponse {
}

message RuleModuleScope_Get_TransitionsRequest {
  // The id of the RuleModuleScope object.
  RuleModuleScopeInstance instance = 1;
}

message RuleModuleScope_Get_TransitionsResponse {
  repeated AnalysisTransition returnValue = 1;
}

message RuleModuleScope_Set_AdaptersRequest {
  // The id of the RuleModuleScope object.
  RuleModuleScopeInstance instance = 1;
  repeated string val = 2;
}

message RuleModuleScope_Set_AdaptersResponse {
}

message RuleModuleScope_Get_AdaptersRequest {
  // The id of the RuleModuleScope object.
  RuleModuleScopeInstance instance = 1;
}

message RuleModuleScope_Get_AdaptersResponse {
  repeated string returnValue = 1;
}

message RuleModuleScope_Set_PropertyValueTypeFlagsRequest {
  // The id of the RuleModuleScope object.
  RuleModuleScopeInstance instance = 1;
  int32 val = 2;
}

message RuleModuleScope_Set_PropertyValueTypeFlagsResponse {
}

message RuleModuleScope_Get_PropertyValueTypeFlagsRequest {
  // The id of the RuleModuleScope object.
  RuleModuleScopeInstance instance = 1;
}

message RuleModuleScope_Get_PropertyValueTypeFlagsResponse {
  int32 returnValue = 1;
}

// AnalyzerModule
//
service AnalyzerModule {
  // Method: VerifyPrototype
  //
  rpc VerifyPrototype(AnalyzerModule_VerifyPrototypeRequest) returns (AnalyzerModule_VerifyPrototypeResponse);
  
  
  // Method: Call
  //
  rpc Call(AnalyzerModule_CallRequest) returns (AnalyzerModule_CallResponse);
  
  

  // Property: Adapter
  //
  rpc Set_Adapter(AnalyzerModule_Set_AdapterRequest) returns (AnalyzerModule_Set_AdapterResponse);
  rpc Get_Adapter(AnalyzerModule_Get_AdapterRequest) returns (AnalyzerModule_Get_AdapterResponse);
  
  
  // Property: Path
  //
  rpc Set_Path(AnalyzerModule_Set_PathRequest) returns (AnalyzerModule_Set_PathResponse);
  rpc Get_Path(AnalyzerModule_Get_PathRequest) returns (AnalyzerModule_Get_PathResponse);
  
  
  // Property: Function
  //
  rpc Set_Function(AnalyzerModule_Set_FunctionRequest) returns (AnalyzerModule_Set_FunctionResponse);
  rpc Get_Function(AnalyzerModule_Get_FunctionRequest) returns (AnalyzerModule_Get_FunctionResponse);
  
  
  // Property: Description
  //
  rpc Get_Description(AnalyzerModule_Get_DescriptionRequest) returns (AnalyzerModule_Get_DescriptionResponse);
  
  
  // Property: AbsolutePath
  //
  rpc Get_AbsolutePath(AnalyzerModule_Get_AbsolutePathRequest) returns (AnalyzerModule_Get_AbsolutePathResponse);
  
  
  // Property: Type
  //
  rpc Set_Type(AnalyzerModule_Set_TypeRequest) returns (AnalyzerModule_Set_TypeResponse);
  rpc Get_Type(AnalyzerModule_Get_TypeRequest) returns (AnalyzerModule_Get_TypeResponse);
  
  
  // Property: RunInLabVIEWRunTimeEngine
  //
  rpc Set_RunInLabVIEWRunTimeEngine(AnalyzerModule_Set_RunInLabVIEWRunTimeEngineRequest) returns (AnalyzerModule_Set_RunInLabVIEWRunTimeEngineResponse);
  rpc Get_RunInLabVIEWRunTimeEngine(AnalyzerModule_Get_RunInLabVIEWRunTimeEngineRequest) returns (AnalyzerModule_Get_RunInLabVIEWRunTimeEngineResponse);
  
  
  // Property: ClassName
  //
  rpc Set_ClassName(AnalyzerModule_Set_ClassNameRequest) returns (AnalyzerModule_Set_ClassNameResponse);
  rpc Get_ClassName(AnalyzerModule_Get_ClassNameRequest) returns (AnalyzerModule_Get_ClassNameResponse);
  
  
  // Property: ModuleName
  //
  rpc Set_ModuleName(AnalyzerModule_Set_ModuleNameRequest) returns (AnalyzerModule_Set_ModuleNameResponse);
  rpc Get_ModuleName(AnalyzerModule_Get_ModuleNameRequest) returns (AnalyzerModule_Get_ModuleNameResponse);
  
  
}
message AnalyzerModule_VerifyPrototypeRequest {
  // The id of the AnalyzerModule object.
  AnalyzerModuleInstance instance = 1;
}

message AnalyzerModule_VerifyPrototypeResponse {
  bool returnValue = 1;
  string errorMessage = 2;
}

message AnalyzerModule_CallRequest {
  // The id of the AnalyzerModule object.
  AnalyzerModuleInstance instance = 1;
  ObjectInstance argument = 2;
}

message AnalyzerModule_CallResponse {
}

message AnalyzerModule_Set_AdapterRequest {
  // The id of the AnalyzerModule object.
  AnalyzerModuleInstance instance = 1;
  ModuleAdapter val = 2;
}

message AnalyzerModule_Set_AdapterResponse {
}

message AnalyzerModule_Get_AdapterRequest {
  // The id of the AnalyzerModule object.
  AnalyzerModuleInstance instance = 1;
}

message AnalyzerModule_Get_AdapterResponse {
  ModuleAdapter returnValue = 1;
}

message AnalyzerModule_Set_PathRequest {
  // The id of the AnalyzerModule object.
  AnalyzerModuleInstance instance = 1;
  string val = 2;
}

message AnalyzerModule_Set_PathResponse {
}

message AnalyzerModule_Get_PathRequest {
  // The id of the AnalyzerModule object.
  AnalyzerModuleInstance instance = 1;
}

message AnalyzerModule_Get_PathResponse {
  string returnValue = 1;
}

message AnalyzerModule_Set_FunctionRequest {
  // The id of the AnalyzerModule object.
  AnalyzerModuleInstance instance = 1;
  string val = 2;
}

message AnalyzerModule_Set_FunctionResponse {
}

message AnalyzerModule_Get_FunctionRequest {
  // The id of the AnalyzerModule object.
  AnalyzerModuleInstance instance = 1;
}

message AnalyzerModule_Get_FunctionResponse {
  string returnValue = 1;
}

message AnalyzerModule_Get_DescriptionRequest {
  // The id of the AnalyzerModule object.
  AnalyzerModuleInstance instance = 1;
}

message AnalyzerModule_Get_DescriptionResponse {
  string returnValue = 1;
}

message AnalyzerModule_Get_AbsolutePathRequest {
  // The id of the AnalyzerModule object.
  AnalyzerModuleInstance instance = 1;
}

message AnalyzerModule_Get_AbsolutePathResponse {
  string returnValue = 1;
}

message AnalyzerModule_Set_TypeRequest {
  // The id of the AnalyzerModule object.
  AnalyzerModuleInstance instance = 1;
  ModuleType val = 2;
}

message AnalyzerModule_Set_TypeResponse {
}

message AnalyzerModule_Get_TypeRequest {
  // The id of the AnalyzerModule object.
  AnalyzerModuleInstance instance = 1;
}

message AnalyzerModule_Get_TypeResponse {
  ModuleType returnValue = 1;
}

message AnalyzerModule_Set_RunInLabVIEWRunTimeEngineRequest {
  // The id of the AnalyzerModule object.
  AnalyzerModuleInstance instance = 1;
  bool val = 2;
}

message AnalyzerModule_Set_RunInLabVIEWRunTimeEngineResponse {
}

message AnalyzerModule_Get_RunInLabVIEWRunTimeEngineRequest {
  // The id of the AnalyzerModule object.
  AnalyzerModuleInstance instance = 1;
}

message AnalyzerModule_Get_RunInLabVIEWRunTimeEngineResponse {
  bool returnValue = 1;
}

message AnalyzerModule_Set_ClassNameRequest {
  // The id of the AnalyzerModule object.
  AnalyzerModuleInstance instance = 1;
  string val = 2;
}

message AnalyzerModule_Set_ClassNameResponse {
}

message AnalyzerModule_Get_ClassNameRequest {
  // The id of the AnalyzerModule object.
  AnalyzerModuleInstance instance = 1;
}

message AnalyzerModule_Get_ClassNameResponse {
  string returnValue = 1;
}

message AnalyzerModule_Set_ModuleNameRequest {
  // The id of the AnalyzerModule object.
  AnalyzerModuleInstance instance = 1;
  string val = 2;
}

message AnalyzerModule_Set_ModuleNameResponse {
}

message AnalyzerModule_Get_ModuleNameRequest {
  // The id of the AnalyzerModule object.
  AnalyzerModuleInstance instance = 1;
}

message AnalyzerModule_Get_ModuleNameResponse {
  string returnValue = 1;
}

// RuleModules
//
service RuleModules {
  // Method: Insert
  //
  rpc Insert(RuleModules_InsertRequest) returns (RuleModules_InsertResponse);
  
  
  // Method: Remove
  //
  rpc Remove(RuleModules_RemoveRequest) returns (RuleModules_RemoveResponse);
  
  
  // Method: Clear
  //
  rpc Clear(RuleModules_ClearRequest) returns (RuleModules_ClearResponse);
  
  

  // Property: Item
  //
  rpc Get_Item(RuleModules_Get_ItemRequest) returns (RuleModules_Get_ItemResponse);
  
  
  // Property: Count
  //
  rpc Get_Count(RuleModules_Get_CountRequest) returns (RuleModules_Get_CountResponse);
  
  
}
message RuleModulesInstance {
  // Specifies the handle of the RuleModules instance in the server.
  string id = 1;
}
message RuleModules_InsertRequest {
  // The id of the RuleModules object.
  RuleModulesInstance instance = 1;
  int32 index = 2;
  RuleModuleInstance val = 3;
}

message RuleModules_InsertResponse {
}

message RuleModules_RemoveRequest {
  // The id of the RuleModules object.
  RuleModulesInstance instance = 1;
  int32 index = 2;
}

message RuleModules_RemoveResponse {
}

message RuleModules_ClearRequest {
  // The id of the RuleModules object.
  RuleModulesInstance instance = 1;
}

message RuleModules_ClearResponse {
}

message RuleModules_Get_ItemRequest {
  // The id of the RuleModules object.
  RuleModulesInstance instance = 1;
  int32 index = 2;
}

message RuleModules_Get_ItemResponse {
  RuleModuleInstance returnValue = 1;
}

message RuleModules_Get_CountRequest {
  // The id of the RuleModules object.
  RuleModulesInstance instance = 1;
}

message RuleModules_Get_CountResponse {
  int32 returnValue = 1;
}

// Rule
//
// Use this enumeration with the AnalysisContext.GetRuleAnalysisData method.
//
service Rule {
  // Method: Configure
  //
  rpc Configure(Rule_ConfigureRequest) returns (Rule_ConfigureResponse);
  
  
  // Method: Clone
  //
  rpc Clone(Rule_CloneRequest) returns (Rule_CloneResponse);
  
  
  // Method: GetDisplayDescription
  //
  rpc GetDisplayDescription(Rule_GetDisplayDescriptionRequest) returns (Rule_GetDisplayDescriptionResponse);
  
  

  // Property: Id
  //
  rpc Set_Id(Rule_Set_IdRequest) returns (Rule_Set_IdResponse);
  rpc Get_Id(Rule_Get_IdRequest) returns (Rule_Get_IdResponse);
  
  
  // Property: Name
  //
  rpc Set_Name(Rule_Set_NameRequest) returns (Rule_Set_NameResponse);
  rpc Get_Name(Rule_Get_NameRequest) returns (Rule_Get_NameResponse);
  
  
  // Property: Description
  //
  rpc Set_Description(Rule_Set_DescriptionRequest) returns (Rule_Set_DescriptionResponse);
  rpc Get_Description(Rule_Get_DescriptionRequest) returns (Rule_Get_DescriptionResponse);
  
  
  // Property: Category
  //
  rpc Set_Category(Rule_Set_CategoryRequest) returns (Rule_Set_CategoryResponse);
  rpc Get_Category(Rule_Get_CategoryRequest) returns (Rule_Get_CategoryResponse);
  
  
  // Property: StringResourceCategory
  //
  rpc Set_StringResourceCategory(Rule_Set_StringResourceCategoryRequest) returns (Rule_Set_StringResourceCategoryResponse);
  rpc Get_StringResourceCategory(Rule_Get_StringResourceCategoryRequest) returns (Rule_Get_StringResourceCategoryResponse);
  
  
  // Property: Severity
  //
  rpc Set_Severity(Rule_Set_SeverityRequest) returns (Rule_Set_SeverityResponse);
  rpc Get_Severity(Rule_Get_SeverityRequest) returns (Rule_Get_SeverityResponse);
  
  
  // Property: ConfigurationModule
  //
  rpc Set_ConfigurationModule(Rule_Set_ConfigurationModuleRequest) returns (Rule_Set_ConfigurationModuleResponse);
  rpc Get_ConfigurationModule(Rule_Get_ConfigurationModuleRequest) returns (Rule_Get_ConfigurationModuleResponse);
  
  
  // Property: IsBuiltin
  //
  rpc Set_IsBuiltin(Rule_Set_IsBuiltinRequest) returns (Rule_Set_IsBuiltinResponse);
  rpc Get_IsBuiltin(Rule_Get_IsBuiltinRequest) returns (Rule_Get_IsBuiltinResponse);
  
  
  // Property: RuleSettingDefinitions
  //
  rpc Get_RuleSettingDefinitions(Rule_Get_RuleSettingDefinitionsRequest) returns (Rule_Get_RuleSettingDefinitionsResponse);
  
  
  // Property: Enumerations
  //
  rpc Get_Enumerations(Rule_Get_EnumerationsRequest) returns (Rule_Get_EnumerationsResponse);
  
  
  // Property: DisplayName
  //
  rpc Get_DisplayName(Rule_Get_DisplayNameRequest) returns (Rule_Get_DisplayNameResponse);
  
  
}
message RuleInstance {
  // Specifies the handle of the Rule instance in the server.
  string id = 1;
}
message Rule_ConfigureRequest {
  // The id of the Rule object.
  RuleInstance instance = 1;
  RuleConfigurationInstance val = 2;
}

message Rule_ConfigureResponse {
  bool returnValue = 1;
}

message Rule_CloneRequest {
  // The id of the Rule object.
  RuleInstance instance = 1;
}

message Rule_CloneResponse {
  RuleInstance returnValue = 1;
}

message Rule_GetDisplayDescriptionRequest {
  // The id of the Rule object.
  RuleInstance instance = 1;
  RuleConfigurationInstance RuleConfiguration = 2;
}

message Rule_GetDisplayDescriptionResponse {
  string returnValue = 1;
}

message Rule_Set_IdRequest {
  // The id of the Rule object.
  RuleInstance instance = 1;
  string val = 2;
}

message Rule_Set_IdResponse {
}

message Rule_Get_IdRequest {
  // The id of the Rule object.
  RuleInstance instance = 1;
}

message Rule_Get_IdResponse {
  string returnValue = 1;
}

message Rule_Set_NameRequest {
  // The id of the Rule object.
  RuleInstance instance = 1;
  string val = 2;
}

message Rule_Set_NameResponse {
}

message Rule_Get_NameRequest {
  // The id of the Rule object.
  RuleInstance instance = 1;
}

message Rule_Get_NameResponse {
  string returnValue = 1;
}

message Rule_Set_DescriptionRequest {
  // The id of the Rule object.
  RuleInstance instance = 1;
  string val = 2;
}

message Rule_Set_DescriptionResponse {
}

message Rule_Get_DescriptionRequest {
  // The id of the Rule object.
  RuleInstance instance = 1;
}

message Rule_Get_DescriptionResponse {
  string returnValue = 1;
}

message Rule_Set_CategoryRequest {
  // The id of the Rule object.
  RuleInstance instance = 1;
  string val = 2;
}

message Rule_Set_CategoryResponse {
}

message Rule_Get_CategoryRequest {
  // The id of the Rule object.
  RuleInstance instance = 1;
}

message Rule_Get_CategoryResponse {
  string returnValue = 1;
}

message Rule_Set_StringResourceCategoryRequest {
  // The id of the Rule object.
  RuleInstance instance = 1;
  string val = 2;
}

message Rule_Set_StringResourceCategoryResponse {
}

message Rule_Get_StringResourceCategoryRequest {
  // The id of the Rule object.
  RuleInstance instance = 1;
}

message Rule_Get_StringResourceCategoryResponse {
  string returnValue = 1;
}

message Rule_Set_SeverityRequest {
  // The id of the Rule object.
  RuleInstance instance = 1;
  RuleSeverity val = 2;
}

message Rule_Set_SeverityResponse {
}

message Rule_Get_SeverityRequest {
  // The id of the Rule object.
  RuleInstance instance = 1;
}

message Rule_Get_SeverityResponse {
  RuleSeverity returnValue = 1;
}

message Rule_Set_ConfigurationModuleRequest {
  // The id of the Rule object.
  RuleInstance instance = 1;
  AnalyzerModuleInstance val = 2;
}

message Rule_Set_ConfigurationModuleResponse {
}

message Rule_Get_ConfigurationModuleRequest {
  // The id of the Rule object.
  RuleInstance instance = 1;
}

message Rule_Get_ConfigurationModuleResponse {
  AnalyzerModuleInstance returnValue = 1;
}

message Rule_Set_IsBuiltinRequest {
  // The id of the Rule object.
  RuleInstance instance = 1;
  bool val = 2;
}

message Rule_Set_IsBuiltinResponse {
}

message Rule_Get_IsBuiltinRequest {
  // The id of the Rule object.
  RuleInstance instance = 1;
}

message Rule_Get_IsBuiltinResponse {
  bool returnValue = 1;
}

message Rule_Get_RuleSettingDefinitionsRequest {
  // The id of the Rule object.
  RuleInstance instance = 1;
}

message Rule_Get_RuleSettingDefinitionsResponse {
  RuleSettingDefinitionsInstance returnValue = 1;
}

message Rule_Get_EnumerationsRequest {
  // The id of the Rule object.
  RuleInstance instance = 1;
}

message Rule_Get_EnumerationsResponse {
  RuleSettingEnumerationsInstance returnValue = 1;
}

message Rule_Get_DisplayNameRequest {
  // The id of the Rule object.
  RuleInstance instance = 1;
}

message Rule_Get_DisplayNameResponse {
  string returnValue = 1;
}
message RuleConfigurationInstance {
  // Specifies the handle of the RuleConfiguration instance in the server.
  string id = 1;
}

message RuleSettingDefinitionsInstance {
  // Specifies the handle of the RuleSettingDefinitions instance in the server.
  string id = 1;
}

message RuleSettingEnumerationsInstance {
  // Specifies the handle of the RuleSettingEnumerations instance in the server.
  string id = 1;
}

// RuleSettingDefinitions
//
service RuleSettingDefinitions {
  // Method: Insert
  //
  rpc Insert(RuleSettingDefinitions_InsertRequest) returns (RuleSettingDefinitions_InsertResponse);
  
  
  // Method: Remove
  //
  rpc Remove(RuleSettingDefinitions_RemoveRequest) returns (RuleSettingDefinitions_RemoveResponse);
  
  
  // Method: Clear
  //
  rpc Clear(RuleSettingDefinitions_ClearRequest) returns (RuleSettingDefinitions_ClearResponse);
  
  

  // Property: Item
  //
  rpc Get_Item(RuleSettingDefinitions_Get_ItemRequest) returns (RuleSettingDefinitions_Get_ItemResponse);
  
  
  // Property: Count
  //
  rpc Get_Count(RuleSettingDefinitions_Get_CountRequest) returns (RuleSettingDefinitions_Get_CountResponse);
  
  
}
message RuleSettingDefinitions_InsertRequest {
  // The id of the RuleSettingDefinitions object.
  RuleSettingDefinitionsInstance instance = 1;
  int32 index = 2;
  RuleSettingDefinitionInstance val = 3;
}

message RuleSettingDefinitions_InsertResponse {
}

message RuleSettingDefinitions_RemoveRequest {
  // The id of the RuleSettingDefinitions object.
  RuleSettingDefinitionsInstance instance = 1;
  int32 index = 2;
}

message RuleSettingDefinitions_RemoveResponse {
}

message RuleSettingDefinitions_ClearRequest {
  // The id of the RuleSettingDefinitions object.
  RuleSettingDefinitionsInstance instance = 1;
}

message RuleSettingDefinitions_ClearResponse {
}

message RuleSettingDefinitions_Get_ItemRequest {
  // The id of the RuleSettingDefinitions object.
  RuleSettingDefinitionsInstance instance = 1;
  int32 index = 2;
}

message RuleSettingDefinitions_Get_ItemResponse {
  RuleSettingDefinitionInstance returnValue = 1;
}

message RuleSettingDefinitions_Get_CountRequest {
  // The id of the RuleSettingDefinitions object.
  RuleSettingDefinitionsInstance instance = 1;
}

message RuleSettingDefinitions_Get_CountResponse {
  int32 returnValue = 1;
}
message RuleSettingDefinitionInstance {
  // Specifies the handle of the RuleSettingDefinition instance in the server.
  string id = 1;
}

// RuleSettingDefinition
//
service RuleSettingDefinition {
  // Property: Name
  //
  rpc Set_Name(RuleSettingDefinition_Set_NameRequest) returns (RuleSettingDefinition_Set_NameResponse);
  rpc Get_Name(RuleSettingDefinition_Get_NameRequest) returns (RuleSettingDefinition_Get_NameResponse);
  
  
  // Property: DisplayName
  //
  rpc Get_DisplayName(RuleSettingDefinition_Get_DisplayNameRequest) returns (RuleSettingDefinition_Get_DisplayNameResponse);
  
  
  // Property: Type
  //
  rpc Set_Type(RuleSettingDefinition_Set_TypeRequest) returns (RuleSettingDefinition_Set_TypeResponse);
  rpc Get_Type(RuleSettingDefinition_Get_TypeRequest) returns (RuleSettingDefinition_Get_TypeResponse);
  
  
  // Property: EnumerationName
  //
  rpc Set_EnumerationName(RuleSettingDefinition_Set_EnumerationNameRequest) returns (RuleSettingDefinition_Set_EnumerationNameResponse);
  rpc Get_EnumerationName(RuleSettingDefinition_Get_EnumerationNameRequest) returns (RuleSettingDefinition_Get_EnumerationNameResponse);
  
  
  // Property: DefaultValue
  //
  rpc Set_DefaultValue(RuleSettingDefinition_Set_DefaultValueRequest) returns (RuleSettingDefinition_Set_DefaultValueResponse);
  rpc Get_DefaultValue(RuleSettingDefinition_Get_DefaultValueRequest) returns (RuleSettingDefinition_Get_DefaultValueResponse);
  
  
}
message RuleSettingDefinition_Set_NameRequest {
  // The id of the RuleSettingDefinition object.
  RuleSettingDefinitionInstance instance = 1;
  string val = 2;
}

message RuleSettingDefinition_Set_NameResponse {
}

message RuleSettingDefinition_Get_NameRequest {
  // The id of the RuleSettingDefinition object.
  RuleSettingDefinitionInstance instance = 1;
}

message RuleSettingDefinition_Get_NameResponse {
  string returnValue = 1;
}

message RuleSettingDefinition_Get_DisplayNameRequest {
  // The id of the RuleSettingDefinition object.
  RuleSettingDefinitionInstance instance = 1;
}

message RuleSettingDefinition_Get_DisplayNameResponse {
  string returnValue = 1;
}

message RuleSettingDefinition_Set_TypeRequest {
  // The id of the RuleSettingDefinition object.
  RuleSettingDefinitionInstance instance = 1;
  RuleSettingType val = 2;
}

message RuleSettingDefinition_Set_TypeResponse {
}

message RuleSettingDefinition_Get_TypeRequest {
  // The id of the RuleSettingDefinition object.
  RuleSettingDefinitionInstance instance = 1;
}

message RuleSettingDefinition_Get_TypeResponse {
  RuleSettingType returnValue = 1;
}

message RuleSettingDefinition_Set_EnumerationNameRequest {
  // The id of the RuleSettingDefinition object.
  RuleSettingDefinitionInstance instance = 1;
  string val = 2;
}

message RuleSettingDefinition_Set_EnumerationNameResponse {
}

message RuleSettingDefinition_Get_EnumerationNameRequest {
  // The id of the RuleSettingDefinition object.
  RuleSettingDefinitionInstance instance = 1;
}

message RuleSettingDefinition_Get_EnumerationNameResponse {
  string returnValue = 1;
}

message RuleSettingDefinition_Set_DefaultValueRequest {
  // The id of the RuleSettingDefinition object.
  RuleSettingDefinitionInstance instance = 1;
  ObjectInstance val = 2;
}

message RuleSettingDefinition_Set_DefaultValueResponse {
}

message RuleSettingDefinition_Get_DefaultValueRequest {
  // The id of the RuleSettingDefinition object.
  RuleSettingDefinitionInstance instance = 1;
}

message RuleSettingDefinition_Get_DefaultValueResponse {
  oneof value { bool boolean = 3; double double = 5; string string = 6;  }
}

// RuleConfiguration
//
// Use the objects of the RuleConfiguration class to access the configuration information of a rule. A rule configuration contains the enabled state, severity, description, and other information for a specific rule. The sequence analyzer stores the configuration information of a rule in an analyzer project.
// In a rule configuration module, use the RuleConfigurationContext.RuleConfiguration property to obtain an instance of this class.
// In an analysis module, use the AnalysisContext.GetRuleConfiguration method to obtain an instance of this class.
//
service RuleConfiguration {
  // Property: RuleId
  //
  // Use this property in an analysis module or rule configuration module to obtain the unique ID of the rule.
  //
  // RuleConfiguration_Get_RuleIdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: RuleConfigurationInstance - The id of the RuleConfiguration object.
  //
  // RuleConfiguration_Get_RuleIdResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Use this property in an analysis module or rule configuration module to obtain the unique ID of the rule. 
  //
  rpc Get_RuleId(RuleConfiguration_Get_RuleIdRequest) returns (RuleConfiguration_Get_RuleIdResponse);
  
  
  // Property: Enabled
  //
  // Use this property in an analysis module to determine whether the rule is enabled. Do not set this property. Do not perform any analysis in the analysis module if this property is False.
  //
  // The TestStand Sequence Analyzer sets this property when a user enables or disables a rule on the Rules pane of the Current Sequence Analyzer Project window in the TestStand Sequence Editor or on the Rules tab of the stand-alone sequence analyzer application.
  //
  // RuleConfiguration_Set_EnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: RuleConfigurationInstance - The id of the RuleConfiguration object.
  //    - val: bool - Use this property in an analysis module to determine whether the rule is enabled. Do not set this property. Do not perform any analysis in the analysis module if this property is False. 
  //
  // RuleConfiguration_Set_EnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // RuleConfiguration_Get_EnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: RuleConfigurationInstance - The id of the RuleConfiguration object.
  //
  // RuleConfiguration_Get_EnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Use this property in an analysis module to determine whether the rule is enabled. Do not set this property. Do not perform any analysis in the analysis module if this property is False. 
  //
  rpc Set_Enabled(RuleConfiguration_Set_EnabledRequest) returns (RuleConfiguration_Set_EnabledResponse);
  rpc Get_Enabled(RuleConfiguration_Get_EnabledRequest) returns (RuleConfiguration_Get_EnabledResponse);
  
  
  // Property: ConfigurationData
  //
  // In a rule configuration module, use this property to store configuration data for the rule. In an analysis module, use this property to obtain the configuration data stored for the rule.
  //
  // Use only rule configuration modules to modify configuration data. Do not make changes to the data in an analysis module.
  // The TestStand Sequence Analyzer creates an empty container property object for each rule when it creates a new analyzer project. Use a rule configuration module to save rule data in the property object.
  // When you save configuration data to this property in a rule configuration module, also set the RuleConfiguration.Description property to include a description of the configuration data so that generated reports contain information about the configuration data and so that users can easily view the rule settings by viewing the rule description on the Rules pane of the Current Sequence Analyzer Project window in the TestStand Sequence Editor or on the Rules tab of the stand-alone sequence analyzer application.
  //
  // RuleConfiguration_Get_ConfigurationDataRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: RuleConfigurationInstance - The id of the RuleConfiguration object.
  //
  // RuleConfiguration_Get_ConfigurationDataResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - In a rule configuration module, use this property to store configuration data for the rule. In an analysis module, use this property to obtain the configuration data stored for the rule. 
  //
  rpc Get_ConfigurationData(RuleConfiguration_Get_ConfigurationDataRequest) returns (RuleConfiguration_Get_ConfigurationDataResponse);
  
  
  // Property: RuleSettingValues
  //
  // Use this property in an analysis module to obtain the values for rule settings. Use this property only for rules for which you enable the Use Rule Settings configuration option on the Advanced tab of the Edit Rule dialog box. Do not use this property in a rule configuration module. Rule configuration modules store rule data in the RuleConfiguration.ConfigurationData property.
  //
  // RuleConfiguration_Get_RuleSettingValuesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: RuleConfigurationInstance - The id of the RuleConfiguration object.
  //
  // RuleConfiguration_Get_RuleSettingValuesResponse - The response message from the server. It provides the return value.
  //    - returnValue: RuleSettingValuesInstance - Use this property in an analysis module to obtain the values for rule settings. Use this property only for rules for which you enable the Use Rule Settings configuration option on the Advanced tab of the Edit Rule dialog box. Do not use this property in a rule configuration module. Rule configuration modules store rule data in the RuleConfiguration.ConfigurationData property. 
  //
  rpc Get_RuleSettingValues(RuleConfiguration_Get_RuleSettingValuesRequest) returns (RuleConfiguration_Get_RuleSettingValuesResponse);
  
  
  // Property: Severity
  //
  // Use this property in an analysis module or rule configuration module to obtain the rule severity. Do not set this property.
  //
  // The TestStand Sequence Analyzer sets this property when a user changes the setting in the Severity column for a rule on the Rules pane of the Current Sequence Analyzer Project window in the TestStand Sequence Editor or on the Rules tab of the stand-alone sequence analyzer application.
  //
  // RuleConfiguration_Set_SeverityRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: RuleConfigurationInstance - The id of the RuleConfiguration object.
  //    - val: RuleSeverity - Use this property in an analysis module or rule configuration module to obtain the rule severity. Do not set this property. 
  //
  // RuleConfiguration_Set_SeverityResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // RuleConfiguration_Get_SeverityRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: RuleConfigurationInstance - The id of the RuleConfiguration object.
  //
  // RuleConfiguration_Get_SeverityResponse - The response message from the server. It provides the return value.
  //    - returnValue: RuleSeverity - Use this property in an analysis module or rule configuration module to obtain the rule severity. Do not set this property. 
  //
  rpc Set_Severity(RuleConfiguration_Set_SeverityRequest) returns (RuleConfiguration_Set_SeverityResponse);
  rpc Get_Severity(RuleConfiguration_Get_SeverityRequest) returns (RuleConfiguration_Get_SeverityResponse);
  
  
  // Property: Description
  //
  // Use this property in an analysis module to obtain the rule description. Use this property in a rule configuration module to save a custom rule description.
  //
  // When you save configuration data to the RuleConfiguration.ConfigurationData property in a rule configuration module, also set this property to include a description of the configuration data so that generated reports contain information about the configuration data and so that users can easily view the rule settings by viewing the rule description on the Rules pane of the Current Sequence Analyzer Project window in the TestStand Sequence Editor or on the Rules tab of the stand-alone sequence analyzer application.
  //
  // RuleConfiguration_Set_DescriptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: RuleConfigurationInstance - The id of the RuleConfiguration object.
  //    - val: string - Use this property in an analysis module to obtain the rule description. Use this property in a rule configuration module to save a custom rule description. 
  //
  // RuleConfiguration_Set_DescriptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // RuleConfiguration_Get_DescriptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: RuleConfigurationInstance - The id of the RuleConfiguration object.
  //
  // RuleConfiguration_Get_DescriptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Use this property in an analysis module to obtain the rule description. Use this property in a rule configuration module to save a custom rule description. 
  //
  rpc Set_Description(RuleConfiguration_Set_DescriptionRequest) returns (RuleConfiguration_Set_DescriptionResponse);
  rpc Get_Description(RuleConfiguration_Get_DescriptionRequest) returns (RuleConfiguration_Get_DescriptionResponse);
  
  
}
message RuleSettingValuesInstance {
  // Specifies the handle of the RuleSettingValues instance in the server.
  string id = 1;
}
message RuleConfiguration_Get_RuleIdRequest {
  // The id of the RuleConfiguration object.
  RuleConfigurationInstance instance = 1;
}

message RuleConfiguration_Get_RuleIdResponse {
  // Use this property in an analysis module or rule configuration module to obtain the unique ID of the rule.
  string returnValue = 1;
}

message RuleConfiguration_Set_EnabledRequest {
  // The id of the RuleConfiguration object.
  RuleConfigurationInstance instance = 1;
  // Use this property in an analysis module to determine whether the rule is enabled. Do not set this property. Do not perform any analysis in the analysis module if this property is False.
  bool val = 2;
}

message RuleConfiguration_Set_EnabledResponse {
}

message RuleConfiguration_Get_EnabledRequest {
  // The id of the RuleConfiguration object.
  RuleConfigurationInstance instance = 1;
}

message RuleConfiguration_Get_EnabledResponse {
  // Use this property in an analysis module to determine whether the rule is enabled. Do not set this property. Do not perform any analysis in the analysis module if this property is False.
  bool returnValue = 1;
}

message RuleConfiguration_Get_ConfigurationDataRequest {
  // The id of the RuleConfiguration object.
  RuleConfigurationInstance instance = 1;
}

message RuleConfiguration_Get_ConfigurationDataResponse {
  // In a rule configuration module, use this property to store configuration data for the rule. In an analysis module, use this property to obtain the configuration data stored for the rule.
  PropertyObjectInstance returnValue = 1;
}

message RuleConfiguration_Get_RuleSettingValuesRequest {
  // The id of the RuleConfiguration object.
  RuleConfigurationInstance instance = 1;
}

message RuleConfiguration_Get_RuleSettingValuesResponse {
  // Use this property in an analysis module to obtain the values for rule settings. Use this property only for rules for which you enable the Use Rule Settings configuration option on the Advanced tab of the Edit Rule dialog box. Do not use this property in a rule configuration module. Rule configuration modules store rule data in the RuleConfiguration.ConfigurationData property.
  RuleSettingValuesInstance returnValue = 1;
}

message RuleConfiguration_Set_SeverityRequest {
  // The id of the RuleConfiguration object.
  RuleConfigurationInstance instance = 1;
  // Use this property in an analysis module or rule configuration module to obtain the rule severity. Do not set this property.
  RuleSeverity val = 2;
}

message RuleConfiguration_Set_SeverityResponse {
}

message RuleConfiguration_Get_SeverityRequest {
  // The id of the RuleConfiguration object.
  RuleConfigurationInstance instance = 1;
}

message RuleConfiguration_Get_SeverityResponse {
  // Use this property in an analysis module or rule configuration module to obtain the rule severity. Do not set this property.
  RuleSeverity returnValue = 1;
}

message RuleConfiguration_Set_DescriptionRequest {
  // The id of the RuleConfiguration object.
  RuleConfigurationInstance instance = 1;
  // Use this property in an analysis module to obtain the rule description. Use this property in a rule configuration module to save a custom rule description.
  string val = 2;
}

message RuleConfiguration_Set_DescriptionResponse {
}

message RuleConfiguration_Get_DescriptionRequest {
  // The id of the RuleConfiguration object.
  RuleConfigurationInstance instance = 1;
}

message RuleConfiguration_Get_DescriptionResponse {
  // Use this property in an analysis module to obtain the rule description. Use this property in a rule configuration module to save a custom rule description.
  string returnValue = 1;
}

// RuleSettingValues
//
// Use objects of the RuleSettingValues class to obtain rule setting values. Use the RuleConfiguration.RuleSettingValues property to obtain an instance of the RuleSettingValues class. Use this class only for rules for which you enable the Use Rule Settings configuration option on the Advanced tab of the Edit Rule dialog box.
//
service RuleSettingValues {
  // Method: GetBooleanValue
  //
  // Use this method in an analysis module to obtain the value for a Boolean rule setting.
  //
  // RuleSettingValues_GetBooleanValueRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: RuleSettingValuesInstance - The id of the RuleSettingValues object.
  //    - settingName: string - Pass the name of the rule setting.
  //
  // RuleSettingValues_GetBooleanValueResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc GetBooleanValue(RuleSettingValues_GetBooleanValueRequest) returns (RuleSettingValues_GetBooleanValueResponse);
  
  
  // Method: GetStringValue
  //
  // Use this method in an analysis module to obtain the value for a string rule setting.
  //
  // RuleSettingValues_GetStringValueRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: RuleSettingValuesInstance - The id of the RuleSettingValues object.
  //    - settingName: string - Pass the name of the rule setting.
  //
  // RuleSettingValues_GetStringValueResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetStringValue(RuleSettingValues_GetStringValueRequest) returns (RuleSettingValues_GetStringValueResponse);
  
  
  // Method: GetNumberValue
  //
  // Use this method in an analysis module to obtain the value for a number or enumeration rule setting.
  //
  // RuleSettingValues_GetNumberValueRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: RuleSettingValuesInstance - The id of the RuleSettingValues object.
  //    - settingName: string - Pass the name of the rule setting.
  //
  // RuleSettingValues_GetNumberValueResponse - The response message from the server. It provides the return value.
  //    - returnValue: double - The return type of the Double object.
  //
  rpc GetNumberValue(RuleSettingValues_GetNumberValueRequest) returns (RuleSettingValues_GetNumberValueResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // RuleSettingValues_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: RuleSettingValuesInstance - The id of the RuleSettingValues object.
  //    - indexOrName: oneof index { int32 numericIndex = 2; string nameIndex = 3; } - 
  //
  // RuleSettingValues_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: RuleSettingValueInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(RuleSettingValues_Get_ItemRequest) returns (RuleSettingValues_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // RuleSettingValues_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: RuleSettingValuesInstance - The id of the RuleSettingValues object.
  //
  // RuleSettingValues_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(RuleSettingValues_Get_CountRequest) returns (RuleSettingValues_Get_CountResponse);
  
  
}
message RuleSettingValueInstance {
  // Specifies the handle of the RuleSettingValue instance in the server.
  string id = 1;
}
message RuleSettingValues_GetBooleanValueRequest {
  // The id of the RuleSettingValues object.
  RuleSettingValuesInstance instance = 1;
  // Pass the name of the rule setting.
  string settingName = 2;
}

message RuleSettingValues_GetBooleanValueResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message RuleSettingValues_GetStringValueRequest {
  // The id of the RuleSettingValues object.
  RuleSettingValuesInstance instance = 1;
  // Pass the name of the rule setting.
  string settingName = 2;
}

message RuleSettingValues_GetStringValueResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message RuleSettingValues_GetNumberValueRequest {
  // The id of the RuleSettingValues object.
  RuleSettingValuesInstance instance = 1;
  // Pass the name of the rule setting.
  string settingName = 2;
}

message RuleSettingValues_GetNumberValueResponse {
  // The return type of the Double object.
  double returnValue = 1;
}

message RuleSettingValues_Get_ItemRequest {
  // The id of the RuleSettingValues object.
  RuleSettingValuesInstance instance = 1;
  // 
  oneof index { int32 numericIndex = 2; string nameIndex = 3; }
}

message RuleSettingValues_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  RuleSettingValueInstance returnValue = 1;
}

message RuleSettingValues_Get_CountRequest {
  // The id of the RuleSettingValues object.
  RuleSettingValuesInstance instance = 1;
}

message RuleSettingValues_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// RuleSettingValue
//
// Use objects of the RuleSettingValues class to obtain rule setting values. Use the RuleConfiguration.RuleSettingValues property to obtain an instance of the RuleSettingValues class. Use this class only for rules for which you enable the Use Rule Settings configuration option on the Advanced tab of the Edit Rule dialog box.
//
service RuleSettingValue {
  // Property: Definition
  //
  rpc Get_Definition(RuleSettingValue_Get_DefinitionRequest) returns (RuleSettingValue_Get_DefinitionResponse);
  
  
  // Property: Value
  //
  rpc Set_Value(RuleSettingValue_Set_ValueRequest) returns (RuleSettingValue_Set_ValueResponse);
  rpc Get_Value(RuleSettingValue_Get_ValueRequest) returns (RuleSettingValue_Get_ValueResponse);
  
  
}
message RuleSettingValue_Get_DefinitionRequest {
  // The id of the RuleSettingValue object.
  RuleSettingValueInstance instance = 1;
}

message RuleSettingValue_Get_DefinitionResponse {
  RuleSettingDefinitionInstance returnValue = 1;
}

message RuleSettingValue_Set_ValueRequest {
  // The id of the RuleSettingValue object.
  RuleSettingValueInstance instance = 1;
  ObjectInstance val = 2;
}

message RuleSettingValue_Set_ValueResponse {
}

message RuleSettingValue_Get_ValueRequest {
  // The id of the RuleSettingValue object.
  RuleSettingValueInstance instance = 1;
}

message RuleSettingValue_Get_ValueResponse {
  oneof value { bool boolean = 3; double double = 5; string string = 6;  }
}

// RuleSettingEnumerations
//
service RuleSettingEnumerations {
  // Method: Insert
  //
  rpc Insert(RuleSettingEnumerations_InsertRequest) returns (RuleSettingEnumerations_InsertResponse);
  
  
  // Method: Remove
  //
  rpc Remove(RuleSettingEnumerations_RemoveRequest) returns (RuleSettingEnumerations_RemoveResponse);
  
  
  // Method: Clear
  //
  rpc Clear(RuleSettingEnumerations_ClearRequest) returns (RuleSettingEnumerations_ClearResponse);
  
  

  // Property: Item
  //
  rpc Get_Item(RuleSettingEnumerations_Get_ItemRequest) returns (RuleSettingEnumerations_Get_ItemResponse);
  
  
  // Property: Count
  //
  rpc Get_Count(RuleSettingEnumerations_Get_CountRequest) returns (RuleSettingEnumerations_Get_CountResponse);
  
  
}
message RuleSettingEnumerations_InsertRequest {
  // The id of the RuleSettingEnumerations object.
  RuleSettingEnumerationsInstance instance = 1;
  int32 index = 2;
  RuleSettingEnumerationInstance val = 3;
}

message RuleSettingEnumerations_InsertResponse {
}

message RuleSettingEnumerations_RemoveRequest {
  // The id of the RuleSettingEnumerations object.
  RuleSettingEnumerationsInstance instance = 1;
  int32 index = 2;
}

message RuleSettingEnumerations_RemoveResponse {
}

message RuleSettingEnumerations_ClearRequest {
  // The id of the RuleSettingEnumerations object.
  RuleSettingEnumerationsInstance instance = 1;
}

message RuleSettingEnumerations_ClearResponse {
}

message RuleSettingEnumerations_Get_ItemRequest {
  // The id of the RuleSettingEnumerations object.
  RuleSettingEnumerationsInstance instance = 1;
  oneof index { int32 numericIndex = 2; string nameIndex = 3; }
}

message RuleSettingEnumerations_Get_ItemResponse {
  RuleSettingEnumerationInstance returnValue = 1;
}

message RuleSettingEnumerations_Get_CountRequest {
  // The id of the RuleSettingEnumerations object.
  RuleSettingEnumerationsInstance instance = 1;
}

message RuleSettingEnumerations_Get_CountResponse {
  int32 returnValue = 1;
}
message RuleSettingEnumerationInstance {
  // Specifies the handle of the RuleSettingEnumeration instance in the server.
  string id = 1;
}

// RuleSettingEnumeration
//
service RuleSettingEnumeration {
  // Property: Name
  //
  rpc Set_Name(RuleSettingEnumeration_Set_NameRequest) returns (RuleSettingEnumeration_Set_NameResponse);
  rpc Get_Name(RuleSettingEnumeration_Get_NameRequest) returns (RuleSettingEnumeration_Get_NameResponse);
  
  
  // Property: Items
  //
  rpc Get_Items(RuleSettingEnumeration_Get_ItemsRequest) returns (RuleSettingEnumeration_Get_ItemsResponse);
  
  
}
message RuleSettingEnumeration_Set_NameRequest {
  // The id of the RuleSettingEnumeration object.
  RuleSettingEnumerationInstance instance = 1;
  string val = 2;
}

message RuleSettingEnumeration_Set_NameResponse {
}

message RuleSettingEnumeration_Get_NameRequest {
  // The id of the RuleSettingEnumeration object.
  RuleSettingEnumerationInstance instance = 1;
}

message RuleSettingEnumeration_Get_NameResponse {
  string returnValue = 1;
}

message RuleSettingEnumeration_Get_ItemsRequest {
  // The id of the RuleSettingEnumeration object.
  RuleSettingEnumerationInstance instance = 1;
}

message RuleSettingEnumeration_Get_ItemsResponse {
  RuleSettingEnumerationItemsInstance returnValue = 1;
}
message RuleSettingEnumerationItemsInstance {
  // Specifies the handle of the RuleSettingEnumerationItems instance in the server.
  string id = 1;
}

// RuleSettingEnumerationItems
//
service RuleSettingEnumerationItems {
  // Method: Insert
  //
  rpc Insert(RuleSettingEnumerationItems_InsertRequest) returns (RuleSettingEnumerationItems_InsertResponse);
  
  
  // Method: Remove
  //
  rpc Remove(RuleSettingEnumerationItems_RemoveRequest) returns (RuleSettingEnumerationItems_RemoveResponse);
  
  
  // Method: Clear
  //
  rpc Clear(RuleSettingEnumerationItems_ClearRequest) returns (RuleSettingEnumerationItems_ClearResponse);
  
  

  // Property: Item
  //
  rpc Get_Item(RuleSettingEnumerationItems_Get_ItemRequest) returns (RuleSettingEnumerationItems_Get_ItemResponse);
  
  
  // Property: Count
  //
  rpc Get_Count(RuleSettingEnumerationItems_Get_CountRequest) returns (RuleSettingEnumerationItems_Get_CountResponse);
  
  
}
message RuleSettingEnumerationItems_InsertRequest {
  // The id of the RuleSettingEnumerationItems object.
  RuleSettingEnumerationItemsInstance instance = 1;
  int32 index = 2;
  RuleSettingEnumerationItemInstance val = 3;
}

message RuleSettingEnumerationItems_InsertResponse {
}

message RuleSettingEnumerationItems_RemoveRequest {
  // The id of the RuleSettingEnumerationItems object.
  RuleSettingEnumerationItemsInstance instance = 1;
  int32 index = 2;
}

message RuleSettingEnumerationItems_RemoveResponse {
}

message RuleSettingEnumerationItems_ClearRequest {
  // The id of the RuleSettingEnumerationItems object.
  RuleSettingEnumerationItemsInstance instance = 1;
}

message RuleSettingEnumerationItems_ClearResponse {
}

message RuleSettingEnumerationItems_Get_ItemRequest {
  // The id of the RuleSettingEnumerationItems object.
  RuleSettingEnumerationItemsInstance instance = 1;
  int32 index = 2;
}

message RuleSettingEnumerationItems_Get_ItemResponse {
  RuleSettingEnumerationItemInstance returnValue = 1;
}

message RuleSettingEnumerationItems_Get_CountRequest {
  // The id of the RuleSettingEnumerationItems object.
  RuleSettingEnumerationItemsInstance instance = 1;
}

message RuleSettingEnumerationItems_Get_CountResponse {
  int32 returnValue = 1;
}
message RuleSettingEnumerationItemInstance {
  // Specifies the handle of the RuleSettingEnumerationItem instance in the server.
  string id = 1;
}

// RuleSettingEnumerationItem
//
service RuleSettingEnumerationItem {
  // Property: Name
  //
  rpc Set_Name(RuleSettingEnumerationItem_Set_NameRequest) returns (RuleSettingEnumerationItem_Set_NameResponse);
  rpc Get_Name(RuleSettingEnumerationItem_Get_NameRequest) returns (RuleSettingEnumerationItem_Get_NameResponse);
  
  
  // Property: Value
  //
  rpc Set_Value(RuleSettingEnumerationItem_Set_ValueRequest) returns (RuleSettingEnumerationItem_Set_ValueResponse);
  rpc Get_Value(RuleSettingEnumerationItem_Get_ValueRequest) returns (RuleSettingEnumerationItem_Get_ValueResponse);
  
  
  // Property: DisplayName
  //
  rpc Get_DisplayName(RuleSettingEnumerationItem_Get_DisplayNameRequest) returns (RuleSettingEnumerationItem_Get_DisplayNameResponse);
  
  
}
message RuleSettingEnumerationItem_Set_NameRequest {
  // The id of the RuleSettingEnumerationItem object.
  RuleSettingEnumerationItemInstance instance = 1;
  string val = 2;
}

message RuleSettingEnumerationItem_Set_NameResponse {
}

message RuleSettingEnumerationItem_Get_NameRequest {
  // The id of the RuleSettingEnumerationItem object.
  RuleSettingEnumerationItemInstance instance = 1;
}

message RuleSettingEnumerationItem_Get_NameResponse {
  string returnValue = 1;
}

message RuleSettingEnumerationItem_Set_ValueRequest {
  // The id of the RuleSettingEnumerationItem object.
  RuleSettingEnumerationItemInstance instance = 1;
  double val = 2;
}

message RuleSettingEnumerationItem_Set_ValueResponse {
}

message RuleSettingEnumerationItem_Get_ValueRequest {
  // The id of the RuleSettingEnumerationItem object.
  RuleSettingEnumerationItemInstance instance = 1;
}

message RuleSettingEnumerationItem_Get_ValueResponse {
  double returnValue = 1;
}

message RuleSettingEnumerationItem_Get_DisplayNameRequest {
  // The id of the RuleSettingEnumerationItem object.
  RuleSettingEnumerationItemInstance instance = 1;
}

message RuleSettingEnumerationItem_Get_DisplayNameResponse {
  string returnValue = 1;
}

// Rules
//
service Rules {
  // Method: Insert
  //
  rpc Insert(Rules_InsertRequest) returns (Rules_InsertResponse);
  
  
  // Method: Remove
  //
  rpc Remove(Rules_RemoveRequest) returns (Rules_RemoveResponse);
  
  
  // Method: Clear
  //
  rpc Clear(Rules_ClearRequest) returns (Rules_ClearResponse);
  
  

  // Property: Item
  //
  rpc Get_Item(Rules_Get_ItemRequest) returns (Rules_Get_ItemResponse);
  
  
  // Property: Count
  //
  rpc Get_Count(Rules_Get_CountRequest) returns (Rules_Get_CountResponse);
  
  
}
message RulesInstance {
  // Specifies the handle of the Rules instance in the server.
  string id = 1;
}
message Rules_InsertRequest {
  // The id of the Rules object.
  RulesInstance instance = 1;
  int32 index = 2;
  RuleInstance val = 3;
}

message Rules_InsertResponse {
}

message Rules_RemoveRequest {
  // The id of the Rules object.
  RulesInstance instance = 1;
  int32 index = 2;
}

message Rules_RemoveResponse {
}

message Rules_ClearRequest {
  // The id of the Rules object.
  RulesInstance instance = 1;
}

message Rules_ClearResponse {
}

message Rules_Get_ItemRequest {
  // The id of the Rules object.
  RulesInstance instance = 1;
  oneof index { int32 numericIndex = 2; string nameIndex = 3; }
}

message Rules_Get_ItemResponse {
  RuleInstance returnValue = 1;
}

message Rules_Get_CountRequest {
  // The id of the Rules object.
  RulesInstance instance = 1;
}

message Rules_Get_CountResponse {
  int32 returnValue = 1;
}

// Project
//
service Project {
  // Method: Write
  //
  rpc Write(Project_WriteRequest) returns (Project_WriteResponse);
  
  
  // Method: Read
  //
  rpc Read(Project_ReadRequest) returns (Project_ReadResponse);
  
  
  // Method: StartAnalysis
  //
  rpc StartAnalysis(Project_StartAnalysisRequest) returns (Project_StartAnalysisResponse);
  
  
  // Method: StartFileAnalysis
  //
  rpc StartFileAnalysis(Project_StartFileAnalysisRequest) returns (Project_StartFileAnalysisResponse);
  
  
  // Method: StopAnalysis
  //
  rpc StopAnalysis(Project_StopAnalysisRequest) returns (Project_StopAnalysisResponse);
  
  
  // Method: GenerateReport
  //
  rpc GenerateReport(Project_GenerateReportRequest) returns (Project_GenerateReportResponse);
  
  
  // Method: AbortAnalysis
  //
  rpc AbortAnalysis(Project_AbortAnalysisRequest) returns (Project_AbortAnalysisResponse);
  
  
  // Method: NewChildProject
  //
  rpc NewChildProject(Project_NewChildProjectRequest) returns (Project_NewChildProjectResponse);
  
  
  // Method: RemoveChildProject
  //
  rpc RemoveChildProject(Project_RemoveChildProjectRequest) returns (Project_RemoveChildProjectResponse);
  
  
  // Method: AddChildProject
  //
  rpc AddChildProject(Project_AddChildProjectRequest) returns (Project_AddChildProjectResponse);
  
  
  // Method: GetMessagesIgnoredInFile
  //
  rpc GetMessagesIgnoredInFile(Project_GetMessagesIgnoredInFileRequest) returns (Project_GetMessagesIgnoredInFileResponse);
  
  
  // Method: IgnoreMessageInFile
  //
  rpc IgnoreMessageInFile(Project_IgnoreMessageInFileRequest) returns (Project_IgnoreMessageInFileResponse);
  
  

  // Property: Path
  //
  rpc Set_Path(Project_Set_PathRequest) returns (Project_Set_PathResponse);
  rpc Get_Path(Project_Get_PathRequest) returns (Project_Get_PathResponse);
  
  
  // Property: WorkspaceFileToAnalyze
  //
  rpc Set_WorkspaceFileToAnalyze(Project_Set_WorkspaceFileToAnalyzeRequest) returns (Project_Set_WorkspaceFileToAnalyzeResponse);
  rpc Get_WorkspaceFileToAnalyze(Project_Get_WorkspaceFileToAnalyzeRequest) returns (Project_Get_WorkspaceFileToAnalyzeResponse);
  
  
  // Property: DirectoriesToAnalyze
  //
  rpc Get_DirectoriesToAnalyze(Project_Get_DirectoriesToAnalyzeRequest) returns (Project_Get_DirectoriesToAnalyzeResponse);
  
  
  // Property: FilesToAnalyze
  //
  rpc Set_FilesToAnalyze(Project_Set_FilesToAnalyzeRequest) returns (Project_Set_FilesToAnalyzeResponse);
  rpc Get_FilesToAnalyze(Project_Get_FilesToAnalyzeRequest) returns (Project_Get_FilesToAnalyzeResponse);
  
  
  // Property: AnalyzeNITypePalettes
  //
  rpc Set_AnalyzeNITypePalettes(Project_Set_AnalyzeNITypePalettesRequest) returns (Project_Set_AnalyzeNITypePalettesResponse);
  rpc Get_AnalyzeNITypePalettes(Project_Get_AnalyzeNITypePalettesRequest) returns (Project_Get_AnalyzeNITypePalettesResponse);
  
  
  // Property: AnalyzePublicTypePalettes
  //
  rpc Set_AnalyzePublicTypePalettes(Project_Set_AnalyzePublicTypePalettesRequest) returns (Project_Set_AnalyzePublicTypePalettesResponse);
  rpc Get_AnalyzePublicTypePalettes(Project_Get_AnalyzePublicTypePalettesRequest) returns (Project_Get_AnalyzePublicTypePalettesResponse);
  
  
  // Property: AnalyzeUsersFile
  //
  rpc Set_AnalyzeUsersFile(Project_Set_AnalyzeUsersFileRequest) returns (Project_Set_AnalyzeUsersFileResponse);
  rpc Get_AnalyzeUsersFile(Project_Get_AnalyzeUsersFileRequest) returns (Project_Get_AnalyzeUsersFileResponse);
  
  
  // Property: AnalyzeStationGlobalsFile
  //
  rpc Set_AnalyzeStationGlobalsFile(Project_Set_AnalyzeStationGlobalsFileRequest) returns (Project_Set_AnalyzeStationGlobalsFileResponse);
  rpc Get_AnalyzeStationGlobalsFile(Project_Get_AnalyzeStationGlobalsFileRequest) returns (Project_Get_AnalyzeStationGlobalsFileResponse);
  
  
  // Property: AnalyzeTemplatesFile
  //
  rpc Set_AnalyzeTemplatesFile(Project_Set_AnalyzeTemplatesFileRequest) returns (Project_Set_AnalyzeTemplatesFileResponse);
  rpc Get_AnalyzeTemplatesFile(Project_Get_AnalyzeTemplatesFileRequest) returns (Project_Get_AnalyzeTemplatesFileResponse);
  
  
  // Property: Messages
  //
  rpc Get_Messages(Project_Get_MessagesRequest) returns (Project_Get_MessagesResponse);
  
  
  // Property: RuleSet
  //
  rpc Set_RuleSet(Project_Set_RuleSetRequest) returns (Project_Set_RuleSetResponse);
  rpc Get_RuleSet(Project_Get_RuleSetRequest) returns (Project_Get_RuleSetResponse);
  
  
  // Property: IsModified
  //
  rpc Set_IsModified(Project_Set_IsModifiedRequest) returns (Project_Set_IsModifiedResponse);
  rpc Get_IsModified(Project_Get_IsModifiedRequest) returns (Project_Get_IsModifiedResponse);
  
  
  // Property: AnalysisStatus
  //
  rpc Get_AnalysisStatus(Project_Get_AnalysisStatusRequest) returns (Project_Get_AnalysisStatusResponse);
  
  
  // Property: AnalyzeFilesCalledBySequenceCalls
  //
  rpc Set_AnalyzeFilesCalledBySequenceCalls(Project_Set_AnalyzeFilesCalledBySequenceCallsRequest) returns (Project_Set_AnalyzeFilesCalledBySequenceCallsResponse);
  rpc Get_AnalyzeFilesCalledBySequenceCalls(Project_Get_AnalyzeFilesCalledBySequenceCallsRequest) returns (Project_Get_AnalyzeFilesCalledBySequenceCallsResponse);
  
  
  // Property: AnalyzeModelFiles
  //
  rpc Set_AnalyzeModelFiles(Project_Set_AnalyzeModelFilesRequest) returns (Project_Set_AnalyzeModelFilesResponse);
  rpc Get_AnalyzeModelFiles(Project_Get_AnalyzeModelFilesRequest) returns (Project_Get_AnalyzeModelFilesResponse);
  
  
  // Property: RulesUsedForAnalysis
  //
  rpc Get_RulesUsedForAnalysis(Project_Get_RulesUsedForAnalysisRequest) returns (Project_Get_RulesUsedForAnalysisResponse);
  
  
  // Property: AnalyzedFiles
  //
  rpc Get_AnalyzedFiles(Project_Get_AnalyzedFilesRequest) returns (Project_Get_AnalyzedFilesResponse);
  
  
  // Property: AnalyzeSkippedSteps
  //
  rpc Set_AnalyzeSkippedSteps(Project_Set_AnalyzeSkippedStepsRequest) returns (Project_Set_AnalyzeSkippedStepsResponse);
  rpc Get_AnalyzeSkippedSteps(Project_Get_AnalyzeSkippedStepsRequest) returns (Project_Get_AnalyzeSkippedStepsResponse);
  
  
  // Property: NumberOfStepsNotAnalyzed
  //
  rpc Get_NumberOfStepsNotAnalyzed(Project_Get_NumberOfStepsNotAnalyzedRequest) returns (Project_Get_NumberOfStepsNotAnalyzedResponse);
  
  
  // Property: AutoSave
  //
  rpc Set_AutoSave(Project_Set_AutoSaveRequest) returns (Project_Set_AutoSaveResponse);
  rpc Get_AutoSave(Project_Get_AutoSaveRequest) returns (Project_Get_AutoSaveResponse);
  
  
}
message ProjectInstance {
  // Specifies the handle of the Project instance in the server.
  string id = 1;
}
message Project_WriteRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
}

message Project_WriteResponse {
}

message Project_ReadRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
}

message Project_ReadResponse {
}

message Project_StartAnalysisRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
  int32 options = 2;
}

message Project_StartAnalysisResponse {
}

message Project_StartFileAnalysisRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
  PropertyObjectFileInstance fileToAnalyze = 2;
}

message Project_StartFileAnalysisResponse {
}

message Project_StopAnalysisRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
}

message Project_StopAnalysisResponse {
}

message Project_GenerateReportRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
}

message Project_GenerateReportResponse {
  string returnValue = 1;
}

message Project_AbortAnalysisRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
}

message Project_AbortAnalysisResponse {
}

message Project_NewChildProjectRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
}

message Project_NewChildProjectResponse {
  ProjectInstance returnValue = 1;
}

message Project_RemoveChildProjectRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
  ProjectInstance projectToRemove = 2;
}

message Project_RemoveChildProjectResponse {
}

message Project_AddChildProjectRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
  ProjectInstance projectToAdd = 2;
}

message Project_AddChildProjectResponse {
}

message Project_GetMessagesIgnoredInFileRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
  PropertyObjectFileInstance fileToGetMessagesFrom = 2;
}

message Project_GetMessagesIgnoredInFileResponse {
  AnalysisMessagesInstance returnValue = 1;
}

message Project_IgnoreMessageInFileRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
  AnalysisMessageInstance messageToIgnore = 2;
  string JustificationForIgnore = 3;
  PropertyObjectFileInstance fileToIgnoreMessage = 4;
}

message Project_IgnoreMessageInFileResponse {
}

message Project_Set_PathRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
  string val = 2;
}

message Project_Set_PathResponse {
}

message Project_Get_PathRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
}

message Project_Get_PathResponse {
  string returnValue = 1;
}

message Project_Set_WorkspaceFileToAnalyzeRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
  string Path = 2;
}

message Project_Set_WorkspaceFileToAnalyzeResponse {
}

message Project_Get_WorkspaceFileToAnalyzeRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
}

message Project_Get_WorkspaceFileToAnalyzeResponse {
  string returnValue = 1;
}

message Project_Get_DirectoriesToAnalyzeRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
}

message Project_Get_DirectoriesToAnalyzeResponse {
  DirectoriesToAnalyzeInstance returnValue = 1;
}

message Project_Set_FilesToAnalyzeRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
  repeated string val = 2;
}

message Project_Set_FilesToAnalyzeResponse {
}

message Project_Get_FilesToAnalyzeRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
}

message Project_Get_FilesToAnalyzeResponse {
  repeated string returnValue = 1;
}

message Project_Set_AnalyzeNITypePalettesRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
  bool val = 2;
}

message Project_Set_AnalyzeNITypePalettesResponse {
}

message Project_Get_AnalyzeNITypePalettesRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
}

message Project_Get_AnalyzeNITypePalettesResponse {
  bool returnValue = 1;
}

message Project_Set_AnalyzePublicTypePalettesRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
  bool val = 2;
}

message Project_Set_AnalyzePublicTypePalettesResponse {
}

message Project_Get_AnalyzePublicTypePalettesRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
}

message Project_Get_AnalyzePublicTypePalettesResponse {
  bool returnValue = 1;
}

message Project_Set_AnalyzeUsersFileRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
  bool val = 2;
}

message Project_Set_AnalyzeUsersFileResponse {
}

message Project_Get_AnalyzeUsersFileRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
}

message Project_Get_AnalyzeUsersFileResponse {
  bool returnValue = 1;
}

message Project_Set_AnalyzeStationGlobalsFileRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
  bool val = 2;
}

message Project_Set_AnalyzeStationGlobalsFileResponse {
}

message Project_Get_AnalyzeStationGlobalsFileRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
}

message Project_Get_AnalyzeStationGlobalsFileResponse {
  bool returnValue = 1;
}

message Project_Set_AnalyzeTemplatesFileRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
  bool val = 2;
}

message Project_Set_AnalyzeTemplatesFileResponse {
}

message Project_Get_AnalyzeTemplatesFileRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
}

message Project_Get_AnalyzeTemplatesFileResponse {
  bool returnValue = 1;
}

message Project_Get_MessagesRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
}

message Project_Get_MessagesResponse {
  AnalysisMessagesInstance returnValue = 1;
}

message Project_Set_RuleSetRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
  RuleSetInstance val = 2;
}

message Project_Set_RuleSetResponse {
}

message Project_Get_RuleSetRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
}

message Project_Get_RuleSetResponse {
  RuleSetInstance returnValue = 1;
}

message Project_Set_IsModifiedRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
  bool val = 2;
}

message Project_Set_IsModifiedResponse {
}

message Project_Get_IsModifiedRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
}

message Project_Get_IsModifiedResponse {
  bool returnValue = 1;
}

message Project_Get_AnalysisStatusRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
}

message Project_Get_AnalysisStatusResponse {
  AnalysisStatusInstance returnValue = 1;
}

message Project_Set_AnalyzeFilesCalledBySequenceCallsRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
  bool val = 2;
}

message Project_Set_AnalyzeFilesCalledBySequenceCallsResponse {
}

message Project_Get_AnalyzeFilesCalledBySequenceCallsRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
}

message Project_Get_AnalyzeFilesCalledBySequenceCallsResponse {
  bool returnValue = 1;
}

message Project_Set_AnalyzeModelFilesRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
  bool val = 2;
}

message Project_Set_AnalyzeModelFilesResponse {
}

message Project_Get_AnalyzeModelFilesRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
}

message Project_Get_AnalyzeModelFilesResponse {
  bool returnValue = 1;
}

message Project_Get_RulesUsedForAnalysisRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
}

message Project_Get_RulesUsedForAnalysisResponse {
  RulesInstance returnValue = 1;
}

message Project_Get_AnalyzedFilesRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
}

message Project_Get_AnalyzedFilesResponse {
  repeated string returnValue = 1;
}

message Project_Set_AnalyzeSkippedStepsRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
  bool val = 2;
}

message Project_Set_AnalyzeSkippedStepsResponse {
}

message Project_Get_AnalyzeSkippedStepsRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
}

message Project_Get_AnalyzeSkippedStepsResponse {
  bool returnValue = 1;
}

message Project_Get_NumberOfStepsNotAnalyzedRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
}

message Project_Get_NumberOfStepsNotAnalyzedResponse {
  int32 returnValue = 1;
}

message Project_Set_AutoSaveRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
  bool val = 2;
}

message Project_Set_AutoSaveResponse {
}

message Project_Get_AutoSaveRequest {
  // The id of the Project object.
  ProjectInstance instance = 1;
}

message Project_Get_AutoSaveResponse {
  bool returnValue = 1;
}
message AnalysisMessagesInstance {
  // Specifies the handle of the AnalysisMessages instance in the server.
  string id = 1;
}

message AnalysisMessageInstance {
  // Specifies the handle of the AnalysisMessage instance in the server.
  string id = 1;
}

message DirectoriesToAnalyzeInstance {
  // Specifies the handle of the DirectoriesToAnalyze instance in the server.
  string id = 1;
}

message RuleSetInstance {
  // Specifies the handle of the RuleSet instance in the server.
  string id = 1;
}

message AnalysisStatusInstance {
  // Specifies the handle of the AnalysisStatus instance in the server.
  string id = 1;
}

// DirectoriesToAnalyze
//
service DirectoriesToAnalyze {
  // Method: Insert
  //
  rpc Insert(DirectoriesToAnalyze_InsertRequest) returns (DirectoriesToAnalyze_InsertResponse);
  
  
  // Method: Remove
  //
  rpc Remove(DirectoriesToAnalyze_RemoveRequest) returns (DirectoriesToAnalyze_RemoveResponse);
  
  
  // Method: Clear
  //
  rpc Clear(DirectoriesToAnalyze_ClearRequest) returns (DirectoriesToAnalyze_ClearResponse);
  
  

  // Property: Item
  //
  rpc Get_Item(DirectoriesToAnalyze_Get_ItemRequest) returns (DirectoriesToAnalyze_Get_ItemResponse);
  
  
  // Property: Count
  //
  rpc Get_Count(DirectoriesToAnalyze_Get_CountRequest) returns (DirectoriesToAnalyze_Get_CountResponse);
  
  
}
message DirectoriesToAnalyze_InsertRequest {
  // The id of the DirectoriesToAnalyze object.
  DirectoriesToAnalyzeInstance instance = 1;
  int32 index = 2;
  DirectoryToAnalyzeInstance val = 3;
}

message DirectoriesToAnalyze_InsertResponse {
}

message DirectoriesToAnalyze_RemoveRequest {
  // The id of the DirectoriesToAnalyze object.
  DirectoriesToAnalyzeInstance instance = 1;
  int32 index = 2;
}

message DirectoriesToAnalyze_RemoveResponse {
}

message DirectoriesToAnalyze_ClearRequest {
  // The id of the DirectoriesToAnalyze object.
  DirectoriesToAnalyzeInstance instance = 1;
}

message DirectoriesToAnalyze_ClearResponse {
}

message DirectoriesToAnalyze_Get_ItemRequest {
  // The id of the DirectoriesToAnalyze object.
  DirectoriesToAnalyzeInstance instance = 1;
  int32 index = 2;
}

message DirectoriesToAnalyze_Get_ItemResponse {
  DirectoryToAnalyzeInstance returnValue = 1;
}

message DirectoriesToAnalyze_Get_CountRequest {
  // The id of the DirectoriesToAnalyze object.
  DirectoriesToAnalyzeInstance instance = 1;
}

message DirectoriesToAnalyze_Get_CountResponse {
  int32 returnValue = 1;
}
message DirectoryToAnalyzeInstance {
  // Specifies the handle of the DirectoryToAnalyze instance in the server.
  string id = 1;
}

// DirectoryToAnalyze
//
service DirectoryToAnalyze {
  // Property: Path
  //
  rpc Set_Path(DirectoryToAnalyze_Set_PathRequest) returns (DirectoryToAnalyze_Set_PathResponse);
  rpc Get_Path(DirectoryToAnalyze_Get_PathRequest) returns (DirectoryToAnalyze_Get_PathResponse);
  
  
  // Property: AnalyzeSubDirectories
  //
  rpc Set_AnalyzeSubDirectories(DirectoryToAnalyze_Set_AnalyzeSubDirectoriesRequest) returns (DirectoryToAnalyze_Set_AnalyzeSubDirectoriesResponse);
  rpc Get_AnalyzeSubDirectories(DirectoryToAnalyze_Get_AnalyzeSubDirectoriesRequest) returns (DirectoryToAnalyze_Get_AnalyzeSubDirectoriesResponse);
  
  
}
message DirectoryToAnalyze_Set_PathRequest {
  // The id of the DirectoryToAnalyze object.
  DirectoryToAnalyzeInstance instance = 1;
  string val = 2;
}

message DirectoryToAnalyze_Set_PathResponse {
}

message DirectoryToAnalyze_Get_PathRequest {
  // The id of the DirectoryToAnalyze object.
  DirectoryToAnalyzeInstance instance = 1;
}

message DirectoryToAnalyze_Get_PathResponse {
  string returnValue = 1;
}

message DirectoryToAnalyze_Set_AnalyzeSubDirectoriesRequest {
  // The id of the DirectoryToAnalyze object.
  DirectoryToAnalyzeInstance instance = 1;
  bool val = 2;
}

message DirectoryToAnalyze_Set_AnalyzeSubDirectoriesResponse {
}

message DirectoryToAnalyze_Get_AnalyzeSubDirectoriesRequest {
  // The id of the DirectoryToAnalyze object.
  DirectoryToAnalyzeInstance instance = 1;
}

message DirectoryToAnalyze_Get_AnalyzeSubDirectoriesResponse {
  bool returnValue = 1;
}

// AnalysisMessages
//
service AnalysisMessages {
  // Method: Remove
  //
  rpc Remove(AnalysisMessages_RemoveRequest) returns (AnalysisMessages_RemoveResponse);
  
  
  // Method: Clear
  //
  rpc Clear(AnalysisMessages_ClearRequest) returns (AnalysisMessages_ClearResponse);
  
  

  // Property: Item
  //
  rpc Get_Item(AnalysisMessages_Get_ItemRequest) returns (AnalysisMessages_Get_ItemResponse);
  
  
  // Property: Count
  //
  rpc Get_Count(AnalysisMessages_Get_CountRequest) returns (AnalysisMessages_Get_CountResponse);
  
  
}
message AnalysisMessages_RemoveRequest {
  // The id of the AnalysisMessages object.
  AnalysisMessagesInstance instance = 1;
  int32 index = 2;
}

message AnalysisMessages_RemoveResponse {
}

message AnalysisMessages_ClearRequest {
  // The id of the AnalysisMessages object.
  AnalysisMessagesInstance instance = 1;
}

message AnalysisMessages_ClearResponse {
}

message AnalysisMessages_Get_ItemRequest {
  // The id of the AnalysisMessages object.
  AnalysisMessagesInstance instance = 1;
  int32 index = 2;
}

message AnalysisMessages_Get_ItemResponse {
  AnalysisMessageInstance returnValue = 1;
}

message AnalysisMessages_Get_CountRequest {
  // The id of the AnalysisMessages object.
  AnalysisMessagesInstance instance = 1;
}

message AnalysisMessages_Get_CountResponse {
  int32 returnValue = 1;
}

// AnalysisMessage
//
// An object of the AnalysisMessage class represents a message an analysis module creates while performing an analysis. The message displays in the TestStand Sequence Editor or the stand-alone sequence analyzer application and is stored in a TestStand Sequence Analyzer project. Use the AnalysisContext.NewMessage method in an analysis module to create a new instance of this class.
//
service AnalysisMessage {
  // Property: RuleId
  //
  // Use this property in an analysis module to obtain or specify the unique rule ID associated with the message.
  //
  // Do not set this property after calling the AnalysisContext.ReportMessage method because the AnalysisContext.ReportMessage method makes a copy of the message you pass to the method. Changes to this property after calling the AnalysisContext.ReportMessage method do not affect the reported message.
  //
  // AnalysisMessage_Set_RuleIdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AnalysisMessageInstance - The id of the AnalysisMessage object.
  //    - val: string - Use this property in an analysis module to obtain or specify the unique rule ID associated with the message. 
  //
  // AnalysisMessage_Set_RuleIdResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // AnalysisMessage_Get_RuleIdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AnalysisMessageInstance - The id of the AnalysisMessage object.
  //
  // AnalysisMessage_Get_RuleIdResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Use this property in an analysis module to obtain or specify the unique rule ID associated with the message. 
  //
  rpc Set_RuleId(AnalysisMessage_Set_RuleIdRequest) returns (AnalysisMessage_Set_RuleIdResponse);
  rpc Get_RuleId(AnalysisMessage_Get_RuleIdRequest) returns (AnalysisMessage_Get_RuleIdResponse);
  
  
  // Property: Text
  //
  // Use this property in an analysis module to obtain or specify the message text.
  //
  // Do not set this property after calling the AnalysisContext.ReportMessage method because the AnalysisContext.ReportMessage method makes a copy of the message you pass to the method. Changes to this property after calling the AnalysisContext.ReportMessage method do not affect the reported message.
  //
  // AnalysisMessage_Set_TextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AnalysisMessageInstance - The id of the AnalysisMessage object.
  //    - val: string - Use this property in an analysis module to obtain or specify the message text. 
  //
  // AnalysisMessage_Set_TextResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // AnalysisMessage_Get_TextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AnalysisMessageInstance - The id of the AnalysisMessage object.
  //
  // AnalysisMessage_Get_TextResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Use this property in an analysis module to obtain or specify the message text. 
  //
  rpc Set_Text(AnalysisMessage_Set_TextRequest) returns (AnalysisMessage_Set_TextResponse);
  rpc Get_Text(AnalysisMessage_Get_TextRequest) returns (AnalysisMessage_Get_TextResponse);
  
  
  // Property: Locations
  //
  // Use this property in an analysis module to obtain the location associated with the message. You can call methods on this property to specify the location the TestStand Sequence Analyzer uses when you go to the location associated with a message.
  //
  // Do not set this property after calling the AnalysisContext.ReportMessage method because the AnalysisContext.ReportMessage method makes a copy of the message you pass to the method. Changes to this property after calling the AnalysisContext.ReportMessage method do not affect the reported message.
  // The sequence analyzer recognizes only the first location this property contains.
  //
  // AnalysisMessage_Get_LocationsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AnalysisMessageInstance - The id of the AnalysisMessage object.
  //
  // AnalysisMessage_Get_LocationsResponse - The response message from the server. It provides the return value.
  //    - returnValue: LocationsInstance - Use this property in an analysis module to obtain the location associated with the message. You can call methods on this property to specify the location the TestStand Sequence Analyzer uses when you go to the location associated with a message. 
  //
  rpc Get_Locations(AnalysisMessage_Get_LocationsRequest) returns (AnalysisMessage_Get_LocationsResponse);
  
  
  // Property: Severity
  //
  // 
  //
  // AnalysisMessage_Get_SeverityRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AnalysisMessageInstance - The id of the AnalysisMessage object.
  //
  // AnalysisMessage_Get_SeverityResponse - The response message from the server. It provides the return value.
  //    - returnValue: RuleSeverity -  
  //
  rpc Get_Severity(AnalysisMessage_Get_SeverityRequest) returns (AnalysisMessage_Get_SeverityResponse);
  
  
  // Property: IsCurrent
  //
  // 
  //
  // AnalysisMessage_Get_IsCurrentRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AnalysisMessageInstance - The id of the AnalysisMessage object.
  //
  // AnalysisMessage_Get_IsCurrentResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool -  
  //
  rpc Get_IsCurrent(AnalysisMessage_Get_IsCurrentRequest) returns (AnalysisMessage_Get_IsCurrentResponse);
  
  
  // Property: Status
  //
  // 
  //
  // AnalysisMessage_Set_StatusRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AnalysisMessageInstance - The id of the AnalysisMessage object.
  //    - val: MessageStatus -  
  //
  // AnalysisMessage_Set_StatusResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // AnalysisMessage_Get_StatusRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AnalysisMessageInstance - The id of the AnalysisMessage object.
  //
  // AnalysisMessage_Get_StatusResponse - The response message from the server. It provides the return value.
  //    - returnValue: MessageStatus -  
  //
  rpc Set_Status(AnalysisMessage_Set_StatusRequest) returns (AnalysisMessage_Set_StatusResponse);
  rpc Get_Status(AnalysisMessage_Get_StatusRequest) returns (AnalysisMessage_Get_StatusResponse);
  
  
  // Property: JustificationForIgnore
  //
  // 
  //
  // AnalysisMessage_Set_JustificationForIgnoreRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AnalysisMessageInstance - The id of the AnalysisMessage object.
  //    - val: string -  
  //
  // AnalysisMessage_Set_JustificationForIgnoreResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // AnalysisMessage_Get_JustificationForIgnoreRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AnalysisMessageInstance - The id of the AnalysisMessage object.
  //
  // AnalysisMessage_Get_JustificationForIgnoreResponse - The response message from the server. It provides the return value.
  //    - returnValue: string -  
  //
  rpc Set_JustificationForIgnore(AnalysisMessage_Set_JustificationForIgnoreRequest) returns (AnalysisMessage_Set_JustificationForIgnoreResponse);
  rpc Get_JustificationForIgnore(AnalysisMessage_Get_JustificationForIgnoreRequest) returns (AnalysisMessage_Get_JustificationForIgnoreResponse);
  
  
}
message AnalysisMessage_Set_RuleIdRequest {
  // The id of the AnalysisMessage object.
  AnalysisMessageInstance instance = 1;
  // Use this property in an analysis module to obtain or specify the unique rule ID associated with the message.
  string val = 2;
}

message AnalysisMessage_Set_RuleIdResponse {
}

message AnalysisMessage_Get_RuleIdRequest {
  // The id of the AnalysisMessage object.
  AnalysisMessageInstance instance = 1;
}

message AnalysisMessage_Get_RuleIdResponse {
  // Use this property in an analysis module to obtain or specify the unique rule ID associated with the message.
  string returnValue = 1;
}

message AnalysisMessage_Set_TextRequest {
  // The id of the AnalysisMessage object.
  AnalysisMessageInstance instance = 1;
  // Use this property in an analysis module to obtain or specify the message text.
  string val = 2;
}

message AnalysisMessage_Set_TextResponse {
}

message AnalysisMessage_Get_TextRequest {
  // The id of the AnalysisMessage object.
  AnalysisMessageInstance instance = 1;
}

message AnalysisMessage_Get_TextResponse {
  // Use this property in an analysis module to obtain or specify the message text.
  string returnValue = 1;
}

message AnalysisMessage_Get_LocationsRequest {
  // The id of the AnalysisMessage object.
  AnalysisMessageInstance instance = 1;
}

message AnalysisMessage_Get_LocationsResponse {
  // Use this property in an analysis module to obtain the location associated with the message. You can call methods on this property to specify the location the TestStand Sequence Analyzer uses when you go to the location associated with a message.
  LocationsInstance returnValue = 1;
}

message AnalysisMessage_Get_SeverityRequest {
  // The id of the AnalysisMessage object.
  AnalysisMessageInstance instance = 1;
}

message AnalysisMessage_Get_SeverityResponse {
  // 
  RuleSeverity returnValue = 1;
}

message AnalysisMessage_Get_IsCurrentRequest {
  // The id of the AnalysisMessage object.
  AnalysisMessageInstance instance = 1;
}

message AnalysisMessage_Get_IsCurrentResponse {
  // 
  bool returnValue = 1;
}

message AnalysisMessage_Set_StatusRequest {
  // The id of the AnalysisMessage object.
  AnalysisMessageInstance instance = 1;
  // 
  MessageStatus val = 2;
}

message AnalysisMessage_Set_StatusResponse {
}

message AnalysisMessage_Get_StatusRequest {
  // The id of the AnalysisMessage object.
  AnalysisMessageInstance instance = 1;
}

message AnalysisMessage_Get_StatusResponse {
  // 
  MessageStatus returnValue = 1;
}

message AnalysisMessage_Set_JustificationForIgnoreRequest {
  // The id of the AnalysisMessage object.
  AnalysisMessageInstance instance = 1;
  // 
  string val = 2;
}

message AnalysisMessage_Set_JustificationForIgnoreResponse {
}

message AnalysisMessage_Get_JustificationForIgnoreRequest {
  // The id of the AnalysisMessage object.
  AnalysisMessageInstance instance = 1;
}

message AnalysisMessage_Get_JustificationForIgnoreResponse {
  // 
  string returnValue = 1;
}

// RuleSet
//
// 
//
service RuleSet {
  // Method: GetRuleConfiguration
  //
  rpc GetRuleConfiguration(RuleSet_GetRuleConfigurationRequest) returns (RuleSet_GetRuleConfigurationResponse);
  
  
  // Method: ConformToRules
  //
  rpc ConformToRules(RuleSet_ConformToRulesRequest) returns (RuleSet_ConformToRulesResponse);
  
  
  // Method: Clone
  //
  rpc Clone(RuleSet_CloneRequest) returns (RuleSet_CloneResponse);
  
  
  // Method: RenameRuleId
  //
  rpc RenameRuleId(RuleSet_RenameRuleIdRequest) returns (RuleSet_RenameRuleIdResponse);
  
  

  // Property: Name
  //
  rpc Set_Name(RuleSet_Set_NameRequest) returns (RuleSet_Set_NameResponse);
  rpc Get_Name(RuleSet_Get_NameRequest) returns (RuleSet_Get_NameResponse);
  
  
}
message RuleSet_GetRuleConfigurationRequest {
  // The id of the RuleSet object.
  RuleSetInstance instance = 1;
  string RuleId = 2;
}

message RuleSet_GetRuleConfigurationResponse {
  RuleConfigurationInstance returnValue = 1;
}

message RuleSet_ConformToRulesRequest {
  // The id of the RuleSet object.
  RuleSetInstance instance = 1;
}

message RuleSet_ConformToRulesResponse {
  repeated string returnValue = 1;
}

message RuleSet_CloneRequest {
  // The id of the RuleSet object.
  RuleSetInstance instance = 1;
}

message RuleSet_CloneResponse {
  RuleSetInstance returnValue = 1;
}

message RuleSet_RenameRuleIdRequest {
  // The id of the RuleSet object.
  RuleSetInstance instance = 1;
  string originalRuleId = 2;
  string newRuleId = 3;
}

message RuleSet_RenameRuleIdResponse {
}

message RuleSet_Set_NameRequest {
  // The id of the RuleSet object.
  RuleSetInstance instance = 1;
  string val = 2;
}

message RuleSet_Set_NameResponse {
}

message RuleSet_Get_NameRequest {
  // The id of the RuleSet object.
  RuleSetInstance instance = 1;
}

message RuleSet_Get_NameResponse {
  string returnValue = 1;
}

// AnalysisStatus
//
service AnalysisStatus {
  // Property: IsAnalyzing
  //
  rpc Get_IsAnalyzing(AnalysisStatus_Get_IsAnalyzingRequest) returns (AnalysisStatus_Get_IsAnalyzingResponse);
  
  
  // Property: NumberOfFilesAnalyzed
  //
  rpc Get_NumberOfFilesAnalyzed(AnalysisStatus_Get_NumberOfFilesAnalyzedRequest) returns (AnalysisStatus_Get_NumberOfFilesAnalyzedResponse);
  
  
  // Property: NumberOfFilesToAnalyze
  //
  rpc Get_NumberOfFilesToAnalyze(AnalysisStatus_Get_NumberOfFilesToAnalyzeRequest) returns (AnalysisStatus_Get_NumberOfFilesToAnalyzeResponse);
  
  
  // Property: LastStatusMessage
  //
  rpc Get_LastStatusMessage(AnalysisStatus_Get_LastStatusMessageRequest) returns (AnalysisStatus_Get_LastStatusMessageResponse);
  
  
  // Property: NumberOfSequencesAnalyzed
  //
  rpc Get_NumberOfSequencesAnalyzed(AnalysisStatus_Get_NumberOfSequencesAnalyzedRequest) returns (AnalysisStatus_Get_NumberOfSequencesAnalyzedResponse);
  
  
  // Property: NumberOfSequencesToAnalyze
  //
  rpc Get_NumberOfSequencesToAnalyze(AnalysisStatus_Get_NumberOfSequencesToAnalyzeRequest) returns (AnalysisStatus_Get_NumberOfSequencesToAnalyzeResponse);
  
  
  // Property: UserName
  //
  rpc Get_UserName(AnalysisStatus_Get_UserNameRequest) returns (AnalysisStatus_Get_UserNameResponse);
  
  
  // Property: ComputerName
  //
  rpc Get_ComputerName(AnalysisStatus_Get_ComputerNameRequest) returns (AnalysisStatus_Get_ComputerNameResponse);
  
  
  // Property: TestStandVersion
  //
  rpc Get_TestStandVersion(AnalysisStatus_Get_TestStandVersionRequest) returns (AnalysisStatus_Get_TestStandVersionResponse);
  
  
  // Property: AnalysisStopped
  //
  rpc Get_AnalysisStopped(AnalysisStatus_Get_AnalysisStoppedRequest) returns (AnalysisStatus_Get_AnalysisStoppedResponse);
  
  
  // Property: StartTime
  //
  rpc Get_StartTime(AnalysisStatus_Get_StartTimeRequest) returns (AnalysisStatus_Get_StartTimeResponse);
  
  
  // Property: ElapsedTime
  //
  rpc Get_ElapsedTime(AnalysisStatus_Get_ElapsedTimeRequest) returns (AnalysisStatus_Get_ElapsedTimeResponse);
  
  
}
message AnalysisStatus_Get_IsAnalyzingRequest {
  // The id of the AnalysisStatus object.
  AnalysisStatusInstance instance = 1;
}

message AnalysisStatus_Get_IsAnalyzingResponse {
  bool returnValue = 1;
}

message AnalysisStatus_Get_NumberOfFilesAnalyzedRequest {
  // The id of the AnalysisStatus object.
  AnalysisStatusInstance instance = 1;
}

message AnalysisStatus_Get_NumberOfFilesAnalyzedResponse {
  int32 returnValue = 1;
}

message AnalysisStatus_Get_NumberOfFilesToAnalyzeRequest {
  // The id of the AnalysisStatus object.
  AnalysisStatusInstance instance = 1;
}

message AnalysisStatus_Get_NumberOfFilesToAnalyzeResponse {
  int32 returnValue = 1;
}

message AnalysisStatus_Get_LastStatusMessageRequest {
  // The id of the AnalysisStatus object.
  AnalysisStatusInstance instance = 1;
}

message AnalysisStatus_Get_LastStatusMessageResponse {
  string returnValue = 1;
}

message AnalysisStatus_Get_NumberOfSequencesAnalyzedRequest {
  // The id of the AnalysisStatus object.
  AnalysisStatusInstance instance = 1;
}

message AnalysisStatus_Get_NumberOfSequencesAnalyzedResponse {
  int32 returnValue = 1;
}

message AnalysisStatus_Get_NumberOfSequencesToAnalyzeRequest {
  // The id of the AnalysisStatus object.
  AnalysisStatusInstance instance = 1;
}

message AnalysisStatus_Get_NumberOfSequencesToAnalyzeResponse {
  int32 returnValue = 1;
}

message AnalysisStatus_Get_UserNameRequest {
  // The id of the AnalysisStatus object.
  AnalysisStatusInstance instance = 1;
}

message AnalysisStatus_Get_UserNameResponse {
  string returnValue = 1;
}

message AnalysisStatus_Get_ComputerNameRequest {
  // The id of the AnalysisStatus object.
  AnalysisStatusInstance instance = 1;
}

message AnalysisStatus_Get_ComputerNameResponse {
  string returnValue = 1;
}

message AnalysisStatus_Get_TestStandVersionRequest {
  // The id of the AnalysisStatus object.
  AnalysisStatusInstance instance = 1;
}

message AnalysisStatus_Get_TestStandVersionResponse {
  string returnValue = 1;
}

message AnalysisStatus_Get_AnalysisStoppedRequest {
  // The id of the AnalysisStatus object.
  AnalysisStatusInstance instance = 1;
}

message AnalysisStatus_Get_AnalysisStoppedResponse {
  bool returnValue = 1;
}

message AnalysisStatus_Get_StartTimeRequest {
  // The id of the AnalysisStatus object.
  AnalysisStatusInstance instance = 1;
}

message AnalysisStatus_Get_StartTimeResponse {
  google.protobuf.Timestamp returnValue = 1;
}

message AnalysisStatus_Get_ElapsedTimeRequest {
  // The id of the AnalysisStatus object.
  AnalysisStatusInstance instance = 1;
}

message AnalysisStatus_Get_ElapsedTimeResponse {
  int32 returnValue = 1;
}

// RulesFile
//
service RulesFile {
  // Method: Read
  //
  rpc Read(RulesFile_ReadRequest) returns (RulesFile_ReadResponse);
  
  
  // Method: Write
  //
  rpc Write(RulesFile_WriteRequest) returns (RulesFile_WriteResponse);
  
  

  // Property: Rules
  //
  rpc Get_Rules(RulesFile_Get_RulesRequest) returns (RulesFile_Get_RulesResponse);
  
  
  // Property: RuleModules
  //
  rpc Get_RuleModules(RulesFile_Get_RuleModulesRequest) returns (RulesFile_Get_RuleModulesResponse);
  
  
  // Property: RuleSets
  //
  rpc Get_RuleSets(RulesFile_Get_RuleSetsRequest) returns (RulesFile_Get_RuleSetsResponse);
  
  
  // Property: Path
  //
  rpc Set_Path(RulesFile_Set_PathRequest) returns (RulesFile_Set_PathResponse);
  rpc Get_Path(RulesFile_Get_PathRequest) returns (RulesFile_Get_PathResponse);
  
  
  // Property: IsModified
  //
  rpc Set_IsModified(RulesFile_Set_IsModifiedRequest) returns (RulesFile_Set_IsModifiedResponse);
  rpc Get_IsModified(RulesFile_Get_IsModifiedRequest) returns (RulesFile_Get_IsModifiedResponse);
  
  
}
message RulesFileInstance {
  // Specifies the handle of the RulesFile instance in the server.
  string id = 1;
}
message RulesFile_ReadRequest {
  // The id of the RulesFile object.
  RulesFileInstance instance = 1;
}

message RulesFile_ReadResponse {
}

message RulesFile_WriteRequest {
  // The id of the RulesFile object.
  RulesFileInstance instance = 1;
}

message RulesFile_WriteResponse {
}

message RulesFile_Get_RulesRequest {
  // The id of the RulesFile object.
  RulesFileInstance instance = 1;
}

message RulesFile_Get_RulesResponse {
  RulesInstance returnValue = 1;
}

message RulesFile_Get_RuleModulesRequest {
  // The id of the RulesFile object.
  RulesFileInstance instance = 1;
}

message RulesFile_Get_RuleModulesResponse {
  RuleModulesInstance returnValue = 1;
}

message RulesFile_Get_RuleSetsRequest {
  // The id of the RulesFile object.
  RulesFileInstance instance = 1;
}

message RulesFile_Get_RuleSetsResponse {
  RuleSetsInstance returnValue = 1;
}

message RulesFile_Set_PathRequest {
  // The id of the RulesFile object.
  RulesFileInstance instance = 1;
  string val = 2;
}

message RulesFile_Set_PathResponse {
}

message RulesFile_Get_PathRequest {
  // The id of the RulesFile object.
  RulesFileInstance instance = 1;
}

message RulesFile_Get_PathResponse {
  string returnValue = 1;
}

message RulesFile_Set_IsModifiedRequest {
  // The id of the RulesFile object.
  RulesFileInstance instance = 1;
  bool val = 2;
}

message RulesFile_Set_IsModifiedResponse {
}

message RulesFile_Get_IsModifiedRequest {
  // The id of the RulesFile object.
  RulesFileInstance instance = 1;
}

message RulesFile_Get_IsModifiedResponse {
  bool returnValue = 1;
}
message RuleSetsInstance {
  // Specifies the handle of the RuleSets instance in the server.
  string id = 1;
}

// RuleSets
//
service RuleSets {
  // Method: Insert
  //
  rpc Insert(RuleSets_InsertRequest) returns (RuleSets_InsertResponse);
  
  
  // Method: Remove
  //
  rpc Remove(RuleSets_RemoveRequest) returns (RuleSets_RemoveResponse);
  
  
  // Method: Clear
  //
  rpc Clear(RuleSets_ClearRequest) returns (RuleSets_ClearResponse);
  
  

  // Property: Item
  //
  rpc Get_Item(RuleSets_Get_ItemRequest) returns (RuleSets_Get_ItemResponse);
  
  
  // Property: Count
  //
  rpc Get_Count(RuleSets_Get_CountRequest) returns (RuleSets_Get_CountResponse);
  
  
}
message RuleSets_InsertRequest {
  // The id of the RuleSets object.
  RuleSetsInstance instance = 1;
  int32 index = 2;
  RuleSetInstance val = 3;
}

message RuleSets_InsertResponse {
}

message RuleSets_RemoveRequest {
  // The id of the RuleSets object.
  RuleSetsInstance instance = 1;
  int32 index = 2;
}

message RuleSets_RemoveResponse {
}

message RuleSets_ClearRequest {
  // The id of the RuleSets object.
  RuleSetsInstance instance = 1;
}

message RuleSets_ClearResponse {
}

message RuleSets_Get_ItemRequest {
  // The id of the RuleSets object.
  RuleSetsInstance instance = 1;
  oneof index { int32 numericIndex = 2; string nameIndex = 3; }
}

message RuleSets_Get_ItemResponse {
  RuleSetInstance returnValue = 1;
}

message RuleSets_Get_CountRequest {
  // The id of the RuleSets object.
  RuleSetsInstance instance = 1;
}

message RuleSets_Get_CountResponse {
  int32 returnValue = 1;
}

// AnalysisContext
//
// Use the AnalysisContext class in an analysis module to access information about the current object being analyzed or about the current analysis transition. The TestStand Sequence Analyzer passes an instance of this class as a parameter to the analysis module.
//
service AnalysisContext {
  // Method: GetRuleConfiguration
  //
  // Use this method in an analysis module to obtain a rule configuration. A rule configuration contains the enabled state, severity, description, and other information for a specific rule.
  //
  // The analysis project stores the rule configurations. Analysis modules must not modify rule configurations. Only rule configuration modules and the TestStand Sequence Analyzer should modify rule configurations.
  // To improve analysis performance, configure analysis modules to check the enabled state of the rule before performing checks or reporting messages for the rule.
  // This method returns NULL if the RuleId parameter is not a valid rule ID.
  //
  // AnalysisContext_GetRuleConfigurationRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: AnalysisContextInstance - The id of the AnalysisContext object.
  //    - RuleId: string - Pass the unique rule ID of the rule.
  //
  // AnalysisContext_GetRuleConfigurationResponse - The response message from the server. It provides the return value.
  //    - returnValue: RuleConfigurationInstance - The return type of the RuleConfiguration object.
  //
  rpc GetRuleConfiguration(AnalysisContext_GetRuleConfigurationRequest) returns (AnalysisContext_GetRuleConfigurationResponse);
  
  
  // Method: GetRuleAnalysisData
  //
  // Use this method in an analysis module to store and retrieve data to share among multiple calls to analysis modules.
  //
  // The TestStand Sequence Analyzer creates empty PropertyObject containers for each rule to store data that analysis modules generate during analysis. Analysis modules use this method to obtain references to these containers. An analysis module can use the container to store and retrieve data associated with the rule, such as cumulative item counts.
  //
  // AnalysisContext_GetRuleAnalysisDataRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: AnalysisContextInstance - The id of the AnalysisContext object.
  //    - RuleId: string - Pass the unique rule ID of the rule.
  //    - RuleAnalysisDataScope: RuleAnalysisDataScope - Pass the scope of the data to access. Use file scope to access data associated with the file currently under analysis. The sequence analyzer destroys the file data when it completes the analysis of the file and after it calls the analysis modules for the After file transition. Use global scope to access data associated with the current analysis session. The sequence analyzer destroys the global data when analysis of the project completes.
  //    - options: int32 - Use one of the GetRuleAnalysisDataOptions. You must use the GetRuleAnalysisDataOption_Lock option if the analysis module modifies the rule analysis data.
  //
  // AnalysisContext_GetRuleAnalysisDataResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc GetRuleAnalysisData(AnalysisContext_GetRuleAnalysisDataRequest) returns (AnalysisContext_GetRuleAnalysisDataResponse);
  
  
  // Method: NewMessage
  //
  // Use this method in an analysis module to create a new analysis message to report during analysis.
  //
  // After you create the message you can modify the message properties. You must call the AnalysisContext.ReportMessage method after calling this method to report the message to the TestStand Sequence Analyzer, which adds the message to the analyzer project.
  //
  // AnalysisContext_NewMessageRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: AnalysisContextInstance - The id of the AnalysisContext object.
  //    - RuleId: string - Pass the unique rule ID of the rule to which the message corresponds.
  //    - messageText: string - Pass the message text. The sequence analyzer displays this text on the Analyzer Messages tab of the Analysis Results pane.
  //    - locationObject: PropertyObjectInstance - Pass the object associated with the message. The sequence analyzer uses this object to initialize the AnalysisMessage.Locations property, which specifies the location that the sequence analyzer uses when you go to the location associated with a message. Pass NULL if no specific object exists.
  //
  // AnalysisContext_NewMessageResponse - The response message from the server. It provides the return value.
  //    - returnValue: AnalysisMessageInstance - The return type of the AnalysisMessage object.
  //
  rpc NewMessage(AnalysisContext_NewMessageRequest) returns (AnalysisContext_NewMessageResponse);
  
  
  // Method: ReportMessage
  //
  // Use this method in an analysis module to report and add an analysis message to the list of messages in the project.
  //
  // Use the AnalysisContext.NewMessage method to create a message. Do not call this method more than once for a message. Do not change message properties after calling this method. Because this method makes a copy of the message you pass to the method, all changes to the message after calling this method do not affect the reported message.
  // The TestStand Sequence Analyzer discards the message if you disable the rule that corresponds to the message.
  //
  // AnalysisContext_ReportMessageRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: AnalysisContextInstance - The id of the AnalysisContext object.
  //    - message: AnalysisMessageInstance - Pass the message to report.
  //
  // AnalysisContext_ReportMessageResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ReportMessage(AnalysisContext_ReportMessageRequest) returns (AnalysisContext_ReportMessageResponse);
  
  
  // Method: StopAnalysis
  //
  // Use this method in an analysis module to stop the current analysis session. After you call this method, the TestStand Sequence Analyzer calls analysis modules for the remaining transitions, closes all files, and stops analyzing.
  //
  // AnalysisContext_StopAnalysisRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AnalysisContextInstance - The id of the AnalysisContext object.
  //
  // AnalysisContext_StopAnalysisResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc StopAnalysis(AnalysisContext_StopAnalysisRequest) returns (AnalysisContext_StopAnalysisResponse);
  
  

  // Property: Engine
  //
  // Use this property in an analysis module to access methods and properties in the TestStand Engine class.
  //
  // AnalysisContext_Get_EngineRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AnalysisContextInstance - The id of the AnalysisContext object.
  //
  // AnalysisContext_Get_EngineResponse - The response message from the server. It provides the return value.
  //    - returnValue: EngineInstance - Use this property in an analysis module to access methods and properties in the TestStand Engine class. 
  //
  rpc Get_Engine(AnalysisContext_Get_EngineRequest) returns (AnalysisContext_Get_EngineResponse);
  
  
  // Property: Object
  //
  // Use this property in an analysis module to access the object the TestStand Sequence Analyzer is currently analyzing.
  //
  // This property is NULL when the sequence analyzer calls an analysis module for certain analysis transitions. Analysis modules must not hold a reference to the object this property returns because the sequence analyzer unloads each file from memory after analysis completes.
  //
  // AnalysisContext_Get_ObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AnalysisContextInstance - The id of the AnalysisContext object.
  //
  // AnalysisContext_Get_ObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Use this property in an analysis module to access the object the TestStand Sequence Analyzer is currently analyzing. 
  //
  rpc Get_Object(AnalysisContext_Get_ObjectRequest) returns (AnalysisContext_Get_ObjectResponse);
  
  
  // Property: File
  //
  // Use this property in an analysis module to access the file the TestStand Sequence Analyzer is currently analyzing.
  //
  // This property is NULL when the sequence analyzer calls an analysis module for the AnalysisTransition_BeforeSystem and AnalysisTransition_AfterSystem analysis transitions.
  //
  // AnalysisContext_Get_FileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AnalysisContextInstance - The id of the AnalysisContext object.
  //
  // AnalysisContext_Get_FileResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectFileInstance - Use this property in an analysis module to access the file the TestStand Sequence Analyzer is currently analyzing. 
  //
  rpc Get_File(AnalysisContext_Get_FileRequest) returns (AnalysisContext_Get_FileResponse);
  
  
  // Property: Transition
  //
  // Use this property in an analysis module to access the file that the TestStand Sequence Analyzer is currently analyzing.
  //
  // This property has the value AnalysisTransition_None when the sequence analyzer calls an analysis module to analyze an object.
  //
  // AnalysisContext_Get_TransitionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AnalysisContextInstance - The id of the AnalysisContext object.
  //
  // AnalysisContext_Get_TransitionResponse - The response message from the server. It provides the return value.
  //    - returnValue: AnalysisTransition - Use this property in an analysis module to access the file that the TestStand Sequence Analyzer is currently analyzing. 
  //
  rpc Get_Transition(AnalysisContext_Get_TransitionRequest) returns (AnalysisContext_Get_TransitionResponse);
  
  
  // Property: AnalysisId
  //
  // Use this property in an analysis module to obtain the unique ID of the current analysis session.
  //
  // The TestStand Sequence Analyzer can perform multiple analysis sessions simultaneously. Each session specifies a unique analysis ID. In general, National Instruments recommends that you use the AnalysisContext.GetRuleAnalysisData method to store global data generated during analysis. You can also store data in a global table that you index using the analysis session unique ID. Because the sequence analyzer can use multiple threads to perform analysis, you must implement locks around code that accesses the global table data.
  //
  // AnalysisContext_Get_AnalysisIdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AnalysisContextInstance - The id of the AnalysisContext object.
  //
  // AnalysisContext_Get_AnalysisIdResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Use this property in an analysis module to obtain the unique ID of the current analysis session. 
  //
  rpc Get_AnalysisId(AnalysisContext_Get_AnalysisIdRequest) returns (AnalysisContext_Get_AnalysisIdResponse);
  
  
  // Property: Utilities
  //
  // Use this property in an analysis module to access utility methods that help you implement a rule.
  //
  // AnalysisContext_Get_UtilitiesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AnalysisContextInstance - The id of the AnalysisContext object.
  //
  // AnalysisContext_Get_UtilitiesResponse - The response message from the server. It provides the return value.
  //    - returnValue: AnalysisUtilitiesInstance - Use this property in an analysis module to access utility methods that help you implement a rule. 
  //
  rpc Get_Utilities(AnalysisContext_Get_UtilitiesRequest) returns (AnalysisContext_Get_UtilitiesResponse);
  
  
  // Property: StopRequested
  //
  // Use this property in an analysis module to determine whether the user or another analysis module has requested to stop the current analysis session.
  //
  // When the user stops analysis, the TestStand Sequence Analyzer stops calling analysis modules to analyze objects but continues to call analysis modules for the remaining transitions. You can choose not to report messages if analysis stops.
  //
  // AnalysisContext_Get_StopRequestedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AnalysisContextInstance - The id of the AnalysisContext object.
  //
  // AnalysisContext_Get_StopRequestedResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Use this property in an analysis module to determine whether the user or another analysis module has requested to stop the current analysis session. 
  //
  rpc Get_StopRequested(AnalysisContext_Get_StopRequestedRequest) returns (AnalysisContext_Get_StopRequestedResponse);
  
  
  // Property: EditContext
  //
  // Use this property in an analysis module to obtain a sequence context that corresponds to the object under analysis. This property is NULL when the TestStand Sequence Analyzer calls an analysis module for analysis transitions.
  //
  // AnalysisContext_Get_EditContextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AnalysisContextInstance - The id of the AnalysisContext object.
  //
  // AnalysisContext_Get_EditContextResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceContextInstance - Use this property in an analysis module to obtain a sequence context that corresponds to the object under analysis. This property is NULL when the TestStand Sequence Analyzer calls an analysis module for analysis transitions. 
  //
  rpc Get_EditContext(AnalysisContext_Get_EditContextRequest) returns (AnalysisContext_Get_EditContextResponse);
  
  
}
message AnalysisContextInstance {
  // Specifies the handle of the AnalysisContext instance in the server.
  string id = 1;
}

message AnalysisUtilitiesInstance {
  // Specifies the handle of the AnalysisUtilities instance in the server.
  string id = 1;
}
message AnalysisContext_GetRuleConfigurationRequest {
  // The id of the AnalysisContext object.
  AnalysisContextInstance instance = 1;
  // Pass the unique rule ID of the rule.
  string RuleId = 2;
}

message AnalysisContext_GetRuleConfigurationResponse {
  // The return type of the RuleConfiguration object.
  RuleConfigurationInstance returnValue = 1;
}

message AnalysisContext_GetRuleAnalysisDataRequest {
  // The id of the AnalysisContext object.
  AnalysisContextInstance instance = 1;
  // Pass the unique rule ID of the rule.
  string RuleId = 2;
  // Pass the scope of the data to access. Use file scope to access data associated with the file currently under analysis. The sequence analyzer destroys the file data when it completes the analysis of the file and after it calls the analysis modules for the After file transition. Use global scope to access data associated with the current analysis session. The sequence analyzer destroys the global data when analysis of the project completes.
  RuleAnalysisDataScope RuleAnalysisDataScope = 3;
  // Use one of the GetRuleAnalysisDataOptions. You must use the GetRuleAnalysisDataOption_Lock option if the analysis module modifies the rule analysis data.
  int32 options = 4;
}

message AnalysisContext_GetRuleAnalysisDataResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message AnalysisContext_NewMessageRequest {
  // The id of the AnalysisContext object.
  AnalysisContextInstance instance = 1;
  // Pass the unique rule ID of the rule to which the message corresponds.
  string RuleId = 2;
  // Pass the message text. The sequence analyzer displays this text on the Analyzer Messages tab of the Analysis Results pane.
  string messageText = 3;
  // Pass the object associated with the message. The sequence analyzer uses this object to initialize the AnalysisMessage.Locations property, which specifies the location that the sequence analyzer uses when you go to the location associated with a message. Pass NULL if no specific object exists.
  PropertyObjectInstance locationObject = 4;
}

message AnalysisContext_NewMessageResponse {
  // The return type of the AnalysisMessage object.
  AnalysisMessageInstance returnValue = 1;
}

message AnalysisContext_ReportMessageRequest {
  // The id of the AnalysisContext object.
  AnalysisContextInstance instance = 1;
  // Pass the message to report.
  AnalysisMessageInstance message = 2;
}

message AnalysisContext_ReportMessageResponse {
}

message AnalysisContext_StopAnalysisRequest {
  // The id of the AnalysisContext object.
  AnalysisContextInstance instance = 1;
}

message AnalysisContext_StopAnalysisResponse {
}

message AnalysisContext_Get_EngineRequest {
  // The id of the AnalysisContext object.
  AnalysisContextInstance instance = 1;
}

message AnalysisContext_Get_EngineResponse {
  // Use this property in an analysis module to access methods and properties in the TestStand Engine class.
  EngineInstance returnValue = 1;
}

message AnalysisContext_Get_ObjectRequest {
  // The id of the AnalysisContext object.
  AnalysisContextInstance instance = 1;
}

message AnalysisContext_Get_ObjectResponse {
  // Use this property in an analysis module to access the object the TestStand Sequence Analyzer is currently analyzing.
  PropertyObjectInstance returnValue = 1;
}

message AnalysisContext_Get_FileRequest {
  // The id of the AnalysisContext object.
  AnalysisContextInstance instance = 1;
}

message AnalysisContext_Get_FileResponse {
  // Use this property in an analysis module to access the file the TestStand Sequence Analyzer is currently analyzing.
  PropertyObjectFileInstance returnValue = 1;
}

message AnalysisContext_Get_TransitionRequest {
  // The id of the AnalysisContext object.
  AnalysisContextInstance instance = 1;
}

message AnalysisContext_Get_TransitionResponse {
  // Use this property in an analysis module to access the file that the TestStand Sequence Analyzer is currently analyzing.
  AnalysisTransition returnValue = 1;
}

message AnalysisContext_Get_AnalysisIdRequest {
  // The id of the AnalysisContext object.
  AnalysisContextInstance instance = 1;
}

message AnalysisContext_Get_AnalysisIdResponse {
  // Use this property in an analysis module to obtain the unique ID of the current analysis session.
  int32 returnValue = 1;
}

message AnalysisContext_Get_UtilitiesRequest {
  // The id of the AnalysisContext object.
  AnalysisContextInstance instance = 1;
}

message AnalysisContext_Get_UtilitiesResponse {
  // Use this property in an analysis module to access utility methods that help you implement a rule.
  AnalysisUtilitiesInstance returnValue = 1;
}

message AnalysisContext_Get_StopRequestedRequest {
  // The id of the AnalysisContext object.
  AnalysisContextInstance instance = 1;
}

message AnalysisContext_Get_StopRequestedResponse {
  // Use this property in an analysis module to determine whether the user or another analysis module has requested to stop the current analysis session.
  bool returnValue = 1;
}

message AnalysisContext_Get_EditContextRequest {
  // The id of the AnalysisContext object.
  AnalysisContextInstance instance = 1;
}

message AnalysisContext_Get_EditContextResponse {
  // Use this property in an analysis module to obtain a sequence context that corresponds to the object under analysis. This property is NULL when the TestStand Sequence Analyzer calls an analysis module for analysis transitions.
  SequenceContextInstance returnValue = 1;
}

// AnalysisUtilities
//
// Use the objects of the AnalysisUtilities class in an analysis module to perform common analysis functions. Use the AnalysisContext.Utilities property to obtain an instance of this class.
//
service AnalysisUtilities {
  // Method: ValidateExpression
  //
  // Use this method in an analysis module to validate an expression. An analysis module can call this method to perform expression validation on any property that is not an instance of the Expression data type or to perform custom expression validation beyond syntax errors, such as type checking.
  // If the analysis module calls this method on expression properties within a step, the analysis module must set the AnalysisUtilities.AutomaticPropertyCheckingEnabled property to False to ensure that the sequence analyzer does not report duplicate messages, and the analysis module must perform all path and expression property checking for the step.
  // If the rules are enabled, this method reports analysis messages for the NI_ExpressionEvaluationError, NI_DynamicPropertyDoesNotExist, and NI_EscapeSequenceValid rules. This method also finds variables in the expression to determine which variables are used for the NI_UnusedVariables rule.
  // If you set the AnalysisUtilities.AutomaticPropertyCheckingEnabled property to True, the built-in analysis modules call this method with the evaluationFlags parameter set to ValidateExpressionOption_NoOptions for all properties of type Expression.
  //
  // AnalysisUtilities_ValidateExpressionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: AnalysisUtilitiesInstance - The id of the AnalysisUtilities object.
  //    - expression: string - Pass the expression to validate.
  //    - baseLocation: PropertyObjectInstance - Pass the base object to use with the apiLocation parameter as the location associated with any analysis messages this method reports.
  //    - apiLocation: APILocations - Pass the APILocations enumeration to use as the location associated with any analysis messages this method reports. To use the baseLocation as the location, pass APILocation_None.
  //    - validTypes: EvaluationTypesInstance - Pass the type or types to which you expect the expression to evaluate.
  //    - evaluationOptions: int32 - Pass any combination of the EvaluationOptions constants. You do not need to pass the EvalOption_DoNotAlterValues constant because this method never changes values.
  //    - additionalConstants: repeated PropertyObjectInstance - Pass additional variables the expression might contain that are not part of the context. This parameter is useful if the expression contains a constant from an enumeration, such as a parameter value of a module call when the parameter type is an enumeration. You can pass NULL for this parameter if no additional constants you want to use exist when evaluating the expression.
  //    - evaluationFlags: int32 - Pass a combination of the ValidateExpressionOptions constants.
  //
  // AnalysisUtilities_ValidateExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc ValidateExpression(AnalysisUtilities_ValidateExpressionRequest) returns (AnalysisUtilities_ValidateExpressionResponse);
  
  
  // Method: ValidatePath
  //
  // Use this method in an analysis module to validate a path. An analysis module can call this method to perform path validation on any property that is not an instance of the Path data type or to validate a path with a different validation option than the built-in analysis modules.
  // If the analysis module calls this method on path properties within a step, the analysis module must set the AnalysisUtilities.AutomaticPropertyCheckingEnabled property to False to ensure that the sequence analyzer does not report duplicate messages, and the analysis module must perform all path and expression property checking for the step
  // If the rules are enabled, this method reports analysis messages for the NI_ValidPath rule, the NI_FileNotFoundWarning rule, and the NI_FileNotFound rule.
  // If you set the AnalysisUtilities.AutomaticPropertyCheckingEnabled property to True, the built-in analysis modules call this method with the validationOptions parameter set to ValidatePathOption_DoNotCheckIfExists for all properties that use the Path type.
  // For path expression properties, analysis modules must instead call the AnalysisUtilities.ValidateExpression method and pass ValidateExpressionOption_Path for the evaluationFlags parameter.
  //
  // AnalysisUtilities_ValidatePathRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: AnalysisUtilitiesInstance - The id of the AnalysisUtilities object.
  //    - Path: string - Pass the path to validate. This path can be a relative or absolute path.
  //    - baseLocation: PropertyObjectInstance - Pass the base object to use with the apiLocation parameter as the location associated with any analysis messages this method reports.
  //    - apiLocation: APILocations - Pass the APILocations enumeration to use as the location associated with any analysis messages this method reports. To use the baseLocation as the location, pass APILocation_None.
  //    - validationOptions: int32 - Pass any of the ValidatePathOptions constants.
  //
  // AnalysisUtilities_ValidatePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc ValidatePath(AnalysisUtilities_ValidatePathRequest) returns (AnalysisUtilities_ValidatePathResponse);
  
  
  // Method: ValidateRemoteHost
  //
  // Use this method in an analysis module to validate whether a remote host can be located on the network. This method reports analysis messages for the NI_RemoteHostExists rule if the rule is enabled.
  //
  // AnalysisUtilities_ValidateRemoteHostRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: AnalysisUtilitiesInstance - The id of the AnalysisUtilities object.
  //    - remoteHost: string - Pass the name of the remote host to validate.
  //    - baseLocation: PropertyObjectInstance - Pass the base object to use with the apiLocation parameter as the location associated with any analysis messages this method reports.
  //    - apiLocation: APILocations - Pass the APILocations enumeration to use as the location associated with any analysis messages this method reports. To use the baseLocation as the location, pass APILocation_None.
  //
  // AnalysisUtilities_ValidateRemoteHostResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc ValidateRemoteHost(AnalysisUtilities_ValidateRemoteHostRequest) returns (AnalysisUtilities_ValidateRemoteHostResponse);
  
  
  // Method: ValidateCodeModuleUpToDate
  //
  // 
  //
  // AnalysisUtilities_ValidateCodeModuleUpToDateRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: AnalysisUtilitiesInstance - The id of the AnalysisUtilities object.
  //    - codeModulePath: string - 
  //    - sourcePath: string - 
  //    - baseLocation: PropertyObjectInstance - 
  //    - apiLocation: APILocations - 
  //    - reserved: int32 - 
  //
  // AnalysisUtilities_ValidateCodeModuleUpToDateResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc ValidateCodeModuleUpToDate(AnalysisUtilities_ValidateCodeModuleUpToDateRequest) returns (AnalysisUtilities_ValidateCodeModuleUpToDateResponse);
  
  

  // Property: AutomaticPropertyCheckingEnabled
  //
  // Set this property to False in an analysis module to prevent the sequence analyzer built-in analysis modules from performing automatic checks on step properties that are instances of the Path and Expression data types. An analysis module typically sets this property to False when analyzing a step instance for a custom step type. The analysis module must perform all expression and path property checking for the step when you disable this property. The analysis module can perform more specific expression checking than the built-in analysis modules, including type validation, and can selectively analyze properties based on other property values.
  // The sequence analyzer automatically resets this property to True before analyzing each step. The sequence analyzer always checks all built-in expression and path properties, such as pre-expressions and preconditions, even if an analysis module sets this property to False.
  //
  // AnalysisUtilities_Set_AutomaticPropertyCheckingEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AnalysisUtilitiesInstance - The id of the AnalysisUtilities object.
  //    - val: bool - Set this property to False in an analysis module to prevent the sequence analyzer built-in analysis modules from performing automatic checks on step properties that are instances of the Path and Expression data types. An analysis module typically sets this property to False when analyzing a step instance for a custom step type. The analysis module must perform all expression and path property checking for the step when you disable this property. The analysis module can perform more specific expression checking than the built-in analysis modules, including type validation, and can selectively analyze properties based on other property values. The sequence analyzer automatically resets this property to True before analyzing each step. The sequence analyzer always checks all built-in expression and path properties, such as pre-expressions and preconditions, even if an analysis module sets this property to False. 
  //
  // AnalysisUtilities_Set_AutomaticPropertyCheckingEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // AnalysisUtilities_Get_AutomaticPropertyCheckingEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AnalysisUtilitiesInstance - The id of the AnalysisUtilities object.
  //
  // AnalysisUtilities_Get_AutomaticPropertyCheckingEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Set this property to False in an analysis module to prevent the sequence analyzer built-in analysis modules from performing automatic checks on step properties that are instances of the Path and Expression data types. An analysis module typically sets this property to False when analyzing a step instance for a custom step type. The analysis module must perform all expression and path property checking for the step when you disable this property. The analysis module can perform more specific expression checking than the built-in analysis modules, including type validation, and can selectively analyze properties based on other property values. The sequence analyzer automatically resets this property to True before analyzing each step. The sequence analyzer always checks all built-in expression and path properties, such as pre-expressions and preconditions, even if an analysis module sets this property to False. 
  //
  rpc Set_AutomaticPropertyCheckingEnabled(AnalysisUtilities_Set_AutomaticPropertyCheckingEnabledRequest) returns (AnalysisUtilities_Set_AutomaticPropertyCheckingEnabledResponse);
  rpc Get_AutomaticPropertyCheckingEnabled(AnalysisUtilities_Get_AutomaticPropertyCheckingEnabledRequest) returns (AnalysisUtilities_Get_AutomaticPropertyCheckingEnabledResponse);
  
  
}
message AnalysisUtilities_ValidateExpressionRequest {
  // The id of the AnalysisUtilities object.
  AnalysisUtilitiesInstance instance = 1;
  // Pass the expression to validate.
  string expression = 2;
  // Pass the base object to use with the apiLocation parameter as the location associated with any analysis messages this method reports.
  PropertyObjectInstance baseLocation = 3;
  // Pass the APILocations enumeration to use as the location associated with any analysis messages this method reports. To use the baseLocation as the location, pass APILocation_None.
  APILocations apiLocation = 4;
  // Pass the type or types to which you expect the expression to evaluate.
  EvaluationTypesInstance validTypes = 5;
  // Pass any combination of the EvaluationOptions constants. You do not need to pass the EvalOption_DoNotAlterValues constant because this method never changes values.
  EvaluationOptions evaluationOptions = 6;
  // Pass additional variables the expression might contain that are not part of the context. This parameter is useful if the expression contains a constant from an enumeration, such as a parameter value of a module call when the parameter type is an enumeration. You can pass NULL for this parameter if no additional constants you want to use exist when evaluating the expression.
  repeated PropertyObjectInstance additionalConstants = 7;
  // Pass a combination of the ValidateExpressionOptions constants.
  ObjectKinds evaluationFlags = 8;
}

message AnalysisUtilities_ValidateExpressionResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message AnalysisUtilities_ValidatePathRequest {
  // The id of the AnalysisUtilities object.
  AnalysisUtilitiesInstance instance = 1;
  // Pass the path to validate. This path can be a relative or absolute path.
  string Path = 2;
  // Pass the base object to use with the apiLocation parameter as the location associated with any analysis messages this method reports.
  PropertyObjectInstance baseLocation = 3;
  // Pass the APILocations enumeration to use as the location associated with any analysis messages this method reports. To use the baseLocation as the location, pass APILocation_None.
  APILocations apiLocation = 4;
  // Pass any of the ValidatePathOptions constants.
  int32 validationOptions = 5;
}

message AnalysisUtilities_ValidatePathResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message AnalysisUtilities_ValidateRemoteHostRequest {
  // The id of the AnalysisUtilities object.
  AnalysisUtilitiesInstance instance = 1;
  // Pass the name of the remote host to validate.
  string remoteHost = 2;
  // Pass the base object to use with the apiLocation parameter as the location associated with any analysis messages this method reports.
  PropertyObjectInstance baseLocation = 3;
  // Pass the APILocations enumeration to use as the location associated with any analysis messages this method reports. To use the baseLocation as the location, pass APILocation_None.
  APILocations apiLocation = 4;
}

message AnalysisUtilities_ValidateRemoteHostResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message AnalysisUtilities_ValidateCodeModuleUpToDateRequest {
  // The id of the AnalysisUtilities object.
  AnalysisUtilitiesInstance instance = 1;
  // 
  string codeModulePath = 2;
  // 
  string sourcePath = 3;
  // 
  PropertyObjectInstance baseLocation = 4;
  // 
  APILocations apiLocation = 5;
  // 
  int32 reserved = 6;
}

message AnalysisUtilities_ValidateCodeModuleUpToDateResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message AnalysisUtilities_Set_AutomaticPropertyCheckingEnabledRequest {
  // The id of the AnalysisUtilities object.
  AnalysisUtilitiesInstance instance = 1;
  // Set this property to False in an analysis module to prevent the sequence analyzer built-in analysis modules from performing automatic checks on step properties that are instances of the Path and Expression data types. An analysis module typically sets this property to False when analyzing a step instance for a custom step type. The analysis module must perform all expression and path property checking for the step when you disable this property. The analysis module can perform more specific expression checking than the built-in analysis modules, including type validation, and can selectively analyze properties based on other property values.
  // The sequence analyzer automatically resets this property to True before analyzing each step. The sequence analyzer always checks all built-in expression and path properties, such as pre-expressions and preconditions, even if an analysis module sets this property to False.
  bool val = 2;
}

message AnalysisUtilities_Set_AutomaticPropertyCheckingEnabledResponse {
}

message AnalysisUtilities_Get_AutomaticPropertyCheckingEnabledRequest {
  // The id of the AnalysisUtilities object.
  AnalysisUtilitiesInstance instance = 1;
}

message AnalysisUtilities_Get_AutomaticPropertyCheckingEnabledResponse {
  // Set this property to False in an analysis module to prevent the sequence analyzer built-in analysis modules from performing automatic checks on step properties that are instances of the Path and Expression data types. An analysis module typically sets this property to False when analyzing a step instance for a custom step type. The analysis module must perform all expression and path property checking for the step when you disable this property. The analysis module can perform more specific expression checking than the built-in analysis modules, including type validation, and can selectively analyze properties based on other property values.
  // The sequence analyzer automatically resets this property to True before analyzing each step. The sequence analyzer always checks all built-in expression and path properties, such as pre-expressions and preconditions, even if an analysis module sets this property to False.
  bool returnValue = 1;
}

// RuleConfigurationContext
//
// Use the objects of the RuleConfigurationContext class in a rule configuration module to access the rule configuration data. The TestStand Sequence Analyzer passes an instance of this class as a parameter to the rule configuration module.
//
service RuleConfigurationContext {
  // Property: Engine
  //
  // Use this property in a rule configuration module to access methods and properties on the TestStand Engine class.
  //
  // RuleConfigurationContext_Get_EngineRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: RuleConfigurationContextInstance - The id of the RuleConfigurationContext object.
  //
  // RuleConfigurationContext_Get_EngineResponse - The response message from the server. It provides the return value.
  //    - returnValue: EngineInstance - Use this property in a rule configuration module to access methods and properties on the TestStand Engine class. 
  //
  rpc Get_Engine(RuleConfigurationContext_Get_EngineRequest) returns (RuleConfigurationContext_Get_EngineResponse);
  
  
  // Property: RuleConfiguration
  //
  // Use this property in a rule configuration module to access the rule configuration. The rule configuration stores settings specific to a rule.
  //
  // RuleConfigurationContext_Get_RuleConfigurationRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: RuleConfigurationContextInstance - The id of the RuleConfigurationContext object.
  //
  // RuleConfigurationContext_Get_RuleConfigurationResponse - The response message from the server. It provides the return value.
  //    - returnValue: RuleConfigurationInstance - Use this property in a rule configuration module to access the rule configuration. The rule configuration stores settings specific to a rule. 
  //
  rpc Get_RuleConfiguration(RuleConfigurationContext_Get_RuleConfigurationRequest) returns (RuleConfigurationContext_Get_RuleConfigurationResponse);
  
  
  // Property: IsModified
  //
  // Set this property in a rule configuration module to True if the module makes a change to the rule configuration. The TestStand Sequence Analyzer uses this property to determine whether the rule configuration module modified the project file.
  //
  // RuleConfigurationContext_Set_IsModifiedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: RuleConfigurationContextInstance - The id of the RuleConfigurationContext object.
  //    - val: bool - Set this property in a rule configuration module to True if the module makes a change to the rule configuration. The TestStand Sequence Analyzer uses this property to determine whether the rule configuration module modified the project file. 
  //
  // RuleConfigurationContext_Set_IsModifiedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // RuleConfigurationContext_Get_IsModifiedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: RuleConfigurationContextInstance - The id of the RuleConfigurationContext object.
  //
  // RuleConfigurationContext_Get_IsModifiedResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Set this property in a rule configuration module to True if the module makes a change to the rule configuration. The TestStand Sequence Analyzer uses this property to determine whether the rule configuration module modified the project file. 
  //
  rpc Set_IsModified(RuleConfigurationContext_Set_IsModifiedRequest) returns (RuleConfigurationContext_Set_IsModifiedResponse);
  rpc Get_IsModified(RuleConfigurationContext_Get_IsModifiedRequest) returns (RuleConfigurationContext_Get_IsModifiedResponse);
  
  
}
message RuleConfigurationContextInstance {
  // Specifies the handle of the RuleConfigurationContext instance in the server.
  string id = 1;
}
message RuleConfigurationContext_Get_EngineRequest {
  // The id of the RuleConfigurationContext object.
  RuleConfigurationContextInstance instance = 1;
}

message RuleConfigurationContext_Get_EngineResponse {
  // Use this property in a rule configuration module to access methods and properties on the TestStand Engine class.
  EngineInstance returnValue = 1;
}

message RuleConfigurationContext_Get_RuleConfigurationRequest {
  // The id of the RuleConfigurationContext object.
  RuleConfigurationContextInstance instance = 1;
}

message RuleConfigurationContext_Get_RuleConfigurationResponse {
  // Use this property in a rule configuration module to access the rule configuration. The rule configuration stores settings specific to a rule.
  RuleConfigurationInstance returnValue = 1;
}

message RuleConfigurationContext_Set_IsModifiedRequest {
  // The id of the RuleConfigurationContext object.
  RuleConfigurationContextInstance instance = 1;
  // Set this property in a rule configuration module to True if the module makes a change to the rule configuration. The TestStand Sequence Analyzer uses this property to determine whether the rule configuration module modified the project file.
  bool val = 2;
}

message RuleConfigurationContext_Set_IsModifiedResponse {
}

message RuleConfigurationContext_Get_IsModifiedRequest {
  // The id of the RuleConfigurationContext object.
  RuleConfigurationContextInstance instance = 1;
}

message RuleConfigurationContext_Get_IsModifiedResponse {
  // Set this property in a rule configuration module to True if the module makes a change to the rule configuration. The TestStand Sequence Analyzer uses this property to determine whether the rule configuration module modified the project file.
  bool returnValue = 1;
}

// Analyzer
//
// 
//
service Analyzer {
  // Service: Analyzer
  //
  // Creates a new Analyzer instance
  //
  // AnalyzerRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AnalyzerInstance - The id of the Analyzer object.
  //
  // AnalyzerResponse - The response message from the server. It provides the return value.
  //    - returnValue: AnalyzerInstance - The return type of the Analyzer object.
  //
  rpc Analyzer(Analyzer_AnalyzerRequest) returns (Analyzer_AnalyzerResponse);

  // Method: Initialize
  //
  rpc Initialize(Analyzer_InitializeRequest) returns (Analyzer_InitializeResponse);
  
  
  // Method: NewRulesFile
  //
  rpc NewRulesFile(Analyzer_NewRulesFileRequest) returns (Analyzer_NewRulesFileResponse);
  
  
  // Method: NewProject
  //
  rpc NewProject(Analyzer_NewProjectRequest) returns (Analyzer_NewProjectResponse);
  
  
  // Method: OpenProject
  //
  rpc OpenProject(Analyzer_OpenProjectRequest) returns (Analyzer_OpenProjectResponse);
  
  
  // Method: NewRuleModule
  //
  rpc NewRuleModule(Analyzer_NewRuleModuleRequest) returns (Analyzer_NewRuleModuleResponse);
  
  
  // Method: NewRule
  //
  rpc NewRule(Analyzer_NewRuleRequest) returns (Analyzer_NewRuleResponse);
  
  
  // Method: NewDirectoryToAnalyze
  //
  rpc NewDirectoryToAnalyze(Analyzer_NewDirectoryToAnalyzeRequest) returns (Analyzer_NewDirectoryToAnalyzeResponse);
  
  
  // Method: NewAnalyzerModule
  //
  rpc NewAnalyzerModule(Analyzer_NewAnalyzerModuleRequest) returns (Analyzer_NewAnalyzerModuleResponse);
  
  
  // Method: NewRuleSettingDefinition
  //
  rpc NewRuleSettingDefinition(Analyzer_NewRuleSettingDefinitionRequest) returns (Analyzer_NewRuleSettingDefinitionResponse);
  
  
  // Method: NewRuleSettingEnumeration
  //
  rpc NewRuleSettingEnumeration(Analyzer_NewRuleSettingEnumerationRequest) returns (Analyzer_NewRuleSettingEnumerationResponse);
  
  
  // Method: NewRuleSettingEnumerationItem
  //
  rpc NewRuleSettingEnumerationItem(Analyzer_NewRuleSettingEnumerationItemRequest) returns (Analyzer_NewRuleSettingEnumerationItemResponse);
  
  
  // Method: IsAnalyzingFile
  //
  rpc IsAnalyzingFile(Analyzer_IsAnalyzingFileRequest) returns (Analyzer_IsAnalyzingFileResponse);
  
  
  // Method: NewRuleSet
  //
  rpc NewRuleSet(Analyzer_NewRuleSetRequest) returns (Analyzer_NewRuleSetResponse);
  
  
  // Method: UnloadAllModules
  //
  rpc UnloadAllModules(Analyzer_UnloadAllModulesRequest) returns (Analyzer_UnloadAllModulesResponse);
  
  
  // Method: LoadRulesFiles
  //
  rpc LoadRulesFiles(Analyzer_LoadRulesFilesRequest) returns (Analyzer_LoadRulesFilesResponse);
  
  

  // Property: Rules
  //
  rpc Get_Rules(Analyzer_Get_RulesRequest) returns (Analyzer_Get_RulesResponse);
  
  
  // Property: RuleModules
  //
  rpc Get_RuleModules(Analyzer_Get_RuleModulesRequest) returns (Analyzer_Get_RuleModulesResponse);
  
  
  // Property: RuleSets
  //
  rpc Get_RuleSets(Analyzer_Get_RuleSetsRequest) returns (Analyzer_Get_RuleSetsResponse);
  
  
  // Property: CustomRulesFile
  //
  rpc Get_CustomRulesFile(Analyzer_Get_CustomRulesFileRequest) returns (Analyzer_Get_CustomRulesFileResponse);
  
  
  // Property: BuiltinRulesFile
  //
  rpc Get_BuiltinRulesFile(Analyzer_Get_BuiltinRulesFileRequest) returns (Analyzer_Get_BuiltinRulesFileResponse);
  
  
  // Property: Engine
  //
  rpc Get_Engine(Analyzer_Get_EngineRequest) returns (Analyzer_Get_EngineResponse);
  
  
  // Property: CacheSequenceFiles
  //
  rpc Set_CacheSequenceFiles(Analyzer_Set_CacheSequenceFilesRequest) returns (Analyzer_Set_CacheSequenceFilesResponse);
  rpc Get_CacheSequenceFiles(Analyzer_Get_CacheSequenceFilesRequest) returns (Analyzer_Get_CacheSequenceFilesResponse);
  
  
  // Property: SemiconductorModuleRulesFile
  //
  rpc Get_SemiconductorModuleRulesFile(Analyzer_Get_SemiconductorModuleRulesFileRequest) returns (Analyzer_Get_SemiconductorModuleRulesFileResponse);
  
  
}
message AnalyzerInstance {
  // Specifies the handle of the Analyzer instance in the server.
  string id = 1;
}
message Analyzer_AnalyzerRequest {
}

message Analyzer_AnalyzerResponse {
  // The return type of the Analyzer object.
  AnalyzerInstance returnValue = 1;
}

message Analyzer_InitializeRequest {
  // The id of the Analyzer object.
  AnalyzerInstance instance = 1;
}

message Analyzer_InitializeResponse {
}

message Analyzer_NewRulesFileRequest {
  // The id of the Analyzer object.
  AnalyzerInstance instance = 1;
}

message Analyzer_NewRulesFileResponse {
  RulesFileInstance returnValue = 1;
}

message Analyzer_NewProjectRequest {
  // The id of the Analyzer object.
  AnalyzerInstance instance = 1;
}

message Analyzer_NewProjectResponse {
  ProjectInstance returnValue = 1;
}

message Analyzer_OpenProjectRequest {
  // The id of the Analyzer object.
  AnalyzerInstance instance = 1;
  string projectPath = 2;
}

message Analyzer_OpenProjectResponse {
  ProjectInstance returnValue = 1;
}

message Analyzer_NewRuleModuleRequest {
  // The id of the Analyzer object.
  AnalyzerInstance instance = 1;
}

message Analyzer_NewRuleModuleResponse {
  RuleModuleInstance returnValue = 1;
}

message Analyzer_NewRuleRequest {
  // The id of the Analyzer object.
  AnalyzerInstance instance = 1;
  string newRuleId = 2;
}

message Analyzer_NewRuleResponse {
  RuleInstance returnValue = 1;
}

message Analyzer_NewDirectoryToAnalyzeRequest {
  // The id of the Analyzer object.
  AnalyzerInstance instance = 1;
  string directoryPath = 2;
  bool AnalyzeSubDirectories = 3;
}

message Analyzer_NewDirectoryToAnalyzeResponse {
  DirectoryToAnalyzeInstance returnValue = 1;
}

message Analyzer_NewAnalyzerModuleRequest {
  // The id of the Analyzer object.
  AnalyzerInstance instance = 1;
  ModuleType newModuleType = 2;
}

message Analyzer_NewAnalyzerModuleResponse {
  AnalyzerModuleInstance returnValue = 1;
}

message Analyzer_NewRuleSettingDefinitionRequest {
  // The id of the Analyzer object.
  AnalyzerInstance instance = 1;
  string settingName = 2;
  RuleSettingType newSettingType = 3;
}

message Analyzer_NewRuleSettingDefinitionResponse {
  RuleSettingDefinitionInstance returnValue = 1;
}

message Analyzer_NewRuleSettingEnumerationRequest {
  // The id of the Analyzer object.
  AnalyzerInstance instance = 1;
  string EnumerationName = 2;
}

message Analyzer_NewRuleSettingEnumerationResponse {
  RuleSettingEnumerationInstance returnValue = 1;
}

message Analyzer_NewRuleSettingEnumerationItemRequest {
  // The id of the Analyzer object.
  AnalyzerInstance instance = 1;
  string enumerationItemName = 2;
  double enumerationValue = 3;
}

message Analyzer_NewRuleSettingEnumerationItemResponse {
  RuleSettingEnumerationItemInstance returnValue = 1;
}

message Analyzer_IsAnalyzingFileRequest {
  // The id of the Analyzer object.
  AnalyzerInstance instance = 1;
  PropertyObjectFileInstance fileToCheck = 2;
}

message Analyzer_IsAnalyzingFileResponse {
  bool returnValue = 1;
}

message Analyzer_NewRuleSetRequest {
  // The id of the Analyzer object.
  AnalyzerInstance instance = 1;
  string ruleSetName = 2;
}

message Analyzer_NewRuleSetResponse {
  RuleSetInstance returnValue = 1;
}

message Analyzer_UnloadAllModulesRequest {
  // The id of the Analyzer object.
  AnalyzerInstance instance = 1;
}

message Analyzer_UnloadAllModulesResponse {
}

message Analyzer_LoadRulesFilesRequest {
  // The id of the Analyzer object.
  AnalyzerInstance instance = 1;
}

message Analyzer_LoadRulesFilesResponse {
}

message Analyzer_Get_RulesRequest {
  // The id of the Analyzer object.
  AnalyzerInstance instance = 1;
}

message Analyzer_Get_RulesResponse {
  RulesInstance returnValue = 1;
}

message Analyzer_Get_RuleModulesRequest {
  // The id of the Analyzer object.
  AnalyzerInstance instance = 1;
}

message Analyzer_Get_RuleModulesResponse {
  RuleModulesInstance returnValue = 1;
}

message Analyzer_Get_RuleSetsRequest {
  // The id of the Analyzer object.
  AnalyzerInstance instance = 1;
}

message Analyzer_Get_RuleSetsResponse {
  RuleSetsInstance returnValue = 1;
}

message Analyzer_Get_CustomRulesFileRequest {
  // The id of the Analyzer object.
  AnalyzerInstance instance = 1;
}

message Analyzer_Get_CustomRulesFileResponse {
  RulesFileInstance returnValue = 1;
}

message Analyzer_Get_BuiltinRulesFileRequest {
  // The id of the Analyzer object.
  AnalyzerInstance instance = 1;
}

message Analyzer_Get_BuiltinRulesFileResponse {
  RulesFileInstance returnValue = 1;
}

message Analyzer_Get_EngineRequest {
  // The id of the Analyzer object.
  AnalyzerInstance instance = 1;
}

message Analyzer_Get_EngineResponse {
  EngineInstance returnValue = 1;
}

message Analyzer_Set_CacheSequenceFilesRequest {
  // The id of the Analyzer object.
  AnalyzerInstance instance = 1;
  bool val = 2;
}

message Analyzer_Set_CacheSequenceFilesResponse {
}

message Analyzer_Get_CacheSequenceFilesRequest {
  // The id of the Analyzer object.
  AnalyzerInstance instance = 1;
}

message Analyzer_Get_CacheSequenceFilesResponse {
  bool returnValue = 1;
}

message Analyzer_Get_SemiconductorModuleRulesFileRequest {
  // The id of the Analyzer object.
  AnalyzerInstance instance = 1;
}

message Analyzer_Get_SemiconductorModuleRulesFileResponse {
  RulesFileInstance returnValue = 1;
}

///////////////////////// Referenced Types /////////////////////

// Generation of referenced types is disabled.

