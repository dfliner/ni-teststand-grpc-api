///// THIS FILE WAS AUTO GENERATED ON 03/07/2023 10:04:33 /////

syntax = "proto3";
package ni.teststand.api.grpc.techpreview;
option csharp_namespace = "NationalInstruments.TestStand.API.Grpc";
option go_package = "tsgrpc";
option java_multiple_files = true;
option java_outer_classname = "TestStandAPIProto";
option java_package = "com.ni.teststand.api.grpc.techpreview";
option objc_class_prefix = "NITAG";
option php_namespace = "NI\\TestStand\\API\\Grpc";
option ruby_package = "NI::TestStand::API::Grpc";

import "google/protobuf/timestamp.proto";
import "ni/teststand/api/grpc/techpreview/common_types_api.proto";

// module 

// SeqFileCallbacks
//
// Use these string constants to specify the callbackName parameter of the SequenceFile.CreateCallbackOverrideSequence method.
//
service SeqFileCallbacks {
  // Field: SeqFileCback_PreStep
  //
  // (Value: "SequenceFilePreStep")
  //
  rpc Get_SeqFileCback_PreStep(ConstantValueRequest) returns (stringResponse);
  // Field: SeqFileCback_PostStep
  //
  // (Value: "SequenceFilePostStep")
  //
  rpc Get_SeqFileCback_PostStep(ConstantValueRequest) returns (stringResponse);
  // Field: SeqFileCback_PreInteractive
  //
  // (Value: "SequenceFilePreInteractive")
  //
  rpc Get_SeqFileCback_PreInteractive(ConstantValueRequest) returns (stringResponse);
  // Field: SeqFileCback_PostInteractive
  //
  // (Value: "SequenceFilePostInteractive")
  //
  rpc Get_SeqFileCback_PostInteractive(ConstantValueRequest) returns (stringResponse);
  // Field: SeqFileCback_Load
  //
  // (Value: "SequenceFileLoad")
  //
  rpc Get_SeqFileCback_Load(ConstantValueRequest) returns (stringResponse);
  // Field: SeqFileCback_Unload
  //
  // (Value: "SequenceFileUnload")
  //
  rpc Get_SeqFileCback_Unload(ConstantValueRequest) returns (stringResponse);
  // Field: SeqFileCback_PostResultListEntry
  //
  // (Value: "SequenceFilePostResultListEntry")
  //
  rpc Get_SeqFileCback_PostResultListEntry(ConstantValueRequest) returns (stringResponse);
  // Field: SeqFileCback_PostStepRuntimeError
  //
  // (Value: "SequenceFilePostStepRuntimeError")
  //
  rpc Get_SeqFileCback_PostStepRuntimeError(ConstantValueRequest) returns (stringResponse);
  // Field: SeqFileCback_PostStepFailure
  //
  // (Value: "SequenceFilePostStepFailure")
  //
  rpc Get_SeqFileCback_PostStepFailure(ConstantValueRequest) returns (stringResponse);
  // Field: SeqFileCback_PostResults
  //
  // (Value: "SequenceFilePostResults")
  //
  rpc Get_SeqFileCback_PostResults(ConstantValueRequest) returns (stringResponse);
}

// module 

// DefaultModelCallbacks
//
// Use these string constants to specify the callbackName parameter of the SequenceFile.CreateCallbackOverrideSequence method.
//
service DefaultModelCallbacks {
  // Field: DefModCback_PreUUT
  //
  // (Value: "PreUUT")
  //
  rpc Get_DefModCback_PreUUT(ConstantValueRequest) returns (stringResponse);
  // Field: DefModCback_PostUUT
  //
  // (Value: "PostUUT")
  //
  rpc Get_DefModCback_PostUUT(ConstantValueRequest) returns (stringResponse);
  // Field: DefModCback_PreUUTLoop
  //
  // (Value: "PreUUTLoop")
  //
  rpc Get_DefModCback_PreUUTLoop(ConstantValueRequest) returns (stringResponse);
  // Field: DefModCback_PostUUTLoop
  //
  // (Value: "PostUUTLoop")
  //
  rpc Get_DefModCback_PostUUTLoop(ConstantValueRequest) returns (stringResponse);
  // Field: DefModCback_ModifyRptEntry
  //
  // (Value: "ModifyReportEntry")
  //
  rpc Get_DefModCback_ModifyRptEntry(ConstantValueRequest) returns (stringResponse);
  // Field: DefModCback_ReportOptions
  //
  // (Value: "ReportOptions")
  //
  rpc Get_DefModCback_ReportOptions(ConstantValueRequest) returns (stringResponse);
  // Field: DefModCback_TestReport
  //
  // (Value: "TestReport")
  //
  rpc Get_DefModCback_TestReport(ConstantValueRequest) returns (stringResponse);
  // Field: DefModCback_GetReportFilePath
  //
  // (Value: "GetReportFilePath")
  //
  rpc Get_DefModCback_GetReportFilePath(ConstantValueRequest) returns (stringResponse);
  // Field: DefModCback_ProcessCleanup
  //
  // (Value: "ProcessCleanup")
  //
  rpc Get_DefModCback_ProcessCleanup(ConstantValueRequest) returns (stringResponse);
  // Field: DefModCback_ProcessSetup
  //
  // (Value: "ProcessSetup")
  //
  rpc Get_DefModCback_ProcessSetup(ConstantValueRequest) returns (stringResponse);
  // Field: DefModCback_LogToDatabase
  //
  // (Value: "LogToDatabase")
  //
  rpc Get_DefModCback_LogToDatabase(ConstantValueRequest) returns (stringResponse);
  // Field: DefModCback_ModifyReportHeader
  //
  // (Value: "ModifyReportHeader")
  //
  rpc Get_DefModCback_ModifyReportHeader(ConstantValueRequest) returns (stringResponse);
  // Field: DefModCback_ModifyReportFooter
  //
  // (Value: "ModifyReportFooter")
  //
  rpc Get_DefModCback_ModifyReportFooter(ConstantValueRequest) returns (stringResponse);
  // Field: DefModCback_ModifyReportEntry
  //
  // (Value: "ModifyReportEntry")
  //
  rpc Get_DefModCback_ModifyReportEntry(ConstantValueRequest) returns (stringResponse);
  // Field: DefModCback_ModelOptions
  //
  // (Value: "ModelOptions")
  //
  rpc Get_DefModCback_ModelOptions(ConstantValueRequest) returns (stringResponse);
  // Field: DefModCback_DatabaseOptions
  //
  // (Value: "DatabaseOptions")
  //
  rpc Get_DefModCback_DatabaseOptions(ConstantValueRequest) returns (stringResponse);
  // Field: DefModCback_ModelPluginOptions
  //
  // (Value: "ModelPluginOptions")
  //
  rpc Get_DefModCback_ModelPluginOptions(ConstantValueRequest) returns (stringResponse);
  // Field: DefModCback_ModelPluginConfiguration
  //
  // (Value: "ModelPluginConfiguration")
  //
  rpc Get_DefModCback_ModelPluginConfiguration(ConstantValueRequest) returns (stringResponse);
  // Field: DefModCback_PreMainSequence
  //
  // (Value: "PreMainSequence")
  //
  rpc Get_DefModCback_PreMainSequence(ConstantValueRequest) returns (stringResponse);
  // Field: DefModCback_PostMainSequence
  //
  // (Value: "PostMainSequence")
  //
  rpc Get_DefModCback_PostMainSequence(ConstantValueRequest) returns (stringResponse);
}

// module 

// AdapterKeyNames
//
// Use these names when calling TestStand API functions, such as the Engine.NewStep method.
//
service AdapterKeyNames {
  // Field: StdCVIAdapterKeyName
  //
  // (Value: "C/CVI Std Prototype Adapter") Note: This constant is obsolete. Use FlexCVIAdapterKeyName instead.
  //
  rpc Get_StdCVIAdapterKeyName(ConstantValueRequest) returns (stringResponse);
  // Field: FlexCAdapterKeyName
  //
  // (Value: "DLL Flexible Prototype Adapter")
  //
  rpc Get_FlexCAdapterKeyName(ConstantValueRequest) returns (stringResponse);
  // Field: LVAdapterKeyName
  //
  // (Value: "G Std Prototype Adapter") Note: This constant is obsolete. Use FlexLVAdapterKeyName instead.
  //
  rpc Get_LVAdapterKeyName(ConstantValueRequest) returns (stringResponse);
  // Field: GAdapterKeyName
  //
  // (Value: "G Std Prototype Adapter") Note: This constant is obsolete. Use FlexLVAdapterKeyName instead.
  //
  rpc Get_GAdapterKeyName(ConstantValueRequest) returns (stringResponse);
  // Field: SequenceAdapterKeyName
  //
  // (Value: "Sequence Adapter")
  //
  rpc Get_SequenceAdapterKeyName(ConstantValueRequest) returns (stringResponse);
  // Field: AutomationAdapterKeyName
  //
  // (Value: "Automation Adapter")
  //
  rpc Get_AutomationAdapterKeyName(ConstantValueRequest) returns (stringResponse);
  // Field: NoneAdapterKeyName
  //
  // (Value: "None Adapter")
  //
  rpc Get_NoneAdapterKeyName(ConstantValueRequest) returns (stringResponse);
  // Field: HTBasicAdapterKeyName
  //
  // (Value: "HTBasic Adapter")
  //
  rpc Get_HTBasicAdapterKeyName(ConstantValueRequest) returns (stringResponse);
  // Field: FlexLVAdapterKeyName
  //
  // (Value: "G Flexible VI Adapter")
  //
  rpc Get_FlexLVAdapterKeyName(ConstantValueRequest) returns (stringResponse);
  // Field: FlexCVIAdapterKeyName
  //
  // (Value: "C/CVI Flexible Prototype Adapter")
  //
  rpc Get_FlexCVIAdapterKeyName(ConstantValueRequest) returns (stringResponse);
  // Field: DotNetAdapterKeyname
  //
  // (Value: "DotNet Adapter")
  //
  rpc Get_DotNetAdapterKeyname(ConstantValueRequest) returns (stringResponse);
  // Field: LabVIEWNXGAdapterKeyName
  //
  // (Value: "LabVIEW NXG Adapter")
  //
  rpc Get_LabVIEWNXGAdapterKeyName(ConstantValueRequest) returns (stringResponse);
  // Field: PythonAdapterKeyName
  //
  // (Value: "Python Adapter")
  //
  rpc Get_PythonAdapterKeyName(ConstantValueRequest) returns (stringResponse);
}

// module 

// StepTypes
//
// These constants containing the type names for the built-in step types. Use these constants with the Engine.NewStep method to create a step of a particular step type.
// Note: This list represents only the commonly used step type names.
//
service StepTypes {
  // Field: StepType_Action
  //
  // (Value: "Action")
  //
  rpc Get_StepType_Action(ConstantValueRequest) returns (stringResponse);
  // Field: StepType_Goto
  //
  // (Value: "Goto")
  //
  rpc Get_StepType_Goto(ConstantValueRequest) returns (stringResponse);
  // Field: StepType_Statement
  //
  // (Value: "Statement")
  //
  rpc Get_StepType_Statement(ConstantValueRequest) returns (stringResponse);
  // Field: StepType_SequenceCall
  //
  // (Value: "SequenceCall")
  //
  rpc Get_StepType_SequenceCall(ConstantValueRequest) returns (stringResponse);
  // Field: StepType_PassFailTest
  //
  // (Value: "PassFailTest")
  //
  rpc Get_StepType_PassFailTest(ConstantValueRequest) returns (stringResponse);
  // Field: StepType_MultiNumericMeasurement
  //
  // (Value: "NI_MultipleNumericLimitTest")
  //
  rpc Get_StepType_MultiNumericMeasurement(ConstantValueRequest) returns (stringResponse);
  // Field: StepType_NumericMeasurement
  //
  // (Value: "NumericLimitTest")
  //
  rpc Get_StepType_NumericMeasurement(ConstantValueRequest) returns (stringResponse);
  // Field: StepType_StringMeasurement
  //
  // (Value: "StringValueTest")
  //
  rpc Get_StepType_StringMeasurement(ConstantValueRequest) returns (stringResponse);
  // Field: StepType_MessagePopup
  //
  // (Value: "MessagePopup")
  //
  rpc Get_StepType_MessagePopup(ConstantValueRequest) returns (stringResponse);
  // Field: StepType_CallExecutable
  //
  // (Value: "CallExecutable")
  //
  rpc Get_StepType_CallExecutable(ConstantValueRequest) returns (stringResponse);
  // Field: StepType_LimitLoader
  //
  // (Value: "LimitLoaderStep ") This constant is obsolete. Use StepType_PropertyLoaderEx instead.
  //
  rpc Get_StepType_LimitLoader(ConstantValueRequest) returns (stringResponse);
  // Field: StepType_PropertyLoader
  //
  // (Value: "NI_VariableAndPropertyLoader") This constant is obsolete. Use StepType_PropertyLoaderEx instead.
  //
  rpc Get_StepType_PropertyLoader(ConstantValueRequest) returns (stringResponse);
  // Field: StepType_Label
  //
  // (Value: "Label")
  //
  rpc Get_StepType_Label(ConstantValueRequest) returns (stringResponse);
  // Field: StepType_PropertyLoaderEx
  //
  // (Value: "NI_PropertyLoader")
  //
  rpc Get_StepType_PropertyLoaderEx(ConstantValueRequest) returns (stringResponse);
}

// module 

// StepLoopTypes
//
// These constants specify the valid values for the Step.LoopType property.
//
service StepLoopTypes {
  // Field: LoopType_NoLoop
  //
  // (Value: "NoLooping")
  //
  rpc Get_LoopType_NoLoop(ConstantValueRequest) returns (stringResponse);
  // Field: LoopType_FixedNumLoops
  //
  // (Value: "FixedNumLoops")
  //
  rpc Get_LoopType_FixedNumLoops(ConstantValueRequest) returns (stringResponse);
  // Field: LoopType_PassFailCount
  //
  // (Value: "PassFailCount")
  //
  rpc Get_LoopType_PassFailCount(ConstantValueRequest) returns (stringResponse);
  // Field: LoopType_Custom
  //
  // (Value: "Custom")
  //
  rpc Get_LoopType_Custom(ConstantValueRequest) returns (stringResponse);
}

// module 

// PostActionValues
//
// Use these constants to specify the type of action you want to take for a particular post action of a step.
//
service PostActionValues {
  // Field: PostAction_NextStep
  //
  // (Value: "Next") Execution continues normally with the next step. This is the default value.
  //
  rpc Get_PostAction_NextStep(ConstantValueRequest) returns (stringResponse);
  // Field: PostAction_GotoStep
  //
  // (Value: "Goto") Execution branches to a step in the current step group, to the end of the current step group, or to the Cleanup step group. If the post action for a step specifies that execution branches to the Cleanup step group and the current step is in the Cleanup step group, execution proceeds normally with the next step in the Cleanup step group.
  //
  rpc Get_PostAction_GotoStep(ConstantValueRequest) returns (stringResponse);
  // Field: PostAction_CallCallback
  //
  // (Value: "Cback") Calls a sequence before continuing to the next step. You can select any sequence in the sequence file. TestStand does not pass any arguments to the sequence. If the sequence has parameters, TestStand uses the default values of the parameters.
  //
  rpc Get_PostAction_CallCallback(ConstantValueRequest) returns (stringResponse);
  // Field: PostAction_Terminate
  //
  // (Value: "Terminate") Terminates execution.
  //
  rpc Get_PostAction_Terminate(ConstantValueRequest) returns (stringResponse);
  // Field: PostAction_Break
  //
  // (Value: "Break") Suspends execution before continuing to the next step.
  //
  rpc Get_PostAction_Break(ConstantValueRequest) returns (stringResponse);
}

// module 

// SequenceContextProperties
//
// Use these constants to create lookup strings to access some of the commonly used and built-in properties of a sequence context using the PropertyObject class.
//
service SequenceContextProperties {
  // Field: SeqContext_RunStateProp
  //
  // (Value: "RunState")
  //
  rpc Get_SeqContext_RunStateProp(ConstantValueRequest) returns (stringResponse);
  // Field: RunState_LoopIndex
  //
  // (Value: "LoopIndex")
  //
  rpc Get_RunState_LoopIndex(ConstantValueRequest) returns (stringResponse);
  // Field: RunState_LoopNumPassed
  //
  // (Value: "LoopNumPassed")
  //
  rpc Get_RunState_LoopNumPassed(ConstantValueRequest) returns (stringResponse);
  // Field: RunState_LoopNumFailed
  //
  // (Value: "LoopNumFailed")
  //
  rpc Get_RunState_LoopNumFailed(ConstantValueRequest) returns (stringResponse);
  // Field: RunState_StepProp
  //
  // (Value: "Step")
  //
  rpc Get_RunState_StepProp(ConstantValueRequest) returns (stringResponse);
  // Field: RunState_SeqProp
  //
  // (Value: "Sequence")
  //
  rpc Get_RunState_SeqProp(ConstantValueRequest) returns (stringResponse);
  // Field: RunState_SeqFileProp
  //
  // (Value: "SequenceFile")
  //
  rpc Get_RunState_SeqFileProp(ConstantValueRequest) returns (stringResponse);
}

// module 

// SequenceProperties
//
// Use these string constants to create lookup strings when using the PropertyObject class to access the built-in properties of a sequence.
//
service SequenceProperties {
  // Field: Seq_SetupProp
  //
  // (Value: "Setup")
  //
  rpc Get_Seq_SetupProp(ConstantValueRequest) returns (stringResponse);
  // Field: Seq_MainProp
  //
  // (Value: "Main")
  //
  rpc Get_Seq_MainProp(ConstantValueRequest) returns (stringResponse);
  // Field: Seq_CleanupProp
  //
  // (Value: "Cleanup")
  //
  rpc Get_Seq_CleanupProp(ConstantValueRequest) returns (stringResponse);
}

// module 

// StepProperties
//
// Use these string constants to create lookup strings to access properties of the built-in step types using the PropertyObject class. Notice that some of the constants refer to properties, whereas other constants refer to property values.
//
service StepProperties {
  // Field: Step_ResultProp
  //
  // (Value: "Result")
  //
  rpc Get_Step_ResultProp(ConstantValueRequest) returns (stringResponse);
  // Field: Result_NumericProp
  //
  // (Value: "Numeric")
  //
  rpc Get_Result_NumericProp(ConstantValueRequest) returns (stringResponse);
  // Field: Result_StringProp
  //
  // (Value: "String")
  //
  rpc Get_Result_StringProp(ConstantValueRequest) returns (stringResponse);
  // Field: Result_PassFailProp
  //
  // (Value: "PassFail")
  //
  rpc Get_Result_PassFailProp(ConstantValueRequest) returns (stringResponse);
  // Field: Result_StatusProp
  //
  // (Value: "Status")
  //
  rpc Get_Result_StatusProp(ConstantValueRequest) returns (stringResponse);
  // Field: ResultStatus_NoStatus
  //
  // (Value: "")
  //
  rpc Get_ResultStatus_NoStatus(ConstantValueRequest) returns (stringResponse);
  // Field: ResultStatus_Done
  //
  // (Value: "Done")
  //
  rpc Get_ResultStatus_Done(ConstantValueRequest) returns (stringResponse);
  // Field: ResultStatus_Skipped
  //
  // (Value: "Skipped")
  //
  rpc Get_ResultStatus_Skipped(ConstantValueRequest) returns (stringResponse);
  // Field: ResultStatus_Passed
  //
  // (Value: "Passed")
  //
  rpc Get_ResultStatus_Passed(ConstantValueRequest) returns (stringResponse);
  // Field: ResultStatus_Failed
  //
  // (Value: "Failed")
  //
  rpc Get_ResultStatus_Failed(ConstantValueRequest) returns (stringResponse);
  // Field: ResultStatus_Error
  //
  // (Value: "Error")
  //
  rpc Get_ResultStatus_Error(ConstantValueRequest) returns (stringResponse);
  // Field: ResultStatus_Running
  //
  // (Value: "Running")
  //
  rpc Get_ResultStatus_Running(ConstantValueRequest) returns (stringResponse);
  // Field: ResultStatus_Looping
  //
  // (Value: "Looping")
  //
  rpc Get_ResultStatus_Looping(ConstantValueRequest) returns (stringResponse);
  // Field: ResultStatus_Terminated
  //
  // (Value: "Terminated")
  //
  rpc Get_ResultStatus_Terminated(ConstantValueRequest) returns (stringResponse);
  // Field: ResultStatus_Waiting
  //
  // (Value: "Waiting")
  //
  rpc Get_ResultStatus_Waiting(ConstantValueRequest) returns (stringResponse);
  // Field: Step_InBufProp
  //
  // (Value: "InBuf")
  //
  rpc Get_Step_InBufProp(ConstantValueRequest) returns (stringResponse);
  // Field: Step_LimitsProp
  //
  // (Value: "Limits")
  //
  rpc Get_Step_LimitsProp(ConstantValueRequest) returns (stringResponse);
  // Field: Limits_NominalValueProp
  //
  // (Value: "Nominal")
  //
  rpc Get_Limits_NominalValueProp(ConstantValueRequest) returns (stringResponse);
  // Field: Limits_LowProp
  //
  // (Value: "Low")
  //
  rpc Get_Limits_LowProp(ConstantValueRequest) returns (stringResponse);
  // Field: Limits_HighProp
  //
  // (Value: "High")
  //
  rpc Get_Limits_HighProp(ConstantValueRequest) returns (stringResponse);
  // Field: Limits_StringProp
  //
  // (Value: "String")
  //
  rpc Get_Limits_StringProp(ConstantValueRequest) returns (stringResponse);
  // Field: Step_TSInfoProp
  //
  // (Value: "TS")
  //
  rpc Get_Step_TSInfoProp(ConstantValueRequest) returns (stringResponse);
  // Field: TSInfo_StepAdditions
  //
  // (Value: "SData") Do not use this constant to access the adapter-specific properties of a step. Instead, use the specific module interface for the Module object for the step. Use the Step.Module property to acquire a reference to a Module object.
  //
  rpc Get_TSInfo_StepAdditions(ConstantValueRequest) returns (stringResponse);
  // Field: Step_MeasComparisonType
  //
  // (Value: "Comp")
  //
  rpc Get_Step_MeasComparisonType(ConstantValueRequest) returns (stringResponse);
  // Field: NumMeasComp_EQ
  //
  // (Value: "EQ")
  //
  rpc Get_NumMeasComp_EQ(ConstantValueRequest) returns (stringResponse);
  // Field: NumMeasComp_EQTHRESHOLD
  //
  // (Value: "EQT")
  //
  rpc Get_NumMeasComp_EQTHRESHOLD(ConstantValueRequest) returns (stringResponse);
  // Field: NumMeasComp_NE
  //
  // (Value: "NE")
  //
  rpc Get_NumMeasComp_NE(ConstantValueRequest) returns (stringResponse);
  // Field: NumMeasComp_GT
  //
  // (Value: "GT")
  //
  rpc Get_NumMeasComp_GT(ConstantValueRequest) returns (stringResponse);
  // Field: NumMeasComp_LT
  //
  // (Value: "LT")
  //
  rpc Get_NumMeasComp_LT(ConstantValueRequest) returns (stringResponse);
  // Field: NumMeasComp_GE
  //
  // (Value: "GE")
  //
  rpc Get_NumMeasComp_GE(ConstantValueRequest) returns (stringResponse);
  // Field: NumMeasComp_LE
  //
  // (Value: "LE")
  //
  rpc Get_NumMeasComp_LE(ConstantValueRequest) returns (stringResponse);
  // Field: NumMeasComp_GTLT
  //
  // (Value: "GTLT")
  //
  rpc Get_NumMeasComp_GTLT(ConstantValueRequest) returns (stringResponse);
  // Field: NumMeasComp_GELE
  //
  // (Value: "GELE")
  //
  rpc Get_NumMeasComp_GELE(ConstantValueRequest) returns (stringResponse);
  // Field: NumMeasComp_GELT
  //
  // (Value: "GELT")
  //
  rpc Get_NumMeasComp_GELT(ConstantValueRequest) returns (stringResponse);
  // Field: NumMeasComp_GTLE
  //
  // (Value: "GTLE")
  //
  rpc Get_NumMeasComp_GTLE(ConstantValueRequest) returns (stringResponse);
  // Field: NumMeasComp_LOG
  //
  // (Value: "LOG")
  //
  rpc Get_NumMeasComp_LOG(ConstantValueRequest) returns (stringResponse);
  // Field: Limits_ThresholdTypeProp
  //
  // (Value: "ThresholdType")
  //
  rpc Get_Limits_ThresholdTypeProp(ConstantValueRequest) returns (stringResponse);
  // Field: NumMeasThresholdType_PERCENTAGE
  //
  // (Value: "PERCENTAGE")
  //
  rpc Get_NumMeasThresholdType_PERCENTAGE(ConstantValueRequest) returns (stringResponse);
  // Field: NumMeasThresholdType_PPM
  //
  // (Value: "PPM")
  //
  rpc Get_NumMeasThresholdType_PPM(ConstantValueRequest) returns (stringResponse);
  // Field: NumMeasThresholdType_DELTA
  //
  // (Value: "DELTA")
  //
  rpc Get_NumMeasThresholdType_DELTA(ConstantValueRequest) returns (stringResponse);
  // Field: NumMeasRadix
  //
  // (Value: "DisplayRadix") This constant is obsolete. In TestStand 2.0, set the numeric format using the PropertyObject.NumericFormat property of the following step properties: Limits.High, Limits.Low, and Result.Numeric.
  //
  rpc Get_NumMeasRadix(ConstantValueRequest) returns (stringResponse);
  // Field: StrMeasComp_IgnoreCase
  //
  // (Value: "IgnoreCase")
  //
  rpc Get_StrMeasComp_IgnoreCase(ConstantValueRequest) returns (stringResponse);
  // Field: StrMeasComp_CaseSensitive
  //
  // (Value: "CaseSensitive")
  //
  rpc Get_StrMeasComp_CaseSensitive(ConstantValueRequest) returns (stringResponse);
}

// module 

// CVIStepAdditions
//
// Note: Do not use these constants to access the adapter-specific properties of a step. Use the CVIModule interface for the Module object for the step. Use the Step.Module property to acquire a reference to a Module object.
// In TestStand 3.0 or later, these string constants are obsolete.
// These string constants were previously used to create lookup strings to access the adapter-specific properties of a LabWindows/CVI step. The following example code sets the module pathname property of a LabWindows/CVI step:
// TS_PropertySetValString(propObj, &errorInfo, Step_TSInfoProp "." TSInfo_StepAdditions "." CVIStep_ModulePathProp, 0, testFilePath);
//
service CVIStepAdditions {
  // Field: CVIStep_ModulePathProp
  //
  // (Value: "ModulePath") This constant is obsolete.
  //
  rpc Get_CVIStep_ModulePathProp(ConstantValueRequest) returns (stringResponse);
  // Field: CVIStep_FunctionNameProp
  //
  // (Value: "FuncName") This constant is obsolete.
  //
  rpc Get_CVIStep_FunctionNameProp(ConstantValueRequest) returns (stringResponse);
  // Field: CVIStep_FunctionPrototypeProp
  //
  // (Value: "FuncProto") This constant is obsolete.
  //
  rpc Get_CVIStep_FunctionPrototypeProp(ConstantValueRequest) returns (stringResponse);
  // Field: CVIStep_ParamsStringProp
  //
  // (Value: "ExtProtoParams") This constant is obsolete.
  //
  rpc Get_CVIStep_ParamsStringProp(ConstantValueRequest) returns (stringResponse);
  // Field: CVIStep_ModuleTypeProp
  //
  // (Value: "ModuleType") This constant is obsolete.
  //
  rpc Get_CVIStep_ModuleTypeProp(ConstantValueRequest) returns (stringResponse);
  // Field: CVIStep_SeqContextPassProp
  //
  // (Value: "SeqContextType") This constant is obsolete.
  //
  rpc Get_CVIStep_SeqContextPassProp(ConstantValueRequest) returns (stringResponse);
  // Field: CVIStep_ModuleSrcPathProp
  //
  // (Value: "ModuleSrcPath") This constant is obsolete.
  //
  rpc Get_CVIStep_ModuleSrcPathProp(ConstantValueRequest) returns (stringResponse);
  // Field: CVIStep_ModulePrjPathProp
  //
  // (Value: "ModulePrjPath") This constant is obsolete.
  //
  rpc Get_CVIStep_ModulePrjPathProp(ConstantValueRequest) returns (stringResponse);
}

// module 

// LVStepAdditions
//
// Note: Do not use these constants to access the adapter-specific properties of a step. Use the LabVIEWModule interface for the Module object for the step. Use the Step.Module property to acquire a reference to a Module object.
// In TestStand 3.0 or later, these string constants are obsolete.
// These string constants were previously used to create lookup strings to access the adapter-specific properties of a LabVIEW step. The following example code sets the module pathname of a LabVIEW step:
// TS_PropertySetValString(propObj, &errorInfo, Step_TSInfoProp "." TSInfo_StepAdditions "." LVStep_ModulePathProp, 0, testFilePath);
//
service LVStepAdditions {
  // Field: LVStep_ModulePathProp
  //
  // (Value: "ViPath") This constant is obsolete.
  //
  rpc Get_LVStep_ModulePathProp(ConstantValueRequest) returns (stringResponse);
  // Field: LVStep_PassInBufProp
  //
  // (Value: "PassInBuf") This constant is obsolete.
  //
  rpc Get_LVStep_PassInBufProp(ConstantValueRequest) returns (stringResponse);
  // Field: LVStep_PassInvocInfoProp
  //
  // (Value: "PassInvocInfo") This constant is obsolete.
  //
  rpc Get_LVStep_PassInvocInfoProp(ConstantValueRequest) returns (stringResponse);
  // Field: LVStep_PassSeqContextProp
  //
  // (Value: "PassContextPtr") This constant is obsolete.
  //
  rpc Get_LVStep_PassSeqContextProp(ConstantValueRequest) returns (stringResponse);
  // Field: LVStep_ShowFrontPanelProp
  //
  // (Value: "ShowFrntPnl") This constant is obsolete.
  //
  rpc Get_LVStep_ShowFrontPanelProp(ConstantValueRequest) returns (stringResponse);
}

// module 

// SequenceCallStepAdditions
//
// Note: Do not use the following constants to access the adapter-specific properties of a step. Use the SequenceCallModule interface for the Module object for the step. Use the Step.Module property to acquire a reference to a Module object.
// In TestStand 3.0 or later, these string constants are obsolete.
// These string constants were previously used to create lookup strings when using the PropertyObject class to access the adapter-specific properties of a Sequence Call step.
//
service SequenceCallStepAdditions {
  // Field: SCStep_SeqFilePathProp
  //
  // (Value: "SFPath") Pathname of the sequence file that contains the subsequence. The value of this property is meaningful only when SCStep_SpecifyByExprProp and SCStep_UseCurrentFileProp are False.
  //
  rpc Get_SCStep_SeqFilePathProp(ConstantValueRequest) returns (stringResponse);
  // Field: SCStep_SeqFilePathExprProp
  //
  // (Value: "SFPathExpr") An expression that must evaluate to a string which obtains the pathname of the sequence file that contains the subsequence. The value of this property is meaningful only when SCStep_SpecifyByExprProp is True and Step_UseCurrentFileProp is False.
  //
  rpc Get_SCStep_SeqFilePathExprProp(ConstantValueRequest) returns (stringResponse);
  // Field: SCStep_SeqNameProp
  //
  // (Value: "SeqName") Name of the subsequence. The value of this property is meaningful only when SCStep_SpecifyByExprProp is False.
  //
  rpc Get_SCStep_SeqNameProp(ConstantValueRequest) returns (stringResponse);
  // Field: SCStep_SeqNameExprProp
  //
  // (Value: "SeqNameExpr") An expression, that must evaluate to a string, to obtain the name of the subsequence to be called. The value of this property is meaningful only when SCStep_SpecifyByExprProp is True.
  //
  rpc Get_SCStep_SeqNameExprProp(ConstantValueRequest) returns (stringResponse);
  // Field: SCStep_ActualArgsProp
  //
  // (Value: "ActualArgs") An object that contains a list of arguments to the subsequence. If the subsequence has fewer parameters than the number of arguments, the subsequence ignores the extra arguments. If the subsequence has more parameters than the number of arguments, the subsequences uses the default values of the extra parameters.
  //
  rpc Get_SCStep_ActualArgsProp(ConstantValueRequest) returns (stringResponse);
  // Field: SCStep_UseCurrentFileProp
  //
  // (Value: "UseCurFile") A Boolean property that is True when the file that contains the Sequence Call step also contains the subsequence.
  //
  rpc Get_SCStep_UseCurrentFileProp(ConstantValueRequest) returns (stringResponse);
  // Field: SCStep_SpecifyByExprProp
  //
  // (Value: "SpecifyByExpr") If this Boolean property is True, TestStand evaluates the SCStep_SeqFilePathExprProp expression property to determine the pathname of the sequence file that contains the subsequence. TestStand also evaluates the SCStep_SeqNameExprProp expression property to determine the name of the subsequence.
  //
  rpc Get_SCStep_SpecifyByExprProp(ConstantValueRequest) returns (stringResponse);
  // Field: SCStep_ArgPrototypeProp
  //
  // (Value: "Prototype") An object that contains a list of parameters. TestStand uses the parameter list only for displaying the arguments in the Specify Module dialog box. The Specify Module dialog box sets this property when you select a sequence with the Load Prototype button. The value of this property is meaningful only when SCStep_UseArgPrototypeProp is True.
  //
  rpc Get_SCStep_ArgPrototypeProp(ConstantValueRequest) returns (stringResponse);
  // Field: SCStep_TraceSettingProp
  //
  // (Value: "Trace") A property that controls if tracing occurs while the subsequence executes. Following are the three possible values: SCStep_TraceSettingValOff, Step_TraceSettingValOn, and SCStep_TraceSettingValDontChange.
  //
  rpc Get_SCStep_TraceSettingProp(ConstantValueRequest) returns (stringResponse);
  // Field: SCStep_TraceSettingValOff
  //
  // (Value: "Off") A value of the SCStep_TraceSettingProp property. It disables tracing while the subsequence executes.
  //
  rpc Get_SCStep_TraceSettingValOff(ConstantValueRequest) returns (stringResponse);
  // Field: SCStep_TraceSettingValOn
  //
  // (Value: "On") A value of the SCStep_TraceSettingProp property. It enables tracing while the subsequence executes.
  //
  rpc Get_SCStep_TraceSettingValOn(ConstantValueRequest) returns (stringResponse);
  // Field: SCStep_TraceSettingValDontChange
  //
  // (Value: "Don't Change") A value of the SCStep_TraceSettingProp property. When tracing is enabled in the Sequence Call step that calls the subsequence, tracing only occurs while the subsequence executes.
  //
  rpc Get_SCStep_TraceSettingValDontChange(ConstantValueRequest) returns (stringResponse);
  // Field: SCStep_IgnoreTerminateProp
  //
  // (Value: "IgnoreTerminate") If this Boolean property is True and the user or a step module attempts to terminate the subsequence before it completes, the execution continues with the next step.
  //
  rpc Get_SCStep_IgnoreTerminateProp(ConstantValueRequest) returns (stringResponse);
  // Field: SCStep_UseArgPrototypeProp
  //
  // (Value: "UsePrototype") If this Boolean property is True, the prototype for displaying arguments in the Specify Module dialog box is taken from the SCStep_ArgPrototypeProp property. If this property is False, the prototype is taken from the selected sequence, if any. The Specify Module dialog box sets this property to True when you enable the Specify Expressions for Pathname and Sequence option or when you disable the Use Prototype of Selected Sequence option.
  //
  rpc Get_SCStep_UseArgPrototypeProp(ConstantValueRequest) returns (stringResponse);
}

// module 

// FlexCStepAdditions
//
// Note: Do not use these constants to access the adapter-specific properties of a step. Use the DllModule interface for the Module object for the step. Use the Step.Module property to acquire a reference to a Module object.
// In TestStand 3.0 or later, these string constants are obsolete.
// These string constants were previously used to create lookup strings to access the C/C++ DLL Adapter-specific properties of a step. Notice that the FlexCStep_ExternalCallProp constant refers to the property that contains the properties which have constants that begin with the ExternalCall_ prefix. The ExternalCall_ParametersProp constant represents the property that contains an array of objects that describe the return value and parameters for the function. Constants that have names that begin with FCParam_ apply to the return value and each parameter.
//
service FlexCStepAdditions {
  // Field: FlexCStep_ExternalCallProp
  //
  // (Value: "Call") This constant is obsolete.
  //
  rpc Get_FlexCStep_ExternalCallProp(ConstantValueRequest) returns (stringResponse);
  // Field: ExternalCall_LibPathProp
  //
  // (Value: "LibPath") This constant is obsolete.
  //
  rpc Get_ExternalCall_LibPathProp(ConstantValueRequest) returns (stringResponse);
  // Field: ExternalCall_FunctionNameProp
  //
  // (Value: "Func") This constant is obsolete.
  //
  rpc Get_ExternalCall_FunctionNameProp(ConstantValueRequest) returns (stringResponse);
  // Field: ExternalCall_CallConvProp
  //
  // (Value: "Conv") This constant is obsolete.
  //
  rpc Get_ExternalCall_CallConvProp(ConstantValueRequest) returns (stringResponse);
  // Field: ExternalCall_ParametersProp
  //
  // (Value: "Params") This constant is obsolete.
  //
  rpc Get_ExternalCall_ParametersProp(ConstantValueRequest) returns (stringResponse);
  // Field: FCParam_NameProp
  //
  // (Value: "Name") This constant is obsolete.
  //
  rpc Get_FCParam_NameProp(ConstantValueRequest) returns (stringResponse);
  // Field: FCParam_TypeProp
  //
  // (Value: "Type") This constant is obsolete.
  //
  rpc Get_FCParam_TypeProp(ConstantValueRequest) returns (stringResponse);
  // Field: FCParam_NumericTypeProp
  //
  // (Value: "NumType") This constant is obsolete.
  //
  rpc Get_FCParam_NumericTypeProp(ConstantValueRequest) returns (stringResponse);
  // Field: FCParam_ObjectTypeProp
  //
  // (Value: "ObjType") This constant is obsolete.
  //
  rpc Get_FCParam_ObjectTypeProp(ConstantValueRequest) returns (stringResponse);
  // Field: FCParam_NumericPassingProp
  //
  // (Value: "NumPass") This constant is obsolete.
  //
  rpc Get_FCParam_NumericPassingProp(ConstantValueRequest) returns (stringResponse);
  // Field: FCParam_StringPassingProp
  //
  // (Value: "StrPass") This constant is obsolete.
  //
  rpc Get_FCParam_StringPassingProp(ConstantValueRequest) returns (stringResponse);
  // Field: FCParam_ArrayElemPassingProp
  //
  // (Value: "ElemPass") This constant is obsolete.
  //
  rpc Get_FCParam_ArrayElemPassingProp(ConstantValueRequest) returns (stringResponse);
  // Field: FCParam_NumArrayElementsProp
  //
  // (Value: "NumEls") This constant is obsolete.
  //
  rpc Get_FCParam_NumArrayElementsProp(ConstantValueRequest) returns (stringResponse);
  // Field: FCParam_StringSizeProp
  //
  // (Value: "StrSize") This constant is obsolete.
  //
  rpc Get_FCParam_StringSizeProp(ConstantValueRequest) returns (stringResponse);
  // Field: FCParam_ResultActionProp
  //
  // (Value: "ResultAct") This constant is obsolete.
  //
  rpc Get_FCParam_ResultActionProp(ConstantValueRequest) returns (stringResponse);
  // Field: FCParam_ArgValueProp
  //
  // (Value: "ArgVal") This constant is obsolete.
  //
  rpc Get_FCParam_ArgValueProp(ConstantValueRequest) returns (stringResponse);
  // Field: FCParam_FlagsProp
  //
  // (Value: "Flags") This constant is obsolete.
  //
  rpc Get_FCParam_FlagsProp(ConstantValueRequest) returns (stringResponse);
}

// module 

// RunModes
//
// Use these constants to specify the type of action you want to take before executing the step.
//
service RunModes {
  // Field: RunMode_Normal
  //
  // (Value: "Normal") The step executes normally.
  //
  rpc Get_RunMode_Normal(ConstantValueRequest) returns (stringResponse);
  // Field: RunMode_Skip
  //
  // (Value: "Skip") The step does not execute. Instead, the step status is set to Skipped.
  //
  rpc Get_RunMode_Skip(ConstantValueRequest) returns (stringResponse);
  // Field: RunMode_ForceFail
  //
  // (Value: "Fail") The step does not execute. Instead, the step status is set to Failed.
  //
  rpc Get_RunMode_ForceFail(ConstantValueRequest) returns (stringResponse);
  // Field: RunMode_ForcePass
  //
  // (Value: "Pass") The step does not execute. Instead, the step status is set to Passed.
  //
  rpc Get_RunMode_ForcePass(ConstantValueRequest) returns (stringResponse);
}

// module 

// NamedPropertyTypes
//
// Use these constants to specify one of the built-in, named data types when calling a method such as Engine.NewPropertyObject or PropertyObject.NewSubProperty.
//
service NamedPropertyTypes {
  // Field: PropType_Path
  //
  // (Value: "Path")
  //
  rpc Get_PropType_Path(ConstantValueRequest) returns (stringResponse);
  // Field: PropType_FCParam
  //
  // (Value: "FCParameter")
  //
  rpc Get_PropType_FCParam(ConstantValueRequest) returns (stringResponse);
  // Field: PropType_Error
  //
  // (Value: "Error")
  //
  rpc Get_PropType_Error(ConstantValueRequest) returns (stringResponse);
  // Field: PropType_CommonResults
  //
  // (Value: "CommonResults")
  //
  rpc Get_PropType_CommonResults(ConstantValueRequest) returns (stringResponse);
}

// module 

// UserPrivileges
//
// Use these string constants to check if a user has a particular built-in privilege. Use the Engine.CurrentUserHasPrivilege or User.HasPrivilege method with these constants.
//
service UserPrivileges {
  // Field: Priv_Operate
  //
  // (Value: "Operate")
  //
  rpc Get_Priv_Operate(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_Execute
  //
  // (Value: "Execute")
  //
  rpc Get_Priv_Execute(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_Terminate
  //
  // (Value: "Terminate")
  //
  rpc Get_Priv_Terminate(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_Abort
  //
  // (Value: "Abort")
  //
  rpc Get_Priv_Abort(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_Debug
  //
  // (Value: "Debug")
  //
  rpc Get_Priv_Debug(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_CtrlExecFlow
  //
  // (Value: "ControlExecFlow")
  //
  rpc Get_Priv_CtrlExecFlow(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_SinglePass
  //
  // (Value: "SinglePass")
  //
  rpc Get_Priv_SinglePass(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_RunAnySequence
  //
  // (Value: "RunAnySequence")
  //
  rpc Get_Priv_RunAnySequence(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_RunSelectedTests
  //
  // (Value: "RunSelectedTests")
  //
  rpc Get_Priv_RunSelectedTests(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_LoopSelectedTests
  //
  // (Value: "LoopSelectedTests")
  //
  rpc Get_Priv_LoopSelectedTests(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_EditStationGlobals
  //
  // (Value: "EditStationGlobals")
  //
  rpc Get_Priv_EditStationGlobals(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_EditRuntimeVariables
  //
  // (Value: "EditRuntimeVariables")
  //
  rpc Get_Priv_EditRuntimeVariables(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_Develop
  //
  // (Value: "Develop")
  //
  rpc Get_Priv_Develop(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_EditSequenceFiles
  //
  // (Value: "EditSequenceFiles")
  //
  rpc Get_Priv_EditSequenceFiles(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_SaveSequenceFiles
  //
  // (Value: "SaveSequenceFiles")
  //
  rpc Get_Priv_SaveSequenceFiles(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_EditWorkspace
  //
  // (Value: "EditWorkspace")
  //
  rpc Get_Priv_EditWorkspace(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_UseSourceControl
  //
  // (Value: "UseSourceControl")
  //
  rpc Get_Priv_UseSourceControl(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_Configure
  //
  // (Value: "Configure")
  //
  rpc Get_Priv_Configure(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_EditTypes
  //
  // (Value: "EditTypes")
  //
  rpc Get_Priv_EditTypes(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_ConfigEngine
  //
  // (Value: "ConfigEngine")
  //
  rpc Get_Priv_ConfigEngine(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_ConfigAdapter
  //
  // (Value: "ConfigAdapter")
  //
  rpc Get_Priv_ConfigAdapter(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_ConfigApp
  //
  // (Value: "ConfigApp")
  //
  rpc Get_Priv_ConfigApp(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_ConfigReport
  //
  // (Value: "ConfigReport")
  //
  rpc Get_Priv_ConfigReport(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_ConfigDatabase
  //
  // (Value: "ConfigDatabase")
  //
  rpc Get_Priv_ConfigDatabase(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_ConfigModel
  //
  // (Value: "ConfigModel")
  //
  rpc Get_Priv_ConfigModel(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_EditUsers
  //
  // (Value: "EditUsers")
  //
  rpc Get_Priv_EditUsers(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_EditProcessModelFiles
  //
  // (Value: "EditProcessModelFiles")
  //
  rpc Get_Priv_EditProcessModelFiles(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_UserLoggedIn
  //
  // (Value: "*")  Use this value with the Engine.CurrentUserHasPrivilege method to determine whether a user is logged in.
  //
  rpc Get_Priv_UserLoggedIn(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_GrantAll
  //
  // (Value: "GrantAll") This property exists in all the group privileges in the user privileges property view.  If the value is True, the user is granted all the privileges in the group.Note: Do not use this constant with the Engine.CurrentUserHasPrivilege method.
  //
  rpc Get_Priv_GrantAll(ConstantValueRequest) returns (stringResponse);
  // Field: Priv_EditTemplates
  //
  // (Value: "EditTemplates")
  //
  rpc Get_Priv_EditTemplates(ConstantValueRequest) returns (stringResponse);
}

// PropertyValueTypes
//
// These constants indicate the type of value a PropertyObject stores.
//
enum PropertyValueTypes {
  // Field: PropValType_Container
  //
  // (Value: 0) Specifies a container.
  //
  PropValType_Container = 0;
  // Field: PropValType_String
  //
  // (Value: 1) Specifies a string.
  //
  PropValType_String = 1;
  // Field: PropValType_Boolean
  //
  // (Value: 2) Specifies a Boolean type.
  //
  PropValType_Boolean = 2;
  // Field: PropValType_Number
  //
  // (Value: 3) Specifies a number.
  //
  PropValType_Number = 3;
  // Field: PropValType_NamedType
  //
  // (Value: 4) Use this value with PropertyObject creation methods such as Engine.NewPropertyObject and PropertyObject.NewSubProperty to create an instance of a named type. This is not a valid value for the PropertyObjectType.ValueType property.
  //
  PropValType_NamedType = 4;
  // Field: PropValType_Reference
  //
  // (Value: 5) Specifies an object reference.
  //
  PropValType_Reference = 5;
  // Field: PropValType_Array
  //
  // (Value: 6) Specifies an array. This is not a valid value for PropertyObject creation methods such as Engine.NewPropertyObject and PropertyObject.NewSubProperty.
  //
  PropValType_Array = 6;
  // Field: PropValType_Enum
  //
  // (Value: 7) Specifies an enumeration.
  //
  PropValType_Enum = 7;
}

// FindFilePromptOptions
//
// Use these constants to specify the promptOption parameter of the Engine.FindFileEx method.
// The promptOption parameter specifies whether to prompt the user for a file location when TestStand cannot find the file in the search directory paths.
//
enum FindFilePromptOptions {
  FindFilePromptOptions_reservedZero = 0;
  // Field: FindFile_PromptHonorUserPreference
  //
  // (Value: 1) Prompt the user to locate the file if the Prompt to Find Files option on the Preferences tab of the Station Options dialog box is enabled.
  //
  FindFile_PromptHonorUserPreference = 1;
  // Field: FindFile_PromptEnable
  //
  // (Value: 2) Prompt the user to locate the file.
  //
  FindFile_PromptEnable = 2;
  // Field: FindFile_PromptDisable
  //
  // (Value: 3) Do not prompt the user to locate the file.
  //
  FindFile_PromptDisable = 3;
}

// FindFileSearchListOptions
//
// Use these constants to specify the srchListOption parameter of the Engine.FindFileEx method.
// The FindFile_AddDirSearchList constants specify whether TestStand adds the directory of the file you select to the search directory paths. It also changes the dimmed state of the Add Directory to Search Directory List option.
//
enum FindFileSearchListOptions {
  FindFileSearchListOptions_reservedZero = 0;
  // Field: FindFile_AddDirToSrchList_Ask
  //
  // (Value: 1) Enables the Add Directory to Search Directory List option so you can choose whether to append the directory that contains the file to the list of search directories. If the current user does not have configured engine privileges, the Engine.FindFileEx method behaves as if you passed FindFile_AddDirToSrchList_No.
  //
  FindFile_AddDirToSrchList_Ask = 1;
  // Field: FindFile_AddDirToSrchList_Yes
  //
  // (Value: 3) Adds the directory to the search paths and dims the Add Directory to Search Directory List option. If the current user does not have configure engine privileges, the Engine.FindFileEx method behaves as if you passed FindFile_AddDirToSrchList_No.
  //
  FindFile_AddDirToSrchList_Yes = 2;
  // Field: FindFile_AddDirToSrchList_No
  //
  // (Value: 2) Does not add the directory to the search path and disables and dims the Add Directory to Search Directory List option.
  //
  FindFile_AddDirToSrchList_No = 3;
  // Field: FindFile_AddDirToSrchList_Ask_IgnorePrivileges
  //
  // (Value: 4) The same as FindFile_AddDirToSrchList_Ask but does not check user privileges.
  //
  FindFile_AddDirToSrchList_Ask_IgnorePrivileges = 4;
  // Field: FindFile_AddDirToSrchList_Yes_IgnorePrivileges
  //
  // (Value: 5) The same as FindFile_AddDirToSrchList_Yes but does not check user privileges.
  //
  FindFile_AddDirToSrchList_Yes_IgnorePrivileges = 5;
}

// FindPathStatusValues
//
// The Engine.FindPath method returns one of these constants to indicate the results of the path search.
//
enum FindPathStatusValues {
  FindPathStatusValues_reservedZero = 0;
  // Field: FindPath_PathIsFile
  //
  // (Value: 1) The FindPath method returned the path of a file.
  //
  FindPath_PathIsFile = 1;
  // Field: FindPath_PathIsDir
  //
  // (Value: 2) The FindPath method returned the path of a directory.
  //
  FindPath_PathIsDir = 2;
  // Field: FindPath_PathNotFound
  //
  // (Value: 3) The FindPath method failed to locate a directory or file with the name you specified.
  //
  FindPath_PathNotFound = 3;
  // Field: FindPath_PathNotValid
  //
  // (Value: 4) The pathname you passed to the FindPath method is not valid.
  //
  FindPath_PathNotValid = 4;
}

// StepGroups
//
// This data type contains values that specify the step group of a sequence.
//
enum StepGroups {
  // Field: StepGroup_Setup
  //
  // (Value: 0) Specifies the Setup step group.
  //
  StepGroup_Setup = 0;
  // Field: StepGroup_Main
  //
  // (Value: 1) Specifies the Main step group.
  //
  StepGroup_Main = 1;
  // Field: StepGroup_Cleanup
  //
  // (Value: 2) Specifies the Cleanup step group.
  //
  StepGroup_Cleanup = 2;
}

// TSError
//
// These are the error values the TestStand ActiveX API can return. Refer to the error message TestStand returns for a detailed description of why the error occurred. Whenever a method or property in the TestStand API fails, check the TSError code for the application development environment, as follows:
// LabWindows/CVI
// If the HRESULT for an API function is equal to DISP_E_EXCEPTION, check the value of the sCode member of the ERRORINFO structure. If the HRESULT is not equal to DISP_E_EXCEPTION, the error is not a TSError. You can use the value of the HRESULT to determine the type of error.
// LabVIEW
// Check the value of the code number in the "error out" cluster.
// Microsoft Visual C/C++ using #import
// Use the Error() method of the _com_error class to obtain the error code.
// Microsoft Visual Basic .NET
// Check the value of ErrorCode from the COMException class in a Try/Catch block to obtain the error code as follows:Try...Catch exception As COMException     MessageBox.Show ("Error " + exception.ErrorCode.ToString() + ": " + exception.Message)EndIf
// C#
// Check the value of ErrorCode from the COMException class in a Try/Catch block to obtain the error code as follows:try {...}catch (COMException exception) {     MessageBox.Show ("Error " + exception.ErrorCode.ToString() + ": " + exception.Message);}
// The following error codes are listed alphabetically. Press <Ctrl-F> to search for the error code value.
//
enum TSError {
  // Field: TS_Err_NoError
  //
  // (Value: 0)
  //
  TS_Err_NoError = 0;
  // Field: TS_Err_DNAssemblyMissing
  //
  // (Value: -18700)
  //
  TS_Err_DNAssemblyMissing = -18700;
  // Field: TS_Err_XMLError
  //
  // (Value: -18600)
  //
  TS_Err_XMLError = -18600;
  // Field: TS_Err_LV_NXG_AutoBuildError
  //
  // (Value: -18526)
  //
  TS_Err_LV_NXG_AutoBuildError = -18526;
  // Field: TS_Err_LV_NXG_RTEDllNotLoaded
  //
  // (Value: -18525)
  //
  TS_Err_LV_NXG_RTEDllNotLoaded = -18525;
  // Field: TS_Err_LV_NXG_TypeConversionError
  //
  // (Value: -18524)
  //
  TS_Err_LV_NXG_TypeConversionError = -18524;
  // Field: TS_Err_LV_NXG_RunTimeEngineError
  //
  // (Value: -18523)
  //
  TS_Err_LV_NXG_RunTimeEngineError = -18523;
  // Field: TS_Err_LV_NXG_MissingRequiredArg
  //
  // (Value: -18522)
  //
  TS_Err_LV_NXG_MissingRequiredArg = -18522;
  // Field: TS_Err_LV_NXG_ReportedError
  //
  // (Value: -18521)
  //
  TS_Err_LV_NXG_ReportedError = -18521;
  // Field: TS_Err_LV_NXG_AutoServerError
  //
  // (Value: -18520)
  //
  TS_Err_LV_NXG_AutoServerError = -18520;
  // Field: TS_Err_VisualStudioAutomationError
  //
  // (Value: -18500)
  //
  TS_Err_VisualStudioAutomationError = -18500;
  // Field: TS_Err_MethodOrPropertyNotAvailable
  //
  // (Value: -18400)
  //
  TS_Err_MethodOrPropertyNotAvailable = -18400;
  // Field: TS_Err_MeasStudioInterfaceNotFound
  //
  // (Value: -18390)
  //
  TS_Err_MeasStudioInterfaceNotFound = -18390;
  // Field: TS_Err_WatchExpressionError
  //
  // (Value: -18380)
  //
  TS_Err_WatchExpressionError = -18380;
  // Field: TS_Err_SourceCodeControlError
  //
  // (Value: -18370)
  //
  TS_Err_SourceCodeControlError = -18370;
  // Field: TS_Err_DoesNotHaveRequiredPrivilege
  //
  // (Value: -18360)
  //
  TS_Err_DoesNotHaveRequiredPrivilege = -18360;
  // Field: TS_Err_TypeLibraryReadError
  //
  // (Value: -18351)
  //
  TS_Err_TypeLibraryReadError = -18351;
  // Field: TS_Err_FailToRegisterClipFormat
  //
  // (Value: -18251)
  //
  TS_Err_FailToRegisterClipFormat = -18251;
  // Field: TS_Err_AdapterServerConnectionLost
  //
  // (Value: -18202)
  //
  TS_Err_AdapterServerConnectionLost = -18202;
  // Field: TS_Err_AdapterNoConnectToAutoServer
  //
  // (Value: -18201)
  //
  TS_Err_AdapterNoConnectToAutoServer = -18201;
  // Field: TS_Err_NoFileAssoc
  //
  // (Value: -18151)
  //
  TS_Err_NoFileAssoc = -18151;
  // Field: TS_Err_DDEFail
  //
  // (Value: -18101)
  //
  TS_Err_DDEFail = -18101;
  // Field: TS_Err_RStringNotFound
  //
  // (Value: -18051)
  //
  TS_Err_RStringNotFound = -18051;
  // Field: TS_Err_LVTypeConversionError
  //
  // (Value: -18005)
  //
  TS_Err_LVTypeConversionError = -18005;
  // Field: TS_Err_LVRunTimeEngineError
  //
  // (Value: -18004)
  //
  TS_Err_LVRunTimeEngineError = -18004;
  // Field: TS_Err_LVMissingRequiredArg
  //
  // (Value: -18003)
  //
  TS_Err_LVMissingRequiredArg = -18003;
  // Field: TS_Err_LVReportedError
  //
  // (Value: -18002)
  //
  TS_Err_LVReportedError = -18002;
  // Field: TS_Err_LVAutoServerError
  //
  // (Value: -18001)
  //
  TS_Err_LVAutoServerError = -18001;
  // Field: TS_Err_TypePaletteFileLoadErrors
  //
  // (Value: 17902)
  //
  TS_Err_TypePaletteFileLoadErrors = -17902;
  // Field: TS_Err_FileNotConvertableToSeqFile
  //
  // (Value: -17901)
  //
  TS_Err_FileNotConvertableToSeqFile = -17901;
  // Field: TS_Err_RemoteHostNotSpecified
  //
  // (Value: -17853)
  //
  TS_Err_RemoteHostNotSpecified = -17853;
  // Field: TS_Err_RemoteSequenceRemoteExecutionDenied
  //
  // (Value: -17852)
  //
  TS_Err_RemoteSequenceRemoteExecutionDenied = -17852;
  // Field: TS_Err_RemoteSequenceErrorUnableToConnect
  //
  // (Value: -17851)
  //
  TS_Err_RemoteSequenceErrorUnableToConnect = -17851;
  // Field: TS_Err_RemoteSequenceError
  //
  // (Value: -17850)
  //
  TS_Err_RemoteSequenceError = -17850;
  // Field: TS_Err_DispObsoleteMember
  //
  // (Value: -17812)
  //
  TS_Err_DispObsoleteMember = -17812;
  // Field: TS_Err_ActiveXAutomationServerException
  //
  // (Value: -17811)
  //
  TS_Err_ActiveXAutomationServerException = -17811;
  // Field: TS_Err_AutomationObjNotValid
  //
  // (Value: -17810)
  //
  TS_Err_AutomationObjNotValid = -17810;
  // Field: TS_Err_DispMissingRequiredArg
  //
  // (Value: -17809)
  //
  TS_Err_DispMissingRequiredArg = -17809;
  // Field: TS_Err_DispWrongNumPositionalParams
  //
  // (Value: -17808)
  //
  TS_Err_DispWrongNumPositionalParams = -17808;
  // Field: TS_Err_DispMissingParamID
  //
  // (Value: -17807)
  //
  TS_Err_DispMissingParamID = -17807;
  // Field: TS_Err_DispMissingParamName
  //
  // (Value: -17806)
  //
  TS_Err_DispMissingParamName = -17806;
  // Field: TS_Err_DispUnknownParamID
  //
  // (Value: -17805)
  //
  TS_Err_DispUnknownParamID = -17805;
  // Field: TS_Err_DispUnknownParamName
  //
  // (Value: -17804)
  //
  TS_Err_DispUnknownParamName = -17804;
  // Field: TS_Err_DispUnknownMemberID
  //
  // (Value: -17803)
  //
  TS_Err_DispUnknownMemberID = -17803;
  // Field: TS_Err_DispUnknownMemberName
  //
  // (Value: -17802)
  //
  TS_Err_DispUnknownMemberName = -17802;
  // Field: TS_Err_DispUnknownInterface
  //
  // (Value: -17801)
  //
  TS_Err_DispUnknownInterface = -17801;
  // Field: TS_Err_CVIVersionNotSupported
  //
  // (Value: -17714)
  //
  TS_Err_CVIVersionNotSupported = -17714;
  // Field: TS_Err_CVINonDllModuleNotSupported
  //
  // (Value: -17713)
  //
  TS_Err_CVINonDllModuleNotSupported = -17713;
  // Field: TS_Err_CVIUnableToTerminateUserProgInCVI
  //
  // (Value: -17712)
  //
  TS_Err_CVIUnableToTerminateUserProgInCVI = -17712;
  // Field: TS_Err_CVICantConnectToTecrunServer
  //
  // (Value: -17711)
  //
  TS_Err_CVICantConnectToTecrunServer = -17711;
  // Field: TS_Err_CVIFuncNotFoundInModule
  //
  // (Value: -17710)
  //
  TS_Err_CVIFuncNotFoundInModule = -17710;
  // Field: TS_Err_CVIModuleHasUnresolvedReferences
  //
  // (Value: -17709)
  //
  TS_Err_CVIModuleHasUnresolvedReferences = -17709;
  // Field: TS_Err_CVIRegGenericReadError
  //
  // (Value: -17708)
  //
  TS_Err_CVIRegGenericReadError = -17708;
  // Field: TS_Err_CVIRegKeyNotFound
  //
  // (Value: -17707)
  //
  TS_Err_CVIRegKeyNotFound = -17707;
  // Field: TS_Err_CVIRegValueNotFound
  //
  // (Value: -17706)
  //
  TS_Err_CVIRegValueNotFound = -17706;
  // Field: TS_Err_CVIRegValueTypeMismatch
  //
  // (Value: -17705)
  //
  TS_Err_CVIRegValueTypeMismatch = -17705;
  // Field: TS_Err_CVIAutoCmdFailed
  //
  // (Value: -17704)
  //
  TS_Err_CVIAutoCmdFailed = -17704;
  // Field: TS_Err_CVINotReg
  //
  // (Value: -17703)
  //
  TS_Err_CVINotReg = -17703;
  // Field: TS_Err_CVIOleError
  //
  // (Value: -17702)
  //
  TS_Err_CVIOleError = -17702;
  // Field: TS_Err_UnableToLaunchCVI
  //
  // (Value: -17701)
  //
  TS_Err_UnableToLaunchCVI = -17701;
  // Field: TS_Err_OperationCanceled
  //
  // (Value: -17604)
  //
  TS_Err_OperationCanceled = -17604;
  // Field: TS_Err_SequenceTerminated
  //
  // (Value: -17603)
  //
  TS_Err_SequenceTerminated = -17603;
  // Field: TS_Err_SequenceAborted
  //
  // (Value: -17602)
  //
  TS_Err_SequenceAborted = -17602;
  // Field: TS_Err_ModuleNotSpecified
  //
  // (Value: -17601)
  //
  TS_Err_ModuleNotSpecified = -17601;
  // Field: TS_Err_ModuleLoadFailure
  //
  // (Value: -17600)
  //
  TS_Err_ModuleLoadFailure = -17600;
  // Field: TS_Err_NotSupported
  //
  // (Value: -17503)
  //
  TS_Err_NotSupported = -17503;
  // Field: TS_Err_OS_Exception
  //
  // (Value: -17502)
  //
  TS_Err_OS_Exception = -17502;
  // Field: TS_Err_UnexpectedSystemError
  //
  // (Value: -17501)
  //
  TS_Err_UnexpectedSystemError = -17501;
  // Field: TS_Err_OperationFailed
  //
  // (Value: -17500)
  //
  TS_Err_OperationFailed = -17500;
  // Field: TS_Err_OperationTimedOut
  //
  // (Value: -17402)
  //
  TS_Err_OperationTimedOut = -17402;
  // Field: TS_Err_OperationInProgress
  //
  // (Value: -17401)
  //
  TS_Err_OperationInProgress = -17401;
  // Field: TS_Err_ThreadCreationFailed
  //
  // (Value: -17400)
  //
  TS_Err_ThreadCreationFailed = -17400;
  // Field: TS_Err_UnexpectedChangeCount
  //
  // (Value: -17351)
  //
  TS_Err_UnexpectedChangeCount = -17351;
  // Field: TS_Err_EvaluateFunctionEmptyExpressionError
  //
  // (Value: -17350)
  //
  TS_Err_EvaluateFunctionEmptyExpressionError = -17350;
  // Field: TS_Err_ObjectLocked
  //
  // (Value: -17349)
  //
  TS_Err_ObjectLocked = -17349;
  // Field: TS_Err_MismatchedItems
  //
  // (Value: -17348)
  //
  TS_Err_MismatchedItems = -17348;
  // Field: TS_Err_EmptyExpressionError
  //
  // (Value: -17347)
  //
  TS_Err_EmptyExpressionError = -17347;
  // Field: TS_Err_InvalidPointer
  //
  // (Value: -17346)
  //
  TS_Err_InvalidPointer = -17346;
  // Field: TS_Err_ArrayDimensionSizeExpected
  //
  // (Value: -17345)
  //
  TS_Err_ArrayDimensionSizeExpected = -17345;
  // Field: TS_Err_ArrayDimensionExpected
  //
  // (Value: -17344)
  //
  TS_Err_ArrayDimensionExpected = -17344;
  // Field: TS_Err_ArrayTypeExpected
  //
  // (Value: -17343)
  //
  TS_Err_ArrayTypeExpected = -17343;
  // Field: TS_Err_InvalidRegularExpression
  //
  // (Value: -17342)
  //
  TS_Err_InvalidRegularExpression = -17342;
  // Field: TS_Err_LabVIEWTypeNotSupportedInCVI
  //
  // (Value: -17341)
  //
  TS_Err_LabVIEWTypeNotSupportedInCVI = -17341;
  // Field: TS_Err_TwoDimensionalNumericArrayExpected
  //
  // (Value: -17340)
  //
  TS_Err_TwoDimensionalNumericArrayExpected = -17340;
  // Field: TS_Err_ReadObjectNotFound
  //
  // (Value: -17339)
  //
  TS_Err_ReadObjectNotFound = -17339;
  // Field: TS_Err_LVRTDllNotLoaded
  //
  // (Value: -17338)
  //
  TS_Err_LVRTDllNotLoaded = -17338;
  // Field: TS_Err_StepTypeNotFound
  //
  // (Value: -17337)
  //
  TS_Err_StepTypeNotFound = -17337;
  // Field: TS_Err_InvalidAdapterName
  //
  // (Value: -17336)
  //
  TS_Err_InvalidAdapterName = -17336;
  // Field: TS_Err_ObjectCannotBeAdded
  //
  // (Value: -17335)
  //
  TS_Err_ObjectCannotBeAdded = -17335;
  // Field: TS_Err_TypeWithDependingInstancesCannotBeDeleted
  //
  // (Value: -17334)
  //
  TS_Err_TypeWithDependingInstancesCannotBeDeleted = -17334;
  // Field: TS_Err_TypeCannotBeDeleted
  //
  // (Value: -17333)
  //
  TS_Err_TypeCannotBeDeleted = -17333;
  // Field: TS_Err_ObjectTypeIncompatibleWithParameter
  //
  // (Value: -17332)
  //
  TS_Err_ObjectTypeIncompatibleWithParameter = -17332;
  // Field: TS_Err_ItemCannotBeDeleted
  //
  // (Value: -17331)
  //
  TS_Err_ItemCannotBeDeleted = -17331;
  // Field: TS_Err_CurrentSeqFileNotAvailable
  //
  // (Value: -17330)
  //
  TS_Err_CurrentSeqFileNotAvailable = -17330;
  // Field: TS_Err_TypeConflict
  //
  // (Value: -17329)
  //
  TS_Err_TypeConflict = -17329;
  // Field: TS_Err_MissingType
  //
  // (Value: -17328)
  //
  TS_Err_MissingType = -17328;
  // Field: TS_Err_NameAlreadyInUse
  //
  // (Value: -17327)
  //
  TS_Err_NameAlreadyInUse = -17327;
  // Field: TS_Err_MismatchedArrayBounds
  //
  // (Value: -17326)
  //
  TS_Err_MismatchedArrayBounds = -17326;
  // Field: TS_Err_WrongNumberOfArrayIndices
  //
  // (Value: -17325)
  //
  TS_Err_WrongNumberOfArrayIndices = -17325;
  // Field: TS_Err_ArrayIndexOutOfBounds
  //
  // (Value: -17324)
  //
  TS_Err_ArrayIndexOutOfBounds = -17324;
  // Field: TS_Err_OperationOnlyValidWhenSuspended
  //
  // (Value: -17323)
  //
  TS_Err_OperationOnlyValidWhenSuspended = -17323;
  // Field: TS_Err_BadExpressionError
  //
  // (Value: -17322)
  //
  TS_Err_BadExpressionError = -17322;
  // Field: TS_Err_TypeMismatchError
  //
  // (Value: -17321)
  //
  TS_Err_TypeMismatchError = -17321;
  // Field: TS_Err_UnknownFunctionOrSequenceName
  //
  // (Value: -17320)
  //
  TS_Err_UnknownFunctionOrSequenceName = -17320;
  // Field: TS_Err_BadPropertyOrVariableName
  //
  // (Value: -17319)
  //
  TS_Err_BadPropertyOrVariableName = -17319;
  // Field: TS_Err_LValueExpected
  //
  // (Value: -17318)
  //
  TS_Err_LValueExpected = -17318;
  // Field: TS_Err_SingleDimensionalNumericArrayExpected
  //
  // (Value: -17317)
  //
  TS_Err_SingleDimensionalNumericArrayExpected = -17317;
  // Field: TS_Err_EvaluationContextNotAvailable
  //
  // (Value: -17316)
  //
  TS_Err_EvaluationContextNotAvailable = -17316;
  // Field: TS_Err_WrongNumberOfParameters
  //
  // (Value: -17315)
  //
  TS_Err_WrongNumberOfParameters = -17315;
  // Field: TS_Err_ExprValueNotSuperSetOfParameter
  //
  // (Value: -17314)
  //
  TS_Err_ExprValueNotSuperSetOfParameter = -17314;
  // Field: TS_Err_ExprTypeIncompatibleWithParameter
  //
  // (Value: -17313)
  //
  TS_Err_ExprTypeIncompatibleWithParameter = -17313;
  // Field: TS_Err_UnableToPassByReference
  //
  // (Value: -17312)
  //
  TS_Err_UnableToPassByReference = -17312;
  // Field: TS_Err_IncompatibleParameters
  //
  // (Value: -17311)
  //
  TS_Err_IncompatibleParameters = -17311;
  // Field: TS_Err_ArrayLocked
  //
  // (Value: -17310)
  //
  TS_Err_ArrayLocked = -17310;
  // Field: TS_Err_IllegalOperationOnValue
  //
  // (Value: -17309)
  //
  TS_Err_IllegalOperationOnValue = -17309;
  // Field: TS_Err_UnexpectedType
  //
  // (Value: -17308)
  //
  TS_Err_UnexpectedType = -17308;
  // Field: TS_Err_UnknownType
  //
  // (Value: -17307)
  //
  TS_Err_UnknownType = -17307;
  // Field: TS_Err_UnknownVariableOrProperty
  //
  // (Value: -17306)
  //
  TS_Err_UnknownVariableOrProperty = -17306;
  // Field: TS_Err_DuplicateItemOrValue
  //
  // (Value: -17305)
  //
  TS_Err_DuplicateItemOrValue = -17305;
  // Field: TS_Err_UnRecognizedValue
  //
  // (Value: -17304)
  //
  TS_Err_UnRecognizedValue = -17304;
  // Field: TS_Err_TooManyItems
  //
  // (Value: -17303)
  //
  TS_Err_TooManyItems = -17303;
  // Field: TS_Err_NoItemsInList
  //
  // (Value: -17302)
  //
  TS_Err_NoItemsInList = -17302;
  // Field: TS_Err_IndexOutOfRange
  //
  // (Value: -17301)
  //
  TS_Err_IndexOutOfRange = -17301;
  // Field: TS_Err_ValueIsInvalidOrOutOfRange
  //
  // (Value: -17300)
  //
  TS_Err_ValueIsInvalidOrOutOfRange = -17300;
  // Field: TS_Err_UnexpectedEndOfFile
  //
  // (Value: -17216)
  //
  TS_Err_UnexpectedEndOfFile = -17216;
  // Field: TS_Err_UnableToOpenDirectory
  //
  // (Value: -17215)
  //
  TS_Err_UnableToOpenDirectory = -17215;
  // Field: TS_Err_MemoryChecking
  //
  // (Value: -17214)
  //
  TS_Err_MemoryChecking = -17214;
  // Field: TS_Err_UnableToCloseFile
  //
  // (Value: -17213)
  //
  TS_Err_UnableToCloseFile = -17213;
  // Field: TS_Err_PathNotFound
  //
  // (Value: -17212)
  //
  TS_Err_PathNotFound = -17212;
  // Field: TS_Err_InvalidDrive
  //
  // (Value: -17211)
  //
  TS_Err_InvalidDrive = -17211;
  // Field: TS_Err_WriteProtected
  //
  // (Value: -17210)
  //
  TS_Err_WriteProtected = -17210;
  // Field: TS_Err_SharingViolation
  //
  // (Value: -17209)
  //
  TS_Err_SharingViolation = -17209;
  // Field: TS_Err_FileWasNotFound
  //
  // (Value: -17208)
  //
  TS_Err_FileWasNotFound = -17208;
  // Field: TS_Err_DiskFull
  //
  // (Value: -17207)
  //
  TS_Err_DiskFull = -17207;
  // Field: TS_Err_FileAlreadyExists
  //
  // (Value: -17206)
  //
  TS_Err_FileAlreadyExists = -17206;
  // Field: TS_Err_AccessDenied
  //
  // (Value: -17205)
  //
  TS_Err_AccessDenied = -17205;
  // Field: TS_Err_InvalidPathname
  //
  // (Value: -17204)
  //
  TS_Err_InvalidPathname = -17204;
  // Field: TS_Err_DriveNotReady
  //
  // (Value: -17203)
  //
  TS_Err_DriveNotReady = -17203;
  // Field: TS_Err_BadNetPath
  //
  // (Value: -17202)
  //
  TS_Err_BadNetPath = -17202;
  // Field: TS_Err_UnableToOpenFile
  //
  // (Value: -17201)
  //
  TS_Err_UnableToOpenFile = -17201;
  // Field: TS_Err_IOError
  //
  // (Value: -17200)
  //
  TS_Err_IOError = -17200;
  // Field: TS_Err_BadFileFormat
  //
  // (Value: -17100)
  //
  TS_Err_BadFileFormat = -17100;
  // Field: TS_Err_FileFormatIsOutOfDate
  //
  // (Value: -17099)
  //
  TS_Err_FileFormatIsOutOfDate = -17099;
  // Field: TS_Err_FileFormatNewerThanCurrentVersion
  //
  // (Value: -17098)
  //
  TS_Err_FileFormatNewerThanCurrentVersion = -17098;
  // Field: TS_Err_UInt64Overflow
  //
  // (Value: -17014)
  //
  TS_Err_UInt64Overflow = -17014;
  // Field: TS_Err_Int64Overflow
  //
  // (Value: -17013)
  //
  TS_Err_Int64Overflow = -17013;
  // Field: TS_Err_ExternalServerUnavailable
  //
  // (Value: -17012)
  //
  TS_Err_ExternalServerUnavailable = -17012;
  // Field: TS_Err_UInt32Overflow
  //
  // (Value: -17011)
  //
  TS_Err_UInt32Overflow = -17011;
  // Field: TS_Err_Int32Overflow
  //
  // (Value: -17010)
  //
  TS_Err_Int32Overflow = -17010;
  // Field: TS_Err_ConvertedErrorCode
  //
  // (Value: -17009)
  //
  TS_Err_ConvertedErrorCode = -17009;
  // Field: TS_Err_StackOverflow
  //
  // (Value: -17008)
  //
  TS_Err_StackOverflow = -17008;
  // Field: TS_Err_UnableToInitializeOLESystemDLLs
  //
  // (Value: -17007)
  //
  TS_Err_UnableToInitializeOLESystemDLLs = -17007;
  // Field: TS_Err_UnableToAllocateSystemResource
  //
  // (Value: -17006)
  //
  TS_Err_UnableToAllocateSystemResource = -17006;
  // Field: TS_Err_FunctionNotFoundInLib
  //
  // (Value: -17005)
  //
  TS_Err_FunctionNotFoundInLib = -17005;
  // Field: TS_Err_DLLNotLoadable
  //
  // (Value: -17004)
  //
  TS_Err_DLLNotLoadable = -17004;
  // Field: TS_Err_RegistryItemNotFound
  //
  // (Value: -17003)
  //
  TS_Err_RegistryItemNotFound = -17003;
  // Field: TS_Err_RegistryAccessError
  //
  // (Value: -17002)
  //
  TS_Err_RegistryAccessError = -17002;
  // Field: TS_Err_ProgramError
  //
  // (Value: -17001)
  //
  TS_Err_ProgramError = -17001;
  // Field: TS_Err_OutOfMemory
  //
  // (Value: -17000)
  //
  TS_Err_OutOfMemory = -17000;
}

// ModuleLoadOptions
//
// Use these constants to set the sequence file and step code module options that control when TestStand loads code modules and subsequence files. When you use one of these constants with the SequenceFile.ModuleLoadOption property, it applies to all steps in the sequence file. When you use one of these constants with the Step.ModuleLoadOption property, it applies to a particular step. When you use one of these constants with the StepType.ModuleLoadOption property, it applies to subsequent steps of this type.
//
enum ModuleLoadOptions {
  ModuleLoadOptions_reservedZero = 0;
  // Field: LoadOption_PreloadWhenOpened
  //
  // (Value: 1) Loads the code module for a step when TestStand loads the sequence file containing the step into memory.
  //
  LoadOption_PreloadWhenOpened = 1;
  // Field: LoadOption_PreloadWhenExecuted
  //
  // (Value: 2) Loads the code module for a step when any sequence in the sequence file containing the step begins executing.
  //
  LoadOption_PreloadWhenExecuted = 2;
  // Field: LoadOption_DynamicLoad
  //
  // (Value: 3) Does not load the code module for a step until the step is ready to call it.
  //
  LoadOption_DynamicLoad = 3;
  // Field: LoadOption_UseStepLoadOption
  //
  // (Value: 4) Loads each code module according to the load option for the step that uses it. This option is valid only for the SequenceFile.ModuleLoadOption property.
  //
  LoadOption_UseStepLoadOption = 4;
}

// ModuleUnloadOptions
//
// Use these constants to set the sequence file and step code module options that control when TestStand unloads code modules and subsequence files. When you use one of these constants with the SequenceFile.ModuleUnloadOption property, it applies to all steps in the sequence file. When you use one of these constants with the Step.ModuleUnloadOption property, it applies to a particular step. When you use one of these constants with the StepType.ModuleUnloadOption property, it applies to subsequent steps of this type.
//
enum ModuleUnloadOptions {
  ModuleUnloadOptions_reservedZero = 0;
  // Field: UnloadOption_OnPreconditionFailure
  //
  // (Value: 1) Unloads the code module for a step if the precondition for the step evaluates to False.
  //
  UnloadOption_OnPreconditionFailure = 1;
  // Field: UnloadOption_AfterStepExecution
  //
  // (Value: 2) Unloads the code module for a step after the step finishes executing.
  //
  UnloadOption_AfterStepExecution = 2;
  // Field: UnloadOption_AfterSequenceExecution
  //
  // (Value: 3) Unloads the code module for a step after the sequence containing the step finishes executing.
  //
  UnloadOption_AfterSequenceExecution = 3;
  // Field: UnloadOption_WithSequenceFile
  //
  // (Value: 4) Unloads the code module for a step when TestStand unloads the sequence file from memory that contains the step.
  //
  UnloadOption_WithSequenceFile = 4;
  // Field: UnloadOption_UseStepUnloadOption
  //
  // (Value: 5) Unloads the code module for a step according to the unload option for the step. This option is valid only for the SequenceFile.ModuleUnloadOption property.
  //
  UnloadOption_UseStepUnloadOption = 5;
}

// ModelOptions
//
// Use these constants with the SequenceFile.ModelOption property.
//
enum ModelOptions {
  // Field: ModelOption_UseStationModel
  //
  // (Value: 0) Instructs TestStand to use the process model file the Station Model option on the Model tab of the Station Options dialog box specifies.
  //
  ModelOption_UseStationModel = 0;
  // Field: ModelOption_NoModel
  //
  // (Value: 1) Specifies that the sequence file does not use a process model.
  //
  ModelOption_NoModel = 1;
  // Field: ModelOption_RequireSpecificModel
  //
  // (Value: 2) Specifies a particular process model file. If you select this value, you must use the SequenceFile.ModelPath property to specify the location of the process model file.
  //
  ModelOption_RequireSpecificModel = 2;
}

// EvalPrecondOptions
//
// Use these constants to specify the EvalPrecondOptions parameter of the Step.EvalPrecondForInteractiveExecution and StepType.EvalPrecondForInteractiveExecution properties.
//
enum EvalPrecondOptions {
  // Field: EvalPrecondOption_UseStationOption
  //
  // (Value: 0) Uses the Evaluate Preconditions in Interactive Mode option on the Execution tab of the Station Options dialog box.
  //
  EvalPrecondOption_UseStationOption = 0;
  // Field: EvalPrecondOption_EvaluatePrecond
  //
  // (Value: 1) Evaluates the precondition.
  //
  EvalPrecondOption_EvaluatePrecond = 1;
  // Field: EvalPrecondOption_NoEvaluatePrecond
  //
  // (Value: 2) Does not evaluate the precondition.
  //
  EvalPrecondOption_NoEvaluatePrecond = 2;
}

// WindowActivationOptions
//
// Use these constants as the values of the Step.WindowActivation and StepType.WindowActivation properties.
//
enum WindowActivationOptions {
  WindowActivationOptions_reservedZero = 0;
  // Field: WinActOption_None
  //
  // (Value: 1) No activation.
  //
  WinActOption_None = 1;
  // Field: WinActOption_ActivateWhenStepCompletes
  //
  // (Value: 2) Activate when the step completes.
  //
  WinActOption_ActivateWhenStepCompletes = 2;
  // Field: WinActOption_IfActiveReactivateWhenStepCompletes
  //
  // (Value: 3) If initially active, reactivate when the step completes.
  //
  WinActOption_IfActiveReactivateWhenStepCompletes = 3;
}

// BatchSynchronizationOptions
//
// Use these constants with the Step.BatchSyncOption and StepType.BatchSyncOption properties.
//
enum BatchSynchronizationOptions {
  // Field: BatchSyncOption_UseSeqFileSetting
  //
  // (Value: 0) Uses the same option the sequence file is using.
  //
  BatchSyncOption_UseSeqFileSetting = 0;
  // Field: BatchSyncOption_UseModelSetting
  //
  // (Value: 1) Uses the same option the model is using.
  //
  BatchSyncOption_UseModelSetting = 1;
  // Field: BatchSyncOption_NoSync
  //
  // (Value: 2) No batch synchronization is used on this step.
  //
  BatchSyncOption_NoSync = 2;
  // Field: BatchSyncOption_Serial
  //
  // (Value: 3) Use a Serial section to ensure that each thread in the batch executes a single step sequentially or the steps in a section sequentially and in the order you specified when you created the batch. When all threads in a batch arrive at their respective instances of a single step or an Enter step for a Serial section, TestStand releases one thread at a time in ascending order according to the order number you assign to threads when you added them to the batch using the Batch Specification step type. As each thread executes the single step or reaches the Exit step for the section, the next thread in the batch executes the single step or proceeds from the Enter step. After all threads in the batch execute the single step or arrive at the Exit step, they continue and exit the section together.
  //
  BatchSyncOption_Serial = 3;
  // Field: BatchSyncOption_Parallel
  //
  // (Value: 4) When all threads in the batch arrive at their respective instances of a single step or an Enter step for a Parallel section, TestStand releases all the threads at once. Each thread blocks after executing the single step or after reaching the Exit step for the section until all threads can continue and exit the section together.
  //
  BatchSyncOption_Parallel = 4;
  // Field: BatchSyncOption_OneThreadOnly
  //
  // (Value: 5) Use a One Thread Only section to specify that only one thread in the batch executes the single step or the steps in the section. Typically, you use this type of section to perform an operation that applies to the batch as a whole, such as raising the temperature in a test chamber. When all threads in a batch arrive at their respective instances of the single step or an Enter step for a One Thread Only section, TestStand releases only the thread with the lowest order number. When that thread executes the single step or arrives at the Exit step for the section, all remaining threads in the batch skip the single step or jump from the Enter step to the Exit step, skipping steps within the section. The threads in the batch then continue and exit the section together.
  //
  BatchSyncOption_OneThreadOnly = 5;
}

// SeqFileBatchSynchronizationOptions
//
// This data type contains values that specify the type of batch synchronization. The constants represent the possible values for the SequenceFile.BatchSyncOption property.
//
enum SeqFileBatchSynchronizationOptions {
  SeqFileBatchSynchronizationOptions_reservedZero = 0;
  // Field: SeqFileBatchSyncOption_UseModelSetting
  //
  // (Value: 1) Uses the same option the model uses.
  //
  SeqFileBatchSyncOption_UseModelSetting = 1;
  // Field: SeqFileBatchSyncOption_NoSync
  //
  // (Value: 2) Batch synchronization is not used on this step.
  //
  SeqFileBatchSyncOption_NoSync = 2;
  // Field: SeqFileBatchSyncOption_Serial
  //
  // (Value: 3) Use a Serial section to ensure that each thread in the batch executes the steps in the section sequentially and in the order you specify when you create the batch. When all threads in a batch arrive at their respective instances of an Enter step for a Serial section, TestStand releases one thread at a time in ascending order according to the order number you assign to the threads when you add them to the batch using the Batch Specification step. As each thread reaches the Exit step for the section, the next thread in the batch proceeds from the Enter step. After all the threads in the batch arrive at the Exit step, they exit the section together.
  //
  SeqFileBatchSyncOption_Serial = 3;
  // Field: SeqFileBatchSyncOption_Parallel
  //
  // (Value: 4) When all threads in a batch arrive at their respective instances of an Enter step for a Parallel section, TestStand releases all the threads at once. Each thread waits at the Exit step for the section until all threads in the batch reach that step.
  //
  SeqFileBatchSyncOption_Parallel = 4;
  // Field: SeqFileBatchSyncOption_OneThreadOnly
  //
  // (Value: 5) Use a One Thread Only section to specify that only one thread in the batch executes the step in the section. Typically, you use this type of section to perform an operation that applies to the batch as a whole, such as raising the temperature in a test chamber. When all threads in a batch arrive at their respective instances of an Enter step for a One Thread Only section, TestStand releases only the thread with the lowest Order Number. When that thread arrives at Exit step for the section, all remaining threads in the batch jump from the Enter step to the Exit step, skipping the steps within the section. The threads in the batch then exit the section together.
  //
  SeqFileBatchSyncOption_OneThreadOnly = 5;
}

// LicenseTypes
//
// Use these constants with the Engine.LicenseType property to determine the type of license the TestStand Engine is using.
//
enum LicenseTypes {
  LicenseTypes_reservedZero = 0;
  // Field: LicenseType_DevelopmentSystem
  //
  // (Value: 1) Indicates that TestStand is using a TestStand Development System License.
  //
  LicenseType_DevelopmentSystem = 1;
  // Field: LicenseType_DebugDeploymentEnv
  //
  // (Value: 2) Indicates that TestStand is using a TestStand Debug Deployment Environment License.
  //
  LicenseType_DebugDeploymentEnv = 2;
  // Field: LicenseType_BaseDeploymentEngine
  //
  // (Value: 3) Indicates that TestStand is using a TestStand Base Deployment Engine License.
  //
  LicenseType_BaseDeploymentEngine = 3;
  // Field: LicenseType_OEM
  //
  // (Value: 4) Indicates that TestStand is using an OEM license.
  //
  LicenseType_OEM = 4;
  // Field: LicenseType_Evaluation
  //
  // (Value: 5) Indicates that TestStand is using an Evaluation license.
  //
  LicenseType_Evaluation = 5;
  // Field: LicenseType_NoLicense
  //
  // (Value: 6) Indicates that TestStand is using no license.
  //
  LicenseType_NoLicense = 6;
  // Field: LicenseType_Temporary
  //
  // (Value: 7) Indicates that TestStand is using a temporary license. TestStand acquires a temporary license when NI License Manager cannot access the Volume License server.
  //
  LicenseType_Temporary = 7;
  // Field: LicenseType_Other
  //
  // (Value: 8) Indicates that TestStand cannot determine the type of license.
  //
  LicenseType_Other = 8;
  // Field: LicenseType_CustomEditorDeployment
  //
  // (Value: 9) Indicates that TestStand is using a TestStand Custom Sequence Editor License.
  //
  LicenseType_CustomEditorDeployment = 9;
}

// SwitchExecOperations
//
// This data type contains values that specify a switch connection operation. Use the values of this enumeration with the Step.SwitchExecOperation and StepType.SwitchExecOperation properties.
//
enum SwitchExecOperations {
  SwitchExecOperations_reservedZero = 0;
  // Field: SwitchExecOperation_Connect
  //
  // (Value: 1) Creates the paths for the specified routes in the Step.SwitchExecRoutesToConnect property.
  //
  SwitchExecOperation_Connect = 1;
  // Field: SwitchExecOperation_Disconnect
  //
  // (Value: 2) Destroys the paths the specified routes define in the Step.SwitchExecRoutesToDisconnect property.
  //
  SwitchExecOperation_Disconnect = 2;
  // Field: SwitchExecOperation_DisconnectAll
  //
  // (Value: 3) Disconnects all previously created paths.
  //
  SwitchExecOperation_DisconnectAll = 3;
  // Field: SwitchExecOperation_ConnectDisconnect
  //
  // (Value: 4) Creates the paths for the routes specified in the Step.SwitchExecRoutesToConnect property and destroys the paths for the routes specified in the Step.SwitchExecRoutesToDisconnect property. Use the Step.SwitchExecOperationOrder property to specify whether the Disconnect operation occurs before or after the Connect operation.
  //
  SwitchExecOperation_ConnectDisconnect = 4;
}

// SwitchExecOperationOrders
//
// This data type contains values that specify whether the Disconnect operation occurs before or after the Connect operation. Use the values of this enumeration with the Step.SwitchExecOperationOrder and StepType.SwitchExecOperationOrder properties.
//
enum SwitchExecOperationOrders {
  SwitchExecOperationOrders_reservedZero = 0;
  // Field: SwitchExecOperationOrder_DisconnectBeforeConnect
  //
  // (Value: 1) Specifies to disconnect routes before connecting any routes. This is the typical mode of operation.
  //
  SwitchExecOperationOrder_DisconnectBeforeConnect = 1;
  // Field: SwitchExecOperationOrder_DisconnectAfterConnect
  //
  // (Value: 2) Specifies to connect routes before disconnecting any routes. Use this mode of operation when you are switching electric current and want to ensure that a load is always connected to the source.
  //
  SwitchExecOperationOrder_DisconnectAfterConnect = 2;
}

// SwitchExecLifetimes
//
// This data type contains values that specify a switch connection lifetime. Use the values of this enumeration with the Step.SwitchExecConnectionLifetime and StepType.SwitchExecConnectionLifetime properties.
//
enum SwitchExecLifetimes {
  // Field: SwitchExecLifetime_Manual
  //
  // (Value: 0) Specifies that the route is connected until manually disconnected.
  //
  SwitchExecLifetime_Manual = 0;
  // Field: SwitchExecLifetime_Execution
  //
  // (Value: 1) Specifies that the route is connected until the execution completes.
  //
  SwitchExecLifetime_Execution = 1;
  // Field: SwitchExecLifetime_Thread
  //
  // (Value: 2) Specifies that the route is connected until the thread completes.
  //
  SwitchExecLifetime_Thread = 2;
  // Field: SwitchExecLifetime_Sequence
  //
  // (Value: 3) Specifies that the route is connected until the sequence completes executing.
  //
  SwitchExecLifetime_Sequence = 3;
  // Field: SwitchExecLifetime_Step
  //
  // (Value: 4) Specifies that the route is connected until the step completes executing.
  //
  SwitchExecLifetime_Step = 4;
}

// SwitchExecMulticonnectModes
//
// This data type contains values that specify multiconnect behavior. Use the values of this enumeration with the Step.SwitchExecMulticonnectMode and StepType.SwitchExecMulticonnectMode properties.
//
enum SwitchExecMulticonnectModes {
  // Field: SwitchExecMulticonnectMode_None
  //
  // (Value: 0) A route can connect only once.
  //
  SwitchExecMulticonnectMode_None = 0;
  // Field: SwitchExecMulticonnectMode_Multiconnect
  //
  // (Value: 1) A route can connect multiple times. The route must contain the same endpoints and path. NI Switch Executive automatically reference counts the routes. If you issue multiple Connect operations for a specific route, the route is not physically disconnected until an equal number of Disconnect operations occur. You can either issue the Disconnect operation manually or use a lifetime setting for the route. The Disconnect All operation disconnects a route even if the route reference count is greater than one.
  //
  SwitchExecMulticonnectMode_Multiconnect = 1;
  // Field: SwitchExecMulticonnectMode_Default
  //
  // (Value: -1) Defaults to the multiconnect mode as predefined for each route in the NI Switch Executive.
  //
  SwitchExecMulticonnectMode_Default = -1;
}

// StepTypeCategories
//
// 
//
enum StepTypeCategories {
  // Field: StepTypeCategory_None
  //
  // (Value: 0)
  //
  StepTypeCategory_None = 0;
  // Field: StepTypeCategory_Action
  //
  // (Value: 1)
  //
  StepTypeCategory_Action = 1;
  // Field: StepTypeCategory_Test
  //
  // (Value: 2)
  //
  StepTypeCategory_Test = 2;
}

// AutoCreateVariableLocationOptions
//
// Use the following constants with the StationOptions.AutoCreateVariableLocation property.
//
enum AutoCreateVariableLocationOptions {
  AutoCreateVariableLocationOptions_reservedZero = 0;
  // Field: AutoCreateVariableLocationOption_Locals
  //
  // (Value: 1) Use Locals as the location.
  //
  AutoCreateVariableLocationOption_Locals = 1;
  // Field: AutoCreateVariableLocationOption_Parameters
  //
  // (Value: 2) Use Parameters as the location.
  //
  AutoCreateVariableLocationOption_Parameters = 2;
  // Field: AutoCreateVariableLocationOption_FileGlobals
  //
  // (Value: 3) Use FileGlobals as the location.
  //
  AutoCreateVariableLocationOption_FileGlobals = 3;
  // Field: AutoCreateVariableLocationOption_StationGlobals
  //
  // (Value: 4) Use StationGlobals as the location.
  //
  AutoCreateVariableLocationOption_StationGlobals = 4;
}

// module 

// LoadPrototypeOptions
//
// These constants represent the options you can use with the options parameter of the Module.LoadPrototype, SequenceCallModule.LoadPrototypeFromSequence and DotNetCall.LoadPrototypeFromSignature methods.
//
enum LoadPrototypeOptions {
  // Field: LoadPrototypeOption_NoOptions
  //
  // (Value: 0x0) No Options.
  //
  LoadPrototypeOption_NoOptions = 0;
  // Field: LoadPrototypeOption_MapExistingParameters
  //
  // (value: 0x1) If this flag is set, the Module.LoadPrototype method attempts to keep the existing argument value expressions by mapping them to the parameters in the new prototype. Any arguments that cannot be mapped are added to the Module.UnmappedArgumentValues collection.
  //
  LoadPrototypeOption_MapExistingParameters = 1;
}

// UIMessageCodes
//
// Use these constants for the eventCode parameter of the Thread.PostUIMessageEx and Engine.PostUIMessage methods. These methods allow you to pass data with the message using the numericDataParam, stringDataParam, and activeXDataParam parameters.
// Note: A user interface can respond to ModelState messages by displaying a label that describes the current state of the testing process.
//
enum UIMessageCodes {
  UIMessageCodes_reservedZero = 0;
  // Field: UIMsg_BreakOnUserRequest
  //
  // (Value: 1) TestStand posts this message to the user interface to notify it that the execution suspended in response to a user request. The user interface must update the display accordingly.
  //
  UIMsg_BreakOnUserRequest = 1;
  // Field: UIMsg_BreakOnBreakpoint
  //
  // (Value: 2) TestStand posts this message to the user interface to notify it that the execution has suspended. The user interface must update the display accordingly.
  //
  UIMsg_BreakOnBreakpoint = 2;
  // Field: UIMsg_BreakOnRunTimeError
  //
  // (Value: 3) TestStand posts this message to the user interface to notify it that a run-time error has been encountered in the execution. The user interface must update the display accordingly.Note: The engine posts this event only when you select Show Dialog from the On Run-Time Error ring control on the Execution tab of the Station Options dialog box. A user interface typically calls the Engine.DisplayRunTimeErrorDialogEx method.
  //
  UIMsg_BreakOnRunTimeError = 3;
  // Field: UIMsg_Trace
  //
  // (Value: 4) TestStand posts this message to the user interface to notify it that the execution has reached a trace point. The user interface must update the display accordingly.
  //
  UIMsg_Trace = 4;
  // Field: UIMsg_TerminatingExecution
  //
  // (Value: 5) TestStand posts this message just before terminating an execution. The execution does not actually terminate until the user interface releases the UIMessage.
  //
  UIMsg_TerminatingExecution = 5;
  // Field: UIMsg_AbortingExecution
  //
  // (Value: 6) TestStand posts this message just before aborting an execution. TestStand does not actually abort execution until the user interface releases the UIMessage.
  //
  UIMsg_AbortingExecution = 6;
  // Field: UIMsg_KillingExecutionThreads
  //
  // (Value: 7) TestStand posts this message just before killing the threads in an execution. TestStand does not actually kill the threads until the user interface releases the UIMessage.
  //
  UIMsg_KillingExecutionThreads = 7;
  // Field: UIMsg_EndExecution
  //
  // (Value: 8) TestStand posts this message after an execution completes. The user interface must update the display accordingly.
  //
  UIMsg_EndExecution = 8;
  // Field: UIMsg_ShutDownComplete
  //
  // (Value: 9) TestStand posts this message when a shutdown completes. If this is not the final shutdown, the user interface can continue to load and execute sequences.
  //
  UIMsg_ShutDownComplete = 9;
  // Field: UIMsg_StartExecution
  //
  // (Value: 10) TestStand posts this message when an execution begins. This message serves to notify the user interface to update the display accordingly.
  //
  UIMsg_StartExecution = 10;
  // Field: UIMsg_ProgressPercent
  //
  // (Value: 11) TestStand step modules post this message to the user interface to notify it to update the progress indicator associated with an execution. The activeXDataParam parameter specifies an execution. The numericDataParam parameter specifies a value from 0 to 100 that indicates the percentage of progress the current execution reports. This value indicates the progress of operations for which the execution chooses to report the amount of progress. The value does not necessarily reflect the progress of the execution as a whole.
  //
  UIMsg_ProgressPercent = 11;
  // Field: UIMsg_ProgressText
  //
  // (Value: 12) TestStand step modules post this message to the user interface to notify it to update the progress message associated with an execution. The activeXDataParam parameter specifies an execution. The stringDataParam parameter specifies a progress message.
  //
  UIMsg_ProgressText = 12;
  // Field: UIMsg_StartInteractiveExecution
  //
  // (Value: 13) TestStand posts this message whenever an interactive execution begins.
  //
  UIMsg_StartInteractiveExecution = 13;
  // Field: UIMsg_EndInteractiveExecution
  //
  // (Value: 14) TestStand posts this message whenever an interactive execution ends.
  //
  UIMsg_EndInteractiveExecution = 14;
  // Field: UIMsg_TerminatingInteractiveExecution
  //
  // (Value: 15) TestStand posts this message just before terminating an interactive execution. The interactive execution does not actually terminate until the user interface message is released.
  //
  UIMsg_TerminatingInteractiveExecution = 15;
  // Field: UIMsg_TerminationCancelled
  //
  // (Value: 16) TestStand posts this message to notify the user interface to update the display when a pending termination is cancelled.
  //
  UIMsg_TerminationCancelled = 16;
  // Field: UIMsg_ResumeFromBreak
  //
  // (Value: 17) TestStand posts this message when an execution resumes after being suspended at a breakpoint. The execution resumes when the user interface message is released.
  //
  UIMsg_ResumeFromBreak = 17;
  // Field: UIMsg_StartFileExecution
  //
  // (Value: 18) TestStand posts this message when it begins using a sequence file. TestStand specifies the file in the UIMessage.ActiveXData property.
  //
  UIMsg_StartFileExecution = 18;
  // Field: UIMsg_EndFileExecution
  //
  // (Value: 19) TestStand posts this message when the execution finishes using a sequence file. TestStand specifies the file in the UIMessage.ActiveXData property.
  //
  UIMsg_EndFileExecution = 19;
  // Field: UIMsg_ShutDownCancelled
  //
  // (Value: 20) TestStand posts this message to notify the user interface that the user cancelled a pending shutdown.
  //
  UIMsg_ShutDownCancelled = 20;
  // Field: UIMsg_LocalizationSettingChanged
  //
  // (Value: 21) TestStand posts this message to notify the user interface that the decimal point localization setting has changed in the system setting for the operating system or in the StationOptions.UseLocalizedDecimalPoint setting. When a user interface receives this message, it should refresh any values it displays that these changes might affect.
  //
  UIMsg_LocalizationSettingChanged = 21;
  // Field: UIMsg_OpenWindows
  //
  // (Value: 22) Post this message to the user interface to instruct it to open a file in a window. If the file or execution is already open, the application brings the file to the front. A file can be specified by a pathname in the stringDataParam parameter or by a PropertyObjectFile object in the activeXDataParam parameter. An execution can be specified by an Execution object in the activeXDataParam parameter. A list of files and/or executions can be specified by an array of references to PropertyObjectFile and Execution objects in the activeXDataParam parameter. For sequence files, the stringDataParam parameter can also contain a '|' separator followed by the name of a sequence to display. If you specify the sequence file in the activeXDataParam parameter, you can specify just the sequence name in the stringDataParam parameter. This constant does not support opening workspace files.
  //
  UIMsg_OpenWindows = 22;
  // Field: UIMsg_TileWindows
  //
  // (Value: 23) Post this message to the user interface to instruct it to tile the windows the activeXDataParam parameter specifies. Use an array of ActiveX reference objects that reference a PropertyObjectFile or an Execution for the activeXDataParam parameter. The user interface tiles the windows that correspond to the objects in the array. To tile all windows, pass a NULL reference for the activeXDataParam parameter or use the Nothing keyword if you are using the ActiveX/COM Adapter.
  //
  UIMsg_TileWindows = 23;
  // Field: UIMsg_CascadeWindows
  //
  // (Value: 24) Post this message to the user interface to instruct it to cascade the windows the activeXDataParam parameter specifies. Use an array of ActiveX reference objects that reference a PropertyObjectFile or an Execution for the activeXDataParam parameter. The user interface cascades the windows that correspond to the objects in the array. To cascade all windows, pass a NULL reference for the activeXDataParam parameter or use the Nothing keyword if you are using the ActiveX/COM Adapter.
  //
  UIMsg_CascadeWindows = 24;
  // Field: UIMsg_ReportChanged
  //
  // (Value: 25) The TestStand Engine posts this message to the user interface whenever you update the report of an execution. This allows the user interface to refresh the Report view if it is showing.
  //
  UIMsg_ReportChanged = 25;
  // Field: UIMsg_CloseWindows
  //
  // (Value: 26) Post this message to the user interface to instruct it to close a window or windows that display a PropertyObjectFile or an execution. Specify the window by passing a PropertyObjectFile or Execution reference for the activeXDataParam parameter, or specify several windows by passing an ActiveX reference array of such objects for the activeXDataParam parameter. Pass a NULL reference, or use the Nothing keyword if you are using the ActiveX/COM Adapter, to close all currently open document windows in the user interface.
  //
  UIMsg_CloseWindows = 26;
  // Field: UIMsg_RefreshWindows
  //
  // (Value: 27) Post this message to the user interface to instruct it to refresh the data it displays for the corresponding PropertyObjectFile or SequenceContext you pass for the activeXDataParam parameter. Pass a single reference or an ActiveX array of references using the activeXDataParam parameter to specify which window or windows to refresh. Pass a SequenceContext object to refresh the values for the steps which the user interface displays for that execution. Pass NULL for the activeXDataParam parameter to refresh the displays for all the files and executions. The Overriding SequenceFilePostStepFailure Callback and the Overriding SequenceFilePostStepRuntimeError Callback examples located in the <TestStand Public>\Examples\Modifying Process Models\Overriding Engine Callbacks directory demonstrate how to use this UIMessage.
  //
  UIMsg_RefreshWindows = 27;
  // Field: UIMsg_ClientFileChanged
  //
  // (Value: 28) An Execution object posts this message when a client changes the value of the Execution.ClientFile property. The UIMessage.Execution property references the Execution that sends the message.
  //
  UIMsg_ClientFileChanged = 28;
  // Field: UIMsg_DisplayReport
  //
  // (Value: 29) Post this message when you want the user interface to display the current contents of the execution report.
  //
  UIMsg_DisplayReport = 29;
  // Field: UIMsg_ModelState_Initializing
  //
  // (Value: 30) TestStand process models post this message to the user interface before performing initialization prior to testing. The numericDataParam parameter specifies the test-socket index. The activeXDataParam parameter contains a reference to the sequence context for the process model sequence file that posts the message.
  //
  UIMsg_ModelState_Initializing = 30;
  // Field: UIMsg_ModelState_Waiting
  //
  // (Value: 31) TestStand process models post this message to the user interface before waiting for an action to occur, such as the user entering a serial number in response to a prompt. The numericDataParam parameter specifies the test-socket index. The activeXDataParam parameter contains a reference to the sequence context for the process model sequence file that posts the message.
  //
  UIMsg_ModelState_Waiting = 31;
  // Field: UIMsg_ModelState_Identified
  //
  // (Value: 32) TestStand process models post this message to the user interface after identifying the serial number for a unit under test (UUT) or batch of UUTs. The stringDataParam parameter specifies the UUT serial number unless the execution is a batch controller. If the execution is a batch controller, the stringDataParam parameter specifies the batch serial number. The numericDataParam  parameter specifies the test-socket index. The activeXDataParam parameter contains a reference to the sequence context for the process model sequence file that posts the message.
  //
  UIMsg_ModelState_Identified = 32;
  // Field: UIMsg_ModelState_BeginTesting
  //
  // (Value: 33) TestStand process models post this message to the user interface prior to calling MainSequence in the client sequence file. The numericDataParam parameter specifies the test-socket index. The activeXDataParam parameter contains a reference to the sequence context for the process model sequence file that posts the message.
  //
  UIMsg_ModelState_BeginTesting = 33;
  // Field: UIMsg_ModelState_TestingComplete
  //
  // (Value: 34) TestStand process models post this message to the user interface after the MainSequence in the client sequence file returns control to the model. If the execution is not a batch controller or a parallel controller, the stringDataParam parameter specifies the UUT result status. If the execution is a batch controller or a parallel controller, the value of the stringDataParam parameter specifies the overall status of the controlling execution, which by default can be Passed, Failed, Error, Terminated, or Aborted. The numericDataParam parameter specifies the test-socket index. The activeXDataParam parameter contains a reference to the sequence context for the process model sequence file that posts the message.
  //
  UIMsg_ModelState_TestingComplete = 34;
  // Field: UIMsg_ModelState_PostProcessingComplete
  //
  // (Value: 35) TestStand process models post this message to the user interface after generating the report and logging the data for a client sequence file. The numericDataParam parameter specifies the test-socket index. The activeXDataParam parameter contains a reference to the sequence context for the process model sequence file that posts the message.
  //
  UIMsg_ModelState_PostProcessingComplete = 35;
  // Field: UIMsg_ModelState_EnabledStateSet
  //
  // (Value: 36) TestStand Batch process models post this message to the user interface after setting the enabled state of a test-socket execution. The value of the stringDataParam parameter is True if the socket is enabled and False if the socket is disabled. The numericDataParam parameter specifies the test-socket index. The activeXDataParam parameter contains a reference to the sequence context for the process model sequence file that posts the message.
  //
  UIMsg_ModelState_EnabledStateSet = 36;
  // Field: UIMsg_ReportLocationChanged
  //
  // (Value: 37) The TestStand Engine posts this message to the user interface whenever you change the location of the report.
  //
  UIMsg_ReportLocationChanged = 37;
  // Field: UIMsg_GotoLocation
  //
  // (Value: 38) The Locations.GotoLocation method posts this message to the user interface to instruct the user interface to select the Locations passed in as the activeXDataParam parameter.
  //
  UIMsg_GotoLocation = 38;
  // Field: UIMsg_PushUndoItem
  //
  // (Value: 39) Post this message to the sequence editor to instruct the sequence editor to push an undo item onto an UndoStack. An undo item is a COM object that implements the UndoItem interface. You pass the undo item as the activeXDataParam parameter. The sequence editor uses the UndoItem.EditedFile property to determine which UndoStack to push the undo item onto. Send this message synchronously to determine which UndoStack the sequence editor placed the undo item onto immediately after the call to the PostUIMessage method returns by checking the UndoItem.UndoStack property.
  //
  UIMsg_PushUndoItem = 39;
  // Field: UIMsg_OutputMessages
  //
  // (Value: 40) TestStand posts this message at periodic intervals when it holds references to output messages that calls to the OutputMessage.Post method queue.  TestStand transfers the queued messages to an OutputMessages collection attached to the UIMessage.ActiveXData property for this event. Ensure that an application that processes output messages copies the output message references from the collection in UIMessage.ActiveXData to a private OutputMessages collection by passing the private collection to the OutputMessages.CopyMessagesToCollection method. An application calls the Engine.NewOutputMessages method to create a private OutputMessage collection. TestStand generates this event only if the Engine.OutputMessagesEnabled property is True. Because there can be more than one handler for this event, ensure that the application does not modify the OutputMessages collection the UIMessage.ActiveXData property holds.
  //
  UIMsg_OutputMessages = 40;
  // Field: UIMsg_TypePaletteFileListChanged
  //
  // (Value: 41) TestStand posts this message to the user interface to notify it that the type palette file list has changed. The user interface must update its display accordingly. This event occurs after calling the Engine.UnloadTypePaletteFiles, Engine.LoadTypePaletteFilesEx, and Engine.SetTypePaletteFileList methods.
  //
  UIMsg_TypePaletteFileListChanged = 41;
  // Field: UIMsg_NonTerminatableThreadsArePreventingTermination
  //
  // (Value: 42) An execution posts this message when it attempts to terminate and every thread in the execution uses a value of ThreadTerminationOptions_Prompt for the Thread.TerminationOption property. A user interface typically handles this event by prompting users to terminate all threads. If the user chooses to terminate all threads, the user interface calls the Execution.OverrideNonTerminatableThreads property to signal the threads that use a value of ThreadTerminationOptions_Prompt for the Thread.TerminationOption property to stop running.
  //
  UIMsg_NonTerminatableThreadsArePreventingTermination = 42;
  // Field: UIMsg_ModelState_PostProcessing
  //
  // (Value: 43) TestStand process models post this message to the user interface before generating the report and logging the data for a client sequence file. The numericDataParam parameter specifies the test-socket index. The activeXDataParam parameter contains a reference to the sequence context for the process model sequence file that posts the message.
  //
  UIMsg_ModelState_PostProcessing = 43;
  // Field: UIMsg_ReportCollectionChanged
  //
  // (Value: 44) The TestStand Engine posts this message when the content or an active report changes for the Reports collection of an execution. If the active report changes, the activeXDataParam parameter contains a reference to the previously active report.
  //
  UIMsg_ReportCollectionChanged = 44;
  // Field: UIMsg_RuntimeError
  //
  // (Value: 45) TestStand posts this message to the user interface to notify the user interface that the execution has encountered a run-time error. The user interface can alter the error, for example, by adding contextual information to the error message.
  //
  UIMsg_RuntimeError = 45;
  // Field: UIMsg_UserMessageBase
  //
  // (Value: 10000) Codes for all user-defined messages must be greater than or equal to the value of this constant. Define and use event codes greater than UIMsg_UserMessageBase only when you can ensure that the event code does not conflict with event codes for messages that other custom TestStand components, such as add-on products, define. National Instruments recommends using the  Engine.RegisterUIMessage method to obtain an event code for a message to guarantee that the code is unique for the lifetime of the engine. Components that generate and process the message call this method, which returns the previously assigned message code if the message is already assigned.
  //
  UIMsg_UserMessageBase = 10000;
}

// RTEOptions
//
// Use these constants with the StationOptions.RTEOption and Execution.RTEOptionForThisExecution properties, the Thread.SetBatchRTEOption method, the ApplicationMgr.DisplayCustomRunTimeErrorDialog event, or to check the return value for runTimeErrorAction parameter of Engine.DisplayRunTimeErrorDialogEx method.
//
enum RTEOptions {
  // Field: RTEOption_ShowDialog
  //
  // (Value: 0) Instructs the execution to launch the Run-Time Error dialog box when an error occurs.
  //
  RTEOption_ShowDialog = 0;
  // Field: RTEOption_Continue
  //
  // (Value: 1) Instructs the execution to process the error by propagating the error to the calling sequence, if one exists. If the current step group is Setup or Main, the execution jumps directly to the Cleanup step group.
  //
  RTEOption_Continue = 1;
  // Field: RTEOption_Ignore
  //
  // (Value: 2) Instructs the execution to ignore the error and continue normal execution.
  //
  RTEOption_Ignore = 2;
  // Field: RTEOption_Abort
  //
  // (Value: 3) Instructs the execution to abort the execution.
  //
  RTEOption_Abort = 3;
  // Field: RTEOption_Retry
  //
  // (Value: 4) Instructs the execution to ignore the error and re-execute the step that caused the error condition. For the StationOptions.RTEOption property, the Execution.RTEOptionForThisExecution property, and the Thread.SetBatchRTEOption method, TestStand interprets the RTEOption_Retry value as RTEOption_Continue.
  //
  RTEOption_Retry = 4;
}

// module 

// OpenFileDialogOptions
//
// These constants represent the options you can use with the openFileDialogFlags parameter of the Engine.DisplayFileDialog method. Use the bitwise-OR operator to specify more than one option.
// 
//
enum OpenFileDialogOptions {
  // Field: OpenFile_NoOptions
  //
  // (Value: 0x0) No options.
  //
  OpenFile_NoOptions = 0;
  // Field: OpenFile_DisableUseAbsPathCheck
  //
  // (Value: 0x1) Dims the Use Absolute Path option.
  //
  OpenFile_DisableUseAbsPathCheck = 1;
  // Field: OpenFile_InitialSetUseAbsPathCheck
  //
  // (Value: 0x2) Sets the initial state of the Use Absolute Path option to enabled when the dialog box first opens.
  //
  OpenFile_InitialSetUseAbsPathCheck = 2;
  // Field: OpenFile_InitialUnsetUseAbsPathCheck
  //
  // (Value: 0x4) Sets the initial state of the Use Absolute Path option to disabled when the dialog box first opens.
  //
  OpenFile_InitialUnsetUseAbsPathCheck = 4;
  // Field: OpenFile_ResolveNonExistentFile
  //
  // (Value: 0x8) Verifies that the Engine.FindFileEx method would find files in pathnames that specify files that do not exist if the files did exist. Use this option with the Save As dialog box to ensure that TestStand saves the file to a pathname under one of the TestStand search directories.
  //
  OpenFile_ResolveNonExistentFile = 8;
  // Field: OpenFile_FileMustNotExist
  //
  // (Value: 0x10) Specifies that the pathname the user entered must not exist on disk. If the user selects an existing file, the dialog box displays a warning message and does not close.
  //
  OpenFile_FileMustNotExist = 16;
  // Field: OpenFile_InitialSetBrowseIntoLLB
  //
  // (Value: 0x20) Enables the Browse Into LLB option.
  //
  OpenFile_InitialSetBrowseIntoLLB = 32;
  // Field: OpenFile_SaveAsDialog
  //
  // (Value: 0x40) Creates a Save As dialog box.
  //
  OpenFile_SaveAsDialog = 64;
  // Field: OpenFile_HideUseAbsPathCheck
  //
  // (Value: 0x80) Hides the Use Absolute Path option.
  //
  OpenFile_HideUseAbsPathCheck = 128;
  // Field: OpenFile_UseAbsolutePath
  //
  // (Value: 0x83) Combination of the OpenFile_DisableUseAbsPathCheck, OpenFile_InitialSetUseAbsPathCheck, and OpenFile_HideUseAbsPathCheck flags. Use this flag to ensure that the method returns only absolute pathnames.
  //
  OpenFile_UseAbsolutePath = 131;
  // Field: OpenFile_UseRelativePath
  //
  // (Value: 0x85) Combination of the OpenFile_DisableUseAbsPathCheck, OpenFile_InitialUnsetUseAbsPathCheck, and OpenFile_HideUseAbsPathCheck flags. Use this flag to ensure that the method returns only relative pathnames or simple filenames.
  //
  OpenFile_UseRelativePath = 133;
  // Field: OpenFile_ShowBrowseIntoLLBCheck
  //
  // (Value: 0x100) Shows the Browse Into LLB option, which allows users to browse the contents of a LabVIEW LLB file.
  //
  OpenFile_ShowBrowseIntoLLBCheck = 256;
  // Field: OpenFile_SelectDirectoriesOnly
  //
  // (Value: 0x200) Creates a Directory Selection dialog box. The user can select only folders.
  //
  OpenFile_SelectDirectoriesOnly = 512;
  // Field: OpenFile_HideMultiSelectListCtrl
  //
  // (Value: 0x400) For multiple selection file dialog boxes, hides the list control that shows the currently selected pathnames. If you do not set this option, the TestStand File dialog box displays an additional list control that contains the currently selected pathnames. Create a multiple selection dialog box by passing the WinFileDlg_ALLOWMULTISELECT option to the win32Flags parameter.
  //
  OpenFile_HideMultiSelectListCtrl = 1024;
  // Field: OpenFile_UseSequenceFileFilters
  //
  // (Value: 0x800) Specifies to add the file extensions for the loaded sequence file translators to the list of file types the Open File dialog box can select.
  //
  OpenFile_UseSequenceFileFilters = 2048;
  // Field: OpenFile_IgnoreInitialPathExtension
  //
  // (Value: 0x1000) If the initial path specifies a file and the file extension is not part of the file filter string, TestStand removes the file extension from the default name that appears in the open file dialog box.
  //
  OpenFile_IgnoreInitialPathExtension = 4096;
  // Field: OpenFile_SubstituteMacrosByDefault
  //
  // (Value: 0x2000) Enables the Substitute Path Macros option in the File Not Found dialog box and the File Conflict dialog box.
  //
  OpenFile_SubstituteMacrosByDefault = 8192;
  // Field: OpenFile_ModalToAppMainWind
  //
  // (Value: 0x10000) By default, the dialog box is modal to the last active window of the calling thread, or if none exists, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  //
  OpenFile_ModalToAppMainWind = 65536;
}

// module 

// ExecutionMask
//
// Use these constants to specify the StationOptions.ExecutionMask property.
// Each constant corresponds to an Execution option. The user typically sets these options on the Execution tab of the Station Options dialog box.
//
enum ExecutionMask {
  ExecutionMask_reservedZero = 0;
  // Field: ExecMask_BreakpointsEnabled
  //
  // (Value: 0x1) Honors breakpoints.
  //
  ExecMask_BreakpointsEnabled = 1;
  // Field: ExecMask_BreakWhileTerminating
  //
  // (Value: 0x2) Honors breakpoints when terminating an execution.
  //
  ExecMask_BreakWhileTerminating = 2;
  // Field: ExecMask_BreakOnRunTimeError
  //
  // (Value: 0x4) Specifies that the message, UIMsg_BreakOnRunTimeError, is sent when an error occurs and the value of the StationOptions.RTEOption property is RTEOption_ShowDialog.
  //
  ExecMask_BreakOnRunTimeError = 4;
  // Field: ExecMask_TracingEnabled
  //
  // (Value: 0x8) Enables tracing. When tracing is enabled, the sequence editor or user interface displays each step as it executes. This option is useful for debugging but adds significant performance overhead to the execution of test programs.
  //
  ExecMask_TracingEnabled = 8;
  // Field: ExecMask_TraceIntoSetupCleanup
  //
  // (Value: 0x10) Enables tracing of steps in the Setup and Cleanup step groups of each sequence.
  //
  ExecMask_TraceIntoSetupCleanup = 16;
  // Field: ExecMask_TraceIntoPrePostCallbacks
  //
  // (Value: 0x20) Generates trace events for steps in any of the Pre-Step and Post-Step Engine callbacks.
  //
  ExecMask_TraceIntoPrePostCallbacks = 32;
  // Field: ExecMask_TraceIntoPostActionCallbacks
  //
  // (Value: 0x40) Generates trace events for steps in Post Action callbacks.
  //
  ExecMask_TraceIntoPostActionCallbacks = 64;
  // Field: ExecMask_TraceIntoSeparateExecutionCallbacks
  //
  // (Value: 0x80) Specifies to generate trace events for steps in callbacks that run as executions separate from the top-level sequence execution. Examples include Front-End callbacks and callbacks you execute from the Tools menu.
  //
  ExecMask_TraceIntoSeparateExecutionCallbacks = 128;
  // Field: ExecMask_TraceIntoEntryPoints
  //
  // (Value: 0x100) Generates trace events for steps in Process Model entry point sequences.
  //
  ExecMask_TraceIntoEntryPoints = 256;
  // Field: ExecMask_TraceIntoSequenceCallsMarkedAsTraceOff
  //
  // (Value: 0x200) Enables tracing into all subsequences when tracing is enabled for the calling sequence.
  //
  ExecMask_TraceIntoSequenceCallsMarkedAsTraceOff = 512;
  // Field: ExecMask_TraceWhileTerminating
  //
  // (Value: 0x400) Generates trace events for steps that run while execution is terminating. Examples of steps that can run when an execution is terminating are steps in the Cleanup step groups that run when you terminate execution in the middle of a sequence.
  //
  ExecMask_TraceWhileTerminating = 1024;
  // Field: ExecMask_TraceAllThreads
  //
  // (Value: 0x800) Generates trace events for all running threads in an execution. If you do not set this option, TestStand generates trace events only for the active thread.
  // Note: The TestStand User Interface (UI) Controls display only the active thread and do not support enabling this constant.
  //
  ExecMask_TraceAllThreads = 2048;
  // Field: ExecMask_InteractiveRecordResults
  //
  // (Value: 0x1000) Records the results of steps you run interactively.
  //
  ExecMask_InteractiveRecordResults = 4096;
  // Field: ExecMask_InteractiveRunSetupCleanup
  //
  // (Value: 0x2000) Specifies whether to run the Setup and Cleanup step groups for the sequence that contains the selected steps. This option applies only when you initiate the interactive execution as an independent, top-level execution.
  //
  ExecMask_InteractiveRunSetupCleanup = 8192;
  // Field: ExecMask_InteractiveEvaluatePreconditions
  //
  // (Value: 0x4000) Specifies whether to evaluate preconditions for steps you run interactively.
  //
  ExecMask_InteractiveEvaluatePreconditions = 16384;
  // Field: ExecMask_AllowBreakWhileInCodeModules
  //
  // (Value: 0x8000) Enables TestStand to display an execution as suspended so you can debug it even if one or more threads are executing code inside a code module, which can be useful when code modules take a long time to complete, are blocked waiting for something, or are running continuously in the background. While the execution is suspended, steps with running code modules show a status of Running. If the code module completes while the execution is suspended, the thread suspends immediately after returning from the code module until you resume the execution.
  //
  ExecMask_AllowBreakWhileInCodeModules = 32768;
  // Field: ExecMask_DefaultExecutionMask
  //
  // (Value: 0x801D) Bitwise-OR combination of the ExecMask_BreakpointsEnabled, ExecMask_BreakOnRunTimeError, ExecMask_TraceIntoSetupCleanup, and ExecMask_TracingEnabled flags.
  //
  ExecMask_DefaultExecutionMask = 32797;
}

// ReportConversion
//
// This data type contains values that specify how to handle linefeeds and carriage returns in report text.
//
enum ReportConversion {
  // Field: ReportConv_NoConversion
  //
  // (Value: 0) Do not convert carriage returns and linefeeds.
  //
  ReportConv_NoConversion = 0;
  // Field: ReportConv_ToCRLF
  //
  // (Value: 1) Convert each linefeed to a carriage return followed by a linefeed. You usually use this option when writing a report from memory to disk.
  //
  ReportConv_ToCRLF = 1;
  // Field: ReportConv_FromCRLF
  //
  // (Value: 2) Convert carriage return/linefeed combinations to linefeeds. You usually use this option when reading a report from disk into memory.
  //
  ReportConv_FromCRLF = 2;
}

// module 

// ReadWriteOptions
//
// These constants represent the options you can use with the RWOptions parameter of the methods that read and write PropertyObjects. Use the bitwise-OR operator to specify more than one option.
//
enum ReadWriteOptions {
  // Field: RWOption_NoOptions
  //
  // (Value: 0x0) No options.
  //
  RWOption_NoOptions = 0;
  // Field: RWOption_ValuesOnly
  //
  // (Value: 0x1) Use this option to read or write the value of the object and the value of each subproperty. TestStand does not write the type information for the object and subproperties when you use this flag.
  // TestStand writes all values even if the value is the default value for a type. If you use PropertyObject.ReadEx or PropertyObject.UnserializeEx to read the contents of a persisted object written using this option, the structure of the target object must match the structure of the values read. If the target structure is incorrect, the values in the target object do not update.
  //
  RWOption_ValuesOnly = 1;
  // Field: RWOption_EraseExistingObject
  //
  // (Value: 0x2) When writing an object, use this option to clear out any existing object with the same name.
  //
  RWOption_EraseExistingObject = 2;
  // Field: RWOption_EraseAll
  //
  // (Value: 0x4) When writing an object to a file, use this option to clear the entire contents of the existing file.
  //
  RWOption_EraseAll = 4;
  // Field: RWOption_DoNotWriteTypes
  //
  // (Value: 0x8) Do not write any type definitions when writing type definition instances.
  // TestStand writes only values that are not the default value for a type. If you use the PropertyObject.ReadEx or PropertyObject.UnserializeEx methods to read the contents of a persisted object written using this option, the type definitions must already be loaded. If the types are no loaded, the PropertyObject.ReadEx fails.
  //
  RWOption_DoNotWriteTypes = 8;
}

// module 

// PropertyOptions
//
// These constants represent the options you can use with many of the methods of the PropertyObject class. Use the bitwise-OR operator to specify more than one option for a particular method.
//
enum PropertyOptions {
  // Field: PropOption_NoOptions
  //
  // (Value: 0x0) No options.
  //
  PropOption_NoOptions = 0;
  // Field: PropOption_DecimalPoint_UsePeriod
  //
  // (Value: 0x0) Use this option to specify the period character as the decimal point when you implicitly convert a string to a number or a number to a string in a call to a GetVal or SetVal method that coerces between a number and string.
  //
  PropOption_DecimalPoint_UsePeriod = 0;
  // Field: PropOption_InsertIfMissing
  //
  // (Value: 0x1) If the property the lookupString parameter specifies does not exist, use this option with the SetVal and GetVal methods of the PropertyObject class to create a new property. The PropertyObject.SetValVariant and PropertyObject.GetValVariant methods do not support the InsertIfMissing option.
  // Note: TestStand does not support adding a new subproperty to an instance of a type unless you add the subproperty below a container you have marked as unstructured in the type definition by using the PropFlags_UnstructuredProperty flag. TestStand does not report any errors and creates the property, but does not save the property. When resolving type conflicts and updating type instances, TestStand automatically removes the property.
  //
  PropOption_InsertIfMissing = 1;
  // Field: PropOption_InsertElement
  //
  // (Value: 0x1) Use this option with the SetByOffset methods of the PropertyObject class to insert a new array element at the specified offset. This option is valid only for one-dimensional arrays.
  //
  PropOption_InsertElement = 1;
  // Field: PropOption_DeleteIfExists
  //
  // (Value: 0x2) When calling the PropertyObject.DeleteSubProperty method, use this option to avoid an error if the subproperty you specify does not exist.
  //
  PropOption_DeleteIfExists = 2;
  // Field: PropOption_RemoveElement
  //
  // (Value: 0x2) Use this value with the Get_ByOffset methods of the PropertyObject class to remove the array element at the specified offset. This option is valid only for one-dimensional arrays.
  //
  PropOption_RemoveElement = 2;
  // Field: PropOption_DoNothingIfExists
  //
  // (Value: 0x4) Use this option with the SetVal methods of the PropertyObject class to avoid setting the value of a property that already exists. Usually, you use this option in combination with the PropOption_InsertIfMissing option.
  //
  PropOption_DoNothingIfExists = 4;
  // Field: PropOption_SetOnlyIfDoesNotExist
  //
  // (Value: 0x5) This is the combination of the PropOption_DoNothingIfExists and the PropOption_InsertIfMissing options.
  // Note: TestStand does not support adding a new subproperty to an instance of a type unless you add the subproperty below a container you have marked as unstructured in the type definition by using the PropFlags_UnstructuredProperty flag. TestStand does not report any errors and creates the property, but does not save the property. When resolving type conflicts and updating type instances, TestStand automatically removes the property.
  //
  PropOption_SetOnlyIfDoesNotExist = 5;
  // Field: PropOption_CoerceFromNumber
  //
  // (Value: 0x8) Use this option for implicit conversion when using a numeric value as a Boolean or string. You can use this option with the PropertyObject.GetValBoolean and PropertyObject.GetValString methods.  When you use this option with the PropertyObject.GetValString method, you can pass one of the PropOption_DecimalPoint options to specify the decimal point character. You can also use this option with the PropertyObject.GetValNumber, PropertyObject.GetValInteger64, and PropertyObject.GetValUnsignedInteger64 methods to convert the returned number to the required representation.  Pass this option to the PropertyObject.GetValString of an enumeration object to get the numerical value of the enumeration converted to a string when enumerator information is unavailable.
  //
  PropOption_CoerceFromNumber = 8;
  // Field: PropOption_CoerceFromString
  //
  // (Value: 0x10) Use this option for implicit conversion when using a string value as a Boolean or number. You can use this option with the PropertyObject.GetValNumber and PropertyObject.GetValBoolean methods.
  //
  PropOption_CoerceFromString = 16;
  // Field: PropOption_CoerceToEnum
  //
  // (Value: 0x18)  Use this option for implicit conversion when setting an enumeration value with a string or number. You can use this option with the PropertyObject.SetValNumber and PropertyObject.SetValString methods. TestStand ignores this flag when you specify PropOption_InsertIfMissing and the property does not exist.
  //
  PropOption_CoerceToEnum = 24;
  // Field: PropOption_CoerceFromBoolean
  //
  // (Value: 0x20) Use this option for implicit conversion when using a Boolean value as a string or number. You can use this option with the PropertyObject.GetValNumber and PropertyObject.GetValString methods.
  //
  PropOption_CoerceFromBoolean = 32;
  // Field: PropOption_CoerceToNumber
  //
  // (Value: 0x40) Use this option for implicit conversion when setting a numeric value with a Boolean or string. You can use this option with the PropertyObject.SetValBoolean and PropertyObject.SetValString methods. TestStand ignores this flag when you specify PropOption_InsertIfMissing and the property does not exist. You can also use this option with the PropertyObject.SetValNumber, PropertyObject.SetValInteger64, and PropertyObject.SetValUnsignedInteger64 methods to convert the new value to the required representation.
  //
  PropOption_CoerceToNumber = 64;
  // Field: PropOption_CoerceToString
  //
  // (Value: 0x80) Use this option for implicit conversion when setting a string value with a Boolean or number. You can use this option with the PropertyObject.SetValNumber and PropertyObject.SetValBoolean methods. TestStand ignores this flag when you specify PropOption_InsertIfMissing and the property does not exist.
  //
  PropOption_CoerceToString = 128;
  // Field: PropOption_CoerceFromEnum
  //
  // (Value: 0xC0)  Use this option for implicit conversion when using an enumeration value as a string or number. You can use this option with the PropertyObject.GetValNumber and PropertyObject.GetValString methods.
  //
  PropOption_CoerceFromEnum = 192;
  // Field: PropOption_CoerceToBoolean
  //
  // (Value: 0x100) Use this option for implicit conversion when setting a Boolean value with a string or number. You can use this option with the PropertyObject.SetValNumber and PropertyObject.SetValString methods. TestStand ignores this flag when you specify PropOption_InsertIfMissing and the property does not exist.
  //
  PropOption_CoerceToBoolean = 256;
  // Field: PropOption_NotOwning
  //
  // (Value: 0x200) Use this option with the PropertyObject.SetPropertyObject method to create an alias to the specified property object. Use the PropertyObject.IsAliasObject method to determine whether the object is an alias.
  //
  PropOption_NotOwning = 512;
  // Field: PropOption_ReferToAlias
  //
  // (Value: 0x400) Use this option when calling methods on alias objects to perform operations on the alias instead of the object to which the alias refers. Use the PropertyObject.IsAliasObject method to determine whether the object is an alias.
  //
  PropOption_ReferToAlias = 1024;
  // Field: PropOption_DoNotAdoptCurrentName
  //
  // (Value: 0x800) Use this value with the PropertyObject.SetPropertyObject method to require that the object you pass to the method keeps its name. If you do not use this option, the method changes the object to have the same name as the object it is replacing.
  //
  PropOption_DoNotAdoptCurrentName = 2048;
  // Field: PropOption_CaseInsensitive
  //
  // (Value: 0x1000) Use with the PropertyObject.IsEqualTo method to ignore the case of string property values when comparing.
  //
  PropOption_CaseInsensitive = 4096;
  // Field: PropOption_DecimalPoint_UsePreference
  //
  // (Value: 0x1000) Use the Localization preferences on the Localization tab of the Station Options dialog box to determine whether the operating system setting determines the decimal point character when you implicitly convert a string to a number or a number to a string in a call to a GetVal or SetVal method that coerces between a number and string.
  //
  PropOption_DecimalPoint_UsePreference = 4096;
  // Field: PropOption_DecimalPoint_UseSystemSetting
  //
  // (Value: 0x2000) Use the character that the operating system setting specifies as the decimal point when you implicitly convert a string to a number or a number to a string in a call to a GetVal or SetVal method that coerces between a number and string.
  //
  PropOption_DecimalPoint_UseSystemSetting = 8192;
  // Field: PropOption_RequireIdenticalStructure
  //
  // (Value: 0x2000) Use with the PropertyObject.IsEqualTo method to require that both objects be identical in every way for the comparison to return True. When you use this option, the following items must also be identical for the PropertyObject.IsEqualTo method to return True:
  // * Array element prototypes for arrays of containers    * Type definitions for type instances    * Comments    * Numeric formats    * Order of subproperties
  //
  PropOption_RequireIdenticalStructure = 8192;
  // Field: PropOption_DecimalPoint_UseComma
  //
  // (Value: 0x3000) Use this option to specify the comma character as the decimal point when you implicitly convert a string to a number or a number to a string in a call to a GetVal or SetVal method that coerces between a number and string.
  //
  PropOption_DecimalPoint_UseComma = 12288;
  // Field: PropOption_DoNotRecurse
  //
  // (Value: 0x4000) Use with the PropertyObject.IsEqualTo method to compare only the top level object and not the subproperties.
  //
  PropOption_DoNotRecurse = 16384;
  // Field: PropOption_CoerceFromReference
  //
  // (Value: 0x10000) Use this option for implicit conversion when using an ActiveX reference value as a string or number. You can use this option with the PropertyObject.GetValNumber and PropertyObject.GetValString methods.
  //
  PropOption_CoerceFromReference = 65536;
  // Field: PropOption_CoerceToReference
  //
  // (Value: 0x20000) Use this option for implicit conversion when setting an ActiveX reference value with a string or number. You can use this option with the PropertyObject.SetValNumber and PropertyObject.SetValString methods. TestStand ignores this flag when you specify PropOption_InsertIfMissing and the property does not exist.
  //
  PropOption_CoerceToReference = 131072;
  // Field: PropOption_Coerce
  //
  // (Value: 0x301F8) Use this option to convert the value of a property from or to any of the supported basic types. This is the combination of the PropOption_CoerceFromNumber, PropOption_CoerceFromString, PropOption_CoerceFromBoolean, PropOption_CoerceFromReference, PropOption_CoerceToNumber, PropOption_CoerceToString, PropOption_CoerceToBoolean, and PropOption_CoerceToReference flags.
  //
  PropOption_Coerce = 197112;
  // Field: PropOption_CoerceBadNumbersToZero
  //
  // (Value: 0x40000) Use this option to attempt to coerce a non-numeric string to a number that yields zero instead of an error.
  //
  PropOption_CoerceBadNumbersToZero = 262144;
  // Field: PropOption_OverrideNotDeletable
  //
  // (Value: 0x400000) Use with methods that delete properties to override the PropFlags_NotDeletable flag.
  //
  PropOption_OverrideNotDeletable = 4194304;
  // Field: PropOption_DoNotShareProperties
  //
  // (Value: 0x8000000) Use this value with the PropertyObject.Clone method of the PropertyObject class. Normally, if a cloned object has a subproperty that has the PropFlags_Shared flag set, that subproperty is shared between the original object and the clone; that is, both objects point to the same subproperty object. This option prevents such subproperties from being shared between the original object and the clone.
  //
  PropOption_DoNotShareProperties = 134217728;
  // Field: PropOption_CopyAllFlags
  //
  // (Value: 0x20000000) Use this value with the PropertyObject.Clone method to require all flags in the object and the subproperties to be copied. If you do not pass this option, the Clone function removes flags such as PropFlags_NotDeletable and PropFlags_NotEditable from the copy.
  //
  PropOption_CopyAllFlags = 536870912;
  option allow_alias = true;
}

// module 

// PropertyFlags
//
// These constants represent the flags you can set and get on PropertyObject objects. Use the bitwise-OR operator to specify more than one flag for a particular PropertyObject object.
//
enum PropertyFlags {
  PropertyFlags_reservedZero = 0;
  // Field: PropFlags_NotEditable
  //
  // (Value: 0x1) Set this flag to prevent the user from editing the object or deleting the properties of the object in a sequence editor.
  //
  PropFlags_NotEditable = 1;
  // Field: PropFlags_PassByReference
  //
  // (Value: 0x4) This flag allows a sequence to control how TestStand passes each parameter to it. Set this flag to pass the parameter by reference. Remove this flag to pass a copy of the parameter.
  //
  PropFlags_PassByReference = 4;
  // Field: PropFlags_Hidden
  //
  // (Value: 0x8) Set this flag in an object to prevent it from appearing in the sequence editor unless the Show Hidden Properties station option is set.
  //
  PropFlags_Hidden = 8;
  // Field: PropFlags_HiddenInTypes
  //
  // (Value: 0x10) Set this flag in an object to prevent it from being seen in the sequence editor Type view unless the Show Hidden Properties station option is set.
  //
  PropFlags_HiddenInTypes = 16;
  // Field: PropFlags_IntermediateExprValue
  //
  // (Value: 0x40) Indicates that the object is a temporary object created as the result of an expression evaluation. The PropertyObject.EvaluateEx method can return an object with this flag set.
  //
  PropFlags_IntermediateExprValue = 64;
  // Field: PropFlags_DontTypeCheckParameter
  //
  // (Value: 0x80) Set this flag in a sequence parameter to disable type-checking for the parameter.
  //
  PropFlags_DontTypeCheckParameter = 128;
  // Field: PropFlags_Propagate
  //
  // (Value: 0x100) This flag applies only to local variables. If you set the Propagate flag for a sequence local, the variable also appears at run-time as a local variable in subsequences the sequence calls. The variable continues to propagate as the call chain extends.
  //
  PropFlags_Propagate = 256;
  // Field: PropFlags_PermitPropagation
  //
  // (Value: 0x200) This flag applies only to local variables. TestStand uses the PermitPropagation flag to determine which variable takes precedence when a subsequence defines a variable with the same name as a variable the calling sequence propagates. If you do not set the PermitPropagation flag, TestStand preserves the subsequence local variable. If you set the PermitPropagation flag, TestStand replaces the subsequence variable with the variable the caller propagates.
  //
  PropFlags_PermitPropagation = 512;
  // Field: PropFlags_IsMeasurementValue
  //
  // (Value: 0x400) Set this flag on a property to indicate that the value represents a measurement. Utilities and components can identify measurement values by searching for properties that set the IsMeasurementValue flag. Typically, a component considers that the IsMeasurementValue flag on a container property applies recursively to the subproperties of the container.
  //
  PropFlags_IsMeasurementValue = 1024;
  // Field: PropFlags_DontCopyToResults
  //
  // (Value: 0x800) After executing a step, TestStand automatically copies a subset of the step properties to the end of the result list. You can set this flag for a step subproperty to prevent TestStand from copying the property to the result list.
  //
  PropFlags_DontCopyToResults = 2048;
  // Field: PropFlags_IsLimit
  //
  // (Value: 0x1000) Set this flag on a property to indicate that it contains a test limit value. Utilities and components can identify limit values by searching for properties that set the IsLimit flag. Typically, a component considers that the IsLimit flag on a container property applies recursively to the subproperties of the container.
  //
  PropFlags_IsLimit = 4096;
  // Field: PropFlags_IncludeInReport
  //
  // (Value: 0x2000) Set this flag on a property to specify that a report generator displays the property in the report. This flag affects only properties that are in a result list or that TestStand copies to a result list. Typically, a report generator considers that the IncludeInReport flag on a container property applies recursively to the subproperties of the container. Typically, a report generator does not recursively apply this flag from a property to its attributes. Set this flag on both the attribute and on the property that owns the top-level attribute for the attribute to appear in the report.
  //
  PropFlags_IncludeInReport = 8192;
  // Field: PropFlags_ExcludeFromComparison
  //
  // (Value: 0x10000) Set this flag in a property to ignore the property when the containing object is compared to another object. This flag affects the PropertyObject.IsEqualTo method.
  //
  PropFlags_ExcludeFromComparison = 65536;
  // Field: PropFlags_Shared
  //
  // (Value: 0x20000) Use this flag to specify that a property be shared among multiple copies of the containing object. If this flag is set when the containing object is copied, such as creating an instance of a type or calling the PropertyObject.Clone method, the copy of the object receives a pointer to the property rather than a copy of the property. In the sequence editor, you can change only the value of a shared property, not the shared property in the instance of the type.
  //
  PropFlags_Shared = 131072;
  // Field: PropFlags_SharedAtRunTime
  //
  // (Value: 0x40000) This flag is similar to PropFlags_Shared, except the flag is honored only during run time.
  //
  PropFlags_SharedAtRunTime = 262144;
  // Field: PropFlags_ExcludeFromCopy
  //
  // (Value: 0x80000) Set this flag on a property in a data type or step type to prevent the property from being copied when an instance of the type is created. Note: This property has no effect when set on a property in an instance of a type.
  //
  PropFlags_ExcludeFromCopy = 524288;
  // Field: PropFlags_UnstructuredProperty
  //
  // (Value: 0x200000) This flag indicates that no type restrictions exist for the property. Separate instances of the property can contain objects of different types.
  //
  PropFlags_UnstructuredProperty = 2097152;
  // Field: PropFlags_NotDeletable
  //
  // (Value: 0x400000) Set this flag in any object to prevent the user from deleting the object in a sequence editor.
  //
  PropFlags_NotDeletable = 4194304;
  // Field: PropFlags_CommentNotEditable
  //
  // (Value: 0x1000000) Set this flag to prevent the user from editing the comment on the object in a sequence editor.
  //
  PropFlags_CommentNotEditable = 16777216;
  // Field: PropFlags_SerializeAlias
  //
  // (Value: 0x2000000) Indicates that when serialized, the alias object serializes the object for which it is an alias.
  //
  PropFlags_SerializeAlias = 33554432;
  // Field: PropFlags_NameNotEditable
  //
  // (Value: 0x4000000) Set this flag to prevent the user from editing the name of the object in a sequence editor.
  //
  PropFlags_NameNotEditable = 67108864;
}

// module 

// GetSeqFileOptions
//
// These constants represent the options you can use with the getSeqFileFlags parameter of the Engine.GetSequenceFileEx method. Use the bitwise-OR operator to specify more than one option.
//
enum GetSeqFileOptions {
  // Field: GetSeqFile_NoOptions
  //
  // (Value: 0x0) No options.
  //
  GetSeqFile_NoOptions = 0;
  // Field: GetSeqFile_PreloadModules
  //
  // (Value: 0x1) If this flag is set, TestStand honors the Module Load options for the sequence and launches the preload progress dialog box when opening the file. Otherwise, it does not preload any of the modules the steps in the sequence use or display the preload progress dialog box.
  //
  GetSeqFile_PreloadModules = 1;
  // Field: GetSeqFile_UpdateFromDisk
  //
  // (Value: 0x2) If this flag is set and the sequence is currently in memory, TestStand checks the date of the file on disk and reloads it if it is newer. If the flag is not set and the sequence is currently in memory, TestStand does not load the file.
  //
  GetSeqFile_UpdateFromDisk = 2;
  // Field: GetSeqFile_AllowTypeConflicts
  //
  // (Value: 0x4) If this flag is set, conflicts TestStand encounters between the sequence and types currently in memory do not prevent TestStand from loading the sequence. If this flag is not set, TestStand returns an error as soon as it encounters a type conflict.
  // Note: The Engine.GetSequenceFileEx method ignores this value.
  //
  GetSeqFile_AllowTypeConflicts = 4;
  // Field: GetSeqFile_CheckModelOptions
  //
  // (Value: 0x8) If this flag is set, TestStand verifies that the sequence file does not refer to a specific process model file that conflicts with the current settings on the Model tab of the Station Options dialog box.
  //
  GetSeqFile_CheckModelOptions = 8;
  // Field: GetSeqFile_DoNotRunLoadCallback
  //
  // (Value: 0x10) If this flag is set, TestStand does not run the SequenceFileLoad callback sequence. Even if you use this option, TestStand executes the SequenceFileLoad callback for subsequent calls to the Engine.GetSequenceFileEx method that do not use this option. TestStand does not execute the SequenceFileUnload callback when you release the sequence file with the Engine.ReleaseSequenceFileEx method if all calls to obtain the sequence file use this option.
  //
  GetSeqFile_DoNotRunLoadCallback = 16;
  // Field: GetSeqFile_FindFile
  //
  // (Value: 0x20) If this flag is set, TestStand attempts to find a relative pathname using the Engine.FindFileEx method.
  //
  GetSeqFile_FindFile = 32;
  // Field: GetSeqFile_SearchCurrentDir
  //
  // (Value: 0x40) If this flag is set, TestStand attempts to find a relative pathname by searching the current directory first.
  //
  GetSeqFile_SearchCurrentDir = 64;
  // Field: GetSeqFile_OperatorInterfaceFlags
  //
  // (Value: 0x6B) The standard set of flags a user interface uses. This is the combination of the GetSeqFile_CheckModelOptions, GetSeqFile_PreloadModules, GetSeqFile_FindFile, GetSeqFile_SearchCurrentDir, and GetSeqFile_UpdateFromDisk flags.
  //
  GetSeqFile_OperatorInterfaceFlags = 107;
  // Field: GetSeqFile_GetFileOnlyIfInCache
  //
  // (Value: 0x200) If this flag is set, the Engine.GetSequenceFileEx method returns a sequence file only if the file is already in the engine internal cache. If the file is not in the cache, the Engine.GetSequenceFileEx method returns a NULL reference.
  //
  GetSeqFile_GetFileOnlyIfInCache = 512;
}

// SequenceTypes
//
// This data type contains values that specify the sequence type. Use the values of this enumeration with the Sequence.Type property.
//
enum SequenceTypes {
  // Field: SeqType_Normal
  //
  // (Value: 0) The sequence is not a callback or an entry point.
  //
  SeqType_Normal = 0;
  // Field: SeqType_Callback
  //
  // (Value: 1) The sequence is a Process Model callback.
  //
  SeqType_Callback = 1;
  // Field: SeqType_ExeEntryPoint
  //
  // (Value: 3) The sequence is an Execution entry point.
  //
  SeqType_ExeEntryPoint = 3;
  // Field: SeqType_CfgEntryPoint
  //
  // (Value: 5) The sequence is a Configuration entry point.
  //
  SeqType_CfgEntryPoint = 5;
  // Field: SeqType_ReservedCallback
  //
  // (Value: 7) Only the Sequence.GetEffectiveType method returns this value. The sequence is one of the predefined callbacks TestStand reserves.
  //
  SeqType_ReservedCallback = 7;
}

// module 

// ExecutionTypeMask
//
// Use these constants to specify the executionTypeMaskParam parameter of the Engine.NewExecution, Engine.NewHierarchicalExecution, and  SequenceContext.NewExecution methods.
//
enum ExecutionTypeMask {
  // Field: ExecTypeMask_Normal
  //
  // (Value: 0) Specifies that the execution is visible in the window when it starts.
  //
  ExecTypeMask_Normal = 0;
  // Field: ExecTypeMask_InitiallyHidden
  //
  // (Value: 0x1) Specifies that an execution does not appear in a window unless a trace or break event occurs. Typically, you use this constant for executions you do not want the user to see unless an error occurs. Use this constant with ExecTypeMask_TracingInitiallyOff flag to hide the execution even when tracing is on for the application.
  //
  ExecTypeMask_InitiallyHidden = 1;
  // Field: ExecTypeMask_TracingInitiallyOff
  //
  // (Value: 0x2) Disables tracing for the execution. Tracing can be turned back on by either a sequence call setting or by setting the RunState.Tracing property of the sequence context to True.
  //
  ExecTypeMask_TracingInitiallyOff = 2;
  // Field: ExecTypeMask_InitiallySuspended
  //
  // (Value: 0x4) Specifies that the execution is created in a suspended state. You must call the Execution.Resume method to continue execution.
  //
  ExecTypeMask_InitiallySuspended = 4;
  // Field: ExecTypeMask_NotRestartable
  //
  // (Value: 0x8) Specifies that the execution cannot be restarted with the Execution.RestartEx method.
  //
  ExecTypeMask_NotRestartable = 8;
  // Field: ExecTypeMask_CloseWindowWhenDone
  //
  // (Value: 0x10) Directs the sequence editor and user interfaces to close the Execution window when it finishes executing.
  //
  ExecTypeMask_CloseWindowWhenDone = 16;
  // Field: ExecTypeMask_BreakOnStepFailure
  //
  // (Value: 0x20) Specifies whether the sequence editor and user interfaces suspend when a step fails. TestStand does not suspend an execution on a failing Sequence Call step if the step that caused the sequence failure already suspended execution. When this constant is not set, TestStand suspends execution based on the value of the setting in the StationOptions.BreakOnStepFailure property.
  //
  ExecTypeMask_BreakOnStepFailure = 32;
  // Field: ExecTypeMask_BreakOnSequenceFailure
  //
  // (Value: 0x40) Specifies whether the sequence editor and user interfaces suspend when a failing step causes a sequence failure to first occur. TestStand does not suspend on failing Sequence Call steps already in the stack. If the sequence failure setting is reset, TestStand suspends when the next failing step causes sequence failure. When this constant is not set, TestStand suspends execution based on the value of the setting in the StationOptions.BreakOnSequenceFailure property.
  //
  ExecTypeMask_BreakOnSequenceFailure = 64;
  // Field: ExecTypeMask_AutoWaitAtEndOfSequence
  //
  // (Value: 0x80) Use this option to have the calling sequence wait for the launching execution to complete before the calling sequence returns. This constant applies only to the SequenceContext.NewExecution method.
  //
  ExecTypeMask_AutoWaitAtEndOfSequence = 128;
  // Field: ExecTypeMask_UseSTA
  //
  // (Value: 0x100) Specifies whether TestStand initializes the concurrency model of the thread as single-threaded apartment (STA) or multi-threaded apartment (MTA). By default, TestStand initializes new executions and threads to use the MTA model. A thread must use the STA model if the thread creates or launches a dialog box that contains ActiveX controls.
  // If you use this option to launch a sequence with a step that displays an ActiveX control, you might need to set the Load Option on the Run Options tab of the Step Properties dialog box to Load dynamically. This option ensures that TestStand loads the module the step calls in the thread initialized as STA.
  //
  ExecTypeMask_UseSTA = 256;
  // Field: ExecTypeMask_DisplayPreloadProgress
  //
  // (Value: 0x200) Specifies to launch the Preload Progress dialog box while preloading code modules for the execution of a sequence file. You normally use this flag only for executions you initiate from a user interface.
  //
  ExecTypeMask_DisplayPreloadProgress = 512;
  // Field: ExecTypeMask_DiscardArgumentsWhenDone
  //
  // (Value: 0x400) Directs the execution to discard its arguments when it finishes executing. Executions normally hold arguments until the execution is destroyed so the execution can use the arguments again if the execution restarts. However, because the execution holds the arguments, arguments that contain a reference to a .NET object prevent TestStand from unloading .NET assemblies until the execution is destroyed. Use this option to avoid this situation and to ensure that TestStand more promptly cleans up arguments. When using this option, if you restart the execution, the execution no longer uses any arguments unless you use the Execution.RestartWithNewArguments method to restart it.
  //
  ExecTypeMask_DiscardArgumentsWhenDone = 1024;
}

// module 

// SpecifyModuleOptions
//
// These constants represent the options you can use with the Step.SpecifyModule method. Use the bitwise-OR operator to specify more than one option.
//
enum SpecifyModuleOptions {
  // Field: SpecMod_NoOptions
  //
  // (Value: 0x0) No options.
  //
  SpecMod_NoOptions = 0;
  // Field: SpecMod_ReadOnly
  //
  // (Value: 0x1) Use this option to create a read-only version of the Specify Module dialog box.
  //
  SpecMod_ReadOnly = 1;
  // Field: SpecMod_NoSyntaxChecking
  //
  // (Value: 0x2) Use this option to disable expression syntax checking when closing the Specify Module dialog box.
  //
  SpecMod_NoSyntaxChecking = 2;
  // Field: SpecMod_AllowPrototypeChanges
  //
  // (Value: 0x4) Use this option to change the function prototype of the module.
  //
  SpecMod_AllowPrototypeChanges = 4;
  // Field: SpecMod_NoParameterLogging
  //
  // (Value: 0x10) Use this option to prevent specifying parameters to log as additional results in the Specify Module dialog box. When you use this option, the parameters control does not include a Log column and does not include an Advanced Logging menu item in the context menu.
  //
  SpecMod_NoParameterLogging = 16;
}

// module 

// HierarchicalExecutionFlags
//
// Use these constants to specify the hierarchicalExecutionFlags parameter of the Engine.NewHierarchicalExecution method.
//
enum HierarchicalExecutionFlags {
  HierarchicalExecutionFlags_reservedZero = 0;
  // Field: HierarchicalExecMask_DontRunSetupAndCleanup
  //
  // (Value: 0x2) Specifies that a hierarchical execution does not run setup or Cleanup steps when it generates a call stack. This flag applies to the sequences that contain the Sequence Call steps you pass to the sequenceCallSteps parameter of the Engine.NewHierarchicalExecution method.
  //
  HierarchicalExecMask_DontRunSetupAndCleanup = 2;
  // Field: HierarchicalExecMask_RunRemainingSequence
  //
  // (Value: 0x4) Specifies that the execution continues normally when the call stack unwinds. When the Sequence Call steps return from the call stack the execution generates, the remaining steps execute normally in the sequences that contain the calls.
  //
  HierarchicalExecMask_RunRemainingSequence = 4;
  // Field: HierarchicalExecMask_IgnorePreconditions
  //
  // (Value: 0x8): Specifies that when Engine.NewHierarchicalExecution creates the call stack the arguments specify, it does not check the preconditions of the Sequence Call steps that comprise the call stack.
  //
  HierarchicalExecMask_IgnorePreconditions = 8;
}

// module 

// RestartOptions
//
// These constants represent the options you can use with the options parameter of the Execution.RestartEx method. Use the bitwise-OR operator to specify more than one option.
//
enum RestartOptions {
  // Field: RestartOption_NoOptions
  //
  // (Value: 0x0) No options.
  //
  RestartOption_NoOptions = 0;
  // Field: RestartOption_BreakOnEntry
  //
  // (Value: 0x1) Use this option to suspend execution before executing the first step.
  //
  RestartOption_BreakOnEntry = 1;
  // Field: RestartOption_OverrideNotRestartable
  //
  // (Value: 0x2) Use this option to restart an execution created with the ExecutionTypeMask.ExecTypeMask_NotRestartable option.
  //
  RestartOption_OverrideNotRestartable = 2;
  // Field: RestartOption_BreakOnStepFailure
  //
  // (Value: 0x4) Specifies if the sequence editor and user interfaces suspend when a step fails. TestStand does not suspend an execution on a failing Sequence Call step if the step that caused the sequence failure already suspended execution.
  //
  RestartOption_BreakOnStepFailure = 4;
  // Field: RestartOption_BreakOnSequenceFailure
  //
  // (Value: 0x8) Specifies if the sequence editor and user interfaces suspend when a failing step causes a sequence failure to first occur. TestStand does not suspend on failing Sequence Call steps already in the stack. If the sequence failure setting is reset, TestStand suspends when the next failing step causes sequence failure.
  //
  RestartOption_BreakOnSequenceFailure = 8;
}

// module 

// FileOpenStatusFlags
//
// Use these constants to specify the PropertyObjectFile.OpenStatus property. Generally, only user interfaces need to set this property.
//
enum FileOpenStatusFlags {
  FileOpenStatusFlags_reservedZero = 0;
  // Field: OpenStatus_InWindow
  //
  // (Value: 0x1) Specifies that the file is open and displayed in a window.
  //
  OpenStatus_InWindow = 1;
}

// module 

// PropertyDialogOptions
//
// These constants represent the options you can use with the dlgOptions parameter of the PropertyObject.DisplayPropertiesDialog method. Use the bitwise-OR operator to specify more than one option.
//
enum PropertyDialogOptions {
  // Field: PropDlgOption_NoOptions
  //
  // (Value: 0x0) No option.
  //
  PropDlgOption_NoOptions = 0;
  // Field: PropDlgOption_ShowViewContentsButton
  //
  // (Value: 0x2) Adds a View Contents button to the bottom of the dialog box. Click the View Contents button to close the dialog box and include the PropDlgOutput_ViewContents flag in the return value of the method that displays the dialog box. The caller of the method that launches the dialog box responds to the View Contents button by displaying the object to which the dialog box applies in the user interface.
  //
  PropDlgOption_ShowViewContentsButton = 2;
  // Field: PropDlgOption_DisableAdvancedButton
  //
  // (Value: 0x4) Disables the Advanced button in the dialog box to prevent the user from editing the flag settings for the property.
  //
  PropDlgOption_DisableAdvancedButton = 4;
  // Field: PropDlgOption_DisableNumericFormatButton
  //
  // (Value: 0x8) Disables the Numeric Format button in the dialog box to prevent the user from changing the format of the property.
  //
  PropDlgOption_DisableNumericFormatButton = 8;
  // Field: PropDlgOption_UseVariablesViewDialog
  //
  // (Value: 0x10) Display the version of the dialog used by the TestStand Sequence Editor Variables View.  Currently applies only to DisplayFlagsDialog.
  //
  PropDlgOption_UseVariablesViewDialog = 16;
  // Field: PropDlgOption_ModalToAppMainWind
  //
  // (Value: 0x10000) By default, the dialog box is modal to the last active window of the calling thread, or if none exists, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  //
  PropDlgOption_ModalToAppMainWind = 65536;
  // Field: PropDlgOption_ReadOnly
  //
  // (Value: 0x20000) Use this option to create a read-only version of the dialog box.
  //
  PropDlgOption_ReadOnly = 131072;
}

// module 

// PropertyDialogOutputs
//
// These constants represent the return values of the PropertyObject.DisplayPropertiesDialog method. Use the bitwise-AND operator with the return value to determine whether any of these flags are set.
//
enum PropertyDialogOutputs {
  PropertyDialogOutputs_reservedZero = 0;
  // Field: PropDlgOutput_AppliedToAllInstances
  //
  // (Value: 0x1) For types, indicates that the user selected the Apply Value to All Loaded Instances of the Type option and that all instances were updated.
  //
  PropDlgOutput_AppliedToAllInstances = 1;
  // Field: PropDlgOutput_AppliedChanges
  //
  // (Value: 0x2) Indicates that the user clicked OK.
  //
  PropDlgOutput_AppliedChanges = 2;
  // Field: PropDlgOutput_ViewContents
  //
  // (Value: 0x4) Indicates that the user clicked View Contents.
  //
  PropDlgOutput_ViewContents = 4;
  // Field: PropDlgOutput_ModifiedObject
  //
  // (Value: 0x8) Indicates that the dialog box modified the object.
  //
  PropDlgOutput_ModifiedObject = 8;
  // Field: PropDlgOutput_ModifiedFile
  //
  // (Value: 0x10) Indicates that the dialog box modified the file that contains the object.
  //
  PropDlgOutput_ModifiedFile = 16;
}

// module 

// EvaluationOptions
//
// These constants represent the options you can use with the evaluationOptions parameter of the PropertyObject.EvaluateEx, Expression.Evaluate,  Expression.Validate, ExpressionEdit.Evaluate, and Engine.CheckExpression methods. Use the bitwise-OR operator to specify more than one option.
//
enum EvaluationOptions {
  // Field: EvalOption_NoOptions
  //
  // (Value: 0x0) No options.
  //
  EvalOption_NoOptions = 0;
  // Field: EvalOption_DoNotAlterValues
  //
  // (Value: 0x1) Use this option to prevent TestStand from altering the value of any variable or property the expression contains. The Expression.Validate and Engine.CheckExpression methods do not use this value because these methods never alter values.
  //
  EvalOption_DoNotAlterValues = 1;
  // Field: EvalOption_AllowEmptyExpression
  //
  // (Value: 0x2) Use this option to prevent TestStand from treating empty expressions as syntax errors.
  //
  EvalOption_AllowEmptyExpression = 2;
  // Field: EvalOption_AllowIndexingEmptyArrays
  //
  // (Value: 0x4) Use this option to direct TestStand to return a value with a type that is the array element type for empty arrays with subscripts. If you do not specify this option, TestStand treats an empty array with subscripts as an error.
  //
  EvalOption_AllowIndexingEmptyArrays = 4;
  // Field: EvalOption_CreateNonExistentVariables
  //
  // (Value: 0x8) Use this option to have TestStand create temporary objects for variables that do not exist in an expression. This option is useful when evaluating an expression for error checking if the expression might contain dynamically created variables.
  //
  EvalOption_CreateNonExistentVariables = 8;
  // Field: EvalOption_ForErrorChecking
  //
  // (Value: 0x10) Use this option to direct TestStand to evaluate the expression in order to check the expression for errors. This option makes errors reported at edit time more closely match errors that might occur at run time. For example, when using this option, expressions do not use short-circuit evaluation, ensuring that TestStand checks the entire expression for errors. This option also enables the behavior of the #NoValidation directive. Expression validation methods, such as Engine.CheckExpression and Expression.ValidateEvaluationType, automatically include this option.
  //
  EvalOption_ForErrorChecking = 16;
  // Field: EvalOption_IgnoreNoValidationDirective
  //
  // (Value: 0x20) This option disables the behavior of the #NoValidation directive when checking an expression for errors. Use this option to find errors the #NoValidation directive normally suppresses.
  //
  EvalOption_IgnoreNoValidationDirective = 32;
}

// module 

// ResetTypeInstanceOptions
//
// These constants represent the options you can use with the options parameter of the Engine.ResetTypeInstances method. Use the bitwise-OR operator to specify more than one option.
// Note: Avoid using the ResetTypeInst_ResetFlags flag because it might result in unexpected behavior. In most cases, you should not reset certain flags on type instances. For example, the PropFlags_PassByReference flag is set on parameters of Sequence Call steps. Calling the Engine.ResetTypeInstances method on a type can change whether TestStand passes a sequence parameter that is an instance of the type by reference.
//
enum ResetTypeInstanceOptions {
  // Field: ResetTypeInst_NoOptions
  //
  // (Value: 0x0) No options.
  //
  ResetTypeInst_NoOptions = 0;
  // Field: ResetTypeInst_ResetValues
  //
  // (Value: 0x1) Resets the property values of type instances to the value of the type definition.
  //
  ResetTypeInst_ResetValues = 1;
  // Field: ResetTypeInst_ResetFlags
  //
  // (Value: 0x2) Resets the property flags of type instances to the flags of the type definition.
  //
  ResetTypeInst_ResetFlags = 2;
  // Field: ResetTypeInst_RecurseSubProperties
  //
  // (Value: 0x4) Resets flags or values of subproperties of type instances in addition to the top level object.
  //
  ResetTypeInst_RecurseSubProperties = 4;
}

// module 

// HTBasicStepAdditions
//
// Note: Do not use the following constants to access the adapter-specific properties of a step. Use the HTBasicModule interface for the Module object for the step. Use the Step.Module property to acquire a reference to a Module object.
// In TestStand 3.0 or later, these string constants are obsolete.
// These string constants were previously used to create lookup strings to access the adapter-specific properties of an HTBasic step.
//
service HTBasicStepAdditions {
  // Field: HTBasicStep_ModulePathProp
  //
  // (Value: "ModulePath") String that contains the pathname of the module that contains the HTBasic subroutine to call.
  //
  rpc Get_HTBasicStep_ModulePathProp(ConstantValueRequest) returns (stringResponse);
  // Field: HTBasicStep_WorkingDirPathProp
  //
  // (Value "WorkingDirPath") String that contains the specific working directory the adapter sets when calling the subroutine. This is used only if HTBasicStep_SetWorkingDirProp is set to the specific value.
  //
  rpc Get_HTBasicStep_WorkingDirPathProp(ConstantValueRequest) returns (stringResponse);
  // Field: HTBasicStep_FunctionNameProp
  //
  // (Value: "SubName") String that contains the name of the HTBasic subroutine to call.
  //
  rpc Get_HTBasicStep_FunctionNameProp(ConstantValueRequest) returns (stringResponse);
  // Field: HTBasicStep_ShowAppProp
  //
  // (Value: "ShowApp") Boolean property that determines whether the adapter displays the HTBasic application when calling the subroutine.
  //
  rpc Get_HTBasicStep_ShowAppProp(ConstantValueRequest) returns (stringResponse);
  // Field: HTBasicStep_SetWorkingDirProp
  //
  // (Value: "SetWorkingDirType") Number property that specifies how to set the working directory when calling the subroutine.
  // @table(2,5,false,0!Use adapter default!1!Do not set working directory!2!Set to HTBasic server directory!3!Set to subroutine file directory!4!Use specific directory stored in HTBasicStep_WorkingDirPathProp)
  //
  rpc Get_HTBasicStep_SetWorkingDirProp(ConstantValueRequest) returns (stringResponse);
}

// module 

// MenuItemProperties
//
// Use these property names with the property objects the Engine.GetInsertStepMenuStructure, Engine.GetInsertVariableMenuStructure, and Step.GetEditSubstepMenuStructure methods return to access information about menu structures.
//
service MenuItemProperties {
  // Field: Menu_NameProp
  //
  // (Value: "Name") String value that specifies the text to display for the menu item.
  //
  rpc Get_Menu_NameProp(ConstantValueRequest) returns (stringResponse);
  // Field: Menu_IsSubmenuProp
  //
  // (Value: "IsSubMenu") Boolean value that specifies if the menu item is a submenu. Use the Menu_MenuItemsProp to access the submenu items.
  //
  rpc Get_Menu_IsSubmenuProp(ConstantValueRequest) returns (stringResponse);
  // Field: Menu_SeparatorAboveProp
  //
  // (Value: "SeparatorAbove") Boolean value that specifies if a separator exists above the menu item.
  //
  rpc Get_Menu_SeparatorAboveProp(ConstantValueRequest) returns (stringResponse);
  // Field: Menu_IsDimmedProp
  //
  // (Value: "IsDimmed") Boolean value that specifies if the menu item is disabled.
  //
  rpc Get_Menu_IsDimmedProp(ConstantValueRequest) returns (stringResponse);
  // Field: Menu_SubstepIndexProp
  //
  // (Value: "SubstepIndex") Number value that is the index of the substep for this menu item. Only the StepType.GetSubstep method sets this property.
  //
  rpc Get_Menu_SubstepIndexProp(ConstantValueRequest) returns (stringResponse);
  // Field: Menu_MenuItemsProp
  //
  // (Value: "MenuItems") Array of property objects that represent the menu items in a submenu.
  //
  rpc Get_Menu_MenuItemsProp(ConstantValueRequest) returns (stringResponse);
  // Field: Menu_ToolIDProp
  //
  // (Value: "ToolMenuId") Number value that specifies the Tools menu ID for the menu item. Only  the Engine.GetToolMenuStructure method sets this property.
  //
  rpc Get_Menu_ToolIDProp(ConstantValueRequest) returns (stringResponse);
  // Field: Menu_EditsSelectedFileProp
  //
  // (Value: "EditsSelectedFile") Boolean value that specifies whether a Tools menu item edits the selected file. Only the Engine.GetToolMenuStructure method set this property.
  //
  rpc Get_Menu_EditsSelectedFileProp(ConstantValueRequest) returns (stringResponse);
  // Field: Menu_SupportsReadOnlyProp
  //
  // (Value: "SupportsReadOnly") Boolean value that specifies if an Edit substep menu item supports launching a dialog box as read-only when the Step.EditAsReadOnly property is True.
  //
  rpc Get_Menu_SupportsReadOnlyProp(ConstantValueRequest) returns (stringResponse);
  // Field: Menu_HasEditPanelProp
  //
  // (Value: "HasEditPanel") Boolean value that specifies whether an Edit substep menu item has a corresponding edit panel that displays in the Step Settings pane of the sequence editor. The sequence editor does not invoke an edit substep if the substep has an edit panel.
  //
  rpc Get_Menu_HasEditPanelProp(ConstantValueRequest) returns (stringResponse);
}

// module 

// FrontEndCallbacks
//
// This constant represents the name of a Front-End callback sequence. Use this constant to specify the sequenceName parameter of the Engine.CallFrontEndCallbackEx method.
//
service FrontEndCallbacks {
  // Field: FrontEndCback_LoginLogout
  //
  // (Value: "LoginLogout") Specifies the callback used to log in and log out the current user.
  //
  rpc Get_FrontEndCback_LoginLogout(ConstantValueRequest) returns (stringResponse);
}

// SequenceDefaultValueScopes
//
// Use these constants with the Execution.GetSequenceDefaultValues, Execution.SetSequenceDefaultValues, and Execution.ClearSequenceDefaultValues methods to specify whether the method operates on the list of default value sequences for the execution or hierarchy of executions with which the execution is associated.
// You can associate default value sequences with either a specific execution or the hierarchy of executions with which this execution is associated. For example, setting a default value sequence on the hierarchy of executions associated with a Batch model applies the default value sequence to the controlling batch execution and all test socket executions. If an execution and the execution hierarchy both specify a default value sequence, TestStand uses the default value sequence the execution specifies.
//
enum SequenceDefaultValueScopes {
  SequenceDefaultValueScopes_reservedZero = 0;
  // Field: SeqDefValueScope_Execution
  //
  // (Value: 1) Specifies to operate on the list of default value sequences for the execution.
  //
  SeqDefValueScope_Execution = 1;
  // Field: SeqDefValueScope_ExecutionTree
  //
  // (Value: 2) Specifies to operate on the list of default value sequences for the hierarchy of executions with which the execution is associated.
  //
  SeqDefValueScope_ExecutionTree = 2;
}

// ExecutionRunStates
//
// The Execution.GetStates method returns one of these values to indicate the running state of the execution.
//
enum ExecutionRunStates {
  ExecutionRunStates_reservedZero = 0;
  // Field: ExecRunState_Running
  //
  // (Value: 1) The execution is running.
  //
  ExecRunState_Running = 1;
  // Field: ExecRunState_Paused
  //
  // (Value: 2) The execution is suspended.
  //
  ExecRunState_Paused = 2;
  // Field: ExecRunState_Stopped
  //
  // (Value: 3) The execution has finished executing.
  //
  ExecRunState_Stopped = 3;
}

// ExecutionTerminationStates
//
// The Execution.GetStates method returns one of these values to indicate whether the execution is terminating. If the execution is terminating, these values indicate how it is terminating.
//
enum ExecutionTerminationStates {
  ExecutionTerminationStates_reservedZero = 0;
  // Field: ExecTermState_Normal
  //
  // (Value: 1) The execution is not terminating.
  //
  ExecTermState_Normal = 1;
  // Field: ExecTermState_Terminating
  //
  // (Value: 2) TestStand is terminating the running execution.
  //
  ExecTermState_Terminating = 2;
  // Field: ExecTermState_TerminatingInteractive
  //
  // (Value: 3) TestStand is terminating the running interactive execution.
  //
  ExecTermState_TerminatingInteractive = 3;
  // Field: ExecTermState_Aborting
  //
  // (Value: 4) TestStand is aborting the running execution.
  //
  ExecTermState_Aborting = 4;
  // Field: ExecTermState_KillingThreads
  //
  // (Value: 5) TestStand is ending the threads in the execution.
  //
  ExecTermState_KillingThreads = 5;
}

// WriteFileFormat
//
// These constants specify the file format version TestStand uses to write a file.
// If you save a sequence file in a previous format and the file contains step types not present in the previous version of TestStand or if the file uses features the previous version of TestStand does not support, the sequence file you save will not function correctly.
// Note: TestStand does not warn you if the file you save cannot load or run in a previous version of TestStand.
//
enum WriteFileFormat {
  WriteFileFormat_reservedZero = 0;
  // Field: WriteFileFormat_Current
  //
  // (Value: 1) Specifies that TestStand writes out the file using the current TestStand file format.
  //
  WriteFileFormat_Current = 1;
  // Field: WriteFileFormat_TestStand4
  //
  // (Value: 8) Specifies that TestStand writes out the file using the TestStand 4.0 file format. Save the file in this format to enable TestStand version 4.0 to load the file.
  //
  WriteFileFormat_TestStand4 = 8;
  // Field: WriteFileFormat_TestStand41
  //
  // (Value: 9) Specifies that TestStand writes out the file using the TestStand 4.1 file format. Save the file in this format to enable TestStand version 4.1 to load the file.
  //
  WriteFileFormat_TestStand41 = 9;
  // Field: WriteFileFormat_TestStand42
  //
  // (Value: 10) Specifies that TestStand writes out the file using the TestStand 4.2 file format. Save the file in this format to enable TestStand version 4.2 to load the file.
  //
  WriteFileFormat_TestStand42 = 10;
  // Field: WriteFileFormat_TestStand45
  //
  // (Value: 11) Specifies that TestStand writes out the file using the TestStand 2010 file format. Save the file in this format to enable TestStand version 2010 to load the file. TestStand 4.5 is the internal version number for TestStand 2010.
  //
  WriteFileFormat_TestStand45 = 11;
  // Field: WriteFileFormat_TestStand50
  //
  // (Value: 12) Specifies that TestStand writes out the file using the TestStand 2012 file format. Save the file in this format to enable TestStand version 2012 to load the file. TestStand 5.0 is the internal version number for TestStand 2012.
  //
  WriteFileFormat_TestStand50 = 12;
  // Field: WriteFileFormat_TestStand51
  //
  // (Value: 13) Specifies that TestStand writes out the file using the TestStand 2013 file format. Save the file in this format to enable TestStand version 2013 to load the file. TestStand 5.1 is the internal version number for TestStand 2013.
  //
  WriteFileFormat_TestStand51 = 13;
  // Field: WriteFileFormat_TestStand_14_0
  //
  // (Value: 14) Specifies that TestStand writes out the file using the TestStand 2014 file format. Save the file in this format to enable TestStand version 2014 to load the file. TestStand 14.0 is the internal version number for TestStand 2014.
  //
  WriteFileFormat_TestStand_14_0 = 14;
  // Field: WriteFileFormat_TestStand_16_0
  //
  // (Value: 15) Specifies that TestStand writes out the file using the TestStand 2016 file format. Save the file in this format to enable TestStand version 2016 to load the file. TestStand 16.0 is the internal version number for TestStand 2016.
  //
  WriteFileFormat_TestStand_16_0 = 15;
  // Field: WriteFileFormat_TestStand_17
  //
  // (Value: 16) Specifies that TestStand writes out the file using the TestStand 2017 file format. Save the file in this format to enable TestStand version 2017 to load the file. TestStand 17.0 is the internal version number for TestStand 2017.
  //
  WriteFileFormat_TestStand_17 = 16;
  // Field: WriteFileFormat_TestStand_19
  //
  // (Value: 17) Specifies that TestStand writes out the file using the TestStand 2019 file format. Save the file in this format to enable TestStand version 2019 to load the file. TestStand 19.0 is the internal version number for TestStand 2019.
  //
  WriteFileFormat_TestStand_19 = 17;
  // Field: WriteFileFormat_TestStand_20
  //
  // (Value: 18) Specifies that TestStand writes out the file using the TestStand 2020 file format. Save the file in this format to enable TestStand version 2020 to load the file. TestStand 20.0 is the internal version number for TestStand 2020.
  //
  WriteFileFormat_TestStand_20 = 18;
  // Field: WriteFileFormat_TestStand_21
  //
  // (Value: 19) Specifies that TestStand writes out the file using the TestStand 2021 file format. Save the file in this format to enable TestStand version 2021 to load the file. TestStand 21.0 is the internal version number for TestStand 2021.
  //
  WriteFileFormat_TestStand_21 = 19;
}

// FileVersionAutoIncrement
//
// Use these constants with the StationOptions.SeqFileVersionAutoIncrementOpt property to specify whether to automatically increment a component of the sequence file version when the file is saved. Versions have four components: Major, Minor, Revision and Build. TestStand displays versions using decimal points to separate the components, such as "1.2.3.4".
//
enum FileVersionAutoIncrement {
  // Field: FileVersionInc_None
  //
  // (Value: 0) Specifies that sequence file versions are not automatically incremented.
  //
  FileVersionInc_None = 0;
  // Field: FileVersionInc_Major
  //
  // (Value: 1) Specifies that the major version number is incremented.
  //
  FileVersionInc_Major = 1;
  // Field: FileVersionInc_Minor
  //
  // (Value: 2) Specifies that the minor version number is incremented.
  //
  FileVersionInc_Minor = 2;
  // Field: FileVersionInc_Revision
  //
  // (Value: 3) Specifies that the revision version number is incremented.
  //
  FileVersionInc_Revision = 3;
  // Field: FileVersionInc_Build
  //
  // (Value: 4) Specifies that the build version number is incremented.
  //
  FileVersionInc_Build = 4;
}

// TypeVersionAutoIncrement
//
// Use the following constants with the StationOptions.TypeVersionAutoIncrementOpt property or with the versionIncOption parameter of PropertyObjectFile.CheckForModifiedTypes method.
//
enum TypeVersionAutoIncrement {
  // Field: TypeVersionInc_None
  //
  // (Value: 0) Do not increment type versions.
  //
  TypeVersionInc_None = 0;
  // Field: TypeVersionInc_Major
  //
  // (Value: 1) Auto-increment major version number.
  //
  TypeVersionInc_Major = 1;
  // Field: TypeVersionInc_Minor
  //
  // (Value: 2) Auto-increment minor version number.
  //
  TypeVersionInc_Minor = 2;
  // Field: TypeVersionInc_Revision
  //
  // (Value: 3) Auto-increment revision version number.
  //
  TypeVersionInc_Revision = 3;
  // Field: TypeVersionInc_Build
  //
  // (Value: 4) Auto-increment build version number.
  //
  TypeVersionInc_Build = 4;
}

// module 

// CheckForModifiedTypesOptions
//
// These constants represent the options you can use with the options parameter of the PropertyObjectFile.CheckForModifiedTypes method.
//
enum CheckForModifiedTypesOptions {
  // Field: CheckForModifiedTypes_UseStationOptions
  //
  // (Value: 0x0) Specifies to use the Before Saving Modified Types option on the File tab of the Station Options dialog box.
  //
  CheckForModifiedTypes_UseStationOptions = 0;
  // Field: CheckForModifiedTypes_AutoIncrementVersions
  //
  // (Value: 0x1) Specifies to disable the PropTypeFlags_IsModifiedType flag for a modified type and increment the version number of the type.
  //
  CheckForModifiedTypes_AutoIncrementVersions = 1;
  // Field: CheckForModifiedTypes_Prompt
  //
  // (Value: 0x2) Specifies to launch a warning dialog box if a modified type is found.
  //
  CheckForModifiedTypes_Prompt = 2;
  // Field: CheckForModifiedTypes_NoAction
  //
  // (Value: 0x4) Specifies to perform no action if a modified type is found.
  //
  CheckForModifiedTypes_NoAction = 4;
  // Field: CheckForModifiedTypes_RemoveTypesModifiedMark
  //
  // (Value: 0xC) Specifies to disable the PropTypeFlags_IsModifiedType flag for a modified type.
  //
  CheckForModifiedTypes_RemoveTypesModifiedMark = 12;
}

// module 

// LoadTypePaletteFilesOptions
//
// These constants represent the options you use with the options parameter of the Engine.LoadTypePaletteFilesEx method.
//
enum LoadTypePaletteFilesOptions {
  // Field: LoadTypePaletteOptions_NoOptions
  //
  // (Value: 0x0) Specifies the default behavior, which is to return an error to the caller of the method.
  //
  LoadTypePaletteOptions_NoOptions = 0;
  // Field: LoadTypePaletteOptions_DisplayErrors
  //
  // (Value: 0x1) Specifies to not return an error and to launch a warning dialog box that contains a description of all errors that occurred while loading the type palette files.
  //
  LoadTypePaletteOptions_DisplayErrors = 1;
}

// module 

// DebugOptions
//
// Use these constants to specify the type of debug operations TestStand performs.
//
enum DebugOptions {
  // Field: DebugOption_NoOptions
  //
  DebugOption_NoOptions = 0;
  // Field: DebugOption_StackChecking
  //
  DebugOption_StackChecking = 1;
  // Field: DebugOption_BufferChecking
  //
  DebugOption_BufferChecking = 2;
  // Field: DebugOption_ReportObjectLeaks
  //
  DebugOption_ReportObjectLeaks = 4;
  // Field: DebugOption_SendOutputMessagesToDebugger
  //
  DebugOption_SendOutputMessagesToDebugger = 8;
  // Field: DebugOption_ReportKnownOSandComponentProblems
  //
  DebugOption_ReportKnownOSandComponentProblems = 16;
}

// TypeCategories
//
// The following constants represent the categories to which a type can belong:
//
enum TypeCategories {
  // Field: TypeCategory_None
  //
  // (Value: 0) Specifies no data type.
  //
  TypeCategory_None = 0;
  // Field: TypeCategory_StepTypes
  //
  // (Value: 1) Specifies a step type.
  //
  TypeCategory_StepTypes = 1;
  // Field: TypeCategory_CustomDataTypes
  //
  // (Value: 2) Specifies a custom data type.
  //
  TypeCategory_CustomDataTypes = 2;
  // Field: TypeCategory_BuiltinDataTypes
  //
  // (Value: 3) Specifies a built-in data type.
  //
  TypeCategory_BuiltinDataTypes = 3;
}

// TypeConflictHandlerTypes
//
// These constants specify how TestStand responds when encountering two conflicting definitions for the same type. Type conflicts generally occur when TestStand reads a type from a sequence file that has a different structure than the type already loaded.
//
enum TypeConflictHandlerTypes {
  TypeConflictHandlerTypes_reservedZero = 0;
  // Field: ConflictHandler_Error
  //
  // (Value: 1) Specifies that the method returns an error if type conflicts exist.
  //
  ConflictHandler_Error = 1;
  // Field: ConflictHandler_Prompt
  //
  // (Value: 3) Specifies that the method prompts the user with a dialog box to resolve each type conflict.
  //
  ConflictHandler_Prompt = 3;
  // Field: ConflictHandler_UseGlobalType
  //
  // (Value: 4) Specifies that the method converts the conflicting type to the currently loaded (global) type if a type conflict exists.
  //
  ConflictHandler_UseGlobalType = 4;
}

// PropertyObjectFileTypes
//
// These constants represent the possible values for the PropertyObjectFile.FileType property. The FileType is set when the PropertyObjectFile is created, and you cannot change the value.
//
enum PropertyObjectFileTypes {
  // Field: FileType_ConfigFile
  //
  // (Value: 0) The Engine.ConfigFile file.
  //
  FileType_ConfigFile = 0;
  // Field: FileType_SequenceFile
  //
  // (Value: 1) A sequence file.
  //
  FileType_SequenceFile = 1;
  // Field: FileType_TypePaletteFile
  //
  // (Value: 2) A type palette file.
  //
  FileType_TypePaletteFile = 2;
  // Field: FileType_StationGlobalsFile
  //
  // (Value: 3) The Engine.GlobalsFile file.
  //
  FileType_StationGlobalsFile = 3;
  // Field: FileType_UsersFile
  //
  // (Value: 4) The Engine.UsersFile file.
  //
  FileType_UsersFile = 4;
  // Field: FileType_WorkspaceFile
  //
  // (Value: 5) A WorkspaceFile file.
  //
  FileType_WorkspaceFile = 5;
  // Field: FileType_ProjectFile
  //
  // (Value: 6) A TestStand project file.
  //
  FileType_ProjectFile = 6;
  // Field: FileType_PropertyObjectFile
  //
  // (Value: 7) A generic PropertyObjectFile.
  //
  FileType_PropertyObjectFile = 7;
  // Field: FileType_TemplatesFile
  //
  // (Value: 8) The Engine.GetTemplatesFile file.
  //
  FileType_TemplatesFile = 8;
  // Field: FileType_GeneralEngineConfigFile
  //
  // (Value: 9) A general engine configuration file.
  //
  FileType_GeneralEngineConfigFile = 9;
  // Field: FileType_SearchDirectoriesConfigFile
  //
  // (Value: 10) A search directories configuration file.
  //
  FileType_SearchDirectoriesConfigFile = 10;
  // Field: FileType_AdaptersConfigFile
  //
  // (Value: 11) An adapters configuration file.
  //
  FileType_AdaptersConfigFile = 11;
  // Field: FileType_TypePalettesConfigFile
  //
  // (Value: 12) A type palettes configuration file.
  //
  FileType_TypePalettesConfigFile = 12;
  // Field: FileType_CustomConfigFile
  //
  // (Value: 13) A custom configuration file.
  //
  FileType_CustomConfigFile = 13;
}

// WorkspaceObjectTypes
//
// This data type contains values that specify the type of a workspace object. Use the values of this enumeration with the WorkspaceObject.ObjectType property.
// 
//
enum WorkspaceObjectTypes {
  WorkspaceObjectTypes_reservedZero = 0;
  // Field: WorkspaceObjType_WorkspaceFile
  //
  // (Value: 1) Specifies a workspace file object.
  //
  WorkspaceObjType_WorkspaceFile = 1;
  // Field: WorkspaceObjType_ProjectFile
  //
  // (Value: 2) Specifies a project file object.
  //
  WorkspaceObjType_ProjectFile = 2;
  // Field: WorkspaceObjType_Folder
  //
  // (Value: 3) Specifies a folder object. Folders do not have a pathname associated with them.
  //
  WorkspaceObjType_Folder = 3;
  // Field: WorkspaceObjType_SequenceFile
  //
  // (Value: 4) Specifies a sequence file object.
  //
  WorkspaceObjType_SequenceFile = 4;
  // Field: WorkspaceObjType_OtherFile
  //
  // (Value: 5) Specifies a file other than a sequence file, workspace file, or project file, such as a code module. This type of object cannot contain other objects.
  //
  WorkspaceObjType_OtherFile = 5;
}

// SourceControlCommands
//
// This data type contains values that specify source code control commands. Use one of these values to specify the scCommand parameter of the WorkspaceObject.DoSourceControlCommand and WorkspaceObject.CanDoSourceControlCommand methods.
//
enum SourceControlCommands {
  SourceControlCommands_reservedZero = 0;
  // Field: SCCmd_AddToSC
  //
  // (Value: 1) Adds the specified files to source code control.
  //
  SCCmd_AddToSC = 1;
  // Field: SCCmd_RemoveFromSC
  //
  // (Value: 2) Removes the specified files from source code control.
  //
  SCCmd_RemoveFromSC = 2;
  // Field: SCCmd_CheckOut
  //
  // (Value: 3) Checks out the specified files from source code control.
  //
  SCCmd_CheckOut = 3;
  // Field: SCCmd_CheckIn
  //
  // (Value: 4) Checks in the specified files to source code control.
  //
  SCCmd_CheckIn = 4;
  // Field: SCCmd_GetLatest
  //
  // (Value: 5) Obtains the latest version of the specified files from source code control.
  //
  SCCmd_GetLatest = 5;
  // Field: SCCmd_UndoCheckOut
  //
  // (Value: 6) Undoes the check out of the specified files from source code control.
  //
  SCCmd_UndoCheckOut = 6;
  // Field: SCCmd_ShowDifferences
  //
  // (Value: 7) Shows the differences between the latest version in source code control and the local version of the specified file.
  //
  SCCmd_ShowDifferences = 7;
  // Field: SCCmd_ShowHistory
  //
  // (Value: 8) Shows the source code control history of the specified file.
  //
  SCCmd_ShowHistory = 8;
  // Field: SCCmd_ShowProperties
  //
  // (Value: 9) Shows the source code control properties of the specified file.
  //
  SCCmd_ShowProperties = 9;
  // Field: SCCmd_ShowProviderOptions
  //
  // (Value: 10) Launches the source code control provider options dialog box.
  //
  SCCmd_ShowProviderOptions = 10;
}

// MsgBoxTypes
//
// Use this enumeration to specify the msgBoxType parameter of the Engine.DisplayMessageBox method. These constants specify the icon and default title the message box displays.
//
enum MsgBoxTypes {
  // Field: MsgBox_Warning
  //
  // (Value: 0) Specifies an icon and default title that indicate a warning message.
  //
  MsgBox_Warning = 0;
  // Field: MsgBox_Information
  //
  // (Value: 1) Specifies an icon and default title that indicate an informational message.
  //
  MsgBox_Information = 1;
  // Field: MsgBox_Error
  //
  // (Value: 2) Specifies an icon and default title that indicate an error has occurred.
  //
  MsgBox_Error = 2;
  // Field: MsgBox_Custom
  //
  // (Value: 3) Specifies no icon and no default title.
  //
  MsgBox_Custom = 3;
}

// DecimalPointLocalizationOptions
//
// Use these constants to specify the decimalPointOption parameter of the Engine.LocalizeExpression, Engine.DelocalizeExpression, and Engine.GetLocalizedDecimalPoint methods. The decimalPointOption parameter specifies how TestStand determines which character it uses as the localized decimal point character.
//
enum DecimalPointLocalizationOptions {
  DecimalPointLocalizationOptions_reservedZero = 0;
  // Field: DecimalPoint_UsePreference
  //
  // (Value: 1) Use the Station Options localization preferences to determine whether to use the operating system setting.
  //
  DecimalPoint_UsePreference = 1;
  // Field: DecimalPoint_UseSystemSetting
  //
  // (Value: 2) Use the operating system setting.
  //
  DecimalPoint_UseSystemSetting = 2;
  // Field: DecimalPoint_UsePeriod
  //
  // (Value: 3) Use the period character.
  //
  DecimalPoint_UsePeriod = 3;
  // Field: DecimalPoint_UseComma
  //
  // (Value: 4) Use the comma character.
  //
  DecimalPoint_UseComma = 4;
}

// SequenceFileTypes
//
// This data type contains values that specify the type of a sequence file. The constants represent the possible values for the SequenceFile.SequenceFileType property.
//
enum SequenceFileTypes {
  // Field: SeqFileType_Normal
  //
  // (Value: 0) A normal sequence file.
  //
  SeqFileType_Normal = 0;
  // Field: SeqFileType_Model
  //
  // (Value: 1) A process model sequence file.
  //
  SeqFileType_Model = 1;
  // Field: SeqFileType_FrontEndCBacks
  //
  // (Value: 2) The sequence file containing Front-End callbacks.
  //
  SeqFileType_FrontEndCBacks = 2;
  // Field: SeqFileType_StationCBacks
  //
  // (Value: 3) The sequence file containing the Test Station callbacks.
  //
  SeqFileType_StationCBacks = 3;
  // Field: SeqFileType_Template
  //
  // (Value: 4) The sequence file containing the templates for callback sequences.
  //
  SeqFileType_Template = 4;
}

// module 

// PropertyObjectFileContentTypes
//
// These constants represent the value of the PropertyObjectFile.ContentType property for predefined types of PropertyObjectFiles.
//
service PropertyObjectFileContentTypes {
  // Field: FileContentType_ConfigFile
  //
  // (Value: "TEConfigFile") The Engine.ConfigFile file.
  //
  rpc Get_FileContentType_ConfigFile(ConstantValueRequest) returns (stringResponse);
  // Field: FileContentType_SequenceFile
  //
  // (Value: "SequenceFile") A sequence file.
  //
  rpc Get_FileContentType_SequenceFile(ConstantValueRequest) returns (stringResponse);
  // Field: FileContentType_TypePaletteFile
  //
  // (Value: "Types") A type palette file.
  //
  rpc Get_FileContentType_TypePaletteFile(ConstantValueRequest) returns (stringResponse);
  // Field: FileContentType_StationGlobalsFile
  //
  // (Value: "Globals") The Engine.GlobalsFile file.
  //
  rpc Get_FileContentType_StationGlobalsFile(ConstantValueRequest) returns (stringResponse);
  // Field: FileContentType_UsersFile
  //
  // (Value: "UserListFile") The Engine.UsersFile file.
  //
  rpc Get_FileContentType_UsersFile(ConstantValueRequest) returns (stringResponse);
  // Field: FileContentType_PropertyObjectFile
  //
  // (Value: "TSPropertyObjectFile") A generic PropertyObjectFile file.
  //
  rpc Get_FileContentType_PropertyObjectFile(ConstantValueRequest) returns (stringResponse);
  // Field: FileContentType_WorkspaceFile
  //
  // (Value: "TSWorkspaceFile") A TestStand workspace file.
  //
  rpc Get_FileContentType_WorkspaceFile(ConstantValueRequest) returns (stringResponse);
  // Field: FileContentType_ProjectFile
  //
  // (Value: "TSProjectFile") A TestStand project file.
  //
  rpc Get_FileContentType_ProjectFile(ConstantValueRequest) returns (stringResponse);
  // Field: FileContentType_GeneralEngineConfigFile
  //
  // (Value: "GeneralEngineConfigFile") Specifies most TestStand configuration settings and StationOptions, except those related to search directories, type palettes, and adapters.
  //
  rpc Get_FileContentType_GeneralEngineConfigFile(ConstantValueRequest) returns (stringResponse);
  // Field: FileContentType_SearchDirectoriesConfigFile
  //
  // (Value: "SearchDirectoriesConfigFile") Specifies the search directories for the TestStand engine.
  //
  rpc Get_FileContentType_SearchDirectoriesConfigFile(ConstantValueRequest) returns (stringResponse);
  // Field: FileContentType_AdaptersConfigFile
  //
  // (Value: "AdaptersConfigFile") Specifies the configuration settings for the TestStand adapters.
  //
  rpc Get_FileContentType_AdaptersConfigFile(ConstantValueRequest) returns (stringResponse);
  // Field: FileContentType_TypePalettesConfigFile
  //
  // (Value: "TypePalettesConfigFile") Specifies settings that configure the type palettes loaded by the TestStand engine.
  //
  rpc Get_FileContentType_TypePalettesConfigFile(ConstantValueRequest) returns (stringResponse);
  // Field: FileContentType_CustomConfigFile
  //
  // (Value: "CustomConfigFile") Contains configuration settings added by users via the Engine.GetCustomConfigFile API.
  //
  rpc Get_FileContentType_CustomConfigFile(ConstantValueRequest) returns (stringResponse);
}

// module 

// WindowsFileDialogFlags
//
// These constants represent the options you can use with the win32Flags parameter of the Engine.DisplayFileDialog method. Use the bitwise-OR operator to specify more than one option.
// These flags are the same ones you pass to the Microsoft Windows Software Development Kit functions GetOpenFileName and GetSaveFileName.
//
enum WindowsFileDialogFlags {
  WindowsFileDialogFlags_reservedZero = 0;
  // Field: WinFileDlg_READONLY
  //
  // (Value: 0x1) Causes the Read Only option to be selected initially when the dialog box is created. This flag indicates the state of the Read Only option when the dialog box is closed.
  //
  WinFileDlg_READONLY = 1;
  // Field: WinFileDlg_OVERWRITEPROMPT
  //
  // (Value: 0x2) Causes the dialog box to generate a message box if the selected file already exists. The user must confirm whether to overwrite the file.
  //
  WinFileDlg_OVERWRITEPROMPT = 2;
  // Field: WinFileDlg_HIDEREADONLY
  //
  // (Value: 0x4) Hides the Read Only option.
  //
  WinFileDlg_HIDEREADONLY = 4;
  // Field: WinFileDlg_NOCHANGEDIR
  //
  // (Value: 0x8) Restores the current directory to the original value if the user changed the directory while searching for files.
  //
  WinFileDlg_NOCHANGEDIR = 8;
  // Field: WinFileDlg_SHOWHELP
  //
  // (Value: 0x10) Do not use this flag because it has no effect. The Help button is always visible.
  //
  WinFileDlg_SHOWHELP = 16;
  // Field: WinFileDlg_ENABLEHOOK
  //
  // (Value: 0x20) Do not use this flag because it has no effect.
  //
  WinFileDlg_ENABLEHOOK = 32;
  // Field: WinFileDlg_ENABLETEMPLATE
  //
  // (Value: 0x40) Do not use this flag because it has no effect.
  //
  WinFileDlg_ENABLETEMPLATE = 64;
  // Field: WinFileDlg_ENABLETEMPLATEHANDLE
  //
  // (Value: 0x80) Do not use this flag because it has no effect.
  //
  WinFileDlg_ENABLETEMPLATEHANDLE = 128;
  // Field: WinFileDlg_NOVALIDATE
  //
  // (Value: 0x100) Specifies that the dialog box allow invalid characters in the returned filename.
  //
  WinFileDlg_NOVALIDATE = 256;
  // Field: WinFileDlg_ALLOWMULTISELECT
  //
  // (Value: 0x200) Specifies that the file list allows multiple selections.
  //
  WinFileDlg_ALLOWMULTISELECT = 512;
  // Field: WinFileDlg_EXTENSIONDIFFERENT
  //
  // (Value: 0x400) Do not use this flag because it has no effect.
  //
  WinFileDlg_EXTENSIONDIFFERENT = 1024;
  // Field: WinFileDlg_PATHMUSTEXIST
  //
  // (Value: 0x800) Specifies that you can type only valid paths and filenames. If this flag is used and the you type an invalid path, the dialog box displays a warning.
  //
  WinFileDlg_PATHMUSTEXIST = 2048;
  // Field: WinFileDlg_FILEMUSTEXIST
  //
  // (Value: 0x1000) Specifies that you can select only existing files. If you enter a file that does not exist, the dialog box displays a warning message. If this flag is specified, the WinFileDlg_PATHMUSTEXIST flag is also used.
  //
  WinFileDlg_FILEMUSTEXIST = 4096;
  // Field: WinFileDlg_CREATEPROMPT
  //
  // (Value: 0x2000) If the user specifies a file that does not exist, this flag causes the dialog box to prompt the user for permission to create the file.  If the user chooses to create the file, the dialog box closes, and the function returns the specified name. Otherwise, the dialog box remains open. This option does not actually create the file. If you use this flag with the WinFileDlg_ALLOWMULTISELECT flag, the dialog box allows the user to specify only one non-existent file.
  //
  WinFileDlg_CREATEPROMPT = 8192;
  // Field: WinFileDlg_SHAREAWARE
  //
  // (Value: 0x4000) Do not use this flag because it has no effect.
  //
  WinFileDlg_SHAREAWARE = 16384;
  // Field: WinFileDlg_NOREADONLYRETURN
  //
  // (Value: 0x8000) Do not use this flag because it has no effect.
  //
  WinFileDlg_NOREADONLYRETURN = 32768;
  // Field: WinFileDlg_NOTESTFILECREATE
  //
  // (Value: 0x10000) Do not use this flag because it has no effect.
  //
  WinFileDlg_NOTESTFILECREATE = 65536;
  // Field: WinFileDlg_NONETWORKBUTTON
  //
  // (Value: 0x20000) Hides and disables the Network option.
  //
  WinFileDlg_NONETWORKBUTTON = 131072;
  // Field: WinFileDlg_NOLONGNAMES
  //
  // (Value: 0x40000) Do not use this flag because it has no effect.
  //
  WinFileDlg_NOLONGNAMES = 262144;
  // Field: WinFileDlg_EXPLORER
  //
  // (Value: 0x80000) Do not use this flag because it has no effect.
  //
  WinFileDlg_EXPLORER = 524288;
  // Field: WinFileDlg_NODEREFERENCELINKS
  //
  // (Value: 100000) Directs the dialog box to return the path and filename of the selected shortcut (.LNK) file. If this value is not specified, the dialog box returns the path and filename of the file the shortcut references.
  //
  WinFileDlg_NODEREFERENCELINKS = 1048576;
  // Field: WinFileDlg_LONGNAMES
  //
  // (Value: 0x200000) Do not use this flag because it has no effect.
  //
  WinFileDlg_LONGNAMES = 2097152;
  // Field: WinFileDlg_ENABLEINCLUDENOTIFY
  //
  // (Value: 0x400000) Do not use this flag because it has no effect.
  //
  WinFileDlg_ENABLEINCLUDENOTIFY = 4194304;
  // Field: WinFileDlg_ENABLESIZING
  //
  // (Value: 0x800000) Do not use this flag because it has no effect.
  //
  WinFileDlg_ENABLESIZING = 8388608;
  // Field: WinFileDlg_DONTADDTORECENT
  //
  // (Value: 0x2000000) Prevents the system from adding a link to the selected file in the file system directory that contains the most recently used documents for the user.
  //
  WinFileDlg_DONTADDTORECENT = 33554432;
  // Field: WinFileDlg_FORCESHOWHIDDEN
  //
  // (Value: 0x10000000) Forces the showing of system and hidden files, thus overriding the user setting to show or not show hidden files. However, a file marked both system and hidden is not shown.
  //
  WinFileDlg_FORCESHOWHIDDEN = 268435456;
}

// module 

// CommonDialogOptions
//
// These constants represent the values you can use with the dlgOptions parameter of several methods that display dialog boxes. Use the bitwise-OR operator to specify more than one option.
//
enum CommonDialogOptions {
  // Field: CommonDlgOption_NoOptions
  //
  // (Value: 0x0) No options.
  //
  CommonDlgOption_NoOptions = 0;
  // Field: CommonDlgOption_ModalToAppMainWind
  //
  // (Value: 0x10000) By default, the dialog box is modal to the last active window of the calling thread, or if none exists, to the last active window from AppMainHwnd. If you enable this option, the dialog box is modal with respect to the window handle the Engine.AppMainHwnd property returns. Typically, you do not need to set this option.
  //
  CommonDlgOption_ModalToAppMainWind = 65536;
  // Field: CommonDlgOption_ReadOnly
  //
  // (Value: 0x20000) Use this option to create a read-only version of the dialog box.
  //
  CommonDlgOption_ReadOnly = 131072;
  // Field: CommonDlgOption_DisableGotoLocation
  //
  // (Value: 0x80000) Use this option to specify that if the error message contains location information, the dialog does not offer the user the option to go to the location.
  //
  CommonDlgOption_DisableGotoLocation = 524288;
}

// module 

// ArrayBoundsDialogOptions
//
// These constants represent the options you can use with the dlgOptions parameter of the PropertyObject.DisplayArrayBoundsDialog method. Use the bitwise-OR operator to specify more than one option.
//
enum ArrayBoundsDialogOptions {
  // Field: ArrayBounds_NoOptions
  //
  // (Value: 0x0) No options.
  //
  ArrayBounds_NoOptions = 0;
  // Field: ArrayBounds_InitializeArray
  //
  // (Value: 0x1) Initializes the array bounds to a default value ([0..9]) before launching the Array Bounds dialog box.
  //
  ArrayBounds_InitializeArray = 1;
  // Field: ArrayBounds_ReturnOkCancel
  //
  // (Value: 0x2) Forces the dialog box to return True if you click OK and False if you click Cancel.
  //
  ArrayBounds_ReturnOkCancel = 2;
}

// module 

// EditPathsDialogOptions
//
// These constants represent the options you can use with the dlgOptions parameter of the Engine.DisplayEditPathsInFilesDialog method. Use the bitwise-OR operator to specify more than one option.
//
enum EditPathsDialogOptions {
  // Field: EditPaths_NoOptions
  //
  // (Value: 0x0) No options.
  //
  EditPaths_NoOptions = 0;
  // Field: EditPaths_AllowEditOfReadOnlyFiles
  //
  // (Value: 0x1) Allows modifications to paths in read-only files in the dialog box.
  //
  EditPaths_AllowEditOfReadOnlyFiles = 1;
  // Field: EditPaths_ModalToAppMainWind
  //
  // (Value: 0x10000) By default, the dialog box is modal to the last active window of the calling thread, or if none exists, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  //
  EditPaths_ModalToAppMainWind = 65536;
  // Field: EditPaths_ReadOnly
  //
  // (Value: 0x20000) Creates a read-only version of the dialog box.
  //
  EditPaths_ReadOnly = 131072;
}

// module 

// BrowseExprDialogOptions
//
// These constants represent the options you can use with the dlgOptions parameter of the Engine.DisplayBrowseExprDialogEx method and the ExpressionEdit.BrowseExprDialogOptions property. Use the bitwise-OR operator to specify more than one option.
// 
// 
//
enum BrowseExprDialogOptions {
  // Field: BrowseExpr_NoOptions
  //
  // (Value: 0x0) No options.
  //
  BrowseExpr_NoOptions = 0;
  // Field: BrowseExpr_UsesCRLF
  //
  // (Value: 0x1) Use this option to specify that the initial expression string and the output expression string uses a carriage return/linefeed combination ("\r\n") instead of a simple linefeed ("\n") to indicate the end of a line of text. This option applies only to the  Engine.DisplayBrowseExprDialogEx method.
  //
  BrowseExpr_UsesCRLF = 1;
  // Field: BrowseExpr_NoContextMenus
  //
  // (Value: 0x2) Use this option to disable the right-click context menus in the list control that allow users to insert, rename, and delete.
  //
  BrowseExpr_NoContextMenus = 2;
  // Field: BrowseExpr_ForViewingTypes
  //
  // (Value: 0x4) Use this option to specify that the Expression Browser dialog box show properties hidden in an instance of the type.
  //
  BrowseExpr_ForViewingTypes = 4;
  // Field: BrowseExpr_ModalToAppMainWind
  //
  // (Value: 0x10000) By default, the dialog box is modal to the last active window of the calling thread, or if none exists, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  //
  BrowseExpr_ModalToAppMainWind = 65536;
}

// module 

// WorkspaceBrowserDialogOptions
//
// Use these constants with the dlgOptions parameter of the Engine.DisplayWorkspaceBrowserDialog method.
// 
// 
//
enum WorkspaceBrowserDialogOptions {
  // Field: WorkspaceBrowserDlgOption_NoOptions
  //
  // (Value: 0) No options.
  //
  WorkspaceBrowserDlgOption_NoOptions = 0;
  // Field: WorkspaceBrowserDlgOption_Editable
  //
  // (Value: 1) Enable the dialog box to edit the contents of the currently loaded workspace and the project files in the workspace.
  //
  WorkspaceBrowserDlgOption_Editable = 1;
  // Field: WorkspaceBrowserDlgOption_ModalToAppMainWind
  //
  // (Value: 0x00010000) By default, the dialog box is modal to the last active window of the calling thread, or if none exists, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  //
  WorkspaceBrowserDlgOption_ModalToAppMainWind = 65536;
}

// module 

// ToolMenuItemAttributes
//
// Use these constants with the bitwise-AND operator to check the itemAttributes parameter of the Engine.GetToolMenuItemInfoEx and Engine.GetToolMenuItemInfoWithIDEx methods.
//
enum ToolMenuItemAttributes {
  ToolMenuItemAttributes_reservedZero = 0;
  // Field: ToolMenuItem_SeparatorBefore
  //
  // (Value: 0x1) Inserts a separator before the Tools menu item if this flag is set.
  //
  ToolMenuItem_SeparatorBefore = 1;
  // Field: ToolMenuItem_Enabled
  //
  // (Value: 0x2) Disables the Tools menu item if this flag is set.
  //
  ToolMenuItem_Enabled = 2;
  // Field: ToolMenuItem_EditsSelectedFile
  //
  // (Value: 0x4) Indicates that the Tools menu item edits the selected file.
  //
  ToolMenuItem_EditsSelectedFile = 4;
}

// module 

// LoadModuleOptions
//
// These constants represent the options you can use with the loadOptions parameter of the SequenceFile.LoadModules, Sequence.LoadModules, and Step.LoadModule methods. Use the bitwise-OR operator to specify more than one option.
//
enum LoadModuleOptions {
  // Field: LoadModule_NoOptions
  //
  // (Value: 0x0) No options.
  //
  LoadModule_NoOptions = 0;
  // Field: LoadModule_IgnoreErrors
  //
  // (Value: 0x1) Ignores errors that occur when loading modules. If this option is not set, each error is reported in a dialog box.
  //
  LoadModule_IgnoreErrors = 1;
  // Field: LoadModule_LoadModulesInSubSequences
  //
  // (Value: 0x2) Loads modules in subsequences when their corresponding Sequence Call step is loaded.
  //
  LoadModule_LoadModulesInSubSequences = 2;
  // Field: LoadModule_EvaluateExpressions
  //
  // (Value: 0x4) Loads modules of Sequence Call steps that specify the module by expression. Pass a sequence context to the method when using this option.
  //
  LoadModule_EvaluateExpressions = 4;
  // Field: LoadModule_IgnoreSkippedSteps
  //
  // (Value: 0x8) Does not load the modules for steps that have a run mode of anything but RunMode_Normal.
  //
  LoadModule_IgnoreSkippedSteps = 8;
  // Field: LoadModule_ThrowExceptionOnError
  //
  // (Value: 0x10) If this option is set and LoadModule_IgnoreErrors is not set, the method throws an exception if an error occurs loading the module.
  //
  LoadModule_ThrowExceptionOnError = 16;
  // Field: LoadModule_DoNotPromptToFindFile
  //
  // (Value: 0x20) If this option is set and the method cannot find the module file, the method does not launch a file dialog box to find the module file.
  //
  LoadModule_DoNotPromptToFindFile = 32;
  // Field: LoadModule_DoNotRunLoadCallbacks
  //
  // (Value: 0x40) If this option is set and the module is a SequenceCallModule, the method loads the sequence file without running the SequenceFileLoad callback sequence. Only the SequenceCallModule uses this option.
  //
  LoadModule_DoNotRunLoadCallbacks = 64;
}

// module 

// SourceControlCommandOptions
//
// These constants represent the options you can use with the options parameter of the WorkspaceObject.DoSourceControlCommand, WorkspaceObject.CanDoSourceControlCommand, and WorkspaceObject.UpdateStatus methods. Use the bitwise-OR operator to specify more than one option.
//
enum SourceControlCommandOptions {
  // Field: SCCmdOption_NoOptions
  //
  // (Value: 0x0) No options.
  //
  SCCmdOption_NoOptions = 0;
  // Field: SCCmdOption_DoNotRecurse
  //
  // (Value: 0x1) Does not apply the operation recursively on items in the container.
  //
  SCCmdOption_DoNotRecurse = 1;
  // Field: SCCmdOption_SkipPromptDialog
  //
  // (Value: 0x2) Does not launch a dialog box with a list of files before performing the operation on the files. You cannot combine this option with SCCmdOption_ShowPromptDialog. If you do not specify this option or SCCmdOption_ShowPromptDialog, the engine Configuration option determines whether the dialog box is launched.Note: This constant applies only to the SCCmd_CheckOut and SSCmd_GetLatest commands for the WorkspaceObject.DoSourceControlCommand method.
  //
  SCCmdOption_SkipPromptDialog = 2;
  // Field: SCCmdOption_ShowPromptDialog
  //
  // (Value: 0x4) Launches a dialog box with a list of files before performing the operation on the files. You cannot combine this option with SCCmdOption_SkipPromptDialog. If you do not specify this option or SCCmdOption_SkipPromptDialog, the engine Configuration option determines whether the dialog box is launched.Note: This constant applies only to the SCCmd_CheckOut and SSCmd_GetLatest commands for the WorkspaceObject.DoSourceControlCommand method.
  //
  SCCmdOption_ShowPromptDialog = 4;
  // Field: SCCmdOption_SkipErrorDialog
  //
  // (Value: 0x8) Does not launch a dialog box for errors.
  //
  SCCmdOption_SkipErrorDialog = 8;
}

// module 

// SourceControlStatuses
//
// These constants represent the return values of the WorkspaceObject.SourceControlStatus property. Use the bitwise-AND operator with the return value to determine whether any of these flags are set.
//
enum SourceControlStatuses {
  // Field: SCStatus_NotInSC
  //
  // (Value: 0x0) Specifies that the file is not under source code control.
  //
  SCStatus_NotInSC = 0;
  // Field: SCStatus_InSC
  //
  // (Value: 0x1) Specifies that the file is under source code control.
  //
  SCStatus_InSC = 1;
  // Field: SCStatus_CheckedOut
  //
  // (Value: 0x2) Specifies that the file is checked out by you to a directory where TestStand expects the file to be. The SCStatus_CheckedOutByUser flag must also be on for this flag to be on. If SCStatus_CheckedOutByUser is on but SCStatus_CheckedOut is off, the file is checked out to a different directory.
  //
  SCStatus_CheckedOut = 2;
  // Field: SCStatus_CheckedOutOther
  //
  // (Value: 0x4) Specifies that the file is checked out by a user other than you. If this flag is on and SCStatus_CheckedOutMultiple and SCStatus_CheckedOutByUser are also on, both the current user and some other user have the file checked out. If this flag and SCStatus_CheckedOutMultiple are on but SCStatus_CheckedOutByUser is off, the current user does not have the file checked out, but several other users do.
  //
  SCStatus_CheckedOutOther = 4;
  // Field: SCStatus_CheckedOutMultiple
  //
  // (Value: 0x10) Specifies that the file is checked out by multiple users. The file might or might not be checked out by you.
  //
  SCStatus_CheckedOutMultiple = 16;
  // Field: SCStatus_OutOfDate
  //
  // (Value: 0x20) Specifies that the version you have is not the latest version of the file.
  //
  SCStatus_OutOfDate = 32;
  // Field: SCStatus_Deleted
  //
  // (Value: 0x40) Specifies that the file has been deleted from the project under source code control.
  //
  SCStatus_Deleted = 64;
  // Field: SCStatus_CheckedOutByUser
  //
  // (Value: 0x1000) Specifies that the file is checked out by you independent of the directory location.
  //
  SCStatus_CheckedOutByUser = 4096;
}

// module 

// StepDescriptionOptions
//
// These constants represent the options you can use with the options parameter of the Step.GetDescriptionEx and Step.GetStepSettingsString methods.
//
enum StepDescriptionOptions {
  // Field: StepDescOption_NoOptions
  //
  // (Value: 0x0) No options.
  //
  StepDescOption_NoOptions = 0;
  // Field: StepDescOption_Long
  //
  // (Value: 0x1) Returns the longest description available for the step. If you do not specify this option, the adapter settings determine whether to return a long description.
  //
  StepDescOption_Long = 1;
  // Field: StepDescOption_IncludeBreakpoint
  //
  // (Value: 0x02) Returns the available breakpoint description with the step description. Use this option with the Step.GetExecutionFlowString method. Note: Only conditional breakpoints provide a description.
  //
  StepDescOption_IncludeBreakpoint = 2;
}

// module 

// PropertyObjTypeFlags
//
// These constants represent the flags you can set and get on PropertyObject type definitions. Get and set type flags only on PropertyObject objects that are the root objects of type definitions. Use the bitwise-OR operator to specify more than one flag for a particular PropertyObject object.
//
enum PropertyObjTypeFlags {
  // Field: PropTypeFlags_NoFlags
  //
  // (Value: 0x0) No flags.
  //
  PropTypeFlags_NoFlags = 0;
  // Field: PropTypeFlags_NoAutoConvertVersions
  //
  // (Value: 0x1) If TestStand opens a file containing an already-loaded type and the versions of the type are not the same, it converts the older version to newer version without launching a Type Conflict dialog box or returning an error. If one or both versions of the type has PropTypeFlags_NoAutoConvertVersions set, TestStand does not perform this automatic type conversion.
  //
  PropTypeFlags_NoAutoConvertVersions = 1;
  // Field: PropTypeFlags_DisableEditingInstanceFlags
  //
  // (Value: 0x10) Set this flag in a type definition to indicate that users are not allowed to change the property flags in instances of the type.
  //
  PropTypeFlags_DisableEditingInstanceFlags = 2;
  // Field: PropTypeFlags_PreventEditingType
  //
  // (Value: 0x4) Specifies whether you can edit the type in the sequence editor.
  // Note: This option applies only to NI-installed types.
  //
  PropTypeFlags_PreventEditingType = 4;
  // Field: PropTypeFlags_NIInstalledType
  //
  // (Value: 0x2000000) Indicates that the type is an installed TestStand type provided by National Instruments. Do not set this flag.
  //
  PropTypeFlags_NIInstalledType = 33554432;
  // Field: PropTypeFlags_IsModifiedType
  //
  // (Value: 0x4000000) TestStand sets this flag in a type definition object when the user edits the property sheet of the type definition object, adds properties to it, changes a property value, or performs any other action that modifies the type. TestStand does not automatically convert an older version of a type to a newer version if one of them has PropTypeFlags_IsModifiedType set. Instead, TestStand launches a Type Conflict In File dialog box or returns an error. Update the version of the modified type to clear this flag. You can also update and obtain this flag using the PropertyObject.IsModifiedType property.
  //
  PropTypeFlags_IsModifiedType = 67108864;
}

// module 

// SaveAllSeqFileOptions
//
// These constants represent the options you can use with the options parameter of the Engine.SaveAllModifiedSeqFiles method. Use the bitwise-OR operator to specify more than one option.
//
enum SaveAllSeqFileOptions {
  // Field: SaveAllSeqFiles_NoOptions
  //
  // (Value: 0x0) No options.
  //
  SaveAllSeqFiles_NoOptions = 0;
  // Field: SaveAllSeqFiles_PromptUser
  //
  // (Value: 0x1) Prompts the user with a dialog box containing Yes, No, and Cancel buttons before saving the file.
  //
  SaveAllSeqFiles_PromptUser = 1;
}

// module 

// ReleaseSeqFileOptions
//
// These constants represent the options you can use with the options parameter of the Engine.ReleaseSequenceFileEx method. Use the bitwise-OR operator to specify more than one option.
//
enum ReleaseSeqFileOptions {
  // Field: ReleaseSeqFile_NoOptions
  //
  // (Value: 0x0) No options.
  //
  ReleaseSeqFile_NoOptions = 0;
  // Field: ReleaseSeqFile_UnloadFileIfModified
  //
  // (Value: 0x1) Use this option to remove a modified sequence file from the internal cache of the engine. If TestStand cannot remove a modified sequence file from the cache, the Engine.ReleaseSequenceFileEx method generates an error. If your development environment requires you to explicitly release COM references, do not release the COM reference to a SequenceFile object until a call to the Engine.ReleaseSequenceFileEx method succeeds.
  //
  ReleaseSeqFile_UnloadFileIfModified = 1;
  // Field: ReleaseSeqFile_DoNotRunUnloadCallback
  //
  // (Value: 0x2) Use this option to prevent the SequenceFileUnload callback sequence from running if the callback exists and the reference being released is the last reference. If other references exist to the sequence file, TestStand might execute the SequenceFileUnload callback when these references are released using the Engine.ReleaseSequenceFileEx method. Regardless of whether you use this option, TestStand does not execute the SequenceFileUnload callback if the SequenceFileLoad callback was not executed because all references to the sequence file were obtained by passing the GetSeqFile_DoNotRunLoadCallback option to the Engine.GetSequenceFileEx method.
  // Use the SequenceFile.UnloadCallbackEnabled property to prevent the SequenceFileUnload callback from ever being executed.
  //
  ReleaseSeqFile_DoNotRunUnloadCallback = 2;
  // Field: ReleaseSeqFile_UnloadFile
  //
  // (Value: 0x4) Use this option to request TestStand to remove a sequence file from the internal cache of the engine. When you specify this option, it does not guarantee that TestStand removes the sequence file from the cache because there might be multiple references to it or it might be executing. If TestStand cannot remove a sequence file from the cache, the Engine.ReleaseSequenceFileEx method generates an error. If your development environment requires you to explicitly release COM references, do not release the COM reference to a SequenceFile object until a call to the Engine.ReleaseSequenceFileEx method succeeds. If you do not specify this option, TestStand might remove the sequence file from the cache if TestStand no longer needs the file.
  //
  ReleaseSeqFile_UnloadFile = 4;
}

// module 

// EditNumericFormatOptions
//
// These constants represent the options you can use with the evaluationOptions parameter of the Engine.DisplayEditNumericFormatDialogEx method. Use the bitwise-OR operator to specify more than one option.
//
enum EditNumericFormatOptions {
  // Field: EditNumFormat_NoOptions
  //
  // (Value: 0) No options.
  //
  EditNumFormat_NoOptions = 0;
  // Field: EditNumFormat_AllowDefaultFormat
  //
  // (Value: 0x1) Use this option to allow the user to set the numeric format to the default value in the Numeric Format dialog box.
  //
  EditNumFormat_AllowDefaultFormat = 1;
  // Field: EditNumFormat_ModalToAppMainWind
  //
  // (Value: 0x10000) By default, the dialog box is modal to the last active window of the calling thread, or if none exists, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  //
  EditNumFormat_ModalToAppMainWind = 65536;
}

// InternalOptions
//
// Specifies the internal options you can access through the Engine.GetInternalOption and Engine.SetInternalOption methods.
//
enum InternalOptions {
  InternalOptions_reservedZero = 0;
  // Field: InternalOption_WarnOnAPICallThroughDispatchInterface
  //
  // (Value: 1) Specifies a Boolean value that determines whether TestStand launches a warning dialog box for each TestStand API call you make through a dispatch interface. If you intend to use only the vtable interface for the TestStand API, use this property to determine whether the code unintentionally uses a dispatch interface to the TestStand API. The default value of this property is False. This option does not apply to the Engine object. TestStand does not warn you for calls you make through a dispatch interface to the Engine object.
  //
  // National Instruments recommends that you only use this property for testing and debugging purposes.
  //
  InternalOption_WarnOnAPICallThroughDispatchInterface = 1;
  // Field: InternalOption_AutomationAdapterUsesDispatchForDualInterfaces
  //
  // (Value: 2) Specifies a Boolean value that determines whether the ActiveX/COM Adapter calls the dispatch portion of a dual interface instead of the vtable portion of the interface. Use this property to exercise both the vtable and dispatch portions of a dual server interface when you perform software testing on a server. The default value of this property is False.
  //
  InternalOption_AutomationAdapterUsesDispatchForDualInterfaces = 2;
  // Field: InternalOption_UpdateExternalEnvironments
  //
  // (Value: 3) Specifies a Boolean value that determines whether TestStand installs development support items at engine start up. Development support items include TestStand palettes and toolbox items for application development environments (ADEs) that support them, such as LabVIEW and Microsoft Visual Studio. Although the TestStand installer also installs these items, this option ensures that the items are installed to an ADE if the ADE is installed or upgraded after TestStand is installed. At startup, TestStand checks whether it has already installed the support items for a particular ADE so startup time does not increase unnecessarily. If you disable this option, you can manually update the support items for a particular ADE by running the TestStand Version Selector and specifying "/ver current" on the command line or by switching to the current version in the Version Selector dialog box. The default value of the option is True.
  // TestStand persists the setting for this option between invocations of the TestStand Engine.
  //
  InternalOption_UpdateExternalEnvironments = 3;
  // Field: InternalOption_ApplicationManager
  //
  // (Value: 5) Returns an IUnknown interface to the Application Manager user interface control for the current process. Returns a NULL interface if no Application Manager user interface control exists in the current process.
  //
  InternalOption_ApplicationManager = 5;
  // Field: InternalOption_DisableFloatingWindowsForModalDialogs
  //
  // (Value: 10) Specifies a Boolean value that determines whether TestStand disables all windows in the same thread as the thread that launches an engine dialog box. This is useful for applications that have multiple modeless windows to disable while a modal dialog box launches. The default value of the option is True.
  //
  InternalOption_DisableFloatingWindowsForModalDialogs = 10;
}

// InternalStartupOptions
//
// Specifies the internal startup options you can set through the EngineInitializationSettings.SetInternalStartupOption method.
//
enum InternalStartupOptions {
  InternalStartupOptions_reservedZero = 0;
  // Field: InternalStartupOption_TestStandReserved1
  //
  // (Value: 0x1) This option is reserved for internal use by National Instruments.  Specifying this option in a user-built application has no effect.
  //
  InternalStartupOption_TestStandReserved1 = 1;
}

// SpecifyStepsByUniqueIdOptions
//
// Use the following constants with the StationOptions.SpecifyStepsByUniqueIdInExpressions property.
//
enum SpecifyStepsByUniqueIdOptions {
  SpecifyStepsByUniqueIdOptions_reservedZero = 0;
  // Field: SpecifyStepsByUniqueIdOption_Ask
  //
  // (Value: 1) TestStand prompts you to use a unique step ID.
  //
  SpecifyStepsByUniqueIdOption_Ask = 1;
  // Field: SpecifyStepsByUniqueIdOption_Yes
  //
  // (Value: 2) Use unique step IDs.
  //
  SpecifyStepsByUniqueIdOption_Yes = 2;
  // Field: SpecifyStepsByUniqueIdOption_No
  //
  // (Value: 3) Use step names.
  //
  SpecifyStepsByUniqueIdOption_No = 3;
}

// TimeLimitActions
//
// Use these constants for the value of the StationOptions.SetTimeLimitAction and StationOptions.GetTimeLimitAction methods.
//
enum TimeLimitActions {
  // Field: TimeLimitAction_Abort
  //
  // (Value: 0) Initiates an abort of a running execution.
  //
  TimeLimitAction_Abort = 0;
  // Field: TimeLimitAction_KillThreads
  //
  // (Value: 1) Ends the thread for a running, terminating, or aborting execution.
  //
  TimeLimitAction_KillThreads = 1;
  // Field: TimeLimitAction_Prompt
  //
  // (Value: 2) Launches a dialog box with the option to terminate, abort, or kill the execution.
  //
  TimeLimitAction_Prompt = 2;
  // Field: TimeLimitAction_Terminate
  //
  // (Value: 3) Initiates a termination of a running execution.
  //
  TimeLimitAction_Terminate = 3;
}

// TimeLimitTypes
//
// Use these constants for the value of the StationOptions.SetTimeLimitAction and StationOptions.GetTimeLimitAction methods.
//
enum TimeLimitTypes {
  // Field: TimeLimitType_NormalExecution
  //
  // (Value: 0) Time limits for normal execution.
  //
  TimeLimitType_NormalExecution = 0;
  // Field: TimeLimitType_Exiting
  //
  // (Value: 1) Time limits for executions that run while the engine is exiting.
  //
  TimeLimitType_Exiting = 1;
}

// TimeLimitOperations
//
// Use these constants for the value of the StationOptions.SetTimeLimitAction and StationOptions.GetTimeLimitAction methods.
//
enum TimeLimitOperations {
  // Field: TimeLimitOperation_Executing
  //
  // (Value: 0) Applies to an execution from start to completion.
  //
  TimeLimitOperation_Executing = 0;
  // Field: TimeLimitOperation_Terminating
  //
  // (Value: 1) Applies to an execution from a termination request to completion.
  //
  TimeLimitOperation_Terminating = 1;
  // Field: TimeLimitOperation_Aborting
  //
  // (Value: 2) Applies to an execution from an abort request to completion.
  //
  TimeLimitOperation_Aborting = 2;
}

// module 

// SearchOptions
//
// These constants represent the options you can use with the searchOptions parameter of the PropertyObject.Search and Engine.SearchFiles methods. Use the bitwise-OR operator to specify more than one option.
//
enum SearchOptions {
  SearchOptions_reservedZero = 0;
  // Field: SearchOptions_MatchCase
  //
  // (Value: 0x1) If this option is set, TestStand finds only those instances in which the capitalization matches the text you specify. For example, if CHR is the specified text, this option finds CHR but not Chr.
  //
  SearchOptions_MatchCase = 1;
  // Field: SearchOptions_WholeWordOnly
  //
  // (Value: 0x2) If this option is set, TestStand searches for occurrences of the specified text only where the text that surrounds the occurrence is a space, punctuation mark, or other character not considered as part of a word. TestStand treats the characters A through Z, a through z, 0 through 9, and the underscore (_) as parts of a word.
  //
  SearchOptions_WholeWordOnly = 2;
  // Field: SearchOptions_RegExpr
  //
  // (Value: 0x4) If this option is set, TestStand treats certain characters in the search text as regular expression characters instead of literal characters.
  //
  SearchOptions_RegExpr = 4;
  // Field: SearchOptions_IncludeSubsequenceFiles
  //
  // (Value: 0x8) If this option is set, TestStand searches all the sequence files the Sequence Call steps specify.
  // Note: This option applies only to the Engine.SearchFiles method.
  //
  SearchOptions_IncludeSubsequenceFiles = 8;
}

// module 

// SearchFilterOptions
//
// These constants represent the options you can use with the filterOptions parameter of the PropertyObject.Search and Engine.SearchFiles methods. Use the bitwise-OR operator to specify more than one option.
//
enum SearchFilterOptions {
  SearchFilterOptions_reservedZero = 0;
  // Field: SearchFilterOptions_Locals
  //
  // (Value: 0x1) If this option is set, TestStand searches sequence local variables. This option applies only to the Engine.SearchFiles method.
  //
  SearchFilterOptions_Locals = 1;
  // Field: SearchFilterOptions_Parameters
  //
  // (Value: 0x2) If this option is set, TestStand searches sequence parameter variables. This option applies only to the Engine.SearchFiles method.
  //
  SearchFilterOptions_Parameters = 2;
  // Field: SearchFilterOptions_FileGlobals
  //
  // (Value: 0x4) If this option is set, TestStand searches sequence file global variables. This option applies only to the Engine.SearchFiles method.
  //
  SearchFilterOptions_FileGlobals = 4;
  // Field: SearchFilterOptions_Steps
  //
  // (Value: 0x8) If this option is set, TestStand searches steps. This option applies only to the Engine.SearchFiles method.
  //
  SearchFilterOptions_Steps = 8;
  // Field: SearchFilterOptions_CustomStepProps
  //
  // (Value: 0x10) If this option is set, TestStand searches custom step properties. You must use SearchFilterOptions_Steps in combination with this option.
  //
  SearchFilterOptions_CustomStepProps = 16;
  // Field: SearchFilterOptions_BuiltinStepProps
  //
  // (Value: 0x20) If this option is set, TestStand searches built-in step properties. You must use SearchFilterOptions_Steps in combination with this option.
  //
  SearchFilterOptions_BuiltinStepProps = 32;
  // Field: SearchFilterOptions_ModuleStepProps
  //
  // (Value: 0x40) If this option is set, TestStand searches module step properties. You must use SearchFilterOptions_Steps in combination with this option.
  //
  SearchFilterOptions_ModuleStepProps = 64;
  // Field: SearchFilterOptions_StepTypes
  //
  // (Value: 0x80) If this option is set, TestStand searches step types. This option applies only to the Engine.SearchFiles method.
  //
  SearchFilterOptions_StepTypes = 128;
  // Field: SearchFilterOptions_CustomDataTypes
  //
  // (Value: 0x100) If this option is set, TestStand searches custom data types. This option applies only to the Engine.SearchFiles method.
  //
  SearchFilterOptions_CustomDataTypes = 256;
  // Field: SearchFilterOptions_StandardDataTypes
  //
  // (Value: 0x200) If this option is set, TestStand searches standard data types. This option applies only to the Engine.SearchFiles method.
  //
  SearchFilterOptions_StandardDataTypes = 512;
  // Field: SearchFilterOptions_BuiltinSeqAndSeqFileProps
  //
  // (Value: 0x400) If this option is set, TestStand searches built-in sequence and sequence file properties. These properties contain the settings associated with sequences and sequence files. This option applies only to the Engine.SearchFiles method.
  //
  SearchFilterOptions_BuiltinSeqAndSeqFileProps = 1024;
  // Field: SearchFilterOptions_All
  //
  // (Value: 0x00ffffff) If this options is set, TestStand searches all parts of files.
  //
  SearchFilterOptions_All = 16777215;
  // Field: SearchFilterOptions_TypesOnly
  //
  // (Value: 0x01000000) If this option is set, TestStand searches only types. You must specify which category of types to search by setting one or more of the following options: SearchFilterOptions_StepTypes, SearchFilterOptions_CustomDataTypes, or SearchFilterOptions_StandardDataTypes. This option applies only to the Engine.SearchFiles method.
  //
  SearchFilterOptions_TypesOnly = 16777216;
}

// module 

// SearchElements
//
// These constants represent the options you can use with the elementsToSearch parameter of the PropertyObject.Search and Engine.SearchFiles methods. Use the bitwise-OR operator to specify more than one option.
//
enum SearchElements {
  SearchElements_reservedZero = 0;
  // Field: SearchElement_Name
  //
  // (Value: 0x1) TestStand searches the property name.
  //
  SearchElement_Name = 1;
  // Field: SearchElement_Comment
  //
  // (Value: 0x2) TestStand searches the property comment.
  //
  SearchElement_Comment = 2;
  // Field: SearchElement_StringValue
  //
  // (Value: 0x4) TestStand searches the value of string properties.
  //
  SearchElement_StringValue = 4;
  // Field: SearchElement_NumericValue
  //
  // (Value: 0x8) TestStand searches the value of numeric properties.
  //
  SearchElement_NumericValue = 8;
  // Field: SearchElement_BooleanValue
  //
  // (Value: 0x10) TestStand searches the value of Boolean properties.
  //
  SearchElement_BooleanValue = 16;
  // Field: SearchElement_AllValues
  //
  // (Value: 0x1c) A combination of the following SearchElements options: SearchElement_StringValue, SearchElement_NumericValue, and SearchElement_BooleanValue.
  //
  SearchElement_AllValues = 28;
  // Field: SearchElement_Attributes
  //
  // (Value: 0x20) TestStand searches through the attributes and type attributes of properties.
  //
  SearchElement_Attributes = 32;
  // Field: SearchElement_TypeName
  //
  // (Value: 0x40) TestStand searches the type name of root type instance properties. Enable this option to find all the instances of a particular type definition.
  // 
  //
  SearchElement_TypeName = 64;
  // Field: SearchElement_Enumerators
  //
  // (Value: 0x80) TestStand searches the enumerators of enumeration data types.
  //
  SearchElement_Enumerators = 128;
  // Field: SearchElement_All
  //
  // (Value: 0xffffffff) A combination of all the SearchElement options.
  //
  SearchElement_All = -1;
}

// WatchExpressionBreakType
//
// Use these constants to specify the breakpoint type value of the WatchExpression.BreakpointType property.
//
enum WatchExpressionBreakType {
  // Field: WatchExpressionBreakType_None
  //
  // (Value: 0x0) Specifies no breakpoint.
  //
  WatchExpressionBreakType_None = 0;
  // Field: WatchExpressionBreakType_OnChange
  //
  // (Value: 0x1) Specifies to suspend the execution when the evaluated value of the watch expression changes.
  //
  WatchExpressionBreakType_OnChange = 1;
  // Field: WatchExpressionBreakType_OnExpressionTrue
  //
  // (Value: 0x2) Specifies to suspend the execution whenever the coerced value of the watch expression evaluates to True. This option has no effect on arrays or containers.
  //
  WatchExpressionBreakType_OnExpressionTrue = 2;
}

// module 

// WatchExpressionFilterOptions
//
// Use these constants to specify filtering options for the Engine.GetWatchExpressions method. To be included in the returned list, a watch expression must meet all the specified filters.
//
enum WatchExpressionFilterOptions {
  // Field: WatchExpressionFilter_NoOptions
  //
  // (Value: 0x0) Specifies that only the clientSequenceFile parameter of the Engine.GetWatchExpressions method filters the returned list. This returns all watch expressions if the clientSequenceFile parameter is empty or only the watch expressions that specify a WatchExpression.ClientSequenceFile property that matches the clientSequenceFile parameter.
  //
  WatchExpressionFilter_NoOptions = 0;
  // Field: WatchExpressionFilter_IncludeGlobals
  //
  // (Value: 0x1) Specifies that global watch expressions that do not specify a client sequence file pass through the client sequence file filter. The global watch expressions included are in addition to the watch expressions that match the clientSequenceFile parameter of the Engine.GetWatchExpressions method.
  //
  WatchExpressionFilter_IncludeGlobals = 1;
  // Field: WatchExpressionFilter_FilterByExecution
  //
  // (Value: 0x2) Specifies that only watch expressions associated with the execution the scopingSeqContext parameter of the Engine.GetWatchExpressions method specifies pass through this filter. Watch expressions that are not associated with any execution pass through this filter.
  //
  WatchExpressionFilter_FilterByExecution = 2;
  // Field: WatchExpressionFilter_FilterBySequenceFile
  //
  // (Value: 0x4) Specifies that only watch expressions that specify a WatchExpression.SequenceFileScope property that matches the currently executing sequence file the seqContext parameter of the Engine.GetWatchExpressions method specifies pass through this filter. Watch expressions that do not specify a sequence file scope pass through this filter.
  //
  WatchExpressionFilter_FilterBySequenceFile = 4;
  // Field: WatchExpressionFilter_FilterBySequence
  //
  // (Value: 0x8) Specifies that only watch expressions that specify a WatchExpression.SequenceScope property that matches the currently executing sequence the seqContext parameter of the Engine.GetWatchExpressions method specifies pass through this filter. Watch expressions that do not specify a sequence scope pass through this filter.
  //
  WatchExpressionFilter_FilterBySequence = 8;
}

// module 

// CustomPostStepUIMsgOptions
//
// These constants represent the values you can use with the CustomUIMessageOptions parameter of the Execution.AddPostStepCustomUIMessage method. Use the bitwise-OR operator to specify more than one option.
//
enum CustomPostStepUIMsgOptions {
  // Field: CustomUIMsgOptions_NoOptions
  //
  // (Value: 0) No options.
  //
  CustomUIMsgOptions_NoOptions = 0;
  // Field: CustomUIMsgOptions_SuppressIfTraceSent
  //
  // (Value: 1) When this flag is set, TestStand does not send a user interface message if a UIMsg_Trace message is sent. Do not use this option if you want the UIMessage sent even when tracing is disabled.
  //
  CustomUIMsgOptions_SuppressIfTraceSent = 1;
  // Field: CustomUIMsgOptions_AppliesToAllThreads
  //
  // (Value: 2) Use this flag to send custom user interface message to all threads this execution creates. Otherwise, only the foreground thread of the execution sends this message.
  //
  CustomUIMsgOptions_AppliesToAllThreads = 2;
}

// InteractiveBranchModes
//
// Use these constants with StationOptions.InteractiveBranchMode property.
//
enum InteractiveBranchModes {
  // Field: InteractiveBranchMode_None
  //
  // (Value: 0) The interactive execution ignores all branches and executes selected steps in the order the sequence editor or user interface specifies.
  //
  InteractiveBranchMode_None = 0;
  // Field: InteractiveBranchMode_Ignore
  //
  // (Value: 1) The interactive execution allows branching within the selected steps, and all branching to non-selected steps is ignored.
  //
  InteractiveBranchMode_Ignore = 1;
  // Field: InteractiveBranchMode_GotoEnd
  //
  // (Value: 2) The interactive execution allows branching within selected steps. All branches to non-selected steps automatically go to the end step and start the next interactive loop iteration, if specified.
  //
  InteractiveBranchMode_GotoEnd = 2;
  // Field: InteractiveBranchMode_RaiseRTE
  //
  // (Value: 3) The interactive execution allows branching within selected steps. All branches to non-selected steps cause a run-time error. If enabled, the Run-Time Error dialog box launches.
  //
  InteractiveBranchMode_RaiseRTE = 3;
  // Field: InteractiveBranchMode_AllowAll
  //
  // (Value: 4) The interactive execution allows branching to selected and non-selected steps. When TestStand executes a selected step and no branch occurs, the next step is the next selected step. When TestStand executes a non-selected step and no branch occurs, the next step is the step after the non-selected step.
  //
  InteractiveBranchMode_AllowAll = 4;
}

// module 

// XMLOptions
//
// Use these constants to specify the GenerationOptions parameter of the PropertyObject.GetXML method.
//
enum XMLOptions {
  // Field: XMLOption_NoOptions
  //
  // (Value: 0x0) No options.
  //
  XMLOption_NoOptions = 0;
  // Field: XMLOption_ExcludeComments
  //
  // (Value: 0x1) Excludes PropertyObject comments from the generated XML.
  //
  XMLOption_ExcludeComments = 1;
  // Field: XMLOption_ExcludeFlags
  //
  // (Value: 0x2) Excludes the flag related attributes from the generated XML.
  //
  XMLOption_ExcludeFlags = 2;
  // Field: XMLOption_ExcludeVersionInfo
  //
  // (Value: 0x4) Excludes version information from the header of the generated XML.
  //
  XMLOption_ExcludeVersionInfo = 4;
  // Field: XMLOption_ExcludeEmptyObjects
  //
  // (Value: 0x8) Excludes objects without values from the generated XML.
  //
  XMLOption_ExcludeEmptyObjects = 8;
  // Field: XMLOption_UseValueFormatIfDefined
  //
  // (Value: 0x10) Instructs TestStand to use the formatString of each numeric object when the formatString parameter is not empty.  If this flag is not set or the format string of the numeric object is empty, the PropertyObject.GetXML method uses the formatString parameter for the formatting, or "%.16g" if the formatString parameter is empty. The default for double-precision, 64-bit floating-point values is %.16g, %d for signed 64-bit integer values, and %u for unsigned 64-bit integer values.
  //
  XMLOption_UseValueFormatIfDefined = 16;
  // Field: XMLOption_NoIndentation
  //
  // (Value: 0x20) Instructs TestStand to not automatically format the generated XML by indenting new lines with tab characters.
  //
  XMLOption_NoIndentation = 32;
  // Field: XMLOption_NoCRLF
  //
  // (Value: 0x40) Instructs TestStand to not automatically format the generated XML by adding LF or CRLF characters.
  //
  XMLOption_NoCRLF = 64;
  // Field: XMLOption_UseCRLFInsteadOfLF
  //
  // (Value: 0x80) Instructs TestStand to use CRLF characters instead of adding LF characters when automatically formatting generated XML.
  //
  XMLOption_UseCRLFInsteadOfLF = 128;
  // Field: XMLOption_ExcludeAliasObjects
  //
  // (Value: 0x100) Instructs TestStand to exclude alias subproperty objects in the XML stream. By default, the PropertyObject.GetXML method includes alias subproperty objects in the XML stream.
  //
  XMLOption_ExcludeAliasObjects = 256;
  // Field: XMLOption_ExcludeArrayPrototypes
  //
  // (Value: 0x200) Excludes the default prototype definition for array element properties.
  //
  XMLOption_ExcludeArrayPrototypes = 512;
  // Field: XMLOption_ExcludeAttributes
  //
  // (Value: 0x400 | 0x800) Excludes PropertyObject attributes and type attributes from the generated XML.
  //
  XMLOption_ExcludeAttributes = 3072;
  // Field: XMLOption_AllowInvalidObjects
  //
  // (Value 0x1000) Pass this option to PropertyObject.GetXML to allow serialization of invalid instances of TestStand enumerator data types.  Pass this option to PropertyObject.SetXML to allow deserialization of invalid instances of TestStand enumerator data types.
  //
  XMLOption_AllowInvalidObjects = 4096;
}

// ToolMenuTypes
//
// This data type contains values that specify a type of menu item. The constants represent the possible values for the EditTimeMenuItem.Type property.
//
enum ToolMenuTypes {
  ToolMenuTypes_reservedZero = 0;
  // Field: ToolMenuType_Command
  //
  // (Value: 1) Invokes a Microsoft Windows executable or command with optional arguments.
  //
  ToolMenuType_Command = 1;
  // Field: ToolMenuType_Sequence
  //
  // (Value: 2) Initiates an execution on a sequence in a sequence file.
  //
  ToolMenuType_Sequence = 2;
  // Field: ToolMenuType_SubMenu
  //
  // (Value: 3) Contains additional menu items in a submenu.
  //
  ToolMenuType_SubMenu = 3;
  // Field: ToolMenuType_SequenceFile
  //
  // (Value: 4) Creates a submenu that lists all sequences in a sequence file as menu items.
  //
  ToolMenuType_SequenceFile = 4;
}

// SearchDirectoryTypes
//
// Use these constants with the SearchDirectoryTypes parameter of the SearchDirectories.Insert method and the SearchDirectory.Type property.
//
enum SearchDirectoryTypes {
  SearchDirectoryTypes_reservedZero = 0;
  // Field: SearchDirectoryType_TestStandDir
  //
  // (Value:1) TestStand directory.
  //
  SearchDirectoryType_TestStandDir = 1;
  // Field: SearchDirectoryType_TestStandBinDir
  //
  // (Value: 2) TestStand Bin directory.
  //
  SearchDirectoryType_TestStandBinDir = 2;
  // Field: SearchDirectoryType_AdapterSupportDir
  //
  // (Value: 3) Adapter support directory.
  //
  SearchDirectoryType_AdapterSupportDir = 3;
  // Field: SearchDirectoryType_ApplicationDir
  //
  // (Value: 4) Application directory.
  //
  SearchDirectoryType_ApplicationDir = 4;
  // Field: SearchDirectoryType_InitialWorkingDir
  //
  // (Value: 5) Initial working directory.
  //
  SearchDirectoryType_InitialWorkingDir = 5;
  // Field: SearchDirectoryType_WindowsSystemDir
  //
  // (Value: 6) Windows system directory.
  //
  SearchDirectoryType_WindowsSystemDir = 6;
  // Field: SearchDirectoryType_WindowsDir
  //
  // (Value: 7) Microsoft Windows directory.
  //
  SearchDirectoryType_WindowsDir = 7;
  // Field: SearchDirectoryType_PathEnvironmentVarDir
  //
  // (Value: 8) Path environment variable.
  //
  SearchDirectoryType_PathEnvironmentVarDir = 8;
  // Field: SearchDirectoryType_CurrentSequenceFileDir
  //
  // (Value: 9) Current sequence file directory.
  //
  SearchDirectoryType_CurrentSequenceFileDir = 9;
  // Field: SearchDirectoryType_UserComponentsDir
  //
  // (Value: 11) User components directory. This option is obsolete. Use SearchDirectoryType_PublicComponentsDir instead.
  //
  SearchDirectoryType_UserComponentsDir = 11;
  // Field: SearchDirectoryType_PublicComponentsDir
  //
  // (Value: 11) Public components directory.
  //
  SearchDirectoryType_PublicComponentsDir = 11;
  // Field: SearchDirectoryType_NIComponentsDir
  //
  // (Value: 12) NI components directory.
  //
  SearchDirectoryType_NIComponentsDir = 12;
  // Field: SearchDirectoryType_CurrentWorkspaceDir
  //
  // (Value: 13) Current workspace directory.
  //
  SearchDirectoryType_CurrentWorkspaceDir = 13;
  // Field: SearchDirectoryType_ContainingProjectDir
  //
  // (Value: 14) Containing project directory. Note: This constant is obsolete. To allow a user to select a file relative to a containing project directory, pass the PropertyObjectFile object for the project to the currentFile parameter of the Engine.DisplayFileDialog method.
  //
  SearchDirectoryType_ContainingProjectDir = 14;
  // Field: SearchDirectoryType_ExplicitDir
  //
  // (Value: 15) Explicit directory.
  //
  SearchDirectoryType_ExplicitDir = 15;
  // Field: SearchDirectoryType_TestStandPublicDir
  //
  // (Value: 16) Public directory.
  //
  SearchDirectoryType_TestStandPublicDir = 16;
  option allow_alias = true;
}

// CallbackTypes
//
// Use these constants with the Execution.EnableCallback and Execution.IsCallbackEnabled methods to specify on which callback sequence to operate.
//
enum CallbackTypes {
  // Field: CallbackType_ModelPostError
  //
  // (Value: 0x0) ProcessModelPostError callback
  //
  CallbackType_ModelPostError = 0;
  // Field: CallbackType_ModelPostFail
  //
  // (Value: 0x1) ProcessModelPostFail callback
  //
  CallbackType_ModelPostFail = 1;
  // Field: CallbackType_ModelPostInteractive
  //
  // (Value: 0x2) ProcessModelPostInteractive callback
  //
  CallbackType_ModelPostInteractive = 2;
  // Field: CallbackType_ModelPostResult
  //
  // (Value: 0x3) ProcessModelPostResult callback
  //
  CallbackType_ModelPostResult = 3;
  // Field: CallbackType_ModelPostStep
  //
  // (Value: 0x4) ProcessModelPostStep callback
  //
  CallbackType_ModelPostStep = 4;
  // Field: CallbackType_ModelPreInteractive
  //
  // (Value: 0x5) ProcessModelPreInteractive callback
  //
  CallbackType_ModelPreInteractive = 5;
  // Field: CallbackType_ModelPreStep
  //
  // (Value: 0x6) ProcessModelPreStep callback
  //
  CallbackType_ModelPreStep = 6;
  // Field: CallbackType_SeqFilePostError
  //
  // (Value: 0x7) SequenceFilePostError callback
  //
  CallbackType_SeqFilePostError = 7;
  // Field: CallbackType_SeqFilePostFail
  //
  // (Value: 0x8) SequenceFilePostFail callback
  //
  CallbackType_SeqFilePostFail = 8;
  // Field: CallbackType_SeqFilePostInteractive
  //
  // (Value: 0x9) SequenceFilePostInteractive callback
  //
  CallbackType_SeqFilePostInteractive = 9;
  // Field: CallbackType_SeqFilePostResult
  //
  // (Value: 0xA) SequenceFilePostResult callback
  //
  CallbackType_SeqFilePostResult = 10;
  // Field: CallbackType_SeqFilePostStep
  //
  // (Value: 0xB) SequenceFilePostStep callback
  //
  CallbackType_SeqFilePostStep = 11;
  // Field: CallbackType_SeqFilePreInteractive
  //
  // (Value: 0xC) SequenceFilePreInteractive callback
  //
  CallbackType_SeqFilePreInteractive = 12;
  // Field: CallbackType_SeqFilePreStep
  //
  // (Value: 0xD) SequenceFilePreStep callback
  //
  CallbackType_SeqFilePreStep = 13;
  // Field: CallbackType_StationPostError
  //
  // (Value: 0xE) StationPostError callback
  //
  CallbackType_StationPostError = 14;
  // Field: CallbackType_StationPostFail
  //
  // (Value: 0xF) StationPostFail callback
  //
  CallbackType_StationPostFail = 15;
  // Field: CallbackType_StationPostInteractive
  //
  // (Value: 0x10) StationPostInteractive callback
  //
  CallbackType_StationPostInteractive = 16;
  // Field: CallbackType_StationPostResult
  //
  // (Value: 0x11) StationPostResult callback
  //
  CallbackType_StationPostResult = 17;
  // Field: CallbackType_StationPostStep
  //
  // (Value: 0x12) StationPostStep callback
  //
  CallbackType_StationPostStep = 18;
  // Field: CallbackType_StationPreInteractive
  //
  // (Value: 0x13) StationPreInteractive callback
  //
  CallbackType_StationPreInteractive = 19;
  // Field: CallbackType_StationPreStep
  //
  // (Value: 0x14) StationPreStep callback
  //
  CallbackType_StationPreStep = 20;
  // Field: CallbackType_ModelPostResults
  //
  // (Value: 0x15) ProcessModelPostResults callback
  //
  CallbackType_ModelPostResults = 21;
  // Field: CallbackType_SeqFilePostResults
  //
  // (Value: 0x16) SequenceFilePostResults callback
  //
  CallbackType_SeqFilePostResults = 22;
  // Field: CallbackType_StationPostResults
  //
  // (Value: 0x17) StationPostResults callback
  //
  CallbackType_StationPostResults = 23;
}

// module 

// TokenizeOptions
//
// These constants represent options you can use with the tokenizeOptions parameter of the Expression.Tokenize method. Use the bitwise-OR operator to specify more than one option.
//
enum TokenizeOptions {
  // Field: TokenizeOption_NoOptions
  //
  // (Value: 0x0) No options.
  //
  TokenizeOption_NoOptions = 0;
  // Field: TokenizeOption_PreserveComments
  //
  // (Value: 0x1) Use this option to prevent the Expression object from removing comment tokens during tokenization.
  //
  TokenizeOption_PreserveComments = 1;
  // Field: TokenizeOption_RecognizeIncompleteExpression
  //
  // (Value: 0x3) Use this option to separately tokenize each line of an expression. If you specify this option, string constants and comments that are incomplete at the end of an expression are identified with the codes TokenCode_UnterminatedString or TokenCode_UnterminatedMultiLineComment instead of the TokenCode_Bad code. Also, a dot not followed by a letter or underscore is identified with the code TokenCode_FieldSpecifier instead of the TokenCode_Bad.
  // Note: Specifying this option automatically specifies the TokenizeOption_PreserveComments option.
  //
  TokenizeOption_RecognizeIncompleteExpression = 3;
  // Field: TokenizeOption_RecognizeCPPIdentifiers
  //
  // (Value: 0x4) Use this option to specify that the Expression.Tokenize method recognizes C++ scope resolution and template operators when determining if a token is a valid identifier.Note: This option is only for parsing. You cannot use C++ scope resolution and template operators in identifiers in an expression you evaluate.
  //
  TokenizeOption_RecognizeCPPIdentifiers = 4;
}

// TokenCode
//
// These constants represent the operator, constant, and identifier tokens an expression can contain. The tokenCode parameter of the Expression.GetToken method returns these constants to identify the type of token you specify.
//
enum TokenCode {
  // Field: TokenCode_NotAToken
  //
  // (Value: 0)
  //
  TokenCode_NotAToken = 0;
  // Field: TokenCode_MultiLineComment
  //
  // (Value: 1)
  //
  TokenCode_MultiLineComment = 1;
  // Field: TokenCode_UnterminatedMultiLineComment
  //
  // (Value: 2)
  //
  TokenCode_UnterminatedMultiLineComment = 2;
  // Field: TokenCode_SingleLineComment
  //
  // (Value: 3)
  //
  TokenCode_SingleLineComment = 3;
  // Field: TokenCode_Bad
  //
  // (Value: 4)
  //
  TokenCode_Bad = 4;
  // Field: TokenCode_Plus
  //
  // (Value: 5)
  //
  TokenCode_Plus = 5;
  // Field: TokenCode_Minus
  //
  // (Value: 6)
  //
  TokenCode_Minus = 6;
  // Field: TokenCode_Multiply
  //
  // (Value: 7)
  //
  TokenCode_Multiply = 7;
  // Field: TokenCode_Divide
  //
  // (Value: 8)
  //
  TokenCode_Divide = 8;
  // Field: TokenCode_Modulus
  //
  // (Value: 9)
  //
  TokenCode_Modulus = 9;
  // Field: TokenCode_PlusPlus
  //
  // (Value: 10)
  //
  TokenCode_PlusPlus = 10;
  // Field: TokenCode_MinusMinus
  //
  // (Value: 11)
  //
  TokenCode_MinusMinus = 11;
  // Field: TokenCode_GreaterThan
  //
  // (Value: 12)
  //
  TokenCode_GreaterThan = 12;
  // Field: TokenCode_GreaterThanEqual
  //
  // (Value: 13)
  //
  TokenCode_GreaterThanEqual = 13;
  // Field: TokenCode_LessThan
  //
  // (Value: 14)
  //
  TokenCode_LessThan = 14;
  // Field: TokenCode_LessThanEqual
  //
  // (Value: 15)
  //
  TokenCode_LessThanEqual = 15;
  // Field: TokenCode_Equal
  //
  // (Value: 16)
  //
  TokenCode_Equal = 16;
  // Field: TokenCode_NotEqual
  //
  // (Value: 17)
  //
  TokenCode_NotEqual = 17;
  // Field: TokenCode_LogicalAnd
  //
  // (Value: 18)
  //
  TokenCode_LogicalAnd = 18;
  // Field: TokenCode_LogicalOr
  //
  // (Value: 19)
  //
  TokenCode_LogicalOr = 19;
  // Field: TokenCode_LogicalNot
  //
  // (Value: 20)
  //
  TokenCode_LogicalNot = 20;
  // Field: TokenCode_BitwiseAnd
  //
  // (Value: 21)
  //
  TokenCode_BitwiseAnd = 21;
  // Field: TokenCode_BitwiseOr
  //
  // (Value: 22
  //
  TokenCode_BitwiseOr = 22;
  // Field: TokenCode_ExclusiveOr
  //
  // (Value: 23)
  //
  TokenCode_ExclusiveOr = 23;
  // Field: TokenCode_BitwiseNot
  //
  // (Value: 24)
  //
  TokenCode_BitwiseNot = 24;
  // Field: TokenCode_RightShift
  //
  // (Value: 25)
  //
  TokenCode_RightShift = 25;
  // Field: TokenCode_LeftShift
  //
  // (Value: 26)
  //
  TokenCode_LeftShift = 26;
  // Field: TokenCode_Assignment
  //
  // (Value: 27)
  //
  TokenCode_Assignment = 27;
  // Field: TokenCode_PlusAssignment
  //
  // (Value: 28)
  //
  TokenCode_PlusAssignment = 28;
  // Field: TokenCode_MinusAssignment
  //
  // (Value: 29)
  //
  TokenCode_MinusAssignment = 29;
  // Field: TokenCode_MultAssignment
  //
  // (Value: 30)
  //
  TokenCode_MultAssignment = 30;
  // Field: TokenCode_DivAssignment
  //
  // (Value: 31)
  //
  TokenCode_DivAssignment = 31;
  // Field: TokenCode_BitwiseAndAssignment
  //
  // (Value: 32)
  //
  TokenCode_BitwiseAndAssignment = 32;
  // Field: TokenCode_BitwiseOrAssignment
  //
  // (Value: 33)
  //
  TokenCode_BitwiseOrAssignment = 33;
  // Field: TokenCode_ExclusiveOrAssignment
  //
  // (Value: 34)
  //
  TokenCode_ExclusiveOrAssignment = 34;
  // Field: TokenCode_RightShiftAssignment
  //
  // (Value: 35)
  //
  TokenCode_RightShiftAssignment = 35;
  // Field: TokenCode_LeftShiftAssignment
  //
  // (Value: 36)
  //
  TokenCode_LeftShiftAssignment = 36;
  // Field: TokenCode_ModAssignment
  //
  // (Value: 37)
  //
  TokenCode_ModAssignment = 37;
  // Field: TokenCode_LeftParenthesis
  //
  // (Value: 38)
  //
  TokenCode_LeftParenthesis = 38;
  // Field: TokenCode_RightParenthesis
  //
  // (Value: 39)
  //
  TokenCode_RightParenthesis = 39;
  // Field: TokenCode_FieldSpecifier
  //
  // (Value: 40)
  //
  TokenCode_FieldSpecifier = 40;
  // Field: TokenCode_LeftBracket
  //
  // (Value: 41)
  //
  TokenCode_LeftBracket = 41;
  // Field: TokenCode_RightBracket
  //
  // (Value: 42)
  //
  TokenCode_RightBracket = 42;
  // Field: TokenCode_Separator
  //
  // (Value: 43)
  //
  TokenCode_Separator = 43;
  // Field: TokenCode_Conditional
  //
  // (Value: 44)
  //
  TokenCode_Conditional = 44;
  // Field: TokenCode_Colon
  //
  // (Value: 45)
  //
  TokenCode_Colon = 45;
  // Field: TokenCode_Real
  //
  // (Value: 46)
  //
  TokenCode_Real = 46;
  // Field: TokenCode_Integer
  //
  // (Value: 47)
  //
  TokenCode_Integer = 47;
  // Field: TokenCode_BinaryInteger
  //
  // (Value: 48)
  //
  TokenCode_BinaryInteger = 48;
  // Field: TokenCode_HexInteger
  //
  // (Value: 49)
  //
  TokenCode_HexInteger = 49;
  // Field: TokenCode_String
  //
  // (Value: 50)
  //
  TokenCode_String = 50;
  // Field: TokenCode_UnterminatedString
  //
  // (Value: 51)
  //
  TokenCode_UnterminatedString = 51;
  // Field: TokenCode_Identifier
  //
  // (Value: 52)
  //
  TokenCode_Identifier = 52;
  // Field: TokenCode_LeftBrace
  //
  // (Value: 53)
  //
  TokenCode_LeftBrace = 53;
  // Field: TokenCode_RightBrace
  //
  // (Value: 54)
  //
  TokenCode_RightBrace = 54;
  // Field: TokenCode_SymbolicConstant
  //
  // (Value: 55)
  //
  TokenCode_SymbolicConstant = 55;
  // Field: TokenCode_OctalInteger
  //
  // (Value: 56)
  //
  TokenCode_OctalInteger = 56;
  // Field: TokenCode_Integer64
  //
  // (Value: 58)
  //
  TokenCode_Integer64 = 58;
  // Field: TokenCode_UnsignedInteger64
  //
  // (Value: 59)
  //
  TokenCode_UnsignedInteger64 = 59;
  // Field: TokenCode_ReferenceFieldSpecifier
  //
  // (Value: 60)
  //
  TokenCode_ReferenceFieldSpecifier = 60;
  // Field: TokenCode_UnescapedString
  //
  // (Value: 61)
  //
  TokenCode_UnescapedString = 61;
  // Field: TokenCode_DotDot
  //
  // (Value: 62)
  //
  TokenCode_DotDot = 62;
  // Field: TokenCode_Directive
  //
  // (Value: 63)
  //
  TokenCode_Directive = 63;
}

// OutputMessageSeverityTypes
//
// Use these constants to specify the OutputMessage.Category property and the category parameter of the Engine.NewOutputMessage method.
//
enum OutputMessageSeverityTypes {
  // Field: OutputMessageSeverity_Information
  //
  // (Value: 0) Specifies that the message is additional information.
  //
  OutputMessageSeverity_Information = 0;
  // Field: OutputMessageSeverity_Warning
  //
  // (Value: 1) Specifies that the message is an warning.
  //
  OutputMessageSeverity_Warning = 1;
  // Field: OutputMessageSeverity_Error
  //
  // (Value: 2) Specifies that the message is an error.
  //
  OutputMessageSeverity_Error = 2;
}

// module 

// EditBreakAndWatchOptions
//
// These constants represent the options you can use with the dlgOptions parameter of the Engine.DisplayEditBreakAndWatchDialog method. Use the bitwise-OR operator to specify more than one option.
// By default, TestStand displays both the Breakpoints and Watch Expression tabs.
//
enum EditBreakAndWatchOptions {
  // Field: EditBreakAndWatch_NoOptions
  //
  // (Value: 0x0) Specifies no options. TestStand displays both the Breakpoints and Watch Expressions tabs.
  //
  EditBreakAndWatch_NoOptions = 0;
  // Field: EditBreakAndWatch_DisplayBreakpointTab
  //
  // (Value: 0x1) Use this option to display only the Breakpoints tab of the Edit Breakpoints/Watch Expressions dialog box.
  //
  EditBreakAndWatch_DisplayBreakpointTab = 1;
  // Field: EditBreakAndWatch_DisplayWatchExpressionTab
  //
  // ( Value: 0x2) Use this option to display only the Watch Expressions tab of the Edit Breakpoints/Watch Expressions dialog box.
  //
  EditBreakAndWatch_DisplayWatchExpressionTab = 2;
  // Field: EditBreakAndWatch_ModalToAppMainWind
  //
  // (Value : 0x10000) By default, the Edit Breakpoints/Watch Expressions dialog box is modal to the last active window of the calling thread, or if none exists, to the last active window from AppMainHwnd. If you set this option, the Edit Breakpoints/Watch Expressions dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  //
  EditBreakAndWatch_ModalToAppMainWind = 65536;
  // Field: EditBreakAndWatch_ReadOnly
  //
  // (Value: 0x20000) Use this option to create a read-only version of the Edit Breakpoints/Watch Expressions dialog box.
  //
  EditBreakAndWatch_ReadOnly = 131072;
}

// module 

// SaveWorkspaceFileOptions
//
// These constants represent the options you can use with the options parameter of the WorkspaceFile.SaveWorkspaceAndProjectFiles method. Use the bitwise-OR operator to specify more than one option.
//
enum SaveWorkspaceFileOptions {
  // Field: SaveWorkspaceFile_NoOptions
  //
  // (Value: 0x0) No options.
  //
  SaveWorkspaceFile_NoOptions = 0;
  // Field: SaveWorkspaceFile_PromptUser
  //
  // (Value: 0x1) If this flag is set, TestStand prompts the user to save all modified files.
  //
  SaveWorkspaceFile_PromptUser = 1;
  // Field: SaveWorkspaceFile_SkipWorkspaceFile
  //
  // (Value: 0x2) If this flag is set, TestStand skips the workspace file.
  //
  SaveWorkspaceFile_SkipWorkspaceFile = 2;
  // Field: SaveWorkspaceFile_SkipReadOnlyFiles
  //
  // (Value: 0x4) If this flag is set, TestStand skips all read-only files.
  //
  SaveWorkspaceFile_SkipReadOnlyFiles = 4;
}

// module 

// OpenWorkspaceFileOptions
//
// These constants represent the options you can use with the options parameter of the Engine.OpenWorkspaceFile method. Use the bitwise-OR operator to specify more than one option.
//
enum OpenWorkspaceFileOptions {
  // Field: OpenWorkspaceFile_NoOptions
  //
  // (Value: 0x0) No options.
  //
  OpenWorkspaceFile_NoOptions = 0;
  // Field: OpenWorkspaceFile_IgnoreMissingFiles
  //
  // (Value: 0x1) Specifies that the method does not prompt the user if any of the files in the workspace are not found on disk.
  //
  OpenWorkspaceFile_IgnoreMissingFiles = 1;
  // Field: OpenWorkspaceFile_SearchCurrentDirectory
  //
  // (Value: 2) Instructs TestStand to use the directory where the workspace file resides to resolve the paths of the files in the workspace when loaded.
  //
  OpenWorkspaceFile_SearchCurrentDirectory = 2;
  // Field: OpenWorkspaceFile_UseSearchDirectories
  //
  // (Value: 4) Instructs TestStand to use the TestStand search to resolve the paths of the files in the workspace when loaded.
  //
  OpenWorkspaceFile_UseSearchDirectories = 4;
}

// module 

// BlockFlags
//
// Flags that indicate how a step affects the block structure of the sequence.
//
enum BlockFlags {
  // Field: BlockFlag_None
  //
  // (Value: 0) No BlockFlags are present.
  //
  BlockFlag_None = 0;
  // Field: BlockFlag_Open
  //
  // (Value: 1) The step opens a block, matched or unmatched. The step is not within the block.
  //
  BlockFlag_Open = 1;
  // Field: BlockFlag_Close
  //
  // (Value: 2) The step closes a block. The step is not within the block.
  //
  BlockFlag_Close = 2;
  // Field: BlockFlag_Start
  //
  // (Value: 4) The step is the first step within the block.
  //
  BlockFlag_Start = 4;
  // Field: BlockFlag_End
  //
  // (Value: 8) The step is the last step within the block.
  //
  BlockFlag_End = 8;
  // Field: BlockFlag_Unmatched
  //
  // (Value: 16) The step opens or closes a block, but the matching step does not exist.
  //
  BlockFlag_Unmatched = 16;
  // Field: BlockFlag_AppliesToBlockStructure
  //
  // (Value: 32) The step defines or operates according to the block structure of the sequence.
  //
  BlockFlag_AppliesToBlockStructure = 32;
}

// module 

// ProtectedObjectOptions
//
// Use these constants with the PropertyObjectFile.Protection property or the PropertyObject.SetTypeDefinitionProtection method. These constants specify the protection level applied to the file or type definition.
//
enum ProtectedObjectOptions {
  // Field: ProtectedObjectOption_None
  //
  // (Value: 0) Specifies a normal file or type definition with no protection.
  //
  ProtectedObjectOption_None = 0;
  // Field: ProtectedObjectOption_NotEditable
  //
  // (Value: 1) Specifies that the file or type definition is not editable in the sequence editor or applications that use the TestStand User Interface (UI) Controls. This option does not prevent editing or access to the contents of the file or type definition using the TestStand API.
  //
  ProtectedObjectOption_NotEditable = 1;
  // Field: ProtectedObjectOption_NotViewable
  //
  // (Value: 2) Specifies that the file is not viewable in the sequence editor or applications that use the TestStand UI Controls. This option does not prevent editing or access to the contents of the file using the TestStand API. The PropertyObject.SetTypeDefinitionProtection method does not support this option.
  //
  ProtectedObjectOption_NotViewable = 2;
}

// module 

// LockUnlockDialogOptions
//
// These constants represent the options you can use with the options parameter of the Engine.DisplayLockUnlockDialog method. Use the bitwise-OR operator to specify more than one option.
//
enum LockUnlockDialogOptions {
  // Field: LockUnlockDialogOption_None
  //
  // (Value: 0) Specifies to lock or unlock the object depending on the locked state of the object.
  //
  LockUnlockDialogOption_None = 0;
  // Field: LockUnlockDialogOption_Lock
  //
  // (Value: 1) Specifies to launch a dialog box that prompts for a password to perform a lock operation. This option is ignored if you are attempting to lock a specific object.
  //
  LockUnlockDialogOption_Lock = 1;
  // Field: LockUnlockDialogOption_Unlock
  //
  // (Value: 2) Specifies to launch a dialog box that prompts for a password to perform an unlock operation. This option is ignored if you are attempting to unlock a specific object.
  //
  LockUnlockDialogOption_Unlock = 2;
  // Field: LockUnlockDialogOption_HideRememberPasswordControls
  //
  // (Value: 4) Specifies that the dialog box does not display the control that provides the option to remember the password when unlocking a file.
  //
  LockUnlockDialogOption_HideRememberPasswordControls = 4;
  // Field: LockUnlockDialogOption_ModalToAppMainWind
  //
  // (Value: 0x10000) By default, the dialog box is modal to the last active window of the calling thread, or if none exists, to the last active window from AppMainHwnd. If you enable this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  //
  LockUnlockDialogOption_ModalToAppMainWind = 65536;
}

// module 

// SequenceFileDifferOptions
//
enum SequenceFileDifferOptions {
  // Field: SequenceFileDifferOptions_NoOptions
  //
  SequenceFileDifferOptions_NoOptions = 0;
  // Field: SequenceFileDifferOptions_IgnoreUniqueStepId
  //
  SequenceFileDifferOptions_IgnoreUniqueStepId = 1;
}

// module 

// SequenceFileDifferenceType
//
enum SequenceFileDifferenceType {
  // Field: SequenceFileDifferenceType_NoDifference
  //
  SequenceFileDifferenceType_NoDifference = 0;
  // Field: SequenceFileDifferenceType_Insert
  //
  SequenceFileDifferenceType_Insert = 1;
  // Field: SequenceFileDifferenceType_Delete
  //
  SequenceFileDifferenceType_Delete = 2;
  // Field: SequenceFileDifferenceType_ChangeType
  //
  SequenceFileDifferenceType_ChangeType = 4;
  // Field: SequenceFileDifferenceType_ChangeValue
  //
  SequenceFileDifferenceType_ChangeValue = 8;
  // Field: SequenceFileDifferenceType_ChangeComment
  //
  SequenceFileDifferenceType_ChangeComment = 16;
  // Field: SequenceFileDifferenceType_ChangeFlags
  //
  SequenceFileDifferenceType_ChangeFlags = 32;
  // Field: SequenceFileDifferenceType_ChangeNumericFormat
  //
  SequenceFileDifferenceType_ChangeNumericFormat = 64;
  // Field: SequenceFileDifferenceType_ArrayDimensions
  //
  SequenceFileDifferenceType_ArrayDimensions = 128;
  // Field: SequenceFileDifferenceType_SubProperties
  //
  SequenceFileDifferenceType_SubProperties = 256;
  // Field: SequenceFileDifferenceType_UnknownProblem
  //
  SequenceFileDifferenceType_UnknownProblem = 512;
  // Field: SequenceFileDifferenceType_Attributes
  //
  SequenceFileDifferenceType_Attributes = 1024;
}

// PropertyObjectElements
//
// Use this enumeration to refer to specific parts of a PropertyObject with methods and properties such as Location.Element and SequenceContext.GetMultipleValues.
//
enum PropertyObjectElements {
  // Field: PropertyObjectElement_None
  //
  // (Value: 0) Does not specify any part of a PropertyObject.
  //
  PropertyObjectElement_None = 0;
  // Field: PropertyObjectElement_Value
  //
  // (Value: 1) Specifies the value of a PropertyObject, which you access with GetVal and SetVal methods.
  //
  PropertyObjectElement_Value = 1;
  // Field: PropertyObjectElement_Name
  //
  // (Value: 2) Specifies the name of a PropertyObject, which you access through the PropertyObject.Name property.
  //
  PropertyObjectElement_Name = 2;
  // Field: PropertyObjectElement_Comment
  //
  // (Value: 3) Specifies the comment of a PropertyObject, which you access through the PropertyObject.Comment property.
  //
  PropertyObjectElement_Comment = 3;
  // Field: PropertyObjectElement_Flags
  //
  // (Value: 4) Specifies the flags of a PropertyObject, which you access through the PropertyObject.GetFlags and PropertyObject.SetFlags methods.
  //
  PropertyObjectElement_Flags = 4;
  // Field: PropertyObjectElement_NumericFormat
  //
  // (Value: 5) Specifies the numeric format of a PropertyObject, which you access through the PropertyObject.NumericFormat property.
  //
  PropertyObjectElement_NumericFormat = 5;
  // Field: PropertyObjectElement_Representation
  //
  // (Value: 6) Specifies the representation of PropertyObject, which you access with the  PropertyObjectType.Representation property.
  //
  PropertyObjectElement_Representation = 6;
  // Field: PropertyObjectElement_Attributes
  //
  // (Value: 7) Specifies the attributes of the PropertyObject, which you access through the PropertyObject.Attributes property.
  //
  PropertyObjectElement_Attributes = 7;
}

// LocationKinds
//
// Use this enumeration with the Location.Kind property.
//
enum LocationKinds {
  LocationKinds_reservedZero = 0;
  // Field: LocationKind_File
  //
  // (Value: 1) Specifies a location in a file.
  //
  LocationKind_File = 1;
  // Field: LocationKind_Execution
  //
  // (Value: 2) Specifies a location in a SequenceContext.
  //
  LocationKind_Execution = 2;
  // Field: LocationKind_Type
  //
  // (Value: 3) Specifies a location in a type.
  //
  LocationKind_Type = 3;
  // Field: LocationKind_IOConfiguration
  //
  // (Value: 4) Specifies a location in an IO Configuration.
  //
  LocationKind_IOConfiguration = 4;
}

// EditKinds
//
// Use this enumeration to refer to a specific kind of edit for the Engine.NewUndoItemCreator, UndoItem.RedoEditKind, UndoItem.UndoEditKind, UndoItemCreator.BeginBatchEdit, and UndoItemCreator.BeginEditEx methods, and the BeginEdit, CanEdit and EndEdit methods and events of the ApplicationMgr class.
//
enum EditKinds {
  // Field: EditKind_None
  //
  // (Value: 0) No edit.
  //
  EditKind_None = 0;
  // Field: EditKind_ChangeValue
  //
  // (Value: 1) Specifies changing the value of a PropertyObject.
  //
  EditKind_ChangeValue = 1;
  // Field: EditKind_Rename
  //
  // (Value: 2) Specifies renaming a PropertyObject.
  //
  EditKind_Rename = 2;
  // Field: EditKind_ModifyComment
  //
  // (Value: 3) Specifies modifying the comment of a PropertyObject.
  //
  EditKind_ModifyComment = 3;
  // Field: EditKind_ModifyFlags
  //
  // (Value: 4) Specifies modifying the flags of a PropertyObject.
  //
  EditKind_ModifyFlags = 4;
  // Field: EditKind_ChangeNumericFormat
  //
  // (Value: 5) Specifies changing the numeric format of a PropertyObject.
  //
  EditKind_ChangeNumericFormat = 5;
  // Field: EditKind_InsertProperty
  //
  // (Value: 6) Specifies inserting a PropertyObject.
  //
  EditKind_InsertProperty = 6;
  // Field: EditKind_DeleteProperty
  //
  // (Value: 7) Specifies deleting a PropertyObject.
  //
  EditKind_DeleteProperty = 7;
  // Field: EditKind_MoveProperty
  //
  // (Value: 8) Specifies moving a PropertyObject.
  //
  EditKind_MoveProperty = 8;
  // Field: EditKind_ReplaceProperty
  //
  // (Value: 9) Specifies replacing a PropertyObject.
  //
  EditKind_ReplaceProperty = 9;
  // Field: EditKind_InsertStep
  //
  // (Value: 10) Specifies inserting a step.
  //
  EditKind_InsertStep = 10;
  // Field: EditKind_DeleteStep
  //
  // (Value: 11) Specifies deleting a step.
  //
  EditKind_DeleteStep = 11;
  // Field: EditKind_MoveStep
  //
  // (Value: 12) Specifies moving a step.
  //
  EditKind_MoveStep = 12;
  // Field: EditKind_InsertSequence
  //
  // (Value: 13) Specifies inserting a sequence.
  //
  EditKind_InsertSequence = 13;
  // Field: EditKind_DeleteSequence
  //
  // (Value: 14) Specifies deleting a sequence.
  //
  EditKind_DeleteSequence = 14;
  // Field: EditKind_MoveSequence
  //
  // (Value: 15) Specifies moving a sequence.
  //
  EditKind_MoveSequence = 15;
  // Field: EditKind_ChangeObject
  //
  // (Value: 16) Specifies any change to a TestStand object.
  //
  EditKind_ChangeObject = 16;
  // Field: EditKind_ChangeStep
  //
  // (Value: 17) Specifies modifying subproperties of a step.
  //
  EditKind_ChangeStep = 17;
  // Field: EditKind_ChangeSequenceProperties
  //
  // (Value: 18) Specifies modifying a sequence though the Sequence Properties dialog box.
  //
  EditKind_ChangeSequenceProperties = 18;
  // Field: EditKind_ChangeSequenceFileProperties
  //
  // (Value: 19) Specifies modifying a sequence file though the Sequence File Properties dialog box.
  //
  EditKind_ChangeSequenceFileProperties = 19;
  // Field: EditKind_ChangeRunMode
  //
  // (Value: 20) Specifies changing the run mode of a step.
  //
  EditKind_ChangeRunMode = 20;
  // Field: EditKind_InsertType
  //
  // (Value: 21) Specifies inserting a new type.
  //
  EditKind_InsertType = 21;
  // Field: EditKind_ChangeRepresentation
  //
  // (Value: 22)
  //
  EditKind_ChangeRepresentation = 22;
  // Field: EditKind_ModifyAttributes
  //
  // (Value: 23) Specifies modifying the attributes of a PropertyObject.
  //
  EditKind_ModifyAttributes = 23;
  // Field: EditKind_MoveType
  //
  // (Value: #) Specifies moving a type. Does not support undo.
  //
  EditKind_MoveType = 24;
}

// module 

// PropertyValueTypeFlags
//
// Use these constants with properties like EvaluationTypes.NamedTypes, EvaluationTypes.ArrayOfNamedTypes and EvaluationTypes.PropertyValueTypeFlags to specify any combination of the types of values that a PropertyObject can store. These constants are compatible with the ValidExpressionTypes constants.
//
enum PropertyValueTypeFlags {
  PropertyValueTypeFlags_reservedZero = 0;
  // Field: PropValTypeFlag_Boolean
  //
  // (Value: 0x1) A Boolean type.
  //
  PropValTypeFlag_Boolean = 1;
  // Field: PropValTypeFlag_Number
  //
  // (Value: 0x2) A numeric type.
  //
  PropValTypeFlag_Number = 2;
  // Field: PropValTypeFlag_String
  //
  // (Value: 0x4) A string type.
  //
  PropValTypeFlag_String = 4;
  // Field: PropValTypeFlag_Reference
  //
  // (Value: 0x8) A reference type.
  //
  PropValTypeFlag_Reference = 8;
  // Field: PropValTypeFlag_Container
  //
  // (Value: 0x10) A container type.
  //
  PropValTypeFlag_Container = 16;
  // Field: PropValTypeFlag_NamedType
  //
  // (Value: 0x20) A named type.
  //
  PropValTypeFlag_NamedType = 32;
  // Field: PropValTypeFlag_BooleanArray
  //
  // (Value: 0x40) A Boolean array type.
  //
  PropValTypeFlag_BooleanArray = 64;
  // Field: PropValTypeFlag_NumberArray
  //
  // (Value: 0x80) A numeric array type.
  //
  PropValTypeFlag_NumberArray = 128;
  // Field: PropValTypeFlag_StringArray
  //
  // (Value: 0x100) A string array type.
  //
  PropValTypeFlag_StringArray = 256;
  // Field: PropValTypeFlag_ReferenceArray
  //
  // (Value: 0x200) A reference array type.
  //
  PropValTypeFlag_ReferenceArray = 512;
  // Field: PropValTypeFlag_ContainerArray
  //
  // (Value: 0x400) A container array type.
  //
  PropValTypeFlag_ContainerArray = 1024;
  // Field: PropValTypeFlag_ArrayOfNamedType
  //
  // (Value: 0x800) An array of a named type.
  //
  PropValTypeFlag_ArrayOfNamedType = 2048;
  // Field: PropValTypeFlag_Nothing
  //
  // (Value: 0x1000) A reference type with a value of Nothing.
  //
  PropValTypeFlag_Nothing = 4096;
  // Field: PropValTypeFlag_Object
  //
  // (Value: 0x4000) A PropertyObject. An element of an array of a basic type is not a PropertyObject.
  //
  PropValTypeFlag_Object = 16384;
  // Field: PropValTypeFlag_PlainReference
  //
  // (Value: 0x8000) A reference type that is not a named type.
  //
  PropValTypeFlag_PlainReference = 32768;
  // Field: PropValTypeFlag_PlainContainer
  //
  // (Value: 0x10000) A container type that is not a named type.
  //
  PropValTypeFlag_PlainContainer = 65536;
  // Field: PropValTypeFlag_Enum
  //
  // (Value: 0x20000)
  //
  PropValTypeFlag_Enum = 131072;
  // Field: PropValTypeFlag_Any
  //
  // (Value: -1) Any type.
  //
  PropValTypeFlag_Any = -1;
}

// PerformActionOptions
//
// Use these constants with the ApplicationMgr.SaveOnClose, and ApplicationMgr.PromptForOverwrite properties to  specify whether to perform an action.
//
enum PerformActionOptions {
  // Field: PerformActionOption_Yes
  //
  // (Value: 0) Specifies to perform an action without prompting the user.
  //
  PerformActionOption_Yes = 0;
  // Field: PerformActionOption_No
  //
  // (Value: 1) Specifies to not perform an action.
  //
  PerformActionOption_No = 1;
  // Field: PerformActionOption_Prompt
  //
  // (Value: 2) Specifies to prompt the user to determine whether to perform an action.
  //
  PerformActionOption_Prompt = 2;
}

// module 

// CreateUndoItemOptions
//
// Use these constants with the UndoItemCreator.CreateAndPostUndoItem method.
//
enum CreateUndoItemOptions {
  // Field: CreateUndoItemOption_NoOptions
  //
  // (Value: 0x0): No options.
  //
  CreateUndoItemOption_NoOptions = 0;
  // Field: CreateUndoItemOption_CreateOnly
  //
  // (Value: 0x1): Use this option to prevent the UndoItemCreator.CreateAndPostUndoItem method from sending the created undo item to the sequence editor.
  //
  CreateUndoItemOption_CreateOnly = 1;
}

// module 

// SerializationOptions
//
// Use these constants with the Engine.SerializeObjects method.
//
enum SerializationOptions {
  // Field: SerializationOption_NoOptions
  //
  // (Value: 0) TestStand uses the INI format by default if you specify no options.
  //
  SerializationOption_NoOptions = 0;
  // Field: SerializationOption_UseBinary
  //
  // (Value: 1) Use this option to greatly enhance the speed of both serialization and unserialization. This option is the fastest and most memory efficient format.
  //
  SerializationOption_UseBinary = 1;
  // Field: SerializationOption_UseXml
  //
  // (Value: 2) Use this option if you want to read or parse the data as XML. This option is the most readable and parseable format. Normally, the data from the Engine.SerializeObjects method is passed as input to the Engine.UnserializeObjects and Engine.UnserializeObjectsAndTypes methods. In this case, National Instruments recommends using SerializationOption_UseBinary because that option is faster and more memory efficient.
  //
  SerializationOption_UseXml = 2;
  // Field: SerializationOption_SupportNonTypedefMatchingInstances
  //
  // (Value: 4) Normally, type instances must match the structure of the underlying type definitions. Although you can use the PropertyObject properties and methods to modify a type instance so it no longer matches the structure of the underlying type definition, National Instruments does not recommend doing so even though it can be useful in some limited cases. Use the SerializationOption_SupportNonTypedefMatchingInstances option only when you must serialize objects that contain these types of instances to preserve the modifications during unserialization.
  // If you do not use this option when you serialize objects, TestStand makes the type instances conform to the underlying type definition during unserialization. You do not need to use this option when unserializing the data. TestStand makes type instances conform to type definitions and removes any structural modifications you programmatically make in the following situations, even when you use the SerializationOption_SupportNonTypedefMatchingInstances option:    * When you modify the structure of a type definition or use the Apply to All Loaded Instances of the Type option to modify a type definition, TestStand makes all type instances in memory conform to the type definition.    * When you load a file and use automatic or manual type conflict resolution to replace the existing global definition of the type with a new version of the type definition, TestStand makes all instances of the type in memory conform to the new version of the type definition. Instead of creating type instances that do not match type definitions, create a container property in the type definition, set the PropFlags_UnstructuredProperty property flag, and place all the custom, per-instance properties in the container. National Instruments recommends that you use unstructured containers to hold properties that do not match the definition to use type instances that differ from type definitions. Note: The SerializationOption_SupportNonTypedefMatchingInstances option does not support the .ini format. You must use this option with the bitwise-OR operator with the SerializationOption_UseXml or SerializationOption_UseBinary option.
  //
  SerializationOption_SupportNonTypedefMatchingInstances = 4;
}

// module 

// NewThreadOptions
//
// Use these constants to specify the options parameter of the Execution.NewThread method.
//
enum NewThreadOptions {
  // Field: NewThreadOption_NoOptions
  //
  // (Value: 0x0) No options.
  //
  NewThreadOption_NoOptions = 0;
  // Field: NewThreadOption_AutoWaitAtEndOfSequence
  //
  // (Value: 0x1) Use this option to have the calling sequence wait for the launching thread to complete before the calling sequence returns. You must specify a SequenceContext when you call the Execution.NewThread method to apply this option.
  //
  NewThreadOption_AutoWaitAtEndOfSequence = 1;
  // Field: NewThreadOption_InitiallySuspended
  //
  // (Value: 0x2) Use this option to specify that TestStand creates the new thread in a suspended state. Call the Thread.Resume method to start the thread, or use an ActiveX/COM step to call the Thread.Resume method from a sequence.
  //
  NewThreadOption_InitiallySuspended = 2;
  // Field: NewThreadOption_UseSTA
  //
  // (Value: 0x4) Use this option to specify whether the concurrency model of the thread is initialized as single-threaded apartment (STA) or multi-threaded apartment (MTA). By default, TestStand initializes new executions and threads to use the MTA model. A thread must use the STA model if the thread creates or launches a dialog box that contains ActiveX controls.
  // If you use this option to launch a sequence with a step displaying an ActiveX control, you might need to set the Load Option on the Run Options tab of the Step Properties dialog box to Load dynamically. This ensures that TestStand loads the module the step calls in the thread initialized as STA.
  //
  NewThreadOption_UseSTA = 4;
}

// FileWritingFormats
//
// Use these constants with the PropertyObjectFile.FileWritingFormat property, the StationOptions.DefaultFileWritingFormat property, and the return value to the FileInformation.GetFileFormatVersion method.
//
enum FileWritingFormats {
  FileWritingFormats_reservedZero = 0;
  // Field: FileWritingFormat_Ini
  //
  // (Value: 1) Specifies that TestStand writes the file in an INI format. This format is used by previous versions of TestStand (3.x or earlier). Use this format when necessary to support existing code that reads the INI file directly. Note: The INI format is deprecated in TestStand 2019 and may not be supported in future releases. There is no behavior change.
  //
  FileWritingFormat_Ini = 1;
  // Field: FileWritingFormat_Binary
  //
  // (Value: 2) Specifies that TestStand writes the file in a binary format. This format is the fastest and most memory-efficient format.
  //
  FileWritingFormat_Binary = 2;
  // Field: FileWritingFormat_Xml
  //
  // (Value: 3) Specifies that TestStand writes the file in an XML format. Use this format if you want to read, parse, or create files as XML. This option is the most readable and parseable format.
  //
  // If you change a file that you store in a source control system from XML or INI to Binary, make sure you update your source code control system to set the file type as binary. If you do not need to read, parse, or create files externally from TestStand, National Instruments recommends that you use FileWritingFormat_Binary.
  //
  FileWritingFormat_Xml = 3;
}

// PromptResults
//
// 
//
enum PromptResults {
  // Field: PromptResult_Yes
  //
  // 
  //
  PromptResult_Yes = 0;
  // Field: PromptResult_No
  //
  // 
  //
  PromptResult_No = 1;
  // Field: PromptResult_Cancel
  //
  // 
  //
  PromptResult_Cancel = 2;
}

// CodeTemplateTypes
//
// Use these constants with the CodeTemplate.Type property.
//
enum CodeTemplateTypes {
  CodeTemplateTypes_reservedZero = 0;
  // Field: CodeTemplateType_Legacy
  //
  // (Value: 1) Specifies the legacy template for the LabVIEW or LabWindows/CVI Adapter. The legacy code template has a fixed prototype that takes a TestData and a TestError parameter.
  //
  CodeTemplateType_Legacy = 1;
  // Field: CodeTemplateType_LabVIEW
  //
  // (Value: 2) Specifies a code template for the LabVIEW Adapter.
  //
  CodeTemplateType_LabVIEW = 2;
  // Field: CodeTemplateType_CVI
  //
  // (Value: 3) Specifies a code template for the LabWindows/CVI Adapter.
  //
  CodeTemplateType_CVI = 3;
  // Field: CodeTemplateType_CppOrC
  //
  // (Value: 4) Specifies a code template for the C/C++ DLL Adapter and specifies that the C/C++ Module creates code in a text file.
  //
  CodeTemplateType_CppOrC = 4;
  // Field: CodeTemplateType_VisualCppDotNet
  //
  // (Value: 5) Specifies a code template for the C/C++ DLL Adapter and specifies that the C/C++ Module creates code in Microsoft Visual Studio.
  //
  CodeTemplateType_VisualCppDotNet = 5;
  // Field: CodeTemplateType_VisualCSharpDotNet
  //
  // (Value: 6) Specifies a code template for the .NET Adapter and specifies that the .NET Module creates C# code.
  //
  CodeTemplateType_VisualCSharpDotNet = 6;
  // Field: CodeTemplateType_VisualBasicDotNet
  //
  // (Value: 7) Specifies a code template for the .NET Adapter and specifies that the .NET Module creates Visual Basic .NET code.
  //
  CodeTemplateType_VisualBasicDotNet = 7;
  // Field: CodeTemplateType_HTBasic
  //
  // (Value: 8) Specifies a code template for the HTBasic Adapter.
  //
  CodeTemplateType_HTBasic = 8;
  // Field: CodeTemplateType_LabVIEWNXG
  //
  // (Value: 9) Specifies a code template for the LabVIEW NXG Adapter.
  //
  CodeTemplateType_LabVIEWNXG = 9;
}

// CopyLocationsOptions
//
// Use these constants with the Locations.AddLocations method.
//
enum CopyLocationsOptions {
  CopyLocationsOptions_reservedZero = 0;
  // Field: CopyLocationsOption_ShallowCopy
  //
  // (Value: 1) Specifies that the Locations.AddLocations method adds the locations you pass to the collection without making a copy of the locations.
  //
  CopyLocationsOption_ShallowCopy = 1;
  // Field: CopyLocationsOption_DeepCopy
  //
  // (Value: 2) Specifies that the Locations.AddLocations method adds a copy of the locations you pass to the collection.
  //
  CopyLocationsOption_DeepCopy = 2;
}

// ApplicationSites
//
// Use these constants to specify how to display a location a user interface can display in more than one place. Use these constants with the Locations.ApplicationSite property and the UndoItemCreator.CreateAndPostUndoItem method.
// 
// 
//
enum ApplicationSites {
  // Field: ApplicationSite_DefaultSite
  //
  // (Value: 0) Specifies that the user interface determines where to display the location.
  //
  ApplicationSite_DefaultSite = 0;
  // Field: ApplicationSite_ItemList
  //
  // (Value: 1) Specifies that the user interface displays the location in a list control, such as a list of steps or a list of sequences.
  //
  ApplicationSite_ItemList = 1;
  // Field: ApplicationSite_Variables
  //
  // (Value: 2) Specifies that the user interface displays the location in a variables control.
  //
  ApplicationSite_Variables = 2;
  // Field: ApplicationSite_PropertyBrowser
  //
  // (Value: 3) Specifies that the user interface displays the location in a control that displays a hierarchy of properties and subproperties.
  //
  ApplicationSite_PropertyBrowser = 3;
  // Field: ApplicationSite_Settings
  //
  // (Value: 4) Specifies that the user interface displays the location in a settings panel or dialog.
  //
  ApplicationSite_Settings = 4;
}

// module 

// ParseLookupStringOptions
//
// Use these options with the Engine.ParseLookupString method.
//
enum ParseLookupStringOptions {
  // Field: ParseLookupStringOption_NoOptions
  //
  // (Value: 0x0) No options.
  //
  ParseLookupStringOption_NoOptions = 0;
  // Field: ParseLookupStringOption_TreatArrayIndicesAsSeparateTokens
  //
  // (Value: 0x1) This option specifies that the Engine.ParseLookupString method parses array names and array indices as separate strings in the returned String Array. If you do not use this option, the Engine.ParseLookupString method parses an array name and array index as one string.
  //
  ParseLookupStringOption_TreatArrayIndicesAsSeparateTokens = 1;
}

// module 

// GetTemplatesFileOptions
//
// Use these options to specify whether the Engine.GetTemplatesFile method creates the templates file if the templates file does not exist.
//
enum GetTemplatesFileOptions {
  // Field: GetTemplatesFileOption_NoOptions
  //
  // (Value: 0x0) Specifies that the Engine.GetTemplatesFile method returns a value of NULL for PropertyObjectFile if the templates file does not exist.
  //
  GetTemplatesFileOption_NoOptions = 0;
  // Field: GetTemplatesFileOption_LoadIfNotLoaded
  //
  // (Value: 0x1) Specifies that the engine loads the templates file if it has not been loaded. If no templates file exists, the engine creates a default templates file. Omit this option to determine whether a templates file has been previously loaded. When you omit this option, the Engine.GetTemplatesFile method returns NULL if no templates file is loaded.
  //
  GetTemplatesFileOption_LoadIfNotLoaded = 1;
}

// ApplicationLicenses
//
// Use these constants to specify a type of license the application requires. Use these constants with the licenses parameter of the Engine.AcquireLicense method.
//
enum ApplicationLicenses {
  // Field: ApplicationLicense_Unspecified
  //
  // (Value: 0) Specifies that the application license requirements are unspecified.
  //
  ApplicationLicense_Unspecified = 0;
  // Field: ApplicationLicense_OperatorInterface
  //
  // (Value: 100) Specifies that the application requires a license to perform non-editing operations.
  //
  ApplicationLicense_OperatorInterface = 100;
  // Field: ApplicationLicense_CustomEditor
  //
  // (Value: 200) Specifies that the application requires a license to perform custom editor operations, such as editing and saving sequence files.
  //
  ApplicationLicense_CustomEditor = 200;
  // Field: ApplicationLicense_SequenceEditor
  //
  // (Value: 300) Specifies that the application requires a license to use the TestStand Sequence Editor.
  //
  ApplicationLicense_SequenceEditor = 300;
}

// module 

// AcquireLicenseOptions
//
// Use these constants with the options parameter of the Engine.AcquireLicense method.
//
enum AcquireLicenseOptions {
  // Field: AcquireLicenseOption_NoOptions
  //
  // (Value: 0x0) Does not specify any options.
  //
  AcquireLicenseOption_NoOptions = 0;
  // Field: AcquireLicenseOption_SuppressStartupDialog
  //
  // (Value: 0x1) Instructs TestStand not to launch a dialog box for evaluating, activating, or purchasing TestStand when the license is not properly activated.
  //
  AcquireLicenseOption_SuppressStartupDialog = 1;
  // Field: AcquireLicenseOption_SuppressStartupDialogIfAlreadyShown
  //
  // (Value: 0x2) Instructs TestStand not to launch a dialog box for evaluating, activating, or purchasing TestStand when a currently running process has already launched the dialog box and the user activated a license or selected to evaluate TestStand. If the license cannot be acquired and the user did not previously select to evaluate TestStand in an already running process, TestStand launches the dialog box.
  //
  AcquireLicenseOption_SuppressStartupDialogIfAlreadyShown = 2;
  // Field: AcquireLicenseOption_ShowExitButton
  //
  // (Value: 0x4) Pass this option if you want the startup dialog box to display an Exit button instead of a Close button. The application exits if the call to the Engine.AcquireLicense method fails, and error messages reflect this behavior.
  //
  AcquireLicenseOption_ShowExitButton = 4;
}

// module 

// GotoLocationOptions
//
// Use these constants with the Locations.GotoLocation method.
//
enum GotoLocationOptions {
  // Field: GotoLocationOption_NoOptions
  //
  // (Value: 0x0) No options.
  //
  GotoLocationOption_NoOptions = 0;
  // Field: GotoLocationOption_DoNotDisplayMessageIfLocationNotFound
  //
  // (Value: 0x1) Use this option to specify that the Locations.GotoLocation method takes no action instead of launching an information dialog box when the user interface cannot go to the location.
  //
  GotoLocationOption_DoNotDisplayMessageIfLocationNotFound = 1;
}

// CheckedStates
//
// Use these constants with the AdditionalResult.CheckedState property.
//
enum CheckedStates {
  CheckedStates_reservedZero = 0;
  // Field: CheckedState_Unchecked
  //
  // (Value: 1) Specifies not to log the additional result.
  //
  CheckedState_Unchecked = 1;
  // Field: CheckedState_Checked
  //
  // (Value: 2) Specifies to log the additional result.
  //
  CheckedState_Checked = 2;
  // Field: CheckedState_Indeterminate
  //
  // (Value: 3) Specifies to log the additional result for some but not all members of the AdditionalResult.Elements collection.
  //
  CheckedState_Indeterminate = 3;
}

// TestStandPaths
//
// Use the values of this enumeration to determine specific TestStand directory paths.
//
enum TestStandPaths {
  TestStandPaths_reservedZero = 0;
  // Field: TestStandPath_TestStand
  //
  // (Value: 1) Directory where TestStand installs the majority of components, typically <Program Files>\National Instruments\TestStand <Version>.
  //
  TestStandPath_TestStand = 1;
  // Field: TestStandPath_Bin
  //
  // (Value: 2) Directory where TestStand stores executables and DLLs, typically <TestStand>\Bin.
  //
  TestStandPath_Bin = 2;
  // Field: TestStandPath_Config
  //
  // (Value: 3) Directory where TestStand stores configuration files, typically <TestStand Application Data>\Cfg.
  //
  TestStandPath_Config = 3;
  // Field: TestStandPath_Public
  //
  // (Value: 4) Directory where TestStand stores publicly editable files, typically C:\Users\Public\Documents\National Instruments\TestStand on Windows 8.1/8/7.
  //
  TestStandPath_Public = 4;
  // Field: TestStandPath_CommonAppData
  //
  // (Value: 5) Directory where TestStand stores common application data, such as configuration information, typically C:\ProgramData\National Instruments\TestStand on Windows 8.1/8/7.
  //
  TestStandPath_CommonAppData = 5;
  // Field: TestStandPath_LocalAppData
  //
  // (Value: 6) Directory where TestStand stores per-user application data, typically <User Directory>\AppData\Local\National Instruments\TestStand on Windows 8.1/8/7.
  //
  TestStandPath_LocalAppData = 6;
  // Field: TestStandPath_PublicComponents
  //
  // (Value: 7) Directory where TestStand looks for user-defined components to override National Instruments components, such as callbacks, icons, language files, step types, and type palettes, typically, <TestStand Public>\Components.
  //
  TestStandPath_PublicComponents = 7;
  // Field: TestStandPath_NIComponents
  //
  // (Value: 8) Directory where TestStand stores components, such as callbacks, icons, language files, step types, and type palettes, typically <TestStand>\Components.
  //
  TestStandPath_NIComponents = 8;
  // Field: TestStandPath_Temp
  //
  // (Value: 9) This value is obsolete. Returns the directory path with a trailing backslash where TestStand stores temporary files. TestStand does not clean up files that you create in this directory but does erase files you create with the  Engine.CreateTempFile method.
  //
  TestStandPath_Temp = 9;
  // Field: TestStandPath_Temporary
  //
  // (Value: 10) Directory where TestStand stores temporary files. TestStand does not clean up files that you create in this directory but does erase files you create with the  Engine.CreateTempFile method.
  //
  TestStandPath_Temporary = 10;
  // Field: TestStandPath_GlobalConfig
  //
  // (Value: 11) Directory where TestStand stores configuration files for the global environment, typically <TestStand Application Data>\Cfg.
  //
  TestStandPath_GlobalConfig = 11;
  // Field: TestStandPath_GlobalPublic
  //
  // (Value: 12) Directory where TestStand stores publicly editable files for the global environment, typically C:\Users\Public\Documents\National Instruments\TestStand on Windows 10/8.1/7.
  //
  TestStandPath_GlobalPublic = 12;
  // Field: TestStandPath_GlobalCommonAppData
  //
  // (Value: 13) Directory where TestStand stores common application data for the global environment (<TestStand Application Data>), such as configuration information, typically C:\ProgramData\National Instruments\TestStand.
  //
  TestStandPath_GlobalCommonAppData = 13;
  // Field: TestStandPath_GlobalLocalAppData
  //
  // (Value: 14) Directory where TestStand stores user-specific application data for the global environment, typically <User Directory>\AppData\Local\National Instruments\TestStand on Windows 10/8.1/7.
  //
  TestStandPath_GlobalLocalAppData = 14;
}

// module 

// TypeEqualOptions
//
// Use these constants with the PropertyObjectType.IsEqualTo method.
//
enum TypeEqualOptions {
  // Field: TypeEqualOption_NoOptions
  //
  // (Value: 0x0) No options.
  //
  TypeEqualOption_NoOptions = 0;
  // Field: TypeEqualOption_DoNotCompareDimensions
  //
  // (Value: 0x1) Specifies that the PropertyObjectType.IsEqualTo method does not compare the array dimensions that the PropertyObjectType.ArrayDimensions property specifies.
  //
  TypeEqualOption_DoNotCompareDimensions = 1;
  // Field: TypeEqualOption_DoNotCompareIsObject
  //
  // (Value: 0x2) Specifies that the PropertyObjectType.IsEqualTo method does not compare the PropertyObjectType.IsObject property.
  //
  TypeEqualOption_DoNotCompareIsObject = 2;
}

// module 

// EscapingOptions
//
// Use these constants to specify the options parameter of the Utility.Escape and Utility.Unescape methods. The options parameter specifies to add quotation marks or to remove quotation marks while escaping or unescaping.
//
enum EscapingOptions {
  // Field: EscapingOption_NoOptions
  //
  // (Value: 0) Default behavior. TestStand does not add or remove quotation marks after escaping or unescaping.
  //
  EscapingOption_NoOptions = 0;
  // Field: EscapingOption_SurroundedByQuotes
  //
  // (Value: 1) For the Utility.Escape method, TestStand surrounds the returned string with quotation marks after escaping the string. For the Utility.Unescape method, TestStand removes the surrounding quotation marks before unescaping the string. The Utility.Unescape method returns an error if you use this option and the string to unescape is not surrounded by quotation marks.
  //
  EscapingOption_SurroundedByQuotes = 1;
}

// AllowAutomaticTypeConflictResolutionOptions
//
// Use these options with the StationOptions.AllowAutomaticTypeConflictResolution property.
//
enum AllowAutomaticTypeConflictResolutionOptions {
  // Field: AllowAutomaticTypeConflictResolutionOption_Always
  //
  // (Value: 0) Always allows automatic type conflict resolution, which can cause unintended propagation of types between files. For example, if you open a sequence file with a version of a type that is higher than the version of the type currently in a type palette file, TestStand updates the type palette file and every file you subsequently open to use the higher version. The updated type propagates to other files without warning or notifying you. This behavior is the default behavior in TestStand 4.0.x or earlier.
  //
  AllowAutomaticTypeConflictResolutionOption_Always = 0;
  // Field: AllowAutomaticTypeConflictResolutionOption_OnlyIfTypePaletteFilesWillNotBeModified
  //
  // (Value: 1) Disallows automatic type conflict resolution when the outcome of the resolution modifies a type palette file. This ensures that the application never uses a version of a type that is different than the version of the type in the type palette file without your explicit confirmation. This is the default behavior.
  //
  AllowAutomaticTypeConflictResolutionOption_OnlyIfTypePaletteFilesWillNotBeModified = 1;
  // Field: AllowAutomaticTypeConflictResolutionOption_OnlyIfATypePaletteFileHasTheHigherVersion
  //
  // (Value: 2) Includes the same restrictions as the Only if Type Palette Files will not be Modified (default) option, but also includes the restriction that the type must be in a type palette file for automatic type conflict resolution to occur. Effectively, this option allows automatic type conflict resolution only when a type palette file has the higher version of the type and a non-type palette file has the lower version of the type.
  // For example, this option does not allow automatic type conflict resolution between two sequence files for types that are not in type palette files, but the Only if Type Palette Files will not be Modified (default) option does allow this.
  //
  AllowAutomaticTypeConflictResolutionOption_OnlyIfATypePaletteFileHasTheHigherVersion = 2;
  // Field: AllowAutomaticTypeConflictResolutionOption_Never
  //
  // (Value: 3) Disallows all automatic type conflict resolution. When TestStand loads two different versions of a type, TestStand always prompts you or reports a type conflict error. When you select this option, opening files from TestStand versions earlier than the current version almost always results in type conflict prompts. Use this option only for debugging purposes or to ensure that all files have exactly the same version of every type.
  //
  AllowAutomaticTypeConflictResolutionOption_Never = 3;
}

// module 

// FileModificationIndicatorPolicies
//
// Use the constants with the StationOptions.FileModificationIndicatorPolicy property.
//
enum FileModificationIndicatorPolicies {
  // Field: FileModificationIndicatorPolicy_DefaultPolicy
  //
  // (Value: 0x0) TestStand indicates that any file with modifications is modified.
  //
  FileModificationIndicatorPolicy_DefaultPolicy = 0;
  // Field: FileModificationIndicatorPolicy_ExcludeTestStandVersionUpgrade
  //
  // (Value: 0x1) TestStand does not indicate that a file is modified if the only changes are from non-editable NI type upgrades, or file data format upgrades.
  //
  FileModificationIndicatorPolicy_ExcludeTestStandVersionUpgrade = 1;
}

// CPUAffinityForNewThreadOptions
//
// Use this enumeration to specify the CPUs on which a new thread executes.
//
enum CPUAffinityForNewThreadOptions {
  // Field: CPUAffinityForNewThreadOption_UseStationOption
  //
  // (Value: 0) Specifies to use the StationOptions.DefaultCPUAffinityForThreadsEx property as the CPU affinity of the new thread.
  //
  CPUAffinityForNewThreadOption_UseStationOption = 0;
  // Field: CPUAffinityForNewThreadOption_UseAffinityOfCaller
  //
  // (Value: 1) Specifies to use the CPU affinity of the calling sequence as the CPU affinity of the new thread.
  //
  CPUAffinityForNewThreadOption_UseAffinityOfCaller = 1;
  // Field: CPUAffinityForNewThreadOption_UseAllCPUs
  //
  // (Value: 2) Specifies to use all CPUs available to the process as the CPU affinity of the new thread.
  //
  CPUAffinityForNewThreadOption_UseAllCPUs = 2;
  // Field: CPUAffinityForNewThreadOption_UseCustomAffinity
  //
  // (Value: 3) Specifies to use an expression to determine the CPU affinity of the new thread.
  //
  CPUAffinityForNewThreadOption_UseCustomAffinity = 3;
}

// PropertyRepresentations
//
// These constants indicate the representation of a PropertyObject.
//
enum PropertyRepresentations {
  // Field: PropertyRepresentation_None
  //
  // (Value: 0) This is the default representation for non-numeric property objects.
  //
  PropertyRepresentation_None = 0;
  // Field: PropertyRepresentation_Float64
  //
  // (Value: 1) Specifies double-precision, 64-bit floating-point representation.
  //
  PropertyRepresentation_Float64 = 1;
  // Field: PropertyRepresentation_Int64
  //
  // (Value: 2) Specifies signed 64-bit integer representation.
  //
  PropertyRepresentation_Int64 = 2;
  // Field: PropertyRepresentation_UInt64
  //
  // (Value: 3) Specifies unsigned 64-bit integer representation.
  //
  PropertyRepresentation_UInt64 = 3;
}

// APILocations
//
// Use this enumeration with the Locations.AddAPILocation, AnalysisUtilities.ValidateExpression, AnalysisUtilities.ValidatePath, or AnalysisUtilities.ValidateRemoteHost methods to refer to a Location when using an API property or method. The syntax of the enumeration is APILocation_BaseClassName_APIPropertyOrMethodName. For example, APILocation_ActiveXModule_ActiveXReferenceExpr refers to the ActiveXModule.ActiveXReferenceExpr property.
//
enum APILocations {
  // Field: APILocation_None
  //
  // (Value: 0) Use this value to refer to a location that is not associated with an API property or method.
  //
  APILocation_None = 0;
  // Field: APILocation_Step_BatchSyncOption
  //
  // (Value: 1)
  //
  APILocation_Step_BatchSyncOption = 1;
  // Field: APILocation_Step_CustomActionExpression
  //
  // (Value: 2)
  //
  APILocation_Step_CustomActionExpression = 2;
  // Field: APILocation_Step_CustomFalseAction
  //
  // (Value: 3)
  //
  APILocation_Step_CustomFalseAction = 3;
  // Field: APILocation_Step_CustomFalseActionTargetByExpr
  //
  // (Value: 4)
  //
  APILocation_Step_CustomFalseActionTargetByExpr = 4;
  // Field: APILocation_Step_CustomTrueAction
  //
  // (Value: 5)
  //
  APILocation_Step_CustomTrueAction = 5;
  // Field: APILocation_Step_CustomTrueActionTargetByExpr
  //
  // (Value: 6)
  //
  APILocation_Step_CustomTrueActionTargetByExpr = 6;
  // Field: APILocation_Step_EvalPrecondForInteractiveExecution
  //
  // (Value: 7)
  //
  APILocation_Step_EvalPrecondForInteractiveExecution = 7;
  // Field: APILocation_Step_FailAction
  //
  // (Value: 8)
  //
  APILocation_Step_FailAction = 8;
  // Field: APILocation_Step_FailActionTargetByExpr
  //
  // (Value: 9)
  //
  APILocation_Step_FailActionTargetByExpr = 9;
  // Field: APILocation_Step_IconName
  //
  // (Value: 10)
  //
  APILocation_Step_IconName = 10;
  // Field: APILocation_Step_IgnoreRTE
  //
  // (Value: 11)
  //
  APILocation_Step_IgnoreRTE = 11;
  // Field: APILocation_Step_LoopIncExpression
  //
  // (Value: 12)
  //
  APILocation_Step_LoopIncExpression = 12;
  // Field: APILocation_Step_LoopInitExpression
  //
  // (Value: 13)
  //
  APILocation_Step_LoopInitExpression = 13;
  // Field: APILocation_Step_LoopStatusExpression
  //
  // (Value: 14)
  //
  APILocation_Step_LoopStatusExpression = 14;
  // Field: APILocation_Step_LoopType
  //
  // (Value: 15)
  //
  APILocation_Step_LoopType = 15;
  // Field: APILocation_Step_LoopWhileExpression
  //
  // (Value: 16)
  //
  APILocation_Step_LoopWhileExpression = 16;
  // Field: APILocation_Step_ModuleLoadOption
  //
  // (Value: 17)
  //
  APILocation_Step_ModuleLoadOption = 17;
  // Field: APILocation_Step_ModuleUnloadOption
  //
  // (Value: 18)
  //
  APILocation_Step_ModuleUnloadOption = 18;
  // Field: APILocation_Step_MutexNameOrRefExpr
  //
  // (Value: 19)
  //
  APILocation_Step_MutexNameOrRefExpr = 19;
  // Field: APILocation_Step_PassAction
  //
  // (Value: 20)
  //
  APILocation_Step_PassAction = 20;
  // Field: APILocation_Step_PassActionTargetByExpr
  //
  // (Value: 21)
  //
  APILocation_Step_PassActionTargetByExpr = 21;
  // Field: APILocation_Step_PostExpression
  //
  // (Value: 22)
  //
  APILocation_Step_PostExpression = 22;
  // Field: APILocation_Step_Precondition
  //
  // (Value: 23)
  //
  APILocation_Step_Precondition = 23;
  // Field: APILocation_Step_PreExpression
  //
  // (Value: 24)
  //
  APILocation_Step_PreExpression = 24;
  // Field: APILocation_Step_RecordLoopIterationResults
  //
  // (Value: 25)
  //
  APILocation_Step_RecordLoopIterationResults = 25;
  // Field: APILocation_Step_RecordResult
  //
  // (Value: 26)
  //
  APILocation_Step_RecordResult = 26;
  // Field: APILocation_Step_RunMode
  //
  // (Value: 27)
  //
  APILocation_Step_RunMode = 27;
  // Field: APILocation_Step_StatusExpression
  //
  // (Value: 28)
  //
  APILocation_Step_StatusExpression = 28;
  // Field: APILocation_Step_StepFailCausesSequenceFail
  //
  // (Value: 29)
  //
  APILocation_Step_StepFailCausesSequenceFail = 29;
  // Field: APILocation_Step_SwitchExecConnectionLifetime
  //
  // (Value: 30)
  //
  APILocation_Step_SwitchExecConnectionLifetime = 30;
  // Field: APILocation_Step_SwitchExecEnabled
  //
  // (Value: 31)
  //
  APILocation_Step_SwitchExecEnabled = 31;
  // Field: APILocation_Step_SwitchExecMulticonnectMode
  //
  // (Value: 32)
  //
  APILocation_Step_SwitchExecMulticonnectMode = 32;
  // Field: APILocation_Step_SwitchExecOperation
  //
  // (Value: 33)
  //
  APILocation_Step_SwitchExecOperation = 33;
  // Field: APILocation_Step_SwitchExecOperationOrder
  //
  // (Value: 34)
  //
  APILocation_Step_SwitchExecOperationOrder = 34;
  // Field: APILocation_Step_SwitchExecRoutesToConnect
  //
  // (Value: 35)
  //
  APILocation_Step_SwitchExecRoutesToConnect = 35;
  // Field: APILocation_Step_SwitchExecRoutesToDisconnect
  //
  // (Value: 36)
  //
  APILocation_Step_SwitchExecRoutesToDisconnect = 36;
  // Field: APILocation_Step_SwitchExecVirtualDevice
  //
  // (Value: 37)
  //
  APILocation_Step_SwitchExecVirtualDevice = 37;
  // Field: APILocation_Step_SwitchExecWaitForDebounce
  //
  // (Value: 38)
  //
  APILocation_Step_SwitchExecWaitForDebounce = 38;
  // Field: APILocation_Step_UniqueStepId
  //
  // (Value: 39)
  //
  APILocation_Step_UniqueStepId = 39;
  // Field: APILocation_Step_UseMutex
  //
  // (Value: 40)
  //
  APILocation_Step_UseMutex = 40;
  // Field: APILocation_Step_WindowActivation
  //
  // (Value: 41)
  //
  APILocation_Step_WindowActivation = 41;
  // Field: APILocation_LabVIEWModule_VIPath
  //
  // (Value: 42)
  //
  APILocation_LabVIEWModule_VIPath = 42;
  // Field: APILocation_LabVIEWModule_VIType
  //
  // (Value: 43)
  //
  APILocation_LabVIEWModule_VIType = 43;
  // Field: APILocation_LabVIEWModule_RemoteHost
  //
  // (Value: 44)
  //
  APILocation_LabVIEWModule_RemoteHost = 44;
  // Field: APILocation_LabVIEWModule_RemotePortNumber
  //
  // (Value: 45)
  //
  APILocation_LabVIEWModule_RemotePortNumber = 45;
  // Field: APILocation_LabVIEWModule_RemoteConnectionTimeout
  //
  // (Value: 46)
  //
  APILocation_LabVIEWModule_RemoteConnectionTimeout = 46;
  // Field: APILocation_LabVIEWModule_ProjectPath
  //
  // (Value: 47)
  //
  APILocation_LabVIEWModule_ProjectPath = 47;
  // Field: APILocation_LabVIEWModule_GetVIAbsolutePath
  //
  // (Value: 48)
  //
  APILocation_LabVIEWModule_GetVIAbsolutePath = 48;
  // Field: APILocation_LabVIEWParameter_ValueExpr
  //
  // (Value: 49)
  //
  APILocation_LabVIEWParameter_ValueExpr = 49;
  // Field: APILocation_LabVIEWParameterElement_ValueExpr
  //
  // (Value: 50)
  //
  APILocation_LabVIEWParameterElement_ValueExpr = 50;
  // Field: APILocation_CommonCModule_ModulePath
  //
  // (Value: 51)
  //
  APILocation_CommonCModule_ModulePath = 51;
  // Field: APILocation_CommonCModule_ProjectFilePath
  //
  // (Value: 52)
  //
  APILocation_CommonCModule_ProjectFilePath = 52;
  // Field: APILocation_CommonCModule_SourceFilePath
  //
  // (Value: 53)
  //
  APILocation_CommonCModule_SourceFilePath = 53;
  // Field: APILocation_CommonCModule_WorkspaceFilePath
  //
  // (Value: 54)
  //
  APILocation_CommonCModule_WorkspaceFilePath = 54;
  // Field: APILocation_CommonCParameter_ValueExpr
  //
  // (Value: 54)
  //
  APILocation_CommonCParameter_ValueExpr = 55;
  // Field: APILocation_CommonCParameter_StringBufferSizeExpr
  //
  // (Value: 56)
  //
  APILocation_CommonCParameter_StringBufferSizeExpr = 56;
  // Field: APILocation_AdditionalResult_Condition
  //
  // (Value: 57)
  //
  APILocation_AdditionalResult_Condition = 57;
  // Field: APILocation_AdditionalResult_Name
  //
  // (Value: 58)
  //
  APILocation_AdditionalResult_Name = 58;
  // Field: APILocation_AdditionalResult_ValueToLog
  //
  // (Value: 59)
  //
  APILocation_AdditionalResult_ValueToLog = 59;
  // Field: APILocation_DotNetModule_ProjectFilePath
  //
  // (Value: 60)
  //
  APILocation_DotNetModule_ProjectFilePath = 60;
  // Field: APILocation_DotNetModule_SolutionFilePath
  //
  // (Value: 61)
  //
  APILocation_DotNetModule_SolutionFilePath = 61;
  // Field: APILocation_DotNetModule_SourceFilePath
  //
  // (Value: 62)
  //
  APILocation_DotNetModule_SourceFilePath = 62;
  // Field: APILocation_DotNetModule_GetAssembly
  //
  // (Value: 63)
  //
  APILocation_DotNetModule_GetAssembly = 63;
  // Field: APILocation_DotNetParameter_ValueExpr
  //
  // (Value: 64)
  //
  APILocation_DotNetParameter_ValueExpr = 64;
  // Field: APILocation_ActiveXModule_ActiveXReferenceExpr
  //
  // (Value: 65)
  //
  APILocation_ActiveXModule_ActiveXReferenceExpr = 65;
  // Field: APILocation_ActiveXModule_FilePath
  //
  // (Value: 66)
  //
  APILocation_ActiveXModule_FilePath = 66;
  // Field: APILocation_ActiveXModule_RemoteHost
  //
  // (Value: 67)
  //
  APILocation_ActiveXModule_RemoteHost = 67;
  // Field: APILocation_ActiveXParameter_ValueExpr
  //
  // (Value: 68)
  //
  APILocation_ActiveXParameter_ValueExpr = 68;
  // Field: APILocation_HTBasicModule_SubroutineFilePath
  //
  // (Value: 70)
  //
  APILocation_HTBasicModule_SubroutineFilePath = 70;
  // Field: APILocation_SequenceCallModule_CustomCPUAffinityForNewThread
  //
  // (Value: 71)
  //
  APILocation_SequenceCallModule_CustomCPUAffinityForNewThread = 71;
  // Field: APILocation_SequenceCallModule_NewExecutionBreakOnEntryExpr
  //
  // (Value: 72)
  //
  APILocation_SequenceCallModule_NewExecutionBreakOnEntryExpr = 72;
  // Field: APILocation_SequenceCallModule_NewExecutionModelPath
  //
  // (Value: 73)
  //
  APILocation_SequenceCallModule_NewExecutionModelPath = 73;
  // Field: APILocation_SequenceCallModule_NewExecutionTypeMaskExpr
  //
  // (Value: 74)
  //
  APILocation_SequenceCallModule_NewExecutionTypeMaskExpr = 74;
  // Field: APILocation_SequenceCallModule_RemoteHost
  //
  // (Value: 75)
  //
  APILocation_SequenceCallModule_RemoteHost = 75;
  // Field: APILocation_SequenceCallModule_SequenceFilePath
  //
  // (Value: 76)
  //
  APILocation_SequenceCallModule_SequenceFilePath = 76;
  // Field: APILocation_SequenceCallModule_SequenceName
  //
  // (Value: 77)
  //
  APILocation_SequenceCallModule_SequenceName = 77;
  // Field: APILocation_SequenceCallModule_StoreActiveXReferenceExpr
  //
  // (Value: 78)
  //
  APILocation_SequenceCallModule_StoreActiveXReferenceExpr = 78;
  // Field: APILocation_SequenceCallParameter_ValueExpr
  //
  // (Value: 79)
  //
  APILocation_SequenceCallParameter_ValueExpr = 79;
  // Field: APILocation_StepType_IconName
  //
  // (Value: 80)
  //
  APILocation_StepType_IconName = 80;
  // Field: APILocation_StepType_ModuleLoadOption
  //
  // (Value: 81)
  //
  APILocation_StepType_ModuleLoadOption = 81;
  // Field: APILocation_StepType_ModuleUnloadOption
  //
  // (Value: 82)
  //
  APILocation_StepType_ModuleUnloadOption = 82;
  // Field: APILocation_StepType_EvalPrecondForInteractiveExecution
  //
  // (Value: 83)
  //
  APILocation_StepType_EvalPrecondForInteractiveExecution = 83;
  // Field: APILocation_StepType_WindowActivation
  //
  // (Value: 84)
  //
  APILocation_StepType_WindowActivation = 84;
  // Field: APILocation_StepType_RunMode
  //
  // (Value: 85)
  //
  APILocation_StepType_RunMode = 85;
  // Field: APILocation_StepType_LoopInitExpression
  //
  // (Value: 86)
  //
  APILocation_StepType_LoopInitExpression = 86;
  // Field: APILocation_StepType_LoopIncExpression
  //
  // (Value: 87)
  //
  APILocation_StepType_LoopIncExpression = 87;
  // Field: APILocation_StepType_LoopWhileExpression
  //
  // (Value: 88)
  //
  APILocation_StepType_LoopWhileExpression = 88;
  // Field: APILocation_StepType_LoopStatusExpression
  //
  // (Value: 89)
  //
  APILocation_StepType_LoopStatusExpression = 89;
  // Field: APILocation_StepType_LoopType
  //
  // (Value: 90)
  //
  APILocation_StepType_LoopType = 90;
  // Field: APILocation_StepType_PassAction
  //
  // (Value: 91)
  //
  APILocation_StepType_PassAction = 91;
  // Field: APILocation_StepType_FailAction
  //
  // (Value: 92)
  //
  APILocation_StepType_FailAction = 92;
  // Field: APILocation_StepType_PassActionTargetByExpr
  //
  // (Value: 93)
  //
  APILocation_StepType_PassActionTargetByExpr = 93;
  // Field: APILocation_StepType_FailActionTargetByExpr
  //
  // (Value: 94)
  //
  APILocation_StepType_FailActionTargetByExpr = 94;
  // Field: APILocation_StepType_CustomActionExpression
  //
  // (Value: 95)
  //
  APILocation_StepType_CustomActionExpression = 95;
  // Field: APILocation_StepType_CustomTrueAction
  //
  // (Value: 96)
  //
  APILocation_StepType_CustomTrueAction = 96;
  // Field: APILocation_StepType_CustomFalseAction
  //
  // (Value: 97)
  //
  APILocation_StepType_CustomFalseAction = 97;
  // Field: APILocation_StepType_CustomTrueActionTargetByExpr
  //
  // (Value: 98)
  //
  APILocation_StepType_CustomTrueActionTargetByExpr = 98;
  // Field: APILocation_StepType_CustomFalseActionTargetByExpr
  //
  // (Value: 99)
  //
  APILocation_StepType_CustomFalseActionTargetByExpr = 99;
  // Field: APILocation_StepType_SwitchExecVirtualDevice
  //
  // (Value: 100)
  //
  APILocation_StepType_SwitchExecVirtualDevice = 100;
  // Field: APILocation_StepType_SwitchExecOperation
  //
  // (Value: 101)
  //
  APILocation_StepType_SwitchExecOperation = 101;
  // Field: APILocation_StepType_SwitchExecRoutesToConnect
  //
  // (Value: 102)
  //
  APILocation_StepType_SwitchExecRoutesToConnect = 102;
  // Field: APILocation_StepType_SwitchExecMulticonnectMode
  //
  // (Value: 103)
  //
  APILocation_StepType_SwitchExecMulticonnectMode = 103;
  // Field: APILocation_StepType_SwitchExecConnectionLifetime
  //
  // (Value: 104)
  //
  APILocation_StepType_SwitchExecConnectionLifetime = 104;
  // Field: APILocation_StepType_SwitchExecRoutesToDisconnect
  //
  // (Value: 105)
  //
  APILocation_StepType_SwitchExecRoutesToDisconnect = 105;
  // Field: APILocation_StepType_SwitchExecOperationOrder
  //
  // (Value: 106)
  //
  APILocation_StepType_SwitchExecOperationOrder = 106;
  // Field: APILocation_StepType_MutexNameOrRefExpr
  //
  // (Value: 107)
  //
  APILocation_StepType_MutexNameOrRefExpr = 107;
  // Field: APILocation_StepType_BatchSyncOption
  //
  // (Value: 108)
  //
  APILocation_StepType_BatchSyncOption = 108;
  // Field: APILocation_StepType_PreExpression
  //
  // (Value: 109)
  //
  APILocation_StepType_PreExpression = 109;
  // Field: APILocation_StepType_PostExpression
  //
  // (Value: 110)
  //
  APILocation_StepType_PostExpression = 110;
  // Field: APILocation_StepType_StatusExpression
  //
  // (Value: 111)
  //
  APILocation_StepType_StatusExpression = 111;
  // Field: APILocation_StepType_Precondition
  //
  // (Value: 112)
  //
  APILocation_StepType_Precondition = 112;
  // Field: APILocation_StepType_DefaultNameExpr
  //
  // (Value: 113)
  //
  APILocation_StepType_DefaultNameExpr = 113;
  // Field: APILocation_StepType_DescriptionExpr
  //
  // (Value: 114)
  //
  APILocation_StepType_DescriptionExpr = 114;
  // Field: APILocation_StepType_MenuItemNameExpr
  //
  // (Value: 115)
  //
  APILocation_StepType_MenuItemNameExpr = 115;
  // Field: APILocation_StepType_IgnoreRTE
  //
  // (Value: 116)
  //
  APILocation_StepType_IgnoreRTE = 116;
  // Field: APILocation_StepType_RecordLoopIterationResults
  //
  // (Value: 117)
  //
  APILocation_StepType_RecordLoopIterationResults = 117;
  // Field: APILocation_StepType_RecordResult
  //
  // (Value: 118)
  //
  APILocation_StepType_RecordResult = 118;
  // Field: APILocation_StepType_StepFailCausesSequenceFail
  //
  // (Value: 119)
  //
  APILocation_StepType_StepFailCausesSequenceFail = 119;
  // Field: APILocation_StepType_SwitchExecEnabled
  //
  // (Value: 120)
  //
  APILocation_StepType_SwitchExecEnabled = 120;
  // Field: APILocation_StepType_SwitchExecWaitForDebounce
  //
  // (Value: 121)
  //
  APILocation_StepType_SwitchExecWaitForDebounce = 121;
  // Field: APILocation_StepType_UseMutex
  //
  // (Value: 122)
  //
  APILocation_StepType_UseMutex = 122;
  // Field: APILocation_SequenceFile_ModelPath
  //
  // (Value: 123)
  //
  APILocation_SequenceFile_ModelPath = 123;
  // Field: APILocation_DllParameter_ImaginaryPartValueExpr
  //
  // (Value: 124)
  //
  APILocation_DllParameter_ImaginaryPartValueExpr = 124;
  // Field: APILocation_LabVIEWParameterElement_ElementCaption
  //
  // (Value: 125)
  //
  APILocation_LabVIEWParameterElement_ElementCaption = 125;
  // Field: APILocation_LabVIEWParameter_ParameterCaption
  //
  // (Value: 126)
  //
  APILocation_LabVIEWParameter_ParameterCaption = 126;
  // Field: APILocation_DotNetParameter_ParameterName
  //
  // (Value: 127)
  //
  APILocation_DotNetParameter_ParameterName = 127;
  // Field: APILocation_Sequence_DisableResults
  //
  // (Value: 128)
  //
  APILocation_Sequence_DisableResults = 128;
  // Field: APILocation_LabVIEWModule_ClassPath
  //
  // (Value: 129)
  //
  APILocation_LabVIEWModule_ClassPath = 129;
  // Field: APILocation_LabVIEWModule_CallName
  //
  // (Value: 130)
  //
  APILocation_LabVIEWModule_CallName = 130;
  // Field: APILocation_Step_ResultRecordingOption
  //
  // (Value: 131)
  //
  APILocation_Step_ResultRecordingOption = 131;
  // Field: APILocation_StepType_ResultRecordingOption
  //
  // (Value: 132)
  //
  APILocation_StepType_ResultRecordingOption = 132;
  // Field: APILocation_LabVIEWModule_NodeLibraryName
  //
  // (Value: 133)
  //
  APILocation_LabVIEWModule_NodeLibraryName = 133;
  // Field: APILocation_LabVIEWNXGModule_ProjectPath
  //
  // (Value: 134)
  //
  APILocation_LabVIEWNXGModule_ProjectPath = 134;
  // Field: APILocation_LabVIEWNXGModule_GllPath
  //
  // (Value: 135)
  //
  APILocation_LabVIEWNXGModule_GllPath = 135;
  // Field: APILocation_LabVIEWNXGModule_QualifiedName
  //
  // (Value: 136)
  //
  APILocation_LabVIEWNXGModule_QualifiedName = 136;
  // Field: APILocation_LabVIEWNXGParameter_ParameterLabel
  //
  // (Value: 137)
  //
  APILocation_LabVIEWNXGParameter_ParameterLabel = 137;
  // Field: APILocation_LabVIEWNXGParameter_ValueExpression
  //
  // (Value: 138)
  //
  APILocation_LabVIEWNXGParameter_ValueExpression = 138;
  // Field: APILocation_LabVIEWNXGModule_ModuleQualifiedName
  //
  // (Value: 139)
  //
  APILocation_LabVIEWNXGModule_ModuleQualifiedName = 139;
  // Field: APILocation_LabVIEWNXGParameter_Type
  //
  // (Value: 140)
  //
  APILocation_LabVIEWNXGParameter_Type = 140;
  // Field: APILocation_LabVIEWModule_OverrideSourceProjectPath
  //
  // (Value: 141)
  //
  APILocation_LabVIEWModule_OverrideSourceProjectPath = 141;
  // Field: APILocation_LabVIEWModule_OverrideSourceVIPath
  //
  // (Value: 142)
  //
  APILocation_LabVIEWModule_OverrideSourceVIPath = 142;
  // Field: APILocation_LabVIEWModule_OverrideSourceClassPath
  //
  // (Value: 143)
  //
  APILocation_LabVIEWModule_OverrideSourceClassPath = 143;
  // Field: APILocation_PythonModule_PythonVersion
  //
  // (Value: 144)
  //
  APILocation_PythonModule_PythonVersion = 144;
  // Field: APILocation_PythonModule_ModulePath
  //
  // (Value: 145)
  //
  APILocation_PythonModule_ModulePath = 145;
  // Field: APILocation_PythonModule_PythonVirtualEnvironmentPath
  //
  // (Value: 146)
  //
  APILocation_PythonModule_PythonVirtualEnvironmentPath = 146;
  // Field: APILocation_PythonModule_InterpreterReferenceExpr
  //
  // (Value: 147)
  //
  APILocation_PythonModule_InterpreterReferenceExpr = 147;
  // Field: APILocation_PythonModule_ClassName
  //
  // (Value: 148)
  //
  APILocation_PythonModule_ClassName = 148;
  // Field: APILocation_PythonModule_FunctionOrAttributeName
  //
  // (Value: 149)
  //
  APILocation_PythonModule_FunctionOrAttributeName = 149;
  // Field: APILocation_PythonModule_ClassInstanceLocationExpr
  //
  // (Value: 150)
  //
  APILocation_PythonModule_ClassInstanceLocationExpr = 150;
  // Field: APILocation_PythonParameter_ValueExpr
  //
  // (Value: 151)
  //
  APILocation_PythonParameter_ValueExpr = 151;
  // Field: APILocation_LabVIEWModule_OverrideBinaryProjectPath
  //
  // (Value: 152)
  //
  APILocation_LabVIEWModule_OverrideBinaryProjectPath = 152;
  // Field: APILocation_LabVIEWModule_OverrideBinaryVIPath
  //
  // (Value: 153)
  //
  APILocation_LabVIEWModule_OverrideBinaryVIPath = 153;
  // Field: APILocation_LabVIEWModule_OverrideBinaryClassPath
  //
  // (Value: 154)
  //
  APILocation_LabVIEWModule_OverrideBinaryClassPath = 154;
}

// module 

// VersionConstants
//
// 
//
service VersionConstants {
  // Field: VersionConstant_MajorVersion
  //
  // (Value: 21)
  //
  rpc Get_VersionConstant_MajorVersion(ConstantValueRequest) returns (int32Response);
  // Field: VersionConstant_MinorVersion
  //
  // (Value: 1)
  //
  rpc Get_VersionConstant_MinorVersion(ConstantValueRequest) returns (int32Response);
  // Field: VersionConstant_RevisionVersion
  //
  // 
  //
  rpc Get_VersionConstant_RevisionVersion(ConstantValueRequest) returns (int32Response);
  // Field: VersionConstant_PatchVersion
  //
  // 
  //
  rpc Get_VersionConstant_PatchVersion(ConstantValueRequest) returns (int32Response);
  // Field: VersionConstant_BuildVersion
  //
  // 
  //
  rpc Get_VersionConstant_BuildVersion(ConstantValueRequest) returns (int32Response);
  // Field: VersionConstant_Version
  //
  // (Value: "21.1")
  //
  rpc Get_VersionConstant_Version(ConstantValueRequest) returns (stringResponse);
  // Field: VersionConstant_FullVersion
  //
  // (Value: "21.1.0.0")
  //
  rpc Get_VersionConstant_FullVersion(ConstantValueRequest) returns (stringResponse);
  // Field: VersionConstant_YearBasedVersion
  //
  // (Value: "2021")
  //
  rpc Get_VersionConstant_YearBasedVersion(ConstantValueRequest) returns (stringResponse);
  // Field: VersionConstant_DisplayVersion
  //
  // (Value: "2021(21.1.0.0)")
  //
  rpc Get_VersionConstant_DisplayVersion(ConstantValueRequest) returns (stringResponse);
  // Field: VersionConstant_Copyright
  //
  // 
  //
  rpc Get_VersionConstant_Copyright(ConstantValueRequest) returns (stringResponse);
  // Field: VersionConstant_Product
  //
  // (Value: "TestStand 2021 SP1")
  //
  rpc Get_VersionConstant_Product(ConstantValueRequest) returns (stringResponse);
  // Field: VersionConstant_Company
  //
  rpc Get_VersionConstant_Company(ConstantValueRequest) returns (stringResponse);
  // Field: VersionConstant_Trademark
  //
  rpc Get_VersionConstant_Trademark(ConstantValueRequest) returns (stringResponse);
}

// AdditionalResultKinds
//
// Use these constants with the AdditionalResult.Kind property.
//
enum AdditionalResultKinds {
  AdditionalResultKinds_reservedZero = 0;
  // Field: AdditionalResultKind_Custom
  //
  // (Value: 1) Specifies a custom additional result.
  //
  AdditionalResultKind_Custom = 1;
  // Field: AdditionalResultKind_InParameter
  //
  // (Value: 2) Specifies an additional result for the input value of a parameter.
  //
  AdditionalResultKind_InParameter = 2;
  // Field: AdditionalResultKind_OutParameter
  //
  // (Value: 3) Specifies an additional result for the output value of a parameter.
  //
  AdditionalResultKind_OutParameter = 3;
  // Field: AdditionalResultKind_Call
  //
  // (Value: 4) Specifies an additional result for a .NET call.
  //
  AdditionalResultKind_Call = 4;
}

// ThreadTerminationOptions
//
// Use these options to determine how a thread responds when its execution terminates.
//
enum ThreadTerminationOptions {
  // Field: ThreadTerminationOption_Normal
  //
  // (Value: 0) Specifies that a thread stops when its execution terminates.
  //
  ThreadTerminationOption_Normal = 0;
  // Field: ThreadTerminationOption_Prompt
  //
  // (Value: 1) Specifies that a thread does not stop when its execution terminates unless you set the Execution.OverrideNonTerminatableThreads property. If an execution attempts to terminate and the execution is running only threads that specify this option, the execution sends the UIMsg_NonTerminatableThreadsArePreventingTermination event. You can use this value to protect a process model worker thread so the thread does not stop if the user terminates the current UUT or batch.
  //
  ThreadTerminationOption_Prompt = 1;
  // Field: ThreadTerminationOption_Never
  //
  // (Value: 2) Specifies that a thread does not stop when its execution terminates. The thread must stop before its execution can end. Use this value to protect a thread so the thread does not stop and can complete its work even if its execution attempts to terminate.
  //
  ThreadTerminationOption_Never = 2;
}

// FailureActions
//
// Use these options to specify whether execution proceeds to the Cleanup step group when a step sets the status property of the sequence to Failed.
//
enum FailureActions {
  // Field: FailureAction_None
  //
  // (Value: 0) Specifies that execution flow does not proceed to the Cleanup step group if the step sets the status property of the sequence to Failed.
  //
  FailureAction_None = 0;
  // Field: FailureAction_GotoCleanup
  //
  // (Value: 1) Specifies that execution flow proceeds to the Cleanup step group if the step sets the status property of the sequence to Failed.
  //
  FailureAction_GotoCleanup = 1;
  // Field: FailureAction_UseStationOption
  //
  // (Value: 2) Specifies that execution flow proceeds to the Cleanup step group if the step sets the status property of the sequence to Failed and the value of the  StationOptions.AlwaysGotoCleanupOnFailure property is True.
  //
  FailureAction_UseStationOption = 2;
}

// ResultRecordingOptions
//
// Use these options to specify whether a step records a result.
//
enum ResultRecordingOptions {
  // Field: ResultRecordingOption_Disabled
  //
  // (Value: 0) Specifies that the step does not record results.
  //
  ResultRecordingOption_Disabled = 0;
  // Field: ResultRecordingOption_Enabled
  //
  // (Value: 1) Specifies that the step records results unless the Sequence.DisableResults or StationOptions.DisableResults property is True.
  //
  ResultRecordingOption_Enabled = 1;
  // Field: ResultRecordingOption_EnabledAndOverrideSequenceSetting
  //
  // (Value: 2) Specifies that the step records results unless the StationOptions.DisableResults property is True.
  //
  ResultRecordingOption_EnabledAndOverrideSequenceSetting = 2;
}

// module 

// PostResultsCallbackOptions
//
// Use these options to modify when TestStand invokes PostResults callbacks.
//
enum PostResultsCallbackOptions {
  // Field: PostResultsCallbackOption_NoOptions
  //
  // (Value: 0) Specifies no PostResults callback options.
  //
  PostResultsCallbackOption_NoOptions = 0;
  // Field: PostResultsCallbackOption_CallAfterProvisionalResult
  //
  // (Value: 1) Overrides the options and specifies that TestStand calls the PostResults callback after collecting each provisional result.
  //
  PostResultsCallbackOption_CallAfterProvisionalResult = 1;
}

// ResultLogRecordTypes
//
// Use these options with the ResultLogger methods.
//
enum ResultLogRecordTypes {
  // Field: ResultLogRecordType_NotARecordType
  //
  // (Value: 0) Indicates a value that is not a valid ResultLogRecordType.
  //
  ResultLogRecordType_NotARecordType = 0;
  // Field: ResultLogRecordType_Begin
  //
  // (Value: 1) Indicates a record the ResultLogger.LogBegin method creates. The record contains the following objects:    * [0] ModelThreadType (NI_ModelThreadType)    * [1] ModelData (container)    * [2] ProcessModelClientPath (Path)    * [3] NumberOfSockets (number)    * [4] SocketIndex (number)    * [5] ParentThreadId (number)    * [6] ParentExecutionId (number)
  //
  ResultLogRecordType_Begin = 1;
  // Field: ResultLogRecordType_PreBatch
  //
  // (Value: 2) Indicates a record the ResultLogger.LogPreBatch method creates.  The record contains the following objects:    * [0] ModelThreadType (NI_ModelThreadType)    * [1] ModelData (container)    * [2] ProcessModelClientPath (Path)    * [3] StartDate (DateDetails)    * [4] StartTime (TimeDetails)    * [5] UUT (container)    * [6] continueTesting (Boolean output parameter)
  //
  ResultLogRecordType_PreBatch = 2;
  // Field: ResultLogRecordType_BatchStart
  //
  // (Value: 3) Indicates a record the ResultLogger.LogBatchStart method creates. The record contains the following objects:    * [0] ModelThreadType (NI_ModelThreadType)    * [1] ModelData (container)    * [2] ProcessModelClientPath (Path)    * [3] StartDate (DateDetails)    * [4] StartTime (TimeDetails)    * [5] UUT (container)
  //
  ResultLogRecordType_BatchStart = 3;
  // Field: ResultLogRecordType_PreUUT
  //
  // (Value: 4) Indicates a record the ResultLogger.LogPreUUT method creates. The record contains the following objects:    * [0] ModelThreadType (NI_ModelThreadType)    * [1] ModelData (container)    * [2] ProcessModelClientPath (Path)    * [3] StartDate (DateDetails)    * [4] StartTime (TimeDetails)    * [5] UUT (container)    * [6] continueTesting (Boolean output parameter)
  //
  ResultLogRecordType_PreUUT = 4;
  // Field: ResultLogRecordType_UUTStart
  //
  // (Value: 5) Indicates a record the ResultLogger.LogUUTStart method creates. The record contains the following objects:    * [0] ModelThreadType (NI_ModelThreadType)    * [1] ModelData (container)    * [2] ProcessModelClientPath (Path)    * [3] StartDate (DateDetails)    * [4] StartTime (TimeDetails)    * [5] UUT (container)
  //
  ResultLogRecordType_UUTStart = 5;
  // Field: ResultLogRecordType_OnTheFlyStepResults
  //
  // (Value: 6) Indicates a record the ResultLogger.LogOnTheFlyStepResults method creates. The record contains the following objects:    * [0] UUT (container)    * [1] CallbackNames (string array)    * [2] ParentIds (number array)    * [3] Results(container)
  //
  ResultLogRecordType_OnTheFlyStepResults = 6;
  // Field: ResultLogRecordType_UUTDone
  //
  // (Value: 7) Indicates a record the ResultLogger.LogUUTDone method creates. The record contains the following objects:    * [0] ModelData (container)    * [1] UUT (container)    * [2] UUTStatus (String)    * [3] UUTResult (Result)
  //
  ResultLogRecordType_UUTDone = 7;
  // Field: ResultLogRecordType_PostUUT
  //
  // (Value: 8) Indicates a report the ResultLogger.LogPostUUT method creates. The record contains the following objects:    * [0] ModelData (container)    * [1] UUT (container)    * [2] UUTStatus (string)    * [3] UUTResult (container)
  //
  ResultLogRecordType_PostUUT = 8;
  // Field: ResultLogRecordType_BatchDone
  //
  // (Value: 9) Indicates a record the ResultLogger.LogBatchDone method creates. The record contains the following objects:    * [0] ModelData (container)    * [1] UUT (container)    * [2] UUTStatus (String)    * [3] UUTResult (Result)
  //
  ResultLogRecordType_BatchDone = 9;
  // Field: ResultLogRecordType_PostBatch
  //
  // (Value: 10) Indicates a record the ResultLogger.LogPostBatch method creates. The record contains the following objects:    * [0] ModelData (container)    * [1] UUT (container)    * [2] UUTStatus (String)    * [3] UUTResult (Result)
  //
  ResultLogRecordType_PostBatch = 10;
  // Field: ResultLogRecordType_End
  //
  // (Value: 11) Indicates a record the ResultLogger.LogEnd method creates. The record contains the [0] ModelData (container) object.
  //
  ResultLogRecordType_End = 11;
  // Field: ResultLogRecordType_Deleted
  //
  // (Value: 12) Indicates a result that has been deleted from a TestStand results (.tsr) file.
  //
  ResultLogRecordType_Deleted = 12;
}

// module 

// PostResultsCallbackMaskOptions
//
// These constants represent the options you can use with the Execution.PostResultsCallbackMask, Execution.PostResultsCallback_PreFlushMask, and Execution.PostResultsCallback_PostFlushMask methods. Use the bitwise-OR operator to specify more than one option for a method.
// 
// 
//
enum PostResultsCallbackMaskOptions {
  // Field: PostResultsCallbackMaskOption_None
  //
  // (Value: 0) Specifies not to call PostResults callbacks.
  //
  PostResultsCallbackMaskOption_None = 0;
  // Field: PostResultsCallbackMaskOption_PreStep
  //
  // (Value: 1) Specifies to call PostResults callbacks with all accumulated results for all PreStep callback sequences.
  //
  PostResultsCallbackMaskOption_PreStep = 1;
  // Field: PostResultsCallbackMaskOption_PostStep
  //
  // (Value: 2) Specifies to call PostResults callbacks with all accumulated results for all PostStep callback sequences.
  //
  PostResultsCallbackMaskOption_PostStep = 2;
  // Field: PostResultsCallbackMaskOption_PreInteractive
  //
  // (Value: 4) Specifies to call PostResults callbacks with all accumulated results for all PreInteractive callback sequences.
  //
  PostResultsCallbackMaskOption_PreInteractive = 4;
  // Field: PostResultsCallbackMaskOption_PostInteractive
  //
  // (Value: 8) Specifies to call PostResults callbacks with all accumulated results for all PostInteractive callback sequences.
  //
  PostResultsCallbackMaskOption_PostInteractive = 8;
  // Field: PostResultsCallbackMaskOption_PostResultListEntry
  //
  // (Value: 16) Specifies to call PostResults callbacks with all accumulated results for all PostResultListEntry callback sequences.
  //
  PostResultsCallbackMaskOption_PostResultListEntry = 16;
  // Field: PostResultsCallbackMaskOption_PostStepRuntimeError
  //
  // (Value: 32) Specifies to call PostResults callbacks with all accumulated results for all PostStepRuntimeError callback sequences.
  //
  PostResultsCallbackMaskOption_PostStepRuntimeError = 32;
  // Field: PostResultsCallbackMaskOption_PostStepFailure
  //
  // (Value: 64) Specifies to call PostResults callbacks with all accumulated results for all PostStepFailure callback sequences.
  //
  PostResultsCallbackMaskOption_PostStepFailure = 64;
  // Field: PostResultsCallbackMaskOption_PostAction
  //
  // (Value: 128) Specifies to call PostResults callbacks with all accumulated results for all PostAction callback sequences.
  //
  PostResultsCallbackMaskOption_PostAction = 128;
  // Field: PostResultsCallbackMaskOption_SequenceCall
  //
  // (Value: 256) Specifies to call PostResults callbacks with all accumulated results for all non-Engine callback sequences.
  //
  PostResultsCallbackMaskOption_SequenceCall = 256;
  // Field: PostResultsCallbackMaskOption_All
  //
  // (Value: -1) Specifies to call PostResults callbacks with all accumulated results for all sequences except for SequenceFileLoad callback and SequenceFileUnload callback sequences.
  //
  PostResultsCallbackMaskOption_All = -1;
}

// module 

// ReadPropertyObjectFileOptions
//
// These constants represent the options you can use with the Engine.ReadPropertyObjectFile method. Use the bitwise-OR operator to specify more than one option.
//
enum ReadPropertyObjectFileOptions {
  // Field: ReadPropertyObjectFileOption_None
  //
  // (Value: 0x0) No options.
  //
  ReadPropertyObjectFileOption_None = 0;
  // Field: ReadPropertyObjectFileOption_TypesOnly
  //
  // (Value: 0x2) Pass this option to read only the types for the specified file. The method does not read the main data object when you select this option.
  //
  ReadPropertyObjectFileOption_TypesOnly = 2;
}

// FileGlobalsScopeOptions
//
// Use these constants with the SequenceFile.FileGlobalsScope property to specify the scope of the sequence file global variables.
//
enum FileGlobalsScopeOptions {
  // Field: FileGlobalsScopeOption_SeparateForEachExecution
  //
  // (Value: 0) Specifies that each execution that runs the sequence file creates a separate run-time copy of the global variables and initializes the variables to the default values. Threads within an execution share the run-time copy of the variables for the execution.
  //
  FileGlobalsScopeOption_SeparateForEachExecution = 0;
  // Field: FileGlobalsScopeOption_AllExecutionsShare
  //
  // (Value: 1) Specifies that the first execution that runs the sequence file creates a run-time copy of the global variables and initializes the variables to the default values. Any other execution that runs the sequence file concurrently uses the same global variables. When the last execution that uses the sequence file global variables completes, TestStand discards the file global variables. A common use case for selecting this option might be when you want to share variables among multiple executions you start with the Batch or Parallel process model.
  //
  FileGlobalsScopeOption_AllExecutionsShare = 1;
}

// SetTempFileDirectoryOptions
//
// Use this enumeration with the Report.SetTempFileDirectoryEx method.
//
enum SetTempFileDirectoryOptions {
  // Field: SetTempFileDirectoryOption_Default
  //
  // (Value: 0) Specifies the default option. When you use this value with the Report.SetTempFileDirectoryEx method, calling the Report.Load or Report.Save method modifies the directory path where TestStand saves the file the Report.GetTempFile method creates.
  // Using this value with the Report.SetTempFileDirectoryEx method results in the same behavior as using the Report.TempFileDirectory property to specify the directory path where TestStand saves the file the Report.GetTempFile method creates.
  //
  SetTempFileDirectoryOption_Default = 0;
  // Field: SetTempFileDirectoryOption_NeverOverride
  //
  // (Value: 1) Specifies to never override the directory path the Report.SetTempFileDirectoryEx method specifies when you call the Report.Load or Report.Save method. You can override the directory path by calling the Report.SetTempFileDirectoryEx method again.
  //
  SetTempFileDirectoryOption_NeverOverride = 1;
}

// module 

// ProfilerOptions
//
// Use these constants with the Engine.ProfilerOptions property to specify the type of data that profiling collects.
//
enum ProfilerOptions {
  // Field: ProfilerOption_NoOptions
  //
  // (Value: 0x0) No data is excluded from the profile.
  //
  ProfilerOption_NoOptions = 0;
  // Field: ProfilerOption_ExcludeStepTypeModules
  //
  // (Value: 0x1) Exclude Step types from the profile.
  //
  ProfilerOption_ExcludeStepTypeModules = 1;
  // Field: ProfilerOption_ExcludeStepModules
  //
  // (Value: 0x2) Exclude Step modules from the profile.
  //
  ProfilerOption_ExcludeStepModules = 2;
  // Field: ProfilerOption_ExcludeLoad
  //
  // (Value: 0x4) Exclude loaded modules from the profile.
  //
  ProfilerOption_ExcludeLoad = 4;
  // Field: ProfilerOption_ExcludeUnload
  //
  // (Value: 0x8) Exclude unloaded modules from the profile.
  //
  ProfilerOption_ExcludeUnload = 8;
  // Field: ProfilerOption_ExcludeSteps
  //
  // (Value: 0x10) Exclude steps from the profile.
  //
  ProfilerOption_ExcludeSteps = 16;
  // Field: ProfilerOption_ExcludeSynchronization
  //
  // (Value: 0x20) Exclude synchronization objects from the profile.
  //
  ProfilerOption_ExcludeSynchronization = 32;
  // Field: ProfilerOption_ExcludeProcessModels
  //
  // (Value: 0x40) Exclude process models from the profile.
  //
  ProfilerOption_ExcludeProcessModels = 64;
  // Field: ProfilerOption_ExcludeLocationInformation
  //
  // (Value: 0x80) Exclude location information from the profile.
  //
  ProfilerOption_ExcludeLocationInformation = 128;
  // Field: ProfilerOption_IncludeModulePathsAndEnvironments
  //
  // (Value: 0x100) Include module paths and environments in the profile.
  //
  ProfilerOption_IncludeModulePathsAndEnvironments = 256;
  // Field: ProfilerOption_IncludeModuleInputs
  //
  // (Value: 0x200) Include module input values in the profile.
  //
  ProfilerOption_IncludeModuleInputs = 512;
  // Field: ProfilerOption_IncludeModuleOutputs
  //
  // (Value: 0x400) Include module output values in the profile.
  //
  ProfilerOption_IncludeModuleOutputs = 1024;
}

// module 

// ProfilerOutputMessageSubProperties
//
service ProfilerOutputMessageSubProperties {
  // Field: ProfilerOutputMessageSubProperty_ProfilerMechanism
  //
  rpc Get_ProfilerOutputMessageSubProperty_ProfilerMechanism(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOutputMessageSubProperty_Operation
  //
  rpc Get_ProfilerOutputMessageSubProperty_Operation(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOutputMessageSubProperty_State
  //
  rpc Get_ProfilerOutputMessageSubProperty_State(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOutputMessageSubProperty_Name
  //
  rpc Get_ProfilerOutputMessageSubProperty_Name(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOutputMessageSubProperty_FromProcessModel
  //
  rpc Get_ProfilerOutputMessageSubProperty_FromProcessModel(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOutputMessageSubProperty_ThreadId
  //
  rpc Get_ProfilerOutputMessageSubProperty_ThreadId(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOutputMessageSubProperty_ThreadDisplayName
  //
  rpc Get_ProfilerOutputMessageSubProperty_ThreadDisplayName(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOutputMessageSubProperty_ExecutionId
  //
  rpc Get_ProfilerOutputMessageSubProperty_ExecutionId(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOutputMessageSubProperty_ExecutionDisplayName
  //
  rpc Get_ProfilerOutputMessageSubProperty_ExecutionDisplayName(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOutputMessageSubProperty_AdapterKeyName
  //
  rpc Get_ProfilerOutputMessageSubProperty_AdapterKeyName(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOutputMessageSubProperty_FileDisplayName
  //
  rpc Get_ProfilerOutputMessageSubProperty_FileDisplayName(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOutputMessageSubProperty_Sequence
  //
  rpc Get_ProfilerOutputMessageSubProperty_Sequence(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOutputMessageSubProperty_StepGroup
  //
  rpc Get_ProfilerOutputMessageSubProperty_StepGroup(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOutputMessageSubProperty_Step
  //
  rpc Get_ProfilerOutputMessageSubProperty_Step(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOutputMessageSubProperty_StepIndex
  //
  rpc Get_ProfilerOutputMessageSubProperty_StepIndex(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOutputMessageSubProperty_SocketIndex
  //
  rpc Get_ProfilerOutputMessageSubProperty_SocketIndex(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOutputMessageSubProperty_SocketCount
  //
  rpc Get_ProfilerOutputMessageSubProperty_SocketCount(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOutputMessageSubProperty_TimeoutPeriod
  //
  rpc Get_ProfilerOutputMessageSubProperty_TimeoutPeriod(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOutputMessageSubProperty_PackedProperties
  //
  rpc Get_ProfilerOutputMessageSubProperty_PackedProperties(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOutputMessageSubProperty_BatchType
  //
  rpc Get_ProfilerOutputMessageSubProperty_BatchType(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOutputMessageSubProperty_NameUniquification
  //
  rpc Get_ProfilerOutputMessageSubProperty_NameUniquification(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOutputMessageSubProperty_ResourceAlternativeIndex
  //
  rpc Get_ProfilerOutputMessageSubProperty_ResourceAlternativeIndex(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOutputMessageSubProperty_UseResourceStepDescription
  //
  rpc Get_ProfilerOutputMessageSubProperty_UseResourceStepDescription(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOutputMessageSubProperty_ModulePath
  //
  rpc Get_ProfilerOutputMessageSubProperty_ModulePath(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOutputMessageSubProperty_ModuleEnvironment
  //
  rpc Get_ProfilerOutputMessageSubProperty_ModuleEnvironment(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOutputMessageSubProperty_ModuleInputsAndOutputs
  //
  rpc Get_ProfilerOutputMessageSubProperty_ModuleInputsAndOutputs(ConstantValueRequest) returns (stringResponse);
}

// module 

// ProfilerMechanisms
//
service ProfilerMechanisms {
  // Field: ProfilerMechanism_Semaphore
  //
  rpc Get_ProfilerMechanism_Semaphore(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerMechanism_Lock
  //
  rpc Get_ProfilerMechanism_Lock(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerMechanism_Rendezvous
  //
  rpc Get_ProfilerMechanism_Rendezvous(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerMechanism_Queue
  //
  rpc Get_ProfilerMechanism_Queue(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerMechanism_Notification
  //
  rpc Get_ProfilerMechanism_Notification(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerMechanism_BatchSynchronization
  //
  rpc Get_ProfilerMechanism_BatchSynchronization(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerMechanism_AutoSchedule
  //
  rpc Get_ProfilerMechanism_AutoSchedule(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerMechanism_Wait
  //
  rpc Get_ProfilerMechanism_Wait(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerMechanism_StepModule
  //
  rpc Get_ProfilerMechanism_StepModule(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerMechanism_StepTypeModule
  //
  rpc Get_ProfilerMechanism_StepTypeModule(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerMechanism_Step
  //
  rpc Get_ProfilerMechanism_Step(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerMechanism_UUT
  //
  rpc Get_ProfilerMechanism_UUT(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerMechanism_Batch
  //
  rpc Get_ProfilerMechanism_Batch(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerMechanism_Lot
  //
  rpc Get_ProfilerMechanism_Lot(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerMechanism_Suspension
  //
  rpc Get_ProfilerMechanism_Suspension(ConstantValueRequest) returns (stringResponse);
}

// module 

// ProfilerOperations
//
service ProfilerOperations {
  // Field: ProfilerOperation_UseResource
  //
  rpc Get_ProfilerOperation_UseResource(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOperation_TimeMultiple
  //
  rpc Get_ProfilerOperation_TimeMultiple(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOperation_TimeInterval
  //
  rpc Get_ProfilerOperation_TimeInterval(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOperation_Execution
  //
  rpc Get_ProfilerOperation_Execution(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOperation_Thread
  //
  rpc Get_ProfilerOperation_Thread(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOperation_Enter
  //
  rpc Get_ProfilerOperation_Enter(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOperation_Exit
  //
  rpc Get_ProfilerOperation_Exit(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOperation_Unlock
  //
  rpc Get_ProfilerOperation_Unlock(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOperation_Lock
  //
  rpc Get_ProfilerOperation_Lock(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOperation_Set
  //
  rpc Get_ProfilerOperation_Set(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOperation_Clear
  //
  rpc Get_ProfilerOperation_Clear(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOperation_Pulse
  //
  rpc Get_ProfilerOperation_Pulse(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOperation_Wait
  //
  rpc Get_ProfilerOperation_Wait(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOperation_Enqueue
  //
  rpc Get_ProfilerOperation_Enqueue(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOperation_Dequeue
  //
  rpc Get_ProfilerOperation_Dequeue(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOperation_Flush
  //
  rpc Get_ProfilerOperation_Flush(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOperation_Rendezvous
  //
  rpc Get_ProfilerOperation_Rendezvous(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOperation_Acquire
  //
  rpc Get_ProfilerOperation_Acquire(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOperation_Release
  //
  rpc Get_ProfilerOperation_Release(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOperation_Execute
  //
  rpc Get_ProfilerOperation_Execute(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOperation_Load
  //
  rpc Get_ProfilerOperation_Load(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOperation_Unload
  //
  rpc Get_ProfilerOperation_Unload(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOperation_Test
  //
  rpc Get_ProfilerOperation_Test(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOperation_Break
  //
  rpc Get_ProfilerOperation_Break(ConstantValueRequest) returns (stringResponse);
  // Field: ProfilerOperation_Resume
  //
  rpc Get_ProfilerOperation_Resume(ConstantValueRequest) returns (stringResponse);
}

// ProfilerStates
//
// Describes the transition that the profiler event records.
//
enum ProfilerStates {
  // Field: ProfilerState_NotAState
  //
  // (Value:0)
  //
  ProfilerState_NotAState = 0;
  // Field: ProfilerState_Blocked
  //
  // (Value: 1)
  //
  ProfilerState_Blocked = 1;
  // Field: ProfilerState_InUse
  //
  // (Value: 2)
  //
  ProfilerState_InUse = 2;
  // Field: ProfilerState_Aborted
  //
  // (Value: 3)
  //
  ProfilerState_Aborted = 3;
  // Field: ProfilerState_TimedOut
  //
  // (Value: 4)
  //
  ProfilerState_TimedOut = 4;
  // Field: ProfilerState_Completed
  //
  // (Value: 5)
  //
  ProfilerState_Completed = 5;
}

// module 

// UpdateEnumeratorsElementProperties
//
service UpdateEnumeratorsElementProperties {
  // Field: UpdateEnumeratorsElementProperty_Name
  //
  rpc Get_UpdateEnumeratorsElementProperty_Name(ConstantValueRequest) returns (stringResponse);
  // Field: UpdateEnumeratorsElementProperty_EnumeratorValue
  //
  rpc Get_UpdateEnumeratorsElementProperty_EnumeratorValue(ConstantValueRequest) returns (stringResponse);
  // Field: UpdateEnumeratorsElementProperty_OldName
  //
  rpc Get_UpdateEnumeratorsElementProperty_OldName(ConstantValueRequest) returns (stringResponse);
}

// module 

// UpdateModuleFromStepOptions
//
// 
//
enum UpdateModuleFromStepOptions {
  // Field: UpdateModuleFromStepOption_None
  //
  // (Value: 0)
  //
  UpdateModuleFromStepOption_None = 0;
  // Field: UpdateModuleFromStepOption_CopyParameterValue
  //
  // (Value: 1)
  //
  UpdateModuleFromStepOption_CopyParameterValue = 1;
  // Field: UpdateModuleFromStepOption_CopyParameterDefaultCheckState
  //
  // (Value: 2)
  //
  UpdateModuleFromStepOption_CopyParameterDefaultCheckState = 2;
  // Field: UpdateModuleFromStepOption_CopyParameterLogCheckState
  //
  // (Value: 4)
  //
  UpdateModuleFromStepOption_CopyParameterLogCheckState = 4;
  // Field: UpdateModuleFromStepOption_CopyShowFrontPanelState
  //
  // (Value: 8)
  //
  UpdateModuleFromStepOption_CopyShowFrontPanelState = 8;
  // Field: UpdateModuleFromStepOption_CopyStepRTEState
  //
  // (Value: 10)
  //
  UpdateModuleFromStepOption_CopyStepRTEState = 16;
}

// module 

// GetUpdatedStatusOptions
//
// These constants represent the values you can use with the changedProperties parameter of the LabVIEWNXGModule.HavePropertiesChanged method. Use these constants with the bitwise-OR operator on the value returned in the changedProperties parameter to determine what has changed in module. If the bitwise-OR returns true, then that property or value has changed in the module.
//
enum GetUpdatedStatusOptions {
  // Field: GetUpdatedStatusOption_None
  //
  // (Value: 0x0) None of the validations specified by the options parameter in LabVIEWNXgModule.HavePropertiesChanged failed.
  //
  GetUpdatedStatusOption_None = 0;
  // Field: GetUpdatedStatusOption_GVIDescriptionChanged
  //
  // (Value: 0x1) The GVI description has changed.
  //
  GetUpdatedStatusOption_GVIDescriptionChanged = 1;
  // Field: GetUpdatedStatusOption_GVIChecksumChanged
  //
  // (Value: 0x2) The checksum of the GVI has changed. This indicates that the parameters or namespace of the GVI has changed from when the step was last configured.
  //
  GetUpdatedStatusOption_GVIChecksumChanged = 2;
  // Field: GetUpdatedStatusOption_GVIStateChanged
  //
  // (Value: 0x4) The GVI is broken or not in a runnable state.
  //
  GetUpdatedStatusOption_GVIStateChanged = 4;
  // Field: GetUpdatedStatusOption_ExpectedGLLPathChanged
  //
  // (Value: 0x8) The GLL specified by the GLL Path property does not match the GLL output path of the component selected in the Module Qualified Name. The GLL specified in the step should exactly match the GLL output determined by the project, target and component selected in the step, if any. A mismatch could mean that two different GVIs are being run when the module is executed in the LabVIEW NXG Development System vs when the module is executed in the Runtime Engine.
  //
  GetUpdatedStatusOption_ExpectedGLLPathChanged = 8;
  // Field: GetUpdatedStatusOption_QualifiedNamePresentInGLL
  //
  // (Value: 0x10) The GVI selected in the Module Name property is absent in the GLL specified in the step.
  //
  GetUpdatedStatusOption_QualifiedNamePresentInGLL = 16;
}

// module 

// CheckUpdatedStatusOptions
//
// These constants represent the values you can use with the options parameter of the LabVIEWNXGModule.HavePropertiesChanged method. Use the bitwise-OR operator to specify more than one option.
//
enum CheckUpdatedStatusOptions {
  // Field: CheckUpdatedStatusOption_All
  //
  // (Value: 0x0) Perform validations for all the options.
  //
  CheckUpdatedStatusOption_All = 0;
  // Field: CheckUpdatedStatusOption_GVIDescription
  //
  // (Value: 0x1) Validate if GVI description changed.
  //
  CheckUpdatedStatusOption_GVIDescription = 1;
  // Field: CheckUpdatedStatusOption_GVIChecksum
  //
  // (Value: 0x2) Validate that the checksum of the GVI matches the checksum value stored in the module. Checksum changes indicate that the parameters or namespace of the GVI has changed from when the module was configured/last reloaded.
  //
  CheckUpdatedStatusOption_GVIChecksum = 2;
  // Field: CheckUpdatedStatusOption_GVIState
  //
  // (Value: 0x4) Validate if GVI is broken.
  //
  CheckUpdatedStatusOption_GVIState = 4;
  // Field: CheckUpdatedStatusOption_ExpectedGLLPath
  //
  // (Value: 0x8) Validate that the GLL configured in the GLL Path property of the module matches the output path specified in the LabVIEW NXG component (.gcomp) selected in the step.
  //
  CheckUpdatedStatusOption_ExpectedGLLPath = 8;
  // Field: CheckUpdatedStatusOption_QualifiedNamePresentInGLL
  //
  // (Value: 0x10) Validate that the GVI specified in the module is contained in the component(.gcomp) specified in the Module Qualified Name.
  //
  CheckUpdatedStatusOption_QualifiedNamePresentInGLL = 16;
}

// module 

// CrashCallbackOptions
//
// These constants represent the options for the Engine.RegisterSequenceToExecuteOnCrash method.
//
enum CrashCallbackOptions {
  // Field: CrashCallbackOption_NoOptions
  //
  // (Value: 0x0) No options.
  //
  CrashCallbackOption_NoOptions = 0;
  // Field: CrashCallbackOption_PreloadFile
  //
  // (Value: 0x1) Load the sequence file while registering for crash recovery callback.
  //
  CrashCallbackOption_PreloadFile = 1;
}

// module 

// GetModuleFromProjectOptions
//
// 
//
enum GetModuleFromProjectOptions {
  // Field: GetModuleFromProjectOption_NoOptions
  //
  // (Value: 0)
  //
  GetModuleFromProjectOption_NoOptions = 0;
  // Field: GetModuleFromProjectOption_NoPrompts
  //
  // (Value: 1)
  //
  GetModuleFromProjectOption_NoPrompts = 1;
}

// module 

// FileOpenModes
//
// Use these constants to specify different methods of opening files.
//
enum FileOpenModes {
  // Field: FileOpenMode_NoOptions
  //
  // (Value 0x0) No options.
  //
  FileOpenMode_NoOptions = 0;
  // Field: FileOpenMode_Truncate
  //
  // (Value 0x1) Overwrite an existing file, deleting its contents.
  //
  FileOpenMode_Truncate = 1;
  // Field: FileOpenMode_Append
  //
  // (Value: 0x2) Append to the end of an existing file.
  //
  FileOpenMode_Append = 2;
  // Field: FileOpenMode_Uniquify
  //
  // (Value 0x4) Create a new file it does not exist.  If the file already exists, attempt to make the file name unique.  The algorithm for creating a unique filename depends on the specific function being invoked.
  //
  FileOpenMode_Uniquify = 4;
}

// module 

// ValidateOverrideSettingsOptions
//
// 
//
enum ValidateOverrideSettingsOptions {
  ValidateOverrideSettingsOptions_reservedZero = 0;
  // Field: ValidateOverrideSettingsOption_OverridePath
  //
  // (Value: 0x2)
  //
  ValidateOverrideSettingsOption_OverridePath = 1;
  // Field: ValidateOverrideSettingsOption_OverrideBinaryPath
  //
  // (Value: 0x1)
  //
  ValidateOverrideSettingsOption_OverrideBinaryPath = 2;
  // Field: ValidateOverrideSettingsOption_All
  //
  // (Value: -1)
  //
  ValidateOverrideSettingsOption_All = -1;
}

// CodeReadinessLevels
//
enum CodeReadinessLevels {
  // Field: CodeReadinessLevel_Release
  //
  CodeReadinessLevel_Release = 0;
  // Field: CodeReadinessLevel_Incomplete
  //
  CodeReadinessLevel_Incomplete = 1;
  // Field: CodeReadinessLevel_Prototype
  //
  CodeReadinessLevel_Prototype = 2;
}

// SweepErrorType
//
enum SweepErrorType {
  // Field: SweepErrorType_Error
  //
  SweepErrorType_Error = 0;
  // Field: SweepErrorType_Warning
  //
  SweepErrorType_Warning = 1;
}

// module 

// LogUsageDataOptions
//
enum LogUsageDataOptions {
  // Field: LogUsageDataOption_NoOptions
  //
  LogUsageDataOption_NoOptions = 0;
  // Field: LogUsageDataOption_Json
  //
  LogUsageDataOption_Json = 1;
}

// PropertyObject
//
// Use the PropertyObject class to manipulate and access the values of variables and custom step properties. You can also use the PropertyObject to add, copy, or delete subproperties of variables and custom step properties.
// You can create new objects of this class using the Engine.NewPropertyObject method. You can obtain existing objects of this class as return values from numerous functions. You can obtain the underlying PropertyObject for objects of every class except the Engine class by using the AsPropertyObject method of the respective class.
//
service PropertyObject {
  // Method: ClearTypeDefinitionPasswordHistory
  //
  // Clears the password history of a type definition.
  //
  // You can call this method on any property of the type definition, not just the root object of the type.
  // Note: TestStand supports password-protecting type definitions to deter unauthorized users from editing the types in the sequence editor. However, any TestStand user can continue to programmatically edit a locked type by using the TestStand PropertyObject API. National Instruments does not recommend password-protecting types as the only way of protecting intellectual property.
  //
  // PropertyObject_ClearTypeDefinitionPasswordHistoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //
  // PropertyObject_ClearTypeDefinitionPasswordHistoryResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ClearTypeDefinitionPasswordHistory(PropertyObject_ClearTypeDefinitionPasswordHistoryRequest) returns (PropertyObject_ClearTypeDefinitionPasswordHistoryResponse);
  
  
  // Method: GetSubProperties
  //
  // Returns references to all the subproperties of the property you specify in one atomic, thread-safe operation.
  //
  // Use this method to obtain references to all the subproperties of a PropertyObject in one thread while another thread might add, remove, or rename the subproperties. If you use the PropertyObject.GetNumSubproperties and PropertyObject.GetNthSubProperty methods while another thread adds or removes the subproperties, TestStand might return an unexpected error because the number of subproperties might have changed. The PropertyObject.GetSubProperties method avoids this issue by atomically obtaining all the references to all the subproperties in one call.
  //
  // PropertyObject_GetSubPropertiesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetSubPropertiesResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated PropertyObjectInstance - The return type of the PropertyObject[] object.
  //
  rpc GetSubProperties(PropertyObject_GetSubPropertiesRequest) returns (PropertyObject_GetSubPropertiesResponse);
  
  
  // Method: GetPropertyObjectElements
  //
  // Returns references to all the array elements of the property you specify in one atomic, thread-safe operation. The property you specify must be an array of containers or this method returns a type mismatch error.
  //
  // Use this method to obtain references to all the array elements of an array of containers in one thread while another thread might add, remove, or rename the elements. If you use the PropertyObject.GetNumElements and PropertyObject.GetPropertyObjectByOffset methods while another thread adds or removes the elements, TestStand might return an unexpected error because the number of elements might have changed. The PropertyObject.GetPropertyObjectElements method avoids this issue by atomically obtaining all the references to all the elements in one call.
  //
  // PropertyObject_GetPropertyObjectElementsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetPropertyObjectElementsResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated PropertyObjectInstance - The return type of the PropertyObject[] object.
  //
  rpc GetPropertyObjectElements(PropertyObject_GetPropertyObjectElementsRequest) returns (PropertyObject_GetPropertyObjectElementsResponse);
  
  
  // Method: GetInternalPtrEx
  //
  rpc GetInternalPtrEx(PropertyObject_GetInternalPtrExRequest) returns (PropertyObject_GetInternalPtrExResponse);
  
  
  // Method: UpdateEnumerators
  //
  // Replaces the set of enumerators for an enumeration data type.
  //
  // Call this method on the root type definition of an enumeration data type to specify the set of enumerators for the type. Calling this method on a PropertyObject that is not the root type definition of an enumeration causes a runtime error. Changing the set of enumerators updates all currently loaded instances of the data type.
  //
  // PropertyObject_UpdateEnumeratorsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - newValues: PropertyObjectInstance - An array of containers where each container has the following properties:
  //      UpdateEnumeratorsElementProperty_Name ("EnumeratorName") - Enumerator Name (string)UpdateEnumeratorsElementProperty_EnumeratorValue ("EnumeratorValue") - Enumerator Value (number)UpdateEnumeratorsElementProperty_OldName ("OldEnumeratorName") [optional] - Prior Name, if renaming (string)
  //      You can specify a new value for the data type's IsStrict setting by attaching a Boolean attribute to the array with a property path of "TestStand.Enum.IsStrict".
  //      You can specify a new value for the data type's IsFlags setting by attaching a Boolean attribute to the array with a property path of "TestStand.Enum.IsFlags".
  //      
  //
  // PropertyObject_UpdateEnumeratorsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - True if a new enumerator was added, the numeric value of an existing enumerator was changed, the value of IsStrict is changed, or the value of IsFlags is changed. False otherwise. 
  //
  rpc UpdateEnumerators(PropertyObject_UpdateEnumeratorsRequest) returns (PropertyObject_UpdateEnumeratorsResponse);
  
  
  // Method: EnumIsValid
  //
  // Indicates whether the current value of an enumeration instance is consistent with its data type.
  //
  // PropertyObject_EnumIsValidRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //
  // PropertyObject_EnumIsValidResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the value of the enumeration is consistent with its data type. 
  //
  rpc EnumIsValid(PropertyObject_EnumIsValidRequest) returns (PropertyObject_EnumIsValidResponse);
  
  
  // Method: GetValueDisplayName
  //
  // Returns the display value of the property that the lookupString parameter specifies.
  //
  // PropertyObject_GetValueDisplayNameRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Reserved for future use. Pass 0.
  //
  // PropertyObject_GetValueDisplayNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the display name for the value of the property. If there is no display name, a string representation of the actual value is returned. 
  //
  rpc GetValueDisplayName(PropertyObject_GetValueDisplayNameRequest) returns (PropertyObject_GetValueDisplayNameResponse);
  
  
  // Method: GetValNumber
  //
  // Returns the double-precision, 64-bit floating-point value of the property the lookupString parameter specifies.
  //
  // TestStand stores numeric values as double-precision, 64-bit floating-point values, signed 64-bit integer values, or unsigned 64-bit integer values.
  //
  // PropertyObject_GetValNumberRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetValNumberResponse - The response message from the server. It provides the return value.
  //    - returnValue: double - Numeric value of the property. 
  //
  rpc GetValNumber(PropertyObject_GetValNumberRequest) returns (PropertyObject_GetValNumberResponse);
  
  
  // Method: SetValNumber
  //
  // Sets the double-precision, 64-bit floating-point value of the property the lookupString parameter specifies.
  //
  // TestStand stores numeric values as double-precision, 64-bit floating-point values, signed 64-bit integer values, or unsigned 64-bit integer values.
  //
  // PropertyObject_SetValNumberRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - newValue: double - Specifies the new value for the property.
  //
  // PropertyObject_SetValNumberResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetValNumber(PropertyObject_SetValNumberRequest) returns (PropertyObject_SetValNumberResponse);
  
  
  // Method: GetValBoolean
  //
  // Returns the Boolean value of the property the lookupString parameter specifies.
  //
  // PropertyObject_GetValBooleanRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetValBooleanResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Boolean value of the property. 
  //
  rpc GetValBoolean(PropertyObject_GetValBooleanRequest) returns (PropertyObject_GetValBooleanResponse);
  
  
  // Method: SetValBoolean
  //
  // Sets the Boolean value of the property the lookupString parameter specifies.
  //
  // PropertyObject_SetValBooleanRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - newValue: bool - Specifies the new value for the property.
  //
  // PropertyObject_SetValBooleanResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetValBoolean(PropertyObject_SetValBooleanRequest) returns (PropertyObject_SetValBooleanResponse);
  
  
  // Method: GetValString
  //
  // Returns the string value of the property the lookupString parameter specifies.
  //
  // For numeric properties, calling this method with the PropOption_CoerceFromNumber option does not localize the resulting string.  Use the PropertyObject.GetFormattedValue method to obtain a localized string for a number.
  //
  // PropertyObject_GetValStringRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetValStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - String value of the property. 
  //
  rpc GetValString(PropertyObject_GetValStringRequest) returns (PropertyObject_GetValStringResponse);
  
  
  // Method: SetValString
  //
  // Sets the string value of the property the lookupString parameter specifies.
  //
  // PropertyObject_SetValStringRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - newValue: string - Specifies the new value for the property.
  //
  // PropertyObject_SetValStringResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetValString(PropertyObject_SetValStringRequest) returns (PropertyObject_SetValStringResponse);
  
  
  // Method: GetPropertyObject
  //
  // Returns the PropertyObject value of the property the lookupString parameter specifies.
  //
  // PropertyObject_GetPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - PropertyObject value of the property. 
  //
  rpc GetPropertyObject(PropertyObject_GetPropertyObjectRequest) returns (PropertyObject_GetPropertyObjectResponse);
  
  
  // Method: SetPropertyObject
  //
  // Sets the subproperty the lookupString parameter specifies to the PropertyObject object you pass.
  //
  // Do not call this method if another object already contains the object the newValue parameter specifies. For example, if the object you want to specify for the newValue parameter is already a subproperty or an array element of another object, it cannot also be the subproperty of a different object. You can work around this issue by using the PropOption_NotOwning option when you call this method to instead create an alias to the object, by using the PropertyObject.Clone method to make a copy of the object and use the copy instead, or by removing the object from its current parent or array before assigning a new parent.
  //
  // PropertyObject_SetPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - newValue: PropertyObjectInstance - Specifies the new value for the property.
  //
  // PropertyObject_SetPropertyObjectResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetPropertyObject(PropertyObject_SetPropertyObjectRequest) returns (PropertyObject_SetPropertyObjectResponse);
  
  
  // Method: GetValIDispatch
  //
  // Returns the value of the ActiveX Automation Reference property the lookupString parameter specifies. The object is returned as an IDispatch pointer.
  //
  // This method returns a NULL reference, if that is what the property contains.
  // Note: This method and the PropertyObject.GetValInterface method apply to the PropValType_Reference value type. The PropertyObject.GetValInterface and PropertyObject.SetValInterface methods are meant for advanced users who want to store arbitrary interfaces in TestStand reference properties.
  //
  // PropertyObject_GetValIDispatchRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetValIDispatchResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - IDispatch pointer value of the property. 
  //
  rpc GetValIDispatch(PropertyObject_GetValIDispatchRequest) returns (PropertyObject_GetValIDispatchResponse);
  
  
  // Method: SetValIDispatch
  //
  // Sets the value of the ActiveX Automation Reference property the lookupString parameter specifies. You must specify the value as an IDispatch pointer.
  //
  // The reference property maintains a reference to the object you specify. If the property already contains a reference, it releases that reference before storing the new one. If you specify a NULL reference, the property releases any existing reference it holds.
  // Note: This method and the PropertyObject.SetValInterface method apply to the PropValType_Reference value type. The PropertyObject.GetValInterface and PropertyObject.SetValInterface methods are intended for advanced users who want to store arbitrary interfaces in TestStand reference properties.
  //
  // PropertyObject_SetValIDispatchRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - newValue: ObjectInstance - Specifies the new value for the property.
  //
  // PropertyObject_SetValIDispatchResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetValIDispatch(PropertyObject_SetValIDispatchRequest) returns (PropertyObject_SetValIDispatchResponse);
  
  
  // Method: GetValInterface
  //
  // Returns the value of the ActiveX Automation Reference property the lookupString parameter specifies. The object is returned as an IUnknown pointer.
  //
  // This method returns a NULL reference, if that is what the property contains.
  // This method and the PropertyObject.GetValIDispatch method apply to the PropValType_Reference value type. The PropertyObject.GetValInterface and PropertyObject.SetValInterface methods are meant for advanced users who want to store arbitrary interfaces in TestStand reference properties.
  //
  // PropertyObject_GetValInterfaceRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetValInterfaceResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - IUnknown pointer value of the property. 
  //
  rpc GetValInterface(PropertyObject_GetValInterfaceRequest) returns (PropertyObject_GetValInterfaceResponse);
  
  
  // Method: SetValInterface
  //
  // Sets the value of the ActiveX Automation Reference property the lookupString parameter specifies. You must specify the value as an IUnknown pointer.
  //
  // The reference property maintains a reference to the object you specify. If the property already contains a reference, it releases that reference before storing the new one. If you specify a NULL reference the property releases any existing reference it holds.
  // Note: This method and the PropertyObject.SetValIDispatch method apply to the PropValType_Reference value type. The PropertyObject.GetValInterface and PropertyObject.SetValInterface methods are intended for use by advanced users who want to store arbitrary interfaces in TestStand reference properties.
  //
  // PropertyObject_SetValInterfaceRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - newValue: ObjectInstance - Specifies the new value for the property.
  //
  // PropertyObject_SetValInterfaceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetValInterface(PropertyObject_SetValInterfaceRequest) returns (PropertyObject_SetValInterfaceResponse);
  
  
  // Method: GetFlags
  //
  // Returns the flags setting of the property the lookupString parameter specifies. Use the PropertyObject.SetFlags method to change the flags setting of a property.
  //
  // PropertyObject_GetFlagsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetFlagsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Current flags of the property. 
  //
  rpc GetFlags(PropertyObject_GetFlagsRequest) returns (PropertyObject_GetFlagsResponse);
  
  
  // Method: SetFlags
  //
  // Sets the flags setting of the property the lookupString parameter specifies. Use the PropertyObject.GetFlags method to retrieve the flags setting of a property.
  //
  // PropertyObject_SetFlagsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - Flags: int32 - Specifies the new flags for the property.
  //
  // PropertyObject_SetFlagsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetFlags(PropertyObject_SetFlagsRequest) returns (PropertyObject_SetFlagsResponse);
  
  
  // Method: GetType
  //
  // Note: This method is obsolete. Use the PropertyObject.Type property instead.
  //
  // Returns the type of value and other information about the property the lookupString parameter specifies.
  //
  // PropertyObject_GetTypeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetTypeResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: PropertyValueTypes - Type of value the property stores. Note: If the property is an instance of a named type, this method does not return the  PropValType_NamedType constant and instead returns one of the other property value type constants to indicate the value type of the root property. Use the typeName parameter or the PropertyObject.GetTypeDefinition method to determine whether a property is an instance of a named type. This method returns the PropValType_Container constant for arrays. To distinguish between an array and a container, use the IsArray parameter or use the PropertyObjectType.ValueType property, which specifies the PropValType_Array constant for arrays. For arrays, use the PropertyObjectType.ElementType property to obtain the type of the array elements. Alternatively, for arrays of non-containers, you can use the PropertyObject.GetDimensions method to obtain the type of the array elements. For arrays of containers or named types, you can call the PropertyObject.GetType method on the PropertyObject that the PropertyObject.ArrayElementPrototype property returns to obtain the type of array elements. 
  //    - IsObject: boo - Returns True if the lookupString specifies a PropertyObject.
  //    - IsArray: boo - Returns True if the lookupString specifies an array.
  //    - typeNameParam: strin - Returns the type name if the lookupString parameter specifies an object that is an instance of a named type. Otherwise, returns an empty string.
  //
  rpc GetType(PropertyObject_GetTypeRequest) returns (PropertyObject_GetTypeResponse);
  
  
  // Method: GetTypeDefinition
  //
  // Returns the object that is the type definition for the property the lookupString parameter specifies.
  //
  // Use the PropertyObject.TypeCategory property to determine the type category to which a root type definition belongs.
  //
  // PropertyObject_GetTypeDefinitionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetTypeDefinitionResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Type definition, in the form of a PropertyObject, for the property the lookupString parameter specifies. Release the PropertyObject when you no longer need it. 
  //
  rpc GetTypeDefinition(PropertyObject_GetTypeDefinitionRequest) returns (PropertyObject_GetTypeDefinitionResponse);
  
  
  // Method: GetDimensions
  //
  // Note: This method is obsolete. Use the PropertyObjectType.ArrayDimensions property instead.
  //
  // Returns the upper bounds, lower bounds, total number of elements, and element type for the array the lookupString parameter specifies.
  //
  // PropertyObject_GetDimensionsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetDimensionsResponse - The response message from the server. It provides the output parameters.
  //    - lowerBounds: strin - Returns an array index string describing the lowest valid index for each dimension. For example, a two-dimensional array with a lower bound of 0 for the first dimension and 2 for the second would have the lower bound string "[0][2]".
  //    - upperBounds: strin - Returns an array index string describing the highest valid index for each dimension. For example, a two-dimensional array with an upper bound of 2 for the first dimension and 4 for the second would have the upper bound string "[2][4]".
  //    - numElements: int3 - Returns the total number of elements stored in the array.
  //    - ElementType: PropertyValueType - Returns the type of elements stored in the array.
  //
  rpc GetDimensions(PropertyObject_GetDimensionsRequest) returns (PropertyObject_GetDimensionsResponse);
  
  
  // Method: SetDimensions
  //
  // Note: This method is obsolete. Use the PropertyObjectType.ArrayDimensions property instead.
  //
  // Sets the upper and lower bounds for the array the lookupString parameter specifies.
  // Use the PropertyObject.SetNumElements method to set the size of a one-dimensional array.
  // To insert a new array element in a one-dimensional array at the specified offset, use the Set_ByOffset methods of the PropertyObject class and specify the PropOption_InsertElement flag.
  // To delete specific elements from a one-dimensional array, use the PropertyObject.DeleteElements method.
  //
  // PropertyObject_SetDimensionsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - lowerBounds: string - Specifies an array index string describing the lowest valid index for each dimension. For example, a two-dimensional array with a lower bound of 0 for the first dimension and 2 for the second has the lower bound string "[0][2]".
  //    - upperBounds: string - Specifies an array index string describing the highest valid index for each dimension. For example, a two-dimensional array with an upper bound of 2 for the first dimension and 4 for the second would have the upper bound string "[2][4]".
  //
  // PropertyObject_SetDimensionsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetDimensions(PropertyObject_SetDimensionsRequest) returns (PropertyObject_SetDimensionsResponse);
  
  
  // Method: GetArrayIndex
  //
  // Returns the index of the array element the arrayOffset parameter specifies.
  //
  // PropertyObject_GetArrayIndexRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Specifies an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - arrayOffset: int32 - Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  //
  // PropertyObject_GetArrayIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - An array index string. Array index strings are a list of numbers enclosed in brackets that index each dimension of the array. For example, the following is an array index for a two-dimensional array: [0][1]. 
  //
  rpc GetArrayIndex(PropertyObject_GetArrayIndexRequest) returns (PropertyObject_GetArrayIndexResponse);
  
  
  // Method: GetArrayOffset
  //
  // Returns the zero-based offset of the array element the arrayIndex parameter specifies.
  //
  // PropertyObject_GetArrayOffsetRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - arrayIndex: string - Specifies an array index string. Array index strings are a list of numbers, enclosed in brackets, that index each dimension of the array. For example, the following is an array index for a two-dimensional array: [0][1]. In addition, this method also supports indexing arrays of objects by name. For example, the following arrayIndex returns the offset of the first object in an object array with the name objectname: ["objectname"].
  //
  // PropertyObject_GetArrayOffsetResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - A zero-based number that represents the offset of an array element in the one-dimensional physical storage of the array. 
  //
  rpc GetArrayOffset(PropertyObject_GetArrayOffsetRequest) returns (PropertyObject_GetArrayOffsetResponse);
  
  
  // Method: NewSubProperty
  //
  // Creates a new subproperty with the name the lookupString parameter specifies.
  //
  // Note: TestStand does not validate property names you create programmatically for invalid characters, such as spaces, which can result in errors when you use expressions. Use the PropertyObject.ValidateNewSubPropertyName  method to validate property names. TestStand expressions require PropertyObject names to be strings that contain only letters, numbers, and underscores. PropertyObject names cannot contain spaces, start with a number, or be empty. Additionally, the PropertyObject name cannot be "Value", and you cannot have duplicate subproperty names. For example, MyVariableName_2000 is a valid PropertyObject name. Names of elements in a PropertyObject array can contain any character. Both sequence names and step names are examples of such named array elements. However, sequence names cannot be empty or contain control characters. You cannot have duplicate sequence names. The name NI  is reserved at the root level for attributes.Note: TestStand does not support adding a new subproperty to an instance of a type unless you add the subproperty below a container you have marked as unstructured in the type definition by using the PropFlags_UnstructuredProperty flag. TestStand does not report any errors and creates the property, but does not save the property. When resolving type conflicts and updating type instances, TestStand automatically removes the property.
  //
  // PropertyObject_NewSubPropertyRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass the lookup string for the new subproperty to create. If you pass a lookup string with multiple levels (such as "x.y.z"), this method creates all the necessary intermediate container objects. Refer to lookup string for more information about the strings you can use.
  //    - ValueType: PropertyValueTypes - Specifies the type of value you want the new subproperty to store.
  //    - asArray: bool - Pass True to make the new subproperty an array with elements that are of the type you specify in the ValueType parameter.
  //    - typeNameParam: string - Pass the name of an existing type if you want to create the new subproperty as an instance of a named type. Otherwise, pass an empty string. If you pass a type name, you must pass PropValType_NamedType for the ValueType parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.  You do not need to pass the InsertIfMissing option to create the new subproperty.  Pass DoNothingIfExists if you want the method to not report an error if the subproperty already exists.
  //
  // PropertyObject_NewSubPropertyResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc NewSubProperty(PropertyObject_NewSubPropertyRequest) returns (PropertyObject_NewSubPropertyResponse);
  
  
  // Method: DeleteSubProperty
  //
  // Deletes the subproperty with the name the lookupString parameter specifies.
  //
  // Use the PropOption_DeleteIfExists option to prevent TestStand from returning errors if the specified property does not exist prior to calling this function.
  // 
  // To delete a specific element from a one-dimensional array, use the PropertyObject.DeleteElements method of the PropertyObject class.
  // 
  // To insert a new array element in a one-dimensional array at the specified offset, use the Set_ByOffset methods of the PropertyObject class and specify the PropOption_InsertElement flag.
  // Note: TestStand does not support adding a new subproperty to an instance of a type unless you add the subproperty below a container you have marked as unstructured in the type definition by using the PropFlags_UnstructuredProperty flag. TestStand does not report any errors and creates the property, but does not save the property. When resolving type conflicts and updating type instances, TestStand automatically removes the property.
  //
  // PropertyObject_DeleteSubPropertyRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Specifies the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_DeleteSubPropertyResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc DeleteSubProperty(PropertyObject_DeleteSubPropertyRequest) returns (PropertyObject_DeleteSubPropertyResponse);
  
  
  // Method: GetNumSubProperties
  //
  // Returns the number of subproperties directly within the property the lookupString parameter specifies.
  //
  // PropertyObject_GetNumSubPropertiesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //
  // PropertyObject_GetNumSubPropertiesResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Number of subproperties within the property specified by lookupString. 
  //
  rpc GetNumSubProperties(PropertyObject_GetNumSubPropertiesRequest) returns (PropertyObject_GetNumSubPropertiesResponse);
  
  
  // Method: GetNthSubPropertyName
  //
  // Returns the name of a subproperty within the property the lookupString parameter specifies.
  //
  // PropertyObject_GetNthSubPropertyNameRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - index: int32 - Specifies the zero-based index of the subproperty.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetNthSubPropertyNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Name of the subproperty the index specifies. 
  //
  rpc GetNthSubPropertyName(PropertyObject_GetNthSubPropertyNameRequest) returns (PropertyObject_GetNthSubPropertyNameResponse);
  
  
  // Method: SetNthSubPropertyName
  //
  // Sets the name of a subproperty within the property the lookupString parameter specifies. You identify the property using a zero-based index.
  //
  // PropertyObject_SetNthSubPropertyNameRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - index: int32 - Specifies the zero-based index of the subproperty to name.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - newValue: string - Specifies the new name for the subproperty.
  //
  // PropertyObject_SetNthSubPropertyNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetNthSubPropertyName(PropertyObject_SetNthSubPropertyNameRequest) returns (PropertyObject_SetNthSubPropertyNameResponse);
  
  
  // Method: Exists
  //
  // Returns True if the property the lookupString parameter specifies exists.
  //
  // PropertyObject_ExistsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Specifies the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_ExistsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the property exists. 
  //
  rpc Exists(PropertyObject_ExistsRequest) returns (PropertyObject_ExistsResponse);
  
  
  // Method: Clone
  //
  // Creates a copy of the property the lookupString parameter specifies.
  //
  // This method does not always make an identical copy unless you use the bitwise-OR operator to specify the PropOption_DoNotShareProperties and PropOption_CopyAllFlags options.
  // You can create an alias object by using the PropOption_NotOwning option with the PropertyObject.SetPropertyObject or PropertyObject.SetPropertyObjectByOffset methods.
  // When you clone a step or a sequence, call the Step.CreateNewUniqueStepId or Sequence.CreateNewUniqueStepIds methods to replace the unique step ID with a new unique ID.
  //
  // PropertyObject_CloneRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_CloneResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Copy of the property. Release the copy when you finish using it. 
  //
  rpc Clone(PropertyObject_CloneRequest) returns (PropertyObject_CloneResponse);
  
  
  // Method: Evaluate
  //
  // Note: This method is obsolete. Use the PropertyObject.EvaluateEx method instead.
  //
  // Evaluates an expression and returns the result.
  //
  // PropertyObject_EvaluateRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - exprString: string - Specifies a standard TestStand expression.
  //
  // PropertyObject_EvaluateResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The result of the expression, in the form of a PropertyObject. The PropertyObject can contain a value of any type, depending on the expression. 
  //
  rpc Evaluate(PropertyObject_EvaluateRequest) returns (PropertyObject_EvaluateResponse);
  
  
  // Method: Write
  //
  // Writes the contents of an object to the file the pathString parameter specifies and associates the name the objectName parameter specifies with the object in the file.
  //
  // If you call this method on an alias object, TestStand generates the stream using the object to which the alias refers. This method does not include alias subproperty objects in the stream.
  // Note: Setting and obtaining values of PropertyObjects objects, the subproperties of PropertyObject objects, and the parent properties of PropertyObject objects is thread-safe and returns consistent values as long as no structural changes to the parent-child relationship of the property objects occur. Making structural changes to a PropertyObject data structure while another thread accesses or modifies the object is not safe and can lead to unexpected behavior and crashes. If you need to share a PropertyObject data structure between threads and need to be able to modify the structure while you share the object, you must use a TestStand Lock step or step setting, an critical section, or other synchronization primitives to ensure that no other threads access the PropertyObject while another thread modifies the structure of the object.
  //
  // PropertyObject_WriteRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - pathString: string - Specifies the pathname of the file to which to write the object data.
  //    - objectName: string - Specifies the name to associate with the object.
  //    - RWoptions: int32 - Pass 0 to specify the default behavior or pass one or more ReadWriteOptions constants. Use the bitwise-OR operator to specify multiple read/write options.
  //      If you have already written an object with the specified name to the file, pass the RWOption_EraseExistingObject constant for this parameter. Otherwise, the values stored in the file do not update to the values of the object you are writing if the object you are writing has default values for some of its properties. Additionally, unless you use the RWOption_EraseExistingObject or RWOption_EraseAll constants, the method leaves properties from previously written versions of the object in the file even if the properties do not exist in the current version of the object being written.
  //
  // PropertyObject_WriteResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Write(PropertyObject_WriteRequest) returns (PropertyObject_WriteResponse);
  
  
  // Method: Read
  //
  // Note: This method is obsolete. Use the PropertyObject.ReadEx method instead.
  //
  // Reads the contents of an object from a file and stores them in the PropertyObject. Use the objectName parameter to specify the file with the pathString parameter and the object in the file.
  //
  // PropertyObject_ReadRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - pathString: string - Specifies the pathname of the file from which to read the object data.
  //    - objectName: string - Specifies the name with which the object is stored in the file.
  //    - RWoptions: int32 - Pass 0 to specify the default behavior, or pass one or more ReadWriteOptions constants. Use the bitwise-OR operator to specify multiple read/write options.
  //
  // PropertyObject_ReadResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Read(PropertyObject_ReadRequest) returns (PropertyObject_ReadResponse);
  
  
  // Method: Serialize
  //
  // Adds the contents of the object to a stream of string data.
  //
  // If you call this method on an alias object, TestStand generates the stream using the object to which the alias refers. This method does not include alias subproperty objects in the stream.
  //
  // PropertyObject_SerializeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - objectName: string - Specifies the name with which to store the object in the stream.
  //    - RWoptions: int32 - Pass 0 to specify the default behavior, or pass one or more ReadWriteOptions constants. Use the bitwise-OR operator to specify multiple read/write options.
  //
  // PropertyObject_SerializeResponse - The response message from the server. It provides the output parameters.
  //    - stream: strin - The new value of stream if the method modifies it.
  //
  rpc Serialize(PropertyObject_SerializeRequest) returns (PropertyObject_SerializeResponse);
  
  
  // Method: Unserialize
  //
  // Note: This method is obsolete. Use the PropertyObject.UnserializeEx method instead.
  //
  // Reads the contents of an object from a stream of string data and stores the contents in the PropertyObject to which the method applies.
  // You cannot unserialize a stream that contains a container type into a property object that is a value type, or vice versa. This method does not return an error, but instead sets the PropertyObject on which this method operates to the default value.
  // If you attempt to unserialize a stream that contains a value type into a property object of a different value type, TestStand attempts to coerce the value. If the coercion is unsuccessful, TestStand sets the PropertyObject on which this method operates to the default value.
  // TestStand does not assign the name or flags associated with the top-level PropertyObject in the stream to the PropertyObject on which this method operates.
  //
  // PropertyObject_UnserializeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - stream: string - Specifies an existing stream of data that stores the object.
  //    - objectName: string - Specifies the name with which the object is stored in the stream.
  //    - RWoptions: int32 - Pass 0 to specify the default behavior, or pass one or more ReadWriteOptions constants. Use the bitwise-OR operator to specify multiple read write options.
  //
  // PropertyObject_UnserializeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Unserialize(PropertyObject_UnserializeRequest) returns (PropertyObject_UnserializeResponse);
  
  
  // Method: EvaluateEx
  //
  // Evaluates an expression and returns the result.
  //
  // TestStand evaluates the expression within the context of the object on which you call this method. This means the expression can reference the subproperties of the object as variables.
  //
  // PropertyObject_EvaluateExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - exprString: string - Specifies a standard TestStand expression.
  //
  // PropertyObject_EvaluateExResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The result of the expression, in the form of a PropertyObject. The PropertyObject can contain a value of any type depending on the expression. If the expression is empty and you pass the  EvalOption_AllowEmptyExpression constant, this method returns a NULL dispatch pointer or object reference. 
  //
  rpc EvaluateEx(PropertyObject_EvaluateExRequest) returns (PropertyObject_EvaluateExResponse);
  
  
  // Method: ValidateNewName
  //
  // Determines if the specified new name is valid for the PropertyObject.
  //
  // Call this method before setting the PropertyObject.Name property to determine whether the new name is valid.
  //
  // PropertyObject_ValidateNewNameRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - newName: string - Specifies the new name to validate.
  //    - allowDuplicates: bool - PropertyObjects can have identical names when they are elements in an array of PropertyObjects. If the object is not an array element, pass False to this parameter.
  //
  // PropertyObject_ValidateNewNameResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: string - Returns an explanation of why the name is not valid. 
  //    - isValid: boo - Returns True if the new name is valid.
  //
  rpc ValidateNewName(PropertyObject_ValidateNewNameRequest) returns (PropertyObject_ValidateNewNameResponse);
  
  
  // Method: DisplayPropertiesDialog
  //
  // Launches a dialog box in which you can view and change properties of the object.
  //
  // This method launches a different dialog box according to the type of object. For example, calling this method on a Step object launches the Step Properties dialog box using the Engine.DisplayStepPropDialog method.
  //
  // PropertyObject_DisplayPropertiesDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box. The string can contain '%1' to be replaced with object name and '%2' to be replaced with object type name.
  //    - file: PropertyObjectFileInstance - Specifies the property object file to which the object belongs. Use the SequenceFile.AsPropertyObjectFile method to obtain a property object file from a sequence file.
  //    - dlgOptions: int32 - Specifies any combination of the PropertyDialogOptions constants.
  //
  // PropertyObject_DisplayPropertiesDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns one or more of the PropertyDialogOutputs status flags. Use the bitwise-AND operator to check for specific values. 
  //
  rpc DisplayPropertiesDialog(PropertyObject_DisplayPropertiesDialogRequest) returns (PropertyObject_DisplayPropertiesDialogResponse);
  
  
  // Method: GetSubPropertyIndex
  //
  // Returns the index of the subproperty the propName parameter specifies.
  //
  // PropertyObject_GetSubPropertyIndexRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass the name of a property within the PropertyObject that contains a subproperty. Refer to Lookup Strings for more information.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - propName: string - Specifies the name of the subproperty to obtain the index for.
  //
  // PropertyObject_GetSubPropertyIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - The subproperty index is zero-based. 
  //
  rpc GetSubPropertyIndex(PropertyObject_GetSubPropertyIndexRequest) returns (PropertyObject_GetSubPropertyIndexResponse);
  
  
  // Method: SetSubPropertyIndex
  //
  // Sets the index of the subproperty the propName parameter specifies.
  //
  // Use this method to change the order of subproperties.
  //
  // PropertyObject_SetSubPropertyIndexRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - propName: string - Specifies the name of the subproperty for which to set the index.
  //    - index: int32 - Specifies the new index for the subproperty. The value must be greater than or equal to 0 and less than the number of subproperties.
  //
  // PropertyObject_SetSubPropertyIndexResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetSubPropertyIndex(PropertyObject_SetSubPropertyIndexRequest) returns (PropertyObject_SetSubPropertyIndexResponse);
  
  
  // Method: InsertSubProperty
  //
  // Inserts an existing property object as a subproperty of another property object.
  //
  // To insert a new array element in one-dimensional arrays at the specified offset, use the Set_ByOffset methods of the PropertyObject class and specify the PropOption_InsertElement flag. Use the PropertyObjectType.ArrayDimensions property to change the size of multi-dimensional array objects.
  // Note: TestStand does not validate property names you create programmatically for invalid characters, such as spaces, which can result in errors when you use expressions. Use the PropertyObject.ValidateNewSubPropertyName  method to validate property names. TestStand expressions require PropertyObject names to be strings that contain only letters, numbers, and underscores. PropertyObject names cannot contain spaces, start with a number, or be empty. Additionally, the PropertyObject name cannot be "Value", and you cannot have duplicate subproperty names. For example, MyVariableName_2000 is a valid PropertyObject name. Names of elements in a PropertyObject array can contain any character. Both sequence names and step names are examples of such named array elements. However, sequence names cannot be empty or contain control characters. You cannot have duplicate sequence names. The name NI  is reserved at the root level for attributes.
  //
  // PropertyObject_InsertSubPropertyRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - index: int32 - Specifies the index at which to insert the subproperty. This value must be greater than or equal to 0 and less than or equal to the number of subproperties.
  //    - subProperty: PropertyObjectInstance - Specifies the object to insert as a subproperty. This object must not be a subproperty of another object. Use the PropertyObject.Parent property to determine whether an object is already a subproperty.
  //
  // PropertyObject_InsertSubPropertyResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc InsertSubProperty(PropertyObject_InsertSubPropertyRequest) returns (PropertyObject_InsertSubPropertyResponse);
  
  
  // Method: GetTypeDisplayString
  //
  // Note: This method is obsolete. Use the PropertyObjectType.DisplayString property instead.
  //
  // Returns a string that describes the type of the object.
  //
  // PropertyObject_GetTypeDisplayStringRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetTypeDisplayStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetTypeDisplayString(PropertyObject_GetTypeDisplayStringRequest) returns (PropertyObject_GetTypeDisplayStringResponse);
  
  
  // Method: GetFormattedValue
  //
  // Returns a formatted string that describes the value of the object.
  //
  // Use this string to display the value of an object.  For string, number, and Boolean Array objects, the method returns a string composed of the concatenated values of the array elements. For Container objects, this method returns the string "...". For empty Reference objects, the method returns the string Nothing.
  // Place a $ character after the % character in the format string to remove trailing zeros after the decimal point.
  // Use a "%s" style format specifier to format any value as a string with a specified width and alignment.  For example, calling this method on the string value "Right justified" with a format string of "%20s" returns:
  // "   Right justified"
  // Use a format code of %b to format a number in binary.
  //
  // PropertyObject_GetFormattedValueRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Specifies how the method determines which character is the localized decimal point, which it uses to localize the display value. Pass one of the following options: PropOption_DecimalPoint_UseComma, PropOption_DecimalPoint_UsePeriod, PropOption_DecimalPoint_UsePreference, or PropOption_DecimalPoint_UseSystemSetting. Use the bitwise-OR operator to specify multiple options.
  //    - formatString: string - Specifies a C (printf) style format string to control the conversion. When you pass an empty string, this method uses the following default TestStand format strings based on the numeric representation of the numeric property objects:
  //      * %.13g for double-precision, 64-bit floating-point values    * %d for signed 64-bit integer values    * %u for unsigned 64-bit integer values
  //    - useValueFormatIfDefined: bool - Specifies whether the function uses the inherent format of the first argument, if the argument value has a non-default numeric display format. If you pass True and the value argument has a non-default format, the function uses the value format instead of the format you pass to parameter three.
  //    - separator: string - Specifies a string that separates each element in the concatenated string of array elements the function returns.
  //
  // PropertyObject_GetFormattedValueResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Formatted string value of the property 
  //
  rpc GetFormattedValue(PropertyObject_GetFormattedValueRequest) returns (PropertyObject_GetFormattedValueResponse);
  
  
  // Method: GetNumElements
  //
  // Returns the number of elements in the array object.
  //
  // This method is valid only for array objects. Use the PropertyObjectType.ArrayDimensions property to obtain the number of elements in each dimension of a multi-dimensional array.
  //
  // PropertyObject_GetNumElementsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //
  // PropertyObject_GetNumElementsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - The return type of the Int32 object.
  //
  rpc GetNumElements(PropertyObject_GetNumElementsRequest) returns (PropertyObject_GetNumElementsResponse);
  
  
  // Method: SetNumElements
  //
  // Sets the number of elements of a single dimensional array.
  //
  // This method is valid only for single dimensional arrays. The elements in the array retain their values. Use the PropertyObjectType.ArrayDimensions property to set the number of elements in each dimension of a multi-dimensional array.
  //
  // PropertyObject_SetNumElementsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - numElements: int32 - Specifies the new number of elements for the array.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_SetNumElementsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetNumElements(PropertyObject_SetNumElementsRequest) returns (PropertyObject_SetNumElementsResponse);
  
  
  // Method: DeleteElements
  //
  // Deletes one or more elements of an array object.
  //
  // This method is valid only for one-dimensional array objects. Use the PropertyObjectType.ArrayDimensions property to change the size of multi-dimensional array objects.
  // 
  // To insert a new array element in a one-dimensional array at the specified offset, use the Set_ByOffset methods of the PropertyObject class and specify the PropOption_InsertElement flag.
  //
  // PropertyObject_DeleteElementsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - arrayOffset: int32 - Specifies the array offset of the first element to delete.
  //    - numElements: int32 - Specifies the number of elements to delete.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_DeleteElementsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc DeleteElements(PropertyObject_DeleteElementsRequest) returns (PropertyObject_DeleteElementsResponse);
  
  
  // Method: GetValNumberByOffset
  //
  // Returns the double-precision, 64-bit floating-point value of the array element the arrayOffset parameter specifies.
  //
  // This method is valid only for array objects and is intended for use with arrays of double-precision, floating-point numbers. Use the PropertyObject.GetValInteger64ByOffset method with arrays of 64-bit integers, and use the PropertyObject.GetValUnsignedInteger64ByOffset method with arrays of unsigned 64-bit integers. If the array is of a type other than double-precision, floating-point, you can use this method with the corresponding PropOption_Coerce constant.
  //
  // PropertyObject_GetValNumberByOffsetRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - arrayOffset: int32 - Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetValNumberByOffsetResponse - The response message from the server. It provides the return value.
  //    - returnValue: double - Double-precision, 64-bit floating-point value of the array element. 
  //
  rpc GetValNumberByOffset(PropertyObject_GetValNumberByOffsetRequest) returns (PropertyObject_GetValNumberByOffsetResponse);
  
  
  // Method: SetValNumberByOffset
  //
  // Sets the double-precision, 64-bit floating-point value of the array element the arrayOffset parameter specifies.
  //
  // This method is valid only for array objects and is intended for use with arrays of double-precision, floating-point numbers. Use the PropertyObject.SetValInteger64ByOffset method with arrays of 64-bit integers, and use the PropertyObject.SetValUnsignedInteger64ByOffset method with arrays of unsigned 64-bit integers. If the array is of a type other than double-precision, floating-point, you can use this method with the corresponding PropOption_Coerce constant.
  //
  // PropertyObject_SetValNumberByOffsetRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - arrayOffset: int32 - Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - newValue: double - Specifies the new value for the array element.
  //
  // PropertyObject_SetValNumberByOffsetResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetValNumberByOffset(PropertyObject_SetValNumberByOffsetRequest) returns (PropertyObject_SetValNumberByOffsetResponse);
  
  
  // Method: GetValBooleanByOffset
  //
  // Returns the Boolean value of the array element the arrayOffset parameter specifies.
  //
  // This method is valid only for array objects.
  //
  // PropertyObject_GetValBooleanByOffsetRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - arrayOffset: int32 - Specifies a zero-based number that represents the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetValBooleanByOffsetResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc GetValBooleanByOffset(PropertyObject_GetValBooleanByOffsetRequest) returns (PropertyObject_GetValBooleanByOffsetResponse);
  
  
  // Method: SetValBooleanByOffset
  //
  // Sets the Boolean value of the array element the arrayOffset parameter specifies.
  //
  // This method is valid only for array objects.
  //
  // PropertyObject_SetValBooleanByOffsetRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - arrayOffset: int32 - Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - newValue: bool - Specifies the new value for the array element.
  //
  // PropertyObject_SetValBooleanByOffsetResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetValBooleanByOffset(PropertyObject_SetValBooleanByOffsetRequest) returns (PropertyObject_SetValBooleanByOffsetResponse);
  
  
  // Method: GetValStringByOffset
  //
  // Returns the string value of the array element the arrayOffset parameter specifies.
  //
  // This method is valid only for array objects.
  // For numeric properties, calling this method with the PropOption_CoerceFromNumber option does not localize the resulting string.  Use the PropertyObject.GetFormattedValue method to obtain a localized string for a number.
  //
  // PropertyObject_GetValStringByOffsetRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - arrayOffset: int32 - Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  //    - options: int32 - Pass 0 to specify the default behavior, or one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetValStringByOffsetResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - String value of the array element. 
  //
  rpc GetValStringByOffset(PropertyObject_GetValStringByOffsetRequest) returns (PropertyObject_GetValStringByOffsetResponse);
  
  
  // Method: SetValStringByOffset
  //
  // Sets the string value of the array element the arrayOffset parameter specifies.
  //
  // This method is valid only for array objects.
  //
  // PropertyObject_SetValStringByOffsetRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - arrayOffset: int32 - Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - newValue: string - Specifies the new value for the array element.
  //
  // PropertyObject_SetValStringByOffsetResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetValStringByOffset(PropertyObject_SetValStringByOffsetRequest) returns (PropertyObject_SetValStringByOffsetResponse);
  
  
  // Method: GetPropertyObjectByOffset
  //
  // Returns the PropertyObject the arrayOffset parameter specifies.
  //
  // This method is valid only for array objects. For arrays that do not contain objects, such as arrays of numbers, Booleans, strings, or ActiveX references, this method returns a property object that is an alias to the specified array element.
  //
  // PropertyObject_GetPropertyObjectByOffsetRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - arrayOffset: int32 - Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetPropertyObjectByOffsetResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - PropertyObject value of the array element. 
  //
  rpc GetPropertyObjectByOffset(PropertyObject_GetPropertyObjectByOffsetRequest) returns (PropertyObject_GetPropertyObjectByOffsetResponse);
  
  
  // Method: SetPropertyObjectByOffset
  //
  // Sets the array element the arrayOffset parameter specifies to the PropertyObject object you pass.
  //
  // This method is valid only for array objects. For arrays that do not contain objects, such as arrays of numbers, Booleans, strings, or ActiveX references, this method expects a property object of the same type as the array element.
  // Do not call this method if another object already contains the object the newValue parameter specifies. For example, if the object you want to specify for the newValue parameter is already a subproperty or an array element of another object, it cannot also be the subproperty of a different object. You can work around this issue by using the PropOption_NotOwning option when you call this method to instead create an alias to the object, by using the PropertyObject.Clone method to make a copy of the object and use the copy instead, or by removing the object from its current parent or array before assigning a new parent.
  //
  // PropertyObject_SetPropertyObjectByOffsetRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - arrayOffset: int32 - Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - newValue: PropertyObjectInstance - Specifies the new value for the array element.
  //
  // PropertyObject_SetPropertyObjectByOffsetResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetPropertyObjectByOffset(PropertyObject_SetPropertyObjectByOffsetRequest) returns (PropertyObject_SetPropertyObjectByOffsetResponse);
  
  
  // Method: GetValIDispatchByOffset
  //
  // Returns the value of the ActiveX Automation Reference array element the arrayOffset parameter specifies. The object is returned as an IDispatch pointer.
  //
  // This method is valid only for array objects. This method returns a NULL reference, if that is what the array element contains.
  // This method and the PropertyObject.GetValIDispatch method apply to the PropValType_Reference value type. The PropertyObject.GetValInterface and PropertyObject.SetValInterface methods are meant for advanced users who want to store arbitrary interfaces in TestStand reference properties.
  //
  // PropertyObject_GetValIDispatchByOffsetRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - arrayOffset: int32 - Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetValIDispatchByOffsetResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - IDispatch pointer value of the array element. 
  //
  rpc GetValIDispatchByOffset(PropertyObject_GetValIDispatchByOffsetRequest) returns (PropertyObject_GetValIDispatchByOffsetResponse);
  
  
  // Method: SetValIDispatchByOffset
  //
  // Sets the value of the ActiveX Automation Reference array element the arrayOffset parameter specifies.
  //
  // This method is valid only for array objects. You must specify the value as an IDispatch pointer.
  // The reference property maintains a reference to the object you specify. If the property already contains a reference, it releases that reference before storing the new one. If you specify a NULL reference, the property releases any existing reference it holds.
  // This method and the PropertyObject.SetValInterfaceByOffset apply to the PropValType_Reference value type. The PropertyObject.GetValInterface and PropertyObject.SetValInterface methods are intended for use by advanced users who want to store arbitrary interfaces in TestStand reference properties.
  //
  // PropertyObject_SetValIDispatchByOffsetRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - arrayOffset: int32 - Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - newValue: ObjectInstance - Specifies the new value for the array element.
  //
  // PropertyObject_SetValIDispatchByOffsetResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetValIDispatchByOffset(PropertyObject_SetValIDispatchByOffsetRequest) returns (PropertyObject_SetValIDispatchByOffsetResponse);
  
  
  // Method: GetValInterfaceByOffset
  //
  // Returns the value of the ActiveX Automation Reference array element the arrayOffset parameter specifies. The object is returned as an IUnknown pointer.
  //
  // This method is valid only for array objects. This method returns a NULL reference, if that is what the property contains.
  // This method and the PropertyObject.GetValIDispatch method apply to the PropValType_Reference value type. The PropertyObject.GetValInterface and PropertyObject.SetValInterface methods are meant for advanced users who want to store arbitrary interfaces in TestStand reference properties.
  //
  // PropertyObject_GetValInterfaceByOffsetRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - arrayOffset: int32 - Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetValInterfaceByOffsetResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - IUnknown pointer value of the array element. 
  //
  rpc GetValInterfaceByOffset(PropertyObject_GetValInterfaceByOffsetRequest) returns (PropertyObject_GetValInterfaceByOffsetResponse);
  
  
  // Method: SetValInterfaceByOffset
  //
  // Sets the value of the ActiveX Automation Reference array element the arrayOffset parameter specifies.
  //
  // This method is valid only for array objects. You must specify the value as an IUnknown pointer.
  // The reference property maintains a reference to the object you specify. If the property already contains a reference, it releases that reference before storing the new one. If you specify a NULL reference, the property releases any existing reference it holds.
  // This method and the PropertyObject.SetValIDispatchByOffset method apply to the PropValType_Reference value type. The PropertyObject.GetValInterface and PropertyObject.SetValInterface methods are intended for use by advanced users who want to store arbitrary interfaces in TestStand reference properties.
  //
  // PropertyObject_SetValInterfaceByOffsetRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - arrayOffset: int32 - Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - newValue: ObjectInstance - Specifies the new value for the array element.
  //
  // PropertyObject_SetValInterfaceByOffsetResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetValInterfaceByOffset(PropertyObject_SetValInterfaceByOffsetRequest) returns (PropertyObject_SetValInterfaceByOffsetResponse);
  
  
  // Method: GetStructureChangeCount
  //
  // Returns the object structure change count of the property the lookupString parameter specifies.
  //
  // The structure change count is the number of changes made to the structure of this object. Structural changes include insertion and removal of properties as well as name changes. Changes to values of subproperties are not included in this count.
  // The sequence editor uses this property to determine whether it needs to refresh the display of the object.
  //
  // PropertyObject_GetStructureChangeCountRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetStructureChangeCountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Number of structural changes to the object. 
  //
  rpc GetStructureChangeCount(PropertyObject_GetStructureChangeCountRequest) returns (PropertyObject_GetStructureChangeCountResponse);
  
  
  // Method: GetInstanceDefaultFlags
  //
  // Returns the default flags for instances of the type the lookupString parameter specifies.
  //
  // This method is valid only for type definitions.
  // The type instance default flags are the initial flags instances of the type have when they are created. If the corresponding instance override flag is set, the value for that flag as defined in the instance default flag will always be the value in the instance of the type and cannot be changed in that instance.
  //
  // PropertyObject_GetInstanceDefaultFlagsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetInstanceDefaultFlagsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Default flags of the type. 
  //
  rpc GetInstanceDefaultFlags(PropertyObject_GetInstanceDefaultFlagsRequest) returns (PropertyObject_GetInstanceDefaultFlagsResponse);
  
  
  // Method: SetInstanceDefaultFlags
  //
  // Sets the default flags for instances of the type the lookupString parameter specifies.
  //
  // This method is valid only for type definitions. The type instance default flags are the initial flags instances of the type have when they are created. If the corresponding instance override flag is set, the value for that flag as defined in the instance default flag will always be the value in the instance of the type and cannot be changed in that instance.
  //
  // PropertyObject_SetInstanceDefaultFlagsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - Flags: int32 - Specifies the default flags of the type.
  //
  // PropertyObject_SetInstanceDefaultFlagsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetInstanceDefaultFlags(PropertyObject_SetInstanceDefaultFlagsRequest) returns (PropertyObject_SetInstanceDefaultFlagsResponse);
  
  
  // Method: ContainsTypeInstance
  //
  // Determines whether the object the lookupString parameter specifies contains an instance of the specified root type.
  //
  // PropertyObject_ContainsTypeInstanceRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - typeNameParam: string - Specifies the name of the root type.
  //
  // PropertyObject_ContainsTypeInstanceResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the property object or any of the subproperties are instances of the specified root type. 
  //
  rpc ContainsTypeInstance(PropertyObject_ContainsTypeInstanceRequest) returns (PropertyObject_ContainsTypeInstanceResponse);
  
  
  // Method: IsEqualTo
  //
  // Compares this object to another PropertyObject.
  //
  // With no options, this method returns True if both objects have the same number of subproperties with the same case-insensitive names, value types, representation, values, flags, and attributes. If both objects are type definitions, the struct/cluster passing settings, type flags, instance default flags, instance override flags, type versions, type definition lock settings, and type attributes must also be the same.
  // If a subproperty enables the PropFlags_ExcludeFromComparison flag, TestStand ignores the subproperty for purposes of this comparison.
  // If you specify the PropOption_RequireIdenticalStructure option, additional settings for the properties must be the same. If you specify the PropOption_CaseInsensitive option, the method ignores case differences when comparing string values.
  //
  // PropertyObject_IsEqualToRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - objectToCompare: PropertyObjectInstance - Specifies the object to compare to this object.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //      You typically use the PropOption_CaseInsensitive, PropOption_DoNotRecurse, and PropOption_RequireIdenticalStructure options with this method.
  //
  // PropertyObject_IsEqualToResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc IsEqualTo(PropertyObject_IsEqualToRequest) returns (PropertyObject_IsEqualToResponse);
  
  
  // Method: IsAliasObject
  //
  // Returns a value that indicates whether the subproperty the lookupString parameter specifies is an alias to another object.
  //
  // An alias object is a property object that references another object or array element.
  // Create an alias object by using the PropOption_NotOwning option with the PropertyObject.SetPropertyObject or PropertyObject.SetPropertyObjectByOffset methods.
  // You can also create an alias object by calling the PropertyObject.GetPropertyObject or PropertyObject.GetPropertyObjectByOffset methods on arrays that do not contain objects (such as arrays of numbers, Booleans, strings or ActiveX references), in which case the resulting alias object refers to the specified array element. With the exception of the PropertyObject.Parent property, calling a method or referencing a property on an alias object is equivalent to calling the same method or property on the referenced object or array element unless you pass the PropOption_ReferToAlias option, in which case the method affects the alias object itself. To obtain the referenced object, use the GetPropertyObject method and pass an empty string for the lookupString parameter.
  // TestStand uses alias objects to make objects appear to have multiple owners. For example, the SequenceContext object contains an alias to the current step. The Step object cannot be a subproperty of the sequence context because it belongs to the sequence instead. By having an alias object that refers to the step, the sequence context appears to contain the step itself.
  //
  // PropertyObject_IsAliasObjectRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_IsAliasObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the property is an alias. 
  //
  rpc IsAliasObject(PropertyObject_IsAliasObjectRequest) returns (PropertyObject_IsAliasObjectResponse);
  
  
  // Method: GetLocation
  //
  // Returns a lookup string for the property when the topObject parameter specifies a parent of the property. If the topObject parameter does not specify the parent of the property, this method returns the lookup string to the most parent object of the property.
  //
  // Call this method to obtain a lookup string you can use with the object the topObject parameter specifies when topObject is a parent of the property.
  // Do not use this method to determine the lookup string for a property under a SequenceContext object because the context uses alias objects to reference many properties and the context is not a parent of the property. For example, the expression "StationGlobals.MyBool.GetLocation(ThisContext)" returns "Data.MyBool", where the "Data" property is the most parent object in the station global variables file.
  //
  // PropertyObject_GetLocationRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - topObject: PropertyObjectInstance - Specifies the object that contains this object.
  //
  // PropertyObject_GetLocationResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the lookup string. 
  //
  rpc GetLocation(PropertyObject_GetLocationRequest) returns (PropertyObject_GetLocationResponse);
  
  
  // Method: DisplayFlagsDialog
  //
  // Launches a dialog box in which you can view and change the object flags.
  //
  // PropertyObject_DisplayFlagsDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - dlgOptions: int32 - Specifies any combination of the PropertyDialogOptions constants.
  //
  // PropertyObject_DisplayFlagsDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns one or more of the PropertyDialogOutputs status flags. Use the bitwise-AND operator to check for specific values. 
  //
  rpc DisplayFlagsDialog(PropertyObject_DisplayFlagsDialogRequest) returns (PropertyObject_DisplayFlagsDialogResponse);
  
  
  // Method: DisplayArrayBoundsDialog
  //
  // Launches a dialog box in which you can view and change the bounds of an array object.
  //
  // This method is valid only on array objects. Use this method when you create a new array object.
  // Use the PropertyObject.DisplayPropertiesDialog method to modify the array bounds and other PropertyObject properties.
  //
  // PropertyObject_DisplayArrayBoundsDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - dlgOptions: int32 - Specifies any combination of the ArrayBoundsDialogOptions constants.
  //
  // PropertyObject_DisplayArrayBoundsDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if you make modifications and click OK in the dialog box. Returns False if you click Cancel or make no modifications. 
  //
  rpc DisplayArrayBoundsDialog(PropertyObject_DisplayArrayBoundsDialogRequest) returns (PropertyObject_DisplayArrayBoundsDialogResponse);
  
  
  // Method: ReadEx
  //
  // Reads the contents of an object from a file and stores them in the PropertyObject. You specify the file with the pathString parameter and specify the object in the file with the objectName parameter.
  //
  // PropertyObject_ReadExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - pathString: string - Specifies the pathname of the file from which to read the object data.
  //    - objectName: string - Specifies the name with which the object is stored in the file.
  //    - RWoptions: int32 - Pass 0 to specify the default behavior, or pass one or more ReadWriteOptions constants. Use the bitwise-OR operator to specify multiple read/write options.
  //    - handlerType: TypeConflictHandlerTypes - Specifies how to handle type conflicts in the file.
  //
  // PropertyObject_ReadExResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ReadEx(PropertyObject_ReadExRequest) returns (PropertyObject_ReadExResponse);
  
  
  // Method: UnserializeEx
  //
  // Reads the contents of an object from a stream of string data and stores the contents in the PropertyObject to which the method applies.
  //
  // You cannot unserialize a stream that contains a container type into a property object that is a value type or vise versa. This method does not return an error but instead sets the PropertyObject on which this method operates to the default value.
  // If you attempt to unserialize a stream that contains a value type into a property object of a different value type, TestStand attempts to coerce the value. If the coercion is unsuccessful, TestStand sets the PropertyObject on which this method operates to the default value.
  // TestStand does not assign the name or flags associated with the top-level PropertyObject in the stream to the PropertyObject on which this method operates.
  //
  // PropertyObject_UnserializeExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - stream: string - Specifies an existing stream of data that stores the object.
  //    - objectName: string - Specifies the name with which the object is stored in the stream.
  //    - RWoptions: int32 - Pass 0 to specify the default behavior, or pass one or more ReadWriteOptions constants. Use the bitwise-OR operator to specify multiple read/write options.
  //    - handlerType: TypeConflictHandlerTypes - Specifies how to handle type conflicts in the stream.
  //
  // PropertyObject_UnserializeExResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc UnserializeEx(PropertyObject_UnserializeExRequest) returns (PropertyObject_UnserializeExResponse);
  
  
  // Method: GetTypeFlags
  //
  // Returns the type flags setting of the property the lookupString parameter specifies.
  //
  // Call this method only for PropertyObject objects that are type definitions.
  //
  // PropertyObject_GetTypeFlagsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetTypeFlagsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Current type flags of the property. 
  //
  rpc GetTypeFlags(PropertyObject_GetTypeFlagsRequest) returns (PropertyObject_GetTypeFlagsResponse);
  
  
  // Method: SetTypeFlags
  //
  // Sets the type flags setting of the property the lookupString parameter specifies.
  //
  // Call this method only for PropertyObject objects that are type definitions. Use the PropertyObject.IsTypeDefinition property to determine whether the object is a type definition.
  // Note: You cannot clear the PropTypeFlags_IsModifiedType flag with this method because setting the type flags automatically sets the PropTypeFlags_IsModifiedType flag. Instead, use the PropertyObject.IsModifiedType property to set or clear the PropTypeFlags_IsModifiedType flag.
  //
  // PropertyObject_SetTypeFlagsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - Flags: int32 - Specifies the new type flags for the property.
  //
  // PropertyObject_SetTypeFlagsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetTypeFlags(PropertyObject_SetTypeFlagsRequest) returns (PropertyObject_SetTypeFlagsResponse);
  
  
  // Method: GetInstanceOverrideFlags
  //
  // Returns the flags for which the type determines the value in the instances of the type. Specify the type or a property of the type in the lookupString parameter.
  //
  // This method is valid only for type definitions.
  // If an instance override flag is set, the value for that flag as defined in the instance default flag will always be the value in the instance of the type and cannot be changed in that instance.
  //
  // PropertyObject_GetInstanceOverrideFlagsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetInstanceOverrideFlagsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Instance override flags of the type. 
  //
  rpc GetInstanceOverrideFlags(PropertyObject_GetInstanceOverrideFlagsRequest) returns (PropertyObject_GetInstanceOverrideFlagsResponse);
  
  
  // Method: SetInstanceOverrideFlags
  //
  // Sets the flags for which the type determines the value in the instances of the type. Specify the type or a property of the type in the lookupString.
  //
  // This method is valid only for type definitions. If you set an instance override flag, the value for that flag as defined in the instance default flag will always be the value in the instance of the type and cannot be changed in that instance.
  //
  // PropertyObject_SetInstanceOverrideFlagsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - Flags: int32 - Specifies the default flags of the type.
  //
  // PropertyObject_SetInstanceOverrideFlagsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetInstanceOverrideFlags(PropertyObject_SetInstanceOverrideFlagsRequest) returns (PropertyObject_SetInstanceOverrideFlagsResponse);
  
  
  // Method: ValidateNewSubPropertyName
  //
  // Determines if the specified name is valid for a new subproperty of the PropertyObject.
  //
  // Call this method before adding a new subproperty to determine whether the name of the new subproperty is valid.
  //
  // PropertyObject_ValidateNewSubPropertyNameRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - newName: string - Specifies the new name to validate.
  //    - allowDuplicates: bool - Typically, you pass False to this parameter because subproperties cannot have identical names.
  //
  // PropertyObject_ValidateNewSubPropertyNameResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: string - Returns an explanation of why the name is not valid. 
  //    - isValid: boo - Returns True if the new name is valid.
  //
  rpc ValidateNewSubPropertyName(PropertyObject_ValidateNewSubPropertyNameRequest) returns (PropertyObject_ValidateNewSubPropertyNameResponse);
  
  
  // Method: ValidateNewElementName
  //
  // Determines if the specified name is valid for a new element of the PropertyObject.
  //
  // This method is valid only for arrays of containers or arrays of named types. Call this method before adding a new element to determine whether the name of the new element is valid.
  //
  // PropertyObject_ValidateNewElementNameRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - newName: string - Specifies the new name to validate.
  //    - allowDuplicates: bool - In addition to validating the name, also checks if the name is already in use. Typically, you pass True to this parameter because array elements are allowed to have duplicate names.
  //
  // PropertyObject_ValidateNewElementNameResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: string - Returns an explanation of why the name is not valid. 
  //    - isValid: boo - Returns True if the new name is valid.
  //
  rpc ValidateNewElementName(PropertyObject_ValidateNewElementNameRequest) returns (PropertyObject_ValidateNewElementNameResponse);
  
  
  // Method: GetInternalPtr
  //
  rpc GetInternalPtr(PropertyObject_GetInternalPtrRequest) returns (PropertyObject_GetInternalPtrResponse);
  
  
  // Method: GetXML
  //
  // Generates the corresponding XML for a PropertyObject.
  //
  // You can use the PropertyObject.SetXML method to recreate an object using the XML this method generates.
  // You can use the generated XML for exchanging data between TestStand and other applications.
  // If you call this method on an alias object, TestStand generates the XML stream using the object to which the alias refers. By default, this method includes alias subproperty objects in the XML stream, unless you specify the XMLOptions_ExcludeAliasObjects option.
  // Refer to the World Wide Web Consortium-compliant XML schema file, PropertyObject.xsd, located in the <TestStand>\Components\Models\TestStandModels directory, for more information about the output of the GetXML method and the required format for the input stream to SetXML.
  // The <TestStand>\Components\Models\TestStandModels\PropertyObject.xsd file defines the XSD schema definition for the GetXML and SetXML methods. The <TestStand>\Components\Models\TestStandModels\Report.xsd file defines the XSD schema definition for XML reports.
  //
  // PropertyObject_GetXMLRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - GenerationOptions: int32 - Use this parameter to control the XML generation. You can use any combination of the flags found in XMLOptions.
  //    - InitialIndentation: int32 - Specifies the number of tab characters in front of each line of generated XML source.
  //    - DefaultName: string - Specifies a default name when you call this method on an object that has no name.
  //      Pass an empty string if you want to use the name of the PropertyObject on which this method was called. This applies only to the root PropertyObject and not subproperties.
  //
  // PropertyObject_GetXMLResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetXML(PropertyObject_GetXMLRequest) returns (PropertyObject_GetXMLResponse);
  
  
  // Method: Search
  //
  // Searches a property object and subproperties.
  //
  // Returns a SearchResults object that is a handle to the asynchronous search already in progress. To wait for the search to complete, call the SearchResults.IsComplete method.
  //
  // PropertyObject_SearchRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Specifies a lookup string that indicates the location of the subproperty of the PropertyObject on which to begin the search. If a match is found, the location of the match in the SearchMatch object is relative to the original PropertyObject, not the subproperty. You can pass an empty string for this parameter to begin the search at the root-level of the PropertyObject.
  //    - searchString: string - Specifies the string or regular expression for which to search. To use regular expressions, you must pass the option SearchOptions_RegExpr for the searchOptions parameter of this method.
  //    - filterOptions: int32 - Specifies one or more SearchFilterOptions constants. Use the bitwise-OR operator to specify multiple search filter options. Only the following filter options apply to this method: SearchFilterOptions_CustomStepProps, SearchFilterOptions_BuiltinStepProps, and SearchFilterOptions_ModuleStepProps.
  //    - elementsToSearch: int32 - Specifies one or more SearchElements constants. Use the bitwise-OR operator to specify multiple elements to search.
  //    - limitToAdapters: repeated string - Specifies an array of AdapterKeyNames constants to indicate the steps of which adapters to search. Pass an empty array or NULL to search steps that use any adapter.
  //    - limitToNamedProps: repeated string - Specifies an array of property names under which to limit the search. Pass an empty array or NULL to search all properties. If you specify names of properties to which to limit the search, TestStand searches only those properties with the names you specify and all their subproperties.
  //    - limitToPropsOfNamedTypes: repeated string - Specifies an array of type names to which to limit the search. Pass an empty array or NULL to search instances of all types. Use this parameter to limit the search instances of all types. Use this parameter to limit the search to instances of the types you specify.
  //    - subpropLookupStringsToExclude: repeated string - Specifies an array of lookup strings that indicate which subproperties to exclude from the search. Pass an empty array or NULL if you do not want to exclude any properties. You can pass a lookup string with the wildcard character (*) in place of any property name to indicate that all properties match that part of the lookup string. You can also use the wildcard character to match any element of an array by specifying the wildcard character (*) for the array element index. For example, if the property object you search is an array of steps, you can specify the lookup string "[*].Result" to exclude the Result property of all steps in the array.
  //      Note: When you exclude a subproperty, you also exclude all the subproperties the subproperty contains.
  //
  // PropertyObject_SearchResponse - The response message from the server. It provides the return value.
  //    - returnValue: SearchResultsInstance - A SearchResult object. 
  //
  rpc Search(PropertyObject_SearchRequest) returns (PropertyObject_SearchResponse);
  
  
  // Method: GetDisplayNames
  //
  // Obtains the display name, if any, of the name and value of the property the lookupString parameter specifies.
  //
  // PropertyObject_GetDisplayNamesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Reserved for future use. Pass 0.
  //
  // PropertyObject_GetDisplayNamesResponse - The response message from the server. It provides the output parameters.
  //    - propDisplayName: strin - Returns the display name of the property. If there is no display name, the name of the property is returned.
  //    - valueDisplayName: strin - Returns the display name for the value of the property. If there is no display name, a string representation of the actual value is returned.
  //
  rpc GetDisplayNames(PropertyObject_GetDisplayNamesRequest) returns (PropertyObject_GetDisplayNamesResponse);
  
  
  // Method: SetXML
  //
  // Reads the contents of a stream of XML string data and stores the contents in the PropertyObject to which the method applies.
  //
  // You can use the PropertyObject.GetXML method to generate the corresponding XML this method requires.
  // You cannot unserialize a stream that contains a container type into a property object that is a value type, or vice versa. This method does not return an error. Instead, it sets the PropertyObject on which this method operates to the default value.
  // If you attempt to unserialize a stream that contains a value type into a property object of a different value type, TestStand attempts to coerce the value. If the coercion is unsuccessful, TestStand only resets the PropertyObject on which this method operates to the default value.
  // TestStand does not assign the name and some flags associated with the top-level PropertyObject in the stream to the PropertyObject on which this method operates.
  // Refer to the World Wide Web Consortium-compliant XML schema file, PropertyObject.xsd, located in the <TestStand>\Components\Models\TestStandModels directory, for more information about the output of the PropertyObject.GetXML method and the required format for the input stream to this method.
  // The <TestStand>\Components\Models\TestStandModels\Report.xsd file defines the XSD schema definition for XML reports.
  //
  // PropertyObject_SetXMLRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - xmlStream: string - Specifies an XML stream.
  //    - reserved1: int32 - Pass 0.
  //    - reserved2: TypeConflictHandlerTypes - This parameter is reserved for when the PropertyObject.GetXML method supports storing type information in an XML stream. This parameter specifies how to handle type conflicts in the stream.
  //
  // PropertyObject_SetXMLResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetXML(PropertyObject_SetXMLRequest) returns (PropertyObject_SetXMLResponse);
  
  
  // Method: GetValBinary
  //
  // Returns the binary data stored in the string value of the property the lookupString parameter specifies. The PropertyObject.SetValBinary method must have set the string value.
  //
  // This method unencodes and decompresses the binary data the string stores. You can use this method to retrieve arbitrary binary data from TestStand string variables or properties.
  //
  // PropertyObject_GetValBinaryRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetValBinaryResponse - The response message from the server. It provides the return value.
  //    - returnValue: bytes - Returns an array of bytes that contains the binary data the string property stores. 
  //
  rpc GetValBinary(PropertyObject_GetValBinaryRequest) returns (PropertyObject_GetValBinaryResponse);
  
  
  // Method: SetValBinary
  //
  // Sets the string value of the property the lookupString parameter specifies to contain a string representation of the binary data you pass to the newValue parameter. This method compresses the binary data and then encodes the compressed data into the string using only printable ASCII characters.
  //
  // Ordinarily, you cannot store binary data in a string because strings cannot contain zero bytes and strings must not contain invalid multibyte character set (MBCS) sequences. However, by encoding binary data using only printable non-MBCS-lead-byte characters, this method enables you to store arbitrary binary data in TestStand string variables or properties.
  //
  // PropertyObject_SetValBinaryRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - newValue: bytes - Specifies the array of bytes to store in the string property.
  //
  // PropertyObject_SetValBinaryResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetValBinary(PropertyObject_SetValBinaryRequest) returns (PropertyObject_SetValBinaryResponse);
  
  
  // Method: GetNthSubProperty
  //
  // Returns the name of a subproperty within the property the lookupString parameter specifies.
  //
  // PropertyObject_GetNthSubPropertyRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - index: int32 - Specifies the zero-based index of the subproperty.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetNthSubPropertyResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Name of the subproperty the index specifies. 
  //
  rpc GetNthSubProperty(PropertyObject_GetNthSubPropertyRequest) returns (PropertyObject_GetNthSubPropertyResponse);
  
  
  // Method: DeleteNthSubProperty
  //
  // Deletes the subproperty at the specified index.
  //
  // Use the PropOption_DeleteIfExists option to prevent TestStand from returning errors if the specified property does not exist prior to calling this function. To delete a specific element from a one-dimensional array, use the PropertyObject.DeleteElements method.
  // Note: TestStand does not support adding a new subproperty to an instance of a type unless you add the subproperty below a container you have marked as unstructured in the type definition by using the PropFlags_UnstructuredProperty flag. TestStand does not report any errors and creates the property, but does not save the property. When resolving type conflicts and updating type instances, TestStand automatically removes the property.
  //
  // PropertyObject_DeleteNthSubPropertyRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - index: int32 - Specifies the zero-based index of the subproperty. Pass -1 to delete all subproperties. If you pass -1, subproperties that cannot be deleted do not generate an error.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_DeleteNthSubPropertyResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc DeleteNthSubProperty(PropertyObject_DeleteNthSubPropertyRequest) returns (PropertyObject_DeleteNthSubPropertyResponse);
  
  
  // Method: DisplayAttributesDialog
  //
  // Launches the Attributes dialog box, in which you can create and edit attributes of a PropertyObject.
  //
  // PropertyObject_DisplayAttributesDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - dlgOptions: int32 - Specifies any combination of the CommonDialogOptions constants.
  //    - file: PropertyObjectFileInstance - Specifies the file to which the object belongs.
  //
  // PropertyObject_DisplayAttributesDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if you make modifications and click OK in the dialog box. Returns False if you click Cancel or make no modifications. 
  //
  rpc DisplayAttributesDialog(PropertyObject_DisplayAttributesDialogRequest) returns (PropertyObject_DisplayAttributesDialogResponse);
  
  
  // Method: CreateReportSection
  //
  // Generates the corresponding serialization for a PropertyObject based on the format specified and returns the serialized data as a ReportSection object.
  //
  // Refer to the World Wide Web Consortium-compliant XML schema file, PropertyObject.xsd, located in the <TestStand>\Components\Models\TestStandModels directory, for more information about the XML serialization of this method.
  //
  // PropertyObject_CreateReportSectionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - GenerationOptions: int32 - Use this parameter to control the XML generation. You can use any combination of the flags in the XMLOptions constants.
  //    - InitialIndentation: int32 - Specifies the number of tab characters in front of each line of generated XML source.
  //    - DefaultName: string - Specifies a default name when you call this method on a nameless object.
  //      Pass an empty string if you want to use the name of the PropertyObject on which this method was called. This applies only to the root PropertyObject and not subproperties.
  //    - Format: string - Specifies the format of the generated serialization. This method supports values of XML, XML-OTF, or an empty string, which is the default value. Values are not case-sensitive.
  //      When you specify the XML value or an empty string, this method returns a ReportSection object that contains an XML representation of the PropertyObject object. Call the ReportSection.GetAllText method to retrieve the XML content, which might be spread across the ReportSection Header, Body, Footer, and ReportSubsections properties.
  //      National Instruments recommends that you do not use the XML-OTF option unless you are modifying National Instruments code that depends on it or you are implementing a custom on-the-fly XML report generator.  Although the ReportSection objects the XML-OTF option returns contain equivalent data as the ReportSection objects the XML option returns, the XML-OTF option output differs from the standard XML in the following ways:
  //      * The XML-OTF output never contains any data in the ReportSection.Body property.    * Except as explained below, the XML-OTF output writes data to the ReportSection.Header property.    * The XML-OTF output inserts data for each TS.SequenceCall and TS.PostAction subproperty of the PropertyObject into its own ReportSection object that the ReportSection.ReportSubsections property contains. Each subsection includes the following data:@ul(@bullet(The Header property contains the first line of XML content.)@bullet(The Footer property contains all remaining XML content.)@bullet(Additional TS.SequenceCall and TS.PostAction properties within the subsection receive no special processing and are included in the Footer property just like any other TestStand property.))    * After the XML-OTF output processes a TS.SequenceCall or TS.PostAction property, the XML-OTF output inserts all remaining data of other types in the Footer property of the returned ReportSection object. The XML-OTF output inserts additional TS.SequenceCall and TS.PostAction properties in new subsections, as described above.
  //      Because the XML-OTF output handles the TS.SequenceCall and TS.PostAction properties in a special way, the order of subproperties in the XML content the ReportSection.GetAllText method returns might not be identical in the two cases.
  //
  // PropertyObject_CreateReportSectionResponse - The response message from the server. It provides the return value.
  //    - returnValue: ReportSectionInstance - The return type of the ReportSection object.
  //
  rpc CreateReportSection(PropertyObject_CreateReportSectionRequest) returns (PropertyObject_CreateReportSectionResponse);
  
  
  // Method: GetValInteger64
  //
  // Returns the signed 64-bit integer value of the property the lookupString parameter specifies.
  // Note: (Platform: (LabVIEW)) You cannot use this method in LabVIEW. Use the PropertyObject.GetValVariant method instead.
  //
  // TestStand stores numeric values as double-precision, 64-bit floating-point values, signed 64-bit integer values, or unsigned 64-bit integer values.
  //
  // PropertyObject_GetValInteger64Request - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetValInteger64Response - The response message from the server. It provides the return value.
  //    - returnValue: int64 - Signed 64-bit integer value of the property. 
  //
  rpc GetValInteger64(PropertyObject_GetValInteger64Request) returns (PropertyObject_GetValInteger64Response);
  
  
  // Method: SetValInteger64
  //
  // Sets the signed 64-bit integer value of the property the lookupString parameter specifies.
  // Note: (Platform: (LabVIEW)) You cannot use this method in LabVIEW. Use the PropertyObject.SetValVariant method instead.
  //
  // TestStand stores numeric values as double-precision, 64-bit floating-point values, signed 64-bit integer values, or unsigned 64-bit integer values.
  //
  // PropertyObject_SetValInteger64Request - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - newValue: int64 - Specifies the new value for the property.
  //
  // PropertyObject_SetValInteger64Response - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetValInteger64(PropertyObject_SetValInteger64Request) returns (PropertyObject_SetValInteger64Response);
  
  
  // Method: GetValInteger64ByOffset
  //
  // Returns the signed 64-bit integer value of the array element the arrayOffset parameter specifies.
  // Note: (Platform: (LabVIEW)) You cannot use this method in LabVIEW. Use the PropertyObject.GetValVariant method instead.
  //
  // This method is valid only for array objects and is intended for use with arrays of 64-bit integers. Use the PropertyObject.GetValUnsignedInteger64ByOffset method with arrays of unsigned 64-bit integers. If the array is of a type other than 64-bit integers, you can use this method with the corresponding PropOption_Coerce constant.
  //
  // PropertyObject_GetValInteger64ByOffsetRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - arrayOffset: int32 - Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetValInteger64ByOffsetResponse - The response message from the server. It provides the return value.
  //    - returnValue: int64 - Signed 64-bit integer value of the array element. 
  //
  rpc GetValInteger64ByOffset(PropertyObject_GetValInteger64ByOffsetRequest) returns (PropertyObject_GetValInteger64ByOffsetResponse);
  
  
  // Method: SetValInteger64ByOffset
  //
  // Sets the signed 64-bit integer value of the array element the arrayOffset parameter specifies.
  // Note: (Platform: (LabVIEW)) You cannot use this method in LabVIEW. Use the PropertyObject.SetValVariant method instead.
  //
  // This method is valid only for array objects and is intended for use with arrays of 64-bit integers. Use the PropertyObject.SetValUnsignedInteger64ByOffset method with arrays of unsigned 64-bit integers. If the array is of a type other than unsigned 64-bit integers, you can use this method with the corresponding PropOption_Coerce constant.
  //
  // PropertyObject_SetValInteger64ByOffsetRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - arrayOffset: int32 - Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - newValue: int64 - Specifies the new value for the array element.
  //
  // PropertyObject_SetValInteger64ByOffsetResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetValInteger64ByOffset(PropertyObject_SetValInteger64ByOffsetRequest) returns (PropertyObject_SetValInteger64ByOffsetResponse);
  
  
  // Method: GetValUnsignedInteger64
  //
  // Returns the unsigned 64-bit integer value of the property the lookupString parameter specifies.
  // Note: (Platform: LabVIEW) You cannot use this method in LabVIEW. Use the PropertyObject.GetValVariant method instead.
  //
  // TestStand stores numeric values as double-precision, 64-bit floating-point values, signed 64-bit integer values, or unsigned 64-bit integer values.
  //
  // PropertyObject_GetValUnsignedInteger64Request - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetValUnsignedInteger64Response - The response message from the server. It provides the return value.
  //    - returnValue: uint64 - Unsigned 64-bit Integer value of the property. 
  //
  rpc GetValUnsignedInteger64(PropertyObject_GetValUnsignedInteger64Request) returns (PropertyObject_GetValUnsignedInteger64Response);
  
  
  // Method: SetValUnsignedInteger64
  //
  // Sets the unsigned 64-bit integer value of the property the lookupString parameter specifies.
  // Note: (Platform: (LabVIEW)) You cannot use this method in LabVIEW. Use the PropertyObject.SetValVariant method instead.
  //
  // TestStand stores numeric values as double-precision, 64-bit floating-point values, signed 64-bit integer values, or unsigned 64-bit integer values.
  //
  // PropertyObject_SetValUnsignedInteger64Request - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - lookupString: string - Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - newValue: uint64 - Specifies the new value for the property.
  //
  // PropertyObject_SetValUnsignedInteger64Response - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetValUnsignedInteger64(PropertyObject_SetValUnsignedInteger64Request) returns (PropertyObject_SetValUnsignedInteger64Response);
  
  
  // Method: GetValUnsignedInteger64ByOffset
  //
  // Returns the unsigned 64-bit integer value of the array element the arrayOffset parameter specifies.
  // Note: (Platform: (LabVIEW)) You cannot use this method in LabVIEW. Use the PropertyObject.GetValVariant method instead.
  //
  // This method is valid only for array objects and is intended for use with arrays of unsigned 64-bit integers. Use the PropertyObject.GetValInteger64ByOffset method with arrays of 64-bit integers. If the array is of a type other than unsigned 64-bit integers, you can use this method with the corresponding PropOption_Coerce constant.
  //
  // PropertyObject_GetValUnsignedInteger64ByOffsetRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - arrayOffset: int32 - Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_GetValUnsignedInteger64ByOffsetResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint64 - Unsigned 64-bit integer value of the array element. 
  //
  rpc GetValUnsignedInteger64ByOffset(PropertyObject_GetValUnsignedInteger64ByOffsetRequest) returns (PropertyObject_GetValUnsignedInteger64ByOffsetResponse);
  
  
  // Method: SetValUnsignedInteger64ByOffset
  //
  // Sets the unsigned 64-bit integer value of the array element the arrayOffset parameter specifies.
  // Note: (Platform: (LabVIEW)) You cannot use this method in LabVIEW. Use the PropertyObject.SetValVariant method instead.
  //
  // This method is valid only for array objects and is intended for use with arrays of unsigned 64-bit integers. Use the PropertyObject.SetValInteger64ByOffset method with arrays of 64-bit integers. If the array is of a type other than unsigned 64-bit integers, you can use this method with the corresponding PropOption_Coerce constant.
  //
  // PropertyObject_SetValUnsignedInteger64ByOffsetRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - arrayOffset: int32 - Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //    - newValue: uint64 - Specifies the new value for the array element.
  //
  // PropertyObject_SetValUnsignedInteger64ByOffsetResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetValUnsignedInteger64ByOffset(PropertyObject_SetValUnsignedInteger64ByOffsetRequest) returns (PropertyObject_SetValUnsignedInteger64ByOffsetResponse);
  
  
  // Method: DisplayEditNumericFormatDialog
  //
  // Launches a dialog box in which you can edit a numeric format string used to display numbers.
  //
  // PropertyObject_DisplayEditNumericFormatDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - dlgOptions: int32 - Specifies any combination of the EditNumericFormatOptions constants.
  //
  // PropertyObject_DisplayEditNumericFormatDialogResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if you click OK in the dialog box. Returns False if you click Cancel. 
  //    - validFormat: boo - Returns True if the returned format is valid, otherwise returns False.
  //      
  //
  rpc DisplayEditNumericFormatDialog(PropertyObject_DisplayEditNumericFormatDialogRequest) returns (PropertyObject_DisplayEditNumericFormatDialogResponse);
  
  
  // Method: InsertElements
  //
  // Inserts one or more elements into an array object.
  //
  // This method is valid only for one-dimensional array objects. Use the PropertyObjectType.ArrayDimensions property to set the size of multi-dimensional array objects.
  //
  // PropertyObject_InsertElementsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - arrayOffset: int32 - Specifies the array offset of the first element to insert.
  //    - numElements: int32 - Specifies the number of elements to insert.
  //    - options: int32 - Pass 0 to specify the default behavior or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // PropertyObject_InsertElementsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc InsertElements(PropertyObject_InsertElementsRequest) returns (PropertyObject_InsertElementsResponse);
  
  
  // Method: GetTypeDefinitionProtection
  //
  // Returns the ProtectedObjectOption_None or ProtectedObjectOption_NotEditable protection level applied to a type definition. This method does not support other ProtectedObjectOptions values. The TestStand Sequence Editor enforces the ProtectedObjectOption_NotEditable option.
  //
  // You can call this method on any property of the type definition, not just the root object of the type.
  // Note: TestStand supports password-protecting type definitions to deter unauthorized users from editing the types in the sequence editor. However, any TestStand user can continue to programmatically edit a locked type by using the TestStand PropertyObject API. National Instruments does not recommend password-protecting types as the only way of protecting intellectual property.
  //
  // PropertyObject_GetTypeDefinitionProtectionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //
  // PropertyObject_GetTypeDefinitionProtectionResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - The return type of the Int32 object.
  //
  rpc GetTypeDefinitionProtection(PropertyObject_GetTypeDefinitionProtectionRequest) returns (PropertyObject_GetTypeDefinitionProtectionResponse);
  
  
  // Method: SetTypeDefinitionProtection
  //
  // Sets the protection level and, optionally, the password of a type definition.
  //
  // You can call this method on any property of the type definition, not just the root object of the type.
  // Note: TestStand supports password-protecting type definitions to deter unauthorized users from editing the types in the sequence editor. However, any TestStand user can continue to programmatically edit a locked type by using the TestStand PropertyObject API. National Instruments does not recommend password-protecting types as the only way of protecting intellectual property.
  //
  // PropertyObject_SetTypeDefinitionProtectionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - newValue: int32 - Specifies one of the supported ProtectedObjectOptions. For type locking, this method supports only ProtectedObjectOption_None and ProtectedObjectOption_NotEditable.
  //    - passwordString: ObjectInstance - Specifies the password you require to unlock the type. This password can be empty only if the value for  the newValue parameter is ProtectedObjectOption_None. TestStand uses this password and the password history of a type during type conflict resolution to determine whether a newer version of the type can replace an older version without requiring the password for the older version.
  //
  // PropertyObject_SetTypeDefinitionProtectionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetTypeDefinitionProtection(PropertyObject_SetTypeDefinitionProtectionRequest) returns (PropertyObject_SetTypeDefinitionProtectionResponse);
  
  
  // Method: LockTypeDefinition
  //
  // Changes the in-memory state of a password-protected type definition to locked. This method returns an error if you call it on a type that is not password-protected.
  //
  // You can call this method on any property of the type definition, not just the root object of the type.
  // Note: TestStand supports password-protecting type definitions to deter unauthorized users from editing the types in the sequence editor. However, any TestStand user can continue to programmatically edit a locked type by using the TestStand PropertyObject API. National Instruments does not recommend password-protecting types as the only way of protecting intellectual property.
  //
  // PropertyObject_LockTypeDefinitionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //
  // PropertyObject_LockTypeDefinitionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc LockTypeDefinition(PropertyObject_LockTypeDefinitionRequest) returns (PropertyObject_LockTypeDefinitionResponse);
  
  
  // Method: UnlockTypeDefinition
  //
  // Changes the in-memory state of a password-protected type definition to unlocked. The password you pass for the passwordString parameter must match the password set for the type definition or this method returns an error, even if the type is already in an unlocked state. This method also returns an error if you call it on a type that is not password-protected.
  //
  // You can call this method on any property of the type definition, not just the root object of the type.
  // Note: TestStand supports password-protecting type definitions to deter unauthorized users from editing the types in the sequence editor. However, any TestStand user can continue to programmatically edit a locked type by using the TestStand PropertyObject API. National Instruments does not recommend password-protecting types as the only way of protecting intellectual property.
  //
  // PropertyObject_UnlockTypeDefinitionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - passwordString: string - Specifies the password required to unlock the type.
  //
  // PropertyObject_UnlockTypeDefinitionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc UnlockTypeDefinition(PropertyObject_UnlockTypeDefinitionRequest) returns (PropertyObject_UnlockTypeDefinitionResponse);
  
  

  // Property: Name
  //
  // Specifies the name of the PropertyObject.
  //
  // TestStand expressions require PropertyObject names to be strings that contain only letters, numbers, and underscores. PropertyObject names cannot contain spaces, start with a number, or be empty. Additionally, the PropertyObject name cannot be "Value", and you cannot have duplicate subproperty names. For example, MyVariableName_2000 is a valid PropertyObject name. Names of elements in a PropertyObject array can contain any character. Both sequence names and step names are examples of such named array elements. However, sequence names cannot be empty or contain control characters. You cannot have duplicate sequence names. The name NI is reserved at the root level for attribute names.
  // Note: TestStand does not generate an error if you specify an invalid name for a PropertyObject.Note: TestStand does not validate type or variable names you create programmatically for invalid characters, such as spaces, which can result in errors when you use expressions. Use the PropertyObject.ValidateNewName, PropertyObject.ValidateNewSubPropertyName, PropertyObject.ValidateNewElementName, or TypeUsageList.ValidateNewTypeName methods to validate property names.
  //
  // PropertyObject_Set_NameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - val: string - Specifies the name of the PropertyObject. 
  //
  // PropertyObject_Set_NameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PropertyObject_Get_NameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //
  // PropertyObject_Get_NameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the name of the PropertyObject. 
  //
  rpc Set_Name(PropertyObject_Set_NameRequest) returns (PropertyObject_Set_NameResponse);
  rpc Get_Name(PropertyObject_Get_NameRequest) returns (PropertyObject_Get_NameResponse);
  
  
  // Property: Comment
  //
  // Specifies the comment string associated with the property object.
  //
  // PropertyObject_Set_CommentRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - val: string - Specifies the comment string associated with the property object. 
  //
  // PropertyObject_Set_CommentResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PropertyObject_Get_CommentRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //
  // PropertyObject_Get_CommentResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the comment string associated with the property object. 
  //
  rpc Set_Comment(PropertyObject_Set_CommentRequest) returns (PropertyObject_Set_CommentResponse);
  rpc Get_Comment(PropertyObject_Get_CommentRequest) returns (PropertyObject_Get_CommentResponse);
  
  
  // Property: Parent
  //
  // Returns the parent or owning property object.
  //
  // If this object is an alias object, you can obtain the parent of the object the alias references by first obtaining the referenced object by passing an empty string for the lookupString parameter of the PropertyObject.GetPropertyObject method, then access the parent property.
  //
  // PropertyObject_Get_ParentRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //
  // PropertyObject_Get_ParentResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Returns the parent or owning property object. 
  //
  rpc Get_Parent(PropertyObject_Get_ParentRequest) returns (PropertyObject_Get_ParentResponse);
  
  
  // Property: IsRootTypeDefinition
  //
  // Returns a value that indicates whether the object is a root type definition.
  //
  // A root type definition is an object created with the Engine.NewDataType or Engine.NewStepType methods. Subproperties of root type definitions are also type definitions, but they are not root type definitions. Root type definitions normally belong to a TypeUsageList.
  //
  // PropertyObject_Get_IsRootTypeDefinitionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //
  // PropertyObject_Get_IsRootTypeDefinitionResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the object is a root type definition. 
  //
  rpc Get_IsRootTypeDefinition(PropertyObject_Get_IsRootTypeDefinitionRequest) returns (PropertyObject_Get_IsRootTypeDefinitionResponse);
  
  
  // Property: CanAddSubProperty
  //
  // Returns a value that indicates whether you can add subproperties to this object.
  //
  // When this property is False, the PropertyObject.InsertSubProperty, PropertyObject.NewSubProperty, and PropertyObject.SetPropertyObject methods report errors.
  //
  // PropertyObject_Get_CanAddSubPropertyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //
  // PropertyObject_Get_CanAddSubPropertyResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether you can add subproperties to this object. 
  //
  rpc Get_CanAddSubProperty(PropertyObject_Get_CanAddSubPropertyRequest) returns (PropertyObject_Get_CanAddSubPropertyResponse);
  
  
  // Property: IsTypeDefinition
  //
  // Returns a value that indicates whether the object is a type definition.
  //
  // A type definition is an object that is either a root type definition or is a subproperty of a root type definition.
  //
  // PropertyObject_Get_IsTypeDefinitionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //
  // PropertyObject_Get_IsTypeDefinitionResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the object is a type definition. 
  //
  rpc Get_IsTypeDefinition(PropertyObject_Get_IsTypeDefinitionRequest) returns (PropertyObject_Get_IsTypeDefinitionResponse);
  
  
  // Property: TypeCategory
  //
  // Returns the type category to which the type definition belongs.
  //
  // This property is valid only for root type definitions. Add a root type definition to a type category by calling the TypeUsageList.InsertType method.
  //
  // PropertyObject_Get_TypeCategoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //
  // PropertyObject_Get_TypeCategoryResponse - The response message from the server. It provides the return value.
  //    - returnValue: TypeCategories - Returns the type category to which the type definition belongs. 
  //
  rpc Get_TypeCategory(PropertyObject_Get_TypeCategoryRequest) returns (PropertyObject_Get_TypeCategoryResponse);
  
  
  // Property: TypeVersion
  //
  // Specifies the version of the PropertyObject object if it is a root type definition.
  //
  // If the object is not a root type definition, the property reports an error.  Call the PropertyObject.IsRootTypeDefinition property to check if this property would return an error. The version string is in a format similar to that of DLLs and executables: "M[.m[.r[.b]]]," where M=major version, m=minor version, r=revision, and b=build number. All but the major version can be omitted.  Example version strings are "1.0.2.200" and "2.1."  If you want to set the type version, you must pass a string that follows this format.
  //
  // PropertyObject_Set_TypeVersionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - val: string - Specifies the version of the PropertyObject object if it is a root type definition. 
  //
  // PropertyObject_Set_TypeVersionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PropertyObject_Get_TypeVersionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //
  // PropertyObject_Get_TypeVersionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the version of the PropertyObject object if it is a root type definition. 
  //
  rpc Set_TypeVersion(PropertyObject_Set_TypeVersionRequest) returns (PropertyObject_Set_TypeVersionResponse);
  rpc Get_TypeVersion(PropertyObject_Get_TypeVersionRequest) returns (PropertyObject_Get_TypeVersionResponse);
  
  
  // Property: NumericFormat
  //
  // Specifies a numeric format string TestStand uses to format a numeric value or values in a numeric array when you call the PropertyObject.GetFormattedValue method.
  //
  // The syntax of the numeric format string is identical to the format string that the C printf function accepts, with the following exceptions:
  // * Place a $ character after the % character in the format string to remove trailing zeros after the decimal point.    * Use a format code of %b to format a number in binary.    * Specify an empty string to set the format to the default numeric format.
  //
  // PropertyObject_Set_NumericFormatRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - val: string - Specifies a numeric format string TestStand uses to format a numeric value or values in a numeric array when you call the PropertyObject.GetFormattedValue method. 
  //
  // PropertyObject_Set_NumericFormatResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PropertyObject_Get_NumericFormatRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //
  // PropertyObject_Get_NumericFormatResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies a numeric format string TestStand uses to format a numeric value or values in a numeric array when you call the PropertyObject.GetFormattedValue method. 
  //
  rpc Set_NumericFormat(PropertyObject_Set_NumericFormatRequest) returns (PropertyObject_Set_NumericFormatResponse);
  rpc Get_NumericFormat(PropertyObject_Get_NumericFormatRequest) returns (PropertyObject_Get_NumericFormatResponse);
  
  
  // Property: ArrayElementPrototype
  //
  // Specifies the prototype for elements of the array.
  //
  // This property is valid only for arrays of containers or arrays of named types. Call the PropertyObject.Type property to determine whether the object is an array of containers or named types. The array element prototype is a template from which new elements are copied when the size of the array increases.  The array element prototype represents the expected structure of elements of the array.
  //
  // PropertyObject_Set_ArrayElementPrototypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - val: PropertyObjectInstance - Specifies the prototype for elements of the array. 
  //
  // PropertyObject_Set_ArrayElementPrototypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PropertyObject_Get_ArrayElementPrototypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //
  // PropertyObject_Get_ArrayElementPrototypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Specifies the prototype for elements of the array. 
  //
  rpc Set_ArrayElementPrototype(PropertyObject_Set_ArrayElementPrototypeRequest) returns (PropertyObject_Set_ArrayElementPrototypeResponse);
  rpc Get_ArrayElementPrototype(PropertyObject_Get_ArrayElementPrototypeRequest) returns (PropertyObject_Get_ArrayElementPrototypeResponse);
  
  
  // Property: TypeLastModified
  //
  // Returns the full version of the TestStand Engine as a string that last modified the type.
  //
  // This property is valid only for root type definitions.
  //
  // PropertyObject_Get_TypeLastModifiedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //
  // PropertyObject_Get_TypeLastModifiedResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the full version of the TestStand Engine as a string that last modified the type. 
  //
  rpc Get_TypeLastModified(PropertyObject_Get_TypeLastModifiedRequest) returns (PropertyObject_Get_TypeLastModifiedResponse);
  
  
  // Property: TypeMinimumTestStandVersion
  //
  // Specifies the earliest version of TestStand that can use a type.
  //
  // When you load a file that contains the type in a version of TestStand that is older than the value of this property, TestStand uses the currently loaded version of the type, if one exists. Otherwise, the file fails to load.
  // Note: This property is valid only for root type definitions.
  //
  // PropertyObject_Set_TypeMinimumTestStandVersionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - val: string - Specifies the earliest version of TestStand that can use a type. 
  //
  // PropertyObject_Set_TypeMinimumTestStandVersionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PropertyObject_Get_TypeMinimumTestStandVersionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //
  // PropertyObject_Get_TypeMinimumTestStandVersionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the earliest version of TestStand that can use a type. 
  //
  rpc Set_TypeMinimumTestStandVersion(PropertyObject_Set_TypeMinimumTestStandVersionRequest) returns (PropertyObject_Set_TypeMinimumTestStandVersionResponse);
  rpc Get_TypeMinimumTestStandVersion(PropertyObject_Get_TypeMinimumTestStandVersionRequest) returns (PropertyObject_Get_TypeMinimumTestStandVersionResponse);
  
  
  // Property: Type
  //
  // Returns an object that provides type information about the PropertyObject.
  //
  // PropertyObject_Get_TypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //
  // PropertyObject_Get_TypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectTypeInstance - Returns an object that provides type information about the PropertyObject. 
  //
  rpc Get_Type(PropertyObject_Get_TypeRequest) returns (PropertyObject_Get_TypeResponse);
  
  
  // Property: IsModifiedType
  //
  // Returns or specifies the PropTypeFlags_IsModifiedType flag on the current PropertyObject.
  //
  // Calling the PropertyObject.SetTypeFlags method to change the PropertyObjTypeFlags of a PropertyObject always sets the PropTypeFlags_IsModifiedType flag, so you cannot clear the PropTypeFlags_IsModifiedType flag with the SetTypeFlags method. Use this property instead to clear the PropTypeFlags_IsModifiedType flag.
  // This property is valid only for PropertyObject objects that are type definitions. Use the PropertyObject.IsTypeDefinition property to determine whether a PropertyObject is a type definition.
  //
  // PropertyObject_Set_IsModifiedTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //    - val: bool - Returns or specifies the PropTypeFlags_IsModifiedType flag on the current PropertyObject. 
  //
  // PropertyObject_Set_IsModifiedTypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PropertyObject_Get_IsModifiedTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //
  // PropertyObject_Get_IsModifiedTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns or specifies the PropTypeFlags_IsModifiedType flag on the current PropertyObject. 
  //
  rpc Set_IsModifiedType(PropertyObject_Set_IsModifiedTypeRequest) returns (PropertyObject_Set_IsModifiedTypeResponse);
  rpc Get_IsModifiedType(PropertyObject_Get_IsModifiedTypeRequest) returns (PropertyObject_Get_IsModifiedTypeResponse);
  
  
  // Property: Attributes
  //
  // Returns a container for storing data associated with the PropertyObject.
  //
  // Use container subproperties under the Attributes property to serve as attribute namespaces. National Instruments recommends that you create a uniquely named container or hierarchy of containers under which you store attribute variables, such as CompanyName.AttributeCategory.Attribute, to avoid name conflicts.
  // The name NI is reserved at the root level for National Instruments.
  // National Instruments recommends that you access this property only if the PropertyObject.HasAttributes property is True.
  // Note: The attributes for a sequence file are located on the SequenceFile.Data object instead of on the SequenceFile object directly.
  //
  // PropertyObject_Get_AttributesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //
  // PropertyObject_Get_AttributesResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Returns a container for storing data associated with the PropertyObject. 
  //
  rpc Get_Attributes(PropertyObject_Get_AttributesRequest) returns (PropertyObject_Get_AttributesResponse);
  
  
  // Property: HasAttributes
  //
  // Returns True if the PropertyObject.Attributes property contains subproperties.
  //
  // Using this property is more efficient than determining whether the PropertyObject.Attributes property contains subproperties. National Instruments recommends that you access the PropertyObject.Attributes property only if the HasAttributes property is True.
  //
  // PropertyObject_Get_HasAttributesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //
  // PropertyObject_Get_HasAttributesResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the PropertyObject.Attributes property contains subproperties. 
  //
  rpc Get_HasAttributes(PropertyObject_Get_HasAttributesRequest) returns (PropertyObject_Get_HasAttributesResponse);
  
  
  // Property: TypeAttributes
  //
  // This property is a container for storing data associated with the type definition.
  //
  // Use container subproperties under the TypeAttributes property to serve as attribute namespaces. National Instruments recommends that you create a uniquely named container or hierarchy of containers under which you store attribute variables, such as CompanyName.AttributeCategory.Attribute, to avoid name conflicts.
  // The name NI is reserved at the root level for National Instruments.
  // National Instruments recommends that you access this property only if the PropertyObject.HasTypeAttributes property is True.
  // If the object is not a type definition, the property reports an error.
  //
  // PropertyObject_Get_TypeAttributesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //
  // PropertyObject_Get_TypeAttributesResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - This property is a container for storing data associated with the type definition. 
  //
  rpc Get_TypeAttributes(PropertyObject_Get_TypeAttributesRequest) returns (PropertyObject_Get_TypeAttributesResponse);
  
  
  // Property: HasTypeAttributes
  //
  // Returns True if this object is a type definition and the PropertyObject.TypeAttributes property contains subproperties.
  //
  // Using this property is more efficient than determining whether the PropertyObject.TypeAttributes property contains subproperties. National Instruments recommends that you access the PropertyObject.TypeAttributes property only if the PropertyObject.HasTypeAttributes property is True.
  //
  // PropertyObject_Get_HasTypeAttributesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //
  // PropertyObject_Get_HasTypeAttributesResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if this object is a type definition and the PropertyObject.TypeAttributes property contains subproperties. 
  //
  rpc Get_HasTypeAttributes(PropertyObject_Get_HasTypeAttributesRequest) returns (PropertyObject_Get_HasTypeAttributesResponse);
  
  
  // Property: TypeDefinitionLocked
  //
  // Returns True if the type definition protection option is set to something other than ProtectedObjectOption_None and the locked state of the type is currently set to locked. Returns False for all other cases.
  //
  // You can call this property on any property of the type definition, not just the root object of the type.
  // Note: TestStand supports password-protecting type definitions to deter unauthorized users from editing the types in the sequence editor. However, any TestStand user can continue to programmatically edit a locked type by using the TestStand PropertyObject API. National Instruments does not recommend password-protecting types as the only way of protecting intellectual property.
  //
  // PropertyObject_Get_TypeDefinitionLockedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //
  // PropertyObject_Get_TypeDefinitionLockedResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the type definition protection option is set to something other than ProtectedObjectOption_None and the locked state of the type is currently set to locked. Returns False for all other cases. 
  //
  rpc Get_TypeDefinitionLocked(PropertyObject_Get_TypeDefinitionLockedRequest) returns (PropertyObject_Get_TypeDefinitionLockedResponse);
  
  
  // Property: Enumerators
  //
  // Returns the enumerators that a enumeration data type defines.
  //
  // Use this property on an enumeration instance or an enumeration data type to obtain the set of enumerators for the type.
  //
  // PropertyObject_Get_EnumeratorsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectInstance - The id of the PropertyObject object.
  //
  // PropertyObject_Get_EnumeratorsResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Returns the enumerators that a enumeration data type defines. 
  //
  rpc Get_Enumerators(PropertyObject_Get_EnumeratorsRequest) returns (PropertyObject_Get_EnumeratorsResponse);
  
  
}
message PropertyObjectInstance {
  // Specifies the handle of the PropertyObject instance in the server.
  string id = 1;
}

message PropertyObjectFileInstance {
  // Specifies the handle of the PropertyObjectFile instance in the server.
  string id = 1;
}

message SearchResultsInstance {
  // Specifies the handle of the SearchResults instance in the server.
  string id = 1;
}

message ReportSectionInstance {
  // Specifies the handle of the ReportSection instance in the server.
  string id = 1;
}

message PropertyObjectTypeInstance {
  // Specifies the handle of the PropertyObjectType instance in the server.
  string id = 1;
}
message PropertyObject_ClearTypeDefinitionPasswordHistoryRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
}

message PropertyObject_ClearTypeDefinitionPasswordHistoryResponse {
}

message PropertyObject_GetSubPropertiesRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetSubPropertiesResponse {
  // The return type of the PropertyObject[] object.
  repeated PropertyObjectInstance returnValue = 1;
}

message PropertyObject_GetPropertyObjectElementsRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetPropertyObjectElementsResponse {
  // The return type of the PropertyObject[] object.
  repeated PropertyObjectInstance returnValue = 1;
}

message PropertyObject_GetInternalPtrExRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  string engineId = 2;
}

message PropertyObject_GetInternalPtrExResponse {
  optional int64 returnValue = 1;
}

message PropertyObject_UpdateEnumeratorsRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // An array of containers where each container has the following properties:
  // UpdateEnumeratorsElementProperty_Name ("EnumeratorName") - Enumerator Name (string)UpdateEnumeratorsElementProperty_EnumeratorValue ("EnumeratorValue") - Enumerator Value (number)UpdateEnumeratorsElementProperty_OldName ("OldEnumeratorName") [optional] - Prior Name, if renaming (string)
  // You can specify a new value for the data type's IsStrict setting by attaching a Boolean attribute to the array with a property path of "TestStand.Enum.IsStrict".
  // You can specify a new value for the data type's IsFlags setting by attaching a Boolean attribute to the array with a property path of "TestStand.Enum.IsFlags".
  // 
  PropertyObjectInstance newValues = 2;
}

message PropertyObject_UpdateEnumeratorsResponse {
  // True if a new enumerator was added, the numeric value of an existing enumerator was changed, the value of IsStrict is changed, or the value of IsFlags is changed. False otherwise.
  bool returnValue = 1;
}

message PropertyObject_EnumIsValidRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
}

message PropertyObject_EnumIsValidResponse {
  // Returns True if the value of the enumeration is consistent with its data type.
  bool returnValue = 1;
}

message PropertyObject_GetValueDisplayNameRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Reserved for future use. Pass 0.
  PropertyOptions options = 3;
}

message PropertyObject_GetValueDisplayNameResponse {
  // Returns the display name for the value of the property. If there is no display name, a string representation of the actual value is returned.
  string returnValue = 1;
}

message PropertyObject_GetValNumberRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetValNumberResponse {
  // Numeric value of the property.
  double returnValue = 1;
}

message PropertyObject_SetValNumberRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies the new value for the property.
  double newValue = 4;
}

message PropertyObject_SetValNumberResponse {
}

message PropertyObject_GetValBooleanRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetValBooleanResponse {
  // Boolean value of the property.
  bool returnValue = 1;
}

message PropertyObject_SetValBooleanRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies the new value for the property.
  bool newValue = 4;
}

message PropertyObject_SetValBooleanResponse {
}

message PropertyObject_GetValStringRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetValStringResponse {
  // String value of the property.
  string returnValue = 1;
}

message PropertyObject_SetValStringRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies the new value for the property.
  string newValue = 4;
}

message PropertyObject_SetValStringResponse {
}

message PropertyObject_GetPropertyObjectRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetPropertyObjectResponse {
  // PropertyObject value of the property.
  PropertyObjectInstance returnValue = 1;
}

message PropertyObject_SetPropertyObjectRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies the new value for the property.
  PropertyObjectInstance newValue = 4;
}

message PropertyObject_SetPropertyObjectResponse {
}

message PropertyObject_GetValIDispatchRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetValIDispatchResponse {
  // IDispatch pointer value of the property.
  ObjectInstance returnValue = 1;
}

message PropertyObject_SetValIDispatchRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies the new value for the property.
  ObjectInstance newValue = 4;
}

message PropertyObject_SetValIDispatchResponse {
}

message PropertyObject_GetValInterfaceRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetValInterfaceResponse {
  // IUnknown pointer value of the property.
  ObjectInstance returnValue = 1;
}

message PropertyObject_SetValInterfaceRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies the new value for the property.
  ObjectInstance newValue = 4;
}

message PropertyObject_SetValInterfaceResponse {
}

message PropertyObject_GetFlagsRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetFlagsResponse {
  // Current flags of the property.
  PropertyFlags returnValue = 1;
}

message PropertyObject_SetFlagsRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies the new flags for the property.
  PropertyFlags Flags = 4;
}

message PropertyObject_SetFlagsResponse {
}

message PropertyObject_GetTypeRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetTypeResponse {
  // Type of value the property stores.
  // Note: If the property is an instance of a named type, this method does not return the  PropValType_NamedType constant and instead returns one of the other property value type constants to indicate the value type of the root property. Use the typeName parameter or the PropertyObject.GetTypeDefinition method to determine whether a property is an instance of a named type. This method returns the PropValType_Container constant for arrays. To distinguish between an array and a container, use the IsArray parameter or use the PropertyObjectType.ValueType property, which specifies the PropValType_Array constant for arrays. For arrays, use the PropertyObjectType.ElementType property to obtain the type of the array elements. Alternatively, for arrays of non-containers, you can use the PropertyObject.GetDimensions method to obtain the type of the array elements. For arrays of containers or named types, you can call the PropertyObject.GetType method on the PropertyObject that the PropertyObject.ArrayElementPrototype property returns to obtain the type of array elements.
  PropertyValueTypes returnValue = 1;
  // Returns True if the lookupString specifies a PropertyObject.
  bool IsObject = 2;
  // Returns True if the lookupString specifies an array.
  bool IsArray = 3;
  // Returns the type name if the lookupString parameter specifies an object that is an instance of a named type. Otherwise, returns an empty string.
  string typeNameParam = 4;
}

message PropertyObject_GetTypeDefinitionRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetTypeDefinitionResponse {
  // Type definition, in the form of a PropertyObject, for the property the lookupString parameter specifies. Release the PropertyObject when you no longer need it.
  PropertyObjectInstance returnValue = 1;
}

message PropertyObject_GetDimensionsRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetDimensionsResponse {
  // Returns an array index string describing the lowest valid index for each dimension. For example, a two-dimensional array with a lower bound of 0 for the first dimension and 2 for the second would have the lower bound string "[0][2]".
  string lowerBounds = 1;
  // Returns an array index string describing the highest valid index for each dimension. For example, a two-dimensional array with an upper bound of 2 for the first dimension and 4 for the second would have the upper bound string "[2][4]".
  string upperBounds = 2;
  // Returns the total number of elements stored in the array.
  int32 numElements = 3;
  // Returns the type of elements stored in the array.
  PropertyValueTypes ElementType = 4;
}

message PropertyObject_SetDimensionsRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies an array index string describing the lowest valid index for each dimension. For example, a two-dimensional array with a lower bound of 0 for the first dimension and 2 for the second has the lower bound string "[0][2]".
  string lowerBounds = 4;
  // Specifies an array index string describing the highest valid index for each dimension. For example, a two-dimensional array with an upper bound of 2 for the first dimension and 4 for the second would have the upper bound string "[2][4]".
  string upperBounds = 5;
}

message PropertyObject_SetDimensionsResponse {
}

message PropertyObject_GetArrayIndexRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  int32 arrayOffset = 4;
}

message PropertyObject_GetArrayIndexResponse {
  // An array index string. Array index strings are a list of numbers enclosed in brackets that index each dimension of the array. For example, the following is an array index for a two-dimensional array: [0][1].
  string returnValue = 1;
}

message PropertyObject_GetArrayOffsetRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies an array index string. Array index strings are a list of numbers, enclosed in brackets, that index each dimension of the array. For example, the following is an array index for a two-dimensional array: [0][1]. In addition, this method also supports indexing arrays of objects by name. For example, the following arrayIndex returns the offset of the first object in an object array with the name objectname: ["objectname"].
  string arrayIndex = 4;
}

message PropertyObject_GetArrayOffsetResponse {
  // A zero-based number that represents the offset of an array element in the one-dimensional physical storage of the array.
  int32 returnValue = 1;
}

message PropertyObject_NewSubPropertyRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass the lookup string for the new subproperty to create. If you pass a lookup string with multiple levels (such as "x.y.z"), this method creates all the necessary intermediate container objects. Refer to lookup string for more information about the strings you can use.
  string lookupString = 2;
  // Specifies the type of value you want the new subproperty to store.
  PropertyValueTypes ValueType = 3;
  // Pass True to make the new subproperty an array with elements that are of the type you specify in the ValueType parameter.
  bool asArray = 4;
  // Pass the name of an existing type if you want to create the new subproperty as an instance of a named type. Otherwise, pass an empty string. If you pass a type name, you must pass PropValType_NamedType for the ValueType parameter.
  string typeNameParam = 5;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.  You do not need to pass the InsertIfMissing option to create the new subproperty.  Pass DoNothingIfExists if you want the method to not report an error if the subproperty already exists.
  PropertyOptions options = 6;
}

message PropertyObject_NewSubPropertyResponse {
}

message PropertyObject_DeleteSubPropertyRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_DeleteSubPropertyResponse {
}

message PropertyObject_GetNumSubPropertiesRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
}

message PropertyObject_GetNumSubPropertiesResponse {
  // Number of subproperties within the property specified by lookupString.
  int32 returnValue = 1;
}

message PropertyObject_GetNthSubPropertyNameRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Specifies the zero-based index of the subproperty.
  int32 index = 3;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 4;
}

message PropertyObject_GetNthSubPropertyNameResponse {
  // Name of the subproperty the index specifies.
  string returnValue = 1;
}

message PropertyObject_SetNthSubPropertyNameRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Specifies the zero-based index of the subproperty to name.
  int32 index = 3;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 4;
  // Specifies the new name for the subproperty.
  string newValue = 5;
}

message PropertyObject_SetNthSubPropertyNameResponse {
}

message PropertyObject_ExistsRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_ExistsResponse {
  // Returns True if the property exists.
  bool returnValue = 1;
}

message PropertyObject_CloneRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_CloneResponse {
  // Copy of the property. Release the copy when you finish using it.
  PropertyObjectInstance returnValue = 1;
}

message PropertyObject_EvaluateRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies a standard TestStand expression.
  string exprString = 2;
}

message PropertyObject_EvaluateResponse {
  // The result of the expression, in the form of a PropertyObject. The PropertyObject can contain a value of any type, depending on the expression.
  PropertyObjectInstance returnValue = 1;
}

message PropertyObject_WriteRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies the pathname of the file to which to write the object data.
  string pathString = 2;
  // Specifies the name to associate with the object.
  string objectName = 3;
  // Pass 0 to specify the default behavior or pass one or more ReadWriteOptions constants. Use the bitwise-OR operator to specify multiple read/write options.
  // If you have already written an object with the specified name to the file, pass the RWOption_EraseExistingObject constant for this parameter. Otherwise, the values stored in the file do not update to the values of the object you are writing if the object you are writing has default values for some of its properties. Additionally, unless you use the RWOption_EraseExistingObject or RWOption_EraseAll constants, the method leaves properties from previously written versions of the object in the file even if the properties do not exist in the current version of the object being written.
  ReadWriteOptions RWoptions = 4;
}

message PropertyObject_WriteResponse {
}

message PropertyObject_ReadRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies the pathname of the file from which to read the object data.
  string pathString = 2;
  // Specifies the name with which the object is stored in the file.
  string objectName = 3;
  // Pass 0 to specify the default behavior, or pass one or more ReadWriteOptions constants. Use the bitwise-OR operator to specify multiple read/write options.
  ReadWriteOptions RWoptions = 4;
}

message PropertyObject_ReadResponse {
}

message PropertyObject_SerializeRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies an existing string or an empty string. The method returns a new string that contains the contents of the string passed for this parameter and the contents of the object.
  string stream = 2;
  // Specifies the name with which to store the object in the stream.
  string objectName = 3;
  // Pass 0 to specify the default behavior, or pass one or more ReadWriteOptions constants. Use the bitwise-OR operator to specify multiple read/write options.
  ReadWriteOptions RWoptions = 4;
}

message PropertyObject_SerializeResponse {
  // Specifies an existing string or an empty string. The method returns a new string that contains the contents of the string passed for this parameter and the contents of the object.
  string stream = 1;
}

message PropertyObject_UnserializeRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies an existing stream of data that stores the object.
  string stream = 2;
  // Specifies the name with which the object is stored in the stream.
  string objectName = 3;
  // Pass 0 to specify the default behavior, or pass one or more ReadWriteOptions constants. Use the bitwise-OR operator to specify multiple read write options.
  ReadWriteOptions RWoptions = 4;
}

message PropertyObject_UnserializeResponse {
}

message PropertyObject_EvaluateExRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies a standard TestStand expression.
  string exprString = 2;
  // Pass 0 to specify the default behavior, or pass one or more EvaluationOptions constants. Use the bitwise-OR operator to specify multiple options.
  EvaluationOptions EvaluationOptions = 3;
}

message PropertyObject_EvaluateExResponse {
  // The result of the expression, in the form of a PropertyObject. The PropertyObject can contain a value of any type depending on the expression. If the expression is empty and you pass the  EvalOption_AllowEmptyExpression constant, this method returns a NULL dispatch pointer or object reference.
  PropertyObjectInstance returnValue = 1;
}

message PropertyObject_ValidateNewNameRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies the new name to validate.
  string newName = 2;
  // PropertyObjects can have identical names when they are elements in an array of PropertyObjects. If the object is not an array element, pass False to this parameter.
  bool allowDuplicates = 3;
}

message PropertyObject_ValidateNewNameResponse {
  // Returns an explanation of why the name is not valid.
  string returnValue = 1;
  // Returns True if the new name is valid.
  bool isValid = 2;
}

message PropertyObject_DisplayPropertiesDialogRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box. The string can contain '%1' to be replaced with object name and '%2' to be replaced with object type name.
  string dlgTitle = 2;
  // Specifies the property object file to which the object belongs. Use the SequenceFile.AsPropertyObjectFile method to obtain a property object file from a sequence file.
  PropertyObjectFileInstance file = 3;
  // Specifies any combination of the PropertyDialogOptions constants.
  PropertyDialogOptions dlgOptions = 4;
}

message PropertyObject_DisplayPropertiesDialogResponse {
  // Returns one or more of the PropertyDialogOutputs status flags. Use the bitwise-AND operator to check for specific values.
  PropertyDialogOutputs returnValue = 1;
}

message PropertyObject_GetSubPropertyIndexRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass the name of a property within the PropertyObject that contains a subproperty. Refer to Lookup Strings for more information.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies the name of the subproperty to obtain the index for.
  string propName = 4;
}

message PropertyObject_GetSubPropertyIndexResponse {
  // The subproperty index is zero-based.
  int32 returnValue = 1;
}

message PropertyObject_SetSubPropertyIndexRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies the name of the subproperty for which to set the index.
  string propName = 4;
  // Specifies the new index for the subproperty. The value must be greater than or equal to 0 and less than the number of subproperties.
  int32 index = 5;
}

message PropertyObject_SetSubPropertyIndexResponse {
}

message PropertyObject_InsertSubPropertyRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies the index at which to insert the subproperty. This value must be greater than or equal to 0 and less than or equal to the number of subproperties.
  int32 index = 4;
  // Specifies the object to insert as a subproperty. This object must not be a subproperty of another object. Use the PropertyObject.Parent property to determine whether an object is already a subproperty.
  PropertyObjectInstance subProperty = 5;
}

message PropertyObject_InsertSubPropertyResponse {
}

message PropertyObject_GetTypeDisplayStringRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetTypeDisplayStringResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message PropertyObject_GetFormattedValueRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Specifies how the method determines which character is the localized decimal point, which it uses to localize the display value. Pass one of the following options: PropOption_DecimalPoint_UseComma, PropOption_DecimalPoint_UsePeriod, PropOption_DecimalPoint_UsePreference, or PropOption_DecimalPoint_UseSystemSetting. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies a C (printf) style format string to control the conversion. When you pass an empty string, this method uses the following default TestStand format strings based on the numeric representation of the numeric property objects:
  // * %.13g for double-precision, 64-bit floating-point values    * %d for signed 64-bit integer values    * %u for unsigned 64-bit integer values
  string formatString = 4;
  // Specifies whether the function uses the inherent format of the first argument, if the argument value has a non-default numeric display format. If you pass True and the value argument has a non-default format, the function uses the value format instead of the format you pass to parameter three.
  bool useValueFormatIfDefined = 5;
  // Specifies a string that separates each element in the concatenated string of array elements the function returns.
  string separator = 6;
}

message PropertyObject_GetFormattedValueResponse {
  // Formatted string value of the property
  string returnValue = 1;
}

message PropertyObject_GetNumElementsRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
}

message PropertyObject_GetNumElementsResponse {
  // The return type of the Int32 object.
  int32 returnValue = 1;
}

message PropertyObject_SetNumElementsRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies the new number of elements for the array.
  int32 numElements = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_SetNumElementsResponse {
}

message PropertyObject_DeleteElementsRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies the array offset of the first element to delete.
  int32 arrayOffset = 2;
  // Specifies the number of elements to delete.
  int32 numElements = 3;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 4;
}

message PropertyObject_DeleteElementsResponse {
}

message PropertyObject_GetValNumberByOffsetRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  int32 arrayOffset = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetValNumberByOffsetResponse {
  // Double-precision, 64-bit floating-point value of the array element.
  double returnValue = 1;
}

message PropertyObject_SetValNumberByOffsetRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  int32 arrayOffset = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies the new value for the array element.
  double newValue = 4;
}

message PropertyObject_SetValNumberByOffsetResponse {
}

message PropertyObject_GetValBooleanByOffsetRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies a zero-based number that represents the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  int32 arrayOffset = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetValBooleanByOffsetResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message PropertyObject_SetValBooleanByOffsetRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  int32 arrayOffset = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies the new value for the array element.
  bool newValue = 4;
}

message PropertyObject_SetValBooleanByOffsetResponse {
}

message PropertyObject_GetValStringByOffsetRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  int32 arrayOffset = 2;
  // Pass 0 to specify the default behavior, or one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetValStringByOffsetResponse {
  // String value of the array element.
  string returnValue = 1;
}

message PropertyObject_SetValStringByOffsetRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  int32 arrayOffset = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies the new value for the array element.
  string newValue = 4;
}

message PropertyObject_SetValStringByOffsetResponse {
}

message PropertyObject_GetPropertyObjectByOffsetRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  int32 arrayOffset = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetPropertyObjectByOffsetResponse {
  // PropertyObject value of the array element.
  PropertyObjectInstance returnValue = 1;
}

message PropertyObject_SetPropertyObjectByOffsetRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  int32 arrayOffset = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies the new value for the array element.
  PropertyObjectInstance newValue = 4;
}

message PropertyObject_SetPropertyObjectByOffsetResponse {
}

message PropertyObject_GetValIDispatchByOffsetRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  int32 arrayOffset = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetValIDispatchByOffsetResponse {
  // IDispatch pointer value of the array element.
  ObjectInstance returnValue = 1;
}

message PropertyObject_SetValIDispatchByOffsetRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  int32 arrayOffset = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies the new value for the array element.
  ObjectInstance newValue = 4;
}

message PropertyObject_SetValIDispatchByOffsetResponse {
}

message PropertyObject_GetValInterfaceByOffsetRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  int32 arrayOffset = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetValInterfaceByOffsetResponse {
  // IUnknown pointer value of the array element.
  ObjectInstance returnValue = 1;
}

message PropertyObject_SetValInterfaceByOffsetRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  int32 arrayOffset = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies the new value for the array element.
  ObjectInstance newValue = 4;
}

message PropertyObject_SetValInterfaceByOffsetResponse {
}

message PropertyObject_GetStructureChangeCountRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetStructureChangeCountResponse {
  // Number of structural changes to the object.
  int32 returnValue = 1;
}

message PropertyObject_GetInstanceDefaultFlagsRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetInstanceDefaultFlagsResponse {
  // Default flags of the type.
  PropertyFlags returnValue = 1;
}

message PropertyObject_SetInstanceDefaultFlagsRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies the default flags of the type.
  PropertyFlags Flags = 4;
}

message PropertyObject_SetInstanceDefaultFlagsResponse {
}

message PropertyObject_ContainsTypeInstanceRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies the name of the root type.
  string typeNameParam = 4;
}

message PropertyObject_ContainsTypeInstanceResponse {
  // Returns True if the property object or any of the subproperties are instances of the specified root type.
  bool returnValue = 1;
}

message PropertyObject_IsEqualToRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies the object to compare to this object.
  PropertyObjectInstance objectToCompare = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  // You typically use the PropOption_CaseInsensitive, PropOption_DoNotRecurse, and PropOption_RequireIdenticalStructure options with this method.
  PropertyOptions options = 3;
}

message PropertyObject_IsEqualToResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message PropertyObject_IsAliasObjectRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_IsAliasObjectResponse {
  // Returns True if the property is an alias.
  bool returnValue = 1;
}

message PropertyObject_GetLocationRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies the object that contains this object.
  PropertyObjectInstance topObject = 2;
}

message PropertyObject_GetLocationResponse {
  // Returns the lookup string.
  string returnValue = 1;
}

message PropertyObject_DisplayFlagsDialogRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies any combination of the PropertyDialogOptions constants.
  PropertyDialogOptions dlgOptions = 3;
}

message PropertyObject_DisplayFlagsDialogResponse {
  // Returns one or more of the PropertyDialogOutputs status flags. Use the bitwise-AND operator to check for specific values.
  int32 returnValue = 1;
}

message PropertyObject_DisplayArrayBoundsDialogRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies any combination of the ArrayBoundsDialogOptions constants.
  ArrayBoundsDialogOptions dlgOptions = 3;
}

message PropertyObject_DisplayArrayBoundsDialogResponse {
  // Returns True if you make modifications and click OK in the dialog box. Returns False if you click Cancel or make no modifications.
  bool returnValue = 1;
}

message PropertyObject_ReadExRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies the pathname of the file from which to read the object data.
  string pathString = 2;
  // Specifies the name with which the object is stored in the file.
  string objectName = 3;
  // Pass 0 to specify the default behavior, or pass one or more ReadWriteOptions constants. Use the bitwise-OR operator to specify multiple read/write options.
  ReadWriteOptions RWoptions = 4;
  // Specifies how to handle type conflicts in the file.
  TypeConflictHandlerTypes handlerType = 5;
}

message PropertyObject_ReadExResponse {
}

message PropertyObject_UnserializeExRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies an existing stream of data that stores the object.
  string stream = 2;
  // Specifies the name with which the object is stored in the stream.
  string objectName = 3;
  // Pass 0 to specify the default behavior, or pass one or more ReadWriteOptions constants. Use the bitwise-OR operator to specify multiple read/write options.
  ReadWriteOptions RWoptions = 4;
  // Specifies how to handle type conflicts in the stream.
  TypeConflictHandlerTypes handlerType = 5;
}

message PropertyObject_UnserializeExResponse {
}

message PropertyObject_GetTypeFlagsRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetTypeFlagsResponse {
  // Current type flags of the property.
  PropertyObjTypeFlags returnValue = 1;
}

message PropertyObject_SetTypeFlagsRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies the new type flags for the property.
  PropertyObjTypeFlags Flags = 4;
}

message PropertyObject_SetTypeFlagsResponse {
}

message PropertyObject_GetInstanceOverrideFlagsRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetInstanceOverrideFlagsResponse {
  // Instance override flags of the type.
  PropertyFlags returnValue = 1;
}

message PropertyObject_SetInstanceOverrideFlagsRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies the default flags of the type.
  PropertyFlags Flags = 4;
}

message PropertyObject_SetInstanceOverrideFlagsResponse {
}

message PropertyObject_ValidateNewSubPropertyNameRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies the new name to validate.
  string newName = 2;
  // Typically, you pass False to this parameter because subproperties cannot have identical names.
  bool allowDuplicates = 3;
}

message PropertyObject_ValidateNewSubPropertyNameResponse {
  // Returns an explanation of why the name is not valid.
  string returnValue = 1;
  // Returns True if the new name is valid.
  bool isValid = 2;
}

message PropertyObject_ValidateNewElementNameRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies the new name to validate.
  string newName = 2;
  // In addition to validating the name, also checks if the name is already in use. Typically, you pass True to this parameter because array elements are allowed to have duplicate names.
  bool allowDuplicates = 3;
}

message PropertyObject_ValidateNewElementNameResponse {
  // Returns an explanation of why the name is not valid.
  string returnValue = 1;
  // Returns True if the new name is valid.
  bool isValid = 2;
}

message PropertyObject_GetInternalPtrRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  string engineId = 2;
}

message PropertyObject_GetInternalPtrResponse {
  int32 returnValue = 1;
}

message PropertyObject_GetXMLRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Use this parameter to control the XML generation. You can use any combination of the flags found in XMLOptions.
  XMLOptions GenerationOptions = 2;
  // Specifies the number of tab characters in front of each line of generated XML source.
  int32 InitialIndentation = 3;
  // Specifies a default name when you call this method on an object that has no name.
  // Pass an empty string if you want to use the name of the PropertyObject on which this method was called. This applies only to the root PropertyObject and not subproperties.
  string DefaultName = 4;
  // Use this parameter to control the format of numeric values in the resulting XML. When you pass an empty string, this method uses the following default TestStand format strings based on the numeric representation of the numeric property objects:
  // * %.16g for double-precision, 64-bit floating-point values    * %d for signed 64-bit integer values    * %u for unsigned 64-bit integer valuesNote: TestStand ignores format strings of the %g type when the representation is signed 64-bit integer or unsigned 64-bit integer.
  // If you use the XMLOption_UseValueFormatIfDefined flag to format numeric values, the XML instead uses the numeric format of the number, if specified.
  string formatString = 5;
}

message PropertyObject_GetXMLResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message PropertyObject_SearchRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies a lookup string that indicates the location of the subproperty of the PropertyObject on which to begin the search. If a match is found, the location of the match in the SearchMatch object is relative to the original PropertyObject, not the subproperty. You can pass an empty string for this parameter to begin the search at the root-level of the PropertyObject.
  string lookupString = 2;
  // Specifies the string or regular expression for which to search. To use regular expressions, you must pass the option SearchOptions_RegExpr for the searchOptions parameter of this method.
  string searchString = 3;
  // Specifies one or more SearchOptions constants. Use the bitwise-OR operator to specify multiple search options. The search option SearchOptions_IncludeSubsequenceFiles does not apply to this method.
  SearchOptions SearchOptions = 4;
  // Specifies one or more SearchFilterOptions constants. Use the bitwise-OR operator to specify multiple search filter options. Only the following filter options apply to this method: SearchFilterOptions_CustomStepProps, SearchFilterOptions_BuiltinStepProps, and SearchFilterOptions_ModuleStepProps.
  SearchFilterOptions filterOptions = 5;
  // Specifies one or more SearchElements constants. Use the bitwise-OR operator to specify multiple elements to search.
  SearchElements elementsToSearch = 6;
  // Specifies an array of AdapterKeyNames constants to indicate the steps of which adapters to search. Pass an empty array or NULL to search steps that use any adapter.
  repeated string limitToAdapters = 7;
  // Specifies an array of property names under which to limit the search. Pass an empty array or NULL to search all properties. If you specify names of properties to which to limit the search, TestStand searches only those properties with the names you specify and all their subproperties.
  repeated string limitToNamedProps = 8;
  // Specifies an array of type names to which to limit the search. Pass an empty array or NULL to search instances of all types. Use this parameter to limit the search instances of all types. Use this parameter to limit the search to instances of the types you specify.
  repeated string limitToPropsOfNamedTypes = 9;
  // Specifies an array of lookup strings that indicate which subproperties to exclude from the search. Pass an empty array or NULL if you do not want to exclude any properties. You can pass a lookup string with the wildcard character (*) in place of any property name to indicate that all properties match that part of the lookup string. You can also use the wildcard character to match any element of an array by specifying the wildcard character (*) for the array element index. For example, if the property object you search is an array of steps, you can specify the lookup string "[*].Result" to exclude the Result property of all steps in the array.
  // Note: When you exclude a subproperty, you also exclude all the subproperties the subproperty contains.
  repeated string subpropLookupStringsToExclude = 10;
}

message PropertyObject_SearchResponse {
  // A SearchResult object.
  SearchResultsInstance returnValue = 1;
}

message PropertyObject_GetDisplayNamesRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Reserved for future use. Pass 0.
  PropertyOptions options = 3;
}

message PropertyObject_GetDisplayNamesResponse {
  // Returns the display name of the property. If there is no display name, the name of the property is returned.
  string propDisplayName = 1;
  // Returns the display name for the value of the property. If there is no display name, a string representation of the actual value is returned.
  string valueDisplayName = 2;
}

message PropertyObject_SetXMLRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies an XML stream.
  string xmlStream = 2;
  // Pass 0.
  int32 reserved1 = 3;
  // This parameter is reserved for when the PropertyObject.GetXML method supports storing type information in an XML stream. This parameter specifies how to handle type conflicts in the stream.
  TypeConflictHandlerTypes reserved2 = 4;
}

message PropertyObject_SetXMLResponse {
}

message PropertyObject_GetValBinaryRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetValBinaryResponse {
  // Returns an array of bytes that contains the binary data the string property stores.
  bytes returnValue = 1;
}

message PropertyObject_SetValBinaryRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies the array of bytes to store in the string property.
  bytes newValue = 4;
}

message PropertyObject_SetValBinaryResponse {
}

message PropertyObject_GetNthSubPropertyRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Specifies the zero-based index of the subproperty.
  int32 index = 3;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 4;
}

message PropertyObject_GetNthSubPropertyResponse {
  // Name of the subproperty the index specifies.
  PropertyObjectInstance returnValue = 1;
}

message PropertyObject_DeleteNthSubPropertyRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Specifies the zero-based index of the subproperty. Pass -1 to delete all subproperties. If you pass -1, subproperties that cannot be deleted do not generate an error.
  int32 index = 3;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 4;
}

message PropertyObject_DeleteNthSubPropertyResponse {
}

message PropertyObject_DisplayAttributesDialogRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies the file to which the object belongs.
  PropertyObjectFileInstance file = 3;
  // Specifies any combination of the CommonDialogOptions constants.
  CommonDialogOptions dlgOptions = 4;
}

message PropertyObject_DisplayAttributesDialogResponse {
  // Returns True if you make modifications and click OK in the dialog box. Returns False if you click Cancel or make no modifications.
  bool returnValue = 1;
}

message PropertyObject_CreateReportSectionRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Use this parameter to control the XML generation. You can use any combination of the flags in the XMLOptions constants.
  XMLOptions GenerationOptions = 2;
  // Specifies the number of tab characters in front of each line of generated XML source.
  int32 InitialIndentation = 3;
  // Specifies a default name when you call this method on a nameless object.
  // Pass an empty string if you want to use the name of the PropertyObject on which this method was called. This applies only to the root PropertyObject and not subproperties.
  string DefaultName = 4;
  // Use this parameter to control the format of numeric values in the resulting XML. When you pass an empty string, this method uses the following default TestStand format strings based on the numeric representation of the numeric property objects:
  // * %.16g for double-precision, 64-bit floating-point values    * %d for signed 64-bit integer values    * %u for unsigned 64-bit integer valuesNote: TestStand ignores format strings of the %g type when the representation is signed 64-bit integer or unsigned 64-bit integer.
  string formatString = 5;
  // Specifies the format of the generated serialization. This method supports values of XML, XML-OTF, or an empty string, which is the default value. Values are not case-sensitive.
  // When you specify the XML value or an empty string, this method returns a ReportSection object that contains an XML representation of the PropertyObject object. Call the ReportSection.GetAllText method to retrieve the XML content, which might be spread across the ReportSection Header, Body, Footer, and ReportSubsections properties.
  // National Instruments recommends that you do not use the XML-OTF option unless you are modifying National Instruments code that depends on it or you are implementing a custom on-the-fly XML report generator.  Although the ReportSection objects the XML-OTF option returns contain equivalent data as the ReportSection objects the XML option returns, the XML-OTF option output differs from the standard XML in the following ways:
  // * The XML-OTF output never contains any data in the ReportSection.Body property.    * Except as explained below, the XML-OTF output writes data to the ReportSection.Header property.    * The XML-OTF output inserts data for each TS.SequenceCall and TS.PostAction subproperty of the PropertyObject into its own ReportSection object that the ReportSection.ReportSubsections property contains. Each subsection includes the following data:@ul(@bullet(The Header property contains the first line of XML content.)@bullet(The Footer property contains all remaining XML content.)@bullet(Additional TS.SequenceCall and TS.PostAction properties within the subsection receive no special processing and are included in the Footer property just like any other TestStand property.))    * After the XML-OTF output processes a TS.SequenceCall or TS.PostAction property, the XML-OTF output inserts all remaining data of other types in the Footer property of the returned ReportSection object. The XML-OTF output inserts additional TS.SequenceCall and TS.PostAction properties in new subsections, as described above.
  // Because the XML-OTF output handles the TS.SequenceCall and TS.PostAction properties in a special way, the order of subproperties in the XML content the ReportSection.GetAllText method returns might not be identical in the two cases.
  string Format = 6;
}

message PropertyObject_CreateReportSectionResponse {
  // The return type of the ReportSection object.
  ReportSectionInstance returnValue = 1;
}

message PropertyObject_GetValInteger64Request {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetValInteger64Response {
  // Signed 64-bit integer value of the property.
  int64 returnValue = 1;
}

message PropertyObject_SetValInteger64Request {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies the new value for the property.
  int64 newValue = 4;
}

message PropertyObject_SetValInteger64Response {
}

message PropertyObject_GetValInteger64ByOffsetRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  int32 arrayOffset = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetValInteger64ByOffsetResponse {
  // Signed 64-bit integer value of the array element.
  int64 returnValue = 1;
}

message PropertyObject_SetValInteger64ByOffsetRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  int32 arrayOffset = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies the new value for the array element.
  int64 newValue = 4;
}

message PropertyObject_SetValInteger64ByOffsetResponse {
}

message PropertyObject_GetValUnsignedInteger64Request {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetValUnsignedInteger64Response {
  // Unsigned 64-bit Integer value of the property.
  uint64 returnValue = 1;
}

message PropertyObject_SetValUnsignedInteger64Request {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Pass an empty string to denote the PropertyObject to which the method applies, or pass the name of a subproperty within the PropertyObject. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies the new value for the property.
  uint64 newValue = 4;
}

message PropertyObject_SetValUnsignedInteger64Response {
}

message PropertyObject_GetValUnsignedInteger64ByOffsetRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  int32 arrayOffset = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
}

message PropertyObject_GetValUnsignedInteger64ByOffsetResponse {
  // Unsigned 64-bit integer value of the array element.
  uint64 returnValue = 1;
}

message PropertyObject_SetValUnsignedInteger64ByOffsetRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.
  int32 arrayOffset = 2;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 3;
  // Specifies the new value for the array element.
  uint64 newValue = 4;
}

message PropertyObject_SetValUnsignedInteger64ByOffsetResponse {
}

message PropertyObject_DisplayEditNumericFormatDialogRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies any combination of the EditNumericFormatOptions constants.
  EditNumericFormatOptions dlgOptions = 3;
}

message PropertyObject_DisplayEditNumericFormatDialogResponse {
  // Returns True if you click OK in the dialog box. Returns False if you click Cancel.
  bool returnValue = 1;
  // Returns True if the returned format is valid, otherwise returns False.
  // 
  bool validFormat = 2;
}

message PropertyObject_InsertElementsRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies the array offset of the first element to insert.
  int32 arrayOffset = 2;
  // Specifies the number of elements to insert.
  int32 numElements = 3;
  // Pass 0 to specify the default behavior or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 4;
}

message PropertyObject_InsertElementsResponse {
}

message PropertyObject_GetTypeDefinitionProtectionRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
}

message PropertyObject_GetTypeDefinitionProtectionResponse {
  // The return type of the Int32 object.
  ProtectedObjectOptions returnValue = 1;
}

message PropertyObject_SetTypeDefinitionProtectionRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies one of the supported ProtectedObjectOptions. For type locking, this method supports only ProtectedObjectOption_None and ProtectedObjectOption_NotEditable.
  ProtectedObjectOptions newValue = 2;
  // Specifies the password you require to unlock the type. This password can be empty only if the value for  the newValue parameter is ProtectedObjectOption_None. TestStand uses this password and the password history of a type during type conflict resolution to determine whether a newer version of the type can replace an older version without requiring the password for the older version.
  optional string passwordString = 3;
}

message PropertyObject_SetTypeDefinitionProtectionResponse {
}

message PropertyObject_LockTypeDefinitionRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
}

message PropertyObject_LockTypeDefinitionResponse {
}

message PropertyObject_UnlockTypeDefinitionRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies the password required to unlock the type.
  string passwordString = 2;
}

message PropertyObject_UnlockTypeDefinitionResponse {
}

message PropertyObject_Set_NameRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies the name of the PropertyObject.
  string val = 2;
}

message PropertyObject_Set_NameResponse {
}

message PropertyObject_Get_NameRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
}

message PropertyObject_Get_NameResponse {
  // Specifies the name of the PropertyObject.
  string returnValue = 1;
}

message PropertyObject_Set_CommentRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies the comment string associated with the property object.
  string val = 2;
}

message PropertyObject_Set_CommentResponse {
}

message PropertyObject_Get_CommentRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
}

message PropertyObject_Get_CommentResponse {
  // Specifies the comment string associated with the property object.
  string returnValue = 1;
}

message PropertyObject_Get_ParentRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
}

message PropertyObject_Get_ParentResponse {
  // The object that owns this object. Returns NULL if none.
  PropertyObjectInstance returnValue = 1;
}

message PropertyObject_Get_IsRootTypeDefinitionRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
}

message PropertyObject_Get_IsRootTypeDefinitionResponse {
  // Returns a value that indicates whether the object is a root type definition.
  bool returnValue = 1;
}

message PropertyObject_Get_CanAddSubPropertyRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
}

message PropertyObject_Get_CanAddSubPropertyResponse {
  // Returns a value that indicates whether you can add subproperties to this object.
  bool returnValue = 1;
}

message PropertyObject_Get_IsTypeDefinitionRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
}

message PropertyObject_Get_IsTypeDefinitionResponse {
  // Returns a value that indicates whether the object is a type definition.
  bool returnValue = 1;
}

message PropertyObject_Get_TypeCategoryRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
}

message PropertyObject_Get_TypeCategoryResponse {
  // Returns the type category to which the type definition belongs.
  TypeCategories returnValue = 1;
}

message PropertyObject_Set_TypeVersionRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies the version of the PropertyObject object if it is a root type definition.
  string val = 2;
}

message PropertyObject_Set_TypeVersionResponse {
}

message PropertyObject_Get_TypeVersionRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
}

message PropertyObject_Get_TypeVersionResponse {
  // Specifies the version of the PropertyObject object if it is a root type definition.
  string returnValue = 1;
}

message PropertyObject_Set_NumericFormatRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies a numeric format string TestStand uses to format a numeric value or values in a numeric array when you call the PropertyObject.GetFormattedValue method.
  string val = 2;
}

message PropertyObject_Set_NumericFormatResponse {
}

message PropertyObject_Get_NumericFormatRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
}

message PropertyObject_Get_NumericFormatResponse {
  // Specifies a numeric format string TestStand uses to format a numeric value or values in a numeric array when you call the PropertyObject.GetFormattedValue method.
  string returnValue = 1;
}

message PropertyObject_Set_ArrayElementPrototypeRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies the prototype for elements of the array.
  PropertyObjectInstance val = 2;
}

message PropertyObject_Set_ArrayElementPrototypeResponse {
}

message PropertyObject_Get_ArrayElementPrototypeRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
}

message PropertyObject_Get_ArrayElementPrototypeResponse {
  // Specifies the prototype for elements of the array.
  PropertyObjectInstance returnValue = 1;
}

message PropertyObject_Get_TypeLastModifiedRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
}

message PropertyObject_Get_TypeLastModifiedResponse {
  // Returns the full version of the TestStand Engine as a string that last modified the type.
  string returnValue = 1;
}

message PropertyObject_Set_TypeMinimumTestStandVersionRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Specifies the earliest version of TestStand that can use a type.
  string val = 2;
}

message PropertyObject_Set_TypeMinimumTestStandVersionResponse {
}

message PropertyObject_Get_TypeMinimumTestStandVersionRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
}

message PropertyObject_Get_TypeMinimumTestStandVersionResponse {
  // Specifies the earliest version of TestStand that can use a type.
  string returnValue = 1;
}

message PropertyObject_Get_TypeRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
}

message PropertyObject_Get_TypeResponse {
  // Returns an object that provides type information about the PropertyObject.
  PropertyObjectTypeInstance returnValue = 1;
}

message PropertyObject_Set_IsModifiedTypeRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
  // Returns or specifies the PropTypeFlags_IsModifiedType flag on the current PropertyObject.
  bool val = 2;
}

message PropertyObject_Set_IsModifiedTypeResponse {
}

message PropertyObject_Get_IsModifiedTypeRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
}

message PropertyObject_Get_IsModifiedTypeResponse {
  // Returns or specifies the PropTypeFlags_IsModifiedType flag on the current PropertyObject.
  bool returnValue = 1;
}

message PropertyObject_Get_AttributesRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
}

message PropertyObject_Get_AttributesResponse {
  // Returns a container for storing data associated with the PropertyObject.
  PropertyObjectInstance returnValue = 1;
}

message PropertyObject_Get_HasAttributesRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
}

message PropertyObject_Get_HasAttributesResponse {
  // Returns True if the PropertyObject.Attributes property contains subproperties.
  bool returnValue = 1;
}

message PropertyObject_Get_TypeAttributesRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
}

message PropertyObject_Get_TypeAttributesResponse {
  // This property is a container for storing data associated with the type definition.
  PropertyObjectInstance returnValue = 1;
}

message PropertyObject_Get_HasTypeAttributesRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
}

message PropertyObject_Get_HasTypeAttributesResponse {
  // Returns True if this object is a type definition and the PropertyObject.TypeAttributes property contains subproperties.
  bool returnValue = 1;
}

message PropertyObject_Get_TypeDefinitionLockedRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
}

message PropertyObject_Get_TypeDefinitionLockedResponse {
  // Returns True if the type definition protection option is set to something other than ProtectedObjectOption_None and the locked state of the type is currently set to locked. Returns False for all other cases.
  bool returnValue = 1;
}

message PropertyObject_Get_EnumeratorsRequest {
  // The id of the PropertyObject object.
  PropertyObjectInstance instance = 1;
}

message PropertyObject_Get_EnumeratorsResponse {
  // Returns an array of enumeration instances. Each element indicates the name and value of an enumerator that the data type defines. The array also has the following Boolean attributes:
  // TestStand.Enum.IsStrict: Indicates whether the enumeration data type is strict.
  // TestStand.Enum.IsFlags: Indicates whether the enumerators the data type defines are flags.
  PropertyObjectInstance returnValue = 1;
}

// PropertyObjectFile
//
// Use the PropertyObjectFile class to read and write PropertyObjects to disk. All TestStand files, including sequence files, type palette files, workspace files, configuration files, users file, and globals file, are stored as PropertyObjectFiles. Create new PropertyObjectFiles with the Engine.NewPropertyObjectFile method.
//
service PropertyObjectFile {
  // Method: IncChangeCount
  //
  // Increments the file change count.
  //
  // Increment the change count when making changes to the file to indicate to the sequence editor or user interface that the file was modified.
  // Calling this method has the same effect as calling the SequenceFile.IncChangeCount method.
  //
  // PropertyObjectFile_IncChangeCountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //
  // PropertyObjectFile_IncChangeCountResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc IncChangeCount(PropertyObjectFile_IncChangeCountRequest) returns (PropertyObjectFile_IncChangeCountResponse);
  
  
  // Method: ReadFile
  //
  // Reads the contents of the file from disk.
  //
  // The PropertyObjectFile.Path property determines the pathname of the file to read.
  //
  // PropertyObjectFile_ReadFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //    - handlerType: TypeConflictHandlerTypes - Specifies how to handle type conflicts in the file.
  //
  // PropertyObjectFile_ReadFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the file is read successfully. Returns False if the file has type conflicts and the user cancelled the operation. 
  //
  rpc ReadFile(PropertyObjectFile_ReadFileRequest) returns (PropertyObjectFile_ReadFileResponse);
  
  
  // Method: WriteFile
  //
  // Writes the contents of the file to disk.
  //
  // The PropertyObjectFile.Path property determines the pathname of the file to write.
  //
  // PropertyObjectFile_WriteFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //    - writeFormat: WriteFileFormat - Specifies the file format version TestStand uses to write the file.
  //
  // PropertyObjectFile_WriteFileResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc WriteFile(PropertyObjectFile_WriteFileRequest) returns (PropertyObjectFile_WriteFileResponse);
  
  
  // Method: AsPropertyObject
  //
  // Returns the underlying PropertyObject that represents the PropertyObjectFile object. Use the PropertyObject to modify, add, or remove custom properties of the object.
  //
  // PropertyObjectFile_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //
  // PropertyObjectFile_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(PropertyObjectFile_AsPropertyObjectRequest) returns (PropertyObjectFile_AsPropertyObjectResponse);
  
  
  // Method: HandleTypeConflicts
  //
  // Detects and resolves type conflicts that occur after loading a file.
  //
  // Typically, the PropertyObjectFile.ReadFile method handles type conflicts.
  // The engine loads the Engine.UsersFile, Engine.GlobalsFile and Engine.ConfigFile at startup, but does not resolve type conflicts in those files. Therefore, the sequence editor uses this method to resolve type conflicts in those files after it creates the Engine object.
  //
  // PropertyObjectFile_HandleTypeConflictsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //    - handlerType: TypeConflictHandlerTypes - Specifies how type conflicts are handled.
  //
  // PropertyObjectFile_HandleTypeConflictsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if types were resolved successfully. 
  //
  rpc HandleTypeConflicts(PropertyObjectFile_HandleTypeConflictsRequest) returns (PropertyObjectFile_HandleTypeConflictsResponse);
  
  
  // Method: SaveFileIfModified
  //
  // Writes the contents of the file to disk if the file has been modified.
  //
  // This method does nothing if the file has not been modified.  If the file has been modified, it prompts the user with an option to save, then writes the file. The PropertyObjectFile.Path property determines the pathname of the file to write.
  // Note: If you call this method multiple times and do not save the file or further modify it, the method prompts only once. Unlike the PropertyObjectFile.WriteFile method, if an error occurs while saving the file, the method displays the error and does not throw an exception.
  //
  // PropertyObjectFile_SaveFileIfModifiedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //    - prompt: bool - If this parameter is True and if the file has been modified, a dialog box opens and asks the user whether to save the file.
  //
  // PropertyObjectFile_SaveFileIfModifiedResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns False only if the user clicked Cancel in the Prompt dialog box. 
  //
  rpc SaveFileIfModified(PropertyObjectFile_SaveFileIfModifiedRequest) returns (PropertyObjectFile_SaveFileIfModifiedResponse);
  
  
  // Method: CheckForModifiedTypes
  //
  // Determines if the PropTypeFlags_IsModifiedType flag is set for any types used within the file.
  //
  // If a modified type is found, the options parameter determines the specific action to take. If you pass CheckForModifiedTypes_Prompt to the options parameter, this method launches a warning dialog box in which you can specify the action, if any, that TestStand takes. The sequence editor calls this method before calling the PropertyObjectFile.WriteFile method to save a sequence file.
  //
  // PropertyObjectFile_CheckForModifiedTypesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - okButtonText: string - Pass a string to display text on the OK button or pass an empty string to use the default text.
  //    - options: int32 - Specifies whether the method launches a warning dialog box if a modified type is found, or whether the method performs a specific action if a modified type is found. Pass one of CheckForModifiedTypesOptions constants to this method.
  //    - versionIncOption: TypeVersionAutoIncrement - Specifies which version number to increment when you pass CheckForModifiedTypes_AutoIncrementVersions to the options parameter.
  //
  // PropertyObjectFile_CheckForModifiedTypesResponse - The response message from the server. It provides the output parameters.
  //    - operationCanceled: boo - Returns True if a user clicks Cancel.
  //    - foundModifiedTypes: boo - Returns True if modified types were found in the file.
  //
  rpc CheckForModifiedTypes(PropertyObjectFile_CheckForModifiedTypesRequest) returns (PropertyObjectFile_CheckForModifiedTypesResponse);
  
  
  // Method: Lock
  //
  // Locks the file. The PropertyObjectFile.Protection property specifies the type of protection for the lock. After reading a protected file, TestStand automatically locks the file. Use the PropertyObjectFile.Unlock method to unlock the file.
  //
  // This method applies only to sequence files. Using this method on other files causes an error. Locking a file causes an error when the PropertyObjectFile.Protection property is set to ProtectedObjectOption_None.
  // Note: TestStand supports password protecting sequence files to discourage editing and viewing within the sequence editor and user interfaces that use the TestStand User Interface (UI) Controls. The TestStand API limits access to a file protected from viewing but cannot prevent access to the file content during execution. National Instruments does not recommend using passwords as the only way of protecting intellectual property.
  //
  // PropertyObjectFile_LockRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //    - passwordString: ObjectInstance - Specifies the password for the lock operation. If no passwordString parameter is specified, the previous password is used. If no previous password was specified, the password is an empty string.
  //
  // PropertyObjectFile_LockResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Lock(PropertyObjectFile_LockRequest) returns (PropertyObjectFile_LockResponse);
  
  
  // Method: Unlock
  //
  // Unlocks the file. The PropertyObjectFile.Protection property specifies the type of protection for the lock. Use the PropertyObjectFile.Lock method to lock the file.
  //
  // This method applies only to sequence files. Using this method on other files causes an error.
  // Note: TestStand supports password protecting sequence files to discourage editing and viewing within the sequence editor and user interfaces that use the TestStand User Interface (UI) Controls. The TestStand API limits access to a file protected from viewing but cannot prevent access to the file content during execution. National Instruments does not recommend using passwords as the only way of protecting intellectual property.
  //
  // PropertyObjectFile_UnlockRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //    - passwordString: string - Specifies the password for the unlock operation.
  //
  // PropertyObjectFile_UnlockResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Unlock(PropertyObjectFile_UnlockRequest) returns (PropertyObjectFile_UnlockResponse);
  
  

  // Property: TypeUsageList
  //
  // Returns the TypeUsageList associated with the file.
  //
  // PropertyObjectFile_Get_TypeUsageListRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //
  // PropertyObjectFile_Get_TypeUsageListResponse - The response message from the server. It provides the return value.
  //    - returnValue: TypeUsageListInstance - Returns the TypeUsageList associated with the file. 
  //
  rpc Get_TypeUsageList(PropertyObjectFile_Get_TypeUsageListRequest) returns (PropertyObjectFile_Get_TypeUsageListResponse);
  
  
  // Property: IsModified
  //
  // Returns a value that indicates whether the file has been modified since it was last written to disk.
  //
  // This property returns True if the change count has increased since the last time the file was written to disk.
  // After reading a file, TestStand might perform automatic type conversions and modify the file.  For these files, this property returns True after the file is read from disk. The PropertyObjectFile.IsModifiedByUser property only returns True if the file is modified and TestStand did not perform all the modifications.
  //
  // PropertyObjectFile_Get_IsModifiedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //
  // PropertyObjectFile_Get_IsModifiedResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the file has been modified since it was last written to disk. 
  //
  rpc Get_IsModified(PropertyObjectFile_Get_IsModifiedRequest) returns (PropertyObjectFile_Get_IsModifiedResponse);
  
  
  // Property: ChangeCount
  //
  // Specifies the number of modifications that have been made to the file since it was loaded into memory.
  //
  // The sequence editor and user interfaces use this count to determine when to refresh displays and when to indicate to the user that a file has been modified.
  //
  // PropertyObjectFile_Set_ChangeCountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //    - val: int32 - Specifies the number of modifications that have been made to the file since it was loaded into memory. 
  //
  // PropertyObjectFile_Set_ChangeCountResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PropertyObjectFile_Get_ChangeCountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //
  // PropertyObjectFile_Get_ChangeCountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the number of modifications that have been made to the file since it was loaded into memory. 
  //
  rpc Set_ChangeCount(PropertyObjectFile_Set_ChangeCountRequest) returns (PropertyObjectFile_Set_ChangeCountResponse);
  rpc Get_ChangeCount(PropertyObjectFile_Get_ChangeCountRequest) returns (PropertyObjectFile_Get_ChangeCountResponse);
  
  
  // Property: Path
  //
  // Specifies the pathname of the file.
  //
  // PropertyObjectFile_Set_PathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //    - val: string - Specifies the pathname of the file. 
  //
  // PropertyObjectFile_Set_PathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PropertyObjectFile_Get_PathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //
  // PropertyObjectFile_Get_PathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the pathname of the file. 
  //
  rpc Set_Path(PropertyObjectFile_Set_PathRequest) returns (PropertyObjectFile_Set_PathResponse);
  rpc Get_Path(PropertyObjectFile_Get_PathRequest) returns (PropertyObjectFile_Get_PathResponse);
  
  
  // Property: DisplayName
  //
  // Specifies the name to display for the file.
  //
  // This property returns the filename portion of the pathname value of the PropertyObjectFile.Path property unless you set it to a different value.
  //
  // PropertyObjectFile_Set_DisplayNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //    - val: string - Specifies the name to display for the file. 
  //
  // PropertyObjectFile_Set_DisplayNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PropertyObjectFile_Get_DisplayNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //
  // PropertyObjectFile_Get_DisplayNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the name to display for the file. 
  //
  rpc Set_DisplayName(PropertyObjectFile_Set_DisplayNameRequest) returns (PropertyObjectFile_Set_DisplayNameResponse);
  rpc Get_DisplayName(PropertyObjectFile_Get_DisplayNameRequest) returns (PropertyObjectFile_Get_DisplayNameResponse);
  
  
  // Property: Data
  //
  // Specifies the data object stored in the file.
  //
  // This PropertyObject contains all the data in the file.
  //
  // PropertyObjectFile_Set_DataRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //    - val: PropertyObjectInstance - Specifies the data object stored in the file. 
  //
  // PropertyObjectFile_Set_DataResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PropertyObjectFile_Get_DataRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //
  // PropertyObjectFile_Get_DataResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Specifies the data object stored in the file. 
  //
  rpc Set_Data(PropertyObjectFile_Set_DataRequest) returns (PropertyObjectFile_Set_DataResponse);
  rpc Get_Data(PropertyObjectFile_Get_DataRequest) returns (PropertyObjectFile_Get_DataResponse);
  
  
  // Property: ContentType
  //
  // Specifies the type of file content.
  //
  // This property is set by the TestStand engine when creating and reading property object files. You should not change this property for predefined types of property object files, such as sequence files, workspace files, project files, type palette files, and the user file and globals file.
  //
  // PropertyObjectFile_Set_ContentTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //    - val: string - Specifies the type of file content. 
  //
  // PropertyObjectFile_Set_ContentTypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PropertyObjectFile_Get_ContentTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //
  // PropertyObjectFile_Get_ContentTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the type of file content. 
  //
  rpc Set_ContentType(PropertyObjectFile_Set_ContentTypeRequest) returns (PropertyObjectFile_Set_ContentTypeResponse);
  rpc Get_ContentType(PropertyObjectFile_Get_ContentTypeRequest) returns (PropertyObjectFile_Get_ContentTypeResponse);
  
  
  // Property: FileTypeDescription
  //
  // Specifies a description of the type of file.
  //
  // This string is localized for display in the local language. You cannot set this property for predefined types of files, such as sequence files.
  //
  // PropertyObjectFile_Set_FileTypeDescriptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //    - val: string - Specifies a description of the type of file. 
  //
  // PropertyObjectFile_Set_FileTypeDescriptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PropertyObjectFile_Get_FileTypeDescriptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //
  // PropertyObjectFile_Get_FileTypeDescriptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies a description of the type of file. 
  //
  rpc Set_FileTypeDescription(PropertyObjectFile_Set_FileTypeDescriptionRequest) returns (PropertyObjectFile_Set_FileTypeDescriptionResponse);
  rpc Get_FileTypeDescription(PropertyObjectFile_Get_FileTypeDescriptionRequest) returns (PropertyObjectFile_Get_FileTypeDescriptionResponse);
  
  
  // Property: FileSection
  //
  // Specifies the section name written to the file.
  //
  // You generally do not need to use this property.
  // Note: You cannot set this property for predefined file types.
  //
  // PropertyObjectFile_Set_FileSectionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //    - val: string - Specifies the section name written to the file. 
  //
  // PropertyObjectFile_Set_FileSectionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PropertyObjectFile_Get_FileSectionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //
  // PropertyObjectFile_Get_FileSectionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the section name written to the file. 
  //
  rpc Set_FileSection(PropertyObjectFile_Set_FileSectionRequest) returns (PropertyObjectFile_Set_FileSectionResponse);
  rpc Get_FileSection(PropertyObjectFile_Get_FileSectionRequest) returns (PropertyObjectFile_Get_FileSectionResponse);
  
  
  // Property: OpenStatus
  //
  // Specifies the current status of the file, such as whether the file is open and displayed in a window.
  //
  // PropertyObjectFile_Set_OpenStatusRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //    - val: int32 - Specifies the current status of the file, such as whether the file is open and displayed in a window. 
  //
  // PropertyObjectFile_Set_OpenStatusResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PropertyObjectFile_Get_OpenStatusRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //
  // PropertyObjectFile_Get_OpenStatusResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the current status of the file, such as whether the file is open and displayed in a window. 
  //
  rpc Set_OpenStatus(PropertyObjectFile_Set_OpenStatusRequest) returns (PropertyObjectFile_Set_OpenStatusResponse);
  rpc Get_OpenStatus(PropertyObjectFile_Get_OpenStatusRequest) returns (PropertyObjectFile_Get_OpenStatusResponse);
  
  
  // Property: EditPrivilege
  //
  // Specifies the privilege users must have to edit this file.
  //
  // The sequence editor uses this property to determine whether the current user can edit the file.
  //
  // PropertyObjectFile_Set_EditPrivilegeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //    - val: string - Specifies the privilege users must have to edit this file. 
  //
  // PropertyObjectFile_Set_EditPrivilegeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PropertyObjectFile_Get_EditPrivilegeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //
  // PropertyObjectFile_Get_EditPrivilegeResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the privilege users must have to edit this file. 
  //
  rpc Set_EditPrivilege(PropertyObjectFile_Set_EditPrivilegeRequest) returns (PropertyObjectFile_Set_EditPrivilegeResponse);
  rpc Get_EditPrivilege(PropertyObjectFile_Get_EditPrivilegeRequest) returns (PropertyObjectFile_Get_EditPrivilegeResponse);
  
  
  // Property: IsDiskFileModified
  //
  // Returns a value that indicates whether the file on disk is newer or older than the one stored in memory.
  //
  // * Returns 1 if the file on disk is newer than the one stored in memory.    * Returns -1 if the file on disk is older than the one stored in memory.    * Returns 0 if the file on disk has not changed.
  //
  // PropertyObjectFile_Get_IsDiskFileModifiedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //
  // PropertyObjectFile_Get_IsDiskFileModifiedResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a value that indicates whether the file on disk is newer or older than the one stored in memory. 
  //
  rpc Get_IsDiskFileModified(PropertyObjectFile_Get_IsDiskFileModifiedRequest) returns (PropertyObjectFile_Get_IsDiskFileModifiedResponse);
  
  
  // Property: FileType
  //
  // Returns the type of file.
  //
  // PropertyObjectFile_Get_FileTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //
  // PropertyObjectFile_Get_FileTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectFileTypes - Returns the type of file. 
  //
  rpc Get_FileType(PropertyObjectFile_Get_FileTypeRequest) returns (PropertyObjectFile_Get_FileTypeResponse);
  
  
  // Property: IsDiskFileReadOnly
  //
  // Returns a value that indicates whether the file on disk is read-only.
  //
  // PropertyObjectFile_Get_IsDiskFileReadOnlyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //
  // PropertyObjectFile_Get_IsDiskFileReadOnlyResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the file on disk is read-only. 
  //
  rpc Get_IsDiskFileReadOnly(PropertyObjectFile_Get_IsDiskFileReadOnlyRequest) returns (PropertyObjectFile_Get_IsDiskFileReadOnlyResponse);
  
  
  // Property: Id
  //
  // Returns a unique ID number for the file.
  // Note: The ID number is never zero.
  //
  // The ID number is unique with respect to all files you might open before you shut down the TestStand Engine.
  // Use this ID number to compare two PropertyObjectFile object references to determine whether they refer to the same underlying file.
  //
  // PropertyObjectFile_Get_IdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //
  // PropertyObjectFile_Get_IdResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a unique ID number for the file. Note: The ID number is never zero. 
  //
  rpc Get_Id(PropertyObjectFile_Get_IdRequest) returns (PropertyObjectFile_Get_IdResponse);
  
  
  // Property: Comment
  //
  // Specifies the comment string associated with the PropertyObjectFile object.
  //
  // PropertyObjectFile_Set_CommentRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //    - val: string - Specifies the comment string associated with the PropertyObjectFile object. 
  //
  // PropertyObjectFile_Set_CommentResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PropertyObjectFile_Get_CommentRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //
  // PropertyObjectFile_Get_CommentResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the comment string associated with the PropertyObjectFile object. 
  //
  rpc Set_Comment(PropertyObjectFile_Set_CommentRequest) returns (PropertyObjectFile_Set_CommentResponse);
  rpc Get_Comment(PropertyObjectFile_Get_CommentRequest) returns (PropertyObjectFile_Get_CommentResponse);
  
  
  // Property: Version
  //
  // Specifies the version string associated with the PropertyObjectFile object.
  //
  // You can manually set this value to a valid version string where the numbers from left to right denote the Major, Minor, Revision, and Build version. The TestStand Engine increments the version number each time you save a modified sequence file if you enable the Auto Increment Sequence File Version option on the File tab of the Station Options dialog box. For files that are not sequence files, this property is not used.
  //
  // PropertyObjectFile_Set_VersionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //    - val: string - Specifies the version string associated with the PropertyObjectFile object. 
  //
  // PropertyObjectFile_Set_VersionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PropertyObjectFile_Get_VersionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //
  // PropertyObjectFile_Get_VersionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the version string associated with the PropertyObjectFile object. 
  //
  rpc Set_Version(PropertyObjectFile_Set_VersionRequest) returns (PropertyObjectFile_Set_VersionResponse);
  rpc Get_Version(PropertyObjectFile_Get_VersionRequest) returns (PropertyObjectFile_Get_VersionResponse);
  
  
  // Property: IsModifiedByUser
  //
  // Returns a value that indicates whether the user has modified the file since it was last written to disk.
  //
  // After reading a file, TestStand might perform automatic type conversions and modify the file.  For these files, the PropertyObjectFile.IsModified property returns True after the file is read from disk. This property only returns True if the file is modified and TestStand did not perform all the modifications.
  //
  // PropertyObjectFile_Get_IsModifiedByUserRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //
  // PropertyObjectFile_Get_IsModifiedByUserResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the user has modified the file since it was last written to disk. 
  //
  rpc Get_IsModifiedByUser(PropertyObjectFile_Get_IsModifiedByUserRequest) returns (PropertyObjectFile_Get_IsModifiedByUserResponse);
  
  
  // Property: Requirements
  //
  // Returns the Requirements property for the file. The Links subproperty of the Requirements property is an array of string values that represents the product and unit requirements that the file covers.
  //
  // This property is valid for sequence files, project files, and workspace files. This property returns an error for all other file types.
  // You can use the following pseudocode to add a new element to the list of requirements:
  // PropertyObject links = propertyObjectFile.Requirements.GetPropertyObject("Links", 0);int nextAvailableIndex = links.GetNumElements();links.SetValStringByOffset(nextAvailableIndex, PropertyOptions.PropOption_InsertElement, "REQ_ABC");
  //
  // PropertyObjectFile_Get_RequirementsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //
  // PropertyObjectFile_Get_RequirementsResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Returns the Requirements property for the file. The Links subproperty of the Requirements property is an array of string values that represents the product and unit requirements that the file covers. 
  //
  rpc Get_Requirements(PropertyObjectFile_Get_RequirementsRequest) returns (PropertyObjectFile_Get_RequirementsResponse);
  
  
  // Property: Protection
  //
  // Specifies the protection level applied to a locked file in the sequence editor or applications that use the TestStand User Interface (UI) Controls.
  //
  // Setting this property on a locked file causes an error. Set this property when files are unlocked. This property applies only to sequence files. Setting this property on other files causes an error.
  // Note: TestStand supports password protecting sequence files to discourage editing and viewing within the sequence editor and user interfaces that use the TestStand UI Controls. The TestStand API limits access to a file protected from viewing but cannot prevent access to the file content during execution. National Instruments does not recommend using passwords as the only way of protecting intellectual property.
  //
  // PropertyObjectFile_Set_ProtectionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //    - val: int32 - Specifies the protection level applied to a locked file in the sequence editor or applications that use the TestStand User Interface (UI) Controls. 
  //
  // PropertyObjectFile_Set_ProtectionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PropertyObjectFile_Get_ProtectionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //
  // PropertyObjectFile_Get_ProtectionResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the protection level applied to a locked file in the sequence editor or applications that use the TestStand User Interface (UI) Controls. 
  //
  rpc Set_Protection(PropertyObjectFile_Set_ProtectionRequest) returns (PropertyObjectFile_Set_ProtectionResponse);
  rpc Get_Protection(PropertyObjectFile_Get_ProtectionRequest) returns (PropertyObjectFile_Get_ProtectionResponse);
  
  
  // Property: Locked
  //
  // Returns a value that indicates whether the file is locked.
  //
  // This property returns True if file protection is enabled and the PropertyObjectFile.Lock method was called. After reading a protected file, TestStand automatically locks the file.
  //
  // PropertyObjectFile_Get_LockedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //
  // PropertyObjectFile_Get_LockedResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the file is locked. 
  //
  rpc Get_Locked(PropertyObjectFile_Get_LockedRequest) returns (PropertyObjectFile_Get_LockedResponse);
  
  
  // Property: FileWritingFormat
  //
  // Specifies the format in which TestStand writes the file.
  //
  // Attempting to set to INI (or any other unsupported value) will throw an exception.
  //
  // PropertyObjectFile_Set_FileWritingFormatRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //    - val: FileWritingFormats - Specifies the format in which TestStand writes the file. 
  //
  // PropertyObjectFile_Set_FileWritingFormatResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PropertyObjectFile_Get_FileWritingFormatRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //
  // PropertyObjectFile_Get_FileWritingFormatResponse - The response message from the server. It provides the return value.
  //    - returnValue: FileWritingFormats - Specifies the format in which TestStand writes the file. 
  //
  rpc Set_FileWritingFormat(PropertyObjectFile_Set_FileWritingFormatRequest) returns (PropertyObjectFile_Set_FileWritingFormatResponse);
  rpc Get_FileWritingFormat(PropertyObjectFile_Get_FileWritingFormatRequest) returns (PropertyObjectFile_Get_FileWritingFormatResponse);
  
  
  // Property: LastSavedChangeCount
  //
  // Returns the value of the PropertyObjectFile.ChangeCount property at the time the file was last saved. Setting the value of the PropertyObjectFile.ChangeCount property equal to the value of the PropertyObjectFile.LastSavedChangeCount property causes the PropertyObjectFile.IsModified property to return False.
  //
  // PropertyObjectFile_Get_LastSavedChangeCountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectFileInstance - The id of the PropertyObjectFile object.
  //
  // PropertyObjectFile_Get_LastSavedChangeCountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the value of the PropertyObjectFile.ChangeCount property at the time the file was last saved. Setting the value of the PropertyObjectFile.ChangeCount property equal to the value of the PropertyObjectFile.LastSavedChangeCount property causes the PropertyObjectFile.IsModified property to return False. 
  //
  rpc Get_LastSavedChangeCount(PropertyObjectFile_Get_LastSavedChangeCountRequest) returns (PropertyObjectFile_Get_LastSavedChangeCountResponse);
  
  
}
message TypeUsageListInstance {
  // Specifies the handle of the TypeUsageList instance in the server.
  string id = 1;
}
message PropertyObjectFile_IncChangeCountRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
}

message PropertyObjectFile_IncChangeCountResponse {
}

message PropertyObjectFile_ReadFileRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
  // Specifies how to handle type conflicts in the file.
  TypeConflictHandlerTypes handlerType = 2;
}

message PropertyObjectFile_ReadFileResponse {
  // Returns True if the file is read successfully. Returns False if the file has type conflicts and the user cancelled the operation.
  bool returnValue = 1;
}

message PropertyObjectFile_WriteFileRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
  // Specifies the file format version TestStand uses to write the file.
  WriteFileFormat writeFormat = 2;
}

message PropertyObjectFile_WriteFileResponse {
}

message PropertyObjectFile_AsPropertyObjectRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
}

message PropertyObjectFile_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message PropertyObjectFile_HandleTypeConflictsRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
  // Specifies how type conflicts are handled.
  TypeConflictHandlerTypes handlerType = 2;
}

message PropertyObjectFile_HandleTypeConflictsResponse {
  // Returns True if types were resolved successfully.
  bool returnValue = 1;
}

message PropertyObjectFile_SaveFileIfModifiedRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
  // If this parameter is True and if the file has been modified, a dialog box opens and asks the user whether to save the file.
  bool prompt = 2;
}

message PropertyObjectFile_SaveFileIfModifiedResponse {
  // Returns False only if the user clicked Cancel in the Prompt dialog box.
  bool returnValue = 1;
}

message PropertyObjectFile_CheckForModifiedTypesRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Pass a string to display text on the OK button or pass an empty string to use the default text.
  string okButtonText = 3;
  // Specifies whether the method launches a warning dialog box if a modified type is found, or whether the method performs a specific action if a modified type is found. Pass one of CheckForModifiedTypesOptions constants to this method.
  CheckForModifiedTypesOptions options = 4;
  // Specifies which version number to increment when you pass CheckForModifiedTypes_AutoIncrementVersions to the options parameter.
  TypeVersionAutoIncrement versionIncOption = 5;
}

message PropertyObjectFile_CheckForModifiedTypesResponse {
  // Returns True if a user clicks Cancel.
  bool operationCanceled = 1;
  // Returns True if modified types were found in the file.
  bool foundModifiedTypes = 2;
}

message PropertyObjectFile_LockRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
  // Specifies the password for the lock operation. If no passwordString parameter is specified, the previous password is used. If no previous password was specified, the password is an empty string.
  optional string passwordString = 2;
}

message PropertyObjectFile_LockResponse {
}

message PropertyObjectFile_UnlockRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
  // Specifies the password for the unlock operation.
  string passwordString = 2;
}

message PropertyObjectFile_UnlockResponse {
}

message PropertyObjectFile_Get_TypeUsageListRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
}

message PropertyObjectFile_Get_TypeUsageListResponse {
  // Returns the TypeUsageList associated with the file.
  TypeUsageListInstance returnValue = 1;
}

message PropertyObjectFile_Get_IsModifiedRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
}

message PropertyObjectFile_Get_IsModifiedResponse {
  // Returns a value that indicates whether the file has been modified since it was last written to disk.
  bool returnValue = 1;
}

message PropertyObjectFile_Set_ChangeCountRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
  // Specifies the number of modifications that have been made to the file since it was loaded into memory.
  int32 val = 2;
}

message PropertyObjectFile_Set_ChangeCountResponse {
}

message PropertyObjectFile_Get_ChangeCountRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
}

message PropertyObjectFile_Get_ChangeCountResponse {
  // Specifies the number of modifications that have been made to the file since it was loaded into memory.
  int32 returnValue = 1;
}

message PropertyObjectFile_Set_PathRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
  // Specifies the pathname of the file.
  string val = 2;
}

message PropertyObjectFile_Set_PathResponse {
}

message PropertyObjectFile_Get_PathRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
}

message PropertyObjectFile_Get_PathResponse {
  // Specifies the pathname of the file.
  string returnValue = 1;
}

message PropertyObjectFile_Set_DisplayNameRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
  // Specifies the name to display for the file.
  string val = 2;
}

message PropertyObjectFile_Set_DisplayNameResponse {
}

message PropertyObjectFile_Get_DisplayNameRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
}

message PropertyObjectFile_Get_DisplayNameResponse {
  // Specifies the name to display for the file.
  string returnValue = 1;
}

message PropertyObjectFile_Set_DataRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
  // Specifies the data object stored in the file.
  PropertyObjectInstance val = 2;
}

message PropertyObjectFile_Set_DataResponse {
}

message PropertyObjectFile_Get_DataRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
}

message PropertyObjectFile_Get_DataResponse {
  // Specifies the data object stored in the file.
  PropertyObjectInstance returnValue = 1;
}

message PropertyObjectFile_Set_ContentTypeRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
  // Specifies the type of file content.
  string val = 2;
}

message PropertyObjectFile_Set_ContentTypeResponse {
}

message PropertyObjectFile_Get_ContentTypeRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
}

message PropertyObjectFile_Get_ContentTypeResponse {
  // Specifies the type of file content.
  string returnValue = 1;
}

message PropertyObjectFile_Set_FileTypeDescriptionRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
  // Specifies a description of the type of file.
  string val = 2;
}

message PropertyObjectFile_Set_FileTypeDescriptionResponse {
}

message PropertyObjectFile_Get_FileTypeDescriptionRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
}

message PropertyObjectFile_Get_FileTypeDescriptionResponse {
  // Specifies a description of the type of file.
  string returnValue = 1;
}

message PropertyObjectFile_Set_FileSectionRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
  // Specifies the section name written to the file.
  string val = 2;
}

message PropertyObjectFile_Set_FileSectionResponse {
}

message PropertyObjectFile_Get_FileSectionRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
}

message PropertyObjectFile_Get_FileSectionResponse {
  // Specifies the section name written to the file.
  string returnValue = 1;
}

message PropertyObjectFile_Set_OpenStatusRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
  // Specifies the current status of the file, such as whether the file is open and displayed in a window.
  FileOpenStatusFlags val = 2;
}

message PropertyObjectFile_Set_OpenStatusResponse {
}

message PropertyObjectFile_Get_OpenStatusRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
}

message PropertyObjectFile_Get_OpenStatusResponse {
  // One of the values in FileOpenStatusFlags.
  FileOpenStatusFlags returnValue = 1;
}

message PropertyObjectFile_Set_EditPrivilegeRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
  // Specifies the privilege users must have to edit this file.
  string val = 2;
}

message PropertyObjectFile_Set_EditPrivilegeResponse {
}

message PropertyObjectFile_Get_EditPrivilegeRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
}

message PropertyObjectFile_Get_EditPrivilegeResponse {
  // Specifies the privilege users must have to edit this file.
  string returnValue = 1;
}

message PropertyObjectFile_Get_IsDiskFileModifiedRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
}

message PropertyObjectFile_Get_IsDiskFileModifiedResponse {
  // Returns a value that indicates whether the file on disk is newer or older than the one stored in memory.
  int32 returnValue = 1;
}

message PropertyObjectFile_Get_FileTypeRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
}

message PropertyObjectFile_Get_FileTypeResponse {
  // Returns the type of file.
  PropertyObjectFileTypes returnValue = 1;
}

message PropertyObjectFile_Get_IsDiskFileReadOnlyRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
}

message PropertyObjectFile_Get_IsDiskFileReadOnlyResponse {
  // Returns a value that indicates whether the file on disk is read-only.
  bool returnValue = 1;
}

message PropertyObjectFile_Get_IdRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
}

message PropertyObjectFile_Get_IdResponse {
  // Returns a unique ID number for the file.
  // Note: The ID number is never zero.
  int32 returnValue = 1;
}

message PropertyObjectFile_Set_CommentRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
  // Specifies the comment string associated with the PropertyObjectFile object.
  string val = 2;
}

message PropertyObjectFile_Set_CommentResponse {
}

message PropertyObjectFile_Get_CommentRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
}

message PropertyObjectFile_Get_CommentResponse {
  // Specifies the comment string associated with the PropertyObjectFile object.
  string returnValue = 1;
}

message PropertyObjectFile_Set_VersionRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
  // Specifies the version string associated with the PropertyObjectFile object.
  string val = 2;
}

message PropertyObjectFile_Set_VersionResponse {
}

message PropertyObjectFile_Get_VersionRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
}

message PropertyObjectFile_Get_VersionResponse {
  // Specifies the version string associated with the PropertyObjectFile object.
  string returnValue = 1;
}

message PropertyObjectFile_Get_IsModifiedByUserRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
}

message PropertyObjectFile_Get_IsModifiedByUserResponse {
  // Returns a value that indicates whether the user has modified the file since it was last written to disk.
  bool returnValue = 1;
}

message PropertyObjectFile_Get_RequirementsRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
}

message PropertyObjectFile_Get_RequirementsResponse {
  // Returns the Requirements property for the file. The Links subproperty of the Requirements property is an array of string values that represents the product and unit requirements that the file covers.
  PropertyObjectInstance returnValue = 1;
}

message PropertyObjectFile_Set_ProtectionRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
  // Specifies the protection level applied to a locked file in the sequence editor or applications that use the TestStand User Interface (UI) Controls.
  ProtectedObjectOptions val = 2;
}

message PropertyObjectFile_Set_ProtectionResponse {
}

message PropertyObjectFile_Get_ProtectionRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
}

message PropertyObjectFile_Get_ProtectionResponse {
  // Specifies the protection level applied to a locked file in the sequence editor or applications that use the TestStand User Interface (UI) Controls.
  ProtectedObjectOptions returnValue = 1;
}

message PropertyObjectFile_Get_LockedRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
}

message PropertyObjectFile_Get_LockedResponse {
  // Returns a value that indicates whether the file is locked.
  bool returnValue = 1;
}

message PropertyObjectFile_Set_FileWritingFormatRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
  // Specifies the format in which TestStand writes the file.
  FileWritingFormats val = 2;
}

message PropertyObjectFile_Set_FileWritingFormatResponse {
}

message PropertyObjectFile_Get_FileWritingFormatRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
}

message PropertyObjectFile_Get_FileWritingFormatResponse {
  // Specifies the format in which TestStand writes the file.
  FileWritingFormats returnValue = 1;
}

message PropertyObjectFile_Get_LastSavedChangeCountRequest {
  // The id of the PropertyObjectFile object.
  PropertyObjectFileInstance instance = 1;
}

message PropertyObjectFile_Get_LastSavedChangeCountResponse {
  // Returns the value of the PropertyObjectFile.ChangeCount property at the time the file was last saved. Setting the value of the PropertyObjectFile.ChangeCount property equal to the value of the PropertyObjectFile.LastSavedChangeCount property causes the PropertyObjectFile.IsModified property to return False.
  int32 returnValue = 1;
}

// TypeUsageList
//
// The TypeUsageList contains a list of types a PropertyObjectFile object uses. Use this class to insert or delete types from a file.
// Note: When you edit a PropertyObjectFile object by inserting named data types or step types in to the file, add any new types to the TypeUsageList object for the file so the types immediately appear in the Types view in the sequence editor for the file. Use the TypeUsageList.AddUsedTypes or TypeUsageList.Union method to add new types.
//
service TypeUsageList {
  // Method: GetTypeDefinition
  //
  // Returns the type the index parameter specifies.
  //
  // TypeUsageList_GetTypeDefinitionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: TypeUsageListInstance - The id of the TypeUsageList object.
  //    - index: int32 - Specifies the zero-based index of the type in the type usage list.
  //
  // TypeUsageList_GetTypeDefinitionResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc GetTypeDefinition(TypeUsageList_GetTypeDefinitionRequest) returns (TypeUsageList_GetTypeDefinitionResponse);
  
  
  // Method: GetTypeIndex
  //
  // Returns the index of the type the typeNameParam parameter specifies.
  //
  // TypeUsageList_GetTypeIndexRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: TypeUsageListInstance - The id of the TypeUsageList object.
  //    - typeNameParam: string - Specifies the type name to locate in the list.
  //
  // TypeUsageList_GetTypeIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - The index of the type with the specified name. Returns -1 if no type in the list has the specified name. 
  //
  rpc GetTypeIndex(TypeUsageList_GetTypeIndexRequest) returns (TypeUsageList_GetTypeIndexResponse);
  
  
  // Method: InsertType
  //
  // Inserts a type into the type usage list and associates it with a type category.
  //
  // TypeUsageList_InsertTypeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: TypeUsageListInstance - The id of the TypeUsageList object.
  //    - typeToInsert: PropertyObjectInstance - Specifies the new type definition to insert.
  //    - index: int32 - Specifies the zero-based index at which to insert the type into the type usage list.
  //    - typeCategoryParam: TypeCategories - Specifies the type category to associate with the type.
  //
  // TypeUsageList_InsertTypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc InsertType(TypeUsageList_InsertTypeRequest) returns (TypeUsageList_InsertTypeResponse);
  
  
  // Method: RemoveType
  //
  // Removes the type the index parameter specifies from the type usage list.
  //
  // TypeUsageList_RemoveTypeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: TypeUsageListInstance - The id of the TypeUsageList object.
  //    - index: int32 - Specifies the zero-based index of the type to remove.
  //
  // TypeUsageList_RemoveTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The removed type. 
  //
  rpc RemoveType(TypeUsageList_RemoveTypeRequest) returns (TypeUsageList_RemoveTypeResponse);
  
  
  // Method: SetIsTypeAttachedToFile
  //
  // Specifies if the type the index parameter specifies is attached to the file that contains the type usage list.
  //
  // Types attached to a file are saved with the file to which the list belongs, even if no instances of the type exist in the file.
  //
  // TypeUsageList_SetIsTypeAttachedToFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: TypeUsageListInstance - The id of the TypeUsageList object.
  //    - index: int32 - Specifies the zero-based index of the type in the type usage list.
  //    - store: bool - Pass True to attach the type to the file.
  //
  // TypeUsageList_SetIsTypeAttachedToFileResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetIsTypeAttachedToFile(TypeUsageList_SetIsTypeAttachedToFileRequest) returns (TypeUsageList_SetIsTypeAttachedToFileResponse);
  
  
  // Method: GetIsTypeAttachedToFile
  //
  // Returns a value that indicates whether the type the index parameter specifies is attached to the file that contains the type usage list.
  //
  // Types that are attached to a file are saved with the file to which the list belongs, even if no instances of the type exist in the file.
  //
  // TypeUsageList_GetIsTypeAttachedToFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: TypeUsageListInstance - The id of the TypeUsageList object.
  //    - index: int32 - Specifies the zero-based index of the type in the type usage list.
  //
  // TypeUsageList_GetIsTypeAttachedToFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the type is attached to the file. 
  //
  rpc GetIsTypeAttachedToFile(TypeUsageList_GetIsTypeAttachedToFileRequest) returns (TypeUsageList_GetIsTypeAttachedToFileResponse);
  
  
  // Method: AddUsedTypes
  //
  // Adds all the types the specified object uses to the type usage list.
  //
  // TypeUsageList_AddUsedTypesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: TypeUsageListInstance - The id of the TypeUsageList object.
  //    - propObject: PropertyObjectInstance - Specifies the object from which to add types to the type usage list.
  //
  // TypeUsageList_AddUsedTypesResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if any types were added to the type usage list. 
  //
  rpc AddUsedTypes(TypeUsageList_AddUsedTypesRequest) returns (TypeUsageList_AddUsedTypesResponse);
  
  
  // Method: MoveType
  //
  // Moves the type the index parameter specifies to a new index in the type usage list.
  //
  // TypeUsageList_MoveTypeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: TypeUsageListInstance - The id of the TypeUsageList object.
  //    - index: int32 - Specifies the zero-based index of the type to move.
  //    - newIndex: int32 - Specifies the new zero-based index of the type.
  //
  // TypeUsageList_MoveTypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc MoveType(TypeUsageList_MoveTypeRequest) returns (TypeUsageList_MoveTypeResponse);
  
  
  // Method: ValidateNewTypeName
  //
  // Determines if the specified name is valid for a new type definition.
  //
  // Call this method before adding a new type definition to a type usage list to determine whether the name of the new type definition is valid.
  //
  // TypeUsageList_ValidateNewTypeNameRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: TypeUsageListInstance - The id of the TypeUsageList object.
  //    - newName: string - Specifies the new name to validate.
  //    - allowDuplicates: bool - In addition to validating the name, also check if the name is already in use. If this parameter is False, the method reports that the new name is invalid if it is already in use.
  //
  // TypeUsageList_ValidateNewTypeNameResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: string - Returns a description of why the name is not valid. 
  //    - isValid: boo - Returns True if the new name is valid.
  //
  rpc ValidateNewTypeName(TypeUsageList_ValidateNewTypeNameRequest) returns (TypeUsageList_ValidateNewTypeNameResponse);
  
  
  // Method: Union
  //
  // Adds all the types from one type usage list to another.
  //
  // Does not add types that already exist in both type usage lists.
  //
  // TypeUsageList_UnionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: TypeUsageListInstance - The id of the TypeUsageList object.
  //    - unionTypeUsageList: TypeUsageListInstance - Specifies the type usage list that contains the types to add.
  //
  // TypeUsageList_UnionResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if any types were added. Otherwise, returns False. 
  //
  rpc Union(TypeUsageList_UnionRequest) returns (TypeUsageList_UnionResponse);
  
  
  // Method: CreateAndInsertNewTypeFromExisting
  //
  // Creates a new type with a unique name based on the type you specify in the existingType parameter and inserts and attaches the new type to the type usage list. This method also clears some type-specific settings in the newly created type, such as the flags PropFlags_NotDeletable, PropFlags_NotEditable, and PropFlags_NameNotEditable; the type flags PropTypeFlags_NIInstalledType and PropTypeFlags_PreventEditingType; the TypeMinimumTestStandVersion; and the password protection settings. Using this method is equivalent to copying and pasting a type in the Types window in the TestStand Sequence Editor to create a new type based on an existing type.
  //
  // TypeUsageList_CreateAndInsertNewTypeFromExistingRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: TypeUsageListInstance - The id of the TypeUsageList object.
  //    - existingType: PropertyObjectInstance - Specifies the existing root type definition on which to base the newly created type.
  //    - index: int32 - Specifies the index in the type usage list at which to insert the new type.
  //    - typeCategoryParam: TypeCategories - Specifies the type category in which to insert the new type.
  //    - reservedParam: int32 - Reserved for future use. Pass 0 for this parameter.
  //
  // TypeUsageList_CreateAndInsertNewTypeFromExistingResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Returns the newly created type, which is already inserted into and attached to the type usage list. 
  //
  rpc CreateAndInsertNewTypeFromExisting(TypeUsageList_CreateAndInsertNewTypeFromExistingRequest) returns (TypeUsageList_CreateAndInsertNewTypeFromExistingResponse);
  
  

  // Property: NumTypes
  //
  // Returns the number of types in the type usage list.
  //
  // TypeUsageList_Get_NumTypesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: TypeUsageListInstance - The id of the TypeUsageList object.
  //
  // TypeUsageList_Get_NumTypesResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of types in the type usage list. 
  //
  rpc Get_NumTypes(TypeUsageList_Get_NumTypesRequest) returns (TypeUsageList_Get_NumTypesResponse);
  
  
  // Property: ChangeCount
  //
  // Returns the number of modifications made to the type usage list.
  //
  // TypeUsageList_Get_ChangeCountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: TypeUsageListInstance - The id of the TypeUsageList object.
  //
  // TypeUsageList_Get_ChangeCountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of modifications made to the type usage list. 
  //
  rpc Get_ChangeCount(TypeUsageList_Get_ChangeCountRequest) returns (TypeUsageList_Get_ChangeCountResponse);
  
  
}
message TypeUsageList_GetTypeDefinitionRequest {
  // The id of the TypeUsageList object.
  TypeUsageListInstance instance = 1;
  // Specifies the zero-based index of the type in the type usage list.
  int32 index = 2;
}

message TypeUsageList_GetTypeDefinitionResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message TypeUsageList_GetTypeIndexRequest {
  // The id of the TypeUsageList object.
  TypeUsageListInstance instance = 1;
  // Specifies the type name to locate in the list.
  string typeNameParam = 2;
}

message TypeUsageList_GetTypeIndexResponse {
  // The index of the type with the specified name. Returns -1 if no type in the list has the specified name.
  int32 returnValue = 1;
}

message TypeUsageList_InsertTypeRequest {
  // The id of the TypeUsageList object.
  TypeUsageListInstance instance = 1;
  // Specifies the new type definition to insert.
  PropertyObjectInstance typeToInsert = 2;
  // Specifies the zero-based index at which to insert the type into the type usage list.
  int32 index = 3;
  // Specifies the type category to associate with the type.
  TypeCategories typeCategoryParam = 4;
}

message TypeUsageList_InsertTypeResponse {
}

message TypeUsageList_RemoveTypeRequest {
  // The id of the TypeUsageList object.
  TypeUsageListInstance instance = 1;
  // Specifies the zero-based index of the type to remove.
  int32 index = 2;
}

message TypeUsageList_RemoveTypeResponse {
  // The removed type.
  PropertyObjectInstance returnValue = 1;
}

message TypeUsageList_SetIsTypeAttachedToFileRequest {
  // The id of the TypeUsageList object.
  TypeUsageListInstance instance = 1;
  // Specifies the zero-based index of the type in the type usage list.
  int32 index = 2;
  // Pass True to attach the type to the file.
  bool store = 3;
}

message TypeUsageList_SetIsTypeAttachedToFileResponse {
}

message TypeUsageList_GetIsTypeAttachedToFileRequest {
  // The id of the TypeUsageList object.
  TypeUsageListInstance instance = 1;
  // Specifies the zero-based index of the type in the type usage list.
  int32 index = 2;
}

message TypeUsageList_GetIsTypeAttachedToFileResponse {
  // Returns True if the type is attached to the file.
  bool returnValue = 1;
}

message TypeUsageList_AddUsedTypesRequest {
  // The id of the TypeUsageList object.
  TypeUsageListInstance instance = 1;
  // Specifies the object from which to add types to the type usage list.
  PropertyObjectInstance propObject = 2;
}

message TypeUsageList_AddUsedTypesResponse {
  // Returns True if any types were added to the type usage list.
  bool returnValue = 1;
}

message TypeUsageList_MoveTypeRequest {
  // The id of the TypeUsageList object.
  TypeUsageListInstance instance = 1;
  // Specifies the zero-based index of the type to move.
  int32 index = 2;
  // Specifies the new zero-based index of the type.
  int32 newIndex = 3;
}

message TypeUsageList_MoveTypeResponse {
}

message TypeUsageList_ValidateNewTypeNameRequest {
  // The id of the TypeUsageList object.
  TypeUsageListInstance instance = 1;
  // Specifies the new name to validate.
  string newName = 2;
  // In addition to validating the name, also check if the name is already in use. If this parameter is False, the method reports that the new name is invalid if it is already in use.
  bool allowDuplicates = 3;
}

message TypeUsageList_ValidateNewTypeNameResponse {
  // Returns a description of why the name is not valid.
  string returnValue = 1;
  // Returns True if the new name is valid.
  bool isValid = 2;
}

message TypeUsageList_UnionRequest {
  // The id of the TypeUsageList object.
  TypeUsageListInstance instance = 1;
  // Specifies the type usage list that contains the types to add.
  TypeUsageListInstance unionTypeUsageList = 2;
}

message TypeUsageList_UnionResponse {
  // Returns True if any types were added. Otherwise, returns False.
  bool returnValue = 1;
}

message TypeUsageList_CreateAndInsertNewTypeFromExistingRequest {
  // The id of the TypeUsageList object.
  TypeUsageListInstance instance = 1;
  // Specifies the existing root type definition on which to base the newly created type.
  PropertyObjectInstance existingType = 2;
  // Specifies the index in the type usage list at which to insert the new type.
  int32 index = 3;
  // Specifies the type category in which to insert the new type.
  TypeCategories typeCategoryParam = 4;
  // Reserved for future use. Pass 0 for this parameter.
  int32 reservedParam = 5;
}

message TypeUsageList_CreateAndInsertNewTypeFromExistingResponse {
  // Returns the newly created type, which is already inserted into and attached to the type usage list.
  PropertyObjectInstance returnValue = 1;
}

message TypeUsageList_Get_NumTypesRequest {
  // The id of the TypeUsageList object.
  TypeUsageListInstance instance = 1;
}

message TypeUsageList_Get_NumTypesResponse {
  // Returns the number of types in the type usage list.
  int32 returnValue = 1;
}

message TypeUsageList_Get_ChangeCountRequest {
  // The id of the TypeUsageList object.
  TypeUsageListInstance instance = 1;
}

message TypeUsageList_Get_ChangeCountResponse {
  // Returns the number of modifications made to the type usage list.
  int32 returnValue = 1;
}

// SearchResults
//
// Objects in the SearchResult class are both a handle to a search in progress and a container for the results of that search. When you call the PropertyObject.Search or Engine.SearchFiles method, TestStand returns a SearchResults object. The search runs asynchronously, which means you obtain the SearchResults object before the search finishes. To wait for the search to complete, call the SearchResults.IsComplete method. Alternatively, you can access the results as they accumulate asynchronously by using the SearchResults.NumMatches property to obtain the number of matches and then accessing only the SearchMatch objects up to that number. TestStand always appends new SearchMatch objects to the end of the result list.
//
service SearchResults {
  // Method: Cancel
  //
  // Cancels a search in progress. Calling this method after the search completes does nothing.
  //
  // SearchResults_CancelRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SearchResultsInstance - The id of the SearchResults object.
  //    - waitForComplete: bool - Pass True if you want the method to wait until the search finishes canceling before returning. Otherwise, the cancel operation is asynchronous.
  //    - processWindowsMsgsWhileWaiting: bool - Pass True if you want TestStand to process window messages while waiting for the search to complete. TestStand ignores this parameter if you do not pass True for the waitForComplete parameter.
  //
  // SearchResults_CancelResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Cancel(SearchResults_CancelRequest) returns (SearchResults_CancelResponse);
  
  
  // Method: IsComplete
  //
  // Returns a value that indicates whether a search is complete or waits until the search is complete.
  //
  // SearchResults_IsCompleteRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SearchResultsInstance - The id of the SearchResults object.
  //    - waitForComplete: bool - Pass True if you want the method to wait until the search is complete before it returns.
  //    - processWindowsMsgsWhileWaiting: bool - Pass True if you want TestStand to process window messages while waiting for the search to complete. TestStand ignores this parameter if you do not pass True for the waitForComplete parameter.
  //
  // SearchResults_IsCompleteResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc IsComplete(SearchResults_IsCompleteRequest) returns (SearchResults_IsCompleteResponse);
  
  
  // Method: GetMatch
  //
  // Returns the SearchMatch object you specify.
  //
  // You can access the SearchMatch objects even as they accumulate asynchronously by using the SearchResults.NumMatches property to obtain the number of matches and then using this method to access only the SearchMatch objects up to that number. TestStand always appends new SearchMatch objects to the end.
  //
  // SearchResults_GetMatchRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SearchResultsInstance - The id of the SearchResults object.
  //    - index: int32 - Specifies the zero-based index of the SearchMatch object you want the method to return.
  //
  // SearchResults_GetMatchResponse - The response message from the server. It provides the return value.
  //    - returnValue: SearchMatchInstance - The return type of the SearchMatch object.
  //
  rpc GetMatch(SearchResults_GetMatchRequest) returns (SearchResults_GetMatchResponse);
  
  
  // Method: GetWarning
  //
  // Returns the warning message you specify by index.
  //
  // You can access the warnings even as they accumulate asynchronously by using the SearchResults.NumWarnings property to obtain the number of matches and then using this method to access only the SearchMatch objects up to that number. TestStand always appends new warnings to the end of the result list.
  //
  // SearchResults_GetWarningRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SearchResultsInstance - The id of the SearchResults object.
  //    - index: int32 - Specifies the zero-based index of the SearchMatch object you want the method to return.
  //
  // SearchResults_GetWarningResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetWarning(SearchResults_GetWarningRequest) returns (SearchResults_GetWarningResponse);
  
  

  // Property: NumMatches
  //
  // Returns the number of matches found up to a certain point. If the search is not yet complete, this number can continue to increase as TestStand finds new matches.
  //
  // You can access the SearchMatch objects even as they accumulate asynchronously by using this property to obtain the number of matches and then accessing only the SearchMatch objects up to that number using the SearchResults.GetMatch method. TestStand always appends new SearchMatch objects to the end of the result list.
  //
  // SearchResults_Get_NumMatchesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchResultsInstance - The id of the SearchResults object.
  //
  // SearchResults_Get_NumMatchesResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of matches found up to a certain point. If the search is not yet complete, this number can continue to increase as TestStand finds new matches. 
  //
  rpc Get_NumMatches(SearchResults_Get_NumMatchesRequest) returns (SearchResults_Get_NumMatchesResponse);
  
  
  // Property: StatusMessage
  //
  // Returns a real-time description of what the search is doing while in progress. The status message describes the file TestStand is currently loading or searching as well as other activities that relate to the search, such as building the list of files to search.
  //
  // SearchResults_Get_StatusMessageRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchResultsInstance - The id of the SearchResults object.
  //
  // SearchResults_Get_StatusMessageResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns a real-time description of what the search is doing while in progress. The status message describes the file TestStand is currently loading or searching as well as other activities that relate to the search, such as building the list of files to search. 
  //
  rpc Get_StatusMessage(SearchResults_Get_StatusMessageRequest) returns (SearchResults_Get_StatusMessageResponse);
  
  
  // Property: NumWarnings
  //
  // Returns the number of warnings. If the search is not yet complete, this number can increase in the future as TestStand adds new warning messages. TestStand adds warning messages when it encounters an error while performing a search. A common error that can occur is when TestStand cannot load a file because of type conflicts.
  //
  // You can access the warnings even as they accumulate asynchronously by using the SearchResults.GetWarning method to obtain the number of warnings and then using this method to access only the SearchMatch objects up to that number. TestStand always appends new warnings to the end of the result list.
  //
  // SearchResults_Get_NumWarningsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchResultsInstance - The id of the SearchResults object.
  //
  // SearchResults_Get_NumWarningsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of warnings. If the search is not yet complete, this number can increase in the future as TestStand adds new warning messages. TestStand adds warning messages when it encounters an error while performing a search. A common error that can occur is when TestStand cannot load a file because of type conflicts. 
  //
  rpc Get_NumWarnings(SearchResults_Get_NumWarningsRequest) returns (SearchResults_Get_NumWarningsResponse);
  
  
}
message SearchMatchInstance {
  // Specifies the handle of the SearchMatch instance in the server.
  string id = 1;
}
message SearchResults_CancelRequest {
  // The id of the SearchResults object.
  SearchResultsInstance instance = 1;
  // Pass True if you want the method to wait until the search finishes canceling before returning. Otherwise, the cancel operation is asynchronous.
  bool waitForComplete = 2;
  // Pass True if you want TestStand to process window messages while waiting for the search to complete. TestStand ignores this parameter if you do not pass True for the waitForComplete parameter.
  bool processWindowsMsgsWhileWaiting = 3;
}

message SearchResults_CancelResponse {
}

message SearchResults_IsCompleteRequest {
  // The id of the SearchResults object.
  SearchResultsInstance instance = 1;
  // Pass True if you want the method to wait until the search is complete before it returns.
  bool waitForComplete = 2;
  // Pass True if you want TestStand to process window messages while waiting for the search to complete. TestStand ignores this parameter if you do not pass True for the waitForComplete parameter.
  bool processWindowsMsgsWhileWaiting = 3;
}

message SearchResults_IsCompleteResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message SearchResults_GetMatchRequest {
  // The id of the SearchResults object.
  SearchResultsInstance instance = 1;
  // Specifies the zero-based index of the SearchMatch object you want the method to return.
  int32 index = 2;
}

message SearchResults_GetMatchResponse {
  // The return type of the SearchMatch object.
  SearchMatchInstance returnValue = 1;
}

message SearchResults_GetWarningRequest {
  // The id of the SearchResults object.
  SearchResultsInstance instance = 1;
  // Specifies the zero-based index of the SearchMatch object you want the method to return.
  int32 index = 2;
}

message SearchResults_GetWarningResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message SearchResults_Get_NumMatchesRequest {
  // The id of the SearchResults object.
  SearchResultsInstance instance = 1;
}

message SearchResults_Get_NumMatchesResponse {
  // Returns the number of matches found up to a certain point. If the search is not yet complete, this number can continue to increase as TestStand finds new matches.
  int32 returnValue = 1;
}

message SearchResults_Get_StatusMessageRequest {
  // The id of the SearchResults object.
  SearchResultsInstance instance = 1;
}

message SearchResults_Get_StatusMessageResponse {
  // Returns a real-time description of what the search is doing while in progress. The status message describes the file TestStand is currently loading or searching as well as other activities that relate to the search, such as building the list of files to search.
  string returnValue = 1;
}

message SearchResults_Get_NumWarningsRequest {
  // The id of the SearchResults object.
  SearchResultsInstance instance = 1;
}

message SearchResults_Get_NumWarningsResponse {
  // Returns the number of warnings. If the search is not yet complete, this number can increase in the future as TestStand adds new warning messages. TestStand adds warning messages when it encounters an error while performing a search. A common error that can occur is when TestStand cannot load a file because of type conflicts.
  int32 returnValue = 1;
}

// SearchMatch
//
// The SearchResults object return objects of the SearchMatch class. SearchResults objects contain details about a match found as a result of a call to the PropertyObject.Search or Engine.SearchFiles methods.
//
service SearchMatch {
  // Method: GetLocation
  //
  // Returns the element of the property where the match was found and the location of the match within the property when the value is coerced to a string.
  //
  // Use the SearchMatch.MatchedText property to obtain the entire element value as a coerced string in which the match was found.
  //
  // SearchMatch_GetLocationRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchMatchInstance - The id of the SearchMatch object.
  //
  // SearchMatch_GetLocationResponse - The response message from the server. It provides the output parameters.
  //    - matchElement: int3 - Returns the element of the property in which the match was found. The value of this parameter is one of the SearchElements constants.
  //    - matchStart: int3 - Returns the zero-based index within the string of the starting character location of the match. Use the SearchMatch.MatchedText property to obtain the entire string in which the match was found.
  //    - matchLength: int3 - Returns the number of characters of the text that are part of the match.
  //
  rpc GetLocation(SearchMatch_GetLocationRequest) returns (SearchMatch_GetLocationResponse);
  
  
  // Method: GetPropertyPath
  //
  // Call this method to obtain the lookup string that indicates the location of the property that contains the match.
  //
  // If the match is from a SearchResults object that the Engine.SearchFiles method returns and the SearchMatch.TypeCategoryOfMatch property is TypeCategory_None, the SearchMatch.GetPropertyPath method returns a lookup string relative to the PropertyObjectFile.Data property. Prepend Data. to use this lookup string relative to the root of the PropertyObjectFile object.
  //
  // SearchMatch_GetPropertyPathRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SearchMatchInstance - The id of the SearchMatch object.
  //    - useNamesForIndices: bool - Pass True to obtain a property path that uses property names for array indexes when possible. The name of an object element in an array is not guaranteed to be unique within the array. If you pass True for this parameter, do not use the returned property path with methods that have a lookupString parameter, such as the PropertyObject.GetPropertyObject method and the PropertyObject.Exists method.
  //
  // SearchMatch_GetPropertyPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetPropertyPath(SearchMatch_GetPropertyPathRequest) returns (SearchMatch_GetPropertyPathResponse);
  
  
  // Method: UpdateForReplace
  //
  // Updates all the SearchMatch objects a replace operation affects. This method updates all the property paths and match locations of the current and neighboring SearchMatch objects as needed to make them consistent with the replace operation the replacementString parameter specifies.
  //
  // This method does not perform the actual replace operation. Use PropertyObject objects to edit the file or property before calling this method.
  //
  // SearchMatch_UpdateForReplaceRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SearchMatchInstance - The id of the SearchMatch object.
  //    - replacementString: string - Specifies the string with which the matched item was replaced.
  //
  // SearchMatch_UpdateForReplaceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc UpdateForReplace(SearchMatch_UpdateForReplaceRequest) returns (SearchMatch_UpdateForReplaceResponse);
  
  
  // Method: UpdateForReplaceValue
  //
  // Updates the value of the property the SearchMatch object references. This method sets the SearchMatch.MatchIsValid property to False for the current and neighboring SearchMatch objects as needed if the location of their match is the value.
  //
  // This method does not perform the actual replace operation. Use PropertyObject objects to edit the file or property before calling this method.
  //
  // SearchMatch_UpdateForReplaceValueRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SearchMatchInstance - The id of the SearchMatch object.
  //    - newValue: string - Specifies the string with which the value was replaced.
  //
  // SearchMatch_UpdateForReplaceValueResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc UpdateForReplaceValue(SearchMatch_UpdateForReplaceValueRequest) returns (SearchMatch_UpdateForReplaceValueResponse);
  
  

  // Property: MatchedText
  //
  // Returns the text string which contains the match. Use the SearchMatch.GetLocation method to determine which element of the property the string is from.
  //
  // Use the SearchMatch.UpdateForReplace method to alter the matched text. Use the SearchMatch.UpdateForReplaceValue method to alter the value of the property in which the match was found.
  //
  // SearchMatch_Get_MatchedTextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchMatchInstance - The id of the SearchMatch object.
  //
  // SearchMatch_Get_MatchedTextResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the text string which contains the match. Use the SearchMatch.GetLocation method to determine which element of the property the string is from. 
  //
  rpc Get_MatchedText(SearchMatch_Get_MatchedTextRequest) returns (SearchMatch_Get_MatchedTextResponse);
  
  
  // Property: FileDisplayName
  //
  // Returns the display name of the file in which the match was found.
  //
  // SearchMatch_Get_FileDisplayNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchMatchInstance - The id of the SearchMatch object.
  //
  // SearchMatch_Get_FileDisplayNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the display name of the file in which the match was found. 
  //
  rpc Get_FileDisplayName(SearchMatch_Get_FileDisplayNameRequest) returns (SearchMatch_Get_FileDisplayNameResponse);
  
  
  // Property: FilePath
  //
  // Returns the absolute file path of the file in which the match was found.
  //
  // Returns an empty string for unsaved files. Use the SearchMatch.FileDisplayName property to obtain a unique name for unsaved files.
  //
  // SearchMatch_Get_FilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchMatchInstance - The id of the SearchMatch object.
  //
  // SearchMatch_Get_FilePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the absolute file path of the file in which the match was found. 
  //
  rpc Get_FilePath(SearchMatch_Get_FilePathRequest) returns (SearchMatch_Get_FilePathResponse);
  
  
  // Property: FileId
  //
  // Returns the unique file ID of the file in which the match was found. This value is the same as the value the PropertyObjectFile.Id property returns.
  //
  // ID numbers change when a file is closed and reopened. Therefore, even if a file has a different ID than what this property contains, it might be the same file. Check the SearchMatch.FilePath property against the absolute path of the file, if one is available, to determine whether the file is the same.
  //
  // SearchMatch_Get_FileIdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchMatchInstance - The id of the SearchMatch object.
  //
  // SearchMatch_Get_FileIdResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the unique file ID of the file in which the match was found. This value is the same as the value the PropertyObjectFile.Id property returns. 
  //
  rpc Get_FileId(SearchMatch_Get_FileIdRequest) returns (SearchMatch_Get_FileIdResponse);
  
  
  // Property: TypeCategoryOfMatch
  //
  // Returns the TypeCategories constant that corresponds to the category of the type in which the match was found. If the match was not found in a type, this property returns TypeCategory_None.
  //
  // This property always returns TypeCategory_None when you create the search using the PropertyObject.Search method. The value is valid only when you create the search with the Engine.SearchFiles method.
  //
  // SearchMatch_Get_TypeCategoryOfMatchRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchMatchInstance - The id of the SearchMatch object.
  //
  // SearchMatch_Get_TypeCategoryOfMatchResponse - The response message from the server. It provides the return value.
  //    - returnValue: TypeCategories - Returns the TypeCategories constant that corresponds to the category of the type in which the match was found. If the match was not found in a type, this property returns TypeCategory_None. 
  //
  rpc Get_TypeCategoryOfMatch(SearchMatch_Get_TypeCategoryOfMatchRequest) returns (SearchMatch_Get_TypeCategoryOfMatchResponse);
  
  
  // Property: UserData
  //
  // Use this property to store any additional data you want to associate with the SearchMatch object. The value of this property is initially 0.
  //
  // SearchMatch_Set_UserDataRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchMatchInstance - The id of the SearchMatch object.
  //    - val: int32 - Use this property to store any additional data you want to associate with the SearchMatch object. The value of this property is initially 0. 
  //
  // SearchMatch_Set_UserDataResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SearchMatch_Get_UserDataRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchMatchInstance - The id of the SearchMatch object.
  //
  // SearchMatch_Get_UserDataResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Use this property to store any additional data you want to associate with the SearchMatch object. The value of this property is initially 0. 
  //
  rpc Set_UserData(SearchMatch_Set_UserDataRequest) returns (SearchMatch_Set_UserDataResponse);
  rpc Get_UserData(SearchMatch_Get_UserDataRequest) returns (SearchMatch_Get_UserDataResponse);
  
  
  // Property: PropertyValueAsString
  //
  // Returns a string that describes the value of the property that contains the match. This string is equivalent to the string the PropertyObject.GetFormattedValue method returns. If the property that contains the match does not have a value, this property returns an empty string.
  //
  // SearchMatch_Get_PropertyValueAsStringRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchMatchInstance - The id of the SearchMatch object.
  //
  // SearchMatch_Get_PropertyValueAsStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns a string that describes the value of the property that contains the match. This string is equivalent to the string the PropertyObject.GetFormattedValue method returns. If the property that contains the match does not have a value, this property returns an empty string. 
  //
  rpc Get_PropertyValueAsString(SearchMatch_Get_PropertyValueAsStringRequest) returns (SearchMatch_Get_PropertyValueAsStringResponse);
  
  
  // Property: PropertyValueType
  //
  // Returns the data type of the property that contains the match.
  //
  // SearchMatch_Get_PropertyValueTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchMatchInstance - The id of the SearchMatch object.
  //
  // SearchMatch_Get_PropertyValueTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyValueTypes - Returns the data type of the property that contains the match. 
  //
  rpc Get_PropertyValueType(SearchMatch_Get_PropertyValueTypeRequest) returns (SearchMatch_Get_PropertyValueTypeResponse);
  
  
  // Property: MatchIsValid
  //
  // Returns a value that indicates whether the match is valid. When this property is False, do not call the SearchMatch.UpdateForReplace method.
  //
  // This property is set to False when a call to the SearchMatch.UpdateForReplaceValue method invalidates or replaces the text that the match found.
  //
  // SearchMatch_Get_MatchIsValidRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchMatchInstance - The id of the SearchMatch object.
  //
  // SearchMatch_Get_MatchIsValidResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the match is valid. When this property is False, do not call the SearchMatch.UpdateForReplace method. 
  //
  rpc Get_MatchIsValid(SearchMatch_Get_MatchIsValidRequest) returns (SearchMatch_Get_MatchIsValidResponse);
  
  
}
message SearchMatch_GetLocationRequest {
  // The id of the SearchMatch object.
  SearchMatchInstance instance = 1;
}

message SearchMatch_GetLocationResponse {
  // Returns the element of the property in which the match was found. The value of this parameter is one of the SearchElements constants.
  SearchElements matchElement = 1;
  // Returns the zero-based index within the string of the starting character location of the match. Use the SearchMatch.MatchedText property to obtain the entire string in which the match was found.
  int32 matchStart = 2;
  // Returns the number of characters of the text that are part of the match.
  int32 matchLength = 3;
}

message SearchMatch_GetPropertyPathRequest {
  // The id of the SearchMatch object.
  SearchMatchInstance instance = 1;
  // Pass True to obtain a property path that uses property names for array indexes when possible. The name of an object element in an array is not guaranteed to be unique within the array. If you pass True for this parameter, do not use the returned property path with methods that have a lookupString parameter, such as the PropertyObject.GetPropertyObject method and the PropertyObject.Exists method.
  bool useNamesForIndices = 2;
}

message SearchMatch_GetPropertyPathResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message SearchMatch_UpdateForReplaceRequest {
  // The id of the SearchMatch object.
  SearchMatchInstance instance = 1;
  // Specifies the string with which the matched item was replaced.
  string replacementString = 2;
}

message SearchMatch_UpdateForReplaceResponse {
}

message SearchMatch_UpdateForReplaceValueRequest {
  // The id of the SearchMatch object.
  SearchMatchInstance instance = 1;
  // Specifies the string with which the value was replaced.
  string newValue = 2;
}

message SearchMatch_UpdateForReplaceValueResponse {
}

message SearchMatch_Get_MatchedTextRequest {
  // The id of the SearchMatch object.
  SearchMatchInstance instance = 1;
}

message SearchMatch_Get_MatchedTextResponse {
  // Returns the text string which contains the match. Use the SearchMatch.GetLocation method to determine which element of the property the string is from.
  string returnValue = 1;
}

message SearchMatch_Get_FileDisplayNameRequest {
  // The id of the SearchMatch object.
  SearchMatchInstance instance = 1;
}

message SearchMatch_Get_FileDisplayNameResponse {
  // Returns the display name of the file in which the match was found.
  string returnValue = 1;
}

message SearchMatch_Get_FilePathRequest {
  // The id of the SearchMatch object.
  SearchMatchInstance instance = 1;
}

message SearchMatch_Get_FilePathResponse {
  // Returns the absolute file path of the file in which the match was found.
  string returnValue = 1;
}

message SearchMatch_Get_FileIdRequest {
  // The id of the SearchMatch object.
  SearchMatchInstance instance = 1;
}

message SearchMatch_Get_FileIdResponse {
  // Returns the unique file ID of the file in which the match was found. This value is the same as the value the PropertyObjectFile.Id property returns.
  int32 returnValue = 1;
}

message SearchMatch_Get_TypeCategoryOfMatchRequest {
  // The id of the SearchMatch object.
  SearchMatchInstance instance = 1;
}

message SearchMatch_Get_TypeCategoryOfMatchResponse {
  // Returns the TypeCategories constant that corresponds to the category of the type in which the match was found. If the match was not found in a type, this property returns TypeCategory_None.
  TypeCategories returnValue = 1;
}

message SearchMatch_Set_UserDataRequest {
  // The id of the SearchMatch object.
  SearchMatchInstance instance = 1;
  // Use this property to store any additional data you want to associate with the SearchMatch object. The value of this property is initially 0.
  int32 val = 2;
}

message SearchMatch_Set_UserDataResponse {
}

message SearchMatch_Get_UserDataRequest {
  // The id of the SearchMatch object.
  SearchMatchInstance instance = 1;
}

message SearchMatch_Get_UserDataResponse {
  // Use this property to store any additional data you want to associate with the SearchMatch object. The value of this property is initially 0.
  int32 returnValue = 1;
}

message SearchMatch_Get_PropertyValueAsStringRequest {
  // The id of the SearchMatch object.
  SearchMatchInstance instance = 1;
}

message SearchMatch_Get_PropertyValueAsStringResponse {
  // Returns a string that describes the value of the property that contains the match. This string is equivalent to the string the PropertyObject.GetFormattedValue method returns. If the property that contains the match does not have a value, this property returns an empty string.
  string returnValue = 1;
}

message SearchMatch_Get_PropertyValueTypeRequest {
  // The id of the SearchMatch object.
  SearchMatchInstance instance = 1;
}

message SearchMatch_Get_PropertyValueTypeResponse {
  // Returns the data type of the property that contains the match.
  PropertyValueTypes returnValue = 1;
}

message SearchMatch_Get_MatchIsValidRequest {
  // The id of the SearchMatch object.
  SearchMatchInstance instance = 1;
}

message SearchMatch_Get_MatchIsValidResponse {
  // Returns a value that indicates whether the match is valid. When this property is False, do not call the SearchMatch.UpdateForReplace method.
  bool returnValue = 1;
}

// PropertyObjectType
//
// Use the PropertyObjectType class to obtain type information for a PropertyObject. Use the PropertyObject.Type property or the Engine.NewPropertyObjectType method to obtain an instance of this class.
//
service PropertyObjectType {
  // Method: IsEqualTo
  //
  // Compares this object to another PropertyObjectType.
  // 
  //
  // With no options, this method returns True if both PropertyObjectType objects have the same value for every property, the PropertyObjectType.ElementType properties are equal, and the PropertyObjectType.ArrayDimensions properties specify the same array bounds.
  //
  // PropertyObjectType_IsEqualToRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: PropertyObjectTypeInstance - The id of the PropertyObjectType object.
  //    - propObjType: PropertyObjectTypeInstance - Pass a PropertyObjectType to compare to this PropertyObjectType.
  //    - options: int32 - Specify any combination of TypeEqualOptions.
  //
  // PropertyObjectType_IsEqualToResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc IsEqualTo(PropertyObjectType_IsEqualToRequest) returns (PropertyObjectType_IsEqualToResponse);
  
  

  // Property: ValueType
  //
  // Returns the type of the value of a PropertyObject.
  //
  // If the property is an instance of a named type, ValueType does not return PropValType_NamedType. Instead, ValueType returns one of the other property value type constants to indicate the value type of the type definition. Use the PropertyObjectType.TypeName property to determine whether a property is an instance of a named type.
  //
  // PropertyObjectType_Get_ValueTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectTypeInstance - The id of the PropertyObjectType object.
  //
  // PropertyObjectType_Get_ValueTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyValueTypes - Returns the type of the value of a PropertyObject. 
  //
  rpc Get_ValueType(PropertyObjectType_Get_ValueTypeRequest) returns (PropertyObjectType_Get_ValueTypeResponse);
  
  
  // Property: IsObject
  //
  // This property is False for array elements that do not have an associated PropertyObject. You can acquire a PropertyObject to these elements through methods such as the PropertyObject.GetPropertyObject method. However, the PropertyObject TestStand returns is an alias to the element that internally accesses the element through the array and a lookup string.
  //
  // PropertyObjects that are not objects do not store a value for the PropertyObject.Name, PropertyObject.Comment, or PropertyObject.NumericFormat properties.
  //
  // PropertyObjectType_Get_IsObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectTypeInstance - The id of the PropertyObjectType object.
  //
  // PropertyObjectType_Get_IsObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - This property is False for array elements that do not have an associated PropertyObject. You can acquire a PropertyObject to these elements through methods such as the PropertyObject.GetPropertyObject method. However, the PropertyObject TestStand returns is an alias to the element that internally accesses the element through the array and a lookup string. 
  //
  rpc Get_IsObject(PropertyObjectType_Get_IsObjectRequest) returns (PropertyObjectType_Get_IsObjectResponse);
  
  
  // Property: TypeName
  //
  // For a PropertyObject that is an instance of a named type, this property is the type name of the named type. Otherwise, this property is an empty string.
  //
  // PropertyObjectType_Get_TypeNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectTypeInstance - The id of the PropertyObjectType object.
  //
  // PropertyObjectType_Get_TypeNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - For a PropertyObject that is an instance of a named type, this property is the type name of the named type. Otherwise, this property is an empty string. 
  //
  rpc Get_TypeName(PropertyObjectType_Get_TypeNameRequest) returns (PropertyObjectType_Get_TypeNameResponse);
  
  
  // Property: ElementType
  //
  // For a PropertyObject that is an array, this property returns the type of the array elements. Otherwise, this property is NULL.
  //
  // PropertyObjectType_Get_ElementTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectTypeInstance - The id of the PropertyObjectType object.
  //
  // PropertyObjectType_Get_ElementTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectTypeInstance - For a PropertyObject that is an array, this property returns the type of the array elements. Otherwise, this property is NULL. 
  //
  rpc Get_ElementType(PropertyObjectType_Get_ElementTypeRequest) returns (PropertyObjectType_Get_ElementTypeResponse);
  
  
  // Property: DisplayString
  //
  // Returns the type of the object.
  //
  // PropertyObjectType_Get_DisplayStringRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectTypeInstance - The id of the PropertyObjectType object.
  //
  // PropertyObjectType_Get_DisplayStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the type of the object. 
  //
  rpc Get_DisplayString(PropertyObjectType_Get_DisplayStringRequest) returns (PropertyObjectType_Get_DisplayStringResponse);
  
  
  // Property: ArrayDimensions
  //
  // Returns the dimensions for a PropertyObject that is an array. Returns zero dimensions for a PropertyObject that is not an array.
  //
  // When you change the dimensions of an array using the ArrayDimensions property, TestStand does not move existing elements to preserve their indices.  Indices of elements in the modified array may differ from the original.
  // To preserve the element indices of one-dimensional arrays, use methods on the PropertyObject interface.  Use PropertyObject.SetNumElements to set the size of a one-dimensional array.  Use the PropertyObject.Set_ByOffset methods (e.g.  PropertyObject.SetValBooleanByOffset) and specify the PropOption_InsertElement flag to insert new elements into a one-dimensional array.  Use PropertyObject.DeleteElements to delete specific elements from a one-dimensional array.
  // 
  //
  // PropertyObjectType_Get_ArrayDimensionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectTypeInstance - The id of the PropertyObjectType object.
  //
  // PropertyObjectType_Get_ArrayDimensionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: ArrayDimensionsInstance - Returns the dimensions for a PropertyObject that is an array. Returns zero dimensions for a PropertyObject that is not an array. 
  //
  rpc Get_ArrayDimensions(PropertyObjectType_Get_ArrayDimensionsRequest) returns (PropertyObjectType_Get_ArrayDimensionsResponse);
  
  
  // Property: Representation
  //
  // Specifies the representation of the PropertyObject. TestStand uses strict representation matching. Use the expression functions to convert the representation as needed.
  //
  // By default, TestStand sets the representation of non-numeric property objects to PropertyRepresentation_None.
  // TestStand number variables do not have separate numeric representations for 32-bit, 16-bit, and 8-bit integers. Historically, TestStand stored all numeric values, including integers, in a double-precision, floating-point format. However, for 64-bit integers, a double-precision, floating-point format is not sufficient because it cannot store all values of a 64-bit integer. Thus, TestStand now includes 64-bit integer representations. National Instruments recommends storing 32-bit, 16-bit, and 8-bit integer values using the double-precision representation because the double-precision format is sufficient for these data types, and most existing TestStand code expects numeric variables to use the double-precision representation.
  //
  // PropertyObjectType_Set_RepresentationRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectTypeInstance - The id of the PropertyObjectType object.
  //    - val: PropertyRepresentations - Specifies the representation of the PropertyObject. TestStand uses strict representation matching. Use the expression functions to convert the representation as needed. 
  //
  // PropertyObjectType_Set_RepresentationResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // PropertyObjectType_Get_RepresentationRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectTypeInstance - The id of the PropertyObjectType object.
  //
  // PropertyObjectType_Get_RepresentationResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyRepresentations - Specifies the representation of the PropertyObject. TestStand uses strict representation matching. Use the expression functions to convert the representation as needed. 
  //
  rpc Set_Representation(PropertyObjectType_Set_RepresentationRequest) returns (PropertyObjectType_Set_RepresentationResponse);
  rpc Get_Representation(PropertyObjectType_Get_RepresentationRequest) returns (PropertyObjectType_Get_RepresentationResponse);
  
  
  // Property: ClassName
  //
  // 
  //
  // PropertyObjectType_Get_ClassNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: PropertyObjectTypeInstance - The id of the PropertyObjectType object.
  //
  // PropertyObjectType_Get_ClassNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string -  
  //
  rpc Get_ClassName(PropertyObjectType_Get_ClassNameRequest) returns (PropertyObjectType_Get_ClassNameResponse);
  
  
}
message ArrayDimensionsInstance {
  // Specifies the handle of the ArrayDimensions instance in the server.
  string id = 1;
}
message PropertyObjectType_IsEqualToRequest {
  // The id of the PropertyObjectType object.
  PropertyObjectTypeInstance instance = 1;
  // Pass a PropertyObjectType to compare to this PropertyObjectType.
  PropertyObjectTypeInstance propObjType = 2;
  // Specify any combination of TypeEqualOptions.
  TypeEqualOptions options = 3;
}

message PropertyObjectType_IsEqualToResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message PropertyObjectType_Get_ValueTypeRequest {
  // The id of the PropertyObjectType object.
  PropertyObjectTypeInstance instance = 1;
}

message PropertyObjectType_Get_ValueTypeResponse {
  // Returns the type of the value of a PropertyObject.
  PropertyValueTypes returnValue = 1;
}

message PropertyObjectType_Get_IsObjectRequest {
  // The id of the PropertyObjectType object.
  PropertyObjectTypeInstance instance = 1;
}

message PropertyObjectType_Get_IsObjectResponse {
  // This property is False for array elements that do not have an associated PropertyObject. You can acquire a PropertyObject to these elements through methods such as the PropertyObject.GetPropertyObject method. However, the PropertyObject TestStand returns is an alias to the element that internally accesses the element through the array and a lookup string.
  bool returnValue = 1;
}

message PropertyObjectType_Get_TypeNameRequest {
  // The id of the PropertyObjectType object.
  PropertyObjectTypeInstance instance = 1;
}

message PropertyObjectType_Get_TypeNameResponse {
  // For a PropertyObject that is an instance of a named type, this property is the type name of the named type. Otherwise, this property is an empty string.
  string returnValue = 1;
}

message PropertyObjectType_Get_ElementTypeRequest {
  // The id of the PropertyObjectType object.
  PropertyObjectTypeInstance instance = 1;
}

message PropertyObjectType_Get_ElementTypeResponse {
  // For a PropertyObject that is an array, this property returns the type of the array elements. Otherwise, this property is NULL.
  PropertyObjectTypeInstance returnValue = 1;
}

message PropertyObjectType_Get_DisplayStringRequest {
  // The id of the PropertyObjectType object.
  PropertyObjectTypeInstance instance = 1;
}

message PropertyObjectType_Get_DisplayStringResponse {
  // Returns the type of the object.
  string returnValue = 1;
}

message PropertyObjectType_Get_ArrayDimensionsRequest {
  // The id of the PropertyObjectType object.
  PropertyObjectTypeInstance instance = 1;
}

message PropertyObjectType_Get_ArrayDimensionsResponse {
  // Returns the dimensions for a PropertyObject that is an array. Returns zero dimensions for a PropertyObject that is not an array.
  ArrayDimensionsInstance returnValue = 1;
}

message PropertyObjectType_Set_RepresentationRequest {
  // The id of the PropertyObjectType object.
  PropertyObjectTypeInstance instance = 1;
  // Specifies the representation of the PropertyObject. TestStand uses strict representation matching. Use the expression functions to convert the representation as needed.
  PropertyRepresentations val = 2;
}

message PropertyObjectType_Set_RepresentationResponse {
}

message PropertyObjectType_Get_RepresentationRequest {
  // The id of the PropertyObjectType object.
  PropertyObjectTypeInstance instance = 1;
}

message PropertyObjectType_Get_RepresentationResponse {
  // Specifies the representation of the PropertyObject. TestStand uses strict representation matching. Use the expression functions to convert the representation as needed.
  PropertyRepresentations returnValue = 1;
}

message PropertyObjectType_Get_ClassNameRequest {
  // The id of the PropertyObjectType object.
  PropertyObjectTypeInstance instance = 1;
}

message PropertyObjectType_Get_ClassNameResponse {
  // 
  string returnValue = 1;
}

// ArrayDimensions
//
// Use the ArrayDimensions class to obtain and set array bounds information for a PropertyObject. Use the PropertyObjectType.ArrayDimensions property to obtain an instance of this class.
//
service ArrayDimensions {
  // Method: GetLowerBounds
  //
  // Returns an array of numbers that contains the lowest valid index for each dimension.
  //
  // For a PropertyObject that is an empty array, this method returns an array with an element for every dimension in the PropertyObject array.
  //
  // ArrayDimensions_GetLowerBoundsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ArrayDimensionsInstance - The id of the ArrayDimensions object.
  //
  // ArrayDimensions_GetLowerBoundsResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated int32 - The return type of the Int32[] object.
  //
  rpc GetLowerBounds(ArrayDimensions_GetLowerBoundsRequest) returns (ArrayDimensions_GetLowerBoundsResponse);
  
  
  // Method: GetUpperBounds
  //
  // Returns an array of numbers that contains the highest valid index for each dimension.
  //
  // For a PropertyObject that is an empty array, this method returns an empty array.
  //
  // ArrayDimensions_GetUpperBoundsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ArrayDimensionsInstance - The id of the ArrayDimensions object.
  //
  // ArrayDimensions_GetUpperBoundsResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated int32 - The return type of the Int32[] object.
  //
  rpc GetUpperBounds(ArrayDimensions_GetUpperBoundsRequest) returns (ArrayDimensions_GetUpperBoundsResponse);
  
  
  // Method: SetBounds
  //
  // Sets the upper and lower bounds from number arrays for a PropertyObject that is an array.
  //
  // The elements in the array retain their values.
  //
  // ArrayDimensions_SetBoundsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ArrayDimensionsInstance - The id of the ArrayDimensions object.
  //    - lowerBounds: repeated int32 - An array of numbers that specifies the lowest valid index for each dimension.
  //    - upperBounds: repeated int32 - An array of numbers that specifies the highest valid index for each dimension.
  //
  // ArrayDimensions_SetBoundsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetBounds(ArrayDimensions_SetBoundsRequest) returns (ArrayDimensions_SetBoundsResponse);
  
  
  // Method: SetBoundsByStrings
  //
  // Sets the upper and lower bounds from strings for a PropertyObject that is an array.
  //
  // The elements in the array retain their values.
  //
  // ArrayDimensions_SetBoundsByStringsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ArrayDimensionsInstance - The id of the ArrayDimensions object.
  //    - lowerBounds: string - An array index string that specifies the lowest valid index for each dimension. For example, a two-dimensional array with a lower bound of 0 for the first dimension and 2 for the second dimension has the lower bound string "[0][2]".
  //    - upperBounds: string - An array index string that specifies the highest valid index for each dimension. For example, a two-dimensional array with an upper bound of 2 for the first dimension and 4 for the second dimension has the upper bound string "[2][4]".
  //
  // ArrayDimensions_SetBoundsByStringsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetBoundsByStrings(ArrayDimensions_SetBoundsByStringsRequest) returns (ArrayDimensions_SetBoundsByStringsResponse);
  
  
  // Method: GetDimensionsSizes
  //
  // Returns an array of numbers that contains the size of each dimension in the array.
  //
  // For a PropertyObject that is an empty array, this method returns an array with an element for every dimension in the PropertyObject array. Each element in the array this method returns has a value of zero.
  //
  // ArrayDimensions_GetDimensionsSizesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ArrayDimensionsInstance - The id of the ArrayDimensions object.
  //
  // ArrayDimensions_GetDimensionsSizesResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated int32 - The return type of the Int32[] object.
  //
  rpc GetDimensionsSizes(ArrayDimensions_GetDimensionsSizesRequest) returns (ArrayDimensions_GetDimensionsSizesResponse);
  
  

  // Property: LowerBoundsString
  //
  // Returns an array index string that specifies the lowest valid index for each dimension. For example, a two-dimensional array with a lower bound of 0 for the first dimension and 2 for the second dimension has the lower bound string "[0][2]".
  //
  // ArrayDimensions_Get_LowerBoundsStringRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ArrayDimensionsInstance - The id of the ArrayDimensions object.
  //
  // ArrayDimensions_Get_LowerBoundsStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns an array index string that specifies the lowest valid index for each dimension. For example, a two-dimensional array with a lower bound of 0 for the first dimension and 2 for the second dimension has the lower bound string "[0][2]". 
  //
  rpc Get_LowerBoundsString(ArrayDimensions_Get_LowerBoundsStringRequest) returns (ArrayDimensions_Get_LowerBoundsStringResponse);
  
  
  // Property: UpperBoundsString
  //
  // Returns an array index string that specifies the highest valid index for each dimension. For example, a two-dimensional array with an upper bound of 2 for the first dimension and 4 for the second dimension has the upper bound string "[2][4]".
  //
  // ArrayDimensions_Get_UpperBoundsStringRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ArrayDimensionsInstance - The id of the ArrayDimensions object.
  //
  // ArrayDimensions_Get_UpperBoundsStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns an array index string that specifies the highest valid index for each dimension. For example, a two-dimensional array with an upper bound of 2 for the first dimension and 4 for the second dimension has the upper bound string "[2][4]". 
  //
  rpc Get_UpperBoundsString(ArrayDimensions_Get_UpperBoundsStringRequest) returns (ArrayDimensions_Get_UpperBoundsStringResponse);
  
  
  // Property: DisplayString
  //
  // Returns the upper and lower bounds of each array dimension.
  //
  // ArrayDimensions_Get_DisplayStringRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ArrayDimensionsInstance - The id of the ArrayDimensions object.
  //
  // ArrayDimensions_Get_DisplayStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the upper and lower bounds of each array dimension. 
  //
  rpc Get_DisplayString(ArrayDimensions_Get_DisplayStringRequest) returns (ArrayDimensions_Get_DisplayStringResponse);
  
  
  // Property: NumDimensions
  //
  // Gets the number of dimensions in the array.
  //
  // ArrayDimensions_Get_NumDimensionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ArrayDimensionsInstance - The id of the ArrayDimensions object.
  //
  // ArrayDimensions_Get_NumDimensionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Gets the number of dimensions in the array. 
  //
  rpc Get_NumDimensions(ArrayDimensions_Get_NumDimensionsRequest) returns (ArrayDimensions_Get_NumDimensionsResponse);
  
  
}
message ArrayDimensions_GetLowerBoundsRequest {
  // The id of the ArrayDimensions object.
  ArrayDimensionsInstance instance = 1;
}

message ArrayDimensions_GetLowerBoundsResponse {
  // The return type of the Int32[] object.
  repeated int32 returnValue = 1;
}

message ArrayDimensions_GetUpperBoundsRequest {
  // The id of the ArrayDimensions object.
  ArrayDimensionsInstance instance = 1;
}

message ArrayDimensions_GetUpperBoundsResponse {
  // The return type of the Int32[] object.
  repeated int32 returnValue = 1;
}

message ArrayDimensions_SetBoundsRequest {
  // The id of the ArrayDimensions object.
  ArrayDimensionsInstance instance = 1;
  // An array of numbers that specifies the lowest valid index for each dimension.
  repeated int32 lowerBounds = 2;
  // An array of numbers that specifies the highest valid index for each dimension.
  repeated int32 upperBounds = 3;
}

message ArrayDimensions_SetBoundsResponse {
}

message ArrayDimensions_SetBoundsByStringsRequest {
  // The id of the ArrayDimensions object.
  ArrayDimensionsInstance instance = 1;
  // An array index string that specifies the lowest valid index for each dimension. For example, a two-dimensional array with a lower bound of 0 for the first dimension and 2 for the second dimension has the lower bound string "[0][2]".
  string lowerBounds = 2;
  // An array index string that specifies the highest valid index for each dimension. For example, a two-dimensional array with an upper bound of 2 for the first dimension and 4 for the second dimension has the upper bound string "[2][4]".
  string upperBounds = 3;
}

message ArrayDimensions_SetBoundsByStringsResponse {
}

message ArrayDimensions_GetDimensionsSizesRequest {
  // The id of the ArrayDimensions object.
  ArrayDimensionsInstance instance = 1;
}

message ArrayDimensions_GetDimensionsSizesResponse {
  // The return type of the Int32[] object.
  repeated int32 returnValue = 1;
}

message ArrayDimensions_Get_LowerBoundsStringRequest {
  // The id of the ArrayDimensions object.
  ArrayDimensionsInstance instance = 1;
}

message ArrayDimensions_Get_LowerBoundsStringResponse {
  // Returns an array index string that specifies the lowest valid index for each dimension. For example, a two-dimensional array with a lower bound of 0 for the first dimension and 2 for the second dimension has the lower bound string "[0][2]".
  string returnValue = 1;
}

message ArrayDimensions_Get_UpperBoundsStringRequest {
  // The id of the ArrayDimensions object.
  ArrayDimensionsInstance instance = 1;
}

message ArrayDimensions_Get_UpperBoundsStringResponse {
  // Returns an array index string that specifies the highest valid index for each dimension. For example, a two-dimensional array with an upper bound of 2 for the first dimension and 4 for the second dimension has the upper bound string "[2][4]".
  string returnValue = 1;
}

message ArrayDimensions_Get_DisplayStringRequest {
  // The id of the ArrayDimensions object.
  ArrayDimensionsInstance instance = 1;
}

message ArrayDimensions_Get_DisplayStringResponse {
  // Returns the upper and lower bounds of each array dimension.
  string returnValue = 1;
}

message ArrayDimensions_Get_NumDimensionsRequest {
  // The id of the ArrayDimensions object.
  ArrayDimensionsInstance instance = 1;
}

message ArrayDimensions_Get_NumDimensionsResponse {
  // The number of dimensions in the array.
  int32 returnValue = 1;
}

// ReportSection
//
// Use objects of this class to store, update, and transfer reports. You typically use ReportSection objects to avoid creating copies of a report as the report is transferred between the report generator, process models, Report object, and ReportView control. You can create a new ReportSection object by calling the Report.NewReportSection method. ReportSection objects can contain other ReportSection objects.
// Typically, a process model creates and updates the ReportSection object and assigns it to the Report object by setting the Report.ReportSection property.
//
service ReportSection {
  // Method: GetAllText
  //
  // Returns all the content of the ReportSection as a string.
  //
  // The returned string is a concatenation of the ReportSection.Header, ReportSection.Body, and ReportSection.GetAllText strings of all child ReportSection objects and the ReportSectionFooter string, in that order.
  //
  // ReportSection_GetAllTextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportSectionInstance - The id of the ReportSection object.
  //
  // ReportSection_GetAllTextResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetAllText(ReportSection_GetAllTextRequest) returns (ReportSection_GetAllTextResponse);
  
  

  // Property: ReportSubsections
  //
  // Specifies a reference to the ReportSections object, which is a collection that contains a list of child ReportSection objects to the current object.
  //
  // ReportSection_Set_ReportSubsectionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportSectionInstance - The id of the ReportSection object.
  //    - val: ReportSectionsInstance - Specifies a reference to the ReportSections object, which is a collection that contains a list of child ReportSection objects to the current object. 
  //
  // ReportSection_Set_ReportSubsectionsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ReportSection_Get_ReportSubsectionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportSectionInstance - The id of the ReportSection object.
  //
  // ReportSection_Get_ReportSubsectionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: ReportSectionsInstance - Specifies a reference to the ReportSections object, which is a collection that contains a list of child ReportSection objects to the current object. 
  //
  rpc Set_ReportSubsections(ReportSection_Set_ReportSubsectionsRequest) returns (ReportSection_Set_ReportSubsectionsResponse);
  rpc Get_ReportSubsections(ReportSection_Get_ReportSubsectionsRequest) returns (ReportSection_Get_ReportSubsectionsResponse);
  
  
  // Property: Body
  //
  // Specifies the string stored in the body of the ReportSection.
  //
  // ReportSection_Set_BodyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportSectionInstance - The id of the ReportSection object.
  //    - val: string - Specifies the string stored in the body of the ReportSection. 
  //
  // ReportSection_Set_BodyResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ReportSection_Get_BodyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportSectionInstance - The id of the ReportSection object.
  //
  // ReportSection_Get_BodyResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the string stored in the body of the ReportSection. 
  //
  rpc Set_Body(ReportSection_Set_BodyRequest) returns (ReportSection_Set_BodyResponse);
  rpc Get_Body(ReportSection_Get_BodyRequest) returns (ReportSection_Get_BodyResponse);
  
  
  // Property: IsEmpty
  //
  // Returns True only if the header, body, and footer of the ReportSection and the children are empty.
  //
  // ReportSection_Get_IsEmptyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportSectionInstance - The id of the ReportSection object.
  //
  // ReportSection_Get_IsEmptyResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True only if the header, body, and footer of the ReportSection and the children are empty. 
  //
  rpc Get_IsEmpty(ReportSection_Get_IsEmptyRequest) returns (ReportSection_Get_IsEmptyResponse);
  
  
  // Property: Id
  //
  // Returns a unique ID that distinguishes the ReportSection from all other ReportSection objects.
  // Note: The ID number is never zero.
  //
  // ReportSection_Get_IdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportSectionInstance - The id of the ReportSection object.
  //
  // ReportSection_Get_IdResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a unique ID that distinguishes the ReportSection from all other ReportSection objects. Note: The ID number is never zero. 
  //
  rpc Get_Id(ReportSection_Get_IdRequest) returns (ReportSection_Get_IdResponse);
  
  
  // Property: Header
  //
  // Specifies the string stored in the header of the ReportSection.
  //
  // ReportSection_Set_HeaderRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportSectionInstance - The id of the ReportSection object.
  //    - val: string - Specifies the string stored in the header of the ReportSection. 
  //
  // ReportSection_Set_HeaderResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ReportSection_Get_HeaderRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportSectionInstance - The id of the ReportSection object.
  //
  // ReportSection_Get_HeaderResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the string stored in the header of the ReportSection. 
  //
  rpc Set_Header(ReportSection_Set_HeaderRequest) returns (ReportSection_Set_HeaderResponse);
  rpc Get_Header(ReportSection_Get_HeaderRequest) returns (ReportSection_Get_HeaderResponse);
  
  
  // Property: Footer
  //
  // Specifies the string stored in the footer of the ReportSection.
  //
  // ReportSection_Set_FooterRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportSectionInstance - The id of the ReportSection object.
  //    - val: string - Specifies the string stored in the footer of the ReportSection. 
  //
  // ReportSection_Set_FooterResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ReportSection_Get_FooterRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportSectionInstance - The id of the ReportSection object.
  //
  // ReportSection_Get_FooterResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the string stored in the footer of the ReportSection. 
  //
  rpc Set_Footer(ReportSection_Set_FooterRequest) returns (ReportSection_Set_FooterResponse);
  rpc Get_Footer(ReportSection_Get_FooterRequest) returns (ReportSection_Get_FooterResponse);
  
  
}
message ReportSectionsInstance {
  // Specifies the handle of the ReportSections instance in the server.
  string id = 1;
}
message ReportSection_GetAllTextRequest {
  // The id of the ReportSection object.
  ReportSectionInstance instance = 1;
}

message ReportSection_GetAllTextResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message ReportSection_Set_ReportSubsectionsRequest {
  // The id of the ReportSection object.
  ReportSectionInstance instance = 1;
  // Specifies a reference to the ReportSections object, which is a collection that contains a list of child ReportSection objects to the current object.
  ReportSectionsInstance val = 2;
}

message ReportSection_Set_ReportSubsectionsResponse {
}

message ReportSection_Get_ReportSubsectionsRequest {
  // The id of the ReportSection object.
  ReportSectionInstance instance = 1;
}

message ReportSection_Get_ReportSubsectionsResponse {
  // Specifies a reference to the ReportSections object, which is a collection that contains a list of child ReportSection objects to the current object.
  ReportSectionsInstance returnValue = 1;
}

message ReportSection_Set_BodyRequest {
  // The id of the ReportSection object.
  ReportSectionInstance instance = 1;
  // Specifies the string stored in the body of the ReportSection.
  string val = 2;
}

message ReportSection_Set_BodyResponse {
}

message ReportSection_Get_BodyRequest {
  // The id of the ReportSection object.
  ReportSectionInstance instance = 1;
}

message ReportSection_Get_BodyResponse {
  // Specifies the string stored in the body of the ReportSection.
  string returnValue = 1;
}

message ReportSection_Get_IsEmptyRequest {
  // The id of the ReportSection object.
  ReportSectionInstance instance = 1;
}

message ReportSection_Get_IsEmptyResponse {
  // Returns True only if the header, body, and footer of the ReportSection and the children are empty.
  bool returnValue = 1;
}

message ReportSection_Get_IdRequest {
  // The id of the ReportSection object.
  ReportSectionInstance instance = 1;
}

message ReportSection_Get_IdResponse {
  // Returns a unique ID that distinguishes the ReportSection from all other ReportSection objects.
  // Note: The ID number is never zero.
  int32 returnValue = 1;
}

message ReportSection_Set_HeaderRequest {
  // The id of the ReportSection object.
  ReportSectionInstance instance = 1;
  // Specifies the string stored in the header of the ReportSection.
  string val = 2;
}

message ReportSection_Set_HeaderResponse {
}

message ReportSection_Get_HeaderRequest {
  // The id of the ReportSection object.
  ReportSectionInstance instance = 1;
}

message ReportSection_Get_HeaderResponse {
  // Specifies the string stored in the header of the ReportSection.
  string returnValue = 1;
}

message ReportSection_Set_FooterRequest {
  // The id of the ReportSection object.
  ReportSectionInstance instance = 1;
  // Specifies the string stored in the footer of the ReportSection.
  string val = 2;
}

message ReportSection_Set_FooterResponse {
}

message ReportSection_Get_FooterRequest {
  // The id of the ReportSection object.
  ReportSectionInstance instance = 1;
}

message ReportSection_Get_FooterResponse {
  // Specifies the string stored in the footer of the ReportSection.
  string returnValue = 1;
}

// ReportSections
//
// This class is a collection of ReportSection objects. The collection contains a list of ReportSection objects that are children of the ReportSection object from which the ReportSections object was obtained.
//
service ReportSections {
  // Method: Insert
  //
  // Adds a new item to the collection.
  //
  // ReportSections_InsertRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ReportSectionsInstance - The id of the ReportSections object.
  //    - index: int32 - Specifies the zero-based index at which to insert the new item. Pass -1 to insert the item at the end of the collection.
  //    - Header: string - Specifies the ReportSection.Header property of the new ReportSection.
  //    - Body: string - Specifies the ReportSection.Body property of the new ReportSection.
  //    - Footer: string - Specifies the ReportSection.Footer property of the new ReportSection.
  //
  // ReportSections_InsertResponse - The response message from the server. It provides the return value.
  //    - returnValue: ReportSectionInstance - The ReportSection this method inserts into the collection. 
  //
  rpc Insert(ReportSections_InsertRequest) returns (ReportSections_InsertResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // ReportSections_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ReportSectionsInstance - The id of the ReportSections object.
  //    - index: int32 - Specifies the zero-based index of the item to remove.
  //
  // ReportSections_RemoveResponse - The response message from the server. It provides the return value.
  //    - returnValue: ReportSectionInstance - The ReportSection this method removes from the collection. 
  //
  rpc Remove(ReportSections_RemoveRequest) returns (ReportSections_RemoveResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // ReportSections_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportSectionsInstance - The id of the ReportSections object.
  //
  // ReportSections_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(ReportSections_ClearRequest) returns (ReportSections_ClearResponse);
  
  
  // Method: InsertExisting
  //
  // Inserts an existing ReportSection object into the collection.
  //
  // ReportSections_InsertExistingRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ReportSectionsInstance - The id of the ReportSections object.
  //    - val: ReportSectionInstance - Specifies existing ReportSection to insert into the collection.
  //    - index: int32 - Specifies the zero-based index at which to insert the new item. Pass -1 to insert the item at the end of the collection.
  //
  // ReportSections_InsertExistingResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc InsertExisting(ReportSections_InsertExistingRequest) returns (ReportSections_InsertExistingResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // ReportSections_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ReportSectionsInstance - The id of the ReportSections object.
  //    - index: int32 - Specifies the zero-based index of the item to retrieve.
  //
  // ReportSections_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: ReportSectionInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(ReportSections_Get_ItemRequest) returns (ReportSections_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // ReportSections_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportSectionsInstance - The id of the ReportSections object.
  //
  // ReportSections_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(ReportSections_Get_CountRequest) returns (ReportSections_Get_CountResponse);
  
  
}
message ReportSections_InsertRequest {
  // The id of the ReportSections object.
  ReportSectionsInstance instance = 1;
  // Specifies the zero-based index at which to insert the new item. Pass -1 to insert the item at the end of the collection.
  int32 index = 2;
  // Specifies the ReportSection.Header property of the new ReportSection.
  string Header = 3;
  // Specifies the ReportSection.Body property of the new ReportSection.
  string Body = 4;
  // Specifies the ReportSection.Footer property of the new ReportSection.
  string Footer = 5;
}

message ReportSections_InsertResponse {
  // The ReportSection this method inserts into the collection.
  ReportSectionInstance returnValue = 1;
}

message ReportSections_RemoveRequest {
  // The id of the ReportSections object.
  ReportSectionsInstance instance = 1;
  // Specifies the zero-based index of the item to remove.
  int32 index = 2;
}

message ReportSections_RemoveResponse {
  // The ReportSection this method removes from the collection.
  ReportSectionInstance returnValue = 1;
}

message ReportSections_ClearRequest {
  // The id of the ReportSections object.
  ReportSectionsInstance instance = 1;
}

message ReportSections_ClearResponse {
}

message ReportSections_InsertExistingRequest {
  // The id of the ReportSections object.
  ReportSectionsInstance instance = 1;
  // Specifies existing ReportSection to insert into the collection.
  ReportSectionInstance val = 2;
  // Specifies the zero-based index at which to insert the new item. Pass -1 to insert the item at the end of the collection.
  int32 index = 3;
}

message ReportSections_InsertExistingResponse {
}

message ReportSections_Get_ItemRequest {
  // The id of the ReportSections object.
  ReportSectionsInstance instance = 1;
  // Specifies the zero-based index of the item to retrieve.
  optional int32 index = 2;
}

message ReportSections_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  ReportSectionInstance returnValue = 1;
}

message ReportSections_Get_CountRequest {
  // The id of the ReportSections object.
  ReportSectionsInstance instance = 1;
}

message ReportSections_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// SequenceFile
//
// Objects of the SequenceFile class represent a sequence file that can contain sequences. You can obtain a reference to a SequenceFile object by using the Engine.GetSequenceFileEx or Engine.NewSequenceFile methods. Use the reference to examine or modify sequence file settings and to examine or modify the list of sequences in the sequence file.
//
service SequenceFile {
  // Method: GetSequence
  //
  // Obtains a reference to a Sequence object that you specify by an index.
  //
  // SequenceFile_GetSequenceRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //    - index: int32 - Specifies a zero-based index to indicate the sequence.
  //
  // SequenceFile_GetSequenceResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceInstance - The return type of the Sequence object.
  //
  rpc GetSequence(SequenceFile_GetSequenceRequest) returns (SequenceFile_GetSequenceResponse);
  
  
  // Method: GetSequenceByName
  //
  // Returns a reference to a Sequence object you specify by name.
  //
  // Sequence names are case-insensitive.
  //
  // SequenceFile_GetSequenceByNameRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //    - sequenceNameParam: string - Specifies the name of the Sequence object to which you want a reference. If the sequence name does not exist, the method reports an error.
  //
  // SequenceFile_GetSequenceByNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceInstance - The return type of the Sequence object.
  //
  rpc GetSequenceByName(SequenceFile_GetSequenceByNameRequest) returns (SequenceFile_GetSequenceByNameResponse);
  
  
  // Method: SequenceNameExists
  //
  // Returns True if a sequence with the name you specify already exists in the sequence file.
  //
  // SequenceFile_SequenceNameExistsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //    - sequenceNameParam: string - Specifies a sequence name to search for. Sequence names are case-insensitive.
  //
  // SequenceFile_SequenceNameExistsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc SequenceNameExists(SequenceFile_SequenceNameExistsRequest) returns (SequenceFile_SequenceNameExistsResponse);
  
  
  // Method: InsertSequence
  //
  // Note: This method is obsolete. Use the SequenceFile.InsertSequenceEx method instead.
  //
  // Adds a sequence to the end of the sequences list in the sequence file.
  // Note: The name of a sequence must be unique if it is contained within a sequence file. Inserting two or more sequences with the same name into a sequence file might result in unexpected behavior.
  //
  // SequenceFile_InsertSequenceRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //    - sequenceToInsert: SequenceInstance - Specifies the sequence to insert.
  //
  // SequenceFile_InsertSequenceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc InsertSequence(SequenceFile_InsertSequenceRequest) returns (SequenceFile_InsertSequenceResponse);
  
  
  // Method: RemoveSequence
  //
  // Removes a sequence from a sequence file and returns a reference to it.
  //
  // SequenceFile_RemoveSequenceRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //    - index: int32 - Specifies a zero-based index to indicate the sequence to remove.
  //
  // SequenceFile_RemoveSequenceResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceInstance - The return type of the Sequence object.
  //
  rpc RemoveSequence(SequenceFile_RemoveSequenceRequest) returns (SequenceFile_RemoveSequenceResponse);
  
  
  // Method: DeleteSequence
  //
  // Deletes the specified sequence from the sequence file.
  //
  // SequenceFile_DeleteSequenceRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //    - index: int32 - Specifies a zero-based index to indicate the sequence to delete.
  //
  // SequenceFile_DeleteSequenceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc DeleteSequence(SequenceFile_DeleteSequenceRequest) returns (SequenceFile_DeleteSequenceResponse);
  
  
  // Method: Save
  //
  // Saves the sequence file to disk.
  //
  // Calling this method with an empty string argument has the same effect as calling the PropertyObjectFile.WriteFile method.
  // Ensure the pathString provided is an absolute path and not relative.
  //
  // SequenceFile_SaveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //    - pathString: string - Specifies the absolute pathname with which to save the file. Pass an empty string to save the file using the same pathname with which TestStand last loaded or saved it.
  //
  // SequenceFile_SaveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Save(SequenceFile_SaveRequest) returns (SequenceFile_SaveResponse);
  
  
  // Method: GetModelSequenceFile
  //
  // Returns a reference to the process model sequence file that TestStand associates with the sequence file on which you call the method. Release this reference when you are finished using it.
  //
  // Returns a NULL reference if the sequence file on which you call the method does not have a process model associated with it. The modelDescriptionString parameter contains a descriptive message even if this method returns NULL.
  //
  // SequenceFile_GetModelSequenceFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //
  // SequenceFile_GetModelSequenceFileResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: SequenceFileInstance - The return type of the SequenceFile object.
  //    - modelDescriptionString: strin - Returns a string that describes the process model file.
  //
  rpc GetModelSequenceFile(SequenceFile_GetModelSequenceFileRequest) returns (SequenceFile_GetModelSequenceFileResponse);
  
  
  // Method: CreateCallbackOverrideSequence
  //
  // Use this method to create a callback sequence in the sequence file. The callback sequence you create overrides the Model, Engine, or Front-End callback of the same name as the callback you create.
  //
  // SequenceFile_CreateCallbackOverrideSequenceRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //    - callbackName: string - The name of the callback sequence to override. Specify the sequence name of a Model, Engine, or Front-End callback. Refer to DefaultModelCallbacks and SeqFileCallbacks constants for possible values for this parameter.
  //    - allowCopyDefaultSteps: bool - Pass True to copy the steps of the sequence you are overriding into the new sequence.
  //
  // SequenceFile_CreateCallbackOverrideSequenceResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceInstance - Specifies a reference to the callback the method creates. Release this reference when you are finished with it. 
  //
  rpc CreateCallbackOverrideSequence(SequenceFile_CreateCallbackOverrideSequenceRequest) returns (SequenceFile_CreateCallbackOverrideSequenceResponse);
  
  
  // Method: NewEditContext
  //
  // Returns a sequence context that approximates the sequence context TestStand creates when you run a sequence in the sequence file.
  //
  // You can pass the object this method returns as a parameter to the Engine.DisplayBrowseExprDialogEx and Engine.DisplayBrowsePropertyObjectDialog methods.
  //
  // SequenceFile_NewEditContextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //
  // SequenceFile_NewEditContextResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceContextInstance - A reference to a SequenceContext object. Release this reference when you are finished using it. 
  //
  rpc NewEditContext(SequenceFile_NewEditContextRequest) returns (SequenceFile_NewEditContextResponse);
  
  
  // Method: IncChangeCount
  //
  // Increments the file change count.
  //
  // Increment the change count when making changes to the file to indicate to the sequence editor or user interface that the file was modified.
  // Calling this method has the same effect as calling the PropertyObjectFile.IncChangeCount method.
  //
  // SequenceFile_IncChangeCountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //
  // SequenceFile_IncChangeCountResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc IncChangeCount(SequenceFile_IncChangeCountRequest) returns (SequenceFile_IncChangeCountResponse);
  
  
  // Method: GetSequenceIndex
  //
  // Returns the index of the sequence in the sequence file that has the name you specify.
  //
  // SequenceFile_GetSequenceIndexRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //    - sequenceNameParam: string - Specifies the name of a sequence in the sequence file.
  //
  // SequenceFile_GetSequenceIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the index of the sequence for which you specify a name. Returns -1 if no such sequence exists. 
  //
  rpc GetSequenceIndex(SequenceFile_GetSequenceIndexRequest) returns (SequenceFile_GetSequenceIndexResponse);
  
  
  // Method: AsPropertyObject
  //
  // Returns the underlying PropertyObject that represents the SequenceFile object. Use the PropertyObject to modify, add, or remove custom properties of the object.
  //
  // SequenceFile_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //
  // SequenceFile_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(SequenceFile_AsPropertyObjectRequest) returns (SequenceFile_AsPropertyObjectResponse);
  
  
  // Method: LoadModules
  //
  // Loads the code modules for all steps in all sequences of the sequence file.
  //
  // SequenceFile_LoadModulesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //    - loadOptions: int32 - Specifies one or more LoadModuleOptions using the bitwise-OR operator to modify the behavior of this method.
  //    - sequenceContextParam: ObjectInstance - If you are passing the LoadModule_EvaluateExpressions flag to the loadOptions parameter, pass a SequenceContext object for this parameter to use when evaluating the expressions. Also, if you are calling this method from a step in an execution, pass the sequence context of the execution.
  //
  // SequenceFile_LoadModulesResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True on success or False if a module fails to load. 
  //
  rpc LoadModules(SequenceFile_LoadModulesRequest) returns (SequenceFile_LoadModulesResponse);
  
  
  // Method: AsPropertyObjectFile
  //
  // Returns the underlying PropertyObjectFile that represents the SequenceFile object.
  //
  // SequenceFile_AsPropertyObjectFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //
  // SequenceFile_AsPropertyObjectFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectFileInstance - The return type of the PropertyObjectFile object.
  //
  rpc AsPropertyObjectFile(SequenceFile_AsPropertyObjectFileRequest) returns (SequenceFile_AsPropertyObjectFileResponse);
  
  
  // Method: GetModelAbsolutePath
  //
  // Returns the absolute pathname of the process model sequence file associated with this sequence file.
  //
  // Returns an empty string if the file has no model or if the model file could not be found.
  //
  // SequenceFile_GetModelAbsolutePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //
  // SequenceFile_GetModelAbsolutePathResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: string - The return type of the String object.
  //    - modelExists: boo - Returns True if the model file was found.
  //
  rpc GetModelAbsolutePath(SequenceFile_GetModelAbsolutePathRequest) returns (SequenceFile_GetModelAbsolutePathResponse);
  
  
  // Method: InsertSequenceEx
  //
  // Inserts a sequence at the specified index.
  //
  // Do not insert a sequence into a sequence file when the sequence resides in another sequence file. The sequence reference that you pass must be the only reference to the sequence. You can obtain the sole reference to a sequence by calling the Engine.NewSequence or SequenceFile.RemoveSequence methods.
  // Note: The name of a sequence must be unique if it is contained within a sequence file. Inserting two or more sequences with the same name into a sequence file might cause unexpected behavior.
  //
  // SequenceFile_InsertSequenceExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //    - index: int32 - Specifies the zero-based index at which to insert the sequence.
  //    - sequenceToInsert: SequenceInstance - Specifies the sequence to insert.
  //
  // SequenceFile_InsertSequenceExResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc InsertSequenceEx(SequenceFile_InsertSequenceExRequest) returns (SequenceFile_InsertSequenceExResponse);
  
  
  // Method: UnloadModules
  //
  // Unloads the code modules from all steps in all sequences of the sequence file.
  //
  // SequenceFile_UnloadModulesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //
  // SequenceFile_UnloadModulesResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if all modules were successfully unloaded. If any sequences in the file are executing when you call this method, the method returns False. 
  //
  rpc UnloadModules(SequenceFile_UnloadModulesRequest) returns (SequenceFile_UnloadModulesResponse);
  
  
  // Method: GetReservedCallbackNames
  //
  // Obtains the list of reserved Engine callback names.
  //
  // SequenceFile_GetReservedCallbackNamesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //
  // SequenceFile_GetReservedCallbackNamesResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated string - Array of reserved callback names the function returns. 
  //
  rpc GetReservedCallbackNames(SequenceFile_GetReservedCallbackNamesRequest) returns (SequenceFile_GetReservedCallbackNamesResponse);
  
  
  // Method: GetModelCallbackNames
  //
  // Obtains the list of Model callback names based on the model assigned to the sequence file.
  //
  // SequenceFile_GetModelCallbackNamesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //
  // SequenceFile_GetModelCallbackNamesResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated string - Array of Model callback names the function returns. 
  //
  rpc GetModelCallbackNames(SequenceFile_GetModelCallbackNamesRequest) returns (SequenceFile_GetModelCallbackNamesResponse);
  
  
  // Method: AddLoadReference
  //
  // Adds a load reference that keeps the file in the internal cache of the engine.
  //
  // Call this method to add an additional load reference to  the sequence file. TestStand uses the load reference count to determine when to unload the sequence file from the internal cache of the engine. In addition to this method, the Engine.GetSequenceFileEx and Engine.NewSequenceFile methods also add a load reference to the sequence file. The Engine.ReleaseSequenceFileEx method removes a load reference.
  // You must call the Engine.ReleaseSequenceFileEx method for each load reference you add to the sequence file. When you release the last load reference, TestStand unloads the file from the internal cache of the engine, TestStand executes the SequenceFileUnload callback sequence, if applicable.
  // This method generates an error if the sequence file does not have any load references initially.
  //
  // SequenceFile_AddLoadReferenceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //
  // SequenceFile_AddLoadReferenceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc AddLoadReference(SequenceFile_AddLoadReferenceRequest) returns (SequenceFile_AddLoadReferenceResponse);
  
  

  // Property: NumSequences
  //
  // Returns the number of sequences contained in the sequence file.
  //
  // SequenceFile_Get_NumSequencesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //
  // SequenceFile_Get_NumSequencesResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of sequences contained in the sequence file. 
  //
  rpc Get_NumSequences(SequenceFile_Get_NumSequencesRequest) returns (SequenceFile_Get_NumSequencesResponse);
  
  
  // Property: FileGlobalsDefaultValues
  //
  // Returns the PropertyObject that contains the default values of the global variables for the sequence file.
  //
  // SequenceFile_Get_FileGlobalsDefaultValuesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //
  // SequenceFile_Get_FileGlobalsDefaultValuesResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Returns the PropertyObject that contains the default values of the global variables for the sequence file. 
  //
  rpc Get_FileGlobalsDefaultValues(SequenceFile_Get_FileGlobalsDefaultValuesRequest) returns (SequenceFile_Get_FileGlobalsDefaultValuesResponse);
  
  
  // Property: Path
  //
  // Returns the pathname TestStand used when the sequence file was last saved or loaded.
  //
  // This property returns the same value as the PropertyObjectFile.Path property.
  //
  // SequenceFile_Set_PathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //    - val: string - Returns the pathname TestStand used when the sequence file was last saved or loaded. 
  //
  // SequenceFile_Set_PathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceFile_Get_PathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //
  // SequenceFile_Get_PathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the pathname TestStand used when the sequence file was last saved or loaded. 
  //
  rpc Set_Path(SequenceFile_Set_PathRequest) returns (SequenceFile_Set_PathResponse);
  rpc Get_Path(SequenceFile_Get_PathRequest) returns (SequenceFile_Get_PathResponse);
  
  
  // Property: ModuleLoadOption
  //
  // This property instructs TestStand when to load the code modules the steps in the sequence file call. You can use this property to override the load option of all steps in the sequence file, or you can defer to the load option contained in each individual step.
  //
  // SequenceFile_Set_ModuleLoadOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //    - val: ModuleLoadOptions - This property instructs TestStand when to load the code modules the steps in the sequence file call. You can use this property to override the load option of all steps in the sequence file, or you can defer to the load option contained in each individual step. 
  //
  // SequenceFile_Set_ModuleLoadOptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceFile_Get_ModuleLoadOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //
  // SequenceFile_Get_ModuleLoadOptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: ModuleLoadOptions - This property instructs TestStand when to load the code modules the steps in the sequence file call. You can use this property to override the load option of all steps in the sequence file, or you can defer to the load option contained in each individual step. 
  //
  rpc Set_ModuleLoadOption(SequenceFile_Set_ModuleLoadOptionRequest) returns (SequenceFile_Set_ModuleLoadOptionResponse);
  rpc Get_ModuleLoadOption(SequenceFile_Get_ModuleLoadOptionRequest) returns (SequenceFile_Get_ModuleLoadOptionResponse);
  
  
  // Property: ModuleUnloadOption
  //
  // This property instructs TestStand when to unload the code modules the steps in the sequence file call. You can use this property to override the unload option of all steps in the sequence file, or you can defer to the unload option contained in each individual step.
  //
  // SequenceFile_Set_ModuleUnloadOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //    - val: ModuleUnloadOptions - This property instructs TestStand when to unload the code modules the steps in the sequence file call. You can use this property to override the unload option of all steps in the sequence file, or you can defer to the unload option contained in each individual step. 
  //
  // SequenceFile_Set_ModuleUnloadOptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceFile_Get_ModuleUnloadOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //
  // SequenceFile_Get_ModuleUnloadOptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: ModuleUnloadOptions - This property instructs TestStand when to unload the code modules the steps in the sequence file call. You can use this property to override the unload option of all steps in the sequence file, or you can defer to the unload option contained in each individual step. 
  //
  rpc Set_ModuleUnloadOption(SequenceFile_Set_ModuleUnloadOptionRequest) returns (SequenceFile_Set_ModuleUnloadOptionResponse);
  rpc Get_ModuleUnloadOption(SequenceFile_Get_ModuleUnloadOptionRequest) returns (SequenceFile_Get_ModuleUnloadOptionResponse);
  
  
  // Property: HasModel
  //
  // Returns True if TestStand associates a process model sequence file with the sequence file on which you call the method.
  //
  // SequenceFile_Get_HasModelRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //
  // SequenceFile_Get_HasModelResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if TestStand associates a process model sequence file with the sequence file on which you call the method. 
  //
  rpc Get_HasModel(SequenceFile_Get_HasModelRequest) returns (SequenceFile_Get_HasModelResponse);
  
  
  // Property: UnloadCallbackEnabled
  //
  // Specifies if TestStand calls the SequenceFileUnload callback sequence when unloading the sequence file. Set this property to False to prevent TestStand from calling the SequenceFileUnload callback for the sequence file.
  //
  // SequenceFile_Set_UnloadCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //    - val: bool - Specifies if TestStand calls the SequenceFileUnload callback sequence when unloading the sequence file. Set this property to False to prevent TestStand from calling the SequenceFileUnload callback for the sequence file. 
  //
  // SequenceFile_Set_UnloadCallbackEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceFile_Get_UnloadCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //
  // SequenceFile_Get_UnloadCallbackEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if TestStand calls the SequenceFileUnload callback sequence when unloading the sequence file. Set this property to False to prevent TestStand from calling the SequenceFileUnload callback for the sequence file. 
  //
  rpc Set_UnloadCallbackEnabled(SequenceFile_Set_UnloadCallbackEnabledRequest) returns (SequenceFile_Set_UnloadCallbackEnabledResponse);
  rpc Get_UnloadCallbackEnabled(SequenceFile_Get_UnloadCallbackEnabledRequest) returns (SequenceFile_Get_UnloadCallbackEnabledResponse);
  
  
  // Property: IsExecuting
  //
  // Returns True if the sequence file contains one or more currently active sequences in an execution.
  //
  // If this property returns True, do not edit the sequence file.
  //
  // SequenceFile_Get_IsExecutingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //
  // SequenceFile_Get_IsExecutingResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the sequence file contains one or more currently active sequences in an execution. 
  //
  rpc Get_IsExecuting(SequenceFile_Get_IsExecutingRequest) returns (SequenceFile_Get_IsExecutingResponse);
  
  
  // Property: ChangeCount
  //
  // Returns the number of modifications that have been made to the sequence file since it was loaded into memory.
  //
  // The sequence editor and user interfaces use this count to determine when to refresh sequence displays and when to indicate to the user that a sequence file has been modified.
  // This property returns the same value as the PropertyObjectFile.ChangeCount property.
  //
  // SequenceFile_Get_ChangeCountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //
  // SequenceFile_Get_ChangeCountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of modifications that have been made to the sequence file since it was loaded into memory. 
  //
  rpc Get_ChangeCount(SequenceFile_Get_ChangeCountRequest) returns (SequenceFile_Get_ChangeCountResponse);
  
  
  // Property: SequenceFileType
  //
  // Specifies the type of sequence file.
  //
  // SequenceFile_Set_SequenceFileTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //    - val: SequenceFileTypes - Specifies the type of sequence file. 
  //
  // SequenceFile_Set_SequenceFileTypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceFile_Get_SequenceFileTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //
  // SequenceFile_Get_SequenceFileTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFileTypes - Specifies the type of sequence file. 
  //
  rpc Set_SequenceFileType(SequenceFile_Set_SequenceFileTypeRequest) returns (SequenceFile_Set_SequenceFileTypeResponse);
  rpc Get_SequenceFileType(SequenceFile_Get_SequenceFileTypeRequest) returns (SequenceFile_Get_SequenceFileTypeResponse);
  
  
  // Property: CanUnload
  //
  // Returns a value that indicates whether the sequence file can be removed from the internal cache of the engine.
  //
  // The engine cannot unload a sequence file from the internal cache if multiple load references to it exist or if it is currently executing. Use this method to determine whether calling the Engine.ReleaseSequenceFileEx method would remove the file from the internal cache and return True.
  // Note: Even if this function returns True, the Engine.ReleaseSequenceFileEx method might return False if another thread added a load reference to this file between the calls to this method and the Engine.ReleaseSequenceFileEx method.
  //
  // SequenceFile_Get_CanUnloadRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //
  // SequenceFile_Get_CanUnloadResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the sequence file can be removed from the internal cache of the engine. 
  //
  rpc Get_CanUnload(SequenceFile_Get_CanUnloadRequest) returns (SequenceFile_Get_CanUnloadResponse);
  
  
  // Property: Id
  //
  // Returns a unique ID number for the sequence file.
  // Note: The ID number is never zero.
  //
  // The ID number is unique with respect to all sequence files that you open before you shut down the TestStand Engine.
  // Use this ID number to compare two SequenceFile object references to determine whether they refer to the same underlying sequence file.
  //
  // SequenceFile_Get_IdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //
  // SequenceFile_Get_IdResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a unique ID number for the sequence file. Note: The ID number is never zero. 
  //
  rpc Get_Id(SequenceFile_Get_IdRequest) returns (SequenceFile_Get_IdResponse);
  
  
  // Property: ModelOption
  //
  // Specifies the process model file to use for the sequence file.
  //
  // This setting is valid only when you enable the Allow Other Model Settings option in the Station Options dialog box. Refer to StationOptions.AllowOtherModels for more information about allowing sequence files to specify a process model file other than the current station model file.
  //
  // SequenceFile_Set_ModelOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //    - val: ModelOptions - Specifies the process model file to use for the sequence file. 
  //
  // SequenceFile_Set_ModelOptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceFile_Get_ModelOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //
  // SequenceFile_Get_ModelOptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: ModelOptions - Specifies the process model file to use for the sequence file. 
  //
  rpc Set_ModelOption(SequenceFile_Set_ModelOptionRequest) returns (SequenceFile_Set_ModelOptionResponse);
  rpc Get_ModelOption(SequenceFile_Get_ModelOptionRequest) returns (SequenceFile_Get_ModelOptionResponse);
  
  
  // Property: ModelPath
  //
  // Specifies the file path of a particular model file.
  //
  // Specifies the file path to a model file when the value of the SequenceFile.ModelOption property is ModelOption_RequireSpecificModel.
  //
  // SequenceFile_Set_ModelPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //    - val: string - Specifies the file path of a particular model file. 
  //
  // SequenceFile_Set_ModelPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceFile_Get_ModelPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //
  // SequenceFile_Get_ModelPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the file path of a particular model file. 
  //
  rpc Set_ModelPath(SequenceFile_Set_ModelPathRequest) returns (SequenceFile_Set_ModelPathResponse);
  rpc Get_ModelPath(SequenceFile_Get_ModelPathRequest) returns (SequenceFile_Get_ModelPathResponse);
  
  
  // Property: BatchSyncOption
  //
  // Specifies the batch synchronization operation corresponding to all the steps contained in the sequence file when the synchronization setting is BatchSyncOption_UseSeqFileSetting.
  //
  // SequenceFile_Set_BatchSyncOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //    - val: SeqFileBatchSynchronizationOptions - Specifies the batch synchronization operation corresponding to all the steps contained in the sequence file when the synchronization setting is BatchSyncOption_UseSeqFileSetting. 
  //
  // SequenceFile_Set_BatchSyncOptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceFile_Get_BatchSyncOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //
  // SequenceFile_Get_BatchSyncOptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: SeqFileBatchSynchronizationOptions - Specifies the batch synchronization operation corresponding to all the steps contained in the sequence file when the synchronization setting is BatchSyncOption_UseSeqFileSetting. 
  //
  rpc Set_BatchSyncOption(SequenceFile_Set_BatchSyncOptionRequest) returns (SequenceFile_Set_BatchSyncOptionResponse);
  rpc Get_BatchSyncOption(SequenceFile_Get_BatchSyncOptionRequest) returns (SequenceFile_Get_BatchSyncOptionResponse);
  
  
  // Property: FileGlobalsScope
  //
  // Specifies the lifetime of the sequence file global variables and whether multiple executions share the sequence file global variable values.
  //
  // If a sequence file unloads from memory and an execution later reloads the sequence file, the execution creates a new run-time copy of the file global variables and initializes the variables to the default values.
  //
  // SequenceFile_Set_FileGlobalsScopeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //    - val: FileGlobalsScopeOptions - Specifies the lifetime of the sequence file global variables and whether multiple executions share the sequence file global variable values. 
  //
  // SequenceFile_Set_FileGlobalsScopeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceFile_Get_FileGlobalsScopeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //
  // SequenceFile_Get_FileGlobalsScopeResponse - The response message from the server. It provides the return value.
  //    - returnValue: FileGlobalsScopeOptions - Specifies the lifetime of the sequence file global variables and whether multiple executions share the sequence file global variable values. 
  //
  rpc Set_FileGlobalsScope(SequenceFile_Set_FileGlobalsScopeRequest) returns (SequenceFile_Set_FileGlobalsScopeResponse);
  rpc Get_FileGlobalsScope(SequenceFile_Get_FileGlobalsScopeRequest) returns (SequenceFile_Get_FileGlobalsScopeResponse);
  
  
  // Property: ModelPluginDescription
  //
  // Returns the FileGlobals.ModelPluginComponentDescription variable, if it exists. Otherwise, returns null. This property is accessible even if the file is locked.
  //
  // SequenceFile_Get_ModelPluginDescriptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileInstance - The id of the SequenceFile object.
  //
  // SequenceFile_Get_ModelPluginDescriptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Returns the FileGlobals.ModelPluginComponentDescription variable, if it exists. Otherwise, returns null. This property is accessible even if the file is locked. 
  //
  rpc Get_ModelPluginDescription(SequenceFile_Get_ModelPluginDescriptionRequest) returns (SequenceFile_Get_ModelPluginDescriptionResponse);
  
  
}
message SequenceFileInstance {
  // Specifies the handle of the SequenceFile instance in the server.
  string id = 1;
}

message SequenceInstance {
  // Specifies the handle of the Sequence instance in the server.
  string id = 1;
}

message SequenceContextInstance {
  // Specifies the handle of the SequenceContext instance in the server.
  string id = 1;
}
message SequenceFile_GetSequenceRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
  // Specifies a zero-based index to indicate the sequence.
  int32 index = 2;
}

message SequenceFile_GetSequenceResponse {
  // The return type of the Sequence object.
  SequenceInstance returnValue = 1;
}

message SequenceFile_GetSequenceByNameRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
  // Specifies the name of the Sequence object to which you want a reference. If the sequence name does not exist, the method reports an error.
  string sequenceNameParam = 2;
}

message SequenceFile_GetSequenceByNameResponse {
  // The return type of the Sequence object.
  SequenceInstance returnValue = 1;
}

message SequenceFile_SequenceNameExistsRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
  // Specifies a sequence name to search for. Sequence names are case-insensitive.
  string sequenceNameParam = 2;
}

message SequenceFile_SequenceNameExistsResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message SequenceFile_InsertSequenceRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
  // Specifies the sequence to insert.
  SequenceInstance sequenceToInsert = 2;
}

message SequenceFile_InsertSequenceResponse {
}

message SequenceFile_RemoveSequenceRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
  // Specifies a zero-based index to indicate the sequence to remove.
  int32 index = 2;
}

message SequenceFile_RemoveSequenceResponse {
  // The return type of the Sequence object.
  SequenceInstance returnValue = 1;
}

message SequenceFile_DeleteSequenceRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
  // Specifies a zero-based index to indicate the sequence to delete.
  int32 index = 2;
}

message SequenceFile_DeleteSequenceResponse {
}

message SequenceFile_SaveRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
  // Specifies the absolute pathname with which to save the file. Pass an empty string to save the file using the same pathname with which TestStand last loaded or saved it.
  string pathString = 2;
}

message SequenceFile_SaveResponse {
}

message SequenceFile_GetModelSequenceFileRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
}

message SequenceFile_GetModelSequenceFileResponse {
  // The return type of the SequenceFile object.
  SequenceFileInstance returnValue = 1;
  // Returns a string that describes the process model file.
  string modelDescriptionString = 2;
}

message SequenceFile_CreateCallbackOverrideSequenceRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
  // The name of the callback sequence to override. Specify the sequence name of a Model, Engine, or Front-End callback. Refer to DefaultModelCallbacks and SeqFileCallbacks constants for possible values for this parameter.
  string callbackName = 2;
  // Pass True to copy the steps of the sequence you are overriding into the new sequence.
  bool allowCopyDefaultSteps = 3;
}

message SequenceFile_CreateCallbackOverrideSequenceResponse {
  // Specifies a reference to the callback the method creates. Release this reference when you are finished with it.
  SequenceInstance returnValue = 1;
}

message SequenceFile_NewEditContextRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
}

message SequenceFile_NewEditContextResponse {
  // A reference to a SequenceContext object. Release this reference when you are finished using it.
  SequenceContextInstance returnValue = 1;
}

message SequenceFile_IncChangeCountRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
}

message SequenceFile_IncChangeCountResponse {
}

message SequenceFile_GetSequenceIndexRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
  // Specifies the name of a sequence in the sequence file.
  string sequenceNameParam = 2;
}

message SequenceFile_GetSequenceIndexResponse {
  // Returns the index of the sequence for which you specify a name. Returns -1 if no such sequence exists.
  int32 returnValue = 1;
}

message SequenceFile_AsPropertyObjectRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
}

message SequenceFile_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message SequenceFile_LoadModulesRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
  // Specifies one or more LoadModuleOptions using the bitwise-OR operator to modify the behavior of this method.
  LoadModuleOptions loadOptions = 2;
  // If you are passing the LoadModule_EvaluateExpressions flag to the loadOptions parameter, pass a SequenceContext object for this parameter to use when evaluating the expressions. Also, if you are calling this method from a step in an execution, pass the sequence context of the execution.
  PropertyObjectInstance sequenceContextParam = 3;
}

message SequenceFile_LoadModulesResponse {
  // Returns True on success or False if a module fails to load.
  bool returnValue = 1;
}

message SequenceFile_AsPropertyObjectFileRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
}

message SequenceFile_AsPropertyObjectFileResponse {
  // The return type of the PropertyObjectFile object.
  PropertyObjectFileInstance returnValue = 1;
}

message SequenceFile_GetModelAbsolutePathRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
}

message SequenceFile_GetModelAbsolutePathResponse {
  // The return type of the String object.
  string returnValue = 1;
  // Returns True if the model file was found.
  bool modelExists = 2;
}

message SequenceFile_InsertSequenceExRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
  // Specifies the zero-based index at which to insert the sequence.
  int32 index = 2;
  // Specifies the sequence to insert.
  SequenceInstance sequenceToInsert = 3;
}

message SequenceFile_InsertSequenceExResponse {
}

message SequenceFile_UnloadModulesRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
}

message SequenceFile_UnloadModulesResponse {
  // Returns True if all modules were successfully unloaded. If any sequences in the file are executing when you call this method, the method returns False.
  bool returnValue = 1;
}

message SequenceFile_GetReservedCallbackNamesRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
}

message SequenceFile_GetReservedCallbackNamesResponse {
  // Array of reserved callback names the function returns.
  repeated string returnValue = 1;
}

message SequenceFile_GetModelCallbackNamesRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
}

message SequenceFile_GetModelCallbackNamesResponse {
  // Array of Model callback names the function returns.
  repeated string returnValue = 1;
}

message SequenceFile_AddLoadReferenceRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
}

message SequenceFile_AddLoadReferenceResponse {
}

message SequenceFile_Get_NumSequencesRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
}

message SequenceFile_Get_NumSequencesResponse {
  // Returns the number of sequences contained in the sequence file.
  int32 returnValue = 1;
}

message SequenceFile_Get_FileGlobalsDefaultValuesRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
}

message SequenceFile_Get_FileGlobalsDefaultValuesResponse {
  // Returns the PropertyObject that contains the default values of the global variables for the sequence file.
  PropertyObjectInstance returnValue = 1;
}

message SequenceFile_Set_PathRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
  // Returns the pathname TestStand used when the sequence file was last saved or loaded.
  string val = 2;
}

message SequenceFile_Set_PathResponse {
}

message SequenceFile_Get_PathRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
}

message SequenceFile_Get_PathResponse {
  // Returns the pathname TestStand used when the sequence file was last saved or loaded.
  string returnValue = 1;
}

message SequenceFile_Set_ModuleLoadOptionRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
  // This property instructs TestStand when to load the code modules the steps in the sequence file call. You can use this property to override the load option of all steps in the sequence file, or you can defer to the load option contained in each individual step.
  ModuleLoadOptions val = 2;
}

message SequenceFile_Set_ModuleLoadOptionResponse {
}

message SequenceFile_Get_ModuleLoadOptionRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
}

message SequenceFile_Get_ModuleLoadOptionResponse {
  // This property instructs TestStand when to load the code modules the steps in the sequence file call. You can use this property to override the load option of all steps in the sequence file, or you can defer to the load option contained in each individual step.
  ModuleLoadOptions returnValue = 1;
}

message SequenceFile_Set_ModuleUnloadOptionRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
  // This property instructs TestStand when to unload the code modules the steps in the sequence file call. You can use this property to override the unload option of all steps in the sequence file, or you can defer to the unload option contained in each individual step.
  ModuleUnloadOptions val = 2;
}

message SequenceFile_Set_ModuleUnloadOptionResponse {
}

message SequenceFile_Get_ModuleUnloadOptionRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
}

message SequenceFile_Get_ModuleUnloadOptionResponse {
  // This property instructs TestStand when to unload the code modules the steps in the sequence file call. You can use this property to override the unload option of all steps in the sequence file, or you can defer to the unload option contained in each individual step.
  ModuleUnloadOptions returnValue = 1;
}

message SequenceFile_Get_HasModelRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
}

message SequenceFile_Get_HasModelResponse {
  // Returns True if TestStand associates a process model sequence file with the sequence file on which you call the method.
  bool returnValue = 1;
}

message SequenceFile_Set_UnloadCallbackEnabledRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
  // Specifies if TestStand calls the SequenceFileUnload callback sequence when unloading the sequence file. Set this property to False to prevent TestStand from calling the SequenceFileUnload callback for the sequence file.
  bool val = 2;
}

message SequenceFile_Set_UnloadCallbackEnabledResponse {
}

message SequenceFile_Get_UnloadCallbackEnabledRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
}

message SequenceFile_Get_UnloadCallbackEnabledResponse {
  // Specifies if TestStand calls the SequenceFileUnload callback sequence when unloading the sequence file. Set this property to False to prevent TestStand from calling the SequenceFileUnload callback for the sequence file.
  bool returnValue = 1;
}

message SequenceFile_Get_IsExecutingRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
}

message SequenceFile_Get_IsExecutingResponse {
  // Returns True if the sequence file contains one or more currently active sequences in an execution.
  bool returnValue = 1;
}

message SequenceFile_Get_ChangeCountRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
}

message SequenceFile_Get_ChangeCountResponse {
  // Returns the number of modifications that have been made to the sequence file since it was loaded into memory.
  int32 returnValue = 1;
}

message SequenceFile_Set_SequenceFileTypeRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
  // Specifies the type of sequence file.
  SequenceFileTypes val = 2;
}

message SequenceFile_Set_SequenceFileTypeResponse {
}

message SequenceFile_Get_SequenceFileTypeRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
}

message SequenceFile_Get_SequenceFileTypeResponse {
  // Specifies the type of sequence file.
  SequenceFileTypes returnValue = 1;
}

message SequenceFile_Get_CanUnloadRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
}

message SequenceFile_Get_CanUnloadResponse {
  // Returns a value that indicates whether the sequence file can be removed from the internal cache of the engine.
  bool returnValue = 1;
}

message SequenceFile_Get_IdRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
}

message SequenceFile_Get_IdResponse {
  // Returns a unique ID number for the sequence file.
  // Note: The ID number is never zero.
  int32 returnValue = 1;
}

message SequenceFile_Set_ModelOptionRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
  // Specifies the process model file to use for the sequence file.
  ModelOptions val = 2;
}

message SequenceFile_Set_ModelOptionResponse {
}

message SequenceFile_Get_ModelOptionRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
}

message SequenceFile_Get_ModelOptionResponse {
  // Specifies the process model file to use for the sequence file.
  ModelOptions returnValue = 1;
}

message SequenceFile_Set_ModelPathRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
  // Specifies the file path of a particular model file.
  string val = 2;
}

message SequenceFile_Set_ModelPathResponse {
}

message SequenceFile_Get_ModelPathRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
}

message SequenceFile_Get_ModelPathResponse {
  // Specifies the file path of a particular model file.
  string returnValue = 1;
}

message SequenceFile_Set_BatchSyncOptionRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
  // Specifies the batch synchronization operation corresponding to all the steps contained in the sequence file when the synchronization setting is BatchSyncOption_UseSeqFileSetting.
  SeqFileBatchSynchronizationOptions val = 2;
}

message SequenceFile_Set_BatchSyncOptionResponse {
}

message SequenceFile_Get_BatchSyncOptionRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
}

message SequenceFile_Get_BatchSyncOptionResponse {
  // Specifies the batch synchronization operation corresponding to all the steps contained in the sequence file when the synchronization setting is BatchSyncOption_UseSeqFileSetting.
  SeqFileBatchSynchronizationOptions returnValue = 1;
}

message SequenceFile_Set_FileGlobalsScopeRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
  // Specifies the lifetime of the sequence file global variables and whether multiple executions share the sequence file global variable values.
  FileGlobalsScopeOptions val = 2;
}

message SequenceFile_Set_FileGlobalsScopeResponse {
}

message SequenceFile_Get_FileGlobalsScopeRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
}

message SequenceFile_Get_FileGlobalsScopeResponse {
  // Specifies the lifetime of the sequence file global variables and whether multiple executions share the sequence file global variable values.
  FileGlobalsScopeOptions returnValue = 1;
}

message SequenceFile_Get_ModelPluginDescriptionRequest {
  // The id of the SequenceFile object.
  SequenceFileInstance instance = 1;
}

message SequenceFile_Get_ModelPluginDescriptionResponse {
  // Returns the FileGlobals.ModelPluginComponentDescription variable, if it exists. Otherwise, returns null. This property is accessible even if the file is locked.
  PropertyObjectInstance returnValue = 1;
}

// Sequence
//
// Objects of the Sequence class represent a sequence that can contain steps. Use the Sequence class to examine or modify sequence settings and the list of steps in the sequence. Sequences have three groups of steps. The StepGroups enumeration contains a value for each of the step groups. SequenceTypes constants define several types of sequences. You can obtain a reference to the Sequence objects a sequence file contains by calling the SequenceFile.GetSequence method. You can create new sequences by calling the Engine.NewSequence or SequenceFile.CreateCallbackOverrideSequence methods.
// Note: Built-in properties of sequences are flagged to be shared at run time. Any changes to built-in properties within the run-time copy of the sequence also edit the original Sequence object in the sequence file.
//
service Sequence {
  // Method: GetNumSteps
  //
  // Returns the number of steps in the specified step group of the sequence.
  //
  // Sequence_GetNumStepsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - stepGroupParam: StepGroups - Specifies a particular step group.
  //
  // Sequence_GetNumStepsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - The return type of the Int32 object.
  //
  rpc GetNumSteps(Sequence_GetNumStepsRequest) returns (Sequence_GetNumStepsResponse);
  
  
  // Method: GetStep
  //
  // Returns a reference to the Step object that you specify by an index.
  //
  // Sequence_GetStepRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - index: int32 - Specifies the zero-based step index that indicates the position of the step in the step group.
  //    - stepGroupParam: StepGroups - Specifies a particular step group.
  //
  // Sequence_GetStepResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepInstance - The return type of the Step object.
  //
  rpc GetStep(Sequence_GetStepRequest) returns (Sequence_GetStepResponse);
  
  
  // Method: GetStepByName
  //
  // Returns a reference to the Step object you specify by name.
  //
  // Returns an error if no Step object exists with the name you specify.
  //
  // Sequence_GetStepByNameRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - nameOfStep: string - Specifies the name of the step for which you want a reference. When more than one step using the same name exists in the step group, the method returns the first step with that name.  Name comparison is case-insensitive.
  //    - stepGroupParam: StepGroups - Specifies a particular step group.
  //
  // Sequence_GetStepByNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepInstance - The return type of the Step object.
  //
  rpc GetStepByName(Sequence_GetStepByNameRequest) returns (Sequence_GetStepByNameResponse);
  
  
  // Method: InsertStep
  //
  // Inserts a step into the sequence.
  //
  // Note: Never insert a step into a sequence when that step resides in another sequence. The step reference you pass must be the only reference to the step. You can obtain the sole reference to a step by calling the Engine.NewStep method or the Sequence.RemoveStep method.
  //
  // Sequence_InsertStepRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - stepToInsert: StepInstance - Specifies the step to insert.
  //    - index: int32 - Specifies the zero-based index that indicates the location where to insert the step in the step group.
  //    - stepGroupParam: StepGroups - Specifies a particular step group.
  //
  // Sequence_InsertStepResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc InsertStep(Sequence_InsertStepRequest) returns (Sequence_InsertStepResponse);
  
  
  // Method: RemoveStep
  //
  // Removes a step from a sequence and returns a reference to it.
  //
  // Sequence_RemoveStepRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - index: int32 - Specifies the zero-based index that indicates the location where to insert the step in the step group.
  //    - stepGroupParam: StepGroups - Specifies a particular step group.
  //
  // Sequence_RemoveStepResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepInstance - The return type of the Step object.
  //
  rpc RemoveStep(Sequence_RemoveStepRequest) returns (Sequence_RemoveStepResponse);
  
  
  // Method: DeleteStep
  //
  // Deletes a step from the sequence.
  //
  // Sequence_DeleteStepRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - index: int32 - Specifies the zero-based step index that indicates the position of the step in the step group.
  //    - stepGroupParam: StepGroups - Specifies the step group that contains the step you want to delete.
  //
  // Sequence_DeleteStepResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc DeleteStep(Sequence_DeleteStepRequest) returns (Sequence_DeleteStepResponse);
  
  
  // Method: StepNameExists
  //
  // Returns True if a step with the name you specify exists in the step group.
  //
  // Sequence_StepNameExistsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - nameOfStep: string - Specifies the name to search for.
  //    - stepGroupParam: StepGroups - Specifies a particular step group.
  //
  // Sequence_StepNameExistsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc StepNameExists(Sequence_StepNameExistsRequest) returns (Sequence_StepNameExistsResponse);
  
  
  // Method: EvalEntryPointNameExpression
  //
  // Note: This method is obsolete. Use the Sequence.EvalEntryPointNameExpressionEx method instead.
  //
  // Applies only to an entry point sequence in a process model file. Call this function to determine the name to display for the entry point in the user interface menu bar. The function evaluates the entry point name expression for the entry point sequence in the context of the currently selected sequence file in the user interface.
  //
  // Sequence_EvalEntryPointNameExpressionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - sequenceFileParam: SequenceFileInstance - Specifies the currently selected sequence file in the user interface.
  //
  // Sequence_EvalEntryPointNameExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the entry point. 
  //
  rpc EvalEntryPointNameExpression(Sequence_EvalEntryPointNameExpressionRequest) returns (Sequence_EvalEntryPointNameExpressionResponse);
  
  
  // Method: EvalEntryPointEnabledExpression
  //
  // Note: This method is obsolete. Use the Sequence.EvalEntryPointEnabledExpressionEx method instead.
  //
  // Applies only to an entry point sequence in a process model file. Call this function to determine whether to enable the entry point in the user interface menu bar. The function evaluates the entry point-enabled expression for the entry point sequence in the context of the currently selected sequence file in the user interface.
  //
  // Sequence_EvalEntryPointEnabledExpressionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - sequenceFileParam: SequenceFileInstance - Specifies the currently selected sequence file in the user interface.
  //
  // Sequence_EvalEntryPointEnabledExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the entry point is enabled in the user interface menu bar. 
  //
  rpc EvalEntryPointEnabledExpression(Sequence_EvalEntryPointEnabledExpressionRequest) returns (Sequence_EvalEntryPointEnabledExpressionResponse);
  
  
  // Method: GetEntryPointMenuFromHint
  //
  // This method applies only to an entry point sequence in a process model file. Call this function to determine the user interface menu in which the entry point belongs. The method uses the Menu Hints option for the entry point sequence.
  //
  // Sequence_GetEntryPointMenuFromHintRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - menuNameList: string - Pass a comma-separated list of the menu names in the user interface, such as "File,Configure,Debug".
  //      Note: The method ignores all "_" and "&" characters when comparing the names in the list with the menu hints for the entry point.
  //
  // Sequence_GetEntryPointMenuFromHintResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a zero-based index into the list of menu names you pass as the menuNameList parameter. This index indicates the menu to which the entry point belongs in the menu. If none of the menus in the list matches a menu hint for the entry point, the method returns -1. If this occurs, you must choose the menu in which to display the entry point. You can choose the menu based on the type of entry point. 
  //
  rpc GetEntryPointMenuFromHint(Sequence_GetEntryPointMenuFromHintRequest) returns (Sequence_GetEntryPointMenuFromHintResponse);
  
  
  // Method: AsPropertyObject
  //
  // Returns the underlying PropertyObject that represents the Sequence object. Use the PropertyObject to modify, add, or remove custom properties of the object.
  //
  // Sequence_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(Sequence_AsPropertyObjectRequest) returns (Sequence_AsPropertyObjectResponse);
  
  
  // Method: GetStepIndex
  //
  // Returns the index of the step with the name that matches the name you specify.
  //
  // Sequence_GetStepIndexRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - nameOfStep: string - Specifies the name of the step for which you want the index. When more than one step using the same name exists in the step group, the method returns the index of the first step with that name. Name comparison is case-insensitive. You can also pass a unique step ID.
  //    - stepGroupParam: StepGroups - Specifies a particular step group.
  //
  // Sequence_GetStepIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the index of the step with the name that matches the name you specify. Returns -1 if no such step exists. 
  //
  rpc GetStepIndex(Sequence_GetStepIndexRequest) returns (Sequence_GetStepIndexResponse);
  
  
  // Method: GetBreakOnEnd
  //
  // Note: This method is obsolete. Use the Sequence.GetBreakOnEndSettings method instead.
  //
  // Returns True if the step group of the sequence is set to break when all the steps in the step group are done executing.
  // This method, along with the Sequence.SetBreakOnEnd method, implements breakpoints for breaking after the last step in a step group.
  // Note: The Sequence.SetBreakOnEnd method is obsolete. Use the Sequence.SetBreakOnEndSettings method instead.
  //
  // Sequence_GetBreakOnEndRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - stepGroupParam: StepGroups - Specifies a particular step group.
  //    - executionParam: ObjectInstance - Pass a reference to an Execution object to obtain the breakpoint settings on the End step, which apply to a particular execution. If there is no execution-specific breakpoint setting or if you do not pass an Execution object, the method returns the breakpoint setting on the End step of the sequence file.
  //
  // Sequence_GetBreakOnEndResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc GetBreakOnEnd(Sequence_GetBreakOnEndRequest) returns (Sequence_GetBreakOnEndResponse);
  
  
  // Method: SetBreakOnEnd
  //
  // Note: This method is obsolete. Use the Sequence.SetBreakOnEndSettings method instead.
  //
  // Notifies TestStand when executions of this sequence and step group break after executing steps.
  // Use this method, along with the Sequence.GetBreakOnEnd method, to implement breakpoints for breaking after the last step in a step group.
  // Note: The Sequence.GetBreakOnEnd method is obsolete. Use the Sequence.GetBreakOnEndSettings method instead.
  //
  // Sequence_SetBreakOnEndRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - stepGroupParam: StepGroups - Specifies a particular step group.
  //    - breakOnEnd: bool - Pass True if you want executions of this sequence and step group to break after executing steps.
  //    - executionParam: ObjectInstance - Pass a reference to an Execution object to obtain the breakpoint settings on the End step, which apply to a particular execution. If there is no execution-specific breakpoint setting or if you do not pass an Execution object, the method returns the breakpoint setting on the End step of the sequence file.
  //
  // Sequence_SetBreakOnEndResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetBreakOnEnd(Sequence_SetBreakOnEndRequest) returns (Sequence_SetBreakOnEndResponse);
  
  
  // Method: LoadModules
  //
  // Call this method to load the code modules for the steps in the sequence.
  //
  // Sequence_LoadModulesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - loadOptions: int32 - Specifies one or more LoadModuleOptions using the bitwise-OR operator to modify the behavior of this method.
  //    - sequenceContextParam: ObjectInstance - If passing the LoadModule_EvaluateExpressions flag to the loadOptions parameter, pass a SequenceContext object for this parameter to use when evaluating the expressions. Also, if calling this method from a step in an execution, pass the sequence context of the execution.
  //
  // Sequence_LoadModulesResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True on success, or False if a module fails to load. 
  //
  rpc LoadModules(Sequence_LoadModulesRequest) returns (Sequence_LoadModulesResponse);
  
  
  // Method: GetEffectiveType
  //
  // Returns the effective sequence type.
  //
  // Typically, the effective sequence type is the same as the value of the Sequence.Type property. One exception occurs when this sequence belongs to a sequence file that has a model file, and that model file has a callback with the same name as this sequence. In this case, the effective type is SeqType_Callback. The other exception occurs when this sequence has a reserved name, in which case this method returns SeqType_ReservedCallback.
  //
  // Sequence_GetEffectiveTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_GetEffectiveTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceTypes - The return type of the SequenceTypes object.
  //
  rpc GetEffectiveType(Sequence_GetEffectiveTypeRequest) returns (Sequence_GetEffectiveTypeResponse);
  
  
  // Method: EvalEntryPointNameExpressionEx
  //
  // Evaluates the entry point name expression.
  //
  // This method applies only to an entry point sequence in a process model file. Call this function to determine the name to display for the entry point in the user interface menu bar. The function evaluates the entry point name expression for the entry point sequence in the context of the editArgs parameter, which specifies the currently selected items in the sequence editor or user interface.
  //
  // Sequence_EvalEntryPointNameExpressionExRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_EvalEntryPointNameExpressionExResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the entry point. 
  //
  rpc EvalEntryPointNameExpressionEx(Sequence_EvalEntryPointNameExpressionExRequest) returns (Sequence_EvalEntryPointNameExpressionExResponse);
  
  
  // Method: EvalEntryPointEnabledExpressionEx
  //
  // Evaluates the entry point enabled expression.
  //
  // This method applies only to an entry point sequence in a process model file. Call this function to determine whether to enable the entry point in the user interface menu bar. The function evaluates the entry point enabled expression for the entry point sequence in the context of the editArgs parameter, which specifies the currently selected items in the sequence editor or user interface.
  //
  // Sequence_EvalEntryPointEnabledExpressionExRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_EvalEntryPointEnabledExpressionExResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if you can enable the entry point in the user interface menu bar. 
  //
  rpc EvalEntryPointEnabledExpressionEx(Sequence_EvalEntryPointEnabledExpressionExRequest) returns (Sequence_EvalEntryPointEnabledExpressionExResponse);
  
  
  // Method: UnloadModules
  //
  // Unloads code modules for all steps in the sequence.
  //
  // Sequence_UnloadModulesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_UnloadModulesResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if all code modules are unloaded. Note: Some code modules might not be unloaded because they are executing. 
  //
  rpc UnloadModules(Sequence_UnloadModulesRequest) returns (Sequence_UnloadModulesResponse);
  
  
  // Method: SetBreakOnEndSettings
  //
  // Specifies if the step group in the sequence is set to break after all the steps in the sequence execute.
  //
  // Sequence_SetBreakOnEndSettingsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - stepGroupParam: StepGroups - Specifies a particular step group.
  //    - isSet: bool - Specifies whether the breakpoint is set. If a breakpoint is set, this parameter returns True.
  //    - enabled: bool - Specifies whether the breakpoint is enabled. TestStand ignores disabled breakpoints during execution.
  //    - passCount: int32 - Specifies the number of iterations the execution skips the breakpoint before suspending execution. Pass 0 if you do not want to use a conditional pass count.
  //    - Condition: string - Specifies the expression that must evaluate to True before suspending the execution. An empty value defaults to True. If you specify a non-zero pass count value and a condition expression for the breakpoint, the pass count only decrements when the expression evaluates to True.
  //    - executionParam: ObjectInstance - Specifies a reference to an Execution object to obtain the breakpoint settings on the End step, which apply to a particular execution. If there is no execution-specific breakpoint setting or if you do not pass an Execution object, the method returns the breakpoint setting on the End step of the sequence file.
  //
  // Sequence_SetBreakOnEndSettingsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetBreakOnEndSettings(Sequence_SetBreakOnEndSettingsRequest) returns (Sequence_SetBreakOnEndSettingsResponse);
  
  
  // Method: GetBreakOnEndSettings
  //
  // Returns a value that indicates whether the step group of the sequence is set to break when all the steps in the sequence execute.
  //
  // Sequence_GetBreakOnEndSettingsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - stepGroupParam: StepGroups - Specifies a particular step group.
  //    - executionParam: ObjectInstance - Pass a reference to an Execution object to obtain the breakpoint settings on the End step, which apply to a particular execution. If there is no execution-specific breakpoint setting or if you do not pass an Execution object, the method returns the breakpoint setting on the End step of the sequence file.
  //
  // Sequence_GetBreakOnEndSettingsResponse - The response message from the server. It provides the output parameters.
  //    - isSet: boo - Returns a value that indicates whether the breakpoint is set.
  //    - enabled: boo - Returns a value that indicates whether the breakpoint is enabled. TestStand ignores disabled breakpoints during execution.
  //    - passCount: int3 - Returns the number of times the execution must evaluate the condition expression before suspending the execution. Pass 0 if you do not want to use a conditional pass count.
  //    - Condition: strin - Returns the expression that must evaluate to True before suspending the execution. An empty value defaults to True. If you specify a non-zero value for the passCount parameter and a condition expression for the breakpoint, the pass count decrements only when the expression evaluates to True.
  //
  rpc GetBreakOnEndSettings(Sequence_GetBreakOnEndSettingsRequest) returns (Sequence_GetBreakOnEndSettingsResponse);
  
  
  // Method: CreateNewUniqueStepIds
  //
  // Replaces the unique step ID with a new unique step ID in all the steps in a sequence.
  //
  // Sequence_CreateNewUniqueStepIdsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_CreateNewUniqueStepIdsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc CreateNewUniqueStepIds(Sequence_CreateNewUniqueStepIdsRequest) returns (Sequence_CreateNewUniqueStepIdsResponse);
  
  
  // Method: GetStepByUniqueId
  //
  // Returns a reference to the Step object you specify by unique ID.
  //
  // Returns a NULL reference if no step exists with the unique ID you specify.
  //
  // Sequence_GetStepByUniqueIdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_GetStepByUniqueIdResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepInstance - The return type of the Step object.
  //
  rpc GetStepByUniqueId(Sequence_GetStepByUniqueIdRequest) returns (Sequence_GetStepByUniqueIdResponse);
  
  

  // Property: Parameters
  //
  // Returns the PropertyObject that contains the parameters for the sequence.
  //
  // Sequence_Get_ParametersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_Get_ParametersResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Returns the PropertyObject that contains the parameters for the sequence. 
  //
  rpc Get_Parameters(Sequence_Get_ParametersRequest) returns (Sequence_Get_ParametersResponse);
  
  
  // Property: Locals
  //
  // Returns the PropertyObject that contains the local variables for the sequence.
  //
  // Sequence_Get_LocalsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_Get_LocalsResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Returns the PropertyObject that contains the local variables for the sequence. 
  //
  rpc Get_Locals(Sequence_Get_LocalsRequest) returns (Sequence_Get_LocalsResponse);
  
  
  // Property: ShowEntryPointForFileWindow
  //
  // Set this property to True if you want the entry point to appear in the menu bar when a Sequence File window is the active window.
  //
  // This property applies only to an entry point sequence in a process model file.
  //
  // Sequence_Set_ShowEntryPointForFileWindowRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - val: bool - Set this property to True if you want the entry point to appear in the menu bar when a Sequence File window is the active window. 
  //
  // Sequence_Set_ShowEntryPointForFileWindowResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Sequence_Get_ShowEntryPointForFileWindowRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_Get_ShowEntryPointForFileWindowResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Set this property to True if you want the entry point to appear in the menu bar when a Sequence File window is the active window. 
  //
  rpc Set_ShowEntryPointForFileWindow(Sequence_Set_ShowEntryPointForFileWindowRequest) returns (Sequence_Set_ShowEntryPointForFileWindowResponse);
  rpc Get_ShowEntryPointForFileWindow(Sequence_Get_ShowEntryPointForFileWindowRequest) returns (Sequence_Get_ShowEntryPointForFileWindowResponse);
  
  
  // Property: ShowEntryPointForExeWindow
  //
  // Set this property to True if you want the entry point to appear in the menu bar when an Execution window is the active window.
  //
  // This property applies only to an entry point sequence in a process model file.
  //
  // Sequence_Set_ShowEntryPointForExeWindowRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - val: bool - Set this property to True if you want the entry point to appear in the menu bar when an Execution window is the active window. 
  //
  // Sequence_Set_ShowEntryPointForExeWindowResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Sequence_Get_ShowEntryPointForExeWindowRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_Get_ShowEntryPointForExeWindowResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Set this property to True if you want the entry point to appear in the menu bar when an Execution window is the active window. 
  //
  rpc Set_ShowEntryPointForExeWindow(Sequence_Set_ShowEntryPointForExeWindowRequest) returns (Sequence_Set_ShowEntryPointForExeWindowResponse);
  rpc Get_ShowEntryPointForExeWindow(Sequence_Get_ShowEntryPointForExeWindowRequest) returns (Sequence_Get_ShowEntryPointForExeWindowResponse);
  
  
  // Property: EntryPointInitiallyHidden
  //
  // Specifies if an execution of the entry point is hidden when it starts.
  //
  // This property applies only to an entry point sequence in a process model file. The property indicates if an execution of the entry point is hidden when it starts. In other words, if the property is True, the user interface does not display an Execution window for the entry point sequence when it begins executing it. The user interface does this by assigning the ExecTypeMask_InitiallyHidden value to the TypeMask property of the execution.
  //
  // Sequence_Set_EntryPointInitiallyHiddenRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - val: bool - Specifies if an execution of the entry point is hidden when it starts. 
  //
  // Sequence_Set_EntryPointInitiallyHiddenResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Sequence_Get_EntryPointInitiallyHiddenRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_Get_EntryPointInitiallyHiddenResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if an execution of the entry point is hidden when it starts. 
  //
  rpc Set_EntryPointInitiallyHidden(Sequence_Set_EntryPointInitiallyHiddenRequest) returns (Sequence_Set_EntryPointInitiallyHiddenResponse);
  rpc Get_EntryPointInitiallyHidden(Sequence_Get_EntryPointInitiallyHiddenRequest) returns (Sequence_Get_EntryPointInitiallyHiddenResponse);
  
  
  // Property: Type
  //
  // Specifies the type of the sequence.
  //
  // Sequence_Set_TypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - val: SequenceTypes - Specifies the type of the sequence. 
  //
  // Sequence_Set_TypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Sequence_Get_TypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_Get_TypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceTypes - Specifies the type of the sequence. 
  //
  rpc Set_Type(Sequence_Set_TypeRequest) returns (Sequence_Set_TypeResponse);
  rpc Get_Type(Sequence_Get_TypeRequest) returns (Sequence_Get_TypeResponse);
  
  
  // Property: Name
  //
  // Returns or specifies the name of the sequence.
  //
  // Note: The name of a sequence must be unique if it is contained within a sequence file. Inserting two or more sequences with the same name into a sequence file might cause unexpected behavior.Note: TestStand does not validate variable names you create programmatically for invalid characters, such as spaces, which can result in errors when you use expressions. Use the PropertyObject.ValidateNewElementName method to validate variable names. TestStand expressions require PropertyObject names to be strings that contain only letters, numbers, and underscores. PropertyObject names cannot contain spaces, start with a number, or be empty. Additionally, the PropertyObject name cannot be "Value", and you cannot have duplicate subproperty names. For example, MyVariableName_2000 is a valid PropertyObject name. Names of elements in a PropertyObject array can contain any character. Both sequence names and step names are examples of such named array elements. However, sequence names cannot be empty or contain control characters. You cannot have duplicate sequence names. NI is reserved for root attribute names.
  //
  // Sequence_Set_NameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - val: string - Returns or specifies the name of the sequence. 
  //
  // Sequence_Set_NameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Sequence_Get_NameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_Get_NameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns or specifies the name of the sequence. 
  //
  rpc Set_Name(Sequence_Set_NameRequest) returns (Sequence_Set_NameResponse);
  rpc Get_Name(Sequence_Get_NameRequest) returns (Sequence_Get_NameResponse);
  
  
  // Property: GotoCleanupOnFailure
  //
  // Note: This property is obsolete. Use the Sequence.FailureAction property instead.
  //
  // Execution flow jumps to the Cleanup step group if this property is True and if a step sets the status property of the sequence to Failed. If the StationOptions.AlwaysGotoCleanupOnFailure property is True, the flow of execution jumps to the Cleanup step group on failure regardless of the state of this property.
  //
  // Sequence_Set_GotoCleanupOnFailureRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - val: bool - Note: This property is obsolete. Use the Sequence.FailureAction property instead. 
  //
  // Sequence_Set_GotoCleanupOnFailureResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Sequence_Get_GotoCleanupOnFailureRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_Get_GotoCleanupOnFailureResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the Sequence.FailureAction property instead. 
  //
  rpc Set_GotoCleanupOnFailure(Sequence_Set_GotoCleanupOnFailureRequest) returns (Sequence_Set_GotoCleanupOnFailureResponse);
  rpc Get_GotoCleanupOnFailure(Sequence_Get_GotoCleanupOnFailureRequest) returns (Sequence_Get_GotoCleanupOnFailureResponse);
  
  
  // Property: DisableResults
  //
  // Specifies to disable result recording for any steps in the sequence.
  //
  // If this property is True, TestStand does not record results for any steps in the sequence. If this property is False, TestStand records results based on the setting of the Step.ResultRecordingOption property of each individual step or the StationOptions.DisableResults and Execution.DisableResults properties.
  // Note: TestStand might not honor changes to this property in a running sequence until the sequence completes the current step group.
  //
  // Sequence_Set_DisableResultsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - val: bool - Specifies to disable result recording for any steps in the sequence. 
  //
  // Sequence_Set_DisableResultsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Sequence_Get_DisableResultsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_Get_DisableResultsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies to disable result recording for any steps in the sequence. 
  //
  rpc Set_DisableResults(Sequence_Set_DisableResultsRequest) returns (Sequence_Set_DisableResultsResponse);
  rpc Get_DisableResults(Sequence_Get_DisableResultsRequest) returns (Sequence_Get_DisableResultsResponse);
  
  
  // Property: ShowEntryPointForEditorOnly
  //
  // Set this property to True if you want the entry point to appear only in the menu bar of a sequence editor and not in an operator interface.
  //
  // This property applies only to an entry point sequence in a process model file.
  //
  // Sequence_Set_ShowEntryPointForEditorOnlyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - val: bool - Set this property to True if you want the entry point to appear only in the menu bar of a sequence editor and not in an operator interface. 
  //
  // Sequence_Set_ShowEntryPointForEditorOnlyResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Sequence_Get_ShowEntryPointForEditorOnlyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_Get_ShowEntryPointForEditorOnlyResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Set this property to True if you want the entry point to appear only in the menu bar of a sequence editor and not in an operator interface. 
  //
  rpc Set_ShowEntryPointForEditorOnly(Sequence_Set_ShowEntryPointForEditorOnlyRequest) returns (Sequence_Set_ShowEntryPointForEditorOnlyResponse);
  rpc Get_ShowEntryPointForEditorOnly(Sequence_Get_ShowEntryPointForEditorOnlyRequest) returns (Sequence_Get_ShowEntryPointForEditorOnlyResponse);
  
  
  // Property: ShowEntryPointForAllWindows
  //
  // Set this property to True if you want the entry point to appear in the menu bar, regardless of what type of window is active.
  //
  // This property applies only to an entry point sequence in a process model file.
  //
  // Sequence_Set_ShowEntryPointForAllWindowsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - val: bool - Set this property to True if you want the entry point to appear in the menu bar, regardless of what type of window is active. 
  //
  // Sequence_Set_ShowEntryPointForAllWindowsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Sequence_Get_ShowEntryPointForAllWindowsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_Get_ShowEntryPointForAllWindowsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Set this property to True if you want the entry point to appear in the menu bar, regardless of what type of window is active. 
  //
  rpc Set_ShowEntryPointForAllWindows(Sequence_Set_ShowEntryPointForAllWindowsRequest) returns (Sequence_Set_ShowEntryPointForAllWindowsResponse);
  rpc Get_ShowEntryPointForAllWindows(Sequence_Get_ShowEntryPointForAllWindowsRequest) returns (Sequence_Get_ShowEntryPointForAllWindowsResponse);
  
  
  // Property: EntryPointIgnoreClient
  //
  // Specifies if the entry point ignores the client sequence file.
  //
  // This property applies only to an entry point sequence in a process model file. Set this property to True for entry points wholly contained in the process model and do not call into the client sequence file. User interfaces and the sequence editor use this option to determine whether to pass a client sequence file to the Engine.NewExecution method when they execute this entry point.
  //
  // Sequence_Set_EntryPointIgnoreClientRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - val: bool - Specifies if the entry point ignores the client sequence file. 
  //
  // Sequence_Set_EntryPointIgnoreClientResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Sequence_Get_EntryPointIgnoreClientRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_Get_EntryPointIgnoreClientResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if the entry point ignores the client sequence file. 
  //
  rpc Set_EntryPointIgnoreClient(Sequence_Set_EntryPointIgnoreClientRequest) returns (Sequence_Set_EntryPointIgnoreClientResponse);
  rpc Get_EntryPointIgnoreClient(Sequence_Get_EntryPointIgnoreClientRequest) returns (Sequence_Get_EntryPointIgnoreClientResponse);
  
  
  // Property: EntryPointCheckToSaveTitledSeqFiles
  //
  // Specifies if sequence files must be saved before the entry point executes.
  //
  // This property applies only to an entry point sequence in a process model file. The property indicates if the sequence editor must attempt to save modified sequence files before executing the entry point.
  //
  // Sequence_Set_EntryPointCheckToSaveTitledSeqFilesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - val: bool - Specifies if sequence files must be saved before the entry point executes. 
  //
  // Sequence_Set_EntryPointCheckToSaveTitledSeqFilesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Sequence_Get_EntryPointCheckToSaveTitledSeqFilesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_Get_EntryPointCheckToSaveTitledSeqFilesResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if sequence files must be saved before the entry point executes. 
  //
  rpc Set_EntryPointCheckToSaveTitledSeqFiles(Sequence_Set_EntryPointCheckToSaveTitledSeqFilesRequest) returns (Sequence_Set_EntryPointCheckToSaveTitledSeqFilesResponse);
  rpc Get_EntryPointCheckToSaveTitledSeqFiles(Sequence_Get_EntryPointCheckToSaveTitledSeqFilesRequest) returns (Sequence_Get_EntryPointCheckToSaveTitledSeqFilesResponse);
  
  
  // Property: SequenceFile
  //
  // Returns the sequence file that contains this sequence.
  //
  // Sequence_Get_SequenceFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_Get_SequenceFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFileInstance - Returns the sequence file that contains this sequence. 
  //
  rpc Get_SequenceFile(Sequence_Get_SequenceFileRequest) returns (Sequence_Get_SequenceFileResponse);
  
  
  // Property: AllowInteractiveExecutionOfEntryPoint
  //
  // Set this property to False to prohibit the user from using this entry point sequence to run an interactive execution in the sequence editor or user interface.
  //
  // This property applies only to an entry point sequence in a process model file.
  //
  // Sequence_Set_AllowInteractiveExecutionOfEntryPointRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - val: bool - Set this property to False to prohibit the user from using this entry point sequence to run an interactive execution in the sequence editor or user interface. 
  //
  // Sequence_Set_AllowInteractiveExecutionOfEntryPointResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Sequence_Get_AllowInteractiveExecutionOfEntryPointRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_Get_AllowInteractiveExecutionOfEntryPointResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Set this property to False to prohibit the user from using this entry point sequence to run an interactive execution in the sequence editor or user interface. 
  //
  rpc Set_AllowInteractiveExecutionOfEntryPoint(Sequence_Set_AllowInteractiveExecutionOfEntryPointRequest) returns (Sequence_Set_AllowInteractiveExecutionOfEntryPointResponse);
  rpc Get_AllowInteractiveExecutionOfEntryPoint(Sequence_Get_AllowInteractiveExecutionOfEntryPointRequest) returns (Sequence_Get_AllowInteractiveExecutionOfEntryPointResponse);
  
  
  // Property: OptimizeNonReentrantCalls
  //
  // Specifies to decrease the amount of time required for TestStand to call the sequence after the first call to the sequence in an execution.
  //
  // If you set this property to False, TestStand initializes a new copy of each custom step property in a sequence each time it calls the sequence. TestStand performs the initialization so the sequence always begins executing with the initial property values the steps in the sequence specify. This initialization is necessary only if a sequence relies on the initial value of a custom step property and then modifies the value. Few sequences rely on this information.
  // When you set this property to True, TestStand initializes the value of the custom step properties in the sequence the first time it calls the sequence in an execution. TestStand reuses the custom step property values when it calls the sequence again. If the same sequence is in a different thread or recursively within the same thread simultaneously, TestStand creates unique copies of the custom step properties.
  // Note: When you set this property to True, TestStand maintains a loaded copy of the sequence until the execution is complete and does not unload the code modules for the sequence until after the execution ends, even if you attempt to unload the sequence and regardless of the value of the Unload Option on the General tab of the Sequence File Properties dialog box for the sequence file or the steps in the sequence. Because you cannot programmatically edit a loaded sequence, set this property to False if you need to modify the sequence at run time.
  //
  // Sequence_Set_OptimizeNonReentrantCallsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - val: bool - Specifies to decrease the amount of time required for TestStand to call the sequence after the first call to the sequence in an execution. 
  //
  // Sequence_Set_OptimizeNonReentrantCallsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Sequence_Get_OptimizeNonReentrantCallsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_Get_OptimizeNonReentrantCallsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies to decrease the amount of time required for TestStand to call the sequence after the first call to the sequence in an execution. 
  //
  rpc Set_OptimizeNonReentrantCalls(Sequence_Set_OptimizeNonReentrantCallsRequest) returns (Sequence_Set_OptimizeNonReentrantCallsResponse);
  rpc Get_OptimizeNonReentrantCalls(Sequence_Get_OptimizeNonReentrantCallsRequest) returns (Sequence_Get_OptimizeNonReentrantCallsResponse);
  
  
  // Property: CopyStepsOnOverride
  //
  // Specifies the behavior of TestStand when you click Add in the Sequence File Callbacks dialog box to create an overriding sequence file in the client sequence file.
  //
  // If you set this property to True, TestStand copies all steps and local variables in the callback sequence of the model file to the callback sequence you create in the client sequence file.
  // Note: TestStand always copies the sequence parameters, regardless of this setting.
  // This property applies only to callback sequences that reside in a model sequence file.
  //
  // Sequence_Set_CopyStepsOnOverrideRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - val: bool - Specifies the behavior of TestStand when you click Add in the Sequence File Callbacks dialog box to create an overriding sequence file in the client sequence file. 
  //
  // Sequence_Set_CopyStepsOnOverrideResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Sequence_Get_CopyStepsOnOverrideRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_Get_CopyStepsOnOverrideResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies the behavior of TestStand when you click Add in the Sequence File Callbacks dialog box to create an overriding sequence file in the client sequence file. 
  //
  rpc Set_CopyStepsOnOverride(Sequence_Set_CopyStepsOnOverrideRequest) returns (Sequence_Set_CopyStepsOnOverrideResponse);
  rpc Get_CopyStepsOnOverride(Sequence_Get_CopyStepsOnOverrideRequest) returns (Sequence_Get_CopyStepsOnOverrideResponse);
  
  
  // Property: EntryPointNameExpression
  //
  // Specifies a string expression that determines the menu item name of the entry point.
  //
  // Note: This property applies only to an entry point sequence in a process model.
  //
  // Sequence_Set_EntryPointNameExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - val: string - Specifies a string expression that determines the menu item name of the entry point. 
  //
  // Sequence_Set_EntryPointNameExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Sequence_Get_EntryPointNameExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_Get_EntryPointNameExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies a string expression that determines the menu item name of the entry point. 
  //
  rpc Set_EntryPointNameExpression(Sequence_Set_EntryPointNameExpressionRequest) returns (Sequence_Set_EntryPointNameExpressionResponse);
  rpc Get_EntryPointNameExpression(Sequence_Get_EntryPointNameExpressionRequest) returns (Sequence_Get_EntryPointNameExpressionResponse);
  
  
  // Property: EntryPointEnabledExpression
  //
  // Specifies a Boolean expression the Sequence.EvalEntryPointEnabledExpressionEx method evaluates.
  //
  // If the expression evaluates to False, TestStand dims the entry point in the menu. If the expression is empty, the entry point is enabled in the menu.
  //
  // Sequence_Set_EntryPointEnabledExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - val: string - Specifies a Boolean expression the Sequence.EvalEntryPointEnabledExpressionEx method evaluates. 
  //
  // Sequence_Set_EntryPointEnabledExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Sequence_Get_EntryPointEnabledExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_Get_EntryPointEnabledExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies a Boolean expression the Sequence.EvalEntryPointEnabledExpressionEx method evaluates. 
  //
  rpc Set_EntryPointEnabledExpression(Sequence_Set_EntryPointEnabledExpressionRequest) returns (Sequence_Set_EntryPointEnabledExpressionResponse);
  rpc Get_EntryPointEnabledExpression(Sequence_Get_EntryPointEnabledExpressionRequest) returns (Sequence_Get_EntryPointEnabledExpressionResponse);
  
  
  // Property: EntryPointMenuHint
  //
  // Specifies a menu name for the entry point. You can specify multiple menu names separated by commas. An empty string value specifies that the application determines the menu the entry point appears in based on the entry point sequence type.
  //
  // Note: This property applies only to an entry point sequence in a process model.
  // An application uses the first menu name in the list that it can find in the user interface. This option is useful if you use multiple user interfaces that have different menu names. If an application cannot find any menus in the user interface with the names that you specify, the application uses the default menu for the entry point type.
  //
  // Sequence_Set_EntryPointMenuHintRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - val: string - Specifies a menu name for the entry point. You can specify multiple menu names separated by commas. An empty string value specifies that the application determines the menu the entry point appears in based on the entry point sequence type. 
  //
  // Sequence_Set_EntryPointMenuHintResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Sequence_Get_EntryPointMenuHintRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_Get_EntryPointMenuHintResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies a menu name for the entry point. You can specify multiple menu names separated by commas. An empty string value specifies that the application determines the menu the entry point appears in based on the entry point sequence type. 
  //
  rpc Set_EntryPointMenuHint(Sequence_Set_EntryPointMenuHintRequest) returns (Sequence_Set_EntryPointMenuHintResponse);
  rpc Get_EntryPointMenuHint(Sequence_Get_EntryPointMenuHintRequest) returns (Sequence_Get_EntryPointMenuHintResponse);
  
  
  // Property: HasMismatchedBlocks
  //
  // If this property is True, the sequence contains steps that define block structure and the steps are not properly matched. For example, this property is True if a sequence contains a For step without a corresponding End step.
  // Note: A sequence with mismatched blocks cannot execute.
  //
  // Sequence_Get_HasMismatchedBlocksRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_Get_HasMismatchedBlocksResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - If this property is True, the sequence contains steps that define block structure and the steps are not properly matched. For example, this property is True if a sequence contains a For step without a corresponding End step. Note: A sequence with mismatched blocks cannot execute. 
  //
  rpc Get_HasMismatchedBlocks(Sequence_Get_HasMismatchedBlocksRequest) returns (Sequence_Get_HasMismatchedBlocksResponse);
  
  
  // Property: Requirements
  //
  // Returns the Requirements property for the sequence. The Links subproperty of the Requirements property is an array of string values that represents the product and unit requirements the sequence covers.
  //
  // You can use the following pseudocode to add a new element to the list of requirements:
  // PropertyObject links = sequence.Requirements.GetPropertyObject("Links", 0);int nextAvailableIndex = links.GetNumElements();links.SetValStringByOffset(nextAvailableIndex, PropertyOptions.PropOption_InsertElement, "REQ_ABC");
  //
  // Sequence_Get_RequirementsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_Get_RequirementsResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Returns the Requirements property for the sequence. The Links subproperty of the Requirements property is an array of string values that represents the product and unit requirements the sequence covers. 
  //
  rpc Get_Requirements(Sequence_Get_RequirementsRequest) returns (Sequence_Get_RequirementsResponse);
  
  
  // Property: SequenceIndex
  //
  // Returns the zero-based index of the sequence within the containing sequence file. Returns -1 if the sequence is not within a sequence file.
  //
  // Sequence_Get_SequenceIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_Get_SequenceIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the zero-based index of the sequence within the containing sequence file. Returns -1 if the sequence is not within a sequence file. 
  //
  rpc Get_SequenceIndex(Sequence_Get_SequenceIndexRequest) returns (Sequence_Get_SequenceIndexResponse);
  
  
  // Property: Id
  //
  // Returns a unique identification number for the sequence.
  // Note: The ID number is never zero.
  //
  // The ID number is unique with respect to all sequences that you open before you shut down the TestStand Engine.
  // Use this ID number to compare two sequence object references to determine whether they refer to the same underlying sequence. A run-time copy of a sequence has a different ID than the corresponding edit-time copy of the sequence.
  //
  // Sequence_Get_IdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_Get_IdResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a unique identification number for the sequence. Note: The ID number is never zero. 
  //
  rpc Get_Id(Sequence_Get_IdRequest) returns (Sequence_Get_IdResponse);
  
  
  // Property: FailureAction
  //
  // Specifies whether execution flow jumps to the Cleanup step group when a step sets the status property of the sequence to Failed.
  //
  // Sequence_Set_FailureActionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //    - val: FailureActions - Specifies whether execution flow jumps to the Cleanup step group when a step sets the status property of the sequence to Failed. 
  //
  // Sequence_Set_FailureActionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Sequence_Get_FailureActionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceInstance - The id of the Sequence object.
  //
  // Sequence_Get_FailureActionResponse - The response message from the server. It provides the return value.
  //    - returnValue: FailureActions - Specifies whether execution flow jumps to the Cleanup step group when a step sets the status property of the sequence to Failed. 
  //
  rpc Set_FailureAction(Sequence_Set_FailureActionRequest) returns (Sequence_Set_FailureActionResponse);
  rpc Get_FailureAction(Sequence_Get_FailureActionRequest) returns (Sequence_Get_FailureActionResponse);
  
  
}
message StepInstance {
  // Specifies the handle of the Step instance in the server.
  string id = 1;
}

message EditArgsInstance {
  // Specifies the handle of the EditArgs instance in the server.
  string id = 1;
}
message Sequence_GetNumStepsRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies a particular step group.
  StepGroups stepGroupParam = 2;
}

message Sequence_GetNumStepsResponse {
  // The return type of the Int32 object.
  int32 returnValue = 1;
}

message Sequence_GetStepRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies the zero-based step index that indicates the position of the step in the step group.
  int32 index = 2;
  // Specifies a particular step group.
  StepGroups stepGroupParam = 3;
}

message Sequence_GetStepResponse {
  // The return type of the Step object.
  StepInstance returnValue = 1;
}

message Sequence_GetStepByNameRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies the name of the step for which you want a reference. When more than one step using the same name exists in the step group, the method returns the first step with that name.  Name comparison is case-insensitive.
  string nameOfStep = 2;
  // Specifies a particular step group.
  StepGroups stepGroupParam = 3;
}

message Sequence_GetStepByNameResponse {
  // The return type of the Step object.
  StepInstance returnValue = 1;
}

message Sequence_InsertStepRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies the step to insert.
  StepInstance stepToInsert = 2;
  // Specifies the zero-based index that indicates the location where to insert the step in the step group.
  int32 index = 3;
  // Specifies a particular step group.
  StepGroups stepGroupParam = 4;
}

message Sequence_InsertStepResponse {
}

message Sequence_RemoveStepRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies the zero-based index that indicates the location where to insert the step in the step group.
  int32 index = 2;
  // Specifies a particular step group.
  StepGroups stepGroupParam = 3;
}

message Sequence_RemoveStepResponse {
  // The return type of the Step object.
  StepInstance returnValue = 1;
}

message Sequence_DeleteStepRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies the zero-based step index that indicates the position of the step in the step group.
  int32 index = 2;
  // Specifies the step group that contains the step you want to delete.
  StepGroups stepGroupParam = 3;
}

message Sequence_DeleteStepResponse {
}

message Sequence_StepNameExistsRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies the name to search for.
  string nameOfStep = 2;
  // Specifies a particular step group.
  StepGroups stepGroupParam = 3;
}

message Sequence_StepNameExistsResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message Sequence_EvalEntryPointNameExpressionRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies the currently selected sequence file in the user interface.
  SequenceFileInstance sequenceFileParam = 2;
}

message Sequence_EvalEntryPointNameExpressionResponse {
  // Returns the name of the entry point.
  string returnValue = 1;
}

message Sequence_EvalEntryPointEnabledExpressionRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies the currently selected sequence file in the user interface.
  SequenceFileInstance sequenceFileParam = 2;
}

message Sequence_EvalEntryPointEnabledExpressionResponse {
  // Returns True if the entry point is enabled in the user interface menu bar.
  bool returnValue = 1;
}

message Sequence_GetEntryPointMenuFromHintRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Pass a comma-separated list of the menu names in the user interface, such as "File,Configure,Debug".
  // Note: The method ignores all "_" and "&" characters when comparing the names in the list with the menu hints for the entry point.
  string menuNameList = 2;
}

message Sequence_GetEntryPointMenuFromHintResponse {
  // Returns a zero-based index into the list of menu names you pass as the menuNameList parameter. This index indicates the menu to which the entry point belongs in the menu. If none of the menus in the list matches a menu hint for the entry point, the method returns -1. If this occurs, you must choose the menu in which to display the entry point. You can choose the menu based on the type of entry point.
  int32 returnValue = 1;
}

message Sequence_AsPropertyObjectRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message Sequence_GetStepIndexRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies the name of the step for which you want the index. When more than one step using the same name exists in the step group, the method returns the index of the first step with that name. Name comparison is case-insensitive. You can also pass a unique step ID.
  string nameOfStep = 2;
  // Specifies a particular step group.
  StepGroups stepGroupParam = 3;
}

message Sequence_GetStepIndexResponse {
  // Returns the index of the step with the name that matches the name you specify. Returns -1 if no such step exists.
  int32 returnValue = 1;
}

message Sequence_GetBreakOnEndRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies a particular step group.
  StepGroups stepGroupParam = 2;
  // Pass a reference to an Execution object to obtain the breakpoint settings on the End step, which apply to a particular execution. If there is no execution-specific breakpoint setting or if you do not pass an Execution object, the method returns the breakpoint setting on the End step of the sequence file.
  PropertyObjectInstance executionParam = 3;
}

message Sequence_GetBreakOnEndResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message Sequence_SetBreakOnEndRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies a particular step group.
  StepGroups stepGroupParam = 2;
  // Pass True if you want executions of this sequence and step group to break after executing steps.
  bool breakOnEnd = 3;
  // Pass a reference to an Execution object to obtain the breakpoint settings on the End step, which apply to a particular execution. If there is no execution-specific breakpoint setting or if you do not pass an Execution object, the method returns the breakpoint setting on the End step of the sequence file.
  PropertyObjectInstance executionParam = 4;
}

message Sequence_SetBreakOnEndResponse {
}

message Sequence_LoadModulesRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies one or more LoadModuleOptions using the bitwise-OR operator to modify the behavior of this method.
  LoadModuleOptions loadOptions = 2;
  // If passing the LoadModule_EvaluateExpressions flag to the loadOptions parameter, pass a SequenceContext object for this parameter to use when evaluating the expressions. Also, if calling this method from a step in an execution, pass the sequence context of the execution.
  PropertyObjectInstance sequenceContextParam = 3;
}

message Sequence_LoadModulesResponse {
  // Returns True on success, or False if a module fails to load.
  bool returnValue = 1;
}

message Sequence_GetEffectiveTypeRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_GetEffectiveTypeResponse {
  // The return type of the SequenceTypes object.
  SequenceTypes returnValue = 1;
}

message Sequence_EvalEntryPointNameExpressionExRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies which items in the user interface are currently selected.
  EditArgsInstance EditArgs = 2;
}

message Sequence_EvalEntryPointNameExpressionExResponse {
  // Returns the name of the entry point.
  string returnValue = 1;
}

message Sequence_EvalEntryPointEnabledExpressionExRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies which items in the user interface are currently selected.
  EditArgsInstance EditArgs = 2;
}

message Sequence_EvalEntryPointEnabledExpressionExResponse {
  // Returns True if you can enable the entry point in the user interface menu bar.
  bool returnValue = 1;
}

message Sequence_UnloadModulesRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_UnloadModulesResponse {
  // Returns True if all code modules are unloaded.
  // Note: Some code modules might not be unloaded because they are executing.
  bool returnValue = 1;
}

message Sequence_SetBreakOnEndSettingsRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies a particular step group.
  StepGroups stepGroupParam = 2;
  // Specifies whether the breakpoint is set. If a breakpoint is set, this parameter returns True.
  bool isSet = 3;
  // Specifies whether the breakpoint is enabled. TestStand ignores disabled breakpoints during execution.
  bool enabled = 4;
  // Specifies the number of iterations the execution skips the breakpoint before suspending execution. Pass 0 if you do not want to use a conditional pass count.
  int32 passCount = 5;
  // Specifies the expression that must evaluate to True before suspending the execution. An empty value defaults to True. If you specify a non-zero pass count value and a condition expression for the breakpoint, the pass count only decrements when the expression evaluates to True.
  string Condition = 6;
  // Specifies a reference to an Execution object to obtain the breakpoint settings on the End step, which apply to a particular execution. If there is no execution-specific breakpoint setting or if you do not pass an Execution object, the method returns the breakpoint setting on the End step of the sequence file.
  PropertyObjectInstance executionParam = 7;
}

message Sequence_SetBreakOnEndSettingsResponse {
}

message Sequence_GetBreakOnEndSettingsRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies a particular step group.
  StepGroups stepGroupParam = 2;
  // Pass a reference to an Execution object to obtain the breakpoint settings on the End step, which apply to a particular execution. If there is no execution-specific breakpoint setting or if you do not pass an Execution object, the method returns the breakpoint setting on the End step of the sequence file.
  PropertyObjectInstance executionParam = 3;
}

message Sequence_GetBreakOnEndSettingsResponse {
  // Returns a value that indicates whether the breakpoint is set.
  bool isSet = 1;
  // Returns a value that indicates whether the breakpoint is enabled. TestStand ignores disabled breakpoints during execution.
  bool enabled = 2;
  // Returns the number of times the execution must evaluate the condition expression before suspending the execution. Pass 0 if you do not want to use a conditional pass count.
  int32 passCount = 3;
  // Returns the expression that must evaluate to True before suspending the execution. An empty value defaults to True. If you specify a non-zero value for the passCount parameter and a condition expression for the breakpoint, the pass count decrements only when the expression evaluates to True.
  string Condition = 4;
}

message Sequence_CreateNewUniqueStepIdsRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_CreateNewUniqueStepIdsResponse {
}

message Sequence_GetStepByUniqueIdRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies the unique ID of the step for which you want a reference.
  string UniqueStepId = 2;
}

message Sequence_GetStepByUniqueIdResponse {
  // The return type of the Step object.
  StepInstance returnValue = 1;
}

message Sequence_Get_ParametersRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_Get_ParametersResponse {
  // Returns the PropertyObject that contains the parameters for the sequence.
  PropertyObjectInstance returnValue = 1;
}

message Sequence_Get_LocalsRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_Get_LocalsResponse {
  // Returns the PropertyObject that contains the local variables for the sequence.
  PropertyObjectInstance returnValue = 1;
}

message Sequence_Set_ShowEntryPointForFileWindowRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Set this property to True if you want the entry point to appear in the menu bar when a Sequence File window is the active window.
  bool val = 2;
}

message Sequence_Set_ShowEntryPointForFileWindowResponse {
}

message Sequence_Get_ShowEntryPointForFileWindowRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_Get_ShowEntryPointForFileWindowResponse {
  // Set this property to True if you want the entry point to appear in the menu bar when a Sequence File window is the active window.
  bool returnValue = 1;
}

message Sequence_Set_ShowEntryPointForExeWindowRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Set this property to True if you want the entry point to appear in the menu bar when an Execution window is the active window.
  bool val = 2;
}

message Sequence_Set_ShowEntryPointForExeWindowResponse {
}

message Sequence_Get_ShowEntryPointForExeWindowRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_Get_ShowEntryPointForExeWindowResponse {
  // Set this property to True if you want the entry point to appear in the menu bar when an Execution window is the active window.
  bool returnValue = 1;
}

message Sequence_Set_EntryPointInitiallyHiddenRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies if an execution of the entry point is hidden when it starts.
  bool val = 2;
}

message Sequence_Set_EntryPointInitiallyHiddenResponse {
}

message Sequence_Get_EntryPointInitiallyHiddenRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_Get_EntryPointInitiallyHiddenResponse {
  // Specifies if an execution of the entry point is hidden when it starts.
  bool returnValue = 1;
}

message Sequence_Set_TypeRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies the type of the sequence.
  SequenceTypes val = 2;
}

message Sequence_Set_TypeResponse {
}

message Sequence_Get_TypeRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_Get_TypeResponse {
  // Specifies the type of the sequence.
  SequenceTypes returnValue = 1;
}

message Sequence_Set_NameRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Returns or specifies the name of the sequence.
  string val = 2;
}

message Sequence_Set_NameResponse {
}

message Sequence_Get_NameRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_Get_NameResponse {
  // Returns or specifies the name of the sequence.
  string returnValue = 1;
}

message Sequence_Set_GotoCleanupOnFailureRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Note: This property is obsolete. Use the Sequence.FailureAction property instead.
  bool val = 2;
}

message Sequence_Set_GotoCleanupOnFailureResponse {
}

message Sequence_Get_GotoCleanupOnFailureRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_Get_GotoCleanupOnFailureResponse {
  // Note: This property is obsolete. Use the Sequence.FailureAction property instead.
  bool returnValue = 1;
}

message Sequence_Set_DisableResultsRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies to disable result recording for any steps in the sequence.
  bool val = 2;
}

message Sequence_Set_DisableResultsResponse {
}

message Sequence_Get_DisableResultsRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_Get_DisableResultsResponse {
  // Specifies to disable result recording for any steps in the sequence.
  bool returnValue = 1;
}

message Sequence_Set_ShowEntryPointForEditorOnlyRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Set this property to True if you want the entry point to appear only in the menu bar of a sequence editor and not in an operator interface.
  bool val = 2;
}

message Sequence_Set_ShowEntryPointForEditorOnlyResponse {
}

message Sequence_Get_ShowEntryPointForEditorOnlyRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_Get_ShowEntryPointForEditorOnlyResponse {
  // Set this property to True if you want the entry point to appear only in the menu bar of a sequence editor and not in an operator interface.
  bool returnValue = 1;
}

message Sequence_Set_ShowEntryPointForAllWindowsRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Set this property to True if you want the entry point to appear in the menu bar, regardless of what type of window is active.
  bool val = 2;
}

message Sequence_Set_ShowEntryPointForAllWindowsResponse {
}

message Sequence_Get_ShowEntryPointForAllWindowsRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_Get_ShowEntryPointForAllWindowsResponse {
  // Set this property to True if you want the entry point to appear in the menu bar, regardless of what type of window is active.
  bool returnValue = 1;
}

message Sequence_Set_EntryPointIgnoreClientRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies if the entry point ignores the client sequence file.
  bool val = 2;
}

message Sequence_Set_EntryPointIgnoreClientResponse {
}

message Sequence_Get_EntryPointIgnoreClientRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_Get_EntryPointIgnoreClientResponse {
  // Specifies if the entry point ignores the client sequence file.
  bool returnValue = 1;
}

message Sequence_Set_EntryPointCheckToSaveTitledSeqFilesRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies if sequence files must be saved before the entry point executes.
  bool val = 2;
}

message Sequence_Set_EntryPointCheckToSaveTitledSeqFilesResponse {
}

message Sequence_Get_EntryPointCheckToSaveTitledSeqFilesRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_Get_EntryPointCheckToSaveTitledSeqFilesResponse {
  // Specifies if sequence files must be saved before the entry point executes.
  bool returnValue = 1;
}

message Sequence_Get_SequenceFileRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_Get_SequenceFileResponse {
  // Returns the containing sequence file or a NULL reference if this sequence does not belong to a sequence file.
  SequenceFileInstance returnValue = 1;
}

message Sequence_Set_AllowInteractiveExecutionOfEntryPointRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Set this property to False to prohibit the user from using this entry point sequence to run an interactive execution in the sequence editor or user interface.
  bool val = 2;
}

message Sequence_Set_AllowInteractiveExecutionOfEntryPointResponse {
}

message Sequence_Get_AllowInteractiveExecutionOfEntryPointRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_Get_AllowInteractiveExecutionOfEntryPointResponse {
  // Set this property to False to prohibit the user from using this entry point sequence to run an interactive execution in the sequence editor or user interface.
  bool returnValue = 1;
}

message Sequence_Set_OptimizeNonReentrantCallsRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies to decrease the amount of time required for TestStand to call the sequence after the first call to the sequence in an execution.
  bool val = 2;
}

message Sequence_Set_OptimizeNonReentrantCallsResponse {
}

message Sequence_Get_OptimizeNonReentrantCallsRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_Get_OptimizeNonReentrantCallsResponse {
  // Specifies to decrease the amount of time required for TestStand to call the sequence after the first call to the sequence in an execution.
  bool returnValue = 1;
}

message Sequence_Set_CopyStepsOnOverrideRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies the behavior of TestStand when you click Add in the Sequence File Callbacks dialog box to create an overriding sequence file in the client sequence file.
  bool val = 2;
}

message Sequence_Set_CopyStepsOnOverrideResponse {
}

message Sequence_Get_CopyStepsOnOverrideRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_Get_CopyStepsOnOverrideResponse {
  // Specifies the behavior of TestStand when you click Add in the Sequence File Callbacks dialog box to create an overriding sequence file in the client sequence file.
  bool returnValue = 1;
}

message Sequence_Set_EntryPointNameExpressionRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies a string expression that determines the menu item name of the entry point.
  string val = 2;
}

message Sequence_Set_EntryPointNameExpressionResponse {
}

message Sequence_Get_EntryPointNameExpressionRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_Get_EntryPointNameExpressionResponse {
  // Specifies a string expression that determines the menu item name of the entry point.
  string returnValue = 1;
}

message Sequence_Set_EntryPointEnabledExpressionRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies a Boolean expression the Sequence.EvalEntryPointEnabledExpressionEx method evaluates.
  string val = 2;
}

message Sequence_Set_EntryPointEnabledExpressionResponse {
}

message Sequence_Get_EntryPointEnabledExpressionRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_Get_EntryPointEnabledExpressionResponse {
  // Specifies a Boolean expression the Sequence.EvalEntryPointEnabledExpressionEx method evaluates.
  string returnValue = 1;
}

message Sequence_Set_EntryPointMenuHintRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies a menu name for the entry point. You can specify multiple menu names separated by commas. An empty string value specifies that the application determines the menu the entry point appears in based on the entry point sequence type.
  string val = 2;
}

message Sequence_Set_EntryPointMenuHintResponse {
}

message Sequence_Get_EntryPointMenuHintRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_Get_EntryPointMenuHintResponse {
  // Specifies a menu name for the entry point. You can specify multiple menu names separated by commas. An empty string value specifies that the application determines the menu the entry point appears in based on the entry point sequence type.
  string returnValue = 1;
}

message Sequence_Get_HasMismatchedBlocksRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_Get_HasMismatchedBlocksResponse {
  // If this property is True, the sequence contains steps that define block structure and the steps are not properly matched. For example, this property is True if a sequence contains a For step without a corresponding End step.
  // Note: A sequence with mismatched blocks cannot execute.
  bool returnValue = 1;
}

message Sequence_Get_RequirementsRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_Get_RequirementsResponse {
  // Returns the Requirements property for the sequence. The Links subproperty of the Requirements property is an array of string values that represents the product and unit requirements the sequence covers.
  PropertyObjectInstance returnValue = 1;
}

message Sequence_Get_SequenceIndexRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_Get_SequenceIndexResponse {
  // Returns the zero-based index of the sequence within the containing sequence file. Returns -1 if the sequence is not within a sequence file.
  int32 returnValue = 1;
}

message Sequence_Get_IdRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_Get_IdResponse {
  // Returns a unique identification number for the sequence.
  // Note: The ID number is never zero.
  int32 returnValue = 1;
}

message Sequence_Set_FailureActionRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
  // Specifies whether execution flow jumps to the Cleanup step group when a step sets the status property of the sequence to Failed.
  FailureActions val = 2;
}

message Sequence_Set_FailureActionResponse {
}

message Sequence_Get_FailureActionRequest {
  // The id of the Sequence object.
  SequenceInstance instance = 1;
}

message Sequence_Get_FailureActionResponse {
  // Specifies whether execution flow jumps to the Cleanup step group when a step sets the status property of the sequence to Failed.
  FailureActions returnValue = 1;
}

// Step
//
// Objects of the Step class represent steps in TestStand sequences. A step can perform many tasks, such as initializing an instrument, performing a complex test, or making a decision that affects the flow of execution in a sequence. You can obtain a reference to a step in a sequence by calling the Sequence.GetStep method. Create new steps with the Engine.NewStep method.
// Note: Built-in properties of steps are flagged to be shared at run-time.  Any changes to built-in properties within the run-time copy of the step edits the original step object in the sequence file.
//
service Step {
  // Method: GetStepSettingsString
  //
  // Returns a string description of the step settings.
  //
  // The string description includes information about settings such as synchronization, switching, run mode, looping, post actions, preconditions, pre/post/status expressions, module specification, breakpoint options, window activation, result recording, module loading and unloading, ignoring of run-time errors and termination, subsequence tracing, and whether a step failure causes a sequence failure. This property returns a string that can change whenever you modify any of the step settings.
  //
  // Step_GetStepSettingsStringRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepInstance - The id of the Step object.
  //    - options: int32 - Specifies a StepDescriptionOptions constant. Use the bitwise-OR operator to specify multiple StepDescriptionOptions constants.
  //    - executionParam: ExecutionInstance - Specifies a reference to an Execution object to retrieve execution specific settings for a running instance of the step.
  //
  // Step_GetStepSettingsStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetStepSettingsString(Step_GetStepSettingsStringRequest) returns (Step_GetStepSettingsStringResponse);
  
  
  // Method: DisplayAdditionalResultsDialog
  //
  // Launches the Additional Results dialog box, in which you can edit additional results for a step.
  //
  // Step_DisplayAdditionalResultsDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepInstance - The id of the Step object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - dlgOptions: int32 - Specifies any combination of CommonDialogOptions.
  //
  // Step_DisplayAdditionalResultsDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if you click OK in the dialog box. Returns False if you click Cancel. 
  //
  rpc DisplayAdditionalResultsDialog(Step_DisplayAdditionalResultsDialogRequest) returns (Step_DisplayAdditionalResultsDialogResponse);
  
  
  // Method: LogAdditionalResult
  //
  // If the step is currently executing, this method adds a custom additional result to the step results.
  //
  // If the step is looping, this method adds a custom additional result to the Step.CurrentLoopResult. If the step is not looping, this method adds a custom additional result to Step.LastStepResult property.
  // This method returns an error if the step is not executing. This method performs no action if you disable result recording.
  // This method does not affect the additional result settings of the step that you programmatically configure using the Step.AdditionalResults property.
  //
  // Step_LogAdditionalResultRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepInstance - The id of the Step object.
  //    - resultValue: PropertyObjectInstance - Specifies the value of the additional result.
  //    - resultName: string - Specifies the name of the additional result. Pass an empty string to use the name of the object you passed for the resultValue parameter.
  //    - resultPropertyFlags: int32 - Specifies the PropertyFlags of the additional result. You must include the PropFlags_IncludeInReport flag for the additional result to appear in the report.
  //
  // Step_LogAdditionalResultResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc LogAdditionalResult(Step_LogAdditionalResultRequest) returns (Step_LogAdditionalResultResponse);
  
  
  // Method: AsPropertyObject
  //
  // Returns the underlying PropertyObject that represents the Step object. Use the PropertyObject to modify, add, or remove custom properties of the object.
  //
  // Step_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(Step_AsPropertyObjectRequest) returns (Step_AsPropertyObjectResponse);
  
  
  // Method: ExecuteEditSubstep
  //
  // Note: This method is obsolete. Use the Step.ExecuteSubstep method instead.
  //
  // Executes the first Edit substep for the step, if one exists. Check the Step.CanExecuteEditSubstep property before calling this method.
  //
  // Step_ExecuteEditSubstepRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_ExecuteEditSubstepResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the Edit substep modifies the step. 
  //
  rpc ExecuteEditSubstep(Step_ExecuteEditSubstepRequest) returns (Step_ExecuteEditSubstepResponse);
  
  
  // Method: SpecifyModule
  //
  // Launches the Specify Module dialog box for the step, if one exists.
  //
  // Check the Step.CanSpecifyModule property to verify that you can call this method.
  // The current version of TestStand does not support all SpecifyModuleOptions options for all adapters, as the following list indicates:
  // * LabVIEW Adapter—Only supports SpecMod_ReadOnly.    * LabWindows/CVI Adapter—Supports all options.    * C/C++ DLL Adapter—Supports all options.    * .NET—Only supports SpecMod_ReadOnly.    * ActiveX/COM Adapter—Only supports SpecMod_ReadOnly.    * Sequence Adapter—Supports all options.    * HTBasic Adapter—Only supports SpecMod_ReadOnly.
  //
  // Step_SpecifyModuleRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepInstance - The id of the Step object.
  //    - specModOptions: int32 - Specifies one or more SpecifyModuleOptions to modify the behavior of the dialog box.
  //
  // Step_SpecifyModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the Specify Module dialog box modifies the step. 
  //
  rpc SpecifyModule(Step_SpecifyModuleRequest) returns (Step_SpecifyModuleResponse);
  
  
  // Method: SetRunModeEx
  //
  // Sets the run mode of a step.
  //
  // You can set the run mode either for the sequence file or for a particular execution. If you pass an Execution object for the executionParam parameter, the run mode change applies only to that execution and is lost when the execution is destroyed. If you do not pass an Execution object, the run mode change effects all current and future executions and is saved when you save the sequence file.
  //
  // Step_SetRunModeExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepInstance - The id of the Step object.
  //    - newRunMode: string - The RunModes constants define the valid values for this parameter.
  //    - executionParam: ObjectInstance - If you want to set the run mode for a particular execution only, pass a reference to an Execution object.
  //
  // Step_SetRunModeExResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetRunModeEx(Step_SetRunModeExRequest) returns (Step_SetRunModeExResponse);
  
  
  // Method: GetRunModeEx
  //
  // Obtains the run mode of a step.
  //
  // You can get the run mode for either the sequence file or for a particular execution. If you pass an Execution object for the executionParam parameter, the run mode the method returns is the one that you set for that execution. If no execution-specific run mode exists or if you do not pass an Execution object, this method returns the run mode of the sequence file.
  //
  // Step_GetRunModeExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepInstance - The id of the Step object.
  //    - executionParam: ObjectInstance - Specifies a reference to an Execution object if you want to obtain the run mode that applies to a particular execution.
  //
  // Step_GetRunModeExResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns a run mode string. The RunModes constants define the valid return values for this method. 
  //
  rpc GetRunModeEx(Step_GetRunModeExRequest) returns (Step_GetRunModeExResponse);
  
  
  // Method: SetBreakOnStepEx
  //
  // Note: This method is obsolete. Use the Step.SetBreakSettings method instead.
  //
  // Sets or unsets a breakpoint on the step.
  //
  // Step_SetBreakOnStepExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepInstance - The id of the Step object.
  //    - newBreakSetting: bool - Pass True to set a breakpoint on the step or False to unset a breakpoint.
  //    - executionParam: ObjectInstance - Specifies a reference to an Execution object to obtain the breakpoint settings on a step, which apply to a particular execution. If there is no execution-specific breakpoint setting or if you do not pass an Execution object, the method sets the breakpoint setting on the step of the sequence file.
  //
  // Step_SetBreakOnStepExResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetBreakOnStepEx(Step_SetBreakOnStepExRequest) returns (Step_SetBreakOnStepExResponse);
  
  
  // Method: GetBreakOnStepEx
  //
  // Note: This method is obsolete. Use the Step.GetBreakSettings method instead.
  //
  // Determines if a breakpoint is set on the step.
  //
  // Step_GetBreakOnStepExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepInstance - The id of the Step object.
  //    - executionParam: ObjectInstance - Specifies a reference to an Execution object to obtain the breakpoint settings on a step, which apply to a particular execution. If there is no execution-specific breakpoint setting or if you do not pass an Execution object, the method returns the breakpoint setting on the step of the sequence file.
  //
  // Step_GetBreakOnStepExResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if a breakpoint is set on the step. 
  //
  rpc GetBreakOnStepEx(Step_GetBreakOnStepExRequest) returns (Step_GetBreakOnStepExResponse);
  
  
  // Method: LoadModule
  //
  // Loads the code module for the step.
  //
  // Step_LoadModuleRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepInstance - The id of the Step object.
  //    - loadOptions: int32 - Specifies one or more LoadModuleOptions using the bitwise-OR operator to modify the behavior of this method.
  //    - sequenceContextParam: ObjectInstance - If passing the LoadModule_EvaluateExpressions flag to the loadOptions parameter, pass a SequenceContext object for this parameter to use when evaluating the expressions. Also, if you are calling this method from a step in an execution, pass the sequence context of the execution.
  //
  // Step_LoadModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True on success or False if the module fails to load. 
  //
  rpc LoadModule(Step_LoadModuleRequest) returns (Step_LoadModuleResponse);
  
  
  // Method: GetResultStatusDisplayString
  //
  // Returns a localized string description of the step result.
  //
  // Step_GetResultStatusDisplayStringRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_GetResultStatusDisplayStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetResultStatusDisplayString(Step_GetResultStatusDisplayStringRequest) returns (Step_GetResultStatusDisplayStringResponse);
  
  
  // Method: GetExecutionFlowString
  //
  // Note: This method is obsolete. Use the Step.GetStepSettingsString method instead.
  //
  // Returns a string description of the execution flow settings for this step.
  // Execution flow settings include preconditions, post actions, loop settings, and run mode. This string can change whenever you modify any of the step settings.
  //
  // Step_GetExecutionFlowStringRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepInstance - The id of the Step object.
  //    - options: int32 - Specifies a StepDescriptionOptions constant. Use the bitwise-OR operator to specify multiple StepDescriptionOptions constants.
  //    - executionParam: ObjectInstance - Specifies a reference to an Execution object if you want to obtain the run mode that applies to a particular execution. If there is no execution-specific run mode for the step or if you do not pass an Execution object, the method returns the run mode setting of the sequence file.
  //
  // Step_GetExecutionFlowStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetExecutionFlowString(Step_GetExecutionFlowStringRequest) returns (Step_GetExecutionFlowStringResponse);
  
  
  // Method: CreateCode
  //
  // Creates a code module for this step.
  //
  // The contents of the code module depend on the adapter used to create this step, the module settings for this step, and the code templates configured for the step type.
  // For adapters that use Microsoft Visual Studio, calling this method can result in prompts to the user if any of the following conditions exist:
  // * Multiple versions of Visual Studio exist on the computer and you select the Always Prompt for Version option from the Version of Visual Studio to Use for Create and Edit Code ring control in the Adapter Configuration dialog box.    * Multiple versions of Visual Studio exist on the computer and you select the Use the Version that Matches the Project File option from the Version of Visual Studio to Use for Create and Edit Code ring control in the Adapter Configuration dialog box, and TestStand cannot match the version of the file.    * A method already exists with the same name.    * The specified solution does not contain the specified project.    * The specified project does not contain the specified source file.Note: Some adapters do not support this method. Use the Step.CanCreateCode method to determine whether the step can create code with this method.
  //
  // Step_CreateCodeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_CreateCodeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Indicates if the step was modified. 
  //
  rpc CreateCode(Step_CreateCodeRequest) returns (Step_CreateCodeResponse);
  
  
  // Method: EditCode
  //
  // Launches an external application to edit the code module associated with this step.
  //
  // A different application is launched for each adapter. For example, the EditCode method launches LabVIEW for steps created with the LabVIEW Adapter.
  // For adapters that use Microsoft Visual Studio, calling this method can result in prompts to the user if any of the following conditions exist:
  // * Multiple versions of Visual Studio exist on the computer and you select the Always Prompt for Version option from the Version of Visual Studio to Use for Create and Edit Code ring control in the Adapter Configuration dialog box.    * Multiple versions of Visual Studio exist on the computer and you select the Use the Version that Matches the Project File option from the Version of Visual Studio to Use for Create and Edit Code ring control in the Adapter Configuration dialog box, and TestStand cannot match the version of the file.    * The specified solution does not contain the specified project.    * The specified project does not contain the specified source file.
  //
  // Step_EditCodeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_EditCodeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Indicates if the step was modified. 
  //
  rpc EditCode(Step_EditCodeRequest) returns (Step_EditCodeResponse);
  
  
  // Method: CanExecuteSubstep
  //
  // Returns a value that indicates whether you can execute the specified substep.
  //
  // Call this method before calling the Step.ExecuteSubstep method.
  //
  // Step_CanExecuteSubstepRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepInstance - The id of the Step object.
  //    - substepIndex: int32 - Specifies the zero-based index of the substep.
  //    - sequenceContextParam: ObjectInstance - If you call this method from a step, you must pass a SequenceContext. For executing substeps from a user interface, do not pass any value for this parameter.
  //
  // Step_CanExecuteSubstepResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc CanExecuteSubstep(Step_CanExecuteSubstepRequest) returns (Step_CanExecuteSubstepResponse);
  
  
  // Method: ExecuteSubstep
  //
  // Executes a step type substep.
  //
  // Call this method to execute a substep from the step type of the specified step. Examine the step type to determine the substeps it provides. This method can execute any type of substep including Pre, Post, Edit, or Custom substeps.
  // Use the PropertyObject.GetArrayOffset method to obtain the index from the name of a substep. For example: RunState.PreviousStep.ExecuteSubstep(RunState.Engine.GetTypeDefinition("MessagePopup").GetArrayOffset("Substeps", 0, "[\"Post\"]"))
  //
  // Step_ExecuteSubstepRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepInstance - The id of the Step object.
  //    - substepIndex: int32 - Specifies the zero-based index of the substep. Use the PropertyObject.GetArrayOffset method to obtain the index from the name of a substep.
  //    - sequenceContextParam: ObjectInstance - Typically, you pass the current sequence context when you call this method from within a thread of an execution. If you do not pass any value for this parameter, TestStand approximates the sequence context as if you are running the step in a sequence. When executing substeps from a user interface, do not pass any value for this parameter.
  //
  // Step_ExecuteSubstepResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the substep indicates that it modified the step by incrementing  the sequence file change count. Typically, only Edit substeps increment the sequence file change count. 
  //
  rpc ExecuteSubstep(Step_ExecuteSubstepRequest) returns (Step_ExecuteSubstepResponse);
  
  
  // Method: UnloadModule
  //
  // Unloads the code module for the step.
  //
  // The module is not unloaded if the step is currently executing.
  //
  // Step_UnloadModuleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_UnloadModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Indicates if the module was successfully unloaded. 
  //
  rpc UnloadModule(Step_UnloadModuleRequest) returns (Step_UnloadModuleResponse);
  
  
  // Method: GetDescriptionEx
  //
  // Returns a description string for the step.
  //
  // This string can change whenever you modify any of the step settings.
  //
  // Step_GetDescriptionExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepInstance - The id of the Step object.
  //    - options: int32 - Specifies one or more StepDescriptionOptions constants. Use the bitwise-OR operator to specify multiple sequence file flags.
  //
  // Step_GetDescriptionExResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetDescriptionEx(Step_GetDescriptionExRequest) returns (Step_GetDescriptionExResponse);
  
  
  // Method: GetEditSubstepMenuStructure
  //
  // Returns the menu structure for the Edit substeps associated with the step type of the step.
  //
  // A step type can have more than one Edit substep associated with it. This function returns an object that describes the menu used to select an Edit substep to execute.
  //
  // Step_GetEditSubstepMenuStructureRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_GetEditSubstepMenuStructureResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The object that specifies the menu structure. See MenuItemProperties for a description of this property object. 
  //
  rpc GetEditSubstepMenuStructure(Step_GetEditSubstepMenuStructureRequest) returns (Step_GetEditSubstepMenuStructureResponse);
  
  
  // Method: SetBreakSettings
  //
  // Specifies if the step of the sequence is set to break.
  //
  // Step_SetBreakSettingsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepInstance - The id of the Step object.
  //    - isSet: bool - Specifies if the breakpoint is set.
  //    - enabled: bool - Specifies if the breakpoint is enabled. TestStand ignores disabled breakpoints during execution.
  //    - passCount: int32 - Specifies the number of iterations the execution skips the breakpoint before suspending execution. Pass 0 if you do not want to use a conditional pass count.
  //    - Condition: string - Specifies the expression that must evaluate to True before suspending the execution. An empty value defaults to True. If you specify a non-zero pass count value and a condition expression for the breakpoint, the pass count only decrements when the expression evaluates to True.
  //    - executionParam: ObjectInstance - Specifies a reference to an Execution object to update the breakpoint settings on a step, which apply to a particular execution. If there is no execution-specific breakpoint setting or if you do not pass an Execution object, the method sets the breakpoint setting on the step of the sequence file.
  //
  // Step_SetBreakSettingsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetBreakSettings(Step_SetBreakSettingsRequest) returns (Step_SetBreakSettingsResponse);
  
  
  // Method: GetBreakSettings
  //
  // Returns a value that indicates whether the step of a sequence is set to break.
  //
  // Step_GetBreakSettingsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepInstance - The id of the Step object.
  //    - executionParam: ObjectInstance - Specifies a reference to an Execution object to obtain the breakpoint settings on a step, which apply to a particular execution. If there is no execution-specific breakpoint setting or if you do not pass an Execution object, the method returns the breakpoint setting on the step of the sequence file.
  //
  // Step_GetBreakSettingsResponse - The response message from the server. It provides the output parameters.
  //    - isSet: boo - Returns a value that indicates whether the breakpoint is set.
  //    - enabled: boo - Returns a value that indicates whether the breakpoint is enabled. TestStand ignores disabled breakpoints during execution.
  //    - passCount: int3 - Returns the number of times the execution must evaluate the condition expression before suspending the execution. Pass 0 if you do not want to use a conditional pass count.
  //    - Condition: strin - Returns the expression that must evaluate to True before suspending the execution. An empty value defaults to True. If you specify a non-zero pass count value and a condition expression for the breakpoint, the pass count only decrements when the expression evaluates to True.
  //
  rpc GetBreakSettings(Step_GetBreakSettingsRequest) returns (Step_GetBreakSettingsResponse);
  
  
  // Method: ChangeAdapter
  //
  // Changes the adapter a step uses. ChangeAdapter replaces the module of the step with a new module associated with the specified adapter.
  //
  // Returns an error if the step does not allow you to change the adapter. To avoid this error, call this method only if the Step.CanChangeAdapter method returns True.
  //
  // Step_ChangeAdapterRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepInstance - The id of the Step object.
  //    - adapterName: string - Specifies the adapter key name of the new adapter for the step. If the step does not specify a module adapter, pass an empty string.
  //
  // Step_ChangeAdapterResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ChangeAdapter(Step_ChangeAdapterRequest) returns (Step_ChangeAdapterResponse);
  
  
  // Method: ChangeStepType
  //
  // Changes the step type of a step.
  //
  // Returns an error if the step does not allow changing the step type. To avoid this error, call this method only if the Step.CanChangeStepType method returns True.
  // To acquire a step type to pass as a parameter, call Engine.GetTypeDefinition and pass the name of the desired step type, then query the returned PropertyObject for the StepType interface.
  //
  // Step_ChangeStepTypeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepInstance - The id of the Step object.
  //    - stepTypePtr: StepTypeInstance - Specifies the step type to which you want to convert the step.
  //
  // Step_ChangeStepTypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ChangeStepType(Step_ChangeStepTypeRequest) returns (Step_ChangeStepTypeResponse);
  
  
  // Method: CanChangeAdapter
  //
  // Returns a value that indicates whether the step allows changing the adapter.
  //
  // Call CanChangeAdapter before calling the Step.ChangeAdapter method to ensure that no errors occur.
  //
  // Step_CanChangeAdapterRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepInstance - The id of the Step object.
  //    - adapterName: string - Specifies an adapter key name that determines whether the step allows changing to that specific adapter. Pass the default value of the empty string to check if the step allows changing to any adapter.
  //
  // Step_CanChangeAdapterResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the step allows changing to the specified adapter. Otherwise, returns False. 
  //
  rpc CanChangeAdapter(Step_CanChangeAdapterRequest) returns (Step_CanChangeAdapterResponse);
  
  
  // Method: CanChangeStepType
  //
  // Returns a value that indicates whether the step allows changing the step type.
  //
  // Call this method before calling the Step.ChangeStepType method to ensure that an error does not occur.
  //
  // Step_CanChangeStepTypeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepInstance - The id of the Step object.
  //    - stepTypePtr: StepTypeInstance - Specifies a step type that checks if the step allows changing to that specific step type. Pass the default value of NULL to check if the step allows changing to any step type.
  //
  // Step_CanChangeStepTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the step allows changing to the specified step type. Otherwise, returns False. 
  //
  rpc CanChangeStepType(Step_CanChangeStepTypeRequest) returns (Step_CanChangeStepTypeResponse);
  
  
  // Method: CreateNewUniqueStepId
  //
  // Replaces the unique step ID with a new unique step ID.
  //
  // Step_CreateNewUniqueStepIdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_CreateNewUniqueStepIdResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc CreateNewUniqueStepId(Step_CreateNewUniqueStepIdRequest) returns (Step_CreateNewUniqueStepIdResponse);
  
  

  // Property: IsSequenceCall
  //
  // Returns True if the step is a Sequence Call step.
  //
  // Step_Get_IsSequenceCallRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_IsSequenceCallResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the step is a Sequence Call step. 
  //
  rpc Get_IsSequenceCall(Step_Get_IsSequenceCallRequest) returns (Step_Get_IsSequenceCallResponse);
  
  
  // Property: AdapterKeyName
  //
  // Returns the key name of the module adapter the step uses.
  //
  // If the step does not use a module adapter, this property returns None Adapter, which is the value of the constant NoneAdapterKeyName.
  //
  // Step_Get_AdapterKeyNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_AdapterKeyNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the key name of the module adapter the step uses. 
  //
  rpc Get_AdapterKeyName(Step_Get_AdapterKeyNameRequest) returns (Step_Get_AdapterKeyNameResponse);
  
  
  // Property: BreakOnStep
  //
  // Note: This property is obsolete. Use the Step.GetBreakSettings and Step.SetBreakSettings methods instead.
  //
  // If this property is True, TestStand suspends execution before executing the step. This property is now equivalent to setting or getting the sequence file version of the breakpoint.
  //
  // Step_Set_BreakOnStepRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: bool - Note: This property is obsolete. Use the Step.GetBreakSettings and Step.SetBreakSettings methods instead. 
  //
  // Step_Set_BreakOnStepResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_BreakOnStepRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_BreakOnStepResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the Step.GetBreakSettings and Step.SetBreakSettings methods instead. 
  //
  rpc Set_BreakOnStep(Step_Set_BreakOnStepRequest) returns (Step_Set_BreakOnStepResponse);
  rpc Get_BreakOnStep(Step_Get_BreakOnStepRequest) returns (Step_Get_BreakOnStepResponse);
  
  
  // Property: RunMode
  //
  // Note: This property is obsolete. Use the Step.GetRunModeEx and Step.SetRunModeEx methods instead.
  //
  // Specifies the run mode of the step. Although you can use this property, it is now equivalent to setting or getting the sequence file version of the run mode.
  // The RunModes constants define the valid values for this property.
  // This property is the run mode TestStand stores for the step in the sequence file. To set the run mode temporarily, set the Step.RunTimeRunMode property instead. Setting this property also sets the Step.RunTimeRunMode property. In the sequence editor, the Sequence File window shows this property for the steps, and the Execution window shows the Step.RunTimeRunMode property for the steps.
  // Note: The Step.RunTimeRunMode property is obsolete. Use the Step.GetRunModeEx and Step.SetRunModeEx methods instead.
  //
  // Step_Set_RunModeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Note: This property is obsolete. Use the Step.GetRunModeEx and Step.SetRunModeEx methods instead. 
  //
  // Step_Set_RunModeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_RunModeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_RunModeResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Note: This property is obsolete. Use the Step.GetRunModeEx and Step.SetRunModeEx methods instead. 
  //
  rpc Set_RunMode(Step_Set_RunModeRequest) returns (Step_Set_RunModeResponse);
  rpc Get_RunMode(Step_Get_RunModeRequest) returns (Step_Get_RunModeResponse);
  
  
  // Property: RunTimeRunMode
  //
  // Note: This property is obsolete. Use the Step.GetRunModeEx  and Step.SetRunModeEx methods instead.
  //
  // Specifies the run-time run mode of the step. Although you can use this property, it is now equivalent to setting or getting the sequence file version of the run mode.
  // The RunModes constants define the valid values for this property.
  // This property is the run mode TestStand uses when it executes the sequence file. When running a step, TestStand copies the value of the Step.RunMode property to this property if you have not already explicitly set this property. Unlike the Step.RunMode property, the value of this property is not saved but is discarded when the sequence file is unloaded. Setting this property has no effect on the Step.RunMode property. In the sequence editor, the Sequence File window shows the Step.RunMode property for the steps, and the Execution window shows the Step.RunTimeRunMode property for the steps.
  // Note: The Step.RunMode property is obsolete. Use the Step.GetRunModeEx  and Step.SetRunModeEx methods instead.
  //
  // Step_Set_RunTimeRunModeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Note: This property is obsolete. Use the Step.GetRunModeEx  and Step.SetRunModeEx methods instead. 
  //
  // Step_Set_RunTimeRunModeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_RunTimeRunModeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_RunTimeRunModeResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Note: This property is obsolete. Use the Step.GetRunModeEx  and Step.SetRunModeEx methods instead. 
  //
  rpc Set_RunTimeRunMode(Step_Set_RunTimeRunModeRequest) returns (Step_Set_RunTimeRunModeResponse);
  rpc Get_RunTimeRunMode(Step_Get_RunTimeRunModeRequest) returns (Step_Get_RunTimeRunModeResponse);
  
  
  // Property: StepFailCausesSequenceFail
  //
  // Specifies if failure of the step causes the sequence to fail.
  //
  // If  this property is True and the step fails, TestStand sets the internal status property of the sequence that contains the step to Failure. If the Sequence.FailureAction property is True for the sequence, the execution then jumps to the Cleanup step group of the sequence.
  //
  // Step_Set_StepFailCausesSequenceFailRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: bool - Specifies if failure of the step causes the sequence to fail. 
  //
  // Step_Set_StepFailCausesSequenceFailResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_StepFailCausesSequenceFailRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_StepFailCausesSequenceFailResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if failure of the step causes the sequence to fail. 
  //
  rpc Set_StepFailCausesSequenceFail(Step_Set_StepFailCausesSequenceFailRequest) returns (Step_Set_StepFailCausesSequenceFailResponse);
  rpc Get_StepFailCausesSequenceFail(Step_Get_StepFailCausesSequenceFailRequest) returns (Step_Get_StepFailCausesSequenceFailResponse);
  
  
  // Property: Precondition
  //
  // Specifies an expression that must evaluate to True or be empty to execute the step.
  //
  // This string is an expression with a Boolean result. Use the AnyOf() and AllOf() expression functions to specify more than one expression. The following is an example of an expression for a precondition based on the results of another step:
  // RunState.Sequence.Main["NameOfAnotherStep"].Result.Status == "Passed"
  //
  // Step_Set_PreconditionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Specifies an expression that must evaluate to True or be empty to execute the step. 
  //
  // Step_Set_PreconditionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_PreconditionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_PreconditionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies an expression that must evaluate to True or be empty to execute the step. 
  //
  rpc Set_Precondition(Step_Set_PreconditionRequest) returns (Step_Set_PreconditionResponse);
  rpc Get_Precondition(Step_Get_PreconditionRequest) returns (Step_Get_PreconditionResponse);
  
  
  // Property: Description
  //
  // Note: This property is obsolete. Use the Step.GetDescriptionEx method instead.
  //
  // Describes the step. You can change this string whenever you modify the step settings.
  //
  // Step_Get_DescriptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_DescriptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Note: This property is obsolete. Use the Step.GetDescriptionEx method instead. 
  //
  rpc Get_Description(Step_Get_DescriptionRequest) returns (Step_Get_DescriptionResponse);
  
  
  // Property: CanSpecifyModule
  //
  // Returns a value that indicates whether this step supports the Step.SpecifyModule method. This property returns False if the Module.CanSpecify property is False, if the Step.TS.CanSpecifyModulePropertyObject is False, or if the step has a step type and Specify Module is enabled on the Disable Properties tab of the Step Type Properties dialog box  for the step type.
  //
  // Step_Get_CanSpecifyModuleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_CanSpecifyModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether this step supports the Step.SpecifyModule method. This property returns False if the Module.CanSpecify property is False, if the Step.TS.CanSpecifyModulePropertyObject is False, or if the step has a step type and Specify Module is enabled on the Disable Properties tab of the Step Type Properties dialog box  for the step type. 
  //
  rpc Get_CanSpecifyModule(Step_Get_CanSpecifyModuleRequest) returns (Step_Get_CanSpecifyModuleResponse);
  
  
  // Property: CanExecuteEditSubstep
  //
  // Note: This property is obsolete. Use the Step.CanExecuteSubstep method instead.
  //
  // Returns a value that indicates whether you can execute the specified substep.
  //
  // Step_Get_CanExecuteEditSubstepRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_CanExecuteEditSubstepResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the Step.CanExecuteSubstep method instead. 
  //
  rpc Get_CanExecuteEditSubstep(Step_Get_CanExecuteEditSubstepRequest) returns (Step_Get_CanExecuteEditSubstepResponse);
  
  
  // Property: PassAction
  //
  // Specifies the type of post action you want to occur if the step passes.
  //
  // Assign a PostActionValues string constant to the property to specify the type of post action to perform.
  //
  // Step_Set_PassActionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Specifies the type of post action you want to occur if the step passes. 
  //
  // Step_Set_PassActionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_PassActionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_PassActionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the type of post action you want to occur if the step passes. 
  //
  rpc Set_PassAction(Step_Set_PassActionRequest) returns (Step_Set_PassActionResponse);
  rpc Get_PassAction(Step_Get_PassActionRequest) returns (Step_Get_PassActionResponse);
  
  
  // Property: PassActionTarget
  //
  // Note: This property is obsolete. Use the Step.PassActionTargetByExpr property instead.
  //
  // Specifies the target for the post action the Step.PassAction property specifies. Post action targets are now expressions. If you set the target using this property, TestStand converts the target into a string constant expression before storing it. If you attempt to obtain the target using this property and it is a string constant expression, TestStand converts the target back into the string it represents and returns the string to you. If the target is not a string constant but is a more complex expression, TestStand returns an error if you try to obtain the value using this property.
  // If the Step.PassAction property is PostAction_GotoStep, the target is the name of the step. If the Step.PassAction property is PostAction_CallCallback, the target is the name of the callback sequence. For all other types of post actions, the target property is not used.
  //
  // Step_Set_PassActionTargetRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Note: This property is obsolete. Use the Step.PassActionTargetByExpr property instead. 
  //
  // Step_Set_PassActionTargetResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_PassActionTargetRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_PassActionTargetResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Note: This property is obsolete. Use the Step.PassActionTargetByExpr property instead. 
  //
  rpc Set_PassActionTarget(Step_Set_PassActionTargetRequest) returns (Step_Set_PassActionTargetResponse);
  rpc Get_PassActionTarget(Step_Get_PassActionTargetRequest) returns (Step_Get_PassActionTargetResponse);
  
  
  // Property: FailAction
  //
  // Specifies the type of post action you want to occur if the step fails.
  //
  // Assign a PostActionValues string constant to the property to specify the type of post action to perform.
  //
  // Step_Set_FailActionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Specifies the type of post action you want to occur if the step fails. 
  //
  // Step_Set_FailActionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_FailActionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_FailActionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the type of post action you want to occur if the step fails. 
  //
  rpc Set_FailAction(Step_Set_FailActionRequest) returns (Step_Set_FailActionResponse);
  rpc Get_FailAction(Step_Get_FailActionRequest) returns (Step_Get_FailActionResponse);
  
  
  // Property: FailActionTarget
  //
  // Note: This property is obsolete. Use the Step.FailActionTargetByExpr property instead.
  //
  // Specifies the target for the post action the Step.FailAction property specifies. Post action targets are now expressions. If you set the target using this property, TestStand converts the target into a string constant expression before storing it. If you attempt to obtain the target using this property and it is a string constant expression, TestStand converts the target back into the string it represents and returns the string to you. If the target is not a string constant but is a more complex expression, TestStand returns an error if you try to obtain the value using this property.
  // If the Step.FailAction property is PostAction_GotoStep, the target is the name of the step. If the Step.FailAction property is PostAction_CallCallback, the target is the name of the callback sequence. For all other types of post actions, the target property is not used.
  //
  // Step_Set_FailActionTargetRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Note: This property is obsolete. Use the Step.FailActionTargetByExpr property instead. 
  //
  // Step_Set_FailActionTargetResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_FailActionTargetRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_FailActionTargetResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Note: This property is obsolete. Use the Step.FailActionTargetByExpr property instead. 
  //
  rpc Set_FailActionTarget(Step_Set_FailActionTargetRequest) returns (Step_Set_FailActionTargetResponse);
  rpc Get_FailActionTarget(Step_Get_FailActionTargetRequest) returns (Step_Get_FailActionTargetResponse);
  
  
  // Property: CustomTrueAction
  //
  // Specifies the type of action you want to occur when the custom post action expression evaluates to True.
  //
  // Assign a PostActionValues string constant to the property to specify the type of post action to perform.
  //
  // Step_Set_CustomTrueActionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Specifies the type of action you want to occur when the custom post action expression evaluates to True. 
  //
  // Step_Set_CustomTrueActionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_CustomTrueActionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_CustomTrueActionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the type of action you want to occur when the custom post action expression evaluates to True. 
  //
  rpc Set_CustomTrueAction(Step_Set_CustomTrueActionRequest) returns (Step_Set_CustomTrueActionResponse);
  rpc Get_CustomTrueAction(Step_Get_CustomTrueActionRequest) returns (Step_Get_CustomTrueActionResponse);
  
  
  // Property: CustomTrueActionTarget
  //
  // Note: This property is obsolete. Use the Step.CustomTrueActionTargetByExpr property instead.
  //
  // Specifies the target for the post action the Step.CustomTrueAction property specifies. Post action targets are now expressions. If you set the target using this property, TestStand converts the target into a string constant expression before storing it. If you attempt to obtain the target using this property and the target is a string constant expression, TestStand converts it back into the string it represents and returns the string to you. If the target is not a string constant but is a more complex expression, TestStand returns an error if you try to obtain the value using this property.
  // * If the Step.CustomTrueAction property is PostAction_GotoStep, the target is the name of the step or the ID of the step. If you specify the target by name, the target step must reside in the same step group. If you specify the target by ID, the target step can reside in any step group in the sequence.    * If the Step.CustomTrueAction property is PostAction_CallCallback, the target is the name of the callback sequence.    * For all other types of post actions, the target property is not used.
  //
  // Step_Set_CustomTrueActionTargetRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Note: This property is obsolete. Use the Step.CustomTrueActionTargetByExpr property instead. 
  //
  // Step_Set_CustomTrueActionTargetResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_CustomTrueActionTargetRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_CustomTrueActionTargetResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Note: This property is obsolete. Use the Step.CustomTrueActionTargetByExpr property instead. 
  //
  rpc Set_CustomTrueActionTarget(Step_Set_CustomTrueActionTargetRequest) returns (Step_Set_CustomTrueActionTargetResponse);
  rpc Get_CustomTrueActionTarget(Step_Get_CustomTrueActionTargetRequest) returns (Step_Get_CustomTrueActionTargetResponse);
  
  
  // Property: CustomFalseAction
  //
  // Specifies the type of action you want to occur when the custom post action expression evaluates to False.
  //
  // Assign a PostActionValues string constant to the property to specify the type of post action to perform.
  //
  // Step_Set_CustomFalseActionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Specifies the type of action you want to occur when the custom post action expression evaluates to False. 
  //
  // Step_Set_CustomFalseActionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_CustomFalseActionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_CustomFalseActionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the type of action you want to occur when the custom post action expression evaluates to False. 
  //
  rpc Set_CustomFalseAction(Step_Set_CustomFalseActionRequest) returns (Step_Set_CustomFalseActionResponse);
  rpc Get_CustomFalseAction(Step_Get_CustomFalseActionRequest) returns (Step_Get_CustomFalseActionResponse);
  
  
  // Property: CustomFalseActionTarget
  //
  // Note: This property is obsolete. Use the Step.CustomFalseActionTargetByExpr property instead.
  //
  // Specifies the target for the post action the Step.CustomFalseAction property specifies. Post action targets are now expressions. If you set the target using this property, TestStand converts the target into a string constant expression before storing it. If you attempt to obtain the target using this property and the target is a string constant expression, TestStand converts it back into the string it represents and returns the string to you. If the target is not a string constant but is a more complex expression, TestStand returns an error if you try to obtain the value using this property.
  // * If the Step.CustomFalseAction property is PostAction_GotoStep, the target is the name of the step or the ID of the step. If you specify the target by name, the target step must reside in the same step group. If you specify the target by ID, the target step can reside in any step group in the sequence.    * If the Step.CustomFalseAction property is PostAction_CallCallback, the target is the name of the callback sequence.    * For all other types of post actions, the target property is not used.
  //
  // Step_Set_CustomFalseActionTargetRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Note: This property is obsolete. Use the Step.CustomFalseActionTargetByExpr property instead. 
  //
  // Step_Set_CustomFalseActionTargetResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_CustomFalseActionTargetRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_CustomFalseActionTargetResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Note: This property is obsolete. Use the Step.CustomFalseActionTargetByExpr property instead. 
  //
  rpc Set_CustomFalseActionTarget(Step_Set_CustomFalseActionTargetRequest) returns (Step_Set_CustomFalseActionTargetResponse);
  rpc Get_CustomFalseActionTarget(Step_Get_CustomFalseActionTargetRequest) returns (Step_Get_CustomFalseActionTargetResponse);
  
  
  // Property: CustomActionExpression
  //
  // Specifies the custom post action condition expression for the step.
  //
  // Step_Set_CustomActionExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Specifies the custom post action condition expression for the step. 
  //
  // Step_Set_CustomActionExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_CustomActionExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_CustomActionExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the custom post action condition expression for the step. 
  //
  rpc Set_CustomActionExpression(Step_Set_CustomActionExpressionRequest) returns (Step_Set_CustomActionExpressionResponse);
  rpc Get_CustomActionExpression(Step_Get_CustomActionExpressionRequest) returns (Step_Get_CustomActionExpressionResponse);
  
  
  // Property: PassActionTargetByExpr
  //
  // Specifies the target for the post action the Step.PassAction property specifies.
  //
  // If the Step.PassAction property is PostAction_GotoStep, the target is the name of the step. If the Step.PassAction property is PostAction_CallCallback, the target is the name of the callback sequence. For all other types of post actions, the target property is not used.
  // This value is an expression. You can set the value with the name of the property that stores the name of the target or with a string constant (the name of the target in quotation marks).
  //
  // Step_Set_PassActionTargetByExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Specifies the target for the post action the Step.PassAction property specifies. 
  //
  // Step_Set_PassActionTargetByExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_PassActionTargetByExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_PassActionTargetByExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the target for the post action the Step.PassAction property specifies. 
  //
  rpc Set_PassActionTargetByExpr(Step_Set_PassActionTargetByExprRequest) returns (Step_Set_PassActionTargetByExprResponse);
  rpc Get_PassActionTargetByExpr(Step_Get_PassActionTargetByExprRequest) returns (Step_Get_PassActionTargetByExprResponse);
  
  
  // Property: FailActionTargetByExpr
  //
  // Specifies the target for the post action that the Step.FailAction property specifies.
  //
  // If the Step.FailAction property is PostAction_GotoStep, the target is the name of the step. If the Step.FailAction property is PostAction_CallCallback, the target is the name of the callback sequence. For all other types of post actions, the target property is not used.
  // This value is an expression. You can set the value with the name of the property that stores the name of the target or with a string constant (the name of the target in quotation marks).
  //
  // Step_Set_FailActionTargetByExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Specifies the target for the post action that the Step.FailAction property specifies. 
  //
  // Step_Set_FailActionTargetByExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_FailActionTargetByExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_FailActionTargetByExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the target for the post action that the Step.FailAction property specifies. 
  //
  rpc Set_FailActionTargetByExpr(Step_Set_FailActionTargetByExprRequest) returns (Step_Set_FailActionTargetByExprResponse);
  rpc Get_FailActionTargetByExpr(Step_Get_FailActionTargetByExprRequest) returns (Step_Get_FailActionTargetByExprResponse);
  
  
  // Property: CustomTrueActionTargetByExpr
  //
  // Specifies the target for the post action the Step.CustomTrueAction property specifies.
  //
  // * If the Step.CustomTrueAction property is PostAction_GotoStep, the target is the name of the step or the ID of the step. If you specify the target by name, the target step must reside in the same step group. If you specify the target by ID, the target step can reside in any step group in the sequence.    * If the Step.CustomTrueAction is PostAction_CallCallback, the target is the name of the callback sequence.    * For all other types of post actions, the target property is not used.
  // This value is an expression. You can set the value with the name of the property that stores the name of the target or with a string constant. A string constant is the name of the target enclosed in double quotation marks.
  //
  // Step_Set_CustomTrueActionTargetByExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Specifies the target for the post action the Step.CustomTrueAction property specifies. 
  //
  // Step_Set_CustomTrueActionTargetByExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_CustomTrueActionTargetByExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_CustomTrueActionTargetByExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the target for the post action the Step.CustomTrueAction property specifies. 
  //
  rpc Set_CustomTrueActionTargetByExpr(Step_Set_CustomTrueActionTargetByExprRequest) returns (Step_Set_CustomTrueActionTargetByExprResponse);
  rpc Get_CustomTrueActionTargetByExpr(Step_Get_CustomTrueActionTargetByExprRequest) returns (Step_Get_CustomTrueActionTargetByExprResponse);
  
  
  // Property: CustomFalseActionTargetByExpr
  //
  // Specifies the target for the post action the Step.CustomFalseAction property specifies.
  //
  // * If the Step.CustomFalseAction property is PostAction_GotoStep, the target is the name of the step or the ID of the step. If you specify the target by name, the target step must reside in the same step group. If you specify the target by ID, the target step can reside in any step group in the sequence.    * If the Step.CustomFalseAction property is PostAction_CallCallback, the target is the name of the callback sequence.    * For all other types of post actions, the target property is not used.
  // This value is an expression. You can set the value with the name of the property that stores the name of the target or with a string constant. A string constant is the name of the target enclosed in double quotation marks.
  //
  // Step_Set_CustomFalseActionTargetByExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Specifies the target for the post action the Step.CustomFalseAction property specifies. 
  //
  // Step_Set_CustomFalseActionTargetByExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_CustomFalseActionTargetByExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_CustomFalseActionTargetByExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the target for the post action the Step.CustomFalseAction property specifies. 
  //
  rpc Set_CustomFalseActionTargetByExpr(Step_Set_CustomFalseActionTargetByExprRequest) returns (Step_Set_CustomFalseActionTargetByExprResponse);
  rpc Get_CustomFalseActionTargetByExpr(Step_Get_CustomFalseActionTargetByExprRequest) returns (Step_Get_CustomFalseActionTargetByExprResponse);
  
  
  // Property: LoopType
  //
  // Specifies the type of looping for the step.
  //
  // Use the StepLoopTypes constants to specify the value of the property.
  //
  // Step_Set_LoopTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Specifies the type of looping for the step. 
  //
  // Step_Set_LoopTypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_LoopTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_LoopTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the type of looping for the step. 
  //
  rpc Set_LoopType(Step_Set_LoopTypeRequest) returns (Step_Set_LoopTypeResponse);
  rpc Get_LoopType(Step_Get_LoopTypeRequest) returns (Step_Get_LoopTypeResponse);
  
  
  // Property: LoopWhileExpression
  //
  // Specifies the While Loop expression for the step.
  //
  // Step_Set_LoopWhileExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Specifies the While Loop expression for the step. 
  //
  // Step_Set_LoopWhileExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_LoopWhileExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_LoopWhileExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the While Loop expression for the step. 
  //
  rpc Set_LoopWhileExpression(Step_Set_LoopWhileExpressionRequest) returns (Step_Set_LoopWhileExpressionResponse);
  rpc Get_LoopWhileExpression(Step_Get_LoopWhileExpressionRequest) returns (Step_Get_LoopWhileExpressionResponse);
  
  
  // Property: LoopStatusExpression
  //
  // Specifies the loop status result expression for the step.
  //
  // Step_Set_LoopStatusExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Specifies the loop status result expression for the step. 
  //
  // Step_Set_LoopStatusExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_LoopStatusExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_LoopStatusExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the loop status result expression for the step. 
  //
  rpc Set_LoopStatusExpression(Step_Set_LoopStatusExpressionRequest) returns (Step_Set_LoopStatusExpressionResponse);
  rpc Get_LoopStatusExpression(Step_Get_LoopStatusExpressionRequest) returns (Step_Get_LoopStatusExpressionResponse);
  
  
  // Property: LoopInitExpression
  //
  // Specifies the loop initialization expression for the step.
  //
  // Step_Set_LoopInitExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Specifies the loop initialization expression for the step. 
  //
  // Step_Set_LoopInitExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_LoopInitExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_LoopInitExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the loop initialization expression for the step. 
  //
  rpc Set_LoopInitExpression(Step_Set_LoopInitExpressionRequest) returns (Step_Set_LoopInitExpressionResponse);
  rpc Get_LoopInitExpression(Step_Get_LoopInitExpressionRequest) returns (Step_Get_LoopInitExpressionResponse);
  
  
  // Property: LoopIncExpression
  //
  // Specifies the loop increment expression for the step.
  //
  // Step_Set_LoopIncExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Specifies the loop increment expression for the step. 
  //
  // Step_Set_LoopIncExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_LoopIncExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_LoopIncExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the loop increment expression for the step. 
  //
  rpc Set_LoopIncExpression(Step_Set_LoopIncExpressionRequest) returns (Step_Set_LoopIncExpressionResponse);
  rpc Get_LoopIncExpression(Step_Get_LoopIncExpressionRequest) returns (Step_Get_LoopIncExpressionResponse);
  
  
  // Property: StatusExpression
  //
  // Specifies the status expression for the step.
  //
  // Use this expression to set the ResultStatus property of the step. TestStand executes this expression after executing all other substeps and expressions for the step. The expression must evaluate to a string.
  //
  // Step_Set_StatusExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Specifies the status expression for the step. 
  //
  // Step_Set_StatusExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_StatusExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_StatusExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the status expression for the step. 
  //
  rpc Set_StatusExpression(Step_Set_StatusExpressionRequest) returns (Step_Set_StatusExpressionResponse);
  rpc Get_StatusExpression(Step_Get_StatusExpressionRequest) returns (Step_Get_StatusExpressionResponse);
  
  
  // Property: ResultStatus
  //
  // Specifies the status string for the step.
  //
  // Although you can define custom status strings, you usually set this property to one of the ResultStatus_ constants of StepProperties.
  //
  // Step_Set_ResultStatusRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Specifies the status string for the step. 
  //
  // Step_Set_ResultStatusResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_ResultStatusRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_ResultStatusResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the status string for the step. 
  //
  rpc Set_ResultStatus(Step_Set_ResultStatusRequest) returns (Step_Set_ResultStatusResponse);
  rpc Get_ResultStatus(Step_Get_ResultStatusRequest) returns (Step_Get_ResultStatusResponse);
  
  
  // Property: PreExpression
  //
  // Specifies the Pre expression for the step.
  //
  // TestStand evaluates the Pre expression before it calls the Pre-Step substep and code module for the step.
  //
  // Step_Set_PreExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Specifies the Pre expression for the step. 
  //
  // Step_Set_PreExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_PreExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_PreExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the Pre expression for the step. 
  //
  rpc Set_PreExpression(Step_Set_PreExpressionRequest) returns (Step_Set_PreExpressionResponse);
  rpc Get_PreExpression(Step_Get_PreExpressionRequest) returns (Step_Get_PreExpressionResponse);
  
  
  // Property: PostExpression
  //
  // Specifies the Post expression for the step.
  //
  // TestStand evaluates the Post expression after calling the code module and Post-Step substep for the step.
  //
  // Step_Set_PostExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Specifies the Post expression for the step. 
  //
  // Step_Set_PostExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_PostExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_PostExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the Post expression for the step. 
  //
  rpc Set_PostExpression(Step_Set_PostExpressionRequest) returns (Step_Set_PostExpressionResponse);
  rpc Get_PostExpression(Step_Get_PostExpressionRequest) returns (Step_Get_PostExpressionResponse);
  
  
  // Property: RecordResult
  //
  // Note: This property is obsolete. Use the Step.ResultRecordingOption property instead.
  //
  // Specifies whether to record the Result properties of the step. If you set this property to True, TestStand records the result of the step, unless the Engine.DisableResults property is True or the Sequence.DisableResults property is True.
  // For steps that loop, use the Step.RecordLoopIterationResults property to specify to add step results to the sequence result list after each loop iteration.
  //
  // Step_Set_RecordResultRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: bool - Note: This property is obsolete. Use the Step.ResultRecordingOption property instead. 
  //
  // Step_Set_RecordResultResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_RecordResultRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_RecordResultResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the Step.ResultRecordingOption property instead. 
  //
  rpc Set_RecordResult(Step_Set_RecordResultRequest) returns (Step_Set_RecordResultResponse);
  rpc Get_RecordResult(Step_Get_RecordResultRequest) returns (Step_Get_RecordResultResponse);
  
  
  // Property: ModuleLoadOption
  //
  // Specifies the option that determines when TestStand loads the code module for the step.
  //
  // The SequenceFile.ModuleLoadOption property takes precedence over this property, unless the value of the SequenceFile.ModuleLoadOption property is LoadOption_UseStepLoadOption.
  //
  // Step_Set_ModuleLoadOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: ModuleLoadOptions - Specifies the option that determines when TestStand loads the code module for the step. 
  //
  // Step_Set_ModuleLoadOptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_ModuleLoadOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_ModuleLoadOptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: ModuleLoadOptions - Specifies the option that determines when TestStand loads the code module for the step. 
  //
  rpc Set_ModuleLoadOption(Step_Set_ModuleLoadOptionRequest) returns (Step_Set_ModuleLoadOptionResponse);
  rpc Get_ModuleLoadOption(Step_Get_ModuleLoadOptionRequest) returns (Step_Get_ModuleLoadOptionResponse);
  
  
  // Property: ModuleUnloadOption
  //
  // Specifies the option that determines when TestStand unloads the code module for the step.
  //
  // The SequenceFile.ModuleUnloadOption property takes precedence over this property, unless the value of the SequenceFile.ModuleUnloadOption property is UnloadOption_UseStepUnloadOption.
  //
  // Step_Set_ModuleUnloadOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: ModuleUnloadOptions - Specifies the option that determines when TestStand unloads the code module for the step. 
  //
  // Step_Set_ModuleUnloadOptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_ModuleUnloadOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_ModuleUnloadOptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: ModuleUnloadOptions - Specifies the option that determines when TestStand unloads the code module for the step. 
  //
  rpc Set_ModuleUnloadOption(Step_Set_ModuleUnloadOptionRequest) returns (Step_Set_ModuleUnloadOptionResponse);
  rpc Get_ModuleUnloadOption(Step_Get_ModuleUnloadOptionRequest) returns (Step_Get_ModuleUnloadOptionResponse);
  
  
  // Property: Name
  //
  // Specifies the name of the step.
  //
  // You can use the following code snippet to set the default name of the new step:
  // Step.Name = Step.StepType.AsPropertyObject.EvaluateEx(Step.StepType.DefaultNameExpr, EvalOption_DoNotAlterValues).GetValString("", 0)Note: TestStand does not validate step names you create programmatically for invalid characters, which can result in errors when you use expressions. Use the PropertyObject.ValidateNewName method to validate step names. Step names can contain any character.
  //
  // Step_Set_NameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Specifies the name of the step. 
  //
  // Step_Set_NameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_NameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_NameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the name of the step. 
  //
  rpc Set_Name(Step_Set_NameRequest) returns (Step_Set_NameResponse);
  rpc Get_Name(Step_Get_NameRequest) returns (Step_Get_NameResponse);
  
  
  // Property: SmallIcon
  //
  // Returns the small version of the icon that represents the step.
  //
  // The step type defines the icon the property returns. If the step type does not specify an icon, the property returns the icon the Adapter of the step specifies.
  //
  // Step_Get_SmallIconRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_SmallIconResponse - The response message from the server. It provides the return value.
  //    - returnValue: IPictureDispInstance - Returns the small version of the icon that represents the step. 
  //
  rpc Get_SmallIcon(Step_Get_SmallIconRequest) returns (Step_Get_SmallIconResponse);
  
  
  // Property: LargeIcon
  //
  // Returns the large version of the icon that represents the step.
  //
  // The step type of the step defines the icon the property returns. If the step type does not specify an icon, the property returns the icon the Adapter of the step specifies.
  //
  // Step_Get_LargeIconRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_LargeIconResponse - The response message from the server. It provides the return value.
  //    - returnValue: IPictureDispInstance - Returns the large version of the icon that represents the step. 
  //
  rpc Get_LargeIcon(Step_Get_LargeIconRequest) returns (Step_Get_LargeIconResponse);
  
  
  // Property: SmallIconIndex
  //
  // Returns a unique index for the small version of the icon that represents the step. You can use this index to retrieve the icon image from the image list you obtain with the Engine.SmallImageList property.
  //
  // Step_Get_SmallIconIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_SmallIconIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a unique index for the small version of the icon that represents the step. You can use this index to retrieve the icon image from the image list you obtain with the Engine.SmallImageList property. 
  //
  rpc Get_SmallIconIndex(Step_Get_SmallIconIndexRequest) returns (Step_Get_SmallIconIndexResponse);
  
  
  // Property: LargeIconIndex
  //
  // Returns a unique index for the large version of the icon that represents the step. You can use this index to retrieve the icon image from the image list you obtain with the Engine.LargeImageListEx property.
  //
  // Step_Get_LargeIconIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_LargeIconIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a unique index for the large version of the icon that represents the step. You can use this index to retrieve the icon image from the image list you obtain with the Engine.LargeImageListEx property. 
  //
  rpc Get_LargeIconIndex(Step_Get_LargeIconIndexRequest) returns (Step_Get_LargeIconIndexResponse);
  
  
  // Property: IconName
  //
  // Specifies the filename of the icon for the step.
  //
  // If the step type has no icon file, the property returns the icon filename for the module adapter the step uses.
  // Icon files are located in the <TestStand>\Components\Icons and <TestStand Public>\Components\Icons directories.
  //
  // Step_Set_IconNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Specifies the filename of the icon for the step. 
  //
  // Step_Set_IconNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_IconNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_IconNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the filename of the icon for the step. 
  //
  rpc Set_IconName(Step_Set_IconNameRequest) returns (Step_Set_IconNameResponse);
  rpc Get_IconName(Step_Get_IconNameRequest) returns (Step_Get_IconNameResponse);
  
  
  // Property: CancelCurrentExecution
  //
  // When this property is True, TestStand does not evaluate the pre-expression and does not call the Pre-Step substeps, step module, subsequent Post-Step substeps, or the Post-Step callbacks for the step, nor does it evaluate the post expression or status expression.
  //
  // This property is reset to False after TestStand uses it so that the step runs normally the next time it executes. The property is also reset to False before the start of the next iteration when performing step looping. You can set this property from the Pre-Step Engine callbacks, the step pre- or post-expression, or the Pre- or Post-Step substep of a step type. By setting this property to True, you can use this property to impose additional conditions that a step must meet before it can execute.
  // 
  // Setting this property to True in an OnNewStep substep for the inserted step instructs TestStand to cancel the insertion of the step.
  //
  // Step_Set_CancelCurrentExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: bool - When this property is True, TestStand does not evaluate the pre-expression and does not call the Pre-Step substeps, step module, subsequent Post-Step substeps, or the Post-Step callbacks for the step, nor does it evaluate the post expression or status expression. 
  //
  // Step_Set_CancelCurrentExecutionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_CancelCurrentExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_CancelCurrentExecutionResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When this property is True, TestStand does not evaluate the pre-expression and does not call the Pre-Step substeps, step module, subsequent Post-Step substeps, or the Post-Step callbacks for the step, nor does it evaluate the post expression or status expression. 
  //
  rpc Set_CancelCurrentExecution(Step_Set_CancelCurrentExecutionRequest) returns (Step_Set_CancelCurrentExecutionResponse);
  rpc Get_CancelCurrentExecution(Step_Get_CancelCurrentExecutionRequest) returns (Step_Get_CancelCurrentExecutionResponse);
  
  
  // Property: CausedSequenceFailure
  //
  // Specifies if this step caused the sequence to fail.
  //
  // Step_Set_CausedSequenceFailureRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: bool - Specifies if this step caused the sequence to fail. 
  //
  // Step_Set_CausedSequenceFailureResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_CausedSequenceFailureRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_CausedSequenceFailureResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if this step caused the sequence to fail. 
  //
  rpc Set_CausedSequenceFailure(Step_Set_CausedSequenceFailureRequest) returns (Step_Set_CausedSequenceFailureResponse);
  rpc Get_CausedSequenceFailure(Step_Get_CausedSequenceFailureRequest) returns (Step_Get_CausedSequenceFailureResponse);
  
  
  // Property: StepGroup
  //
  // Returns the step group in which the step currently resides.
  //
  // If the step is not currently inserted in a sequence, accessing this property returns an error.
  //
  // Step_Get_StepGroupRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_StepGroupResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepGroups - Returns the step group in which the step currently resides. 
  //
  rpc Get_StepGroup(Step_Get_StepGroupRequest) returns (Step_Get_StepGroupResponse);
  
  
  // Property: StepIndex
  //
  // Returns the zero-based index that indicates where in the step group the step resides.
  //
  // If the step is not currently inserted in a sequence, accessing this property returns an error.
  //
  // Step_Get_StepIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_StepIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the zero-based index that indicates where in the step group the step resides. 
  //
  rpc Get_StepIndex(Step_Get_StepIndexRequest) returns (Step_Get_StepIndexResponse);
  
  
  // Property: Sequence
  //
  // Returns a reference to the sequence in which the step resides.
  //
  // Returns a NULL reference if the step is not currently inserted into a sequence. This property returns the run-time copy of a sequence if called on the run-time copy of a step.
  //
  // Step_Get_SequenceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_SequenceResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceInstance - Returns a reference to the sequence in which the step resides. 
  //
  rpc Get_Sequence(Step_Get_SequenceRequest) returns (Step_Get_SequenceResponse);
  
  
  // Property: CanCreateCode
  //
  // Returns a value that indicates whether the step supports the Step.CreateCode method. This property returns False if the Module.CanCreateCode property is False, or if the Step.TS.CanCreateCode PropertyObject is False, or if the step has a step type and Edit Code is enabled on the Disable Properties tab of the Step Type Properties dialog box for the step type.
  //
  // Step_Get_CanCreateCodeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_CanCreateCodeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the step supports the Step.CreateCode method. This property returns False if the Module.CanCreateCode property is False, or if the Step.TS.CanCreateCode PropertyObject is False, or if the step has a step type and Edit Code is enabled on the Disable Properties tab of the Step Type Properties dialog box for the step type. 
  //
  rpc Get_CanCreateCode(Step_Get_CanCreateCodeRequest) returns (Step_Get_CanCreateCodeResponse);
  
  
  // Property: CanEditCode
  //
  // Returns a value that indicates whether this step supports the Step.EditCode method. This property returns False if the Module.CanEditCode property is False, if the Step.TS.CanEditCode PropertyObject is False, or if the step has a step type and Edit Code is enabled on the Disable Properties tab of the Step Type Properties dialog box for the step type.
  //
  // Step_Get_CanEditCodeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_CanEditCodeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether this step supports the Step.EditCode method. This property returns False if the Module.CanEditCode property is False, if the Step.TS.CanEditCode PropertyObject is False, or if the step has a step type and Edit Code is enabled on the Disable Properties tab of the Step Type Properties dialog box for the step type. 
  //
  rpc Get_CanEditCode(Step_Get_CanEditCodeRequest) returns (Step_Get_CanEditCodeResponse);
  
  
  // Property: StepType
  //
  // Returns the step type for this step.
  //
  // Step_Get_StepTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_StepTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepTypeInstance - Returns the step type for this step. 
  //
  rpc Get_StepType(Step_Get_StepTypeRequest) returns (Step_Get_StepTypeResponse);
  
  
  // Property: CancelStepCallback
  //
  // Specifies that TestStand does not call any further Engine callbacks for the same event.
  //
  // In an Engine callback sequence, set this property on the step that triggers the callback to specify that TestStand does not call any further Engine callbacks for the same triggering event. For example, a SequenceFilePostStepRuntimeError callback that completely handles a run-time error might set this property to prevent TestStand from also executing a ProcessModelPostStepRuntimeError callback for the same step error.
  //
  // Step_Set_CancelStepCallbackRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: bool - Specifies that TestStand does not call any further Engine callbacks for the same event. 
  //
  // Step_Set_CancelStepCallbackResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_CancelStepCallbackRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_CancelStepCallbackResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies that TestStand does not call any further Engine callbacks for the same event. 
  //
  rpc Set_CancelStepCallback(Step_Set_CancelStepCallbackRequest) returns (Step_Set_CancelStepCallbackResponse);
  rpc Get_CancelStepCallback(Step_Get_CancelStepCallbackRequest) returns (Step_Get_CancelStepCallbackResponse);
  
  
  // Property: LastStepResult
  //
  // Specifies the PropertyObject object that holds the result of the current or most recent step execution.
  //
  // You can set this property to NULL (Nothing) in a step or substep module to remove the step result from the result list. If you set this property to a value other than NULL or if you set the property when the step is not executing, the result list does not change.
  // This property does not return loop iteration results.
  //
  // Step_Set_LastStepResultRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: PropertyObjectInstance - Specifies the PropertyObject object that holds the result of the current or most recent step execution. 
  //
  // Step_Set_LastStepResultResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_LastStepResultRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_LastStepResultResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Specifies the PropertyObject object that holds the result of the current or most recent step execution. 
  //
  rpc Set_LastStepResult(Step_Set_LastStepResultRequest) returns (Step_Set_LastStepResultResponse);
  rpc Get_LastStepResult(Step_Get_LastStepResultRequest) returns (Step_Get_LastStepResultResponse);
  
  
  // Property: CurrentLoopResult
  //
  // Specifies the PropertyObject object that holds the result for the loop iteration the step is running.
  //
  // You can set this property to NULL (Nothing) in a step or substep module to remove the step iteration result from the result list. If you set this property to a value other than NULL or if you set the property when the step is not executing, the result list does not change.
  // Returns a NULL reference if the step is not looping.
  //
  // Step_Set_CurrentLoopResultRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: PropertyObjectInstance - Specifies the PropertyObject object that holds the result for the loop iteration the step is running. 
  //
  // Step_Set_CurrentLoopResultResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_CurrentLoopResultRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_CurrentLoopResultResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Specifies the PropertyObject object that holds the result for the loop iteration the step is running. 
  //
  rpc Set_CurrentLoopResult(Step_Set_CurrentLoopResultRequest) returns (Step_Set_CurrentLoopResultResponse);
  rpc Get_CurrentLoopResult(Step_Get_CurrentLoopResultRequest) returns (Step_Get_CurrentLoopResultResponse);
  
  
  // Property: EvalPrecondForInteractiveExecution
  //
  // Specifies if TestStand evaluates the step precondition when you run the step interactively.
  //
  // Step_Set_EvalPrecondForInteractiveExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: EvalPrecondOptions - Specifies if TestStand evaluates the step precondition when you run the step interactively. 
  //
  // Step_Set_EvalPrecondForInteractiveExecutionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_EvalPrecondForInteractiveExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_EvalPrecondForInteractiveExecutionResponse - The response message from the server. It provides the return value.
  //    - returnValue: EvalPrecondOptions - Specifies if TestStand evaluates the step precondition when you run the step interactively. 
  //
  rpc Set_EvalPrecondForInteractiveExecution(Step_Set_EvalPrecondForInteractiveExecutionRequest) returns (Step_Set_EvalPrecondForInteractiveExecutionResponse);
  rpc Get_EvalPrecondForInteractiveExecution(Step_Get_EvalPrecondForInteractiveExecutionRequest) returns (Step_Get_EvalPrecondForInteractiveExecutionResponse);
  
  
  // Property: IgnoreRTE
  //
  // Prevents the step from reporting a run-time error to the sequence.
  //
  // When a step causes a run-time error, the step stops executing and TestStand sets the status of the step to Error.
  // If you set this property to False, TestStand also sets the internal status of the sequence to Error and the execution branches to the Cleanup step group for the sequence.
  // If you set this property to True, TestStand does not set the internal status of the sequence to Error. Instead, TestStand resets the Error.Occurred property of the step to False and execution continues normally with the next step. The value of the Result.Status property remains as Error for the step.
  //
  // Step_Set_IgnoreRTERequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: bool - Prevents the step from reporting a run-time error to the sequence. 
  //
  // Step_Set_IgnoreRTEResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_IgnoreRTERequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_IgnoreRTEResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Prevents the step from reporting a run-time error to the sequence. 
  //
  rpc Set_IgnoreRTE(Step_Set_IgnoreRTERequest) returns (Step_Set_IgnoreRTEResponse);
  rpc Get_IgnoreRTE(Step_Get_IgnoreRTERequest) returns (Step_Get_IgnoreRTEResponse);
  
  
  // Property: WindowActivation
  //
  // Determines if the TestStand application activates its window when the step completes.
  //
  // Step_Set_WindowActivationRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: WindowActivationOptions - Determines if the TestStand application activates its window when the step completes. 
  //
  // Step_Set_WindowActivationResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_WindowActivationRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_WindowActivationResponse - The response message from the server. It provides the return value.
  //    - returnValue: WindowActivationOptions - Determines if the TestStand application activates its window when the step completes. 
  //
  rpc Set_WindowActivation(Step_Set_WindowActivationRequest) returns (Step_Set_WindowActivationResponse);
  rpc Get_WindowActivation(Step_Get_WindowActivationRequest) returns (Step_Get_WindowActivationResponse);
  
  
  // Property: RecordLoopIterationResults
  //
  // Specifies whether to add the step results to the sequence results list after each loop iteration.
  //
  // TestStand also adds the final result it computes for the step loop as a whole if you enable the Step.ResultRecordingOption property for the step.
  //
  // Step_Set_RecordLoopIterationResultsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: bool - Specifies whether to add the step results to the sequence results list after each loop iteration. 
  //
  // Step_Set_RecordLoopIterationResultsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_RecordLoopIterationResultsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_RecordLoopIterationResultsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether to add the step results to the sequence results list after each loop iteration. 
  //
  rpc Set_RecordLoopIterationResults(Step_Set_RecordLoopIterationResultsRequest) returns (Step_Set_RecordLoopIterationResultsResponse);
  rpc Get_RecordLoopIterationResults(Step_Get_RecordLoopIterationResultsRequest) returns (Step_Get_RecordLoopIterationResultsResponse);
  
  
  // Property: UseMutex
  //
  // Specifies that the step acquires a lock before it executes and releases the lock after it completes.
  //
  // Use the Step.MutexNameOrRefExpr property to specify which lock the step uses.
  //
  // Step_Set_UseMutexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: bool - Specifies that the step acquires a lock before it executes and releases the lock after it completes. 
  //
  // Step_Set_UseMutexResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_UseMutexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_UseMutexResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies that the step acquires a lock before it executes and releases the lock after it completes. 
  //
  rpc Set_UseMutex(Step_Set_UseMutexRequest) returns (Step_Set_UseMutexResponse);
  rpc Get_UseMutex(Step_Get_UseMutexRequest) returns (Step_Get_UseMutexResponse);
  
  
  // Property: MutexNameOrRefExpr
  //
  // Specifies which lock the step acquires and releases. This property is ignored if the Step.UseMutex property is False.
  //
  // Enter a string expression to specify the name of an existing lock. You can also enter an expression that evaluates an ActiveX reference to an existing Lock object.
  // Pass an empty string to specify that TestStand uses a lock unique to the step.
  //
  // Step_Set_MutexNameOrRefExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Specifies which lock the step acquires and releases. This property is ignored if the Step.UseMutex property is False. 
  //
  // Step_Set_MutexNameOrRefExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_MutexNameOrRefExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_MutexNameOrRefExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies which lock the step acquires and releases. This property is ignored if the Step.UseMutex property is False. 
  //
  rpc Set_MutexNameOrRefExpr(Step_Set_MutexNameOrRefExprRequest) returns (Step_Set_MutexNameOrRefExprResponse);
  rpc Get_MutexNameOrRefExpr(Step_Get_MutexNameOrRefExprRequest) returns (Step_Get_MutexNameOrRefExprResponse);
  
  
  // Property: BatchSyncOption
  //
  // Specifies the Batch Synchronization operation that the step enters before it executes and exits after it completes.
  //
  // Step_Set_BatchSyncOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: BatchSynchronizationOptions - Specifies the Batch Synchronization operation that the step enters before it executes and exits after it completes. 
  //
  // Step_Set_BatchSyncOptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_BatchSyncOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_BatchSyncOptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: BatchSynchronizationOptions - Specifies the Batch Synchronization operation that the step enters before it executes and exits after it completes. 
  //
  rpc Set_BatchSyncOption(Step_Set_BatchSyncOptionRequest) returns (Step_Set_BatchSyncOptionResponse);
  rpc Get_BatchSyncOption(Step_Get_BatchSyncOptionRequest) returns (Step_Get_BatchSyncOptionResponse);
  
  
  // Property: UniqueStepId
  //
  // Returns an identification string unique among all steps TestStand has created or will create.
  // Note: Sequence editors you create with TestStand assign new unique IDs to steps that you duplicate in the editor. However, the value of Step.UniqueStepId is not unique if you duplicate a step using the TestStand API or if you copy a sequence file using the file system. It is incorrect programming practice to create a non-unique UniqueStepId using the API. Call Step.CreateNewUniqueStepId to ensure that a programmatically duplicated step has a unique ID. At run time, you can guard against mistakenly matching steps from duplicated files by Step.UniqueStepId. To do so, append the string representation of the value of Step.Sequence.SequenceFile.Id to the Step.UniqueStepId value before comparing it.
  //
  // An example of a UniqueStepId is ID#:aXPIZYIPFEWM/Jsuxx0FAD.
  //
  // Step_Get_UniqueStepIdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_UniqueStepIdResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns an identification string unique among all steps TestStand has created or will create. Note: Sequence editors you create with TestStand assign new unique IDs to steps that you duplicate in the editor. However, the value of Step.UniqueStepId is not unique if you duplicate a step using the TestStand API or if you copy a sequence file using the file system. It is incorrect programming practice to create a non-unique UniqueStepId using the API. Call Step.CreateNewUniqueStepId to ensure that a programmatically duplicated step has a unique ID. At run time, you can guard against mistakenly matching steps from duplicated files by Step.UniqueStepId. To do so, append the string representation of the value of Step.Sequence.SequenceFile.Id to the Step.UniqueStepId value before comparing it. 
  //
  rpc Get_UniqueStepId(Step_Get_UniqueStepIdRequest) returns (Step_Get_UniqueStepIdResponse);
  
  
  // Property: Module
  //
  // Returns a reference to the Module object related to the current step.
  //
  // You must acquire the module interface for the specific adapter from the object this property returns to specify the code module name, location, and parameters for the Module object.
  //
  // Step_Get_ModuleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_ModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: ModuleInstance - Returns a reference to the Module object related to the current step. 
  //
  rpc Get_Module(Step_Get_ModuleRequest) returns (Step_Get_ModuleResponse);
  
  
  // Property: EditAsReadOnly
  //
  // Specifies if dialog boxes that edit the step launch in read-only mode. Implement code for such dialog boxes to obtain the value of this property and launch the Edit dialog box in read-only mode if it returns True. The sequence editor sets this property if the file that contains the step is read-only, if the user does not have sufficient privileges to edit the step, or if executions are currently running.
  //
  // When implementing an Edit substep for a step type, this property works in conjunction with the Supports Edit As Read-Only option for the Edit substep in the
  // Step Type Properties dialog box. The sequence editor does not call the Edit substep for a read-only step unless Supports Edit As Read-Only is True for the Edit substep. If you do not want to handle launching the dialog box in read-only mode, leave Supports Edit As Read-Only set to False.
  //
  // Step_Set_EditAsReadOnlyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: bool - Specifies if dialog boxes that edit the step launch in read-only mode. Implement code for such dialog boxes to obtain the value of this property and launch the Edit dialog box in read-only mode if it returns True. The sequence editor sets this property if the file that contains the step is read-only, if the user does not have sufficient privileges to edit the step, or if executions are currently running. 
  //
  // Step_Set_EditAsReadOnlyResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_EditAsReadOnlyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_EditAsReadOnlyResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if dialog boxes that edit the step launch in read-only mode. Implement code for such dialog boxes to obtain the value of this property and launch the Edit dialog box in read-only mode if it returns True. The sequence editor sets this property if the file that contains the step is read-only, if the user does not have sufficient privileges to edit the step, or if executions are currently running. 
  //
  rpc Set_EditAsReadOnly(Step_Set_EditAsReadOnlyRequest) returns (Step_Set_EditAsReadOnlyResponse);
  rpc Get_EditAsReadOnly(Step_Get_EditAsReadOnlyRequest) returns (Step_Get_EditAsReadOnlyResponse);
  
  
  // Property: BlockLevel
  //
  // Specifies the number of blocks that enclose the step. Specifies 0 for top-level steps.
  //
  // Step_Get_BlockLevelRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_BlockLevelResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the number of blocks that enclose the step. Specifies 0 for top-level steps. 
  //
  rpc Get_BlockLevel(Step_Get_BlockLevelRequest) returns (Step_Get_BlockLevelResponse);
  
  
  // Property: BlockLevelsUnmatched
  //
  // Specifies the number of unterminated blocks that enclose the step.
  //
  // Step_Get_BlockLevelsUnmatchedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_BlockLevelsUnmatchedResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the number of unterminated blocks that enclose the step. 
  //
  rpc Get_BlockLevelsUnmatched(Step_Get_BlockLevelsUnmatchedRequest) returns (Step_Get_BlockLevelsUnmatchedResponse);
  
  
  // Property: BlockFlags
  //
  // Specifies flags that indicate how the step affects the block structure of the sequence.
  //
  // Step_Get_BlockFlagsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_BlockFlagsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies flags that indicate how the step affects the block structure of the sequence. 
  //
  rpc Get_BlockFlags(Step_Get_BlockFlagsRequest) returns (Step_Get_BlockFlagsResponse);
  
  
  // Property: BlockStartIndex
  //
  // Specifies the index of the step that opens the block this step closes. Specifies -1 if this step does not close a matched block.
  //
  // Step_Get_BlockStartIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_BlockStartIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the index of the step that opens the block this step closes. Specifies -1 if this step does not close a matched block. 
  //
  rpc Get_BlockStartIndex(Step_Get_BlockStartIndexRequest) returns (Step_Get_BlockStartIndexResponse);
  
  
  // Property: BlockEndIndex
  //
  // Returns the index of the step that closes the block this step opens.  Returns -1 if this step does not open a matched block.
  //
  // Step_Get_BlockEndIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_BlockEndIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the index of the step that closes the block this step opens.  Returns -1 if this step does not open a matched block. 
  //
  rpc Get_BlockEndIndex(Step_Get_BlockEndIndexRequest) returns (Step_Get_BlockEndIndexResponse);
  
  
  // Property: BlockPreviousIndex
  //
  // Specifies the index of the nearest previous step that starts a block, regardless of the level of the preceding block. Specifies -1 if this step does not also start a block or if no previous block exists.
  //
  // Step_Get_BlockPreviousIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_BlockPreviousIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the index of the nearest previous step that starts a block, regardless of the level of the preceding block. Specifies -1 if this step does not also start a block or if no previous block exists. 
  //
  rpc Get_BlockPreviousIndex(Step_Get_BlockPreviousIndexRequest) returns (Step_Get_BlockPreviousIndexResponse);
  
  
  // Property: BlockNextIndex
  //
  // Specifies the index of the nearest following step that starts a block, regardless of the level of the next block. Specifies -1 if this step does not start a block or if no subsequent block exists.
  //
  // Step_Get_BlockNextIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_BlockNextIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the index of the nearest following step that starts a block, regardless of the level of the next block. Specifies -1 if this step does not start a block or if no subsequent block exists. 
  //
  rpc Get_BlockNextIndex(Step_Get_BlockNextIndexRequest) returns (Step_Get_BlockNextIndexResponse);
  
  
  // Property: BlockParentIndex
  //
  // Specifies the index of the step that starts the enclosing block. Specifies -1 if this step does not reside in an enclosing block.
  //
  // Step_Get_BlockParentIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_BlockParentIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the index of the step that starts the enclosing block. Specifies -1 if this step does not reside in an enclosing block. 
  //
  rpc Get_BlockParentIndex(Step_Get_BlockParentIndexRequest) returns (Step_Get_BlockParentIndexResponse);
  
  
  // Property: Requirements
  //
  // Returns the Requirements property for the step. The Links subproperty of the Requirements property is an array of string values that represents the product and unit requirements the step covers.
  //
  // You can use the following pseudocode to add a new element to the list of requirements:
  // PropertyObject links = step.Requirements.GetPropertyObject("Links", 0);int nextAvailableIndex = links.GetNumElements();links.SetValStringByOffset(nextAvailableIndex, PropertyOptions.PropOption_InsertElement, "REQ_ABC");
  //
  // Step_Get_RequirementsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_RequirementsResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Returns the Requirements property for the step. The Links subproperty of the Requirements property is an array of string values that represents the product and unit requirements the step covers. 
  //
  rpc Get_Requirements(Step_Get_RequirementsRequest) returns (Step_Get_RequirementsResponse);
  
  
  // Property: SwitchExecEnabled
  //
  // Specifies whether to perform a switching operation for the step. The step performs the switching operation the Step.SwitchExecOperation property specifies for the virtual device the Step.SwitchExecVirtualDevice property specifies.
  // Note: This feature is available only when you install NI Switch Executive software.
  //
  // Step_Set_SwitchExecEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: bool - Specifies whether to perform a switching operation for the step. The step performs the switching operation the Step.SwitchExecOperation property specifies for the virtual device the Step.SwitchExecVirtualDevice property specifies. Note: This feature is available only when you install NI Switch Executive software. 
  //
  // Step_Set_SwitchExecEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_SwitchExecEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_SwitchExecEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether to perform a switching operation for the step. The step performs the switching operation the Step.SwitchExecOperation property specifies for the virtual device the Step.SwitchExecVirtualDevice property specifies. Note: This feature is available only when you install NI Switch Executive software. 
  //
  rpc Set_SwitchExecEnabled(Step_Set_SwitchExecEnabledRequest) returns (Step_Set_SwitchExecEnabledResponse);
  rpc Get_SwitchExecEnabled(Step_Get_SwitchExecEnabledRequest) returns (Step_Get_SwitchExecEnabledResponse);
  
  
  // Property: SwitchExecVirtualDevice
  //
  // Specifies an expression TestStand evaluates at run time to determine the virtual device name on which to perform the switching operation.
  //
  // Note: NI Switch Executive software in Measurement & Automation Explorer defines the virtual device name.
  //
  // Step_Set_SwitchExecVirtualDeviceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Specifies an expression TestStand evaluates at run time to determine the virtual device name on which to perform the switching operation. 
  //
  // Step_Set_SwitchExecVirtualDeviceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_SwitchExecVirtualDeviceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_SwitchExecVirtualDeviceResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies an expression TestStand evaluates at run time to determine the virtual device name on which to perform the switching operation. 
  //
  rpc Set_SwitchExecVirtualDevice(Step_Set_SwitchExecVirtualDeviceRequest) returns (Step_Set_SwitchExecVirtualDeviceResponse);
  rpc Get_SwitchExecVirtualDevice(Step_Get_SwitchExecVirtualDeviceRequest) returns (Step_Get_SwitchExecVirtualDeviceResponse);
  
  
  // Property: SwitchExecOperation
  //
  // Specifies whether to connect or disconnect the routes the Step.SwitchExecRoutesToConnect and Step.SwitchExecRoutesToDisconnect properties specify, or disconnect all previously connected routes for a virtual device.
  // Note: This operation returns as soon as the instrument is ready for another operation, which might be before or after the switches involved settle. Enable the Step.SwitchExecWaitForDebounce property if you want to wait until all switches have debounced.
  //
  // Step_Set_SwitchExecOperationRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: SwitchExecOperations - Specifies whether to connect or disconnect the routes the Step.SwitchExecRoutesToConnect and Step.SwitchExecRoutesToDisconnect properties specify, or disconnect all previously connected routes for a virtual device. Note: This operation returns as soon as the instrument is ready for another operation, which might be before or after the switches involved settle. Enable the Step.SwitchExecWaitForDebounce property if you want to wait until all switches have debounced. 
  //
  // Step_Set_SwitchExecOperationResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_SwitchExecOperationRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_SwitchExecOperationResponse - The response message from the server. It provides the return value.
  //    - returnValue: SwitchExecOperations - Specifies whether to connect or disconnect the routes the Step.SwitchExecRoutesToConnect and Step.SwitchExecRoutesToDisconnect properties specify, or disconnect all previously connected routes for a virtual device. Note: This operation returns as soon as the instrument is ready for another operation, which might be before or after the switches involved settle. Enable the Step.SwitchExecWaitForDebounce property if you want to wait until all switches have debounced. 
  //
  rpc Set_SwitchExecOperation(Step_Set_SwitchExecOperationRequest) returns (Step_Set_SwitchExecOperationResponse);
  rpc Get_SwitchExecOperation(Step_Get_SwitchExecOperationRequest) returns (Step_Get_SwitchExecOperationResponse);
  
  
  // Property: SwitchExecRoutesToConnect
  //
  // Specifies an expression TestStand evaluates at run time to determine the routes to connect when the value of the Step.SwitchExecOperation property is Connect or ConnectDisconnect.
  // Note: The expression must be a valid route specification string the NI Switch Executive configuration defines for the virtual device name the  Step.SwitchExecVirtualDevice property specifies. The string can be a combination of route group alias names, route names, and physical route paths. You can use the SwitchFindRoute expression function to dynamically determine a physical route path at run time.
  //
  // Step_Set_SwitchExecRoutesToConnectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Specifies an expression TestStand evaluates at run time to determine the routes to connect when the value of the Step.SwitchExecOperation property is Connect or ConnectDisconnect. Note: The expression must be a valid route specification string the NI Switch Executive configuration defines for the virtual device name the  Step.SwitchExecVirtualDevice property specifies. The string can be a combination of route group alias names, route names, and physical route paths. You can use the SwitchFindRoute expression function to dynamically determine a physical route path at run time. 
  //
  // Step_Set_SwitchExecRoutesToConnectResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_SwitchExecRoutesToConnectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_SwitchExecRoutesToConnectResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies an expression TestStand evaluates at run time to determine the routes to connect when the value of the Step.SwitchExecOperation property is Connect or ConnectDisconnect. Note: The expression must be a valid route specification string the NI Switch Executive configuration defines for the virtual device name the  Step.SwitchExecVirtualDevice property specifies. The string can be a combination of route group alias names, route names, and physical route paths. You can use the SwitchFindRoute expression function to dynamically determine a physical route path at run time. 
  //
  rpc Set_SwitchExecRoutesToConnect(Step_Set_SwitchExecRoutesToConnectRequest) returns (Step_Set_SwitchExecRoutesToConnectResponse);
  rpc Get_SwitchExecRoutesToConnect(Step_Get_SwitchExecRoutesToConnectRequest) returns (Step_Get_SwitchExecRoutesToConnectResponse);
  
  
  // Property: SwitchExecRoutesToDisconnect
  //
  // Specifies an expression TestStand evaluates at run time to determine the routes to disconnect when the value of the Step.SwitchExecOperation property is Disconnect or ConnectDisconnect.
  // Note: The expression must be a valid route specification string the NI Switch Executive configuration defines for the virtual device name the Step.SwitchExecVirtualDevice property specifies. The string can be a combination of route group alias names, route names, and physical route paths. You can use the SwitchFindRoute expression function to dynamically determine a physical route path at run time.
  //
  // Step_Set_SwitchExecRoutesToDisconnectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: string - Specifies an expression TestStand evaluates at run time to determine the routes to disconnect when the value of the Step.SwitchExecOperation property is Disconnect or ConnectDisconnect. Note: The expression must be a valid route specification string the NI Switch Executive configuration defines for the virtual device name the Step.SwitchExecVirtualDevice property specifies. The string can be a combination of route group alias names, route names, and physical route paths. You can use the SwitchFindRoute expression function to dynamically determine a physical route path at run time. 
  //
  // Step_Set_SwitchExecRoutesToDisconnectResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_SwitchExecRoutesToDisconnectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_SwitchExecRoutesToDisconnectResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies an expression TestStand evaluates at run time to determine the routes to disconnect when the value of the Step.SwitchExecOperation property is Disconnect or ConnectDisconnect. Note: The expression must be a valid route specification string the NI Switch Executive configuration defines for the virtual device name the Step.SwitchExecVirtualDevice property specifies. The string can be a combination of route group alias names, route names, and physical route paths. You can use the SwitchFindRoute expression function to dynamically determine a physical route path at run time. 
  //
  rpc Set_SwitchExecRoutesToDisconnect(Step_Set_SwitchExecRoutesToDisconnectRequest) returns (Step_Set_SwitchExecRoutesToDisconnectResponse);
  rpc Get_SwitchExecRoutesToDisconnect(Step_Get_SwitchExecRoutesToDisconnectRequest) returns (Step_Get_SwitchExecRoutesToDisconnectResponse);
  
  
  // Property: SwitchExecMulticonnectMode
  //
  // Specifies the behavior when more than one connection operation occurs on a specific route.
  // Note: If the value of this property is Multiconnect, a route can exist longer if another step specifies a lifetime for the same route.
  //
  // Step_Set_SwitchExecMulticonnectModeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: SwitchExecMulticonnectModes - Specifies the behavior when more than one connection operation occurs on a specific route. Note: If the value of this property is Multiconnect, a route can exist longer if another step specifies a lifetime for the same route. 
  //
  // Step_Set_SwitchExecMulticonnectModeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_SwitchExecMulticonnectModeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_SwitchExecMulticonnectModeResponse - The response message from the server. It provides the return value.
  //    - returnValue: SwitchExecMulticonnectModes - Specifies the behavior when more than one connection operation occurs on a specific route. Note: If the value of this property is Multiconnect, a route can exist longer if another step specifies a lifetime for the same route. 
  //
  rpc Set_SwitchExecMulticonnectMode(Step_Set_SwitchExecMulticonnectModeRequest) returns (Step_Set_SwitchExecMulticonnectModeResponse);
  rpc Get_SwitchExecMulticonnectMode(Step_Get_SwitchExecMulticonnectModeRequest) returns (Step_Get_SwitchExecMulticonnectModeResponse);
  
  
  // Property: SwitchExecOperationOrder
  //
  // Specifies whether the Disconnect operation occurs before or after the Connect operation when the value of the Step.SwitchExecOperation property is ConnectDisconnect.
  //
  // Step_Set_SwitchExecOperationOrderRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: SwitchExecOperationOrders - Specifies whether the Disconnect operation occurs before or after the Connect operation when the value of the Step.SwitchExecOperation property is ConnectDisconnect. 
  //
  // Step_Set_SwitchExecOperationOrderResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_SwitchExecOperationOrderRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_SwitchExecOperationOrderResponse - The response message from the server. It provides the return value.
  //    - returnValue: SwitchExecOperationOrders - Specifies whether the Disconnect operation occurs before or after the Connect operation when the value of the Step.SwitchExecOperation property is ConnectDisconnect. 
  //
  rpc Set_SwitchExecOperationOrder(Step_Set_SwitchExecOperationOrderRequest) returns (Step_Set_SwitchExecOperationOrderResponse);
  rpc Get_SwitchExecOperationOrder(Step_Get_SwitchExecOperationOrderRequest) returns (Step_Get_SwitchExecOperationOrderResponse);
  
  
  // Property: SwitchExecConnectionLifetime
  //
  // Specifies the lifetime that TestStand applies to routes when the value of the Step.SwitchExecOperation property is Connect or ConnectDisconnect. You can specify whether you want the route to exist until manually disconnected later or until the step, sequence, thread, or execution completes.
  // Note: If the value of the Step.SwitchExecMulticonnectMode property is Multiconnect, a route can exist longer if another step specifies a lifetime for the same route. Selecting a lifetime other than Manual guarantees that the route stays connected as long as the step, sequence, thread, or execution in which you connect is executing. If you manually disconnect a previously connected route using a non-manual lifetime setting, TestStand releases the reference to the route for the last step that performed a connect action for the route.
  //
  // Step_Set_SwitchExecConnectionLifetimeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: SwitchExecLifetimes - Specifies the lifetime that TestStand applies to routes when the value of the Step.SwitchExecOperation property is Connect or ConnectDisconnect. You can specify whether you want the route to exist until manually disconnected later or until the step, sequence, thread, or execution completes. Note: If the value of the Step.SwitchExecMulticonnectMode property is Multiconnect, a route can exist longer if another step specifies a lifetime for the same route. Selecting a lifetime other than Manual guarantees that the route stays connected as long as the step, sequence, thread, or execution in which you connect is executing. If you manually disconnect a previously connected route using a non-manual lifetime setting, TestStand releases the reference to the route for the last step that performed a connect action for the route. 
  //
  // Step_Set_SwitchExecConnectionLifetimeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_SwitchExecConnectionLifetimeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_SwitchExecConnectionLifetimeResponse - The response message from the server. It provides the return value.
  //    - returnValue: SwitchExecLifetimes - Specifies the lifetime that TestStand applies to routes when the value of the Step.SwitchExecOperation property is Connect or ConnectDisconnect. You can specify whether you want the route to exist until manually disconnected later or until the step, sequence, thread, or execution completes. Note: If the value of the Step.SwitchExecMulticonnectMode property is Multiconnect, a route can exist longer if another step specifies a lifetime for the same route. Selecting a lifetime other than Manual guarantees that the route stays connected as long as the step, sequence, thread, or execution in which you connect is executing. If you manually disconnect a previously connected route using a non-manual lifetime setting, TestStand releases the reference to the route for the last step that performed a connect action for the route. 
  //
  rpc Set_SwitchExecConnectionLifetime(Step_Set_SwitchExecConnectionLifetimeRequest) returns (Step_Set_SwitchExecConnectionLifetimeResponse);
  rpc Get_SwitchExecConnectionLifetime(Step_Get_SwitchExecConnectionLifetimeRequest) returns (Step_Get_SwitchExecConnectionLifetimeResponse);
  
  
  // Property: SwitchExecWaitForDebounce
  //
  // Specifies if the operation the Step.SwitchExecOperation property specifies waits for all switches to debounce before returning to TestStand.
  // Note: The wait for debounce occurs after both the Connect and Disconnect operations are complete.
  //
  // Step_Set_SwitchExecWaitForDebounceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: bool - Specifies if the operation the Step.SwitchExecOperation property specifies waits for all switches to debounce before returning to TestStand. Note: The wait for debounce occurs after both the Connect and Disconnect operations are complete. 
  //
  // Step_Set_SwitchExecWaitForDebounceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_SwitchExecWaitForDebounceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_SwitchExecWaitForDebounceResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if the operation the Step.SwitchExecOperation property specifies waits for all switches to debounce before returning to TestStand. Note: The wait for debounce occurs after both the Connect and Disconnect operations are complete. 
  //
  rpc Set_SwitchExecWaitForDebounce(Step_Set_SwitchExecWaitForDebounceRequest) returns (Step_Set_SwitchExecWaitForDebounceResponse);
  rpc Get_SwitchExecWaitForDebounce(Step_Get_SwitchExecWaitForDebounceRequest) returns (Step_Get_SwitchExecWaitForDebounceResponse);
  
  
  // Property: AdditionalResults
  //
  // Accesses the parameter additional results and custom additional results of a step.
  //
  // Step_Get_AdditionalResultsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_AdditionalResultsResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepAdditionalResultsInstance - Accesses the parameter additional results and custom additional results of a step. 
  //
  rpc Get_AdditionalResults(Step_Get_AdditionalResultsRequest) returns (Step_Get_AdditionalResultsResponse);
  
  
  // Property: AdditionalResultsHints
  //
  // Returns a list of additional result hints associated with a step instance. Use this property when step types support multiple operations and you want to specify different additional result hints for different step operations.
  //
  // The combined members of StepType.AdditionalResultsHints and "Step.AdditionalResultsHints" define a list of preconfigured custom additional results you can choose to log when you edit the additional results of a step in a user interface.
  // You normally edit the Step.AdditionalResultsHints collection in an Edit substep.
  //
  // Step_Get_AdditionalResultsHintsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_AdditionalResultsHintsResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdditionalResultsInstance - Returns a list of additional result hints associated with a step instance. Use this property when step types support multiple operations and you want to specify different additional result hints for different step operations. 
  //
  rpc Get_AdditionalResultsHints(Step_Get_AdditionalResultsHintsRequest) returns (Step_Get_AdditionalResultsHintsResponse);
  
  
  // Property: ResultRecordingOption
  //
  // Specifies whether to record the result properties of the step.
  //
  // For steps that loop, use the Step.RecordLoopIterationResults property to specify to add step results to the sequence result list after each loop iteration.
  //
  // Step_Set_ResultRecordingOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: ResultRecordingOptions - Specifies whether to record the result properties of the step. 
  //
  // Step_Set_ResultRecordingOptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_ResultRecordingOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_ResultRecordingOptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: ResultRecordingOptions - Specifies whether to record the result properties of the step. 
  //
  rpc Set_ResultRecordingOption(Step_Set_ResultRecordingOptionRequest) returns (Step_Set_ResultRecordingOptionResponse);
  rpc Get_ResultRecordingOption(Step_Get_ResultRecordingOptionRequest) returns (Step_Get_ResultRecordingOptionResponse);
  
  
  // Property: CancelCurrentModuleExecution
  //
  // When this property is True, TestStand does not call the code module for the step.
  //
  // This property is reset to False after TestStand uses it so that the step runs normally the next time it executes. The property is also reset to False before the start of the next iteration when looping on a step. You can set this property from the Pre-Step Engine callbacks, the step pre-expression, or the Pre-Step substep of a step type. By setting this property to True, you can use this property to impose additional conditions that a step must meet before it can execute the code module.
  //
  // Step_Set_CancelCurrentModuleExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //    - val: bool - When this property is True, TestStand does not call the code module for the step. 
  //
  // Step_Set_CancelCurrentModuleExecutionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Step_Get_CancelCurrentModuleExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepInstance - The id of the Step object.
  //
  // Step_Get_CancelCurrentModuleExecutionResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When this property is True, TestStand does not call the code module for the step. 
  //
  rpc Set_CancelCurrentModuleExecution(Step_Set_CancelCurrentModuleExecutionRequest) returns (Step_Set_CancelCurrentModuleExecutionResponse);
  rpc Get_CancelCurrentModuleExecution(Step_Get_CancelCurrentModuleExecutionRequest) returns (Step_Get_CancelCurrentModuleExecutionResponse);
  
  
}
message ExecutionInstance {
  // Specifies the handle of the Execution instance in the server.
  string id = 1;
}

message StepTypeInstance {
  // Specifies the handle of the StepType instance in the server.
  string id = 1;
}

message ModuleInstance {
  // Specifies the handle of the Module instance in the server.
  string id = 1;
}

message StepAdditionalResultsInstance {
  // Specifies the handle of the StepAdditionalResults instance in the server.
  string id = 1;
}

message AdditionalResultsInstance {
  // Specifies the handle of the AdditionalResults instance in the server.
  string id = 1;
}
message Step_GetStepSettingsStringRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies a StepDescriptionOptions constant. Use the bitwise-OR operator to specify multiple StepDescriptionOptions constants.
  StepDescriptionOptions options = 2;
  // Specifies a reference to an Execution object to retrieve execution specific settings for a running instance of the step.
  ExecutionInstance executionParam = 3;
}

message Step_GetStepSettingsStringResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message Step_DisplayAdditionalResultsDialogRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies any combination of CommonDialogOptions.
  CommonDialogOptions dlgOptions = 3;
}

message Step_DisplayAdditionalResultsDialogResponse {
  // Returns True if you click OK in the dialog box. Returns False if you click Cancel.
  bool returnValue = 1;
}

message Step_LogAdditionalResultRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the value of the additional result.
  PropertyObjectInstance resultValue = 2;
  // Specifies the name of the additional result. Pass an empty string to use the name of the object you passed for the resultValue parameter.
  string resultName = 3;
  // Specifies the PropertyFlags of the additional result. You must include the PropFlags_IncludeInReport flag for the additional result to appear in the report.
  PropertyFlags resultPropertyFlags = 4;
}

message Step_LogAdditionalResultResponse {
}

message Step_AsPropertyObjectRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message Step_ExecuteEditSubstepRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_ExecuteEditSubstepResponse {
  // Returns True if the Edit substep modifies the step.
  bool returnValue = 1;
}

message Step_SpecifyModuleRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies one or more SpecifyModuleOptions to modify the behavior of the dialog box.
  SpecifyModuleOptions specModOptions = 2;
}

message Step_SpecifyModuleResponse {
  // Returns True if the Specify Module dialog box modifies the step.
  bool returnValue = 1;
}

message Step_SetRunModeExRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // The RunModes constants define the valid values for this parameter.
  string newRunMode = 2;
  // If you want to set the run mode for a particular execution only, pass a reference to an Execution object.
  PropertyObjectInstance executionParam = 3;
}

message Step_SetRunModeExResponse {
}

message Step_GetRunModeExRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies a reference to an Execution object if you want to obtain the run mode that applies to a particular execution.
  PropertyObjectInstance executionParam = 2;
}

message Step_GetRunModeExResponse {
  // Returns a run mode string. The RunModes constants define the valid return values for this method.
  string returnValue = 1;
}

message Step_SetBreakOnStepExRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Pass True to set a breakpoint on the step or False to unset a breakpoint.
  bool newBreakSetting = 2;
  // Specifies a reference to an Execution object to obtain the breakpoint settings on a step, which apply to a particular execution. If there is no execution-specific breakpoint setting or if you do not pass an Execution object, the method sets the breakpoint setting on the step of the sequence file.
  PropertyObjectInstance executionParam = 3;
}

message Step_SetBreakOnStepExResponse {
}

message Step_GetBreakOnStepExRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies a reference to an Execution object to obtain the breakpoint settings on a step, which apply to a particular execution. If there is no execution-specific breakpoint setting or if you do not pass an Execution object, the method returns the breakpoint setting on the step of the sequence file.
  PropertyObjectInstance executionParam = 2;
}

message Step_GetBreakOnStepExResponse {
  // Returns True if a breakpoint is set on the step.
  bool returnValue = 1;
}

message Step_LoadModuleRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies one or more LoadModuleOptions using the bitwise-OR operator to modify the behavior of this method.
  LoadModuleOptions loadOptions = 2;
  // If passing the LoadModule_EvaluateExpressions flag to the loadOptions parameter, pass a SequenceContext object for this parameter to use when evaluating the expressions. Also, if you are calling this method from a step in an execution, pass the sequence context of the execution.
  ObjectInstance sequenceContextParam = 3;
}

message Step_LoadModuleResponse {
  // Returns True on success or False if the module fails to load.
  bool returnValue = 1;
}

message Step_GetResultStatusDisplayStringRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_GetResultStatusDisplayStringResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message Step_GetExecutionFlowStringRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies a StepDescriptionOptions constant. Use the bitwise-OR operator to specify multiple StepDescriptionOptions constants.
  StepDescriptionOptions options = 2;
  // Specifies a reference to an Execution object if you want to obtain the run mode that applies to a particular execution. If there is no execution-specific run mode for the step or if you do not pass an Execution object, the method returns the run mode setting of the sequence file.
  PropertyObjectInstance executionParam = 3;
}

message Step_GetExecutionFlowStringResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message Step_CreateCodeRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_CreateCodeResponse {
  // Indicates if the step was modified.
  bool returnValue = 1;
}

message Step_EditCodeRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_EditCodeResponse {
  // Indicates if the step was modified.
  bool returnValue = 1;
}

message Step_CanExecuteSubstepRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the zero-based index of the substep.
  int32 substepIndex = 2;
  // If you call this method from a step, you must pass a SequenceContext. For executing substeps from a user interface, do not pass any value for this parameter.
  PropertyObjectInstance sequenceContextParam = 3;
}

message Step_CanExecuteSubstepResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message Step_ExecuteSubstepRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the zero-based index of the substep. Use the PropertyObject.GetArrayOffset method to obtain the index from the name of a substep.
  int32 substepIndex = 2;
  // Typically, you pass the current sequence context when you call this method from within a thread of an execution. If you do not pass any value for this parameter, TestStand approximates the sequence context as if you are running the step in a sequence. When executing substeps from a user interface, do not pass any value for this parameter.
  PropertyObjectInstance sequenceContextParam = 3;
}

message Step_ExecuteSubstepResponse {
  // Returns True if the substep indicates that it modified the step by incrementing  the sequence file change count. Typically, only Edit substeps increment the sequence file change count.
  bool returnValue = 1;
}

message Step_UnloadModuleRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_UnloadModuleResponse {
  // Indicates if the module was successfully unloaded.
  bool returnValue = 1;
}

message Step_GetDescriptionExRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies one or more StepDescriptionOptions constants. Use the bitwise-OR operator to specify multiple sequence file flags.
  StepDescriptionOptions options = 2;
}

message Step_GetDescriptionExResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message Step_GetEditSubstepMenuStructureRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_GetEditSubstepMenuStructureResponse {
  // The object that specifies the menu structure. See MenuItemProperties for a description of this property object.
  PropertyObjectInstance returnValue = 1;
}

message Step_SetBreakSettingsRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies if the breakpoint is set.
  bool isSet = 2;
  // Specifies if the breakpoint is enabled. TestStand ignores disabled breakpoints during execution.
  bool enabled = 3;
  // Specifies the number of iterations the execution skips the breakpoint before suspending execution. Pass 0 if you do not want to use a conditional pass count.
  int32 passCount = 4;
  // Specifies the expression that must evaluate to True before suspending the execution. An empty value defaults to True. If you specify a non-zero pass count value and a condition expression for the breakpoint, the pass count only decrements when the expression evaluates to True.
  string Condition = 5;
  // Specifies a reference to an Execution object to update the breakpoint settings on a step, which apply to a particular execution. If there is no execution-specific breakpoint setting or if you do not pass an Execution object, the method sets the breakpoint setting on the step of the sequence file.
  PropertyObjectInstance executionParam = 6;
}

message Step_SetBreakSettingsResponse {
}

message Step_GetBreakSettingsRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies a reference to an Execution object to obtain the breakpoint settings on a step, which apply to a particular execution. If there is no execution-specific breakpoint setting or if you do not pass an Execution object, the method returns the breakpoint setting on the step of the sequence file.
  PropertyObjectInstance executionParam = 2;
}

message Step_GetBreakSettingsResponse {
  // Returns a value that indicates whether the breakpoint is set.
  bool isSet = 1;
  // Returns a value that indicates whether the breakpoint is enabled. TestStand ignores disabled breakpoints during execution.
  bool enabled = 2;
  // Returns the number of times the execution must evaluate the condition expression before suspending the execution. Pass 0 if you do not want to use a conditional pass count.
  int32 passCount = 3;
  // Returns the expression that must evaluate to True before suspending the execution. An empty value defaults to True. If you specify a non-zero pass count value and a condition expression for the breakpoint, the pass count only decrements when the expression evaluates to True.
  string Condition = 4;
}

message Step_ChangeAdapterRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the adapter key name of the new adapter for the step. If the step does not specify a module adapter, pass an empty string.
  string adapterName = 2;
}

message Step_ChangeAdapterResponse {
}

message Step_ChangeStepTypeRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the step type to which you want to convert the step.
  StepTypeInstance stepTypePtr = 2;
}

message Step_ChangeStepTypeResponse {
}

message Step_CanChangeAdapterRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies an adapter key name that determines whether the step allows changing to that specific adapter. Pass the default value of the empty string to check if the step allows changing to any adapter.
  string adapterName = 2;
}

message Step_CanChangeAdapterResponse {
  // Returns True if the step allows changing to the specified adapter. Otherwise, returns False.
  bool returnValue = 1;
}

message Step_CanChangeStepTypeRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies a step type that checks if the step allows changing to that specific step type. Pass the default value of NULL to check if the step allows changing to any step type.
  StepTypeInstance stepTypePtr = 2;
}

message Step_CanChangeStepTypeResponse {
  // Returns True if the step allows changing to the specified step type. Otherwise, returns False.
  bool returnValue = 1;
}

message Step_CreateNewUniqueStepIdRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_CreateNewUniqueStepIdResponse {
}

message Step_Get_IsSequenceCallRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_IsSequenceCallResponse {
  // Returns True if the step is a Sequence Call step.
  bool returnValue = 1;
}

message Step_Get_AdapterKeyNameRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_AdapterKeyNameResponse {
  // Returns the key name of the module adapter the step uses.
  string returnValue = 1;
}

message Step_Set_BreakOnStepRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Note: This property is obsolete. Use the Step.GetBreakSettings and Step.SetBreakSettings methods instead.
  bool val = 2;
}

message Step_Set_BreakOnStepResponse {
}

message Step_Get_BreakOnStepRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_BreakOnStepResponse {
  // Note: This property is obsolete. Use the Step.GetBreakSettings and Step.SetBreakSettings methods instead.
  bool returnValue = 1;
}

message Step_Set_RunModeRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Note: This property is obsolete. Use the Step.GetRunModeEx and Step.SetRunModeEx methods instead.
  string val = 2;
}

message Step_Set_RunModeResponse {
}

message Step_Get_RunModeRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_RunModeResponse {
  // Note: This property is obsolete. Use the Step.GetRunModeEx and Step.SetRunModeEx methods instead.
  string returnValue = 1;
}

message Step_Set_RunTimeRunModeRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Note: This property is obsolete. Use the Step.GetRunModeEx  and Step.SetRunModeEx methods instead.
  string val = 2;
}

message Step_Set_RunTimeRunModeResponse {
}

message Step_Get_RunTimeRunModeRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_RunTimeRunModeResponse {
  // Note: This property is obsolete. Use the Step.GetRunModeEx  and Step.SetRunModeEx methods instead.
  string returnValue = 1;
}

message Step_Set_StepFailCausesSequenceFailRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies if failure of the step causes the sequence to fail.
  bool val = 2;
}

message Step_Set_StepFailCausesSequenceFailResponse {
}

message Step_Get_StepFailCausesSequenceFailRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_StepFailCausesSequenceFailResponse {
  // Specifies if failure of the step causes the sequence to fail.
  bool returnValue = 1;
}

message Step_Set_PreconditionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies an expression that must evaluate to True or be empty to execute the step.
  string val = 2;
}

message Step_Set_PreconditionResponse {
}

message Step_Get_PreconditionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_PreconditionResponse {
  // Specifies an expression that must evaluate to True or be empty to execute the step.
  string returnValue = 1;
}

message Step_Get_DescriptionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_DescriptionResponse {
  // Note: This property is obsolete. Use the Step.GetDescriptionEx method instead.
  string returnValue = 1;
}

message Step_Get_CanSpecifyModuleRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_CanSpecifyModuleResponse {
  // Returns a value that indicates whether this step supports the Step.SpecifyModule method. This property returns False if the Module.CanSpecify property is False, if the Step.TS.CanSpecifyModulePropertyObject is False, or if the step has a step type and Specify Module is enabled on the Disable Properties tab of the Step Type Properties dialog box  for the step type.
  bool returnValue = 1;
}

message Step_Get_CanExecuteEditSubstepRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_CanExecuteEditSubstepResponse {
  // Note: This property is obsolete. Use the Step.CanExecuteSubstep method instead.
  bool returnValue = 1;
}

message Step_Set_PassActionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the type of post action you want to occur if the step passes.
  string val = 2;
}

message Step_Set_PassActionResponse {
}

message Step_Get_PassActionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_PassActionResponse {
  // Specifies the type of post action you want to occur if the step passes.
  string returnValue = 1;
}

message Step_Set_PassActionTargetRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Note: This property is obsolete. Use the Step.PassActionTargetByExpr property instead.
  string val = 2;
}

message Step_Set_PassActionTargetResponse {
}

message Step_Get_PassActionTargetRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_PassActionTargetResponse {
  // Note: This property is obsolete. Use the Step.PassActionTargetByExpr property instead.
  string returnValue = 1;
}

message Step_Set_FailActionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the type of post action you want to occur if the step fails.
  string val = 2;
}

message Step_Set_FailActionResponse {
}

message Step_Get_FailActionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_FailActionResponse {
  // Specifies the type of post action you want to occur if the step fails.
  string returnValue = 1;
}

message Step_Set_FailActionTargetRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Note: This property is obsolete. Use the Step.FailActionTargetByExpr property instead.
  string val = 2;
}

message Step_Set_FailActionTargetResponse {
}

message Step_Get_FailActionTargetRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_FailActionTargetResponse {
  // Note: This property is obsolete. Use the Step.FailActionTargetByExpr property instead.
  string returnValue = 1;
}

message Step_Set_CustomTrueActionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the type of action you want to occur when the custom post action expression evaluates to True.
  string val = 2;
}

message Step_Set_CustomTrueActionResponse {
}

message Step_Get_CustomTrueActionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_CustomTrueActionResponse {
  // Specifies the type of action you want to occur when the custom post action expression evaluates to True.
  string returnValue = 1;
}

message Step_Set_CustomTrueActionTargetRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Note: This property is obsolete. Use the Step.CustomTrueActionTargetByExpr property instead.
  string val = 2;
}

message Step_Set_CustomTrueActionTargetResponse {
}

message Step_Get_CustomTrueActionTargetRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_CustomTrueActionTargetResponse {
  // Note: This property is obsolete. Use the Step.CustomTrueActionTargetByExpr property instead.
  string returnValue = 1;
}

message Step_Set_CustomFalseActionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the type of action you want to occur when the custom post action expression evaluates to False.
  string val = 2;
}

message Step_Set_CustomFalseActionResponse {
}

message Step_Get_CustomFalseActionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_CustomFalseActionResponse {
  // Specifies the type of action you want to occur when the custom post action expression evaluates to False.
  string returnValue = 1;
}

message Step_Set_CustomFalseActionTargetRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Note: This property is obsolete. Use the Step.CustomFalseActionTargetByExpr property instead.
  string val = 2;
}

message Step_Set_CustomFalseActionTargetResponse {
}

message Step_Get_CustomFalseActionTargetRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_CustomFalseActionTargetResponse {
  // Note: This property is obsolete. Use the Step.CustomFalseActionTargetByExpr property instead.
  string returnValue = 1;
}

message Step_Set_CustomActionExpressionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the custom post action condition expression for the step.
  string val = 2;
}

message Step_Set_CustomActionExpressionResponse {
}

message Step_Get_CustomActionExpressionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_CustomActionExpressionResponse {
  // Specifies the custom post action condition expression for the step.
  string returnValue = 1;
}

message Step_Set_PassActionTargetByExprRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the target for the post action the Step.PassAction property specifies.
  string val = 2;
}

message Step_Set_PassActionTargetByExprResponse {
}

message Step_Get_PassActionTargetByExprRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_PassActionTargetByExprResponse {
  // Specifies the target for the post action the Step.PassAction property specifies.
  string returnValue = 1;
}

message Step_Set_FailActionTargetByExprRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the target for the post action that the Step.FailAction property specifies.
  string val = 2;
}

message Step_Set_FailActionTargetByExprResponse {
}

message Step_Get_FailActionTargetByExprRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_FailActionTargetByExprResponse {
  // Specifies the target for the post action that the Step.FailAction property specifies.
  string returnValue = 1;
}

message Step_Set_CustomTrueActionTargetByExprRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the target for the post action the Step.CustomTrueAction property specifies.
  string val = 2;
}

message Step_Set_CustomTrueActionTargetByExprResponse {
}

message Step_Get_CustomTrueActionTargetByExprRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_CustomTrueActionTargetByExprResponse {
  // Specifies the target for the post action the Step.CustomTrueAction property specifies.
  string returnValue = 1;
}

message Step_Set_CustomFalseActionTargetByExprRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the target for the post action the Step.CustomFalseAction property specifies.
  string val = 2;
}

message Step_Set_CustomFalseActionTargetByExprResponse {
}

message Step_Get_CustomFalseActionTargetByExprRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_CustomFalseActionTargetByExprResponse {
  // Specifies the target for the post action the Step.CustomFalseAction property specifies.
  string returnValue = 1;
}

message Step_Set_LoopTypeRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the type of looping for the step.
  string val = 2;
}

message Step_Set_LoopTypeResponse {
}

message Step_Get_LoopTypeRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_LoopTypeResponse {
  // Specifies the type of looping for the step.
  string returnValue = 1;
}

message Step_Set_LoopWhileExpressionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the While Loop expression for the step.
  string val = 2;
}

message Step_Set_LoopWhileExpressionResponse {
}

message Step_Get_LoopWhileExpressionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_LoopWhileExpressionResponse {
  // Specifies the While Loop expression for the step.
  string returnValue = 1;
}

message Step_Set_LoopStatusExpressionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the loop status result expression for the step.
  string val = 2;
}

message Step_Set_LoopStatusExpressionResponse {
}

message Step_Get_LoopStatusExpressionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_LoopStatusExpressionResponse {
  // Specifies the loop status result expression for the step.
  string returnValue = 1;
}

message Step_Set_LoopInitExpressionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the loop initialization expression for the step.
  string val = 2;
}

message Step_Set_LoopInitExpressionResponse {
}

message Step_Get_LoopInitExpressionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_LoopInitExpressionResponse {
  // Specifies the loop initialization expression for the step.
  string returnValue = 1;
}

message Step_Set_LoopIncExpressionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the loop increment expression for the step.
  string val = 2;
}

message Step_Set_LoopIncExpressionResponse {
}

message Step_Get_LoopIncExpressionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_LoopIncExpressionResponse {
  // Specifies the loop increment expression for the step.
  string returnValue = 1;
}

message Step_Set_StatusExpressionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the status expression for the step.
  string val = 2;
}

message Step_Set_StatusExpressionResponse {
}

message Step_Get_StatusExpressionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_StatusExpressionResponse {
  // Specifies the status expression for the step.
  string returnValue = 1;
}

message Step_Set_ResultStatusRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the status string for the step.
  string val = 2;
}

message Step_Set_ResultStatusResponse {
}

message Step_Get_ResultStatusRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_ResultStatusResponse {
  // Specifies the status string for the step.
  string returnValue = 1;
}

message Step_Set_PreExpressionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the Pre expression for the step.
  string val = 2;
}

message Step_Set_PreExpressionResponse {
}

message Step_Get_PreExpressionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_PreExpressionResponse {
  // Specifies the Pre expression for the step.
  string returnValue = 1;
}

message Step_Set_PostExpressionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the Post expression for the step.
  string val = 2;
}

message Step_Set_PostExpressionResponse {
}

message Step_Get_PostExpressionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_PostExpressionResponse {
  // Specifies the Post expression for the step.
  string returnValue = 1;
}

message Step_Set_RecordResultRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Note: This property is obsolete. Use the Step.ResultRecordingOption property instead.
  bool val = 2;
}

message Step_Set_RecordResultResponse {
}

message Step_Get_RecordResultRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_RecordResultResponse {
  // Note: This property is obsolete. Use the Step.ResultRecordingOption property instead.
  bool returnValue = 1;
}

message Step_Set_ModuleLoadOptionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the option that determines when TestStand loads the code module for the step.
  ModuleLoadOptions val = 2;
}

message Step_Set_ModuleLoadOptionResponse {
}

message Step_Get_ModuleLoadOptionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_ModuleLoadOptionResponse {
  // Specifies the option that determines when TestStand loads the code module for the step.
  ModuleLoadOptions returnValue = 1;
}

message Step_Set_ModuleUnloadOptionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the option that determines when TestStand unloads the code module for the step.
  ModuleUnloadOptions val = 2;
}

message Step_Set_ModuleUnloadOptionResponse {
}

message Step_Get_ModuleUnloadOptionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_ModuleUnloadOptionResponse {
  // Specifies the option that determines when TestStand unloads the code module for the step.
  ModuleUnloadOptions returnValue = 1;
}

message Step_Set_NameRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the name of the step.
  string val = 2;
}

message Step_Set_NameResponse {
}

message Step_Get_NameRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_NameResponse {
  // Specifies the name of the step.
  string returnValue = 1;
}

message Step_Get_SmallIconRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_SmallIconResponse {
  // Returns the small version of the icon that represents the step.
  IPictureDispInstance returnValue = 1;
}

message Step_Get_LargeIconRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_LargeIconResponse {
  // Returns the large version of the icon that represents the step.
  IPictureDispInstance returnValue = 1;
}

message Step_Get_SmallIconIndexRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_SmallIconIndexResponse {
  // Returns a unique index for the small version of the icon that represents the step. You can use this index to retrieve the icon image from the image list you obtain with the Engine.SmallImageList property.
  int32 returnValue = 1;
}

message Step_Get_LargeIconIndexRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_LargeIconIndexResponse {
  // Returns a unique index for the large version of the icon that represents the step. You can use this index to retrieve the icon image from the image list you obtain with the Engine.LargeImageListEx property.
  int32 returnValue = 1;
}

message Step_Set_IconNameRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the filename of the icon for the step.
  string val = 2;
}

message Step_Set_IconNameResponse {
}

message Step_Get_IconNameRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_IconNameResponse {
  // Specifies the filename of the icon for the step.
  string returnValue = 1;
}

message Step_Set_CancelCurrentExecutionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // When this property is True, TestStand does not evaluate the pre-expression and does not call the Pre-Step substeps, step module, subsequent Post-Step substeps, or the Post-Step callbacks for the step, nor does it evaluate the post expression or status expression.
  bool val = 2;
}

message Step_Set_CancelCurrentExecutionResponse {
}

message Step_Get_CancelCurrentExecutionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_CancelCurrentExecutionResponse {
  // When this property is True, TestStand does not evaluate the pre-expression and does not call the Pre-Step substeps, step module, subsequent Post-Step substeps, or the Post-Step callbacks for the step, nor does it evaluate the post expression or status expression.
  bool returnValue = 1;
}

message Step_Set_CausedSequenceFailureRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies if this step caused the sequence to fail.
  bool val = 2;
}

message Step_Set_CausedSequenceFailureResponse {
}

message Step_Get_CausedSequenceFailureRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_CausedSequenceFailureResponse {
  // Specifies if this step caused the sequence to fail.
  bool returnValue = 1;
}

message Step_Get_StepGroupRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_StepGroupResponse {
  // Returns the step group in which the step currently resides.
  StepGroups returnValue = 1;
}

message Step_Get_StepIndexRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_StepIndexResponse {
  // Returns the zero-based index that indicates where in the step group the step resides.
  int32 returnValue = 1;
}

message Step_Get_SequenceRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_SequenceResponse {
  // Returns a reference to the sequence in which the step resides.
  SequenceInstance returnValue = 1;
}

message Step_Get_CanCreateCodeRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_CanCreateCodeResponse {
  // Returns a value that indicates whether the step supports the Step.CreateCode method. This property returns False if the Module.CanCreateCode property is False, or if the Step.TS.CanCreateCode PropertyObject is False, or if the step has a step type and Edit Code is enabled on the Disable Properties tab of the Step Type Properties dialog box for the step type.
  bool returnValue = 1;
}

message Step_Get_CanEditCodeRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_CanEditCodeResponse {
  // Returns a value that indicates whether this step supports the Step.EditCode method. This property returns False if the Module.CanEditCode property is False, if the Step.TS.CanEditCode PropertyObject is False, or if the step has a step type and Edit Code is enabled on the Disable Properties tab of the Step Type Properties dialog box for the step type.
  bool returnValue = 1;
}

message Step_Get_StepTypeRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_StepTypeResponse {
  // Returns the step type for this step.
  StepTypeInstance returnValue = 1;
}

message Step_Set_CancelStepCallbackRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies that TestStand does not call any further Engine callbacks for the same event.
  bool val = 2;
}

message Step_Set_CancelStepCallbackResponse {
}

message Step_Get_CancelStepCallbackRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_CancelStepCallbackResponse {
  // Specifies that TestStand does not call any further Engine callbacks for the same event.
  bool returnValue = 1;
}

message Step_Set_LastStepResultRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the PropertyObject object that holds the result of the current or most recent step execution.
  PropertyObjectInstance val = 2;
}

message Step_Set_LastStepResultResponse {
}

message Step_Get_LastStepResultRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_LastStepResultResponse {
  // Specifies the PropertyObject object that holds the result of the current or most recent step execution.
  PropertyObjectInstance returnValue = 1;
}

message Step_Set_CurrentLoopResultRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the PropertyObject object that holds the result for the loop iteration the step is running.
  PropertyObjectInstance val = 2;
}

message Step_Set_CurrentLoopResultResponse {
}

message Step_Get_CurrentLoopResultRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_CurrentLoopResultResponse {
  // Specifies the PropertyObject object that holds the result for the loop iteration the step is running.
  PropertyObjectInstance returnValue = 1;
}

message Step_Set_EvalPrecondForInteractiveExecutionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies if TestStand evaluates the step precondition when you run the step interactively.
  EvalPrecondOptions val = 2;
}

message Step_Set_EvalPrecondForInteractiveExecutionResponse {
}

message Step_Get_EvalPrecondForInteractiveExecutionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_EvalPrecondForInteractiveExecutionResponse {
  // Specifies if TestStand evaluates the step precondition when you run the step interactively.
  EvalPrecondOptions returnValue = 1;
}

message Step_Set_IgnoreRTERequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Prevents the step from reporting a run-time error to the sequence.
  bool val = 2;
}

message Step_Set_IgnoreRTEResponse {
}

message Step_Get_IgnoreRTERequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_IgnoreRTEResponse {
  // Prevents the step from reporting a run-time error to the sequence.
  bool returnValue = 1;
}

message Step_Set_WindowActivationRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Determines if the TestStand application activates its window when the step completes.
  WindowActivationOptions val = 2;
}

message Step_Set_WindowActivationResponse {
}

message Step_Get_WindowActivationRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_WindowActivationResponse {
  // Determines if the TestStand application activates its window when the step completes.
  WindowActivationOptions returnValue = 1;
}

message Step_Set_RecordLoopIterationResultsRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies whether to add the step results to the sequence results list after each loop iteration.
  bool val = 2;
}

message Step_Set_RecordLoopIterationResultsResponse {
}

message Step_Get_RecordLoopIterationResultsRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_RecordLoopIterationResultsResponse {
  // Specifies whether to add the step results to the sequence results list after each loop iteration.
  bool returnValue = 1;
}

message Step_Set_UseMutexRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies that the step acquires a lock before it executes and releases the lock after it completes.
  bool val = 2;
}

message Step_Set_UseMutexResponse {
}

message Step_Get_UseMutexRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_UseMutexResponse {
  // Specifies that the step acquires a lock before it executes and releases the lock after it completes.
  bool returnValue = 1;
}

message Step_Set_MutexNameOrRefExprRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies which lock the step acquires and releases. This property is ignored if the Step.UseMutex property is False.
  string val = 2;
}

message Step_Set_MutexNameOrRefExprResponse {
}

message Step_Get_MutexNameOrRefExprRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_MutexNameOrRefExprResponse {
  // Specifies which lock the step acquires and releases. This property is ignored if the Step.UseMutex property is False.
  string returnValue = 1;
}

message Step_Set_BatchSyncOptionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the Batch Synchronization operation that the step enters before it executes and exits after it completes.
  BatchSynchronizationOptions val = 2;
}

message Step_Set_BatchSyncOptionResponse {
}

message Step_Get_BatchSyncOptionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_BatchSyncOptionResponse {
  // Specifies the Batch Synchronization operation that the step enters before it executes and exits after it completes.
  BatchSynchronizationOptions returnValue = 1;
}

message Step_Get_UniqueStepIdRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_UniqueStepIdResponse {
  // Returns an identification string unique among all steps TestStand has created or will create.
  // Note: Sequence editors you create with TestStand assign new unique IDs to steps that you duplicate in the editor. However, the value of Step.UniqueStepId is not unique if you duplicate a step using the TestStand API or if you copy a sequence file using the file system. It is incorrect programming practice to create a non-unique UniqueStepId using the API. Call Step.CreateNewUniqueStepId to ensure that a programmatically duplicated step has a unique ID. At run time, you can guard against mistakenly matching steps from duplicated files by Step.UniqueStepId. To do so, append the string representation of the value of Step.Sequence.SequenceFile.Id to the Step.UniqueStepId value before comparing it.
  string returnValue = 1;
}

message Step_Get_ModuleRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_ModuleResponse {
  // Returns a reference to the Module object related to the current step.
  ModuleInstance returnValue = 1;
}

message Step_Set_EditAsReadOnlyRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies if dialog boxes that edit the step launch in read-only mode. Implement code for such dialog boxes to obtain the value of this property and launch the Edit dialog box in read-only mode if it returns True. The sequence editor sets this property if the file that contains the step is read-only, if the user does not have sufficient privileges to edit the step, or if executions are currently running.
  bool val = 2;
}

message Step_Set_EditAsReadOnlyResponse {
}

message Step_Get_EditAsReadOnlyRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_EditAsReadOnlyResponse {
  // Specifies if dialog boxes that edit the step launch in read-only mode. Implement code for such dialog boxes to obtain the value of this property and launch the Edit dialog box in read-only mode if it returns True. The sequence editor sets this property if the file that contains the step is read-only, if the user does not have sufficient privileges to edit the step, or if executions are currently running.
  bool returnValue = 1;
}

message Step_Get_BlockLevelRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_BlockLevelResponse {
  // Specifies the number of blocks that enclose the step. Specifies 0 for top-level steps.
  int32 returnValue = 1;
}

message Step_Get_BlockLevelsUnmatchedRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_BlockLevelsUnmatchedResponse {
  // Specifies the number of unterminated blocks that enclose the step.
  int32 returnValue = 1;
}

message Step_Get_BlockFlagsRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_BlockFlagsResponse {
  // Specifies flags that indicate how the step affects the block structure of the sequence.
  BlockFlags returnValue = 1;
}

message Step_Get_BlockStartIndexRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_BlockStartIndexResponse {
  // Specifies the index of the step that opens the block this step closes. Specifies -1 if this step does not close a matched block.
  int32 returnValue = 1;
}

message Step_Get_BlockEndIndexRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_BlockEndIndexResponse {
  // Returns the index of the step that closes the block this step opens.  Returns -1 if this step does not open a matched block.
  int32 returnValue = 1;
}

message Step_Get_BlockPreviousIndexRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_BlockPreviousIndexResponse {
  // Specifies the index of the nearest previous step that starts a block, regardless of the level of the preceding block. Specifies -1 if this step does not also start a block or if no previous block exists.
  int32 returnValue = 1;
}

message Step_Get_BlockNextIndexRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_BlockNextIndexResponse {
  // Specifies the index of the nearest following step that starts a block, regardless of the level of the next block. Specifies -1 if this step does not start a block or if no subsequent block exists.
  int32 returnValue = 1;
}

message Step_Get_BlockParentIndexRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_BlockParentIndexResponse {
  // Specifies the index of the step that starts the enclosing block. Specifies -1 if this step does not reside in an enclosing block.
  int32 returnValue = 1;
}

message Step_Get_RequirementsRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_RequirementsResponse {
  // Returns the Requirements property for the step. The Links subproperty of the Requirements property is an array of string values that represents the product and unit requirements the step covers.
  PropertyObjectInstance returnValue = 1;
}

message Step_Set_SwitchExecEnabledRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies whether to perform a switching operation for the step. The step performs the switching operation the Step.SwitchExecOperation property specifies for the virtual device the Step.SwitchExecVirtualDevice property specifies.
  // Note: This feature is available only when you install NI Switch Executive software.
  bool val = 2;
}

message Step_Set_SwitchExecEnabledResponse {
}

message Step_Get_SwitchExecEnabledRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_SwitchExecEnabledResponse {
  // Specifies whether to perform a switching operation for the step. The step performs the switching operation the Step.SwitchExecOperation property specifies for the virtual device the Step.SwitchExecVirtualDevice property specifies.
  // Note: This feature is available only when you install NI Switch Executive software.
  bool returnValue = 1;
}

message Step_Set_SwitchExecVirtualDeviceRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies an expression TestStand evaluates at run time to determine the virtual device name on which to perform the switching operation.
  string val = 2;
}

message Step_Set_SwitchExecVirtualDeviceResponse {
}

message Step_Get_SwitchExecVirtualDeviceRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_SwitchExecVirtualDeviceResponse {
  // Specifies an expression TestStand evaluates at run time to determine the virtual device name on which to perform the switching operation.
  string returnValue = 1;
}

message Step_Set_SwitchExecOperationRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies whether to connect or disconnect the routes the Step.SwitchExecRoutesToConnect and Step.SwitchExecRoutesToDisconnect properties specify, or disconnect all previously connected routes for a virtual device.
  // Note: This operation returns as soon as the instrument is ready for another operation, which might be before or after the switches involved settle. Enable the Step.SwitchExecWaitForDebounce property if you want to wait until all switches have debounced.
  SwitchExecOperations val = 2;
}

message Step_Set_SwitchExecOperationResponse {
}

message Step_Get_SwitchExecOperationRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_SwitchExecOperationResponse {
  // Specifies whether to connect or disconnect the routes the Step.SwitchExecRoutesToConnect and Step.SwitchExecRoutesToDisconnect properties specify, or disconnect all previously connected routes for a virtual device.
  // Note: This operation returns as soon as the instrument is ready for another operation, which might be before or after the switches involved settle. Enable the Step.SwitchExecWaitForDebounce property if you want to wait until all switches have debounced.
  SwitchExecOperations returnValue = 1;
}

message Step_Set_SwitchExecRoutesToConnectRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies an expression TestStand evaluates at run time to determine the routes to connect when the value of the Step.SwitchExecOperation property is Connect or ConnectDisconnect.
  // Note: The expression must be a valid route specification string the NI Switch Executive configuration defines for the virtual device name the  Step.SwitchExecVirtualDevice property specifies. The string can be a combination of route group alias names, route names, and physical route paths. You can use the SwitchFindRoute expression function to dynamically determine a physical route path at run time.
  string val = 2;
}

message Step_Set_SwitchExecRoutesToConnectResponse {
}

message Step_Get_SwitchExecRoutesToConnectRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_SwitchExecRoutesToConnectResponse {
  // Specifies an expression TestStand evaluates at run time to determine the routes to connect when the value of the Step.SwitchExecOperation property is Connect or ConnectDisconnect.
  // Note: The expression must be a valid route specification string the NI Switch Executive configuration defines for the virtual device name the  Step.SwitchExecVirtualDevice property specifies. The string can be a combination of route group alias names, route names, and physical route paths. You can use the SwitchFindRoute expression function to dynamically determine a physical route path at run time.
  string returnValue = 1;
}

message Step_Set_SwitchExecRoutesToDisconnectRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies an expression TestStand evaluates at run time to determine the routes to disconnect when the value of the Step.SwitchExecOperation property is Disconnect or ConnectDisconnect.
  // Note: The expression must be a valid route specification string the NI Switch Executive configuration defines for the virtual device name the Step.SwitchExecVirtualDevice property specifies. The string can be a combination of route group alias names, route names, and physical route paths. You can use the SwitchFindRoute expression function to dynamically determine a physical route path at run time.
  string val = 2;
}

message Step_Set_SwitchExecRoutesToDisconnectResponse {
}

message Step_Get_SwitchExecRoutesToDisconnectRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_SwitchExecRoutesToDisconnectResponse {
  // Specifies an expression TestStand evaluates at run time to determine the routes to disconnect when the value of the Step.SwitchExecOperation property is Disconnect or ConnectDisconnect.
  // Note: The expression must be a valid route specification string the NI Switch Executive configuration defines for the virtual device name the Step.SwitchExecVirtualDevice property specifies. The string can be a combination of route group alias names, route names, and physical route paths. You can use the SwitchFindRoute expression function to dynamically determine a physical route path at run time.
  string returnValue = 1;
}

message Step_Set_SwitchExecMulticonnectModeRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the behavior when more than one connection operation occurs on a specific route.
  // Note: If the value of this property is Multiconnect, a route can exist longer if another step specifies a lifetime for the same route.
  SwitchExecMulticonnectModes val = 2;
}

message Step_Set_SwitchExecMulticonnectModeResponse {
}

message Step_Get_SwitchExecMulticonnectModeRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_SwitchExecMulticonnectModeResponse {
  // Specifies the behavior when more than one connection operation occurs on a specific route.
  // Note: If the value of this property is Multiconnect, a route can exist longer if another step specifies a lifetime for the same route.
  SwitchExecMulticonnectModes returnValue = 1;
}

message Step_Set_SwitchExecOperationOrderRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies whether the Disconnect operation occurs before or after the Connect operation when the value of the Step.SwitchExecOperation property is ConnectDisconnect.
  SwitchExecOperationOrders val = 2;
}

message Step_Set_SwitchExecOperationOrderResponse {
}

message Step_Get_SwitchExecOperationOrderRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_SwitchExecOperationOrderResponse {
  // Specifies whether the Disconnect operation occurs before or after the Connect operation when the value of the Step.SwitchExecOperation property is ConnectDisconnect.
  SwitchExecOperationOrders returnValue = 1;
}

message Step_Set_SwitchExecConnectionLifetimeRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies the lifetime that TestStand applies to routes when the value of the Step.SwitchExecOperation property is Connect or ConnectDisconnect. You can specify whether you want the route to exist until manually disconnected later or until the step, sequence, thread, or execution completes.
  // Note: If the value of the Step.SwitchExecMulticonnectMode property is Multiconnect, a route can exist longer if another step specifies a lifetime for the same route. Selecting a lifetime other than Manual guarantees that the route stays connected as long as the step, sequence, thread, or execution in which you connect is executing. If you manually disconnect a previously connected route using a non-manual lifetime setting, TestStand releases the reference to the route for the last step that performed a connect action for the route.
  SwitchExecLifetimes val = 2;
}

message Step_Set_SwitchExecConnectionLifetimeResponse {
}

message Step_Get_SwitchExecConnectionLifetimeRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_SwitchExecConnectionLifetimeResponse {
  // Specifies the lifetime that TestStand applies to routes when the value of the Step.SwitchExecOperation property is Connect or ConnectDisconnect. You can specify whether you want the route to exist until manually disconnected later or until the step, sequence, thread, or execution completes.
  // Note: If the value of the Step.SwitchExecMulticonnectMode property is Multiconnect, a route can exist longer if another step specifies a lifetime for the same route. Selecting a lifetime other than Manual guarantees that the route stays connected as long as the step, sequence, thread, or execution in which you connect is executing. If you manually disconnect a previously connected route using a non-manual lifetime setting, TestStand releases the reference to the route for the last step that performed a connect action for the route.
  SwitchExecLifetimes returnValue = 1;
}

message Step_Set_SwitchExecWaitForDebounceRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies if the operation the Step.SwitchExecOperation property specifies waits for all switches to debounce before returning to TestStand.
  // Note: The wait for debounce occurs after both the Connect and Disconnect operations are complete.
  bool val = 2;
}

message Step_Set_SwitchExecWaitForDebounceResponse {
}

message Step_Get_SwitchExecWaitForDebounceRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_SwitchExecWaitForDebounceResponse {
  // Specifies if the operation the Step.SwitchExecOperation property specifies waits for all switches to debounce before returning to TestStand.
  // Note: The wait for debounce occurs after both the Connect and Disconnect operations are complete.
  bool returnValue = 1;
}

message Step_Get_AdditionalResultsRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_AdditionalResultsResponse {
  // Accesses the parameter additional results and custom additional results of a step.
  StepAdditionalResultsInstance returnValue = 1;
}

message Step_Get_AdditionalResultsHintsRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_AdditionalResultsHintsResponse {
  // Returns a list of additional result hints associated with a step instance. Use this property when step types support multiple operations and you want to specify different additional result hints for different step operations.
  AdditionalResultsInstance returnValue = 1;
}

message Step_Set_ResultRecordingOptionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // Specifies whether to record the result properties of the step.
  ResultRecordingOptions val = 2;
}

message Step_Set_ResultRecordingOptionResponse {
}

message Step_Get_ResultRecordingOptionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_ResultRecordingOptionResponse {
  // Specifies whether to record the result properties of the step.
  ResultRecordingOptions returnValue = 1;
}

message Step_Set_CancelCurrentModuleExecutionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
  // When this property is True, TestStand does not call the code module for the step.
  bool val = 2;
}

message Step_Set_CancelCurrentModuleExecutionResponse {
}

message Step_Get_CancelCurrentModuleExecutionRequest {
  // The id of the Step object.
  StepInstance instance = 1;
}

message Step_Get_CancelCurrentModuleExecutionResponse {
  // When this property is True, TestStand does not call the code module for the step.
  bool returnValue = 1;
}

// StepType
//
// Objects of the StepType class represent step types in TestStand files. Every step is an instance of a step type. You create new step types with the Engine.NewStepType method.
//
service StepType {
  // Method: AsPropertyObject
  //
  // Returns the underlying PropertyObject that represents the StepType object. Use the PropertyObject to modify, add, or remove custom properties of the object.
  //
  // StepType_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(StepType_AsPropertyObjectRequest) returns (StepType_AsPropertyObjectResponse);
  
  
  // Method: SpecifyModule
  //
  // Launches the Specify Module dialog box for the step type, if one exists.
  //
  // Check the CanSpecifyModule property to verify that you can call this method.
  // The current version of TestStand does not support all SpecifyModuleOptions options for all adapters, as the following list indicates:
  // * LabVIEW Adapter—Supports only SpecMod_ReadOnly.    * LabWindows/CVI Adapter—Supports all options.    * C/C++ DLL Adapter—Supports all options.    * ActiveX/COM Adapter—Supports only SpecMod_ReadOnly.    * Sequence Adapter—Supports all options.    * HTBasic Adapter—Supports only SpecMod_ReadOnly.
  //
  // StepType_SpecifyModuleRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - specModOptions: int32 - Specifies one or more SpecifyModuleOptions to modify the behavior of the dialog box.
  //
  // StepType_SpecifyModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the Specify Module dialog box modifies the step type. 
  //
  rpc SpecifyModule(StepType_SpecifyModuleRequest) returns (StepType_SpecifyModuleResponse);
  
  
  // Method: GetDefaultName
  //
  // Returns the default step name to use when creating new steps of this type.
  //
  // StepType_GetDefaultNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_GetDefaultNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetDefaultName(StepType_GetDefaultNameRequest) returns (StepType_GetDefaultNameResponse);
  
  
  // Method: CreateCombinedStepType
  //
  // Combines two step types to create a new step type.
  //
  // If both step types have the same properties but have different values, the values associated with the step type you invoke this method upon take precedence.
  //
  // StepType_CreateCombinedStepTypeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - combineWith: StepTypeInstance - Specifies the step type to combine with this one.
  //
  // StepType_CreateCombinedStepTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepTypeInstance - Returns the new combined step type. 
  //
  rpc CreateCombinedStepType(StepType_CreateCombinedStepTypeRequest) returns (StepType_CreateCombinedStepTypeResponse);
  
  
  // Method: GetSubstep
  //
  // Returns the specified substep.
  //
  // StepType_GetSubstepRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - substepIndex: int32 - Specifies the zero-based index of the substep.
  //
  // StepType_GetSubstepResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepInstance - The return type of the Step object.
  //
  rpc GetSubstep(StepType_GetSubstepRequest) returns (StepType_GetSubstepResponse);
  
  
  // Method: GetDimmablePropertyDisplayName
  //
  // Obtains the display name for the key name.
  //
  // The display name depends on localization.
  //
  // StepType_GetDimmablePropertyDisplayNameRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - propertyKeyName: string - Specifies a property key name.
  //
  // StepType_GetDimmablePropertyDisplayNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetDimmablePropertyDisplayName(StepType_GetDimmablePropertyDisplayNameRequest) returns (StepType_GetDimmablePropertyDisplayNameResponse);
  
  
  // Method: IsPropertyDimmed
  //
  // Indicates whether the control for the specified property is dimmed in the Step Properties dialog box.
  //
  // StepType_IsPropertyDimmedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - propertyKeyName: string - Specifies the corresponding property key name.
  //
  // StepType_IsPropertyDimmedResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc IsPropertyDimmed(StepType_IsPropertyDimmedRequest) returns (StepType_IsPropertyDimmedResponse);
  
  
  // Method: DimProperty
  //
  // Specifies if the control(s) for the specified property are disabled in the Step Properties dialog box.
  //
  // StepType_DimPropertyRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - propertyKeyName: string - Specifies the corresponding property key name.
  //    - newValue: bool - If this parameter is True, the control for the corresponding property is disabled.
  //
  // StepType_DimPropertyResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc DimProperty(StepType_DimPropertyRequest) returns (StepType_DimPropertyResponse);
  
  
  // Method: AddSubstep
  //
  // Adds a new substep to the step type.
  //
  // Use substeps to define standard actions, other than calling the step module, TestStand performs for all instances of the step type. You can specify one of the following four categories for a step type:
  // * Pre-Step substeps—TestStand calls the Pre-Step substeps before calling the step module. You can implement a Pre-Step substep to retrieve and store measurement configuration parameters into custom step properties the step module can access.    * Post-Step substeps—TestStand calls the Post-Step substeps after calling the step module. You can implement a Post-Step substep to compare the values the step module stores in custom step properties against limit values the Edit substep stores in other custom step properties.    * Edit substeps—An Edit substep launches a dialog box in which you can edit the values of custom step properties. For example, an Edit substep can launch a dialog box in which you specify the high and low limits for a test. The Edit substep can then store the high and low limit values as step properties. Dialog boxes that the specified Edit substep code module launch must be modal. For all dialog boxes except the Microsoft Foundation Classes dialog boxes, use the Engine.NotifyStartOfModalDialogEx and Engine.NotifyEndOfModalDialog methods of the TestStand API. Refer to the examples in the <TestStand Public>\Examples\Fundamentals\Launching a Modal Dialog directory for more information about how to use modal dialog boxes.    * Custom substeps—TestStand does not call Custom substeps. You can use the TestStand API to invoke a Custom substep from a test module, user interface, or other code module.
  //
  // StepType_AddSubstepRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - newSubstep: StepInstance - Specifies the new step to be added as a substep for the current step type. Create a new step to pass for this parameter by calling the Engine.NewStep method and specifying Substep, EditSubstep, PreSubstep, or PostSubstep as the value for the stepTypeName parameter of the Engine.NewStep method.
  //
  // StepType_AddSubstepResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc AddSubstep(StepType_AddSubstepRequest) returns (StepType_AddSubstepResponse);
  
  
  // Method: RemoveSubstep
  //
  // Removes the substep specified for the zero-based index passed as an input parameter.
  //
  // StepType_RemoveSubstepRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - substepIndex: int32 - Specifies the zero-based index of the substep to remove.
  //
  // StepType_RemoveSubstepResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc RemoveSubstep(StepType_RemoveSubstepRequest) returns (StepType_RemoveSubstepResponse);
  
  
  // Method: SwapSubsteps
  //
  // Swaps the position of the substeps located in the indexes passed as input parameters.
  //
  // To swap the position of the substeps, both substeps must be of the same type. The following types are available: Pre-, Post-, Edit, and Custom. The order of the substeps in the list defines the order in which the Pre- and Post-Step substeps execute and the order in which the menu items for the Edit substep appear in the context menu of the Sequence view in the Sequence File window.
  //
  // StepType_SwapSubstepsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - Index1: int32 - Specifies the zero-based index related to one of the substeps to be swapped.
  //    - index2: int32 - Specifies the zero-based index related to one of the substeps to be swapped.
  //
  // StepType_SwapSubstepsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SwapSubsteps(StepType_SwapSubstepsRequest) returns (StepType_SwapSubstepsResponse);
  
  
  // Method: ChangeDesignatedAdapter
  //
  // Specifies the module adapter assigned to the step type.
  //
  // To obtain the current designated adapter, use the StepType.DesignatedAdapter property.
  //
  // StepType_ChangeDesignatedAdapterRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - adapterName: string - Corresponds to the key name of the adapter assigned to the specific step type. If the Step Type does not require a module adapter, set this parameter to an empty string.
  //
  // StepType_ChangeDesignatedAdapterResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ChangeDesignatedAdapter(StepType_ChangeDesignatedAdapterRequest) returns (StepType_ChangeDesignatedAdapterResponse);
  
  

  // Property: Name
  //
  // Specifies the name of the step type.
  //
  // Note: TestStand does not validate step type names you create programmatically for invalid characters, such as spaces, which can result in errors when you use them. Use the TypeUsageList.ValidateNewTypeName method to validate step type names. TestStand require step type names to be strings that contain only letters, numbers, and underscores. Step type names cannot contain spaces, start with a number, or be empty. Additionally, the step type name cannot duplicate step type names already in memory.
  //
  // StepType_Set_NameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies the name of the step type. 
  //
  // StepType_Set_NameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_NameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_NameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the name of the step type. 
  //
  rpc Set_Name(StepType_Set_NameRequest) returns (StepType_Set_NameResponse);
  rpc Get_Name(StepType_Get_NameRequest) returns (StepType_Get_NameResponse);
  
  
  // Property: CanSpecifyModule
  //
  // Returns a value that indicates whether the adapter for the default module of the step type supports the StepType.SpecifyModule method.
  //
  // StepType_Get_CanSpecifyModuleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_CanSpecifyModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the adapter for the default module of the step type supports the StepType.SpecifyModule method. 
  //
  rpc Get_CanSpecifyModule(StepType_Get_CanSpecifyModuleRequest) returns (StepType_Get_CanSpecifyModuleResponse);
  
  
  // Property: MenuIcon
  //
  // Returns the icon TestStand displays in the context menu for new steps.
  //
  // StepType_Get_MenuIconRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_MenuIconResponse - The response message from the server. It provides the return value.
  //    - returnValue: IPictureDispInstance - Returns the icon TestStand displays in the context menu for new steps. 
  //
  rpc Get_MenuIcon(StepType_Get_MenuIconRequest) returns (StepType_Get_MenuIconResponse);
  
  
  // Property: MenuIconIndex
  //
  // Returns the icon index in the small image list of the engine to display in menus for creating new steps of this type.
  //
  // StepType_Get_MenuIconIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_MenuIconIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the icon index in the small image list of the engine to display in menus for creating new steps of this type. 
  //
  rpc Get_MenuIconIndex(StepType_Get_MenuIconIndexRequest) returns (StepType_Get_MenuIconIndexResponse);
  
  
  // Property: NumSubsteps
  //
  // Returns the number of substeps for this step type.
  //
  // StepType_Get_NumSubstepsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_NumSubstepsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of substeps for this step type. 
  //
  rpc Get_NumSubsteps(StepType_Get_NumSubstepsRequest) returns (StepType_Get_NumSubstepsResponse);
  
  
  // Property: IconName
  //
  // Specifies the icon filename assigned to the step type.
  //
  // The engine maintains a list of images that contain all the icons located in the <TestStand>\Components\Icons and <TestStand Public>\Components\Icons directories and images you add using the Engine.AddImage method.
  // TestStand displays the icon next to the names of the steps that use the step type. If you assign an empty string to this property or assign the name of an icon that is not part of the engine images list, TestStand displays the icon of the module adapter the step uses next to the name of the step.
  //
  // StepType_Set_IconNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies the icon filename assigned to the step type. 
  //
  // StepType_Set_IconNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_IconNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_IconNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the icon filename assigned to the step type. 
  //
  rpc Set_IconName(StepType_Set_IconNameRequest) returns (StepType_Set_IconNameResponse);
  rpc Get_IconName(StepType_Get_IconNameRequest) returns (StepType_Get_IconNameResponse);
  
  
  // Property: DefaultNameExpr
  //
  // Specifies a string expression TestStand evaluates and uses as the name of the step when you create a new step with the step type.
  //
  // If a step with the same name already exists in the sequence and the Make step names unique when inserting steps sequence editor option is enabled, TestStand appends an underscore followed by a number to the step name to make it unique.
  // If you want to store the name in a string resource file, use the Restr expression function to retrieve the name from the file. Storing the name in a string resource file is useful when you want to display the name in different languages.
  //
  // StepType_Set_DefaultNameExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies a string expression TestStand evaluates and uses as the name of the step when you create a new step with the step type. 
  //
  // StepType_Set_DefaultNameExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_DefaultNameExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_DefaultNameExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies a string expression TestStand evaluates and uses as the name of the step when you create a new step with the step type. 
  //
  rpc Set_DefaultNameExpr(StepType_Set_DefaultNameExprRequest) returns (StepType_Set_DefaultNameExprResponse);
  rpc Get_DefaultNameExpr(StepType_Get_DefaultNameExprRequest) returns (StepType_Get_DefaultNameExprResponse);
  
  
  // Property: DescriptionExpr
  //
  // Specifies a string expression TestStand evaluates and uses as the contents of the Description field for a step of the step type.
  //
  // If you include the %ModuleDescription macro in a string you surround with double quotes, TestStand replaces the %ModuleDescription macro text with text the module adapter provides, which describes the code module the step uses.
  //
  // StepType_Set_DescriptionExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies a string expression TestStand evaluates and uses as the contents of the Description field for a step of the step type. 
  //
  // StepType_Set_DescriptionExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_DescriptionExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_DescriptionExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies a string expression TestStand evaluates and uses as the contents of the Description field for a step of the step type. 
  //
  rpc Set_DescriptionExpr(StepType_Set_DescriptionExprRequest) returns (StepType_Set_DescriptionExprResponse);
  rpc Get_DescriptionExpr(StepType_Get_DescriptionExprRequest) returns (StepType_Get_DescriptionExprResponse);
  
  
  // Property: Precondition
  //
  // Specifies an expression that must evaluate to True or be empty to execute a step of the step type.
  //
  // StepType_Set_PreconditionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies an expression that must evaluate to True or be empty to execute a step of the step type. 
  //
  // StepType_Set_PreconditionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_PreconditionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_PreconditionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies an expression that must evaluate to True or be empty to execute a step of the step type. 
  //
  rpc Set_Precondition(StepType_Set_PreconditionRequest) returns (StepType_Set_PreconditionResponse);
  rpc Get_Precondition(StepType_Get_PreconditionRequest) returns (StepType_Get_PreconditionResponse);
  
  
  // Property: MenuItemNameExpr
  //
  // Specifies an expression for the step type name that appears in the Insert Step submenu.
  //
  // This property corresponds to the Item Name Expression control on the Menu tab of the Step Type Properties dialog box. TestStand uses this expression for the display name of the step type in the Insertion Palette or the Insert Step submenu of the Steps pane context menu.
  // Note: If you specify a literal string in this expression control, you must enclose it in double quotation marks. If you want to use a name from a string resource file, use the Restr expression function to retrieve the name from the file.
  //
  // StepType_Set_MenuItemNameExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies an expression for the step type name that appears in the Insert Step submenu. 
  //
  // StepType_Set_MenuItemNameExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_MenuItemNameExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_MenuItemNameExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies an expression for the step type name that appears in the Insert Step submenu. 
  //
  rpc Set_MenuItemNameExpr(StepType_Set_MenuItemNameExprRequest) returns (StepType_Set_MenuItemNameExprResponse);
  rpc Get_MenuItemNameExpr(StepType_Get_MenuItemNameExprRequest) returns (StepType_Get_MenuItemNameExprResponse);
  
  
  // Property: MenuGroupName
  //
  // Note: This property is obsolete.
  //
  // Specifies the step type menu group to which the step type belongs.
  // This property corresponds to the default group name of the step type in the Groups and Step Types control of the Step Type Menu Editor dialog box. Instead of using this property, use the Step Type Menu Editor dialog box and save the step type in a type palette file. TestStand uses this value for the initial group for a step type if no Step Type menu data for the step type exists in TestExec.ini or in a type palette file. TestStand saves Step Type menu data with type palette files automatically and also saves the current configuration in TestExec.ini. When you redistribute a type palette file, TestStand merges the Step Type menu data with the current Step Type menu data stored in the TestExec.ini file of the station. Sequence files do not store Step Type menu data. However, because TestStand stores data for step types stored in sequence files in the TestExec.ini of the station on which the step types have been loaded, you can configure the location of those step types.
  //
  // StepType_Set_MenuGroupNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Note: This property is obsolete. 
  //
  // StepType_Set_MenuGroupNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_MenuGroupNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_MenuGroupNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Note: This property is obsolete. 
  //
  rpc Set_MenuGroupName(StepType_Set_MenuGroupNameRequest) returns (StepType_Set_MenuGroupNameResponse);
  rpc Get_MenuGroupName(StepType_Get_MenuGroupNameRequest) returns (StepType_Get_MenuGroupNameResponse);
  
  
  // Property: ModuleLoadOption
  //
  // Specifies the option that determines when TestStand loads the code module for the steps of this type.
  //
  // The SequenceFile.ModuleLoadOption property takes precedence over this property, unless the value of the SequenceFile.ModuleLoadOption property is LoadOption_UseStepLoadOption.
  //
  // StepType_Set_ModuleLoadOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: ModuleLoadOptions - Specifies the option that determines when TestStand loads the code module for the steps of this type. 
  //
  // StepType_Set_ModuleLoadOptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_ModuleLoadOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_ModuleLoadOptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: ModuleLoadOptions - Specifies the option that determines when TestStand loads the code module for the steps of this type. 
  //
  rpc Set_ModuleLoadOption(StepType_Set_ModuleLoadOptionRequest) returns (StepType_Set_ModuleLoadOptionResponse);
  rpc Get_ModuleLoadOption(StepType_Get_ModuleLoadOptionRequest) returns (StepType_Get_ModuleLoadOptionResponse);
  
  
  // Property: ModuleUnloadOption
  //
  // Specifies the option that determines when TestStand unloads the code module for the steps of this type.
  //
  // The SequenceFile.ModuleUnloadOption property takes precedence over this property unless the value of the SequenceFile.ModuleUnloadOption property is UnloadOption_UseStepUnloadOption.
  //
  // StepType_Set_ModuleUnloadOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: ModuleUnloadOptions - Specifies the option that determines when TestStand unloads the code module for the steps of this type. 
  //
  // StepType_Set_ModuleUnloadOptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_ModuleUnloadOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_ModuleUnloadOptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: ModuleUnloadOptions - Specifies the option that determines when TestStand unloads the code module for the steps of this type. 
  //
  rpc Set_ModuleUnloadOption(StepType_Set_ModuleUnloadOptionRequest) returns (StepType_Set_ModuleUnloadOptionResponse);
  rpc Get_ModuleUnloadOption(StepType_Get_ModuleUnloadOptionRequest) returns (StepType_Get_ModuleUnloadOptionResponse);
  
  
  // Property: RunMode
  //
  // Specifies the run mode of the step.
  //
  // This property is the run mode TestStand stores for steps of this type in the sequence file.
  //
  // StepType_Set_RunModeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies the run mode of the step. 
  //
  // StepType_Set_RunModeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_RunModeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_RunModeResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the run mode of the step. 
  //
  rpc Set_RunMode(StepType_Set_RunModeRequest) returns (StepType_Set_RunModeResponse);
  rpc Get_RunMode(StepType_Get_RunModeRequest) returns (StepType_Get_RunModeResponse);
  
  
  // Property: EvalPrecondForInteractiveExecution
  //
  // Specifies whether TestStand evaluates the step precondition when you run the step interactively.
  //
  // StepType_Set_EvalPrecondForInteractiveExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: EvalPrecondOptions - Specifies whether TestStand evaluates the step precondition when you run the step interactively. 
  //
  // StepType_Set_EvalPrecondForInteractiveExecutionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_EvalPrecondForInteractiveExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_EvalPrecondForInteractiveExecutionResponse - The response message from the server. It provides the return value.
  //    - returnValue: EvalPrecondOptions - Specifies whether TestStand evaluates the step precondition when you run the step interactively. 
  //
  rpc Set_EvalPrecondForInteractiveExecution(StepType_Set_EvalPrecondForInteractiveExecutionRequest) returns (StepType_Set_EvalPrecondForInteractiveExecutionResponse);
  rpc Get_EvalPrecondForInteractiveExecution(StepType_Get_EvalPrecondForInteractiveExecutionRequest) returns (StepType_Get_EvalPrecondForInteractiveExecutionResponse);
  
  
  // Property: WindowActivation
  //
  // Specifies whether the TestStand application activates its window when the step completes.
  //
  // StepType_Set_WindowActivationRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: WindowActivationOptions - Specifies whether the TestStand application activates its window when the step completes. 
  //
  // StepType_Set_WindowActivationResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_WindowActivationRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_WindowActivationResponse - The response message from the server. It provides the return value.
  //    - returnValue: WindowActivationOptions - Specifies whether the TestStand application activates its window when the step completes. 
  //
  rpc Set_WindowActivation(StepType_Set_WindowActivationRequest) returns (StepType_Set_WindowActivationResponse);
  rpc Get_WindowActivation(StepType_Get_WindowActivationRequest) returns (StepType_Get_WindowActivationResponse);
  
  
  // Property: RecordResult
  //
  // Note: This property is obsolete. Use the StepType.ResultRecordingOption property instead.
  //
  // Specifies whether to record the Result properties of the step. If you set this property to True, TestStand records the result of the step unless the Engine.DisableResults property is True or the Sequence.DisableResults property is True.
  // You can override this setting with the StationOptions.DisableResults and Sequence.DisableResults properties.
  // For steps that loop, use the StepType.RecordLoopIterationResults property to specify whether to add step results to the sequence result list after each loop iteration.
  //
  // StepType_Set_RecordResultRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: bool - Note: This property is obsolete. Use the StepType.ResultRecordingOption property instead. 
  //
  // StepType_Set_RecordResultResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_RecordResultRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_RecordResultResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the StepType.ResultRecordingOption property instead. 
  //
  rpc Set_RecordResult(StepType_Set_RecordResultRequest) returns (StepType_Set_RecordResultResponse);
  rpc Get_RecordResult(StepType_Get_RecordResultRequest) returns (StepType_Get_RecordResultResponse);
  
  
  // Property: StepFailCausesSequenceFail
  //
  // Specifies whether failure of the step causes the sequence to fail.
  //
  // If this property is True and the step fails, TestStand sets the internal status property of the sequence that contains the step to Failure. If the Sequence.FailureAction property is True for the sequence, the execution jumps to the Cleanup step group of the sequence.
  //
  // StepType_Set_StepFailCausesSequenceFailRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: bool - Specifies whether failure of the step causes the sequence to fail. 
  //
  // StepType_Set_StepFailCausesSequenceFailResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_StepFailCausesSequenceFailRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_StepFailCausesSequenceFailResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether failure of the step causes the sequence to fail. 
  //
  rpc Set_StepFailCausesSequenceFail(StepType_Set_StepFailCausesSequenceFailRequest) returns (StepType_Set_StepFailCausesSequenceFailResponse);
  rpc Get_StepFailCausesSequenceFail(StepType_Get_StepFailCausesSequenceFailRequest) returns (StepType_Get_StepFailCausesSequenceFailResponse);
  
  
  // Property: IgnoreRTE
  //
  // Specifies to prevent the step from reporting a run-time error to the sequence.
  //
  // When a step causes a run-time error, the step stops executing and TestStand sets the status of the step to Error. If you set this property to False, TestStand also sets the internal status of the sequence to Error, and execution branches to the Cleanup step group for the sequence.
  // If you set this property to True, TestStand does not set the internal status of the sequence to Error. Instead, TestStand resets the Error.Occurred property of the step to False and execution continues normally with the next step.
  // The value for the Result.Status property remains set to Error for the step.
  //
  // StepType_Set_IgnoreRTERequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: bool - Specifies to prevent the step from reporting a run-time error to the sequence. 
  //
  // StepType_Set_IgnoreRTEResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_IgnoreRTERequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_IgnoreRTEResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies to prevent the step from reporting a run-time error to the sequence. 
  //
  rpc Set_IgnoreRTE(StepType_Set_IgnoreRTERequest) returns (StepType_Set_IgnoreRTEResponse);
  rpc Get_IgnoreRTE(StepType_Get_IgnoreRTERequest) returns (StepType_Get_IgnoreRTEResponse);
  
  
  // Property: PassAction
  //
  // Specifies the type of post action you want to occur if the step passes.
  //
  // Assign a PostActionValues string constant to the property to specify the type of post action to perform.
  //
  // StepType_Set_PassActionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies the type of post action you want to occur if the step passes. 
  //
  // StepType_Set_PassActionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_PassActionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_PassActionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the type of post action you want to occur if the step passes. 
  //
  rpc Set_PassAction(StepType_Set_PassActionRequest) returns (StepType_Set_PassActionResponse);
  rpc Get_PassAction(StepType_Get_PassActionRequest) returns (StepType_Get_PassActionResponse);
  
  
  // Property: PassActionTargetByExpr
  //
  // Specifies the target for the post action the StepType.PassAction property specifies.
  //
  // * If the StepType.PassAction property is PostAction_GotoStep, the target is the name of the step.    * If the StepType.PassAction property is PostAction_CallCallback, the target is the name of the callback sequence.    * For all other types of post actions, the target property is not used.
  // This value is an expression. You can set the value with the name of the property that stores the target or with a string constant. A string constant is the name of the target enclosed in double quotation marks.
  //
  // StepType_Set_PassActionTargetByExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies the target for the post action the StepType.PassAction property specifies. 
  //
  // StepType_Set_PassActionTargetByExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_PassActionTargetByExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_PassActionTargetByExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the target for the post action the StepType.PassAction property specifies. 
  //
  rpc Set_PassActionTargetByExpr(StepType_Set_PassActionTargetByExprRequest) returns (StepType_Set_PassActionTargetByExprResponse);
  rpc Get_PassActionTargetByExpr(StepType_Get_PassActionTargetByExprRequest) returns (StepType_Get_PassActionTargetByExprResponse);
  
  
  // Property: FailAction
  //
  // Specifies the type of post action you want to occur if the step fails.
  //
  // Assign a PostActionValues string constant to the property to specify the type of post action to perform.
  //
  // StepType_Set_FailActionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies the type of post action you want to occur if the step fails. 
  //
  // StepType_Set_FailActionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_FailActionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_FailActionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the type of post action you want to occur if the step fails. 
  //
  rpc Set_FailAction(StepType_Set_FailActionRequest) returns (StepType_Set_FailActionResponse);
  rpc Get_FailAction(StepType_Get_FailActionRequest) returns (StepType_Get_FailActionResponse);
  
  
  // Property: FailActionTargetByExpr
  //
  // Specifies the target for the post action the StepType.FailAction property specifies.
  //
  // * If the StepType.FailAction is PostAction_GotoStep, the target is the name of the step.    * If the StepType.FailAction is PostAction_CallCallback, the target is the name of the callback sequence.    * For all other types of post actions, the target property is not used.
  // This value is an expression. You can set the value with the name of the property that stores the name of the target or with a string constant. A string constant is the name of the target enclosed in double quotation marks.
  //
  // StepType_Set_FailActionTargetByExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies the target for the post action the StepType.FailAction property specifies. 
  //
  // StepType_Set_FailActionTargetByExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_FailActionTargetByExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_FailActionTargetByExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the target for the post action the StepType.FailAction property specifies. 
  //
  rpc Set_FailActionTargetByExpr(StepType_Set_FailActionTargetByExprRequest) returns (StepType_Set_FailActionTargetByExprResponse);
  rpc Get_FailActionTargetByExpr(StepType_Get_FailActionTargetByExprRequest) returns (StepType_Get_FailActionTargetByExprResponse);
  
  
  // Property: CustomTrueAction
  //
  // Specifies the type of action you want to occur when the custom post action expression evaluates to True.
  //
  // Assign a PostActionValues string constant to the property to specify the type of post action to perform.
  //
  // StepType_Set_CustomTrueActionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies the type of action you want to occur when the custom post action expression evaluates to True. 
  //
  // StepType_Set_CustomTrueActionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_CustomTrueActionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_CustomTrueActionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the type of action you want to occur when the custom post action expression evaluates to True. 
  //
  rpc Set_CustomTrueAction(StepType_Set_CustomTrueActionRequest) returns (StepType_Set_CustomTrueActionResponse);
  rpc Get_CustomTrueAction(StepType_Get_CustomTrueActionRequest) returns (StepType_Get_CustomTrueActionResponse);
  
  
  // Property: CustomTrueActionTargetByExpr
  //
  // Specifies the target for the post action the StepType.CustomTrueAction property specifies.
  //
  // * If the StepType.CustomTrueAction property is PostAction_GotoStep, the target is the name of the step or the ID of the step. If you specify the target by name, the target step must reside in the same step group. If you specify the target by ID, the target step can reside in any step group in the sequence.    * If the StepType.CustomTrueAction is PostAction_CallCallback, the target is the name of the callback sequence.    * For all other types of post actions, the target property is not used.
  // This value is an expression. You can set the value with the name of the property that stores the name of the target or with a string constant. A string constant is the name of the target enclosed in double quotation marks.
  //
  // StepType_Set_CustomTrueActionTargetByExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies the target for the post action the StepType.CustomTrueAction property specifies. 
  //
  // StepType_Set_CustomTrueActionTargetByExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_CustomTrueActionTargetByExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_CustomTrueActionTargetByExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the target for the post action the StepType.CustomTrueAction property specifies. 
  //
  rpc Set_CustomTrueActionTargetByExpr(StepType_Set_CustomTrueActionTargetByExprRequest) returns (StepType_Set_CustomTrueActionTargetByExprResponse);
  rpc Get_CustomTrueActionTargetByExpr(StepType_Get_CustomTrueActionTargetByExprRequest) returns (StepType_Get_CustomTrueActionTargetByExprResponse);
  
  
  // Property: CustomFalseAction
  //
  // Specifies the type of action you want to occur when the custom post action expression evaluates to False.
  //
  // Assign a PostActionValues string constant to the property to specify the type of post action to perform.
  //
  // StepType_Set_CustomFalseActionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies the type of action you want to occur when the custom post action expression evaluates to False. 
  //
  // StepType_Set_CustomFalseActionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_CustomFalseActionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_CustomFalseActionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the type of action you want to occur when the custom post action expression evaluates to False. 
  //
  rpc Set_CustomFalseAction(StepType_Set_CustomFalseActionRequest) returns (StepType_Set_CustomFalseActionResponse);
  rpc Get_CustomFalseAction(StepType_Get_CustomFalseActionRequest) returns (StepType_Get_CustomFalseActionResponse);
  
  
  // Property: CustomFalseActionTargetByExpr
  //
  // Specifies the target for the post action the StepType.CustomFalseAction property specifies.
  //
  // * If the StepType.CustomFalseAction property is PostAction_GotoStep, the target is the name of the step or the ID of the step. If you specify the target by name, the target step must reside in the same step group. If you specify the target by ID, the target step can reside in any step group in the sequence.    * If the StepType.CustomFalseAction property is PostAction_CallCallback, the target is the name of the callback sequence.    * For all other types of post actions, the target property is not used.
  // This value is an expression. You can set the value with the name of the property that stores the name of the target or with a string constant. A string constant is the name of the target enclosed in double quotation marks.
  //
  // StepType_Set_CustomFalseActionTargetByExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies the target for the post action the StepType.CustomFalseAction property specifies. 
  //
  // StepType_Set_CustomFalseActionTargetByExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_CustomFalseActionTargetByExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_CustomFalseActionTargetByExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the target for the post action the StepType.CustomFalseAction property specifies. 
  //
  rpc Set_CustomFalseActionTargetByExpr(StepType_Set_CustomFalseActionTargetByExprRequest) returns (StepType_Set_CustomFalseActionTargetByExprResponse);
  rpc Get_CustomFalseActionTargetByExpr(StepType_Get_CustomFalseActionTargetByExprRequest) returns (StepType_Get_CustomFalseActionTargetByExprResponse);
  
  
  // Property: CustomActionExpression
  //
  // Specifies the custom post action condition expression for the step.
  //
  // StepType_Set_CustomActionExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies the custom post action condition expression for the step. 
  //
  // StepType_Set_CustomActionExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_CustomActionExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_CustomActionExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the custom post action condition expression for the step. 
  //
  rpc Set_CustomActionExpression(StepType_Set_CustomActionExpressionRequest) returns (StepType_Set_CustomActionExpressionResponse);
  rpc Get_CustomActionExpression(StepType_Get_CustomActionExpressionRequest) returns (StepType_Get_CustomActionExpressionResponse);
  
  
  // Property: LoopType
  //
  // Specifies the type of looping for the step.
  //
  // Use the StepLoopTypes constants to specify the value of the property.
  //
  // StepType_Set_LoopTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies the type of looping for the step. 
  //
  // StepType_Set_LoopTypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_LoopTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_LoopTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the type of looping for the step. 
  //
  rpc Set_LoopType(StepType_Set_LoopTypeRequest) returns (StepType_Set_LoopTypeResponse);
  rpc Get_LoopType(StepType_Get_LoopTypeRequest) returns (StepType_Get_LoopTypeResponse);
  
  
  // Property: LoopWhileExpression
  //
  // Specifies the While Loop expression for the step.
  //
  // StepType_Set_LoopWhileExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies the While Loop expression for the step. 
  //
  // StepType_Set_LoopWhileExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_LoopWhileExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_LoopWhileExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the While Loop expression for the step. 
  //
  rpc Set_LoopWhileExpression(StepType_Set_LoopWhileExpressionRequest) returns (StepType_Set_LoopWhileExpressionResponse);
  rpc Get_LoopWhileExpression(StepType_Get_LoopWhileExpressionRequest) returns (StepType_Get_LoopWhileExpressionResponse);
  
  
  // Property: LoopStatusExpression
  //
  // Specifies the loop status result expression for the step.
  //
  // StepType_Set_LoopStatusExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies the loop status result expression for the step. 
  //
  // StepType_Set_LoopStatusExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_LoopStatusExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_LoopStatusExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the loop status result expression for the step. 
  //
  rpc Set_LoopStatusExpression(StepType_Set_LoopStatusExpressionRequest) returns (StepType_Set_LoopStatusExpressionResponse);
  rpc Get_LoopStatusExpression(StepType_Get_LoopStatusExpressionRequest) returns (StepType_Get_LoopStatusExpressionResponse);
  
  
  // Property: LoopInitExpression
  //
  // Specifies the loop initialization expression for the step.
  //
  // StepType_Set_LoopInitExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies the loop initialization expression for the step. 
  //
  // StepType_Set_LoopInitExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_LoopInitExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_LoopInitExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the loop initialization expression for the step. 
  //
  rpc Set_LoopInitExpression(StepType_Set_LoopInitExpressionRequest) returns (StepType_Set_LoopInitExpressionResponse);
  rpc Get_LoopInitExpression(StepType_Get_LoopInitExpressionRequest) returns (StepType_Get_LoopInitExpressionResponse);
  
  
  // Property: LoopIncExpression
  //
  // Specifies the loop increment expression for the step.
  //
  // StepType_Set_LoopIncExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies the loop increment expression for the step. 
  //
  // StepType_Set_LoopIncExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_LoopIncExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_LoopIncExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the loop increment expression for the step. 
  //
  rpc Set_LoopIncExpression(StepType_Set_LoopIncExpressionRequest) returns (StepType_Set_LoopIncExpressionResponse);
  rpc Get_LoopIncExpression(StepType_Get_LoopIncExpressionRequest) returns (StepType_Get_LoopIncExpressionResponse);
  
  
  // Property: RecordLoopIterationResults
  //
  // Specifies whether to add the step results to the sequence results list after each loop iteration.
  //
  // TestStand also adds the final result it computes for the step loop as a whole if you enable the StepType.ResultRecordingOption property for the step.
  //
  // StepType_Set_RecordLoopIterationResultsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: bool - Specifies whether to add the step results to the sequence results list after each loop iteration. 
  //
  // StepType_Set_RecordLoopIterationResultsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_RecordLoopIterationResultsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_RecordLoopIterationResultsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether to add the step results to the sequence results list after each loop iteration. 
  //
  rpc Set_RecordLoopIterationResults(StepType_Set_RecordLoopIterationResultsRequest) returns (StepType_Set_RecordLoopIterationResultsResponse);
  rpc Get_RecordLoopIterationResults(StepType_Get_RecordLoopIterationResultsRequest) returns (StepType_Get_RecordLoopIterationResultsResponse);
  
  
  // Property: UseMutex
  //
  // Specifies that the step acquires the a lock before it executes and releases the lock after it completes.
  //
  // Use the StepType.MutexNameOrRefExpr property to specify which lock the step uses.
  //
  // StepType_Set_UseMutexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: bool - Specifies that the step acquires the a lock before it executes and releases the lock after it completes. 
  //
  // StepType_Set_UseMutexResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_UseMutexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_UseMutexResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies that the step acquires the a lock before it executes and releases the lock after it completes. 
  //
  rpc Set_UseMutex(StepType_Set_UseMutexRequest) returns (StepType_Set_UseMutexResponse);
  rpc Get_UseMutex(StepType_Get_UseMutexRequest) returns (StepType_Get_UseMutexResponse);
  
  
  // Property: MutexNameOrRefExpr
  //
  // Specifies which lock the step acquires and releases. TestStand ignores this property when the StepType.UseMutex property is False.
  //
  // Enter a string expression to specify the name of an existing lock. You can also enter an expression that evaluates an ActiveX reference to an existing Lock object. Pass an empty string to specify that TestStand uses a lock unique to the step.
  //
  // StepType_Set_MutexNameOrRefExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies which lock the step acquires and releases. TestStand ignores this property when the StepType.UseMutex property is False. 
  //
  // StepType_Set_MutexNameOrRefExprResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_MutexNameOrRefExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_MutexNameOrRefExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies which lock the step acquires and releases. TestStand ignores this property when the StepType.UseMutex property is False. 
  //
  rpc Set_MutexNameOrRefExpr(StepType_Set_MutexNameOrRefExprRequest) returns (StepType_Set_MutexNameOrRefExprResponse);
  rpc Get_MutexNameOrRefExpr(StepType_Get_MutexNameOrRefExprRequest) returns (StepType_Get_MutexNameOrRefExprResponse);
  
  
  // Property: BatchSyncOption
  //
  // Specifies the Batch Synchronization operation the step enters before it executes and exits after it completes.
  //
  // StepType_Set_BatchSyncOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: BatchSynchronizationOptions - Specifies the Batch Synchronization operation the step enters before it executes and exits after it completes. 
  //
  // StepType_Set_BatchSyncOptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_BatchSyncOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_BatchSyncOptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: BatchSynchronizationOptions - Specifies the Batch Synchronization operation the step enters before it executes and exits after it completes. 
  //
  rpc Set_BatchSyncOption(StepType_Set_BatchSyncOptionRequest) returns (StepType_Set_BatchSyncOptionResponse);
  rpc Get_BatchSyncOption(StepType_Get_BatchSyncOptionRequest) returns (StepType_Get_BatchSyncOptionResponse);
  
  
  // Property: PreExpression
  //
  // Specifies the pre-expression for the step.
  //
  // TestStand evaluates the pre-expression before it calls the Pre-Step substep and code module for the step.
  //
  // StepType_Set_PreExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies the pre-expression for the step. 
  //
  // StepType_Set_PreExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_PreExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_PreExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the pre-expression for the step. 
  //
  rpc Set_PreExpression(StepType_Set_PreExpressionRequest) returns (StepType_Set_PreExpressionResponse);
  rpc Get_PreExpression(StepType_Get_PreExpressionRequest) returns (StepType_Get_PreExpressionResponse);
  
  
  // Property: PostExpression
  //
  // Specifies the post-expression for the step.
  //
  // TestStand evaluates the post-expression after calling the code module and Post-Step substep for the step type.
  //
  // StepType_Set_PostExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies the post-expression for the step. 
  //
  // StepType_Set_PostExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_PostExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_PostExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the post-expression for the step. 
  //
  rpc Set_PostExpression(StepType_Set_PostExpressionRequest) returns (StepType_Set_PostExpressionResponse);
  rpc Get_PostExpression(StepType_Get_PostExpressionRequest) returns (StepType_Get_PostExpressionResponse);
  
  
  // Property: StatusExpression
  //
  // Specifies the status expression for the step.
  //
  // Use this expression to set the ResultStatus property of the step. TestStand executes this expression after executing all other substeps and expressions for the step. The expression must evaluate to a string.
  //
  // StepType_Set_StatusExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies the status expression for the step. 
  //
  // StepType_Set_StatusExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_StatusExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_StatusExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the status expression for the step. 
  //
  rpc Set_StatusExpression(StepType_Set_StatusExpressionRequest) returns (StepType_Set_StatusExpressionResponse);
  rpc Get_StatusExpression(StepType_Get_StatusExpressionRequest) returns (StepType_Get_StatusExpressionResponse);
  
  
  // Property: DimmablePropertyKeyNames
  //
  // Returns the key names from the step type-modifiable properties.
  // These properties are disabled to prevent you from modifying the settings of built-in instance properties in individual steps. In this way, the settings specified for the step type remain permanent for all step instances.
  //
  // A key name is an internal name assigned to a specific property. To obtain the property display name, use the StepType.GetDimmablePropertyDisplayName method.
  //
  // StepType_Get_DimmablePropertyKeyNamesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_DimmablePropertyKeyNamesResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated string - Returns the key names from the step type-modifiable properties. These properties are disabled to prevent you from modifying the settings of built-in instance properties in individual steps. In this way, the settings specified for the step type remain permanent for all step instances. 
  //
  rpc Get_DimmablePropertyKeyNames(StepType_Get_DimmablePropertyKeyNamesRequest) returns (StepType_Get_DimmablePropertyKeyNamesResponse);
  
  
  // Property: DesignatedAdapter
  //
  // Returns the module adapter for the step type. The module adapter for any instance created from this type defaults to this setting.
  //
  // Use the StepType.ChangeDesignatedAdapter method to change this setting. If the step type does not specify a default module adapter, this property returns an empty string.
  //
  // StepType_Get_DesignatedAdapterRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_DesignatedAdapterResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the module adapter for the step type. The module adapter for any instance created from this type defaults to this setting. 
  //
  rpc Get_DesignatedAdapter(StepType_Get_DesignatedAdapterRequest) returns (StepType_Get_DesignatedAdapterResponse);
  
  
  // Property: Module
  //
  // Returns a reference to the Module object related to the current step type.
  //
  // You must acquire the module interface for the specific adapter from the object this property returns to specify the code module name, location and parameters for the Module object.
  //
  // StepType_Get_ModuleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_ModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: ModuleInstance - Returns a reference to the Module object related to the current step type. 
  //
  rpc Get_Module(StepType_Get_ModuleRequest) returns (StepType_Get_ModuleResponse);
  
  
  // Property: BlockStartTypes
  //
  // Specifies a comma-separated list of step type names. Steps of this type end blocks started by steps of any type in the list.
  //
  // StepType_Set_BlockStartTypesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies a comma-separated list of step type names. Steps of this type end blocks started by steps of any type in the list. 
  //
  // StepType_Set_BlockStartTypesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_BlockStartTypesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_BlockStartTypesResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies a comma-separated list of step type names. Steps of this type end blocks started by steps of any type in the list. 
  //
  rpc Set_BlockStartTypes(StepType_Set_BlockStartTypesRequest) returns (StepType_Set_BlockStartTypesResponse);
  rpc Get_BlockStartTypes(StepType_Get_BlockStartTypesRequest) returns (StepType_Get_BlockStartTypesResponse);
  
  
  // Property: BlockEndTypes
  //
  // Specifies a comma-separated list of step type names. Steps of any type in the list end blocks started by steps of this type.
  //
  // StepType_Set_BlockEndTypesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies a comma-separated list of step type names. Steps of any type in the list end blocks started by steps of this type. 
  //
  // StepType_Set_BlockEndTypesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_BlockEndTypesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_BlockEndTypesResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies a comma-separated list of step type names. Steps of any type in the list end blocks started by steps of this type. 
  //
  rpc Set_BlockEndTypes(StepType_Set_BlockEndTypesRequest) returns (StepType_Set_BlockEndTypesResponse);
  rpc Get_BlockEndTypes(StepType_Get_BlockEndTypesRequest) returns (StepType_Get_BlockEndTypesResponse);
  
  
  // Property: AppliesToBlockStructure
  //
  // Specifies whether this step defines or operates according to the block structure of the sequence. If this property is not set, the step type ignores the values of the StepType.BlockStartTypes and StepType.BlockEndTypes properties.
  //
  // StepType_Set_AppliesToBlockStructureRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: bool - Specifies whether this step defines or operates according to the block structure of the sequence. If this property is not set, the step type ignores the values of the StepType.BlockStartTypes and StepType.BlockEndTypes properties. 
  //
  // StepType_Set_AppliesToBlockStructureResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_AppliesToBlockStructureRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_AppliesToBlockStructureResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether this step defines or operates according to the block structure of the sequence. If this property is not set, the step type ignores the values of the StepType.BlockStartTypes and StepType.BlockEndTypes properties. 
  //
  rpc Set_AppliesToBlockStructure(StepType_Set_AppliesToBlockStructureRequest) returns (StepType_Set_AppliesToBlockStructureResponse);
  rpc Get_AppliesToBlockStructure(StepType_Get_AppliesToBlockStructureRequest) returns (StepType_Get_AppliesToBlockStructureResponse);
  
  
  // Property: SwitchExecEnabled
  //
  // Specifies whether to perform a switching operation for the step. The step performs the switching operation the StepType.SwitchExecOperation property specifies for the virtual device the StepType.SwitchExecVirtualDevice property specifies.
  // Note: This feature is available only when you install NI Switch Executive software.
  //
  // StepType_Set_SwitchExecEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: bool - Specifies whether to perform a switching operation for the step. The step performs the switching operation the StepType.SwitchExecOperation property specifies for the virtual device the StepType.SwitchExecVirtualDevice property specifies. Note: This feature is available only when you install NI Switch Executive software. 
  //
  // StepType_Set_SwitchExecEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_SwitchExecEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_SwitchExecEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether to perform a switching operation for the step. The step performs the switching operation the StepType.SwitchExecOperation property specifies for the virtual device the StepType.SwitchExecVirtualDevice property specifies. Note: This feature is available only when you install NI Switch Executive software. 
  //
  rpc Set_SwitchExecEnabled(StepType_Set_SwitchExecEnabledRequest) returns (StepType_Set_SwitchExecEnabledResponse);
  rpc Get_SwitchExecEnabled(StepType_Get_SwitchExecEnabledRequest) returns (StepType_Get_SwitchExecEnabledResponse);
  
  
  // Property: SwitchExecVirtualDevice
  //
  // Specifies an expression TestStand evaluates at run time to determine the virtual device name on which to perform the switching operation.
  //
  // Note: The NI Switch Executive software in Measurement & Automation Explorer defines the virtual device name.
  //
  // StepType_Set_SwitchExecVirtualDeviceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies an expression TestStand evaluates at run time to determine the virtual device name on which to perform the switching operation. 
  //
  // StepType_Set_SwitchExecVirtualDeviceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_SwitchExecVirtualDeviceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_SwitchExecVirtualDeviceResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies an expression TestStand evaluates at run time to determine the virtual device name on which to perform the switching operation. 
  //
  rpc Set_SwitchExecVirtualDevice(StepType_Set_SwitchExecVirtualDeviceRequest) returns (StepType_Set_SwitchExecVirtualDeviceResponse);
  rpc Get_SwitchExecVirtualDevice(StepType_Get_SwitchExecVirtualDeviceRequest) returns (StepType_Get_SwitchExecVirtualDeviceResponse);
  
  
  // Property: SwitchExecOperation
  //
  // Specifies whether to connect or disconnect the routes the StepType.SwitchExecRoutesToConnect and StepType.SwitchExecRoutesToDisconnect properties specify, or disconnect all previously connected routes for a virtual device.
  // Note: This operation returns as soon as the instrument is ready for another operation, which might be before or after the switches involved settle. Enable SwitchExecWaitForDebounce if you want to wait until all switches have debounced.
  //
  // StepType_Set_SwitchExecOperationRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: SwitchExecOperations - Specifies whether to connect or disconnect the routes the StepType.SwitchExecRoutesToConnect and StepType.SwitchExecRoutesToDisconnect properties specify, or disconnect all previously connected routes for a virtual device. Note: This operation returns as soon as the instrument is ready for another operation, which might be before or after the switches involved settle. Enable SwitchExecWaitForDebounce if you want to wait until all switches have debounced. 
  //
  // StepType_Set_SwitchExecOperationResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_SwitchExecOperationRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_SwitchExecOperationResponse - The response message from the server. It provides the return value.
  //    - returnValue: SwitchExecOperations - Specifies whether to connect or disconnect the routes the StepType.SwitchExecRoutesToConnect and StepType.SwitchExecRoutesToDisconnect properties specify, or disconnect all previously connected routes for a virtual device. Note: This operation returns as soon as the instrument is ready for another operation, which might be before or after the switches involved settle. Enable SwitchExecWaitForDebounce if you want to wait until all switches have debounced. 
  //
  rpc Set_SwitchExecOperation(StepType_Set_SwitchExecOperationRequest) returns (StepType_Set_SwitchExecOperationResponse);
  rpc Get_SwitchExecOperation(StepType_Get_SwitchExecOperationRequest) returns (StepType_Get_SwitchExecOperationResponse);
  
  
  // Property: SwitchExecRoutesToConnect
  //
  // Specifies an expression TestStand evaluates at run time to determine the routes to connect when the value of the StepType.SwitchExecOperation property is Connect or ConnectDisconnect.
  // Note: The expression must be a valid route specification string the NI Switch Executive configuration defines for the virtual device name specified by StepType.SwitchExecVirtualDevice. The string can be a combination of route group alias names, route names, and physical route paths. You can use the SwitchFindRoute expression function to dynamically determine a physical route path at run time.
  //
  // StepType_Set_SwitchExecRoutesToConnectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies an expression TestStand evaluates at run time to determine the routes to connect when the value of the StepType.SwitchExecOperation property is Connect or ConnectDisconnect. Note: The expression must be a valid route specification string the NI Switch Executive configuration defines for the virtual device name specified by StepType.SwitchExecVirtualDevice. The string can be a combination of route group alias names, route names, and physical route paths. You can use the SwitchFindRoute expression function to dynamically determine a physical route path at run time. 
  //
  // StepType_Set_SwitchExecRoutesToConnectResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_SwitchExecRoutesToConnectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_SwitchExecRoutesToConnectResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies an expression TestStand evaluates at run time to determine the routes to connect when the value of the StepType.SwitchExecOperation property is Connect or ConnectDisconnect. Note: The expression must be a valid route specification string the NI Switch Executive configuration defines for the virtual device name specified by StepType.SwitchExecVirtualDevice. The string can be a combination of route group alias names, route names, and physical route paths. You can use the SwitchFindRoute expression function to dynamically determine a physical route path at run time. 
  //
  rpc Set_SwitchExecRoutesToConnect(StepType_Set_SwitchExecRoutesToConnectRequest) returns (StepType_Set_SwitchExecRoutesToConnectResponse);
  rpc Get_SwitchExecRoutesToConnect(StepType_Get_SwitchExecRoutesToConnectRequest) returns (StepType_Get_SwitchExecRoutesToConnectResponse);
  
  
  // Property: SwitchExecRoutesToDisconnect
  //
  // Specifies an expression TestStand evaluates at run time to determine the routes to disconnect when the value of the StepType.SwitchExecOperation property is Disconnect or ConnectDisconnect.
  // Note: The expression must be a valid route specification string the NI Switch Executive configuration defines for the virtual device name the  StepType.SwitchExecVirtualDevice property specifies. The string can be a combination of route group alias names, route names, and physical route paths. You can use the SwitchFindRoute expression function to dynamically determine a physical route path at run time.
  //
  // StepType_Set_SwitchExecRoutesToDisconnectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: string - Specifies an expression TestStand evaluates at run time to determine the routes to disconnect when the value of the StepType.SwitchExecOperation property is Disconnect or ConnectDisconnect. Note: The expression must be a valid route specification string the NI Switch Executive configuration defines for the virtual device name the  StepType.SwitchExecVirtualDevice property specifies. The string can be a combination of route group alias names, route names, and physical route paths. You can use the SwitchFindRoute expression function to dynamically determine a physical route path at run time. 
  //
  // StepType_Set_SwitchExecRoutesToDisconnectResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_SwitchExecRoutesToDisconnectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_SwitchExecRoutesToDisconnectResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies an expression TestStand evaluates at run time to determine the routes to disconnect when the value of the StepType.SwitchExecOperation property is Disconnect or ConnectDisconnect. Note: The expression must be a valid route specification string the NI Switch Executive configuration defines for the virtual device name the  StepType.SwitchExecVirtualDevice property specifies. The string can be a combination of route group alias names, route names, and physical route paths. You can use the SwitchFindRoute expression function to dynamically determine a physical route path at run time. 
  //
  rpc Set_SwitchExecRoutesToDisconnect(StepType_Set_SwitchExecRoutesToDisconnectRequest) returns (StepType_Set_SwitchExecRoutesToDisconnectResponse);
  rpc Get_SwitchExecRoutesToDisconnect(StepType_Get_SwitchExecRoutesToDisconnectRequest) returns (StepType_Get_SwitchExecRoutesToDisconnectResponse);
  
  
  // Property: SwitchExecMulticonnectMode
  //
  // Specifies the behavior when more than one connection operation occurs on a specific route.
  // Note: If the value of this property is Multiconnect, a route can exist longer if another step specifies a lifetime for the same route.
  //
  // StepType_Set_SwitchExecMulticonnectModeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: SwitchExecMulticonnectModes - Specifies the behavior when more than one connection operation occurs on a specific route. Note: If the value of this property is Multiconnect, a route can exist longer if another step specifies a lifetime for the same route. 
  //
  // StepType_Set_SwitchExecMulticonnectModeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_SwitchExecMulticonnectModeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_SwitchExecMulticonnectModeResponse - The response message from the server. It provides the return value.
  //    - returnValue: SwitchExecMulticonnectModes - Specifies the behavior when more than one connection operation occurs on a specific route. Note: If the value of this property is Multiconnect, a route can exist longer if another step specifies a lifetime for the same route. 
  //
  rpc Set_SwitchExecMulticonnectMode(StepType_Set_SwitchExecMulticonnectModeRequest) returns (StepType_Set_SwitchExecMulticonnectModeResponse);
  rpc Get_SwitchExecMulticonnectMode(StepType_Get_SwitchExecMulticonnectModeRequest) returns (StepType_Get_SwitchExecMulticonnectModeResponse);
  
  
  // Property: SwitchExecOperationOrder
  //
  // Specifies whether the Disconnect operation occurs before or after the Connect operation when the value of the StepType.SwitchExecOperation property is ConnectDisconnect.
  //
  // StepType_Set_SwitchExecOperationOrderRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: SwitchExecOperationOrders - Specifies whether the Disconnect operation occurs before or after the Connect operation when the value of the StepType.SwitchExecOperation property is ConnectDisconnect. 
  //
  // StepType_Set_SwitchExecOperationOrderResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_SwitchExecOperationOrderRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_SwitchExecOperationOrderResponse - The response message from the server. It provides the return value.
  //    - returnValue: SwitchExecOperationOrders - Specifies whether the Disconnect operation occurs before or after the Connect operation when the value of the StepType.SwitchExecOperation property is ConnectDisconnect. 
  //
  rpc Set_SwitchExecOperationOrder(StepType_Set_SwitchExecOperationOrderRequest) returns (StepType_Set_SwitchExecOperationOrderResponse);
  rpc Get_SwitchExecOperationOrder(StepType_Get_SwitchExecOperationOrderRequest) returns (StepType_Get_SwitchExecOperationOrderResponse);
  
  
  // Property: SwitchExecConnectionLifetime
  //
  // Specifies the lifetime TestStand applies to routes when the value of the StepType.SwitchExecOperation property is Connect or ConnectDisconnect. You can specify whether you want the route to exist until manually disconnected later or until the step, sequence, thread, or execution completes.
  // Note: If the value of the StepType.SwitchExecMulticonnectMode property is Multiconnect, a route can exist longer if another step specifies a lifetime for the same route. Selecting a lifetime other than Manual guarantees that the route stays connected as long as the step, sequence, thread, or execution in which you connect is executing. If you manually disconnect a previously connected route using a non-manual lifetime setting, TestStand releases the reference to the route for the last step that performed a connect action for the route.
  //
  // StepType_Set_SwitchExecConnectionLifetimeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: SwitchExecLifetimes - Specifies the lifetime TestStand applies to routes when the value of the StepType.SwitchExecOperation property is Connect or ConnectDisconnect. You can specify whether you want the route to exist until manually disconnected later or until the step, sequence, thread, or execution completes. Note: If the value of the StepType.SwitchExecMulticonnectMode property is Multiconnect, a route can exist longer if another step specifies a lifetime for the same route. Selecting a lifetime other than Manual guarantees that the route stays connected as long as the step, sequence, thread, or execution in which you connect is executing. If you manually disconnect a previously connected route using a non-manual lifetime setting, TestStand releases the reference to the route for the last step that performed a connect action for the route. 
  //
  // StepType_Set_SwitchExecConnectionLifetimeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_SwitchExecConnectionLifetimeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_SwitchExecConnectionLifetimeResponse - The response message from the server. It provides the return value.
  //    - returnValue: SwitchExecLifetimes - Specifies the lifetime TestStand applies to routes when the value of the StepType.SwitchExecOperation property is Connect or ConnectDisconnect. You can specify whether you want the route to exist until manually disconnected later or until the step, sequence, thread, or execution completes. Note: If the value of the StepType.SwitchExecMulticonnectMode property is Multiconnect, a route can exist longer if another step specifies a lifetime for the same route. Selecting a lifetime other than Manual guarantees that the route stays connected as long as the step, sequence, thread, or execution in which you connect is executing. If you manually disconnect a previously connected route using a non-manual lifetime setting, TestStand releases the reference to the route for the last step that performed a connect action for the route. 
  //
  rpc Set_SwitchExecConnectionLifetime(StepType_Set_SwitchExecConnectionLifetimeRequest) returns (StepType_Set_SwitchExecConnectionLifetimeResponse);
  rpc Get_SwitchExecConnectionLifetime(StepType_Get_SwitchExecConnectionLifetimeRequest) returns (StepType_Get_SwitchExecConnectionLifetimeResponse);
  
  
  // Property: SwitchExecWaitForDebounce
  //
  // Specifies if the operation the StepType.SwitchExecOperation property specifies waits for all switches to debounce before returning to TestStand.
  // Note: The wait for debounce occurs after both the Connect and Disconnect operations are complete.
  //
  // StepType_Set_SwitchExecWaitForDebounceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: bool - Specifies if the operation the StepType.SwitchExecOperation property specifies waits for all switches to debounce before returning to TestStand. Note: The wait for debounce occurs after both the Connect and Disconnect operations are complete. 
  //
  // StepType_Set_SwitchExecWaitForDebounceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_SwitchExecWaitForDebounceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_SwitchExecWaitForDebounceResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if the operation the StepType.SwitchExecOperation property specifies waits for all switches to debounce before returning to TestStand. Note: The wait for debounce occurs after both the Connect and Disconnect operations are complete. 
  //
  rpc Set_SwitchExecWaitForDebounce(StepType_Set_SwitchExecWaitForDebounceRequest) returns (StepType_Set_SwitchExecWaitForDebounceResponse);
  rpc Get_SwitchExecWaitForDebounce(StepType_Get_SwitchExecWaitForDebounceRequest) returns (StepType_Get_SwitchExecWaitForDebounceResponse);
  
  
  // Property: CodeTemplates
  //
  // Returns the code templates for this step type.
  //
  // StepType_Get_CodeTemplatesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_CodeTemplatesResponse - The response message from the server. It provides the return value.
  //    - returnValue: CodeTemplatesInstance - Returns the code templates for this step type. 
  //
  rpc Get_CodeTemplates(StepType_Get_CodeTemplatesRequest) returns (StepType_Get_CodeTemplatesResponse);
  
  
  // Property: AdditionalResultsHints
  //
  // Returns a list of additional result hints associated with a step type.
  //
  // The combined members of StepType.AdditionalResultsHints and Step.AdditionalResultsHints define a list of preconfigured custom additional results you can choose to log when you edit the additional results of a step in a user interface.
  //
  // StepType_Get_AdditionalResultsHintsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_AdditionalResultsHintsResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdditionalResultsInstance - Returns a list of additional result hints associated with a step type. 
  //
  rpc Get_AdditionalResultsHints(StepType_Get_AdditionalResultsHintsRequest) returns (StepType_Get_AdditionalResultsHintsResponse);
  
  
  // Property: ResultRecordingOption
  //
  // Specifies whether to record the result properties of the step.
  //
  // For steps that loop, use the Step.RecordLoopIterationResults property to specify to add step results to the sequence result list after each loop iteration.
  //
  // StepType_Set_ResultRecordingOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: ResultRecordingOptions - Specifies whether to record the result properties of the step. 
  //
  // StepType_Set_ResultRecordingOptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_ResultRecordingOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_ResultRecordingOptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: ResultRecordingOptions - Specifies whether to record the result properties of the step. 
  //
  rpc Set_ResultRecordingOption(StepType_Set_ResultRecordingOptionRequest) returns (StepType_Set_ResultRecordingOptionResponse);
  rpc Get_ResultRecordingOption(StepType_Get_ResultRecordingOptionRequest) returns (StepType_Get_ResultRecordingOptionResponse);
  
  
  // Property: CanEncapsulate
  //
  // Specifies whether this step and a corresponding end step can surround a block of contiguous steps.
  //
  // StepType_Set_CanEncapsulateRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: bool - Specifies whether this step and a corresponding end step can surround a block of contiguous steps. 
  //
  // StepType_Set_CanEncapsulateResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_CanEncapsulateRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_CanEncapsulateResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether this step and a corresponding end step can surround a block of contiguous steps. 
  //
  rpc Set_CanEncapsulate(StepType_Set_CanEncapsulateRequest) returns (StepType_Set_CanEncapsulateResponse);
  rpc Get_CanEncapsulate(StepType_Get_CanEncapsulateRequest) returns (StepType_Get_CanEncapsulateResponse);
  
  
  // Property: Category
  //
  // 
  //
  // StepType_Set_CategoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //    - val: StepTypeCategories -  
  //
  // StepType_Set_CategoryResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StepType_Get_CategoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepTypeInstance - The id of the StepType object.
  //
  // StepType_Get_CategoryResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepTypeCategories -  
  //
  rpc Set_Category(StepType_Set_CategoryRequest) returns (StepType_Set_CategoryResponse);
  rpc Get_Category(StepType_Get_CategoryRequest) returns (StepType_Get_CategoryResponse);
  
  
}
message CodeTemplatesInstance {
  // Specifies the handle of the CodeTemplates instance in the server.
  string id = 1;
}
message StepType_AsPropertyObjectRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message StepType_SpecifyModuleRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies one or more SpecifyModuleOptions to modify the behavior of the dialog box.
  SpecifyModuleOptions specModOptions = 2;
}

message StepType_SpecifyModuleResponse {
  // Returns True if the Specify Module dialog box modifies the step type.
  bool returnValue = 1;
}

message StepType_GetDefaultNameRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_GetDefaultNameResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message StepType_CreateCombinedStepTypeRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the step type to combine with this one.
  StepTypeInstance combineWith = 2;
}

message StepType_CreateCombinedStepTypeResponse {
  // Returns the new combined step type.
  StepTypeInstance returnValue = 1;
}

message StepType_GetSubstepRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the zero-based index of the substep.
  int32 substepIndex = 2;
}

message StepType_GetSubstepResponse {
  // The return type of the Step object.
  StepInstance returnValue = 1;
}

message StepType_GetDimmablePropertyDisplayNameRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies a property key name.
  string propertyKeyName = 2;
}

message StepType_GetDimmablePropertyDisplayNameResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message StepType_IsPropertyDimmedRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the corresponding property key name.
  string propertyKeyName = 2;
}

message StepType_IsPropertyDimmedResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message StepType_DimPropertyRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the corresponding property key name.
  string propertyKeyName = 2;
  // If this parameter is True, the control for the corresponding property is disabled.
  bool newValue = 3;
}

message StepType_DimPropertyResponse {
}

message StepType_AddSubstepRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the new step to be added as a substep for the current step type. Create a new step to pass for this parameter by calling the Engine.NewStep method and specifying Substep, EditSubstep, PreSubstep, or PostSubstep as the value for the stepTypeName parameter of the Engine.NewStep method.
  StepInstance newSubstep = 2;
}

message StepType_AddSubstepResponse {
}

message StepType_RemoveSubstepRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the zero-based index of the substep to remove.
  int32 substepIndex = 2;
}

message StepType_RemoveSubstepResponse {
}

message StepType_SwapSubstepsRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the zero-based index related to one of the substeps to be swapped.
  int32 Index1 = 2;
  // Specifies the zero-based index related to one of the substeps to be swapped.
  int32 index2 = 3;
}

message StepType_SwapSubstepsResponse {
}

message StepType_ChangeDesignatedAdapterRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Corresponds to the key name of the adapter assigned to the specific step type. If the Step Type does not require a module adapter, set this parameter to an empty string.
  string adapterName = 2;
}

message StepType_ChangeDesignatedAdapterResponse {
}

message StepType_Set_NameRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the name of the step type.
  string val = 2;
}

message StepType_Set_NameResponse {
}

message StepType_Get_NameRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_NameResponse {
  // Specifies the name of the step type.
  string returnValue = 1;
}

message StepType_Get_CanSpecifyModuleRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_CanSpecifyModuleResponse {
  // Returns a value that indicates whether the adapter for the default module of the step type supports the StepType.SpecifyModule method.
  bool returnValue = 1;
}

message StepType_Get_MenuIconRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_MenuIconResponse {
  // Returns the icon TestStand displays in the context menu for new steps.
  IPictureDispInstance returnValue = 1;
}

message StepType_Get_MenuIconIndexRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_MenuIconIndexResponse {
  // Returns the icon index in the small image list of the engine to display in menus for creating new steps of this type.
  int32 returnValue = 1;
}

message StepType_Get_NumSubstepsRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_NumSubstepsResponse {
  // Returns the number of substeps for this step type.
  int32 returnValue = 1;
}

message StepType_Set_IconNameRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the icon filename assigned to the step type.
  string val = 2;
}

message StepType_Set_IconNameResponse {
}

message StepType_Get_IconNameRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_IconNameResponse {
  // Specifies the icon filename assigned to the step type.
  string returnValue = 1;
}

message StepType_Set_DefaultNameExprRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies a string expression TestStand evaluates and uses as the name of the step when you create a new step with the step type.
  string val = 2;
}

message StepType_Set_DefaultNameExprResponse {
}

message StepType_Get_DefaultNameExprRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_DefaultNameExprResponse {
  // Specifies a string expression TestStand evaluates and uses as the name of the step when you create a new step with the step type.
  string returnValue = 1;
}

message StepType_Set_DescriptionExprRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies a string expression TestStand evaluates and uses as the contents of the Description field for a step of the step type.
  string val = 2;
}

message StepType_Set_DescriptionExprResponse {
}

message StepType_Get_DescriptionExprRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_DescriptionExprResponse {
  // Specifies a string expression TestStand evaluates and uses as the contents of the Description field for a step of the step type.
  string returnValue = 1;
}

message StepType_Set_PreconditionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies an expression that must evaluate to True or be empty to execute a step of the step type.
  string val = 2;
}

message StepType_Set_PreconditionResponse {
}

message StepType_Get_PreconditionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_PreconditionResponse {
  // Specifies an expression that must evaluate to True or be empty to execute a step of the step type.
  string returnValue = 1;
}

message StepType_Set_MenuItemNameExprRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies an expression for the step type name that appears in the Insert Step submenu.
  string val = 2;
}

message StepType_Set_MenuItemNameExprResponse {
}

message StepType_Get_MenuItemNameExprRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_MenuItemNameExprResponse {
  // Specifies an expression for the step type name that appears in the Insert Step submenu.
  string returnValue = 1;
}

message StepType_Set_MenuGroupNameRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Note: This property is obsolete.
  string val = 2;
}

message StepType_Set_MenuGroupNameResponse {
}

message StepType_Get_MenuGroupNameRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_MenuGroupNameResponse {
  // Note: This property is obsolete.
  string returnValue = 1;
}

message StepType_Set_ModuleLoadOptionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the option that determines when TestStand loads the code module for the steps of this type.
  ModuleLoadOptions val = 2;
}

message StepType_Set_ModuleLoadOptionResponse {
}

message StepType_Get_ModuleLoadOptionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_ModuleLoadOptionResponse {
  // Specifies the option that determines when TestStand loads the code module for the steps of this type.
  ModuleLoadOptions returnValue = 1;
}

message StepType_Set_ModuleUnloadOptionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the option that determines when TestStand unloads the code module for the steps of this type.
  ModuleUnloadOptions val = 2;
}

message StepType_Set_ModuleUnloadOptionResponse {
}

message StepType_Get_ModuleUnloadOptionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_ModuleUnloadOptionResponse {
  // Specifies the option that determines when TestStand unloads the code module for the steps of this type.
  ModuleUnloadOptions returnValue = 1;
}

message StepType_Set_RunModeRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the run mode of the step.
  string val = 2;
}

message StepType_Set_RunModeResponse {
}

message StepType_Get_RunModeRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_RunModeResponse {
  // Specifies the run mode of the step.
  string returnValue = 1;
}

message StepType_Set_EvalPrecondForInteractiveExecutionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies whether TestStand evaluates the step precondition when you run the step interactively.
  EvalPrecondOptions val = 2;
}

message StepType_Set_EvalPrecondForInteractiveExecutionResponse {
}

message StepType_Get_EvalPrecondForInteractiveExecutionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_EvalPrecondForInteractiveExecutionResponse {
  // Specifies whether TestStand evaluates the step precondition when you run the step interactively.
  EvalPrecondOptions returnValue = 1;
}

message StepType_Set_WindowActivationRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies whether the TestStand application activates its window when the step completes.
  WindowActivationOptions val = 2;
}

message StepType_Set_WindowActivationResponse {
}

message StepType_Get_WindowActivationRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_WindowActivationResponse {
  // Specifies whether the TestStand application activates its window when the step completes.
  WindowActivationOptions returnValue = 1;
}

message StepType_Set_RecordResultRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Note: This property is obsolete. Use the StepType.ResultRecordingOption property instead.
  bool val = 2;
}

message StepType_Set_RecordResultResponse {
}

message StepType_Get_RecordResultRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_RecordResultResponse {
  // Note: This property is obsolete. Use the StepType.ResultRecordingOption property instead.
  bool returnValue = 1;
}

message StepType_Set_StepFailCausesSequenceFailRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies whether failure of the step causes the sequence to fail.
  bool val = 2;
}

message StepType_Set_StepFailCausesSequenceFailResponse {
}

message StepType_Get_StepFailCausesSequenceFailRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_StepFailCausesSequenceFailResponse {
  // Specifies whether failure of the step causes the sequence to fail.
  bool returnValue = 1;
}

message StepType_Set_IgnoreRTERequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies to prevent the step from reporting a run-time error to the sequence.
  bool val = 2;
}

message StepType_Set_IgnoreRTEResponse {
}

message StepType_Get_IgnoreRTERequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_IgnoreRTEResponse {
  // Specifies to prevent the step from reporting a run-time error to the sequence.
  bool returnValue = 1;
}

message StepType_Set_PassActionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the type of post action you want to occur if the step passes.
  string val = 2;
}

message StepType_Set_PassActionResponse {
}

message StepType_Get_PassActionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_PassActionResponse {
  // Specifies the type of post action you want to occur if the step passes.
  string returnValue = 1;
}

message StepType_Set_PassActionTargetByExprRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the target for the post action the StepType.PassAction property specifies.
  string val = 2;
}

message StepType_Set_PassActionTargetByExprResponse {
}

message StepType_Get_PassActionTargetByExprRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_PassActionTargetByExprResponse {
  // Specifies the target for the post action the StepType.PassAction property specifies.
  string returnValue = 1;
}

message StepType_Set_FailActionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the type of post action you want to occur if the step fails.
  string val = 2;
}

message StepType_Set_FailActionResponse {
}

message StepType_Get_FailActionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_FailActionResponse {
  // Specifies the type of post action you want to occur if the step fails.
  string returnValue = 1;
}

message StepType_Set_FailActionTargetByExprRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the target for the post action the StepType.FailAction property specifies.
  string val = 2;
}

message StepType_Set_FailActionTargetByExprResponse {
}

message StepType_Get_FailActionTargetByExprRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_FailActionTargetByExprResponse {
  // Specifies the target for the post action the StepType.FailAction property specifies.
  string returnValue = 1;
}

message StepType_Set_CustomTrueActionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the type of action you want to occur when the custom post action expression evaluates to True.
  string val = 2;
}

message StepType_Set_CustomTrueActionResponse {
}

message StepType_Get_CustomTrueActionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_CustomTrueActionResponse {
  // Specifies the type of action you want to occur when the custom post action expression evaluates to True.
  string returnValue = 1;
}

message StepType_Set_CustomTrueActionTargetByExprRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the target for the post action the StepType.CustomTrueAction property specifies.
  string val = 2;
}

message StepType_Set_CustomTrueActionTargetByExprResponse {
}

message StepType_Get_CustomTrueActionTargetByExprRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_CustomTrueActionTargetByExprResponse {
  // Specifies the target for the post action the StepType.CustomTrueAction property specifies.
  string returnValue = 1;
}

message StepType_Set_CustomFalseActionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the type of action you want to occur when the custom post action expression evaluates to False.
  string val = 2;
}

message StepType_Set_CustomFalseActionResponse {
}

message StepType_Get_CustomFalseActionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_CustomFalseActionResponse {
  // Specifies the type of action you want to occur when the custom post action expression evaluates to False.
  string returnValue = 1;
}

message StepType_Set_CustomFalseActionTargetByExprRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the target for the post action the StepType.CustomFalseAction property specifies.
  string val = 2;
}

message StepType_Set_CustomFalseActionTargetByExprResponse {
}

message StepType_Get_CustomFalseActionTargetByExprRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_CustomFalseActionTargetByExprResponse {
  // Specifies the target for the post action the StepType.CustomFalseAction property specifies.
  string returnValue = 1;
}

message StepType_Set_CustomActionExpressionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the custom post action condition expression for the step.
  string val = 2;
}

message StepType_Set_CustomActionExpressionResponse {
}

message StepType_Get_CustomActionExpressionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_CustomActionExpressionResponse {
  // Specifies the custom post action condition expression for the step.
  string returnValue = 1;
}

message StepType_Set_LoopTypeRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the type of looping for the step.
  string val = 2;
}

message StepType_Set_LoopTypeResponse {
}

message StepType_Get_LoopTypeRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_LoopTypeResponse {
  // Specifies the type of looping for the step.
  string returnValue = 1;
}

message StepType_Set_LoopWhileExpressionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the While Loop expression for the step.
  string val = 2;
}

message StepType_Set_LoopWhileExpressionResponse {
}

message StepType_Get_LoopWhileExpressionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_LoopWhileExpressionResponse {
  // Specifies the While Loop expression for the step.
  string returnValue = 1;
}

message StepType_Set_LoopStatusExpressionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the loop status result expression for the step.
  string val = 2;
}

message StepType_Set_LoopStatusExpressionResponse {
}

message StepType_Get_LoopStatusExpressionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_LoopStatusExpressionResponse {
  // Specifies the loop status result expression for the step.
  string returnValue = 1;
}

message StepType_Set_LoopInitExpressionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the loop initialization expression for the step.
  string val = 2;
}

message StepType_Set_LoopInitExpressionResponse {
}

message StepType_Get_LoopInitExpressionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_LoopInitExpressionResponse {
  // Specifies the loop initialization expression for the step.
  string returnValue = 1;
}

message StepType_Set_LoopIncExpressionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the loop increment expression for the step.
  string val = 2;
}

message StepType_Set_LoopIncExpressionResponse {
}

message StepType_Get_LoopIncExpressionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_LoopIncExpressionResponse {
  // Specifies the loop increment expression for the step.
  string returnValue = 1;
}

message StepType_Set_RecordLoopIterationResultsRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies whether to add the step results to the sequence results list after each loop iteration.
  bool val = 2;
}

message StepType_Set_RecordLoopIterationResultsResponse {
}

message StepType_Get_RecordLoopIterationResultsRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_RecordLoopIterationResultsResponse {
  // Specifies whether to add the step results to the sequence results list after each loop iteration.
  bool returnValue = 1;
}

message StepType_Set_UseMutexRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies that the step acquires the a lock before it executes and releases the lock after it completes.
  bool val = 2;
}

message StepType_Set_UseMutexResponse {
}

message StepType_Get_UseMutexRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_UseMutexResponse {
  // Specifies that the step acquires the a lock before it executes and releases the lock after it completes.
  bool returnValue = 1;
}

message StepType_Set_MutexNameOrRefExprRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies which lock the step acquires and releases. TestStand ignores this property when the StepType.UseMutex property is False.
  string val = 2;
}

message StepType_Set_MutexNameOrRefExprResponse {
}

message StepType_Get_MutexNameOrRefExprRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_MutexNameOrRefExprResponse {
  // Specifies which lock the step acquires and releases. TestStand ignores this property when the StepType.UseMutex property is False.
  string returnValue = 1;
}

message StepType_Set_BatchSyncOptionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the Batch Synchronization operation the step enters before it executes and exits after it completes.
  BatchSynchronizationOptions val = 2;
}

message StepType_Set_BatchSyncOptionResponse {
}

message StepType_Get_BatchSyncOptionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_BatchSyncOptionResponse {
  // Specifies the Batch Synchronization operation the step enters before it executes and exits after it completes.
  BatchSynchronizationOptions returnValue = 1;
}

message StepType_Set_PreExpressionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the pre-expression for the step.
  string val = 2;
}

message StepType_Set_PreExpressionResponse {
}

message StepType_Get_PreExpressionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_PreExpressionResponse {
  // Specifies the pre-expression for the step.
  string returnValue = 1;
}

message StepType_Set_PostExpressionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the post-expression for the step.
  string val = 2;
}

message StepType_Set_PostExpressionResponse {
}

message StepType_Get_PostExpressionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_PostExpressionResponse {
  // Specifies the post-expression for the step.
  string returnValue = 1;
}

message StepType_Set_StatusExpressionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the status expression for the step.
  string val = 2;
}

message StepType_Set_StatusExpressionResponse {
}

message StepType_Get_StatusExpressionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_StatusExpressionResponse {
  // Specifies the status expression for the step.
  string returnValue = 1;
}

message StepType_Get_DimmablePropertyKeyNamesRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_DimmablePropertyKeyNamesResponse {
  // Returns the key names from the step type-modifiable properties.
  // These properties are disabled to prevent you from modifying the settings of built-in instance properties in individual steps. In this way, the settings specified for the step type remain permanent for all step instances.
  repeated string returnValue = 1;
}

message StepType_Get_DesignatedAdapterRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_DesignatedAdapterResponse {
  // Returns the module adapter for the step type. The module adapter for any instance created from this type defaults to this setting.
  string returnValue = 1;
}

message StepType_Get_ModuleRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_ModuleResponse {
  // Returns a reference to the Module object related to the current step type.
  ModuleInstance returnValue = 1;
}

message StepType_Set_BlockStartTypesRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies a comma-separated list of step type names. Steps of this type end blocks started by steps of any type in the list.
  string val = 2;
}

message StepType_Set_BlockStartTypesResponse {
}

message StepType_Get_BlockStartTypesRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_BlockStartTypesResponse {
  // Specifies a comma-separated list of step type names. Steps of this type end blocks started by steps of any type in the list.
  string returnValue = 1;
}

message StepType_Set_BlockEndTypesRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies a comma-separated list of step type names. Steps of any type in the list end blocks started by steps of this type.
  string val = 2;
}

message StepType_Set_BlockEndTypesResponse {
}

message StepType_Get_BlockEndTypesRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_BlockEndTypesResponse {
  // Specifies a comma-separated list of step type names. Steps of any type in the list end blocks started by steps of this type.
  string returnValue = 1;
}

message StepType_Set_AppliesToBlockStructureRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies whether this step defines or operates according to the block structure of the sequence. If this property is not set, the step type ignores the values of the StepType.BlockStartTypes and StepType.BlockEndTypes properties.
  bool val = 2;
}

message StepType_Set_AppliesToBlockStructureResponse {
}

message StepType_Get_AppliesToBlockStructureRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_AppliesToBlockStructureResponse {
  // Specifies whether this step defines or operates according to the block structure of the sequence. If this property is not set, the step type ignores the values of the StepType.BlockStartTypes and StepType.BlockEndTypes properties.
  bool returnValue = 1;
}

message StepType_Set_SwitchExecEnabledRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies whether to perform a switching operation for the step. The step performs the switching operation the StepType.SwitchExecOperation property specifies for the virtual device the StepType.SwitchExecVirtualDevice property specifies.
  // Note: This feature is available only when you install NI Switch Executive software.
  bool val = 2;
}

message StepType_Set_SwitchExecEnabledResponse {
}

message StepType_Get_SwitchExecEnabledRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_SwitchExecEnabledResponse {
  // Specifies whether to perform a switching operation for the step. The step performs the switching operation the StepType.SwitchExecOperation property specifies for the virtual device the StepType.SwitchExecVirtualDevice property specifies.
  // Note: This feature is available only when you install NI Switch Executive software.
  bool returnValue = 1;
}

message StepType_Set_SwitchExecVirtualDeviceRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies an expression TestStand evaluates at run time to determine the virtual device name on which to perform the switching operation.
  string val = 2;
}

message StepType_Set_SwitchExecVirtualDeviceResponse {
}

message StepType_Get_SwitchExecVirtualDeviceRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_SwitchExecVirtualDeviceResponse {
  // Specifies an expression TestStand evaluates at run time to determine the virtual device name on which to perform the switching operation.
  string returnValue = 1;
}

message StepType_Set_SwitchExecOperationRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies whether to connect or disconnect the routes the StepType.SwitchExecRoutesToConnect and StepType.SwitchExecRoutesToDisconnect properties specify, or disconnect all previously connected routes for a virtual device.
  // Note: This operation returns as soon as the instrument is ready for another operation, which might be before or after the switches involved settle. Enable SwitchExecWaitForDebounce if you want to wait until all switches have debounced.
  SwitchExecOperations val = 2;
}

message StepType_Set_SwitchExecOperationResponse {
}

message StepType_Get_SwitchExecOperationRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_SwitchExecOperationResponse {
  // Specifies whether to connect or disconnect the routes the StepType.SwitchExecRoutesToConnect and StepType.SwitchExecRoutesToDisconnect properties specify, or disconnect all previously connected routes for a virtual device.
  // Note: This operation returns as soon as the instrument is ready for another operation, which might be before or after the switches involved settle. Enable SwitchExecWaitForDebounce if you want to wait until all switches have debounced.
  SwitchExecOperations returnValue = 1;
}

message StepType_Set_SwitchExecRoutesToConnectRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies an expression TestStand evaluates at run time to determine the routes to connect when the value of the StepType.SwitchExecOperation property is Connect or ConnectDisconnect.
  // Note: The expression must be a valid route specification string the NI Switch Executive configuration defines for the virtual device name specified by StepType.SwitchExecVirtualDevice. The string can be a combination of route group alias names, route names, and physical route paths. You can use the SwitchFindRoute expression function to dynamically determine a physical route path at run time.
  string val = 2;
}

message StepType_Set_SwitchExecRoutesToConnectResponse {
}

message StepType_Get_SwitchExecRoutesToConnectRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_SwitchExecRoutesToConnectResponse {
  // Specifies an expression TestStand evaluates at run time to determine the routes to connect when the value of the StepType.SwitchExecOperation property is Connect or ConnectDisconnect.
  // Note: The expression must be a valid route specification string the NI Switch Executive configuration defines for the virtual device name specified by StepType.SwitchExecVirtualDevice. The string can be a combination of route group alias names, route names, and physical route paths. You can use the SwitchFindRoute expression function to dynamically determine a physical route path at run time.
  string returnValue = 1;
}

message StepType_Set_SwitchExecRoutesToDisconnectRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies an expression TestStand evaluates at run time to determine the routes to disconnect when the value of the StepType.SwitchExecOperation property is Disconnect or ConnectDisconnect.
  // Note: The expression must be a valid route specification string the NI Switch Executive configuration defines for the virtual device name the  StepType.SwitchExecVirtualDevice property specifies. The string can be a combination of route group alias names, route names, and physical route paths. You can use the SwitchFindRoute expression function to dynamically determine a physical route path at run time.
  string val = 2;
}

message StepType_Set_SwitchExecRoutesToDisconnectResponse {
}

message StepType_Get_SwitchExecRoutesToDisconnectRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_SwitchExecRoutesToDisconnectResponse {
  // Specifies an expression TestStand evaluates at run time to determine the routes to disconnect when the value of the StepType.SwitchExecOperation property is Disconnect or ConnectDisconnect.
  // Note: The expression must be a valid route specification string the NI Switch Executive configuration defines for the virtual device name the  StepType.SwitchExecVirtualDevice property specifies. The string can be a combination of route group alias names, route names, and physical route paths. You can use the SwitchFindRoute expression function to dynamically determine a physical route path at run time.
  string returnValue = 1;
}

message StepType_Set_SwitchExecMulticonnectModeRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the behavior when more than one connection operation occurs on a specific route.
  // Note: If the value of this property is Multiconnect, a route can exist longer if another step specifies a lifetime for the same route.
  SwitchExecMulticonnectModes val = 2;
}

message StepType_Set_SwitchExecMulticonnectModeResponse {
}

message StepType_Get_SwitchExecMulticonnectModeRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_SwitchExecMulticonnectModeResponse {
  // Specifies the behavior when more than one connection operation occurs on a specific route.
  // Note: If the value of this property is Multiconnect, a route can exist longer if another step specifies a lifetime for the same route.
  SwitchExecMulticonnectModes returnValue = 1;
}

message StepType_Set_SwitchExecOperationOrderRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies whether the Disconnect operation occurs before or after the Connect operation when the value of the StepType.SwitchExecOperation property is ConnectDisconnect.
  SwitchExecOperationOrders val = 2;
}

message StepType_Set_SwitchExecOperationOrderResponse {
}

message StepType_Get_SwitchExecOperationOrderRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_SwitchExecOperationOrderResponse {
  // Specifies whether the Disconnect operation occurs before or after the Connect operation when the value of the StepType.SwitchExecOperation property is ConnectDisconnect.
  SwitchExecOperationOrders returnValue = 1;
}

message StepType_Set_SwitchExecConnectionLifetimeRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies the lifetime TestStand applies to routes when the value of the StepType.SwitchExecOperation property is Connect or ConnectDisconnect. You can specify whether you want the route to exist until manually disconnected later or until the step, sequence, thread, or execution completes.
  // Note: If the value of the StepType.SwitchExecMulticonnectMode property is Multiconnect, a route can exist longer if another step specifies a lifetime for the same route. Selecting a lifetime other than Manual guarantees that the route stays connected as long as the step, sequence, thread, or execution in which you connect is executing. If you manually disconnect a previously connected route using a non-manual lifetime setting, TestStand releases the reference to the route for the last step that performed a connect action for the route.
  SwitchExecLifetimes val = 2;
}

message StepType_Set_SwitchExecConnectionLifetimeResponse {
}

message StepType_Get_SwitchExecConnectionLifetimeRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_SwitchExecConnectionLifetimeResponse {
  // Specifies the lifetime TestStand applies to routes when the value of the StepType.SwitchExecOperation property is Connect or ConnectDisconnect. You can specify whether you want the route to exist until manually disconnected later or until the step, sequence, thread, or execution completes.
  // Note: If the value of the StepType.SwitchExecMulticonnectMode property is Multiconnect, a route can exist longer if another step specifies a lifetime for the same route. Selecting a lifetime other than Manual guarantees that the route stays connected as long as the step, sequence, thread, or execution in which you connect is executing. If you manually disconnect a previously connected route using a non-manual lifetime setting, TestStand releases the reference to the route for the last step that performed a connect action for the route.
  SwitchExecLifetimes returnValue = 1;
}

message StepType_Set_SwitchExecWaitForDebounceRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies if the operation the StepType.SwitchExecOperation property specifies waits for all switches to debounce before returning to TestStand.
  // Note: The wait for debounce occurs after both the Connect and Disconnect operations are complete.
  bool val = 2;
}

message StepType_Set_SwitchExecWaitForDebounceResponse {
}

message StepType_Get_SwitchExecWaitForDebounceRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_SwitchExecWaitForDebounceResponse {
  // Specifies if the operation the StepType.SwitchExecOperation property specifies waits for all switches to debounce before returning to TestStand.
  // Note: The wait for debounce occurs after both the Connect and Disconnect operations are complete.
  bool returnValue = 1;
}

message StepType_Get_CodeTemplatesRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_CodeTemplatesResponse {
  // Returns the code templates for this step type.
  CodeTemplatesInstance returnValue = 1;
}

message StepType_Get_AdditionalResultsHintsRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_AdditionalResultsHintsResponse {
  // Returns a list of additional result hints associated with a step type.
  AdditionalResultsInstance returnValue = 1;
}

message StepType_Set_ResultRecordingOptionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies whether to record the result properties of the step.
  ResultRecordingOptions val = 2;
}

message StepType_Set_ResultRecordingOptionResponse {
}

message StepType_Get_ResultRecordingOptionRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_ResultRecordingOptionResponse {
  // Specifies whether to record the result properties of the step.
  ResultRecordingOptions returnValue = 1;
}

message StepType_Set_CanEncapsulateRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // Specifies whether this step and a corresponding end step can surround a block of contiguous steps.
  bool val = 2;
}

message StepType_Set_CanEncapsulateResponse {
}

message StepType_Get_CanEncapsulateRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_CanEncapsulateResponse {
  // Specifies whether this step and a corresponding end step can surround a block of contiguous steps.
  bool returnValue = 1;
}

message StepType_Set_CategoryRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
  // 
  StepTypeCategories val = 2;
}

message StepType_Set_CategoryResponse {
}

message StepType_Get_CategoryRequest {
  // The id of the StepType object.
  StepTypeInstance instance = 1;
}

message StepType_Get_CategoryResponse {
  // 
  StepTypeCategories returnValue = 1;
}

// Module
//
// Use objects from the module class to specify and obtain information about code modules that steps or step type substeps execute.
// Typically, you use this class only when you write a sequence editor.
// To obtain a Module object, use the Step.Module property. To access the properties and methods of an adapter-specific module class, query the Module object for the interface of the adapter-specific module interface you want.
//
service Module {
  // Method: AsPropertyObject
  //
  // Returns the underlying PropertyObject that represents the Module object.
  //
  // Use the PropertyObject to modify, add, or remove custom properties of the object.
  //
  // Module_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ModuleInstance - The id of the Module object.
  //
  // Module_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(Module_AsPropertyObjectRequest) returns (Module_AsPropertyObjectResponse);
  
  
  // Method: Load
  //
  // Loads the underlying code module.
  //
  // Module_LoadRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ModuleInstance - The id of the Module object.
  //    - loadOptions: int32 - Specifies one or more LoadModuleOptions using the bitwise-OR operator to modify the behavior of this method.
  //    - sequenceContextParam: ObjectInstance - If you pass LoadModule_EvaluateExpressions to the loadOptions parameter, pass a SequenceContext object for this parameter to use when evaluating expressions. If you call this method from a step in an execution, pass the sequence context of the execution.
  //
  // Module_LoadResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True on success or False if the module fails to load. 
  //
  rpc Load(Module_LoadRequest) returns (Module_LoadResponse);
  
  
  // Method: Unload
  //
  // Unloads the underlying code module.
  //
  // The module is not unloaded if it is currently executing.
  //
  // Module_UnloadRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ModuleInstance - The id of the Module object.
  //
  // Module_UnloadResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Indicates if the module was successfully unloaded. 
  //
  rpc Unload(Module_UnloadRequest) returns (Module_UnloadResponse);
  
  
  // Method: Specify
  //
  // Opens the Specify Module dialog box for the step, if one exists.
  //
  // Use the Module.CanSpecify property to verify that you can call this method. The current version of TestStand does not support all SpecifyModuleOptions constants for all adapters, as the following list indicates:
  // * LabVIEW Adapter—Only supports SpecMod_ReadOnly.    * LabWindows/CVI Adapter—Supports all options.    * C/C++ DLL Adapter—Supports all options.    * .NET—Only supports SpecMod_ReadOnly.    * ActiveX/COM Adapter—Only supports SpecMod_ReadOnly.    * HTBasic Adapter—Only supports SpecMod_ReadOnly.    * Sequence Adapter—Supports all options.
  //
  // Module_SpecifyRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ModuleInstance - The id of the Module object.
  //    - specModOptions: int32 - Specifies one or more SpecifyModuleOptions constants to modify the behavior of the Specify Module dialog box.
  //
  // Module_SpecifyResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the Specify Module dialog box modifies the module. 
  //
  rpc Specify(Module_SpecifyRequest) returns (Module_SpecifyResponse);
  
  
  // Method: CreateCode
  //
  // Creates code for the module.
  //
  // The contents of the code depend on the adapter used to create the module, the settings for the module, and the code templates configured for the step type of the step that contains the module. Use the Module.CanCreateCode property to determine whether this step can create code with this method.
  // For adapters that use Microsoft Visual Studio, calling this method can result in prompts to the user if any of the following conditions exist:
  // * Multiple versions of Visual Studio exist on the computer and you select the Always Prompt for Version option from the Version of Visual Studio to Use for Create and Edit Code ring control in the Adapter Configuration dialog box.    * Multiple versions of Visual Studio exist on the computer and you select the Use the Version that Matches the Project File option from the Version of Visual Studio to Use for Create and Edit Code ring control in the Adapter Configuration dialog box, and TestStand cannot match the version of the file.    * A method already exists with the same name.    * The specified solution does not contain the specified project.    * The specified project does not contain the specified source file.Note: The ActiveX/COM, Sequence, and HTBasic Adapters do not support this method.
  // For DotNetModule objects, use the DotNetCall.CreateCode method instead of this method.
  //
  // Module_CreateCodeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ModuleInstance - The id of the Module object.
  //
  // Module_CreateCodeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Indicates whether the module was modified. 
  //
  rpc CreateCode(Module_CreateCodeRequest) returns (Module_CreateCodeResponse);
  
  
  // Method: EditCode
  //
  // Launches an external application in which you can edit the code associated with the module.
  //
  // Launches the application associated with the adapter. For example, modules created with the LabVIEW Adapter launch LabVIEW.
  // For adapters that use Microsoft Visual Studio, calling this method can result in prompts to the user if any of the following conditions exist:
  // * Multiple versions of Visual Studio exist on the computer and you select the Always Prompt for Version option from the Version of Visual Studio to Use for Create and Edit Code ring control in the Adapter Configuration dialog box.    * Multiple versions of Visual Studio exist on the computer and you select the Use the Version that Matches the Project File option from the Version of Visual Studio to Use for Create and Edit Code ring control in the Adapter Configuration dialog box, and TestStand cannot match the version of the file.    * The specified solution does not contain the specified project.    * The specified project does not contain the specified source file.
  //
  // Module_EditCodeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ModuleInstance - The id of the Module object.
  //
  // Module_EditCodeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Indicates if the module was modified. 
  //
  rpc EditCode(Module_EditCodeRequest) returns (Module_EditCodeResponse);
  
  
  // Method: GetDescription
  //
  // Returns a description string for the module.
  //
  // This string can change whenever you modify any of the module settings.
  //
  // Module_GetDescriptionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ModuleInstance - The id of the Module object.
  //    - options: int32 - Specifies one or more StepDescriptionOptions constants. Use the bitwise-OR operator to specify multiple sequence file flags.
  //
  // Module_GetDescriptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetDescription(Module_GetDescriptionRequest) returns (Module_GetDescriptionResponse);
  
  
  // Method: LoadPrototype
  //
  // Loads the prototype for the module and sets the module parameters to match the prototype.
  //
  // This method replaces the following obsolete methods:
  // CommonCModule.LoadPrototype
  // LabVIEWModule.LoadPrototype
  // ActiveXModule.LoadMemberInfo
  // SequenceCallModule.LoadParameters
  // Depending on the type of module, calling this method loads a LabVIEW VI, a sequence file, a DLL, or an ActiveX Automation server to determine the module prototype.
  // Note: The .NET Adapter does not support this call and returns without taking any action. Use the DotNetCall.LoadPrototypeFromSignature method instead.
  //
  // Module_LoadPrototypeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ModuleInstance - The id of the Module object.
  //    - options: int32 - Specifies one or more LoadPrototypeOptions constants. Use the bitwise-OR operator to specify multiple flags.
  //
  // Module_LoadPrototypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the step was modified. 
  //
  rpc LoadPrototype(Module_LoadPrototypeRequest) returns (Module_LoadPrototypeResponse);
  
  
  // Method: ClearUnmappedArgumentValues
  //
  // Note: This method is obsolete. Use the UnmappedArgumentValues.ClearUnmappedArgumentValues.Clear method instead.
  //
  // Removes the items in the UnmappedArgumentValues collection.
  // Clear the items if you do not want them available for the next prototype change.
  //
  // Module_ClearUnmappedArgumentValuesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ModuleInstance - The id of the Module object.
  //
  // Module_ClearUnmappedArgumentValuesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ClearUnmappedArgumentValues(Module_ClearUnmappedArgumentValuesRequest) returns (Module_ClearUnmappedArgumentValuesResponse);
  
  
  // Method: GetLastLoadWarnings
  //
  // Returns an array of warnings that resulted from the last time you called the Module.Load method in an attempt to load the module.
  //
  // Module_GetLastLoadWarningsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ModuleInstance - The id of the Module object.
  //
  // Module_GetLastLoadWarningsResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated string - The return type of the String[] object.
  //
  rpc GetLastLoadWarnings(Module_GetLastLoadWarningsRequest) returns (Module_GetLastLoadWarningsResponse);
  
  

  // Property: Adapter
  //
  // Returns the Adapter object that this module uses.
  //
  // Module_Get_AdapterRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ModuleInstance - The id of the Module object.
  //
  // Module_Get_AdapterResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdapterInstance - Returns the Adapter object that this module uses. 
  //
  rpc Get_Adapter(Module_Get_AdapterRequest) returns (Module_Get_AdapterResponse);
  
  
  // Property: Step
  //
  // Returns a reference to the step in which the module resides.
  //
  // Steps share their modules between the original steps and the run-time copies of the steps, so this property always returns an original step and never a run-time copy of the step.
  //
  // Module_Get_StepRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ModuleInstance - The id of the Module object.
  //
  // Module_Get_StepResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepInstance - Returns a reference to the step in which the module resides. 
  //
  rpc Get_Step(Module_Get_StepRequest) returns (Module_Get_StepResponse);
  
  
  // Property: CanSpecify
  //
  // Indicates if the adapter for the module supports the Module.Specify method. Use the Step.CanSpecifyModule property to determine whether a step supports specifying a module.
  //
  // Module_Get_CanSpecifyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ModuleInstance - The id of the Module object.
  //
  // Module_Get_CanSpecifyResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Indicates if the adapter for the module supports the Module.Specify method. Use the Step.CanSpecifyModule property to determine whether a step supports specifying a module. 
  //
  rpc Get_CanSpecify(Module_Get_CanSpecifyRequest) returns (Module_Get_CanSpecifyResponse);
  
  
  // Property: CanCreateCode
  //
  // Indicates if the adapter for the module supports the Module.CreateCode method. Use the Step.CanCreateCode property to determine whether a step can create code for the module of the step.
  //
  // Module_Get_CanCreateCodeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ModuleInstance - The id of the Module object.
  //
  // Module_Get_CanCreateCodeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Indicates if the adapter for the module supports the Module.CreateCode method. Use the Step.CanCreateCode property to determine whether a step can create code for the module of the step. 
  //
  rpc Get_CanCreateCode(Module_Get_CanCreateCodeRequest) returns (Module_Get_CanCreateCodeResponse);
  
  
  // Property: CanEditCode
  //
  // Indicates if the adapter for the module supports the Module.EditCode method. Use the Step.CanEditCode property to determine whether a step can edit code for the module of the step.
  //
  // Module_Get_CanEditCodeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ModuleInstance - The id of the Module object.
  //
  // Module_Get_CanEditCodeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Indicates if the adapter for the module supports the Module.EditCode method. Use the Step.CanEditCode property to determine whether a step can edit code for the module of the step. 
  //
  rpc Get_CanEditCode(Module_Get_CanEditCodeRequest) returns (Module_Get_CanEditCodeResponse);
  
  
  // Property: UnmappedArgumentValues
  //
  // Returns the UnmappedArgumentValues collection, which contains a list of the arguments not used as inputs and outputs of the corresponding module.
  //
  // When a module prototype changes, TestStand attempts to map the current module arguments to the new prototype by looking for matching argument names and data types, and by matching argument positions and data types. If TestStand fails to assign an argument to the new prototype, the argument is added to this collection.
  // 
  // TestStand does not clear the collection when you load a new prototype. Use UnmappedArgumentValues.Clear method to clear the collection before calling Module.LoadPrototype.
  // For DotNetModule objects, use the DotNetCall.UnmappedArgumentValues property instead of this property.
  //
  // Module_Get_UnmappedArgumentValuesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ModuleInstance - The id of the Module object.
  //
  // Module_Get_UnmappedArgumentValuesResponse - The response message from the server. It provides the return value.
  //    - returnValue: UnmappedArgumentValuesInstance - Returns the UnmappedArgumentValues collection, which contains a list of the arguments not used as inputs and outputs of the corresponding module. 
  //
  rpc Get_UnmappedArgumentValues(Module_Get_UnmappedArgumentValuesRequest) returns (Module_Get_UnmappedArgumentValuesResponse);
  
  
  // Property: IsPrototypeIncompatible
  //
  // Indicates whether the module prototype is incompatible with the actual prototype of the external module.
  //
  // TestStand can read prototype information from some external modules, such as DLLs, LabVIEW VIs, or ActiveX COM type libraries. This property returns True if TestStand successfully reads prototype information from the external module and the module prototype does not match the prototype the external module specifies.
  //
  // Module_Get_IsPrototypeIncompatibleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ModuleInstance - The id of the Module object.
  //
  // Module_Get_IsPrototypeIncompatibleResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Indicates whether the module prototype is incompatible with the actual prototype of the external module. 
  //
  rpc Get_IsPrototypeIncompatible(Module_Get_IsPrototypeIncompatibleRequest) returns (Module_Get_IsPrototypeIncompatibleResponse);
  
  
}
message AdapterInstance {
  // Specifies the handle of the Adapter instance in the server.
  string id = 1;
}

message UnmappedArgumentValuesInstance {
  // Specifies the handle of the UnmappedArgumentValues instance in the server.
  string id = 1;
}
message Module_AsPropertyObjectRequest {
  // The id of the Module object.
  ModuleInstance instance = 1;
}

message Module_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message Module_LoadRequest {
  // The id of the Module object.
  ModuleInstance instance = 1;
  // Specifies one or more LoadModuleOptions using the bitwise-OR operator to modify the behavior of this method.
  int32 loadOptions = 2;
  // If you pass LoadModule_EvaluateExpressions to the loadOptions parameter, pass a SequenceContext object for this parameter to use when evaluating expressions. If you call this method from a step in an execution, pass the sequence context of the execution.
  PropertyObjectInstance sequenceContextParam = 3;
}

message Module_LoadResponse {
  // Returns True on success or False if the module fails to load.
  bool returnValue = 1;
}

message Module_UnloadRequest {
  // The id of the Module object.
  ModuleInstance instance = 1;
}

message Module_UnloadResponse {
  // Indicates if the module was successfully unloaded.
  bool returnValue = 1;
}

message Module_SpecifyRequest {
  // The id of the Module object.
  ModuleInstance instance = 1;
  // Specifies one or more SpecifyModuleOptions constants to modify the behavior of the Specify Module dialog box.
  SpecifyModuleOptions specModOptions = 2;
}

message Module_SpecifyResponse {
  // Returns True if the Specify Module dialog box modifies the module.
  bool returnValue = 1;
}

message Module_CreateCodeRequest {
  // The id of the Module object.
  ModuleInstance instance = 1;
}

message Module_CreateCodeResponse {
  // Indicates whether the module was modified.
  bool returnValue = 1;
}

message Module_EditCodeRequest {
  // The id of the Module object.
  ModuleInstance instance = 1;
}

message Module_EditCodeResponse {
  // Indicates if the module was modified.
  bool returnValue = 1;
}

message Module_GetDescriptionRequest {
  // The id of the Module object.
  ModuleInstance instance = 1;
  // Specifies one or more StepDescriptionOptions constants. Use the bitwise-OR operator to specify multiple sequence file flags.
  StepDescriptionOptions options = 2;
}

message Module_GetDescriptionResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message Module_LoadPrototypeRequest {
  // The id of the Module object.
  ModuleInstance instance = 1;
  // Specifies one or more LoadPrototypeOptions constants. Use the bitwise-OR operator to specify multiple flags.
  LoadPrototypeOptions options = 2;
}

message Module_LoadPrototypeResponse {
  // Returns a value that indicates whether the step was modified.
  bool returnValue = 1;
}

message Module_ClearUnmappedArgumentValuesRequest {
  // The id of the Module object.
  ModuleInstance instance = 1;
}

message Module_ClearUnmappedArgumentValuesResponse {
}

message Module_GetLastLoadWarningsRequest {
  // The id of the Module object.
  ModuleInstance instance = 1;
}

message Module_GetLastLoadWarningsResponse {
  // The return type of the String[] object.
  repeated string returnValue = 1;
}

message Module_Get_AdapterRequest {
  // The id of the Module object.
  ModuleInstance instance = 1;
}

message Module_Get_AdapterResponse {
  // Returns the Adapter object that this module uses.
  AdapterInstance returnValue = 1;
}

message Module_Get_StepRequest {
  // The id of the Module object.
  ModuleInstance instance = 1;
}

message Module_Get_StepResponse {
  // Returns a reference to the step in which the module resides.
  StepInstance returnValue = 1;
}

message Module_Get_CanSpecifyRequest {
  // The id of the Module object.
  ModuleInstance instance = 1;
}

message Module_Get_CanSpecifyResponse {
  // Indicates if the adapter for the module supports the Module.Specify method. Use the Step.CanSpecifyModule property to determine whether a step supports specifying a module.
  bool returnValue = 1;
}

message Module_Get_CanCreateCodeRequest {
  // The id of the Module object.
  ModuleInstance instance = 1;
}

message Module_Get_CanCreateCodeResponse {
  // Indicates if the adapter for the module supports the Module.CreateCode method. Use the Step.CanCreateCode property to determine whether a step can create code for the module of the step.
  bool returnValue = 1;
}

message Module_Get_CanEditCodeRequest {
  // The id of the Module object.
  ModuleInstance instance = 1;
}

message Module_Get_CanEditCodeResponse {
  // Indicates if the adapter for the module supports the Module.EditCode method. Use the Step.CanEditCode property to determine whether a step can edit code for the module of the step.
  bool returnValue = 1;
}

message Module_Get_UnmappedArgumentValuesRequest {
  // The id of the Module object.
  ModuleInstance instance = 1;
}

message Module_Get_UnmappedArgumentValuesResponse {
  // Returns the UnmappedArgumentValues collection, which contains a list of the arguments not used as inputs and outputs of the corresponding module.
  UnmappedArgumentValuesInstance returnValue = 1;
}

message Module_Get_IsPrototypeIncompatibleRequest {
  // The id of the Module object.
  ModuleInstance instance = 1;
}

message Module_Get_IsPrototypeIncompatibleResponse {
  // Indicates whether the module prototype is incompatible with the actual prototype of the external module.
  bool returnValue = 1;
}

// Adapter
//
// Use Adapter objects to configure and obtain information about the module adapters.
// Typically, you use this class only when you write a user interface application or sequence editor.
// Note: If you are considering writing a user interface application, National Instruments recommends using the TestStand User Interface (UI) Controls instead of writing the application using the TestStand Engine API.
// To obtain an Adapter object, call the Engine.GetAdapter method. Pass a zero-based index to specify the Adapter object for which you want to obtain a reference. To find out the number of available adapters, obtain the value of the Engine.NumAdapters property.
//
service Adapter {
  // Method: Configure
  //
  // Launches the Adapter Configuration dialog box for the adapter.
  //
  // When Adapter.IsConfigurable is False, calling this method has no effect.
  //
  // Adapter_ConfigureRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdapterInstance - The id of the Adapter object.
  //
  // Adapter_ConfigureResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Configure(Adapter_ConfigureRequest) returns (Adapter_ConfigureResponse);
  
  
  // Method: AsPropertyObject
  //
  // Returns the underlying PropertyObject that represents the adapter.
  //
  // Use the PropertyObject to edit, add, or remove custom properties of the adapter.
  //
  // Adapter_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdapterInstance - The id of the Adapter object.
  //
  // Adapter_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(Adapter_AsPropertyObjectRequest) returns (Adapter_AsPropertyObjectResponse);
  
  

  // Property: IsConfigurable
  //
  // Returns True if the adapter has an Adapter Configuration dialog box you can launch using the Adapter.Configure method.
  //
  // Adapter_Get_IsConfigurableRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdapterInstance - The id of the Adapter object.
  //
  // Adapter_Get_IsConfigurableResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the adapter has an Adapter Configuration dialog box you can launch using the Adapter.Configure method. 
  //
  rpc Get_IsConfigurable(Adapter_Get_IsConfigurableRequest) returns (Adapter_Get_IsConfigurableResponse);
  
  
  // Property: KeyName
  //
  // Returns the name other TestStand API functions, such as the Engine.NewStep method, use to refer to the adapter.
  //
  // Adapter_Get_KeyNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdapterInstance - The id of the Adapter object.
  //
  // Adapter_Get_KeyNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name other TestStand API functions, such as the Engine.NewStep method, use to refer to the adapter. 
  //
  rpc Get_KeyName(Adapter_Get_KeyNameRequest) returns (Adapter_Get_KeyNameResponse);
  
  
  // Property: DisplayName
  //
  // Returns the name to display for the adapter.
  //
  // Adapter_Get_DisplayNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdapterInstance - The id of the Adapter object.
  //
  // Adapter_Get_DisplayNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name to display for the adapter. 
  //
  rpc Get_DisplayName(Adapter_Get_DisplayNameRequest) returns (Adapter_Get_DisplayNameResponse);
  
  
  // Property: SmallIcon
  //
  // Returns a small icon that represents the adapter.
  //
  // Adapter_Get_SmallIconRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdapterInstance - The id of the Adapter object.
  //
  // Adapter_Get_SmallIconResponse - The response message from the server. It provides the return value.
  //    - returnValue: IPictureDispInstance - Returns a small icon that represents the adapter. 
  //
  rpc Get_SmallIcon(Adapter_Get_SmallIconRequest) returns (Adapter_Get_SmallIconResponse);
  
  
  // Property: LargeIcon
  //
  // Returns a large icon that represents the adapter.
  //
  // Adapter_Get_LargeIconRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdapterInstance - The id of the Adapter object.
  //
  // Adapter_Get_LargeIconResponse - The response message from the server. It provides the return value.
  //    - returnValue: IPictureDispInstance - Returns a large icon that represents the adapter. 
  //
  rpc Get_LargeIcon(Adapter_Get_LargeIconRequest) returns (Adapter_Get_LargeIconResponse);
  
  
  // Property: SmallIconIndex
  //
  // Returns a unique index for the small icon that represents the adapter. Use this index to retrieve the icon from the image list you obtain with the Engine.SmallImageListEx property.
  //
  // Adapter_Get_SmallIconIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdapterInstance - The id of the Adapter object.
  //
  // Adapter_Get_SmallIconIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a unique index for the small icon that represents the adapter. Use this index to retrieve the icon from the image list you obtain with the Engine.SmallImageListEx property. 
  //
  rpc Get_SmallIconIndex(Adapter_Get_SmallIconIndexRequest) returns (Adapter_Get_SmallIconIndexResponse);
  
  
  // Property: LargeIconIndex
  //
  // Returns a unique index for the large icon that represents the adapter. Use this index to retrieve the icon from the image list you obtain with the Engine.LargeImageListEx property.
  //
  // Adapter_Get_LargeIconIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdapterInstance - The id of the Adapter object.
  //
  // Adapter_Get_LargeIconIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a unique index for the large icon that represents the adapter. Use this index to retrieve the icon from the image list you obtain with the Engine.LargeImageListEx property. 
  //
  rpc Get_LargeIconIndex(Adapter_Get_LargeIconIndexRequest) returns (Adapter_Get_LargeIconIndexResponse);
  
  
  // Property: IconName
  //
  // Returns the icon filename for the adapter.
  //
  // Icon files are located in the <TestStand>\Components\Icons and <TestStand Public>\Components\Icons directories.
  //
  // Adapter_Get_IconNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdapterInstance - The id of the Adapter object.
  //
  // Adapter_Get_IconNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the icon filename for the adapter. 
  //
  rpc Get_IconName(Adapter_Get_IconNameRequest) returns (Adapter_Get_IconNameResponse);
  
  
  // Property: Hidden
  //
  // Specifies if the adapter is present in the list of adapters. This property is used to hide the adapter.
  //
  // Set this property to True to hide the adapter in controls that display the list of adapters.
  //
  // Adapter_Set_HiddenRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdapterInstance - The id of the Adapter object.
  //    - val: bool - Specifies if the adapter is present in the list of adapters. This property is used to hide the adapter. 
  //
  // Adapter_Set_HiddenResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Adapter_Get_HiddenRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdapterInstance - The id of the Adapter object.
  //
  // Adapter_Get_HiddenResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if the adapter is present in the list of adapters. This property is used to hide the adapter. 
  //
  rpc Set_Hidden(Adapter_Set_HiddenRequest) returns (Adapter_Set_HiddenResponse);
  rpc Get_Hidden(Adapter_Get_HiddenRequest) returns (Adapter_Get_HiddenResponse);
  
  
  // Property: ShowArgsInStepDescription
  //
  // Specifies that the description for the step that uses the adapter includes the arguments the step passes to the methods or sequences they call.
  //
  // Adapter_Set_ShowArgsInStepDescriptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdapterInstance - The id of the Adapter object.
  //    - val: bool - Specifies that the description for the step that uses the adapter includes the arguments the step passes to the methods or sequences they call. 
  //
  // Adapter_Set_ShowArgsInStepDescriptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Adapter_Get_ShowArgsInStepDescriptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdapterInstance - The id of the Adapter object.
  //
  // Adapter_Get_ShowArgsInStepDescriptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies that the description for the step that uses the adapter includes the arguments the step passes to the methods or sequences they call. 
  //
  rpc Set_ShowArgsInStepDescription(Adapter_Set_ShowArgsInStepDescriptionRequest) returns (Adapter_Set_ShowArgsInStepDescriptionResponse);
  rpc Get_ShowArgsInStepDescription(Adapter_Get_ShowArgsInStepDescriptionRequest) returns (Adapter_Get_ShowArgsInStepDescriptionResponse);
  
  
  // Property: IsSupported
  //
  // Indicates whether this adapter is supported by the current instance of the TestStand Engine.
  //
  // Use this property to check if an adapter is supported by the current instance of TestStand Engine.
  // Unsupported adapters exist in the TestStand Engine so that TestStand can open sequence files containing unsupported adapter steps. You can view and edit these sequence files, even though you cannot execute the unsupported steps.
  // Support for an adapter can depend on the bitness of TestStand. For example, 32-bit TestStand does not support the LabVIEW NXG Adapter.
  //
  // Adapter_Get_IsSupportedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdapterInstance - The id of the Adapter object.
  //
  // Adapter_Get_IsSupportedResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Indicates whether this adapter is supported by the current instance of the TestStand Engine. 
  //
  rpc Get_IsSupported(Adapter_Get_IsSupportedRequest) returns (Adapter_Get_IsSupportedResponse);
  
  
}
message Adapter_ConfigureRequest {
  // The id of the Adapter object.
  AdapterInstance instance = 1;
}

message Adapter_ConfigureResponse {
}

message Adapter_AsPropertyObjectRequest {
  // The id of the Adapter object.
  AdapterInstance instance = 1;
}

message Adapter_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message Adapter_Get_IsConfigurableRequest {
  // The id of the Adapter object.
  AdapterInstance instance = 1;
}

message Adapter_Get_IsConfigurableResponse {
  // Returns True if the adapter has an Adapter Configuration dialog box you can launch using the Adapter.Configure method.
  bool returnValue = 1;
}

message Adapter_Get_KeyNameRequest {
  // The id of the Adapter object.
  AdapterInstance instance = 1;
}

message Adapter_Get_KeyNameResponse {
  // Returns the name other TestStand API functions, such as the Engine.NewStep method, use to refer to the adapter.
  string returnValue = 1;
}

message Adapter_Get_DisplayNameRequest {
  // The id of the Adapter object.
  AdapterInstance instance = 1;
}

message Adapter_Get_DisplayNameResponse {
  // Returns the name to display for the adapter.
  string returnValue = 1;
}

message Adapter_Get_SmallIconRequest {
  // The id of the Adapter object.
  AdapterInstance instance = 1;
}

message Adapter_Get_SmallIconResponse {
  // Returns a small icon that represents the adapter.
  IPictureDispInstance returnValue = 1;
}

message Adapter_Get_LargeIconRequest {
  // The id of the Adapter object.
  AdapterInstance instance = 1;
}

message Adapter_Get_LargeIconResponse {
  // Returns a large icon that represents the adapter.
  IPictureDispInstance returnValue = 1;
}

message Adapter_Get_SmallIconIndexRequest {
  // The id of the Adapter object.
  AdapterInstance instance = 1;
}

message Adapter_Get_SmallIconIndexResponse {
  // Returns a unique index for the small icon that represents the adapter. Use this index to retrieve the icon from the image list you obtain with the Engine.SmallImageListEx property.
  int32 returnValue = 1;
}

message Adapter_Get_LargeIconIndexRequest {
  // The id of the Adapter object.
  AdapterInstance instance = 1;
}

message Adapter_Get_LargeIconIndexResponse {
  // Returns a unique index for the large icon that represents the adapter. Use this index to retrieve the icon from the image list you obtain with the Engine.LargeImageListEx property.
  int32 returnValue = 1;
}

message Adapter_Get_IconNameRequest {
  // The id of the Adapter object.
  AdapterInstance instance = 1;
}

message Adapter_Get_IconNameResponse {
  // Returns the icon filename for the adapter.
  string returnValue = 1;
}

message Adapter_Set_HiddenRequest {
  // The id of the Adapter object.
  AdapterInstance instance = 1;
  // Specifies if the adapter is present in the list of adapters. This property is used to hide the adapter.
  bool val = 2;
}

message Adapter_Set_HiddenResponse {
}

message Adapter_Get_HiddenRequest {
  // The id of the Adapter object.
  AdapterInstance instance = 1;
}

message Adapter_Get_HiddenResponse {
  // Specifies if the adapter is present in the list of adapters. This property is used to hide the adapter.
  bool returnValue = 1;
}

message Adapter_Set_ShowArgsInStepDescriptionRequest {
  // The id of the Adapter object.
  AdapterInstance instance = 1;
  // Specifies that the description for the step that uses the adapter includes the arguments the step passes to the methods or sequences they call.
  bool val = 2;
}

message Adapter_Set_ShowArgsInStepDescriptionResponse {
}

message Adapter_Get_ShowArgsInStepDescriptionRequest {
  // The id of the Adapter object.
  AdapterInstance instance = 1;
}

message Adapter_Get_ShowArgsInStepDescriptionResponse {
  // Specifies that the description for the step that uses the adapter includes the arguments the step passes to the methods or sequences they call.
  bool returnValue = 1;
}

message Adapter_Get_IsSupportedRequest {
  // The id of the Adapter object.
  AdapterInstance instance = 1;
}

message Adapter_Get_IsSupportedResponse {
  // Indicates whether this adapter is supported by the current instance of the TestStand Engine.
  bool returnValue = 1;
}

// UnmappedArgumentValues
//
// Use objects from the UnmappedArgumentValues class to obtain a list of the current arguments not used as inputs and outputs of the corresponding module. Use the Module.UnmappedArgumentValues and DotNetCall.UnmappedArgumentValues properties to obtain the collection of unmapped argument values for a module.
// 
// When a module prototype changes, TestStand attempts to map the current module arguments to the new prototype by looking for matching argument names and data types, and by matching argument positions and data types. If TestStand fails to assign an argument to the new prototype, the argument is added to this collection.
// 
// TestStand does not clear the collection when you load a new prototype. Use the UnmappedArgumentValues.Clear method to clear the collection before calling the Module.LoadPrototype  or DotNetCall.LoadPrototypeFromSignature method.
//
service UnmappedArgumentValues {
  // Method: Clear
  //
  // Removes all items from this collection.
  //
  // UnmappedArgumentValues_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UnmappedArgumentValuesInstance - The id of the UnmappedArgumentValues object.
  //
  // UnmappedArgumentValues_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(UnmappedArgumentValues_ClearRequest) returns (UnmappedArgumentValues_ClearResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // UnmappedArgumentValues_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: UnmappedArgumentValuesInstance - The id of the UnmappedArgumentValues object.
  //    - index: int32 - Specifies the zero-based index of the item to retrieve.
  //
  // UnmappedArgumentValues_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: UnmappedArgumentValueInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(UnmappedArgumentValues_Get_ItemRequest) returns (UnmappedArgumentValues_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // UnmappedArgumentValues_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UnmappedArgumentValuesInstance - The id of the UnmappedArgumentValues object.
  //
  // UnmappedArgumentValues_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(UnmappedArgumentValues_Get_CountRequest) returns (UnmappedArgumentValues_Get_CountResponse);
  
  
}
message UnmappedArgumentValueInstance {
  // Specifies the handle of the UnmappedArgumentValue instance in the server.
  string id = 1;
}
message UnmappedArgumentValues_ClearRequest {
  // The id of the UnmappedArgumentValues object.
  UnmappedArgumentValuesInstance instance = 1;
}

message UnmappedArgumentValues_ClearResponse {
}

message UnmappedArgumentValues_Get_ItemRequest {
  // The id of the UnmappedArgumentValues object.
  UnmappedArgumentValuesInstance instance = 1;
  // Specifies the zero-based index of the item to retrieve.
  optional int32 index = 2;
}

message UnmappedArgumentValues_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  UnmappedArgumentValueInstance returnValue = 1;
}

message UnmappedArgumentValues_Get_CountRequest {
  // The id of the UnmappedArgumentValues object.
  UnmappedArgumentValuesInstance instance = 1;
}

message UnmappedArgumentValues_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// UnmappedArgumentValue
//
// Use objects from the UnmappedArgumentValue class to obtain specific information for an item in the UnmappedArgumentValues collection class.
//
service UnmappedArgumentValue {
  // Property: Name
  //
  // Returns the symbolic name for the argument.
  //
  // UnmappedArgumentValue_Get_NameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UnmappedArgumentValueInstance - The id of the UnmappedArgumentValue object.
  //
  // UnmappedArgumentValue_Get_NameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the symbolic name for the argument. 
  //
  rpc Get_Name(UnmappedArgumentValue_Get_NameRequest) returns (UnmappedArgumentValue_Get_NameResponse);
  
  
  // Property: ValueExpr
  //
  // Returns the value expression for the argument.
  //
  // UnmappedArgumentValue_Get_ValueExprRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UnmappedArgumentValueInstance - The id of the UnmappedArgumentValue object.
  //
  // UnmappedArgumentValue_Get_ValueExprResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the value expression for the argument. 
  //
  rpc Get_ValueExpr(UnmappedArgumentValue_Get_ValueExprRequest) returns (UnmappedArgumentValue_Get_ValueExprResponse);
  
  
  // Property: TypeName
  //
  // Returns the type name of the argument.
  //
  // UnmappedArgumentValue_Get_TypeNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UnmappedArgumentValueInstance - The id of the UnmappedArgumentValue object.
  //
  // UnmappedArgumentValue_Get_TypeNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the type name of the argument. 
  //
  rpc Get_TypeName(UnmappedArgumentValue_Get_TypeNameRequest) returns (UnmappedArgumentValue_Get_TypeNameResponse);
  
  
  // Property: UnmappedArgumentValues
  //
  // Returns the UnmappedArgumentValues for fields of a container or elements of an array.
  //
  // UnmappedArgumentValue_Get_UnmappedArgumentValuesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UnmappedArgumentValueInstance - The id of the UnmappedArgumentValue object.
  //
  // UnmappedArgumentValue_Get_UnmappedArgumentValuesResponse - The response message from the server. It provides the return value.
  //    - returnValue: UnmappedArgumentValuesInstance - Returns the UnmappedArgumentValues for fields of a container or elements of an array. 
  //
  rpc Get_UnmappedArgumentValues(UnmappedArgumentValue_Get_UnmappedArgumentValuesRequest) returns (UnmappedArgumentValue_Get_UnmappedArgumentValuesResponse);
  
  
}
message UnmappedArgumentValue_Get_NameRequest {
  // The id of the UnmappedArgumentValue object.
  UnmappedArgumentValueInstance instance = 1;
}

message UnmappedArgumentValue_Get_NameResponse {
  // Returns the symbolic name for the argument.
  string returnValue = 1;
}

message UnmappedArgumentValue_Get_ValueExprRequest {
  // The id of the UnmappedArgumentValue object.
  UnmappedArgumentValueInstance instance = 1;
}

message UnmappedArgumentValue_Get_ValueExprResponse {
  // Returns the value expression for the argument.
  string returnValue = 1;
}

message UnmappedArgumentValue_Get_TypeNameRequest {
  // The id of the UnmappedArgumentValue object.
  UnmappedArgumentValueInstance instance = 1;
}

message UnmappedArgumentValue_Get_TypeNameResponse {
  // Returns the type name of the argument.
  string returnValue = 1;
}

message UnmappedArgumentValue_Get_UnmappedArgumentValuesRequest {
  // The id of the UnmappedArgumentValue object.
  UnmappedArgumentValueInstance instance = 1;
}

message UnmappedArgumentValue_Get_UnmappedArgumentValuesResponse {
  // Returns the UnmappedArgumentValues for fields of a container or elements of an array.
  UnmappedArgumentValuesInstance returnValue = 1;
}

// CodeTemplates
//
// A collection of CodeTemplate objects. Code templates are associated with adapters and represent the default code that modules use when creating code for an instance of a step type. Use the StepType.CodeTemplates property to obtain a collection of CodeTemplate objects associated with a step type.
//
service CodeTemplates {
  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // CodeTemplates_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CodeTemplatesInstance - The id of the CodeTemplates object.
  //    - index: int32 - Specifies the zero-based index of the item to retrieve.
  //
  // CodeTemplates_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: CodeTemplateInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(CodeTemplates_Get_ItemRequest) returns (CodeTemplates_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // CodeTemplates_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CodeTemplatesInstance - The id of the CodeTemplates object.
  //
  // CodeTemplates_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(CodeTemplates_Get_CountRequest) returns (CodeTemplates_Get_CountResponse);
  
  
}
message CodeTemplateInstance {
  // Specifies the handle of the CodeTemplate instance in the server.
  string id = 1;
}
message CodeTemplates_Get_ItemRequest {
  // The id of the CodeTemplates object.
  CodeTemplatesInstance instance = 1;
  // Specifies the zero-based index of the item to retrieve.
  optional int32 index = 2;
}

message CodeTemplates_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  CodeTemplateInstance returnValue = 1;
}

message CodeTemplates_Get_CountRequest {
  // The id of the CodeTemplates object.
  CodeTemplatesInstance instance = 1;
}

message CodeTemplates_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// CodeTemplate
//
// Use this interface to obtain information about a code template. Code templates are associated with adapters and represent the default code that modules use when creating code for an instance of a step type. Use the StepType.CodeTemplates property to obtain a collection of CodeTemplate objects associated with a step type.
//
service CodeTemplate {
  // Property: Type
  //
  // Returns the type of this code template. The code template type determines which adapter the code module is associated with.
  //
  // CodeTemplate_Get_TypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CodeTemplateInstance - The id of the CodeTemplate object.
  //
  // CodeTemplate_Get_TypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: CodeTemplateTypes - Returns the type of this code template. The code template type determines which adapter the code module is associated with. 
  //
  rpc Get_Type(CodeTemplate_Get_TypeRequest) returns (CodeTemplate_Get_TypeResponse);
  
  
  // Property: Name
  //
  // Returns the name of this code template. You can use this name when you set the CommonCModule.CodeTemplateName property before calling the Module.CreateCode or CommonCModule.LoadPrototypeFromCodeTemplate methods.
  //
  // CodeTemplate_Get_NameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CodeTemplateInstance - The id of the CodeTemplate object.
  //
  // CodeTemplate_Get_NameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of this code template. You can use this name when you set the CommonCModule.CodeTemplateName property before calling the Module.CreateCode or CommonCModule.LoadPrototypeFromCodeTemplate methods. 
  //
  rpc Get_Name(CodeTemplate_Get_NameRequest) returns (CodeTemplate_Get_NameResponse);
  
  
  // Property: Description
  //
  // Returns the description of this code template.
  //
  // CodeTemplate_Get_DescriptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CodeTemplateInstance - The id of the CodeTemplate object.
  //
  // CodeTemplate_Get_DescriptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the description of this code template. 
  //
  rpc Get_Description(CodeTemplate_Get_DescriptionRequest) returns (CodeTemplate_Get_DescriptionResponse);
  
  
}
message CodeTemplate_Get_TypeRequest {
  // The id of the CodeTemplate object.
  CodeTemplateInstance instance = 1;
}

message CodeTemplate_Get_TypeResponse {
  // Returns the type of this code template. The code template type determines which adapter the code module is associated with.
  CodeTemplateTypes returnValue = 1;
}

message CodeTemplate_Get_NameRequest {
  // The id of the CodeTemplate object.
  CodeTemplateInstance instance = 1;
}

message CodeTemplate_Get_NameResponse {
  // Returns the name of this code template. You can use this name when you set the CommonCModule.CodeTemplateName property before calling the Module.CreateCode or CommonCModule.LoadPrototypeFromCodeTemplate methods.
  string returnValue = 1;
}

message CodeTemplate_Get_DescriptionRequest {
  // The id of the CodeTemplate object.
  CodeTemplateInstance instance = 1;
}

message CodeTemplate_Get_DescriptionResponse {
  // Returns the description of this code template.
  string returnValue = 1;
}

// AdditionalResults
//
// This class represents a collection of AdditionalResult objects. Use the Step.AdditionalResults.ParameterResults, Step.AdditionalResults.CustomResults, or AdditionalResult.Elements properties to obtain an AdditionalResults collection.
//
service AdditionalResults {
  // Method: Insert
  //
  // Adds a new item to the collection.
  //
  // AdditionalResults_InsertRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: AdditionalResultsInstance - The id of the AdditionalResults object.
  //    - resultName: string - Specifies the AdditionalResult.Name property of the new additional result.
  //    - resultValueToLog: string - Specifies the AdditionalResult.ValueToLog property for the new additional result.
  //    - resultCondition: string - Specifies the AdditionalResult.Condition property of the new additional result.
  //    - resultFlags: int32 - Specifies the AdditionalResult.Flags property of the new additional result.
  //    - index: int32 - Specifies where to insert the new item. Pass -1 to insert the item at the end 
  //      of the collection.
  //
  // AdditionalResults_InsertResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdditionalResultInstance - The additional result this method inserts into the collection. 
  //
  rpc Insert(AdditionalResults_InsertRequest) returns (AdditionalResults_InsertResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // AdditionalResults_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: AdditionalResultsInstance - The id of the AdditionalResults object.
  //    - index: int32 - Specifies the zero-based index of the item to remove.
  //
  // AdditionalResults_RemoveResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdditionalResultInstance - The additional result this method removes from the collection. 
  //
  rpc Remove(AdditionalResults_RemoveRequest) returns (AdditionalResults_RemoveResponse);
  
  
  // Method: Clear
  //
  // Removes all the additional results from the collection.
  //
  // AdditionalResults_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdditionalResultsInstance - The id of the AdditionalResults object.
  //
  // AdditionalResults_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(AdditionalResults_ClearRequest) returns (AdditionalResults_ClearResponse);
  
  
  // Method: Move
  //
  // Moves an additional result within the collection.
  //
  // AdditionalResults_MoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: AdditionalResultsInstance - The id of the AdditionalResults object.
  //    - index: int32 - Specifies the zero-based index of the item to move.
  //    - newIndex: int32 - Specifies the zero-based index to move the item to.
  //
  // AdditionalResults_MoveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Move(AdditionalResults_MoveRequest) returns (AdditionalResults_MoveResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // AdditionalResults_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: AdditionalResultsInstance - The id of the AdditionalResults object.
  //    - index: int32 - Specifies the zero-based index of the item to retrieve.
  //
  // AdditionalResults_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdditionalResultInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(AdditionalResults_Get_ItemRequest) returns (AdditionalResults_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // AdditionalResults_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdditionalResultsInstance - The id of the AdditionalResults object.
  //
  // AdditionalResults_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(AdditionalResults_Get_CountRequest) returns (AdditionalResults_Get_CountResponse);
  
  
  // Property: CheckedItemCount
  //
  // Returns the number of items in the collection with an AdditionalResult.CheckedState property of CheckedState_Checked or CheckedState_Indeterminate.
  //
  // AdditionalResults_Get_CheckedItemCountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdditionalResultsInstance - The id of the AdditionalResults object.
  //
  // AdditionalResults_Get_CheckedItemCountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection with an AdditionalResult.CheckedState property of CheckedState_Checked or CheckedState_Indeterminate. 
  //
  rpc Get_CheckedItemCount(AdditionalResults_Get_CheckedItemCountRequest) returns (AdditionalResults_Get_CheckedItemCountResponse);
  
  
}
message AdditionalResultInstance {
  // Specifies the handle of the AdditionalResult instance in the server.
  string id = 1;
}
message AdditionalResults_InsertRequest {
  // The id of the AdditionalResults object.
  AdditionalResultsInstance instance = 1;
  // Specifies the AdditionalResult.Name property of the new additional result.
  string resultName = 2;
  // Specifies the AdditionalResult.ValueToLog property for the new additional result.
  string resultValueToLog = 3;
  // Specifies the AdditionalResult.Condition property of the new additional result.
  string resultCondition = 4;
  // Specifies the AdditionalResult.Flags property of the new additional result.
  int32 resultFlags = 5;
  // Specifies where to insert the new item. Pass -1 to insert the item at the end
  // of the collection.
  int32 index = 6;
}

message AdditionalResults_InsertResponse {
  // The additional result this method inserts into the collection.
  AdditionalResultInstance returnValue = 1;
}

message AdditionalResults_RemoveRequest {
  // The id of the AdditionalResults object.
  AdditionalResultsInstance instance = 1;
  // Specifies the zero-based index of the item to remove.
  int32 index = 2;
}

message AdditionalResults_RemoveResponse {
  // The additional result this method removes from the collection.
  AdditionalResultInstance returnValue = 1;
}

message AdditionalResults_ClearRequest {
  // The id of the AdditionalResults object.
  AdditionalResultsInstance instance = 1;
}

message AdditionalResults_ClearResponse {
}

message AdditionalResults_MoveRequest {
  // The id of the AdditionalResults object.
  AdditionalResultsInstance instance = 1;
  // Specifies the zero-based index of the item to move.
  int32 index = 2;
  // Specifies the zero-based index to move the item to.
  int32 newIndex = 3;
}

message AdditionalResults_MoveResponse {
}

message AdditionalResults_Get_ItemRequest {
  // The id of the AdditionalResults object.
  AdditionalResultsInstance instance = 1;
  // Specifies the zero-based index of the item to retrieve.
  optional int32 index = 2;
}

message AdditionalResults_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  AdditionalResultInstance returnValue = 1;
}

message AdditionalResults_Get_CountRequest {
  // The id of the AdditionalResults object.
  AdditionalResultsInstance instance = 1;
}

message AdditionalResults_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

message AdditionalResults_Get_CheckedItemCountRequest {
  // The id of the AdditionalResults object.
  AdditionalResultsInstance instance = 1;
}

message AdditionalResults_Get_CheckedItemCountResponse {
  // Returns the number of items in the collection with an AdditionalResult.CheckedState property of CheckedState_Checked or CheckedState_Indeterminate.
  int32 returnValue = 1;
}

// AdditionalResult
//
// An AdditionalResult specifies additional data to add to the result list when a step executes. An AdditionalResult can be an arbitrary piece of data or the value of a module parameter. An AdditionalResult is a member of the Step.AdditionalResults.ParameterResults  collection, the Step.AdditionalResults.CustomResults collection, or the AdditionalResult.Elements collection.
//
service AdditionalResult {
  // Property: Name
  //
  // An expression that evaluates to the name of the additional result.
  //
  // The name is usually a string literal or uses the ResStr expression function to specify a localized string.
  //
  // AdditionalResult_Set_NameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdditionalResultInstance - The id of the AdditionalResult object.
  //    - val: string - An expression that evaluates to the name of the additional result. 
  //
  // AdditionalResult_Set_NameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // AdditionalResult_Get_NameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdditionalResultInstance - The id of the AdditionalResult object.
  //
  // AdditionalResult_Get_NameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - An expression that evaluates to the name of the additional result. 
  //
  rpc Set_Name(AdditionalResult_Set_NameRequest) returns (AdditionalResult_Set_NameResponse);
  rpc Get_Name(AdditionalResult_Get_NameRequest) returns (AdditionalResult_Get_NameResponse);
  
  
  // Property: CheckedState
  //
  // Specifies to log the additional result. If the CheckedState property is CheckedState_Unchecked, TestStand does not log the additional result. The value of the CheckedState property reflects the CheckedState of the AdditionalResult.Elements collection when the Elements collection is not empty. If all the Elements have the same CheckedState value, the CheckedState property uses the CheckedState value of the Elements. If all the Elements do not have the same CheckedState value, the value of the AdditionalResult.CheckedState property is CheckedState_Indeterminate.
  // Setting the CheckedState property value sets the CheckedState value of all Elements to the same value and updates the CheckedState value of the AdditionalResult.ParentAdditionalResult property.
  //
  // AdditionalResult_Set_CheckedStateRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdditionalResultInstance - The id of the AdditionalResult object.
  //    - val: CheckedStates - Specifies to log the additional result. If the CheckedState property is CheckedState_Unchecked, TestStand does not log the additional result. The value of the CheckedState property reflects the CheckedState of the AdditionalResult.Elements collection when the Elements collection is not empty. If all the Elements have the same CheckedState value, the CheckedState property uses the CheckedState value of the Elements. If all the Elements do not have the same CheckedState value, the value of the AdditionalResult.CheckedState property is CheckedState_Indeterminate. Setting the CheckedState property value sets the CheckedState value of all Elements to the same value and updates the CheckedState value of the AdditionalResult.ParentAdditionalResult property. 
  //
  // AdditionalResult_Set_CheckedStateResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // AdditionalResult_Get_CheckedStateRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdditionalResultInstance - The id of the AdditionalResult object.
  //
  // AdditionalResult_Get_CheckedStateResponse - The response message from the server. It provides the return value.
  //    - returnValue: CheckedStates - Specifies to log the additional result. If the CheckedState property is CheckedState_Unchecked, TestStand does not log the additional result. The value of the CheckedState property reflects the CheckedState of the AdditionalResult.Elements collection when the Elements collection is not empty. If all the Elements have the same CheckedState value, the CheckedState property uses the CheckedState value of the Elements. If all the Elements do not have the same CheckedState value, the value of the AdditionalResult.CheckedState property is CheckedState_Indeterminate. Setting the CheckedState property value sets the CheckedState value of all Elements to the same value and updates the CheckedState value of the AdditionalResult.ParentAdditionalResult property. 
  //
  rpc Set_CheckedState(AdditionalResult_Set_CheckedStateRequest) returns (AdditionalResult_Set_CheckedStateResponse);
  rpc Get_CheckedState(AdditionalResult_Get_CheckedStateRequest) returns (AdditionalResult_Get_CheckedStateResponse);
  
  
  // Property: ValueToLog
  //
  // An expression that specifies the value to log for the additional result.
  //
  // AdditionalResult_Set_ValueToLogRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdditionalResultInstance - The id of the AdditionalResult object.
  //    - val: string - An expression that specifies the value to log for the additional result. 
  //
  // AdditionalResult_Set_ValueToLogResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // AdditionalResult_Get_ValueToLogRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdditionalResultInstance - The id of the AdditionalResult object.
  //
  // AdditionalResult_Get_ValueToLogResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - An expression that specifies the value to log for the additional result. 
  //
  rpc Set_ValueToLog(AdditionalResult_Set_ValueToLogRequest) returns (AdditionalResult_Set_ValueToLogResponse);
  rpc Get_ValueToLog(AdditionalResult_Get_ValueToLogRequest) returns (AdditionalResult_Get_ValueToLogResponse);
  
  
  // Property: Condition
  //
  // An expression that must be empty or evaluate to True to log the additional result.
  //
  // AdditionalResult_Set_ConditionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdditionalResultInstance - The id of the AdditionalResult object.
  //    - val: string - An expression that must be empty or evaluate to True to log the additional result. 
  //
  // AdditionalResult_Set_ConditionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // AdditionalResult_Get_ConditionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdditionalResultInstance - The id of the AdditionalResult object.
  //
  // AdditionalResult_Get_ConditionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - An expression that must be empty or evaluate to True to log the additional result. 
  //
  rpc Set_Condition(AdditionalResult_Set_ConditionRequest) returns (AdditionalResult_Set_ConditionResponse);
  rpc Get_Condition(AdditionalResult_Get_ConditionRequest) returns (AdditionalResult_Get_ConditionResponse);
  
  
  // Property: Flags
  //
  // Specifies the PropertyFlags TestStand sets when it logs the additional result. You can use any combination of the PropFlags_IncludeInReport, PropFlags_IsMeasurementValue, and PropFlags_IsLimit property flags.
  //
  // AdditionalResult_Set_FlagsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdditionalResultInstance - The id of the AdditionalResult object.
  //    - val: int32 - Specifies the PropertyFlags TestStand sets when it logs the additional result. You can use any combination of the PropFlags_IncludeInReport, PropFlags_IsMeasurementValue, and PropFlags_IsLimit property flags. 
  //
  // AdditionalResult_Set_FlagsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // AdditionalResult_Get_FlagsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdditionalResultInstance - The id of the AdditionalResult object.
  //
  // AdditionalResult_Get_FlagsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the PropertyFlags TestStand sets when it logs the additional result. You can use any combination of the PropFlags_IncludeInReport, PropFlags_IsMeasurementValue, and PropFlags_IsLimit property flags. 
  //
  rpc Set_Flags(AdditionalResult_Set_FlagsRequest) returns (AdditionalResult_Set_FlagsResponse);
  rpc Get_Flags(AdditionalResult_Get_FlagsRequest) returns (AdditionalResult_Get_FlagsResponse);
  
  
  // Property: IsAnyType
  //
  // For a custom additional result, if this property is False, you can set the AdditionalResult.Type property to specify the type of the AdditionalResult.ValueToLog property. If this property is True, the ValueToLog property can be any type. For a parameter additional result, this property is always False.
  //
  // AdditionalResult_Set_IsAnyTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdditionalResultInstance - The id of the AdditionalResult object.
  //    - val: bool - For a custom additional result, if this property is False, you can set the AdditionalResult.Type property to specify the type of the AdditionalResult.ValueToLog property. If this property is True, the ValueToLog property can be any type. For a parameter additional result, this property is always False. 
  //
  // AdditionalResult_Set_IsAnyTypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // AdditionalResult_Get_IsAnyTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdditionalResultInstance - The id of the AdditionalResult object.
  //
  // AdditionalResult_Get_IsAnyTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - For a custom additional result, if this property is False, you can set the AdditionalResult.Type property to specify the type of the AdditionalResult.ValueToLog property. If this property is True, the ValueToLog property can be any type. For a parameter additional result, this property is always False. 
  //
  rpc Set_IsAnyType(AdditionalResult_Set_IsAnyTypeRequest) returns (AdditionalResult_Set_IsAnyTypeResponse);
  rpc Get_IsAnyType(AdditionalResult_Get_IsAnyTypeRequest) returns (AdditionalResult_Get_IsAnyTypeResponse);
  
  
  // Property: Elements
  //
  // If the AdditionalResult.IsAnyType property is False, this property is a collection of AdditionalResult objects that correspond to the fields of the type the AdditionalResult.Type property specifies. If the IsAnyType property is True, this property is an empty collection.
  //
  // Setting the IsAnyType property or the Type property updates the members in the Elements collection.
  //
  // AdditionalResult_Get_ElementsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdditionalResultInstance - The id of the AdditionalResult object.
  //
  // AdditionalResult_Get_ElementsResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdditionalResultsInstance - If the AdditionalResult.IsAnyType property is False, this property is a collection of AdditionalResult objects that correspond to the fields of the type the AdditionalResult.Type property specifies. If the IsAnyType property is True, this property is an empty collection. 
  //
  rpc Get_Elements(AdditionalResult_Get_ElementsRequest) returns (AdditionalResult_Get_ElementsResponse);
  
  
  // Property: Type
  //
  // For a custom additional result, if the AdditionalResult.IsAnyType property is True, this property returns the type of the AdditionalResult.ValueToLog property. If the AdditionalResult.IsAnyType property is False, set this property to a PropertyObjectType object  to specify the type of the AdditionalResult.ValueToLog property. Use the PropertyObject.Type property or the Engine.NewPropertyObjectType method to obtain a PropertyObjectType object to set this property to. For a parameter additional result, this property returns the type the parameter specifies.
  //
  // For a custom additional result, when the AdditionalResult.IsAnyType property is True, this property is NULL if the AdditionalResult.ValueToLog property is empty or contains an error. When the AdditionalResult.IsAnyType property is False, this property is the value you last set the property to.
  // Setting the AdditionalResult.Type property updates the members in the AdditionalResult.Elements collection and maps existing settings from the old Elements collection to the new Elements collection based on the AdditionalResult.Name and Type properties of the members. TestStand adds Elements from the old collection that do not map to Elements in the new collection to the UnmappedAdditionalResults collection.
  //
  // AdditionalResult_Set_TypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdditionalResultInstance - The id of the AdditionalResult object.
  //    - val: PropertyObjectTypeInstance - For a custom additional result, if the AdditionalResult.IsAnyType property is True, this property returns the type of the AdditionalResult.ValueToLog property. If the AdditionalResult.IsAnyType property is False, set this property to a PropertyObjectType object  to specify the type of the AdditionalResult.ValueToLog property. Use the PropertyObject.Type property or the Engine.NewPropertyObjectType method to obtain a PropertyObjectType object to set this property to. For a parameter additional result, this property returns the type the parameter specifies. 
  //
  // AdditionalResult_Set_TypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // AdditionalResult_Get_TypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdditionalResultInstance - The id of the AdditionalResult object.
  //
  // AdditionalResult_Get_TypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectTypeInstance - For a custom additional result, if the AdditionalResult.IsAnyType property is True, this property returns the type of the AdditionalResult.ValueToLog property. If the AdditionalResult.IsAnyType property is False, set this property to a PropertyObjectType object  to specify the type of the AdditionalResult.ValueToLog property. Use the PropertyObject.Type property or the Engine.NewPropertyObjectType method to obtain a PropertyObjectType object to set this property to. For a parameter additional result, this property returns the type the parameter specifies. 
  //
  rpc Set_Type(AdditionalResult_Set_TypeRequest) returns (AdditionalResult_Set_TypeResponse);
  rpc Get_Type(AdditionalResult_Get_TypeRequest) returns (AdditionalResult_Get_TypeResponse);
  
  
  // Property: ParentAdditionalResult
  //
  // If this property is not NULL, this property returns the AdditionalResult with an AdditionalResult.Elements collection that contains this AdditionalResult.
  //
  // AdditionalResult_Get_ParentAdditionalResultRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdditionalResultInstance - The id of the AdditionalResult object.
  //
  // AdditionalResult_Get_ParentAdditionalResultResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdditionalResultInstance - If this property is not NULL, this property returns the AdditionalResult with an AdditionalResult.Elements collection that contains this AdditionalResult. 
  //
  rpc Get_ParentAdditionalResult(AdditionalResult_Get_ParentAdditionalResultRequest) returns (AdditionalResult_Get_ParentAdditionalResultResponse);
  
  
  // Property: AreElementsIncompatibleWithType
  //
  // Returns True if the members of the AdditionalResult.Elements collection are incompatible with the fields defined in the type that the AdditionalResult.Type property specifies.
  //
  // Setting the AdditionalResult.IsAnyType property or the Type property updates the members in the Elements collection. The members of Elements are compatible with the Type property as long as the number of Elements is the same as the number of fields the Type property defines and the AdditionalResult.Name and Type properties of each member of Elements match a corresponding field the Type defines.
  //
  // AdditionalResult_Get_AreElementsIncompatibleWithTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdditionalResultInstance - The id of the AdditionalResult object.
  //
  // AdditionalResult_Get_AreElementsIncompatibleWithTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the members of the AdditionalResult.Elements collection are incompatible with the fields defined in the type that the AdditionalResult.Type property specifies. 
  //
  rpc Get_AreElementsIncompatibleWithType(AdditionalResult_Get_AreElementsIncompatibleWithTypeRequest) returns (AdditionalResult_Get_AreElementsIncompatibleWithTypeResponse);
  
  
  // Property: UnmappedAdditionalResults
  //
  // A collection of AdditionalResult objects from an AdditionalResult.Elements collection that TestStand could not map to an updated Elements collection when you set the AdditionalResult.Type property. TestStand does not record the AdditionalResult objects in this collection.
  //
  // AdditionalResult_Get_UnmappedAdditionalResultsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdditionalResultInstance - The id of the AdditionalResult object.
  //
  // AdditionalResult_Get_UnmappedAdditionalResultsResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdditionalResultsInstance - A collection of AdditionalResult objects from an AdditionalResult.Elements collection that TestStand could not map to an updated Elements collection when you set the AdditionalResult.Type property. TestStand does not record the AdditionalResult objects in this collection. 
  //
  rpc Get_UnmappedAdditionalResults(AdditionalResult_Get_UnmappedAdditionalResultsRequest) returns (AdditionalResult_Get_UnmappedAdditionalResultsResponse);
  
  
  // Property: Kind
  //
  // Returns the type of additional result for the object.
  //
  // AdditionalResult_Get_KindRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdditionalResultInstance - The id of the AdditionalResult object.
  //
  // AdditionalResult_Get_KindResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdditionalResultKinds - Returns the type of additional result for the object. 
  //
  rpc Get_Kind(AdditionalResult_Get_KindRequest) returns (AdditionalResult_Get_KindResponse);
  
  
  // Property: ParameterObject
  //
  // For a parameter additional result, this property returns the module parameter of which the additional result logs the value. This property returns NULL for a custom additional result.
  //
  // This property can specify a LabVIEWParameter, LabVIEWParameterElement, CVIParameter, DllParameter, SequenceCallParameter, DotNetParameter, DotNetCall, or ActiveXParameter object, depending on the step adapter and the location of the parameter in the hierarchy of module call parameters. A parameter object that is a CVIParameter or DllParameter object is also a CommonCParameter object.
  //
  // AdditionalResult_Get_ParameterObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdditionalResultInstance - The id of the AdditionalResult object.
  //
  // AdditionalResult_Get_ParameterObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - For a parameter additional result, this property returns the module parameter of which the additional result logs the value. This property returns NULL for a custom additional result. 
  //
  rpc Get_ParameterObject(AdditionalResult_Get_ParameterObjectRequest) returns (AdditionalResult_Get_ParameterObjectResponse);
  
  
}
message AdditionalResult_Set_NameRequest {
  // The id of the AdditionalResult object.
  AdditionalResultInstance instance = 1;
  // An expression that evaluates to the name of the additional result.
  string val = 2;
}

message AdditionalResult_Set_NameResponse {
}

message AdditionalResult_Get_NameRequest {
  // The id of the AdditionalResult object.
  AdditionalResultInstance instance = 1;
}

message AdditionalResult_Get_NameResponse {
  // An expression that evaluates to the name of the additional result.
  string returnValue = 1;
}

message AdditionalResult_Set_CheckedStateRequest {
  // The id of the AdditionalResult object.
  AdditionalResultInstance instance = 1;
  // Specifies to log the additional result. If the CheckedState property is CheckedState_Unchecked, TestStand does not log the additional result. The value of the CheckedState property reflects the CheckedState of the AdditionalResult.Elements collection when the Elements collection is not empty. If all the Elements have the same CheckedState value, the CheckedState property uses the CheckedState value of the Elements. If all the Elements do not have the same CheckedState value, the value of the AdditionalResult.CheckedState property is CheckedState_Indeterminate.
  // Setting the CheckedState property value sets the CheckedState value of all Elements to the same value and updates the CheckedState value of the AdditionalResult.ParentAdditionalResult property.
  CheckedStates val = 2;
}

message AdditionalResult_Set_CheckedStateResponse {
}

message AdditionalResult_Get_CheckedStateRequest {
  // The id of the AdditionalResult object.
  AdditionalResultInstance instance = 1;
}

message AdditionalResult_Get_CheckedStateResponse {
  // Specifies to log the additional result. If the CheckedState property is CheckedState_Unchecked, TestStand does not log the additional result. The value of the CheckedState property reflects the CheckedState of the AdditionalResult.Elements collection when the Elements collection is not empty. If all the Elements have the same CheckedState value, the CheckedState property uses the CheckedState value of the Elements. If all the Elements do not have the same CheckedState value, the value of the AdditionalResult.CheckedState property is CheckedState_Indeterminate.
  // Setting the CheckedState property value sets the CheckedState value of all Elements to the same value and updates the CheckedState value of the AdditionalResult.ParentAdditionalResult property.
  CheckedStates returnValue = 1;
}

message AdditionalResult_Set_ValueToLogRequest {
  // The id of the AdditionalResult object.
  AdditionalResultInstance instance = 1;
  // An expression that specifies the value to log for the additional result.
  string val = 2;
}

message AdditionalResult_Set_ValueToLogResponse {
}

message AdditionalResult_Get_ValueToLogRequest {
  // The id of the AdditionalResult object.
  AdditionalResultInstance instance = 1;
}

message AdditionalResult_Get_ValueToLogResponse {
  // An expression that specifies the value to log for the additional result.
  string returnValue = 1;
}

message AdditionalResult_Set_ConditionRequest {
  // The id of the AdditionalResult object.
  AdditionalResultInstance instance = 1;
  // An expression that must be empty or evaluate to True to log the additional result.
  string val = 2;
}

message AdditionalResult_Set_ConditionResponse {
}

message AdditionalResult_Get_ConditionRequest {
  // The id of the AdditionalResult object.
  AdditionalResultInstance instance = 1;
}

message AdditionalResult_Get_ConditionResponse {
  // An expression that must be empty or evaluate to True to log the additional result.
  string returnValue = 1;
}

message AdditionalResult_Set_FlagsRequest {
  // The id of the AdditionalResult object.
  AdditionalResultInstance instance = 1;
  // Specifies the PropertyFlags TestStand sets when it logs the additional result. You can use any combination of the PropFlags_IncludeInReport, PropFlags_IsMeasurementValue, and PropFlags_IsLimit property flags.
  int32 val = 2;
}

message AdditionalResult_Set_FlagsResponse {
}

message AdditionalResult_Get_FlagsRequest {
  // The id of the AdditionalResult object.
  AdditionalResultInstance instance = 1;
}

message AdditionalResult_Get_FlagsResponse {
  // Specifies the PropertyFlags TestStand sets when it logs the additional result. You can use any combination of the PropFlags_IncludeInReport, PropFlags_IsMeasurementValue, and PropFlags_IsLimit property flags.
  int32 returnValue = 1;
}

message AdditionalResult_Set_IsAnyTypeRequest {
  // The id of the AdditionalResult object.
  AdditionalResultInstance instance = 1;
  // For a custom additional result, if this property is False, you can set the AdditionalResult.Type property to specify the type of the AdditionalResult.ValueToLog property. If this property is True, the ValueToLog property can be any type. For a parameter additional result, this property is always False.
  bool val = 2;
}

message AdditionalResult_Set_IsAnyTypeResponse {
}

message AdditionalResult_Get_IsAnyTypeRequest {
  // The id of the AdditionalResult object.
  AdditionalResultInstance instance = 1;
}

message AdditionalResult_Get_IsAnyTypeResponse {
  // For a custom additional result, if this property is False, you can set the AdditionalResult.Type property to specify the type of the AdditionalResult.ValueToLog property. If this property is True, the ValueToLog property can be any type. For a parameter additional result, this property is always False.
  bool returnValue = 1;
}

message AdditionalResult_Get_ElementsRequest {
  // The id of the AdditionalResult object.
  AdditionalResultInstance instance = 1;
}

message AdditionalResult_Get_ElementsResponse {
  // If the AdditionalResult.IsAnyType property is False, this property is a collection of AdditionalResult objects that correspond to the fields of the type the AdditionalResult.Type property specifies. If the IsAnyType property is True, this property is an empty collection.
  AdditionalResultsInstance returnValue = 1;
}

message AdditionalResult_Set_TypeRequest {
  // The id of the AdditionalResult object.
  AdditionalResultInstance instance = 1;
  // For a custom additional result, if the AdditionalResult.IsAnyType property is True, this property returns the type of the AdditionalResult.ValueToLog property. If the AdditionalResult.IsAnyType property is False, set this property to a PropertyObjectType object  to specify the type of the AdditionalResult.ValueToLog property. Use the PropertyObject.Type property or the Engine.NewPropertyObjectType method to obtain a PropertyObjectType object to set this property to. For a parameter additional result, this property returns the type the parameter specifies.
  PropertyObjectTypeInstance val = 2;
}

message AdditionalResult_Set_TypeResponse {
}

message AdditionalResult_Get_TypeRequest {
  // The id of the AdditionalResult object.
  AdditionalResultInstance instance = 1;
}

message AdditionalResult_Get_TypeResponse {
  // For a custom additional result, if the AdditionalResult.IsAnyType property is True, this property returns the type of the AdditionalResult.ValueToLog property. If the AdditionalResult.IsAnyType property is False, set this property to a PropertyObjectType object  to specify the type of the AdditionalResult.ValueToLog property. Use the PropertyObject.Type property or the Engine.NewPropertyObjectType method to obtain a PropertyObjectType object to set this property to. For a parameter additional result, this property returns the type the parameter specifies.
  PropertyObjectTypeInstance returnValue = 1;
}

message AdditionalResult_Get_ParentAdditionalResultRequest {
  // The id of the AdditionalResult object.
  AdditionalResultInstance instance = 1;
}

message AdditionalResult_Get_ParentAdditionalResultResponse {
  // If this property is not NULL, this property returns the AdditionalResult with an AdditionalResult.Elements collection that contains this AdditionalResult.
  AdditionalResultInstance returnValue = 1;
}

message AdditionalResult_Get_AreElementsIncompatibleWithTypeRequest {
  // The id of the AdditionalResult object.
  AdditionalResultInstance instance = 1;
}

message AdditionalResult_Get_AreElementsIncompatibleWithTypeResponse {
  // Returns True if the members of the AdditionalResult.Elements collection are incompatible with the fields defined in the type that the AdditionalResult.Type property specifies.
  bool returnValue = 1;
}

message AdditionalResult_Get_UnmappedAdditionalResultsRequest {
  // The id of the AdditionalResult object.
  AdditionalResultInstance instance = 1;
}

message AdditionalResult_Get_UnmappedAdditionalResultsResponse {
  // A collection of AdditionalResult objects from an AdditionalResult.Elements collection that TestStand could not map to an updated Elements collection when you set the AdditionalResult.Type property. TestStand does not record the AdditionalResult objects in this collection.
  AdditionalResultsInstance returnValue = 1;
}

message AdditionalResult_Get_KindRequest {
  // The id of the AdditionalResult object.
  AdditionalResultInstance instance = 1;
}

message AdditionalResult_Get_KindResponse {
  // Returns the type of additional result for the object.
  AdditionalResultKinds returnValue = 1;
}

message AdditionalResult_Get_ParameterObjectRequest {
  // The id of the AdditionalResult object.
  AdditionalResultInstance instance = 1;
}

message AdditionalResult_Get_ParameterObjectResponse {
  // For a parameter additional result, this property returns the module parameter of which the additional result logs the value. This property returns NULL for a custom additional result.
  PropertyObjectInstance returnValue = 1;
}

// Execution
//
// An execution is an object TestStand creates to contain all the information it uses to run the sequences and subsequences it calls. Use objects of this class to control and get information about executions. For example, you can use methods to suspend, resume, or terminate execution, and you can use properties to determine whether the execution is an interactive execution or whether the execution is in the process of terminating.
//
service Execution {
  // Method: RestartWithNewArguments
  //
  // Restarts a completed execution and passes the arguments you specify to the restarted execution.
  //
  // Use this method instead of the Execution.RestartEx method when you want to pass new arguments to an execution you restart. You most commonly use this method in combination with the ExecTypeMask_DiscardArgumentsWhenDone option, but you can use this method with any execution. This method discards any arguments an execution already holds and replaces them with the arguments you specify.
  //
  // Execution_RestartWithNewArgumentsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - restartOptionsParam: int32 - Specifies which RestartOptions constant to use. You can specify more than one restart option by combining the constants using the bitwise-OR operator.
  //    - sequenceArgsParam: PropertyObjectInstance - Specifies a PropertyObject object that contains the arguments to the sequence you want to execute. Each subproperty of the PropertyObject object represents a parameter for the sequence. The subproperties must appear in the same order in which the sequence parameters appear. You can pass a NULL reference if you do not want to pass any arguments. Passing NULL discards any arguments an execution already holds. If you want to reuse the arguments an execution already holds, use the Execution.RestartEx method instead of this method.
  //
  // Execution_RestartWithNewArgumentsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc RestartWithNewArguments(Execution_RestartWithNewArgumentsRequest) returns (Execution_RestartWithNewArgumentsResponse);
  
  
  // Method: Break
  //
  // Suspends the execution.
  //
  // Execution_BreakRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_BreakResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Break(Execution_BreakRequest) returns (Execution_BreakResponse);
  
  
  // Method: Resume
  //
  // Resumes the execution from a suspended state.
  //
  // The execution state does not change immediately after the call to this method returns, but the state will change before the next step within the execution executes.
  //
  // Execution_ResumeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_ResumeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Resume(Execution_ResumeRequest) returns (Execution_ResumeResponse);
  
  
  // Method: StepOver
  //
  // Resumes the execution from a suspended state and then suspends the execution again after execution of the next step completes.
  //
  // Execution_StepOverRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_StepOverResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc StepOver(Execution_StepOverRequest) returns (Execution_StepOverResponse);
  
  
  // Method: StepInto
  //
  // Resumes the execution from a suspended state and then suspends the execution again at the earliest possible point.
  //
  // If the step module adapter for the next step can step into the step module in debug mode, execution suspends at the beginning of the step module code. If the step is a Sequence Call step, this method suspends execution at the first step in the subsequence.
  //
  // Execution_StepIntoRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_StepIntoResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc StepInto(Execution_StepIntoRequest) returns (Execution_StepIntoResponse);
  
  
  // Method: StepOut
  //
  // Resumes the execution from a suspended state and then suspends the execution again after execution of the current sequence completes.
  //
  // Execution_StepOutRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_StepOutResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc StepOut(Execution_StepOutRequest) returns (Execution_StepOutResponse);
  
  
  // Method: Abort
  //
  // Aborts the execution.
  //
  // Cleanup step groups do not execute as part of the abort process.
  // If a call to a step module is active, the execution waits for the step module to return.
  // The execution state does not change immediately after the call to this method returns, but the state will change before the next step within the execution executes.
  //
  // Execution_AbortRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_AbortResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Abort(Execution_AbortRequest) returns (Execution_AbortResponse);
  
  
  // Method: Terminate
  //
  // Terminates the execution.
  //
  // Cleanup step groups execute as part of the termination process. If the execution is an interactive execution, use the Execution.TerminateInteractiveExecution method instead.
  // If a call to a step module is active, the execution waits for the step module to return.
  // The execution state does not change immediately after the call to this method returns, but the state will change before the next step within the execution executes.
  //
  // Execution_TerminateRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_TerminateResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Terminate(Execution_TerminateRequest) returns (Execution_TerminateResponse);
  
  
  // Method: TerminateInteractiveExecution
  //
  // Terminates an interactive execution.
  //
  // If you started the interactive execution while suspended in a normal execution, execution suspends at the point in the original execution at which you started the interactive execution.
  // The Cleanup step group for the sequence in which you started the interactive execution only runs if you created the execution as an interactive execution and if the user enables the Run Setup and Cleanup option on the Execution tab of the Station Options dialog box.
  // If a call to a step module is active, the execution waits for the step module to return.
  // The execution state does not change immediately after the call to this method returns, but the state will change before the next step within the execution executes.
  //
  // Execution_TerminateInteractiveExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_TerminateInteractiveExecutionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc TerminateInteractiveExecution(Execution_TerminateInteractiveExecutionRequest) returns (Execution_TerminateInteractiveExecutionResponse);
  
  
  // Method: CancelTermination
  //
  // Cancels the termination of a currently terminating execution.
  //
  // Call this method from within a step. Calling this method from the main thread of the user interface or from within an edit substep of a step type results in deadlock.
  //
  // Execution_CancelTerminationRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_CancelTerminationResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc CancelTermination(Execution_CancelTerminationRequest) returns (Execution_CancelTerminationResponse);
  
  
  // Method: Restart
  //
  // Note: This method is obsolete. Use the Execution.RestartEx method instead.
  //
  // Execution restarts from the beginning.
  //
  // Execution_RestartRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - breakOnEntryParam: bool - Pass True to stop at the first step in the execution.
  //
  // Execution_RestartResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Restart(Execution_RestartRequest) returns (Execution_RestartResponse);
  
  
  // Method: WaitForEnd
  //
  // Note: This method is obsolete. Use the Execution.WaitForEndEx method instead.
  //
  // Waits for an execution to end. This method is not meant to be used by a user interface or sequence editor as it does not process UIMessages. Instead, use this method from a step to synchronize with another execution.
  //
  // Execution_WaitForEndRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - millisecondTimeOut: int32 - Specifies the maximum number of milliseconds to wait. Specify -1 for no timeout.
  //    - processWindowsMsgs: bool - Specify True to process Microsoft Windows messages while waiting or False to wait without processing Windows messages.
  //    - callingExecution: ObjectInstance - If you call this method from a step, pass a reference to the execution of the step to allow this method to return immediately when the step execution is terminated or aborted.
  //
  // Execution_WaitForEndResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when the execution ends or False when the timeout occurs. 
  //
  rpc WaitForEnd(Execution_WaitForEndRequest) returns (Execution_WaitForEndResponse);
  
  
  // Method: GetThread
  //
  // Returns a Thread object for the thread that you identify by index.
  //
  // Do not call this method when handling a UIMsg_Trace message because TestStand allows non-foreground threads to run and complete while TestStand handles trace events. As a result, obtaining a thread by index is unreliable during trace event handling.
  //
  // Execution_GetThreadRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - index: int32 - Specifies the zero-based index of the list of threads in the execution.
  //
  // Execution_GetThreadResponse - The response message from the server. It provides the return value.
  //    - returnValue: ThreadInstance - The return type of the Thread object.
  //
  rpc GetThread(Execution_GetThreadRequest) returns (Execution_GetThreadResponse);
  
  
  // Method: GetSequenceFile
  //
  // Returns the SequenceFile object that contains the sequence in which the execution began.
  //
  // If the execution is using a process model, the method returns the SequenceFile object for the client sequence file.
  // Note: Do not call the Engine.ReleaseSequenceFileEx method for a reference this method returns.
  //
  // Execution_GetSequenceFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_GetSequenceFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFileInstance - The return type of the SequenceFile object.
  //
  rpc GetSequenceFile(Execution_GetSequenceFileRequest) returns (Execution_GetSequenceFileResponse);
  
  
  // Method: GetModelSequenceFile
  //
  // Returns the SequenceFile object for the process model file the execution is using.
  //
  // Returns a NULL object reference if the execution is not using a process model.
  // Note: Do not call the Engine.ReleaseSequenceFileEx method for a reference this method returns.
  //
  // Execution_GetModelSequenceFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_GetModelSequenceFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFileInstance - The return type of the SequenceFile object.
  //
  rpc GetModelSequenceFile(Execution_GetModelSequenceFileRequest) returns (Execution_GetModelSequenceFileResponse);
  
  
  // Method: AddExtraResult
  //
  // Specifies a step property for TestStand to copy to the results list after the execution of each step.
  //
  // TestStand always copies each subproperty within the Result property of each step to the result list. If the step has a result property, you can use this function to specify an additional step property to include in the result list. If a step does not have the property you specify, TestStand does not add the property to the result list element for that step. You can add any number of extra results by calling this method repeatedly.
  //
  // Execution_AddExtraResultRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - propertyName: string - Specifies the property name of the property to add to the results. For example, to add the upper limit of Numeric Limit Test steps, pass the name "Step.Limits.High".
  //    - resultPropertyName: string - Specifies the name with which to store the copy of the property in the results list entry for each step.
  //
  // Execution_AddExtraResultResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc AddExtraResult(Execution_AddExtraResultRequest) returns (Execution_AddExtraResultResponse);
  
  
  // Method: DeleteExtraResult
  //
  // Removes a specific property from the list of properties to add to the results.
  //
  // Execution_DeleteExtraResultRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - propertyName: string - Specifies the property name of the property to remove from the list of properties to add to the results. Use the same name that you passed as the first parameter to the Execution.AddExtraResult method, such as Step.Limits.High. 
  //
  // Execution_DeleteExtraResultResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc DeleteExtraResult(Execution_DeleteExtraResultRequest) returns (Execution_DeleteExtraResultResponse);
  
  
  // Method: ClearExtraResultList
  //
  // Clears the list of properties to add to the results list.
  //
  // Execution_ClearExtraResultListRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_ClearExtraResultListResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ClearExtraResultList(Execution_ClearExtraResultListRequest) returns (Execution_ClearExtraResultListResponse);
  
  
  // Method: GetStates
  //
  // Returns the current state of the execution.
  //
  // Note: When a user interface that uses TestStand UI Controls needs to obtain the state of the execution, National Instruments recommends using the ApplicationMgr.GetRunState method or the ExecutionViewMgr.RunState property instead of directly calling the Execution.GetStates method on the execution.
  //
  // Execution_GetStatesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_GetStatesResponse - The response message from the server. It provides the output parameters.
  //    - runState: ExecutionRunState - Returns the running state of the execution.
  //    - termState: ExecutionTerminationState - If the execution is terminating, this value indicates how it is terminating.
  //
  rpc GetStates(Execution_GetStatesRequest) returns (Execution_GetStatesResponse);
  
  
  // Method: AsPropertyObject
  //
  // Returns the underlying PropertyObject that represents the Execution object.
  //
  // Use the PropertyObject to modify, add, or remove custom properties of the object.
  //
  // Execution_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(Execution_AsPropertyObjectRequest) returns (Execution_AsPropertyObjectResponse);
  
  
  // Method: ClearTemporaryBreakpoints
  //
  // Clears the temporary breakpoints on all threads.
  //
  // You can set temporary breakpoints by calling the Execution.StepInto, Execution.StepOut, or Execution.StepOver methods.
  //
  // Execution_ClearTemporaryBreakpointsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_ClearTemporaryBreakpointsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ClearTemporaryBreakpoints(Execution_ClearTemporaryBreakpointsRequest) returns (Execution_ClearTemporaryBreakpointsResponse);
  
  
  // Method: GetFileGlobals
  //
  // Gets the run-time copy of the sequence file globals for a particular execution and sequence file.
  //
  // Sequence file globals are per execution and per sequence. All steps in a particular sequence file within a particular execution share the same copy of the sequence file globals at run time.
  //
  // Execution_GetFileGlobalsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - sequenceFileParam: SequenceFileInstance - Specifies the sequence file that contains the file globals you want returned.
  //
  // Execution_GetFileGlobalsResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Returns a PropertyObject that contains the file globals for the particular sequence file you pass as the sequenceFileParam parameter. It returns the run-time copy of the file globals. If a run-time copy has not yet been created, a new one is created and returned. 
  //
  rpc GetFileGlobals(Execution_GetFileGlobalsRequest) returns (Execution_GetFileGlobalsResponse);
  
  
  // Method: RestartEx
  //
  // Restarts a completed execution.
  //
  // Use this method instead of the Execution.Restart method when you require the new functionality the RestartOptions constants provide. For example, use this method if you need to restart an execution created as non-restartable.
  //
  // Execution_RestartExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - restartOptionsParam: int32 - Specifies which RestartOptions to use. You can specify more than one RestartOption by combining the constants using the bitwise-OR operator.
  //
  // Execution_RestartExResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc RestartEx(Execution_RestartExRequest) returns (Execution_RestartExResponse);
  
  
  // Method: WaitForEndEx
  //
  // Waits for an execution to end.
  //
  // This method is not meant to be used by a user interface or sequence editor, as it does not process UIMessages. Instead, use this method from a step to synchronize with another execution. If you need to call this method from a user interface, you must call this method from a non-UI thread.
  //
  // Execution_WaitForEndExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - millisecondTimeOut: int32 - Specifies the maximum number of milliseconds to wait. Specify -1 for no timeout.
  //      If you pass a value for the callingSequenceContext parameter, TestStand suspends the timeout while the calling execution is suspended at a breakpoint so that the time spent at a breakpoint does not count towards the elapsed timeout time.
  //    - processWindowsMsgs: bool - Specify True to process Microsoft Windows messages while waiting or False to wait without processing Windows messages.
  //    - stepToStoreResultsIn: ObjectInstance - Specifies a step in which to store the results of the execution. If you specify a step, the result status of the step reflects that of the execution, and TestStand stores the result list for the execution in the TS.AsyncSequenceCall result property for the step.
  //    - callingSequenceContext: ObjectInstance - If you are calling this method from inside of an execution, pass the current sequence context of the execution you are calling the method from for this parameter so TestStand can monitor the execution and abort the method if the calling execution is terminated or aborted.
  //      
  //
  // Execution_WaitForEndExResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when the execution ends or False when the timeout occurs. 
  //
  rpc WaitForEndEx(Execution_WaitForEndExRequest) returns (Execution_WaitForEndExResponse);
  
  
  // Method: InitTerminationMonitor
  //
  // Creates the initial termination monitor data property object the Execution.GetTerminationMonitorStatus method uses.
  //
  // Only call this method once, when you want to begin monitoring the status of the execution.
  // Use this method with the Execution.GetTerminationMonitorStatus method to monitor the state of an execution when performing a task inside of a step that takes a long time or requires user input to continue, such as launching a dialog box. When performing such a task, first call this method and hold on to the PropertyObject it returns. Then, while performing the task or inside of the message processing loop, periodically call the Execution.GetTerminationMonitorStatus method and pass the PropertyObject this method returns. If the method returns True, the execution is terminating and you should abort the task you are performing.
  // Use the Execution.InitTerminationMonitor and Execution.GetTerminationMonitorStatus methods to monitor whether the execution receives a request to terminate or abort the execution. The monitor only recognizes requests to terminate or abort while monitoring, so a code module that executes in a Cleanup step group of an already terminating execution monitors for a subsequent request to terminate the step or abort the execution. Use the Execution.GetStates method to determine the execution state of the code module.
  //
  // Execution_InitTerminationMonitorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_InitTerminationMonitorResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - A property object that contains data the Execution.GetTerminationMonitorStatus method uses to determine whether a particular execution is terminating and, therefore, whether a particular operation (that is, a code module of a step within the execution) needs to abort what it is doing. Note: Do not directly access the data in this property object. 
  //
  rpc InitTerminationMonitor(Execution_InitTerminationMonitorRequest) returns (Execution_InitTerminationMonitorResponse);
  
  
  // Method: GetTerminationMonitorStatus
  //
  // Monitors an execution so the calling code can abort what it is doing and exit if the user requests that the execution terminate or abort.
  //
  // Use this method with the Execution.InitTerminationMonitor method to monitor the state of the execution when performing a task inside of a step that takes a long time or requires user input to continue, such as launching a dialog box. When performing such a task, first call the Execution.InitTerminationMonitor method and hold on to the PropertyObject it returns. Then, while performing the task or inside of the message processing loop, periodically call this method and pass the PropertyObject you got from the Execution.InitTerminationMonitor method. If the method returns True, the execution is terminating and you should abort the task you are performing.
  // This method calls the Execution.GetStates method to update the state information it stores in terminationMonitorData. The Execution.GetTerminationMonitorStatus method uses the state information to determine whether to exit an execution under various conditions, such as when a Cleanup step launches a dialog box while the sequence is already terminating.
  // Use the Execution.InitTerminationMonitor and Execution.GetTerminationMonitorStatus methods to monitor whether the execution receives a request to terminate or abort the execution. The monitor only recognizes requests to terminate or abort while monitoring, so a code module that executes in a Cleanup step group of an already terminating execution monitors for a subsequent request to terminate the step or abort the execution. Use the Execution.GetStates method to determine the execution state of the code module.
  //
  // Execution_GetTerminationMonitorStatusRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - terminationMonitorData: PropertyObjectInstance - Specifies a property object you obtain by calling the Execution.InitTerminationMonitor method. The data this property object contains is not meant to be accessed directly.
  //    - sequenceContextParam: ObjectInstance - If you are monitoring an execution from a step that is running as part of the execution so you can abort the step when the execution terminates or aborts, pass the SequenceContext object of the step. If you are monitoring an execution from a step in a different execution or from code that is not part of a step, leave this parameter unspecified. When you specify this parameter, TestStand uses other information about the execution of the step that is monitoring the execution to determine whether to abort.
  //
  // Execution_GetTerminationMonitorStatusResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the execution is terminating or aborting. 
  //
  rpc GetTerminationMonitorStatus(Execution_GetTerminationMonitorStatusRequest) returns (Execution_GetTerminationMonitorStatusResponse);
  
  
  // Method: AddPostStepCustomUIMessage
  //
  // Associates a new custom user interface message with an execution.
  //
  // Use this function when you want TestStand to send a custom user interface message based on a user-defined expression. You define the Boolean expression to evaluate after each step executes. If the expression is True, TestStand sends the custom user interface message.
  // This message is synchronous. The thread that sends this message suspends until you process it.
  // This message is sent regardless of the Enable Tracing setting, Disable Result Recording for All Sequences setting, Step Run Mode setting, or Step Result Recording option.
  //
  // Execution_AddPostStepCustomUIMessageRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - MsgCode: int32 - Specifies the custom user interface message code. You can use more than one custom user interface message associated with the same code. TestStand sends the custom user interface messages when the associated expression evaluates to True.
  //    - Expression: string - Specifies the valid expression to evaluate after each step executes.
  //    - CustomUIMessageOptions: int32 - Specifies any combination of the flags found in CustomPostStepUIMsgOptions.
  //
  // Execution_AddPostStepCustomUIMessageResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc AddPostStepCustomUIMessage(Execution_AddPostStepCustomUIMessageRequest) returns (Execution_AddPostStepCustomUIMessageResponse);
  
  
  // Method: RemovePostStepCustomUIMessage
  //
  // Removes a custom user interface message associated with an execution.
  //
  // Use this method to remove any custom user interface messages previously associated with an execution by calling the Execution.AddPostStepCustomUIMessage method.
  //
  // Execution_RemovePostStepCustomUIMessageRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - MsgCode: int32 - Specifies the custom UI message code. This method does not return an error when the message code is not associated with an execution.
  //
  // Execution_RemovePostStepCustomUIMessageResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc RemovePostStepCustomUIMessage(Execution_RemovePostStepCustomUIMessageRequest) returns (Execution_RemovePostStepCustomUIMessageResponse);
  
  
  // Method: EnableCallback
  //
  // Enables or disables the callback sequence that corresponds to the callback type passed as the input parameter.
  //
  // If the newValue parameter is set to False, TestStand disables the callback. Otherwise, TestStand enables the callback. Use the Execution.IsCallbackEnabled method to determine whether a callback is enabled.
  //
  // Execution_EnableCallbackRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - callbackType: CallbackTypes - Specifies the callback type.
  //    - newValue: bool - If this value is False, TestStand disables the callback. Otherwise, TestStand enables the callback.
  //
  // Execution_EnableCallbackResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc EnableCallback(Execution_EnableCallbackRequest) returns (Execution_EnableCallbackResponse);
  
  
  // Method: IsCallbackEnabled
  //
  // Determines whether the callback type the parameter passes is enabled.
  //
  // Execution_IsCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - callbackType: CallbackTypes - Specifies the callback type. Refer to CallbackTypes for the possible values.
  //
  // Execution_IsCallbackEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc IsCallbackEnabled(Execution_IsCallbackEnabledRequest) returns (Execution_IsCallbackEnabledResponse);
  
  
  // Method: NewSequenceDefaultValues
  //
  // Creates a default value copy of the sequence.
  //
  // Whenever TestStand begins executing a sequence, it makes a run-time copy of the sequence. Normally, TestStand creates the run-time copy from the edit-time copy of the sequence in the sequence file. You can use this method in conjunction with the Execution.SetSequenceDefaultValues method to instruct the execution to use different default values for the local variables and step properties. Changes to the default value sequence this method returns do not update the edit-time copy of the sequence.
  //
  // Execution_NewSequenceDefaultValuesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - origSequence: SequenceInstance - Specifies which default value sequence the method creates.
  //
  // Execution_NewSequenceDefaultValuesResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceInstance - Returns a Sequence object that represents default values an execution can use to create run-time copies of the sequence during execution. Typically, you update the local variables and step properties in the sequence this method returns, and use the  Execution.SetSequenceDefaultValues method to instruct the execution to use the sequence to create run-time sequences. 
  //
  rpc NewSequenceDefaultValues(Execution_NewSequenceDefaultValuesRequest) returns (Execution_NewSequenceDefaultValuesResponse);
  
  
  // Method: GetSequenceDefaultValues
  //
  // Returns the default value copy of the sequence, if it exists. Otherwise, this method returns NULL.
  //
  // Use this method to return default value sequences the Execution.SetSequenceDefaultValues method previously specified.
  // If a sequence specifies to optimize non-reentrant calls, changes to the default value sequence this method returns do not apply to run-time sequences that the execution caches. Call the Execution.SetSequenceDefaultValues method to ensure the execution uses any changes to the sequence in all subsequent invocations.
  //
  // Execution_GetSequenceDefaultValuesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - origSequence: SequenceInstance - Specifies which default value sequence the method returns.
  //    - defaultValueType: SequenceDefaultValueScopes - Specifies whether the method operates on the list of default value sequences for the execution or the hierarchy of executions with which the execution is associated.
  //
  // Execution_GetSequenceDefaultValuesResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceInstance - Returns a Sequence object that represents the default values an execution is using to create run-time copies of the sequence. 
  //
  rpc GetSequenceDefaultValues(Execution_GetSequenceDefaultValuesRequest) returns (Execution_GetSequenceDefaultValuesResponse);
  
  
  // Method: SetSequenceDefaultValues
  //
  // Instructs the execution to use a default value copy of the sequence to create run-time copies of the sequence.
  //
  // Whenever TestStand begins executing a sequence, it makes a run-time copy of the sequence. Normally, TestStand creates the run-time copy from the edit-time copy of the sequence in the sequence file. You can use this method in conjunction with the Execution.NewSequenceDefaultValues method to instruct the execution to use different default values for the local variables and step properties.
  // You can associate default value sequences with either a specific execution or the hierarchy of executions with which the execution is associated. For example, setting a default value sequence on the hierarchy of execution associated with a Batch model applies the default value sequence to the controlling batch execution and all test socket executions. If an execution and the execution hierarchy both specify a default value sequence, TestStand uses the default value sequence the execution specifies.
  //
  // Execution_SetSequenceDefaultValuesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - defValSequence: SequenceInstance - Specifies the default value sequence the execution uses to create run-time sequences. Use the Execution.NewSequenceDefaultValues method to create a default value sequence and update the local variables and step properties in the sequence before calling this method.
  //    - defaultValueType: SequenceDefaultValueScopes - Specifies whether the method operates on the list of default value sequences for the execution or the hierarchy of executions associated with the execution.
  //
  // Execution_SetSequenceDefaultValuesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetSequenceDefaultValues(Execution_SetSequenceDefaultValuesRequest) returns (Execution_SetSequenceDefaultValuesResponse);
  
  
  // Method: ClearSequenceDefaultValues
  //
  // Removes a specific default value sequence or all default value sequences.
  //
  // This method operates on either the list of default value sequences for the execution or the hierarchy of executions associated with this execution.
  //
  // Execution_ClearSequenceDefaultValuesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - origSequence: SequenceInstance - Specifies the sequences that indicate the default value to remove. Passing NULL removes all default value sequences.
  //    - defaultValueType: SequenceDefaultValueScopes - Specifies whether the method operates on the list of default value sequences for the execution or the hierarchy of executions associated with the execution.
  //
  // Execution_ClearSequenceDefaultValuesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ClearSequenceDefaultValues(Execution_ClearSequenceDefaultValuesRequest) returns (Execution_ClearSequenceDefaultValuesResponse);
  
  
  // Method: NewThread
  //
  // Creates and returns a new Thread object.
  //
  // When you call this method, the thread begins executing immediately. This method behaves similar to a Sequence Call step you configure to run in a new thread.
  //
  // Execution_NewThreadRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - sequenceFileParam: SequenceFileInstance - Specifies the SequenceFile object that contains the sequence to execute.
  //    - sequenceNameParam: string - Specifies the name of the sequence to execute.
  //    - options: int32 - Pass 0 for the default behavior or pass one or more NewThreadOptions constants. Use the bitwise-OR operator to pass multiple constants.
  //    - sequenceContextParam: SequenceContextInstance - If you call this method from a code module for a step inside of an execution, pass the sequence context of the step. This allows this method to behave similar to a Sequence Call step and to set the SequenceContext.Caller property correctly.
  //    - sequenceArgsParam: PropertyObjectInstance - Specifies a PropertyObject object that contains the arguments to the sequence you want to execute. Each subproperty of PropertyObject represents a parameter to the sequence. The subproperties must appear in the same order as the sequence parameters.
  //
  // Execution_NewThreadResponse - The response message from the server. It provides the return value.
  //    - returnValue: ThreadInstance - The thread created by this method. 
  //
  rpc NewThread(Execution_NewThreadRequest) returns (Execution_NewThreadResponse);
  
  

  // Property: InInteractiveMode
  //
  // Returns True if the execution is executing steps interactively.
  //
  // This property is always True for executions that you create as interactive executions. For executions that you start as normal executions, this property is only True when you interactively execute steps while at a breakpoint state. If you run the sequence using the Run Selected Steps Interactive Execution entry point, this property is True.
  //
  // Execution_Get_InInteractiveModeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_InInteractiveModeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the execution is executing steps interactively. 
  //
  rpc Get_InInteractiveMode(Execution_Get_InInteractiveModeRequest) returns (Execution_Get_InInteractiveModeResponse);
  
  
  // Property: TypeMask
  //
  // Specifies the ExecutionTypeMask constants with which you created the execution.
  //
  // Execution_Set_TypeMaskRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: int32 - Specifies the ExecutionTypeMask constants with which you created the execution. 
  //
  // Execution_Set_TypeMaskResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_TypeMaskRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_TypeMaskResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the ExecutionTypeMask constants with which you created the execution. 
  //
  rpc Set_TypeMask(Execution_Set_TypeMaskRequest) returns (Execution_Set_TypeMaskResponse);
  rpc Get_TypeMask(Execution_Get_TypeMaskRequest) returns (Execution_Get_TypeMaskResponse);
  
  
  // Property: BreakOnRTEForThisExecution
  //
  // Note: This property is obsolete. Use the Execution.RTEOptionForThisExecution property instead.
  //
  // Set this property to False if you do not want to receive a break event on run-time errors for the execution. If you set this property to False, the next run-time error causes the execution to terminate. Cleanup step groups of the active sequences run as part of the termination procedure.
  //
  // Execution_Set_BreakOnRTEForThisExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - Note: This property is obsolete. Use the Execution.RTEOptionForThisExecution property instead. 
  //
  // Execution_Set_BreakOnRTEForThisExecutionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_BreakOnRTEForThisExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_BreakOnRTEForThisExecutionResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the Execution.RTEOptionForThisExecution property instead. 
  //
  rpc Set_BreakOnRTEForThisExecution(Execution_Set_BreakOnRTEForThisExecutionRequest) returns (Execution_Set_BreakOnRTEForThisExecutionResponse);
  rpc Get_BreakOnRTEForThisExecution(Execution_Get_BreakOnRTEForThisExecutionRequest) returns (Execution_Get_BreakOnRTEForThisExecutionResponse);
  
  
  // Property: NumThreads
  //
  // Returns the current number of threads in the execution.
  //
  // Do not access this property when handling a UIMsg_Trace message. TestStand allows non-foreground threads to run and complete while TestStand handles trace events. As a result, obtaining the number of threads is unreliable during trace event handling.
  //
  // Execution_Get_NumThreadsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_NumThreadsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the current number of threads in the execution. 
  //
  rpc Get_NumThreads(Execution_Get_NumThreadsRequest) returns (Execution_Get_NumThreadsResponse);
  
  
  // Property: ForegroundThreadIndex
  //
  // Specifies the foreground thread of the execution.
  //
  // The foreground thread is the thread the sequence editor or user interface displays as active for the execution. You specify the thread with a zero-based index into the list of threads in the execution.
  // Do not access this property when handling a UIMsg_Trace message. TestStand allows non-foreground threads to run and complete while TestStand handles trace events. As a result, getting and setting thread indexes is unreliable during trace event handling. Use the Execution.ForegroundThread method instead.
  //
  // Execution_Set_ForegroundThreadIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: int32 - Specifies the foreground thread of the execution. 
  //
  // Execution_Set_ForegroundThreadIndexResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_ForegroundThreadIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_ForegroundThreadIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the foreground thread of the execution. 
  //
  rpc Set_ForegroundThreadIndex(Execution_Set_ForegroundThreadIndexRequest) returns (Execution_Set_ForegroundThreadIndexResponse);
  rpc Get_ForegroundThreadIndex(Execution_Get_ForegroundThreadIndexRequest) returns (Execution_Get_ForegroundThreadIndexResponse);
  
  
  // Property: SeqFilePreStepCallbackEnabled
  //
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  //
  // Enables the SequenceFilePreStep callback. Set this property to False to disable the SequenceFilePreStep callback.
  //
  // Execution_Set_SeqFilePreStepCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  // Execution_Set_SeqFilePreStepCallbackEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_SeqFilePreStepCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_SeqFilePreStepCallbackEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  rpc Set_SeqFilePreStepCallbackEnabled(Execution_Set_SeqFilePreStepCallbackEnabledRequest) returns (Execution_Set_SeqFilePreStepCallbackEnabledResponse);
  rpc Get_SeqFilePreStepCallbackEnabled(Execution_Get_SeqFilePreStepCallbackEnabledRequest) returns (Execution_Get_SeqFilePreStepCallbackEnabledResponse);
  
  
  // Property: SeqFilePostStepCallbackEnabled
  //
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  //
  // Enables the SequenceFilePostStep callback. Set this property to False to disable the SequenceFilePostStep callback.
  //
  // Execution_Set_SeqFilePostStepCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  // Execution_Set_SeqFilePostStepCallbackEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_SeqFilePostStepCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_SeqFilePostStepCallbackEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  rpc Set_SeqFilePostStepCallbackEnabled(Execution_Set_SeqFilePostStepCallbackEnabledRequest) returns (Execution_Set_SeqFilePostStepCallbackEnabledResponse);
  rpc Get_SeqFilePostStepCallbackEnabled(Execution_Get_SeqFilePostStepCallbackEnabledRequest) returns (Execution_Get_SeqFilePostStepCallbackEnabledResponse);
  
  
  // Property: ModelPreStepCallbackEnabled
  //
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  //
  // Enables the ProcessModelPreStep callback. Set this property to False to disable the ProcessModelPreStep callback.
  //
  // Execution_Set_ModelPreStepCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  // Execution_Set_ModelPreStepCallbackEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_ModelPreStepCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_ModelPreStepCallbackEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  rpc Set_ModelPreStepCallbackEnabled(Execution_Set_ModelPreStepCallbackEnabledRequest) returns (Execution_Set_ModelPreStepCallbackEnabledResponse);
  rpc Get_ModelPreStepCallbackEnabled(Execution_Get_ModelPreStepCallbackEnabledRequest) returns (Execution_Get_ModelPreStepCallbackEnabledResponse);
  
  
  // Property: ModelPostStepCallbackEnabled
  //
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  //
  // Enables the ProcessModelPostStep callback. Set this property to False to disable the ProcessModelPostStep callback.
  //
  // Execution_Set_ModelPostStepCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  // Execution_Set_ModelPostStepCallbackEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_ModelPostStepCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_ModelPostStepCallbackEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  rpc Set_ModelPostStepCallbackEnabled(Execution_Set_ModelPostStepCallbackEnabledRequest) returns (Execution_Set_ModelPostStepCallbackEnabledResponse);
  rpc Get_ModelPostStepCallbackEnabled(Execution_Get_ModelPostStepCallbackEnabledRequest) returns (Execution_Get_ModelPostStepCallbackEnabledResponse);
  
  
  // Property: StationPreStepCallbackEnabled
  //
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  //
  // Enables the StationPreStep callback. Set this property to False to disable the StationPreStep callback.
  //
  // Execution_Set_StationPreStepCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  // Execution_Set_StationPreStepCallbackEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_StationPreStepCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_StationPreStepCallbackEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  rpc Set_StationPreStepCallbackEnabled(Execution_Set_StationPreStepCallbackEnabledRequest) returns (Execution_Set_StationPreStepCallbackEnabledResponse);
  rpc Get_StationPreStepCallbackEnabled(Execution_Get_StationPreStepCallbackEnabledRequest) returns (Execution_Get_StationPreStepCallbackEnabledResponse);
  
  
  // Property: StationPostStepCallbackEnabled
  //
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  //
  // Enables the StationPostStep callback. Set this property to False to disable the StationPostStep callback.
  //
  // Execution_Set_StationPostStepCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  // Execution_Set_StationPostStepCallbackEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_StationPostStepCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_StationPostStepCallbackEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  rpc Set_StationPostStepCallbackEnabled(Execution_Set_StationPostStepCallbackEnabledRequest) returns (Execution_Set_StationPostStepCallbackEnabledResponse);
  rpc Get_StationPostStepCallbackEnabled(Execution_Get_StationPostStepCallbackEnabledRequest) returns (Execution_Get_StationPostStepCallbackEnabledResponse);
  
  
  // Property: SeqFilePreInteractiveCallbackEnabled
  //
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  //
  // Enables the SequenceFilePreInteractive callback. Set this property to False to disable the SequenceFilePreInteractive callback.
  //
  // Execution_Set_SeqFilePreInteractiveCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  // Execution_Set_SeqFilePreInteractiveCallbackEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_SeqFilePreInteractiveCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_SeqFilePreInteractiveCallbackEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  rpc Set_SeqFilePreInteractiveCallbackEnabled(Execution_Set_SeqFilePreInteractiveCallbackEnabledRequest) returns (Execution_Set_SeqFilePreInteractiveCallbackEnabledResponse);
  rpc Get_SeqFilePreInteractiveCallbackEnabled(Execution_Get_SeqFilePreInteractiveCallbackEnabledRequest) returns (Execution_Get_SeqFilePreInteractiveCallbackEnabledResponse);
  
  
  // Property: SeqFilePostInteractiveCallbackEnabled
  //
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  //
  // Enables the SequenceFilePostInteractive callback. Set this property to False to disable the SequenceFilePostInteractive callback.
  //
  // Execution_Set_SeqFilePostInteractiveCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  // Execution_Set_SeqFilePostInteractiveCallbackEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_SeqFilePostInteractiveCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_SeqFilePostInteractiveCallbackEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  rpc Set_SeqFilePostInteractiveCallbackEnabled(Execution_Set_SeqFilePostInteractiveCallbackEnabledRequest) returns (Execution_Set_SeqFilePostInteractiveCallbackEnabledResponse);
  rpc Get_SeqFilePostInteractiveCallbackEnabled(Execution_Get_SeqFilePostInteractiveCallbackEnabledRequest) returns (Execution_Get_SeqFilePostInteractiveCallbackEnabledResponse);
  
  
  // Property: ModelPreInteractiveCallbackEnabled
  //
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  //
  // Enables the ProcessModelPreInteractive callback. Set this property to False to disable the ProcessModelPreInteractive callback.
  //
  // Execution_Set_ModelPreInteractiveCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  // Execution_Set_ModelPreInteractiveCallbackEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_ModelPreInteractiveCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_ModelPreInteractiveCallbackEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  rpc Set_ModelPreInteractiveCallbackEnabled(Execution_Set_ModelPreInteractiveCallbackEnabledRequest) returns (Execution_Set_ModelPreInteractiveCallbackEnabledResponse);
  rpc Get_ModelPreInteractiveCallbackEnabled(Execution_Get_ModelPreInteractiveCallbackEnabledRequest) returns (Execution_Get_ModelPreInteractiveCallbackEnabledResponse);
  
  
  // Property: ModelPostInteractiveCallbackEnabled
  //
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  //
  // Enables the ProcessModelPostInteractive callback. Set this property to False to disable the ProcessModelPostInteractive callback.
  //
  // Execution_Set_ModelPostInteractiveCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  // Execution_Set_ModelPostInteractiveCallbackEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_ModelPostInteractiveCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_ModelPostInteractiveCallbackEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  rpc Set_ModelPostInteractiveCallbackEnabled(Execution_Set_ModelPostInteractiveCallbackEnabledRequest) returns (Execution_Set_ModelPostInteractiveCallbackEnabledResponse);
  rpc Get_ModelPostInteractiveCallbackEnabled(Execution_Get_ModelPostInteractiveCallbackEnabledRequest) returns (Execution_Get_ModelPostInteractiveCallbackEnabledResponse);
  
  
  // Property: StationPreInteractiveCallbackEnabled
  //
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  //
  // Enables the StationPreInteractive callback. Set this property to False to disable the StationPreInteractive callback.
  //
  // Execution_Set_StationPreInteractiveCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  // Execution_Set_StationPreInteractiveCallbackEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_StationPreInteractiveCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_StationPreInteractiveCallbackEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  rpc Set_StationPreInteractiveCallbackEnabled(Execution_Set_StationPreInteractiveCallbackEnabledRequest) returns (Execution_Set_StationPreInteractiveCallbackEnabledResponse);
  rpc Get_StationPreInteractiveCallbackEnabled(Execution_Get_StationPreInteractiveCallbackEnabledRequest) returns (Execution_Get_StationPreInteractiveCallbackEnabledResponse);
  
  
  // Property: StationPostInteractiveCallbackEnabled
  //
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  //
  // Enables the StationPostInteractive callback. Set this property to False to disable the StationPostInteractive callback.
  //
  // Execution_Set_StationPostInteractiveCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  // Execution_Set_StationPostInteractiveCallbackEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_StationPostInteractiveCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_StationPostInteractiveCallbackEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  rpc Set_StationPostInteractiveCallbackEnabled(Execution_Set_StationPostInteractiveCallbackEnabledRequest) returns (Execution_Set_StationPostInteractiveCallbackEnabledResponse);
  rpc Get_StationPostInteractiveCallbackEnabled(Execution_Get_StationPostInteractiveCallbackEnabledRequest) returns (Execution_Get_StationPostInteractiveCallbackEnabledResponse);
  
  
  // Property: TimeResultsEnabled
  //
  // Stores timing results for steps in the execution.
  //
  // Set this property to False to disable the storing of timing results for steps. TestStand stores time results only when the Execution.StandardResultsEnabled property is  True.
  //
  // Execution_Set_TimeResultsEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - Stores timing results for steps in the execution. 
  //
  // Execution_Set_TimeResultsEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_TimeResultsEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_TimeResultsEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Stores timing results for steps in the execution. 
  //
  rpc Set_TimeResultsEnabled(Execution_Set_TimeResultsEnabledRequest) returns (Execution_Set_TimeResultsEnabledResponse);
  rpc Get_TimeResultsEnabled(Execution_Get_TimeResultsEnabledRequest) returns (Execution_Get_TimeResultsEnabledResponse);
  
  
  // Property: StandardResultsEnabled
  //
  // Stores all the standard results for steps in the execution. Standard results include properties that specify basic step execution information.
  //
  // Set this property to False to disable storing the standard results for the execution.
  // The standard results are the subproperties in the TS property of the result list entry for each step.
  //
  // Execution_Set_StandardResultsEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - Stores all the standard results for steps in the execution. Standard results include properties that specify basic step execution information. 
  //
  // Execution_Set_StandardResultsEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_StandardResultsEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_StandardResultsEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Stores all the standard results for steps in the execution. Standard results include properties that specify basic step execution information. 
  //
  rpc Set_StandardResultsEnabled(Execution_Set_StandardResultsEnabledRequest) returns (Execution_Set_StandardResultsEnabledResponse);
  rpc Get_StandardResultsEnabled(Execution_Get_StandardResultsEnabledRequest) returns (Execution_Get_StandardResultsEnabledResponse);
  
  
  // Property: StationPostResultCallbackEnabled
  //
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  //
  // Enables the StationPostResult callback. Set this property to False to disable the StationPostResult callback.
  //
  // Execution_Set_StationPostResultCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  // Execution_Set_StationPostResultCallbackEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_StationPostResultCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_StationPostResultCallbackEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  rpc Set_StationPostResultCallbackEnabled(Execution_Set_StationPostResultCallbackEnabledRequest) returns (Execution_Set_StationPostResultCallbackEnabledResponse);
  rpc Get_StationPostResultCallbackEnabled(Execution_Get_StationPostResultCallbackEnabledRequest) returns (Execution_Get_StationPostResultCallbackEnabledResponse);
  
  
  // Property: ModelPostResultCallbackEnabled
  //
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  //
  // Enables the ProcessModelPostResult callback. Set this property to False to disable the ProcessModelPostResult callback.
  //
  // Execution_Set_ModelPostResultCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  // Execution_Set_ModelPostResultCallbackEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_ModelPostResultCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_ModelPostResultCallbackEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  rpc Set_ModelPostResultCallbackEnabled(Execution_Set_ModelPostResultCallbackEnabledRequest) returns (Execution_Set_ModelPostResultCallbackEnabledResponse);
  rpc Get_ModelPostResultCallbackEnabled(Execution_Get_ModelPostResultCallbackEnabledRequest) returns (Execution_Get_ModelPostResultCallbackEnabledResponse);
  
  
  // Property: SeqFilePostResultCallbackEnabled
  //
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  //
  // Enables the SequenceFilePostResult callback. Set this property to False to disable the SequenceFilePostResult callback.
  //
  // Execution_Set_SeqFilePostResultCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  // Execution_Set_SeqFilePostResultCallbackEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_SeqFilePostResultCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_SeqFilePostResultCallbackEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  rpc Set_SeqFilePostResultCallbackEnabled(Execution_Set_SeqFilePostResultCallbackEnabledRequest) returns (Execution_Set_SeqFilePostResultCallbackEnabledResponse);
  rpc Get_SeqFilePostResultCallbackEnabled(Execution_Get_SeqFilePostResultCallbackEnabledRequest) returns (Execution_Get_SeqFilePostResultCallbackEnabledResponse);
  
  
  // Property: StationPostErrorCallbackEnabled
  //
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  //
  // Enables the StationPostError callback. Set this property to False to disable the StationPostError callback.
  //
  // Execution_Set_StationPostErrorCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  // Execution_Set_StationPostErrorCallbackEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_StationPostErrorCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_StationPostErrorCallbackEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  rpc Set_StationPostErrorCallbackEnabled(Execution_Set_StationPostErrorCallbackEnabledRequest) returns (Execution_Set_StationPostErrorCallbackEnabledResponse);
  rpc Get_StationPostErrorCallbackEnabled(Execution_Get_StationPostErrorCallbackEnabledRequest) returns (Execution_Get_StationPostErrorCallbackEnabledResponse);
  
  
  // Property: ModelPostErrorCallbackEnabled
  //
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  //
  // Enables the ProcessModelPostError callback. Set this property to False to disable the ProcessModelPostError callback.
  //
  // Execution_Set_ModelPostErrorCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  // Execution_Set_ModelPostErrorCallbackEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_ModelPostErrorCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_ModelPostErrorCallbackEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  rpc Set_ModelPostErrorCallbackEnabled(Execution_Set_ModelPostErrorCallbackEnabledRequest) returns (Execution_Set_ModelPostErrorCallbackEnabledResponse);
  rpc Get_ModelPostErrorCallbackEnabled(Execution_Get_ModelPostErrorCallbackEnabledRequest) returns (Execution_Get_ModelPostErrorCallbackEnabledResponse);
  
  
  // Property: SeqFilePostErrorCallbackEnabled
  //
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  //
  // Enables the SequenceFilePostError callback. Set this property to False to disable the SequenceFilePostError callback.
  //
  // Execution_Set_SeqFilePostErrorCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  // Execution_Set_SeqFilePostErrorCallbackEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_SeqFilePostErrorCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_SeqFilePostErrorCallbackEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  rpc Set_SeqFilePostErrorCallbackEnabled(Execution_Set_SeqFilePostErrorCallbackEnabledRequest) returns (Execution_Set_SeqFilePostErrorCallbackEnabledResponse);
  rpc Get_SeqFilePostErrorCallbackEnabled(Execution_Get_SeqFilePostErrorCallbackEnabledRequest) returns (Execution_Get_SeqFilePostErrorCallbackEnabledResponse);
  
  
  // Property: StationPostFailCallbackEnabled
  //
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  //
  // Enables the StationPostFail callback. Set this property to False to disable the StationPostFail callback.
  //
  // Execution_Set_StationPostFailCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  // Execution_Set_StationPostFailCallbackEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_StationPostFailCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_StationPostFailCallbackEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  rpc Set_StationPostFailCallbackEnabled(Execution_Set_StationPostFailCallbackEnabledRequest) returns (Execution_Set_StationPostFailCallbackEnabledResponse);
  rpc Get_StationPostFailCallbackEnabled(Execution_Get_StationPostFailCallbackEnabledRequest) returns (Execution_Get_StationPostFailCallbackEnabledResponse);
  
  
  // Property: ModelPostFailCallbackEnabled
  //
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  //
  // Enables the ProcessModelPostFail callback. Set this property to False to disable the ProcessModelPostFail callback.
  //
  // Execution_Set_ModelPostFailCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  // Execution_Set_ModelPostFailCallbackEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_ModelPostFailCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_ModelPostFailCallbackEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  rpc Set_ModelPostFailCallbackEnabled(Execution_Set_ModelPostFailCallbackEnabledRequest) returns (Execution_Set_ModelPostFailCallbackEnabledResponse);
  rpc Get_ModelPostFailCallbackEnabled(Execution_Get_ModelPostFailCallbackEnabledRequest) returns (Execution_Get_ModelPostFailCallbackEnabledResponse);
  
  
  // Property: SeqFilePostFailCallbackEnabled
  //
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  //
  // Enables the SequenceFilePostFail callback. Set this property to False to disable the SequenceFilePostFail callback.
  //
  // Execution_Set_SeqFilePostFailCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  // Execution_Set_SeqFilePostFailCallbackEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_SeqFilePostFailCallbackEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_SeqFilePostFailCallbackEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled. 
  //
  rpc Set_SeqFilePostFailCallbackEnabled(Execution_Set_SeqFilePostFailCallbackEnabledRequest) returns (Execution_Set_SeqFilePostFailCallbackEnabledResponse);
  rpc Get_SeqFilePostFailCallbackEnabled(Execution_Get_SeqFilePostFailCallbackEnabledRequest) returns (Execution_Get_SeqFilePostFailCallbackEnabledResponse);
  
  
  // Property: DisableResults
  //
  // Records results for steps running in the execution.
  //
  // When this property is True, TestStand does not record results for any steps that run in the execution. When this property is False, TestStand records results based on the setting of the ResultRecordingOption property of each individual step or based on the DisableResults property of both the engine and the sequence.
  //
  // Execution_Set_DisableResultsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - Records results for steps running in the execution. 
  //
  // Execution_Set_DisableResultsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_DisableResultsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_DisableResultsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Records results for steps running in the execution. 
  //
  rpc Set_DisableResults(Execution_Set_DisableResultsRequest) returns (Execution_Set_DisableResultsResponse);
  rpc Get_DisableResults(Execution_Get_DisableResultsRequest) returns (Execution_Get_DisableResultsResponse);
  
  
  // Property: ResultStatus
  //
  // Specifies the result status string for the execution.
  //
  // Note: You cannot use this property to determine if a completed execution encountered an error. Instead, access the Occurred sub-property of Execution.ErrorObject. Although you can define custom status strings, you usually set this property to one of the ResultStatus_ constants of StepProperties.
  //
  // Execution_Set_ResultStatusRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: string - Specifies the result status string for the execution. 
  //
  // Execution_Set_ResultStatusResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_ResultStatusRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_ResultStatusResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the result status string for the execution. 
  //
  rpc Set_ResultStatus(Execution_Set_ResultStatusRequest) returns (Execution_Set_ResultStatusResponse);
  rpc Get_ResultStatus(Execution_Get_ResultStatusRequest) returns (Execution_Get_ResultStatusResponse);
  
  
  // Property: ErrorObject
  //
  // Returns the error PropertyObject that contains the error reporting properties for this execution.
  //
  // The subproperties of the error object include Code, Msg, and Occurred.
  //
  // Execution_Get_ErrorObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_ErrorObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Returns the error PropertyObject that contains the error reporting properties for this execution. 
  //
  rpc Get_ErrorObject(Execution_Get_ErrorObjectRequest) returns (Execution_Get_ErrorObjectResponse);
  
  
  // Property: Report
  //
  // Returns the Report object for the execution.
  //
  // Execution_Get_ReportRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_ReportResponse - The response message from the server. It provides the return value.
  //    - returnValue: ReportInstance - Returns the Report object for the execution. 
  //
  rpc Get_Report(Execution_Get_ReportRequest) returns (Execution_Get_ReportResponse);
  
  
  // Property: Id
  //
  // Returns a unique ID number for the execution.
  // Note: The ID number is never zero.
  //
  // The ID number is unique with respect to all executions you can initiate before you shut down the TestStand Engine.
  // Use this ID number to compare two Execution object references to determine whether they refer to the same underlying execution.
  //
  // Execution_Get_IdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_IdResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a unique ID number for the execution. Note: The ID number is never zero. 
  //
  rpc Get_Id(Execution_Get_IdRequest) returns (Execution_Get_IdResponse);
  
  
  // Property: DisplayName
  //
  // Returns the name to display for the execution.
  //
  // Execution_Get_DisplayNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_DisplayNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name to display for the execution. 
  //
  rpc Get_DisplayName(Execution_Get_DisplayNameRequest) returns (Execution_Get_DisplayNameResponse);
  
  
  // Property: ResultObject
  //
  // Returns the Result PropertyObject for the execution.
  //
  // Typically, the Result PropertyObject contains at least the Error, Status, ReportText, and Common subproperties.
  // * Error—Property object that contains the error information for the execution.    * ResultList—Array that contains the combined results for all the steps in the execution.    * SequenceFile—String that contains the path of the sequence file associated with the execution.    * Sequence—String that contains the name of the sequence associated with the execution.    * Status—String that contains the status of the execution.
  // You can also obtain the Error subproperty of the Result PropertyObject by using the ErrorObject property. You can access the Status subproperty by using the ResultStatus property.
  //
  // Execution_Get_ResultObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_ResultObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Returns the Result PropertyObject for the execution. 
  //
  rpc Get_ResultObject(Execution_Get_ResultObjectRequest) returns (Execution_Get_ResultObjectResponse);
  
  
  // Property: SequenceFilePath
  //
  // Returns the absolute pathname of the sequence file for this execution.
  //
  // If the execution is using a process model, the method returns the pathname of the client sequence file.
  //
  // Execution_Get_SequenceFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_SequenceFilePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the absolute pathname of the sequence file for this execution. 
  //
  rpc Get_SequenceFilePath(Execution_Get_SequenceFilePathRequest) returns (Execution_Get_SequenceFilePathResponse);
  
  
  // Property: ModelSequenceFilePath
  //
  // Returns the absolute pathname of the model sequence file for this execution.
  //
  // Execution_Get_ModelSequenceFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_ModelSequenceFilePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the absolute pathname of the model sequence file for this execution. 
  //
  rpc Get_ModelSequenceFilePath(Execution_Get_ModelSequenceFilePathRequest) returns (Execution_Get_ModelSequenceFilePathResponse);
  
  
  // Property: SecondsExecuting
  //
  // Returns the total number of seconds for which the execution has been running.
  //
  // The value returned does not include time spent while the execution is suspended at a breakpoint. Restarting the execution resets the value of this property.
  // 
  //
  // Execution_Get_SecondsExecutingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_SecondsExecutingResponse - The response message from the server. It provides the return value.
  //    - returnValue: double - Returns the total number of seconds for which the execution has been running. 
  //
  rpc Get_SecondsExecuting(Execution_Get_SecondsExecutingRequest) returns (Execution_Get_SecondsExecutingResponse);
  
  
  // Property: SecondsSuspended
  //
  // Returns the total number of seconds for which the execution has been suspended at breakpoints.
  //
  // Restarting the execution resets the value of this property.
  //
  // Execution_Get_SecondsSuspendedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_SecondsSuspendedResponse - The response message from the server. It provides the return value.
  //    - returnValue: double - Returns the total number of seconds for which the execution has been suspended at breakpoints. 
  //
  rpc Get_SecondsSuspended(Execution_Get_SecondsSuspendedRequest) returns (Execution_Get_SecondsSuspendedResponse);
  
  
  // Property: SecondsAtStart
  //
  // Returns the number of seconds between the creation of the engine and the beginning of the execution.
  //
  // This property returns the value of the Engine.SecondsSinceStart property when the execution starts. Restarting the execution resets the value of this property.
  //
  // Execution_Get_SecondsAtStartRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_SecondsAtStartResponse - The response message from the server. It provides the return value.
  //    - returnValue: double - Returns the number of seconds between the creation of the engine and the beginning of the execution. 
  //
  rpc Get_SecondsAtStart(Execution_Get_SecondsAtStartRequest) returns (Execution_Get_SecondsAtStartResponse);
  
  
  // Property: ForegroundThread
  //
  // Specifies the foreground thread of the execution.
  //
  // The foreground thread is the thread that the sequence editor or user interface displays as active for the execution.
  //
  // Execution_Set_ForegroundThreadRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: ThreadInstance - Specifies the foreground thread of the execution. 
  //
  // Execution_Set_ForegroundThreadResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_ForegroundThreadRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_ForegroundThreadResponse - The response message from the server. It provides the return value.
  //    - returnValue: ThreadInstance - Specifies the foreground thread of the execution. 
  //
  rpc Set_ForegroundThread(Execution_Set_ForegroundThreadRequest) returns (Execution_Set_ForegroundThreadResponse);
  rpc Get_ForegroundThread(Execution_Get_ForegroundThreadRequest) returns (Execution_Get_ForegroundThreadResponse);
  
  
  // Property: ClientFile
  //
  // Specifies the client sequence file when executing with a process model.
  //
  // Typically, you set this property in the process model to dynamically specify which client sequence file the process model invokes.
  // When the execution first uses the client sequence file, it locks the file so that it cannot be unloaded from the sequence file cache of the engine until the execution completes or until this property is set to a different sequence file. Additionally, when you set this property to a different sequence file or a NULL reference to clear out the execution reference to the previous client sequence file, ensure you have disabled the Optimize Non-Reentrant Calls to This Sequence sequence property setting in all sequences of the client sequence file, or the execution maintains a reference to the client sequence file until it completes.
  //
  // Execution_Set_ClientFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: SequenceFileInstance - Specifies the client sequence file when executing with a process model. 
  //
  // Execution_Set_ClientFileResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_ClientFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_ClientFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFileInstance - Specifies the client sequence file when executing with a process model. 
  //
  rpc Set_ClientFile(Execution_Set_ClientFileRequest) returns (Execution_Set_ClientFileResponse);
  rpc Get_ClientFile(Execution_Get_ClientFileRequest) returns (Execution_Get_ClientFileResponse);
  
  
  // Property: TracingDisabled
  //
  // Disables tracing on a per-execution basis.
  //
  // If tracing is globally disabled, enabling this property does nothing. This property is meant to disable tracing only when it would otherwise be enabled based on the StationOptions.TracingEnabled property, since this property overrides the enable setting on the station.
  //
  // Execution_Set_TracingDisabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - Disables tracing on a per-execution basis. 
  //
  // Execution_Set_TracingDisabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_TracingDisabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_TracingDisabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Disables tracing on a per-execution basis. 
  //
  rpc Set_TracingDisabled(Execution_Set_TracingDisabledRequest) returns (Execution_Set_TracingDisabledResponse);
  rpc Get_TracingDisabled(Execution_Get_TracingDisabledRequest) returns (Execution_Get_TracingDisabledResponse);
  
  
  // Property: RTEOptionForThisExecution
  //
  // Specifies the current setting that indicates how TestStand responds to a run-time error.
  //
  // The original setting for this property is the value of the StationOptions.RTEOption property when the execution is created.
  //
  // Execution_Set_RTEOptionForThisExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: RTEOptions - Specifies the current setting that indicates how TestStand responds to a run-time error. 
  //
  // Execution_Set_RTEOptionForThisExecutionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_RTEOptionForThisExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_RTEOptionForThisExecutionResponse - The response message from the server. It provides the return value.
  //    - returnValue: RTEOptions - Specifies the current setting that indicates how TestStand responds to a run-time error. 
  //
  rpc Set_RTEOptionForThisExecution(Execution_Set_RTEOptionForThisExecutionRequest) returns (Execution_Set_RTEOptionForThisExecutionResponse);
  rpc Get_RTEOptionForThisExecution(Execution_Get_RTEOptionForThisExecutionRequest) returns (Execution_Get_RTEOptionForThisExecutionResponse);
  
  
  // Property: BreakOnEntry
  //
  // Returns the value of the breakOnEntry parameter of the method call that started the most recent execution.
  //
  // Use this read-only property to determine whether the execution was created with the breakAtFirstStep parameter set to True.
  // The methods that start executions are Engine.NewExecution,  Engine.NewHierarchicalExecution, and RestartEx. If the most recent call was the Engine.NewExecution or the Engine.NewHierarchicalExecution method, this property returns the value specified for the breakOnFirstStep parameter.  If the most recent call was the Execution.Restart method, this property returns the value of the breakOnEntryParam parameter.  If the most recent call was the Execution.RestartEx method, this property returns True if the restartOptionsParam parameter included the RestartOption_BreakOnEntry value.
  //
  // Execution_Get_BreakOnEntryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_BreakOnEntryResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns the value of the breakOnEntry parameter of the method call that started the most recent execution. 
  //
  rpc Get_BreakOnEntry(Execution_Get_BreakOnEntryRequest) returns (Execution_Get_BreakOnEntryResponse);
  
  
  // Property: StartCount
  //
  // Returns the number of times the execution has been started.
  //
  // This count increments after TestStand sends the UIMsg_StartExecution message to the user interface. Calling this property while handling the UIMsg_StartExecution message returns 0 the first time the execution starts.
  // 
  //
  // Execution_Get_StartCountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_StartCountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of times the execution has been started. 
  //
  rpc Get_StartCount(Execution_Get_StartCountRequest) returns (Execution_Get_StartCountResponse);
  
  
  // Property: RunTimeVariables
  //
  // Use this property object to create and access variables you want to exist only for the current run of the execution.
  //
  // TestStand destroys these variables when the execution completes, terminates, or aborts.
  //
  // Execution_Get_RunTimeVariablesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_RunTimeVariablesResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Use this property object to create and access variables you want to exist only for the current run of the execution. 
  //
  rpc Get_RunTimeVariables(Execution_Get_RunTimeVariablesRequest) returns (Execution_Get_RunTimeVariablesResponse);
  
  
  // Property: Reports
  //
  // Returns the collection of reports for the execution.
  //
  // Execution_Get_ReportsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_ReportsResponse - The response message from the server. It provides the return value.
  //    - returnValue: ReportsInstance - Returns the collection of reports for the execution. 
  //
  rpc Get_Reports(Execution_Get_ReportsRequest) returns (Execution_Get_ReportsResponse);
  
  
  // Property: OverrideNonTerminatableThreads
  //
  // Overrides the value you set in the Thread.TerminationOption property. When an execution terminates, threads with a TerminationOption of ThreadTerminationOptions_Normal stop. If the Execution.OverrideNonTerminatableThreads property is set, threads with a TerminationOption of ThreadTerminationOptions_Prompt also stop without prompting. This option does not affect threads with a TerminationOption of ThreadTerminationOptions_Never.
  //
  // Execution_Set_OverrideNonTerminatableThreadsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - Overrides the value you set in the Thread.TerminationOption property. When an execution terminates, threads with a TerminationOption of ThreadTerminationOptions_Normal stop. If the Execution.OverrideNonTerminatableThreads property is set, threads with a TerminationOption of ThreadTerminationOptions_Prompt also stop without prompting. This option does not affect threads with a TerminationOption of ThreadTerminationOptions_Never. 
  //
  // Execution_Set_OverrideNonTerminatableThreadsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_OverrideNonTerminatableThreadsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_OverrideNonTerminatableThreadsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Overrides the value you set in the Thread.TerminationOption property. When an execution terminates, threads with a TerminationOption of ThreadTerminationOptions_Normal stop. If the Execution.OverrideNonTerminatableThreads property is set, threads with a TerminationOption of ThreadTerminationOptions_Prompt also stop without prompting. This option does not affect threads with a TerminationOption of ThreadTerminationOptions_Never. 
  //
  rpc Set_OverrideNonTerminatableThreads(Execution_Set_OverrideNonTerminatableThreadsRequest) returns (Execution_Set_OverrideNonTerminatableThreadsResponse);
  rpc Get_OverrideNonTerminatableThreads(Execution_Get_OverrideNonTerminatableThreadsRequest) returns (Execution_Get_OverrideNonTerminatableThreadsResponse);
  
  
  // Property: TerminateNonTerminatableThreadsPrompt
  //
  // Specifies the prompt message for a user interface to display in response to the UIMsg_NonTerminatableThreadsArePreventingTermination event. For example, a process model that spawns threads with a Thread.TerminationOption property set to ThreadTerminationOptions_Prompt might set this property to inform users of the specific work they might lose if they terminate the threads. A user interface can display a different prompt message, but this behavior typically is not necessary.
  //
  // Execution_Set_TerminateNonTerminatableThreadsPromptRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: string - Specifies the prompt message for a user interface to display in response to the UIMsg_NonTerminatableThreadsArePreventingTermination event. For example, a process model that spawns threads with a Thread.TerminationOption property set to ThreadTerminationOptions_Prompt might set this property to inform users of the specific work they might lose if they terminate the threads. A user interface can display a different prompt message, but this behavior typically is not necessary. 
  //
  // Execution_Set_TerminateNonTerminatableThreadsPromptResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_TerminateNonTerminatableThreadsPromptRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_TerminateNonTerminatableThreadsPromptResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the prompt message for a user interface to display in response to the UIMsg_NonTerminatableThreadsArePreventingTermination event. For example, a process model that spawns threads with a Thread.TerminationOption property set to ThreadTerminationOptions_Prompt might set this property to inform users of the specific work they might lose if they terminate the threads. A user interface can display a different prompt message, but this behavior typically is not necessary. 
  //
  rpc Set_TerminateNonTerminatableThreadsPrompt(Execution_Set_TerminateNonTerminatableThreadsPromptRequest) returns (Execution_Set_TerminateNonTerminatableThreadsPromptResponse);
  rpc Get_TerminateNonTerminatableThreadsPrompt(Execution_Get_TerminateNonTerminatableThreadsPromptRequest) returns (Execution_Get_TerminateNonTerminatableThreadsPromptResponse);
  
  
  // Property: MaximumResultsPerPostResultsCallback
  //
  // Specifies the maximum number of results a thread accumulates before calling its PostResults callbacks.
  //
  // Execution_Set_MaximumResultsPerPostResultsCallbackRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: int32 - Specifies the maximum number of results a thread accumulates before calling its PostResults callbacks. 
  //
  // Execution_Set_MaximumResultsPerPostResultsCallbackResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_MaximumResultsPerPostResultsCallbackRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_MaximumResultsPerPostResultsCallbackResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the maximum number of results a thread accumulates before calling its PostResults callbacks. 
  //
  rpc Set_MaximumResultsPerPostResultsCallback(Execution_Set_MaximumResultsPerPostResultsCallbackRequest) returns (Execution_Set_MaximumResultsPerPostResultsCallbackResponse);
  rpc Get_MaximumResultsPerPostResultsCallback(Execution_Get_MaximumResultsPerPostResultsCallbackRequest) returns (Execution_Get_MaximumResultsPerPostResultsCallbackResponse);
  
  
  // Property: PostResultsCallbackInterval
  //
  // Specifies the interval at which threads in the execution call PostResults callbacks.
  //
  // If the time since a thread last called the PostResults callback equals or exceeds the value of this property, the thread calls the PostResults callback when TestStand next generates a result.
  // If the interval is a negative number, the absolute value determines the interval. In this case, threads call PostResults callbacks if the number of results accumulated exceeds the estimate of how many results TestStand can process within the interval based on the duration of previous PostResults callbacks. This mechanism provides more of a balance between result generation and result processing tasks if result generation is much faster than result processing.
  //
  // Execution_Set_PostResultsCallbackIntervalRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: double - Specifies the interval at which threads in the execution call PostResults callbacks. 
  //
  // Execution_Set_PostResultsCallbackIntervalResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_PostResultsCallbackIntervalRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_PostResultsCallbackIntervalResponse - The response message from the server. It provides the return value.
  //    - returnValue: double - Specifies the interval at which threads in the execution call PostResults callbacks. 
  //
  rpc Set_PostResultsCallbackInterval(Execution_Set_PostResultsCallbackIntervalRequest) returns (Execution_Set_PostResultsCallbackIntervalResponse);
  rpc Get_PostResultsCallbackInterval(Execution_Get_PostResultsCallbackIntervalRequest) returns (Execution_Get_PostResultsCallbackIntervalResponse);
  
  
  // Property: PostResultsCallbackOptions
  //
  // Specifies the options for when TestStand calls PostResults callbacks.
  //
  // Execution_Set_PostResultsCallbackOptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: int32 - Specifies the options for when TestStand calls PostResults callbacks. 
  //
  // Execution_Set_PostResultsCallbackOptionsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_PostResultsCallbackOptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_PostResultsCallbackOptionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the options for when TestStand calls PostResults callbacks. 
  //
  rpc Set_PostResultsCallbackOptions(Execution_Set_PostResultsCallbackOptionsRequest) returns (Execution_Set_PostResultsCallbackOptionsResponse);
  rpc Get_PostResultsCallbackOptions(Execution_Get_PostResultsCallbackOptionsRequest) returns (Execution_Get_PostResultsCallbackOptionsResponse);
  
  
  // Property: DiscardResults
  //
  // When you set this property to True, each step in the execution does not add its results to the corresponding Locals.ResultList array. Regardless of the value of this property, TestStand passes results to the PostResults and the PostResultListEntry Engine callbacks.
  //
  // Execution_Set_DiscardResultsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool - When you set this property to True, each step in the execution does not add its results to the corresponding Locals.ResultList array. Regardless of the value of this property, TestStand passes results to the PostResults and the PostResultListEntry Engine callbacks. 
  //
  // Execution_Set_DiscardResultsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_DiscardResultsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_DiscardResultsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When you set this property to True, each step in the execution does not add its results to the corresponding Locals.ResultList array. Regardless of the value of this property, TestStand passes results to the PostResults and the PostResultListEntry Engine callbacks. 
  //
  rpc Set_DiscardResults(Execution_Set_DiscardResultsRequest) returns (Execution_Set_DiscardResultsResponse);
  rpc Get_DiscardResults(Execution_Get_DiscardResultsRequest) returns (Execution_Get_DiscardResultsResponse);
  
  
  // Property: ThreadIds
  //
  // Returns an array that contains the thread ID of each thread in the execution.
  //
  // Execution_Get_ThreadIdsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_ThreadIdsResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated int32 - Returns an array that contains the thread ID of each thread in the execution. 
  //
  rpc Get_ThreadIds(Execution_Get_ThreadIdsRequest) returns (Execution_Get_ThreadIdsResponse);
  
  
  // Property: PostResultsCallbackMask
  //
  // Specifies the mask of the sequences in which TestStand accumulates step results to transfer as a parameter to the PostResults callbacks sequence.
  //
  // You typically specify the callback mask if a custom process model plug-in processes results on-the-fly.
  //
  // Execution_Set_PostResultsCallbackMaskRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: int32 - Specifies the mask of the sequences in which TestStand accumulates step results to transfer as a parameter to the PostResults callbacks sequence. 
  //
  // Execution_Set_PostResultsCallbackMaskResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_PostResultsCallbackMaskRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_PostResultsCallbackMaskResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the mask of the sequences in which TestStand accumulates step results to transfer as a parameter to the PostResults callbacks sequence. 
  //
  rpc Set_PostResultsCallbackMask(Execution_Set_PostResultsCallbackMaskRequest) returns (Execution_Set_PostResultsCallbackMaskResponse);
  rpc Get_PostResultsCallbackMask(Execution_Get_PostResultsCallbackMaskRequest) returns (Execution_Get_PostResultsCallbackMaskResponse);
  
  
  // Property: PostResultsCallback_PreFlushMask
  //
  // TestStand calls PostResults callbacks with all accumulated results before entering any sequence you specify using this property.
  //
  // You typically set the pre-flush mask and post-flush mask when a Model Plugin – OnTheFly Step Results entry point requires that the Context parameter of the entry point refer to the same sequence stack frame that executes all the steps in the Steps parameter of the entry point. Otherwise, the Steps parameter of the entry point can contain steps from multiple stack frames. Using this technique results in fewer steps for each invocation of the OnTheFly Step Results entry point, which can affect performance.
  //
  // Execution_Set_PostResultsCallback_PreFlushMaskRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: int32 - TestStand calls PostResults callbacks with all accumulated results before entering any sequence you specify using this property. 
  //
  // Execution_Set_PostResultsCallback_PreFlushMaskResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_PostResultsCallback_PreFlushMaskRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_PostResultsCallback_PreFlushMaskResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - TestStand calls PostResults callbacks with all accumulated results before entering any sequence you specify using this property. 
  //
  rpc Set_PostResultsCallback_PreFlushMask(Execution_Set_PostResultsCallback_PreFlushMaskRequest) returns (Execution_Set_PostResultsCallback_PreFlushMaskResponse);
  rpc Get_PostResultsCallback_PreFlushMask(Execution_Get_PostResultsCallback_PreFlushMaskRequest) returns (Execution_Get_PostResultsCallback_PreFlushMaskResponse);
  
  
  // Property: PostResultsCallback_PostFlushMask
  //
  // TestStand calls PostResults callbacks with all accumulated results before exiting any sequence you specify using this property.
  //
  // You typically specify the pre-flush mask and post-flush mask when a Model Plugin – OnTheFly Step Results entry point requires that the Context parameter of the entry point refer to the same sequence stack frame that executes all the steps in the Steps parameter of the entry point. Otherwise, the Steps parameter of the entry point can contain steps from multiple stack frames. Using this technique results in fewer steps for each invocation of the OnTheFly Step Results entry point, which can affect performance.
  //
  // Execution_Set_PostResultsCallback_PostFlushMaskRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: int32 - TestStand calls PostResults callbacks with all accumulated results before exiting any sequence you specify using this property. 
  //
  // Execution_Set_PostResultsCallback_PostFlushMaskResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_PostResultsCallback_PostFlushMaskRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_PostResultsCallback_PostFlushMaskResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - TestStand calls PostResults callbacks with all accumulated results before exiting any sequence you specify using this property. 
  //
  rpc Set_PostResultsCallback_PostFlushMask(Execution_Set_PostResultsCallback_PostFlushMaskRequest) returns (Execution_Set_PostResultsCallback_PostFlushMaskResponse);
  rpc Get_PostResultsCallback_PostFlushMask(Execution_Get_PostResultsCallback_PostFlushMaskRequest) returns (Execution_Get_PostResultsCallback_PostFlushMaskResponse);
  
  
  // Property: OutputRecordStreams
  //
  // Returns the collection of ExecutionOutputRecordStream objects associated with this Execution.
  //
  // Execution_Get_OutputRecordStreamsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_OutputRecordStreamsResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionOutputRecordStreamsInstance - Returns the collection of ExecutionOutputRecordStream objects associated with this Execution. 
  //
  rpc Get_OutputRecordStreams(Execution_Get_OutputRecordStreamsRequest) returns (Execution_Get_OutputRecordStreamsResponse);
  
  
  // Property: IsController
  //
  // 
  //
  // Execution_Set_IsControllerRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //    - val: bool -  
  //
  // Execution_Set_IsControllerResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Execution_Get_IsControllerRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionInstance - The id of the Execution object.
  //
  // Execution_Get_IsControllerResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool -  
  //
  rpc Set_IsController(Execution_Set_IsControllerRequest) returns (Execution_Set_IsControllerResponse);
  rpc Get_IsController(Execution_Get_IsControllerRequest) returns (Execution_Get_IsControllerResponse);
  
  
}
message ThreadInstance {
  // Specifies the handle of the Thread instance in the server.
  string id = 1;
}

message ReportInstance {
  // Specifies the handle of the Report instance in the server.
  string id = 1;
}

message ReportsInstance {
  // Specifies the handle of the Reports instance in the server.
  string id = 1;
}

message ExecutionOutputRecordStreamsInstance {
  // Specifies the handle of the ExecutionOutputRecordStreams instance in the server.
  string id = 1;
}
message Execution_RestartWithNewArgumentsRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies which RestartOptions constant to use. You can specify more than one restart option by combining the constants using the bitwise-OR operator.
  RestartOptions restartOptionsParam = 2;
  // Specifies a PropertyObject object that contains the arguments to the sequence you want to execute. Each subproperty of the PropertyObject object represents a parameter for the sequence. The subproperties must appear in the same order in which the sequence parameters appear. You can pass a NULL reference if you do not want to pass any arguments. Passing NULL discards any arguments an execution already holds. If you want to reuse the arguments an execution already holds, use the Execution.RestartEx method instead of this method.
  PropertyObjectInstance sequenceArgsParam = 3;
}

message Execution_RestartWithNewArgumentsResponse {
}

message Execution_BreakRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_BreakResponse {
}

message Execution_ResumeRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_ResumeResponse {
}

message Execution_StepOverRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_StepOverResponse {
}

message Execution_StepIntoRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_StepIntoResponse {
}

message Execution_StepOutRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_StepOutResponse {
}

message Execution_AbortRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_AbortResponse {
}

message Execution_TerminateRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_TerminateResponse {
}

message Execution_TerminateInteractiveExecutionRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_TerminateInteractiveExecutionResponse {
}

message Execution_CancelTerminationRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_CancelTerminationResponse {
}

message Execution_RestartRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Pass True to stop at the first step in the execution.
  bool breakOnEntryParam = 2;
}

message Execution_RestartResponse {
}

message Execution_WaitForEndRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies the maximum number of milliseconds to wait. Specify -1 for no timeout.
  int32 millisecondTimeOut = 2;
  // Specify True to process Microsoft Windows messages while waiting or False to wait without processing Windows messages.
  bool processWindowsMsgs = 3;
  // If you call this method from a step, pass a reference to the execution of the step to allow this method to return immediately when the step execution is terminated or aborted.
  PropertyObjectInstance callingExecution = 4;
}

message Execution_WaitForEndResponse {
  // Returns True when the execution ends or False when the timeout occurs.
  bool returnValue = 1;
}

message Execution_GetThreadRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies the zero-based index of the list of threads in the execution.
  int32 index = 2;
}

message Execution_GetThreadResponse {
  // The return type of the Thread object.
  ThreadInstance returnValue = 1;
}

message Execution_GetSequenceFileRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_GetSequenceFileResponse {
  // The return type of the SequenceFile object.
  SequenceFileInstance returnValue = 1;
}

message Execution_GetModelSequenceFileRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_GetModelSequenceFileResponse {
  // The return type of the SequenceFile object.
  SequenceFileInstance returnValue = 1;
}

message Execution_AddExtraResultRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies the property name of the property to add to the results. For example, to add the upper limit of Numeric Limit Test steps, pass the name "Step.Limits.High".
  string propertyName = 2;
  // Specifies the name with which to store the copy of the property in the results list entry for each step.
  string resultPropertyName = 3;
}

message Execution_AddExtraResultResponse {
}

message Execution_DeleteExtraResultRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies the property name of the property to remove from the list of properties to add to the results. Use the same name that you passed as the first parameter to the Execution.AddExtraResult method, such as Step.Limits.High.
  string propertyName = 2;
}

message Execution_DeleteExtraResultResponse {
}

message Execution_ClearExtraResultListRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_ClearExtraResultListResponse {
}

message Execution_GetStatesRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_GetStatesResponse {
  // Returns the running state of the execution.
  ExecutionRunStates runState = 1;
  // If the execution is terminating, this value indicates how it is terminating.
  ExecutionTerminationStates termState = 2;
}

message Execution_AsPropertyObjectRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message Execution_ClearTemporaryBreakpointsRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_ClearTemporaryBreakpointsResponse {
}

message Execution_GetFileGlobalsRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies the sequence file that contains the file globals you want returned.
  SequenceFileInstance sequenceFileParam = 2;
}

message Execution_GetFileGlobalsResponse {
  // Returns a PropertyObject that contains the file globals for the particular sequence file you pass as the sequenceFileParam parameter. It returns the run-time copy of the file globals. If a run-time copy has not yet been created, a new one is created and returned.
  PropertyObjectInstance returnValue = 1;
}

message Execution_RestartExRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies which RestartOptions to use. You can specify more than one RestartOption by combining the constants using the bitwise-OR operator.
  RestartOptions restartOptionsParam = 2;
}

message Execution_RestartExResponse {
}

message Execution_WaitForEndExRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies the maximum number of milliseconds to wait. Specify -1 for no timeout.
  // If you pass a value for the callingSequenceContext parameter, TestStand suspends the timeout while the calling execution is suspended at a breakpoint so that the time spent at a breakpoint does not count towards the elapsed timeout time.
  int32 millisecondTimeOut = 2;
  // Specify True to process Microsoft Windows messages while waiting or False to wait without processing Windows messages.
  bool processWindowsMsgs = 3;
  // Specifies a step in which to store the results of the execution. If you specify a step, the result status of the step reflects that of the execution, and TestStand stores the result list for the execution in the TS.AsyncSequenceCall result property for the step.
  PropertyObjectInstance stepToStoreResultsIn = 4;
  // If you are calling this method from inside of an execution, pass the current sequence context of the execution you are calling the method from for this parameter so TestStand can monitor the execution and abort the method if the calling execution is terminated or aborted.
  // 
  PropertyObjectInstance callingSequenceContext = 5;
}

message Execution_WaitForEndExResponse {
  // Returns True when the execution ends or False when the timeout occurs.
  bool returnValue = 1;
}

message Execution_InitTerminationMonitorRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_InitTerminationMonitorResponse {
  // A property object that contains data the Execution.GetTerminationMonitorStatus method uses to determine whether a particular execution is terminating and, therefore, whether a particular operation (that is, a code module of a step within the execution) needs to abort what it is doing.
  // Note: Do not directly access the data in this property object.
  PropertyObjectInstance returnValue = 1;
}

message Execution_GetTerminationMonitorStatusRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies a property object you obtain by calling the Execution.InitTerminationMonitor method. The data this property object contains is not meant to be accessed directly.
  PropertyObjectInstance terminationMonitorData = 2;
  // If you are monitoring an execution from a step that is running as part of the execution so you can abort the step when the execution terminates or aborts, pass the SequenceContext object of the step. If you are monitoring an execution from a step in a different execution or from code that is not part of a step, leave this parameter unspecified. When you specify this parameter, TestStand uses other information about the execution of the step that is monitoring the execution to determine whether to abort.
  PropertyObjectInstance sequenceContextParam = 3;
}

message Execution_GetTerminationMonitorStatusResponse {
  // Returns True if the execution is terminating or aborting.
  bool returnValue = 1;
}

message Execution_AddPostStepCustomUIMessageRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies the custom user interface message code. You can use more than one custom user interface message associated with the same code. TestStand sends the custom user interface messages when the associated expression evaluates to True.
  int32 MsgCode = 2;
  // Specifies the valid expression to evaluate after each step executes.
  string Expression = 3;
  // Specifies any combination of the flags found in CustomPostStepUIMsgOptions.
  CustomPostStepUIMsgOptions CustomUIMessageOptions = 4;
}

message Execution_AddPostStepCustomUIMessageResponse {
}

message Execution_RemovePostStepCustomUIMessageRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies the custom UI message code. This method does not return an error when the message code is not associated with an execution.
  int32 MsgCode = 2;
}

message Execution_RemovePostStepCustomUIMessageResponse {
}

message Execution_EnableCallbackRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies the callback type.
  CallbackTypes callbackType = 2;
  // If this value is False, TestStand disables the callback. Otherwise, TestStand enables the callback.
  bool newValue = 3;
}

message Execution_EnableCallbackResponse {
}

message Execution_IsCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies the callback type. Refer to CallbackTypes for the possible values.
  CallbackTypes callbackType = 2;
}

message Execution_IsCallbackEnabledResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message Execution_NewSequenceDefaultValuesRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies which default value sequence the method creates.
  SequenceInstance origSequence = 2;
}

message Execution_NewSequenceDefaultValuesResponse {
  // Returns a Sequence object that represents default values an execution can use to create run-time copies of the sequence during execution. Typically, you update the local variables and step properties in the sequence this method returns, and use the  Execution.SetSequenceDefaultValues method to instruct the execution to use the sequence to create run-time sequences.
  SequenceInstance returnValue = 1;
}

message Execution_GetSequenceDefaultValuesRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies which default value sequence the method returns.
  SequenceInstance origSequence = 2;
  // Specifies whether the method operates on the list of default value sequences for the execution or the hierarchy of executions with which the execution is associated.
  SequenceDefaultValueScopes defaultValueType = 3;
}

message Execution_GetSequenceDefaultValuesResponse {
  // Returns a Sequence object that represents the default values an execution is using to create run-time copies of the sequence.
  SequenceInstance returnValue = 1;
}

message Execution_SetSequenceDefaultValuesRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies the default value sequence the execution uses to create run-time sequences. Use the Execution.NewSequenceDefaultValues method to create a default value sequence and update the local variables and step properties in the sequence before calling this method.
  SequenceInstance defValSequence = 2;
  // Specifies whether the method operates on the list of default value sequences for the execution or the hierarchy of executions associated with the execution.
  SequenceDefaultValueScopes defaultValueType = 3;
}

message Execution_SetSequenceDefaultValuesResponse {
}

message Execution_ClearSequenceDefaultValuesRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies the sequences that indicate the default value to remove. Passing NULL removes all default value sequences.
  SequenceInstance origSequence = 2;
  // Specifies whether the method operates on the list of default value sequences for the execution or the hierarchy of executions associated with the execution.
  SequenceDefaultValueScopes defaultValueType = 3;
}

message Execution_ClearSequenceDefaultValuesResponse {
}

message Execution_NewThreadRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies the SequenceFile object that contains the sequence to execute.
  SequenceFileInstance sequenceFileParam = 2;
  // Specifies the name of the sequence to execute.
  string sequenceNameParam = 3;
  // Pass 0 for the default behavior or pass one or more NewThreadOptions constants. Use the bitwise-OR operator to pass multiple constants.
  NewThreadOptions options = 4;
  // If you call this method from a code module for a step inside of an execution, pass the sequence context of the step. This allows this method to behave similar to a Sequence Call step and to set the SequenceContext.Caller property correctly.
  SequenceContextInstance sequenceContextParam = 5;
  // Specifies a PropertyObject object that contains the arguments to the sequence you want to execute. Each subproperty of PropertyObject represents a parameter to the sequence. The subproperties must appear in the same order as the sequence parameters.
  PropertyObjectInstance sequenceArgsParam = 6;
}

message Execution_NewThreadResponse {
  // The thread created by this method.
  ThreadInstance returnValue = 1;
}

message Execution_Get_InInteractiveModeRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_InInteractiveModeResponse {
  // Returns True if the execution is executing steps interactively.
  bool returnValue = 1;
}

message Execution_Set_TypeMaskRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies the ExecutionTypeMask constants with which you created the execution.
  int32 val = 2;
}

message Execution_Set_TypeMaskResponse {
}

message Execution_Get_TypeMaskRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_TypeMaskResponse {
  // Specifies the ExecutionTypeMask constants with which you created the execution.
  int32 returnValue = 1;
}

message Execution_Set_BreakOnRTEForThisExecutionRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Note: This property is obsolete. Use the Execution.RTEOptionForThisExecution property instead.
  bool val = 2;
}

message Execution_Set_BreakOnRTEForThisExecutionResponse {
}

message Execution_Get_BreakOnRTEForThisExecutionRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_BreakOnRTEForThisExecutionResponse {
  // Note: This property is obsolete. Use the Execution.RTEOptionForThisExecution property instead.
  bool returnValue = 1;
}

message Execution_Get_NumThreadsRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_NumThreadsResponse {
  // Returns the current number of threads in the execution.
  int32 returnValue = 1;
}

message Execution_Set_ForegroundThreadIndexRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies the foreground thread of the execution.
  int32 val = 2;
}

message Execution_Set_ForegroundThreadIndexResponse {
}

message Execution_Get_ForegroundThreadIndexRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_ForegroundThreadIndexResponse {
  // Specifies the foreground thread of the execution.
  int32 returnValue = 1;
}

message Execution_Set_SeqFilePreStepCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool val = 2;
}

message Execution_Set_SeqFilePreStepCallbackEnabledResponse {
}

message Execution_Get_SeqFilePreStepCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_SeqFilePreStepCallbackEnabledResponse {
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool returnValue = 1;
}

message Execution_Set_SeqFilePostStepCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool val = 2;
}

message Execution_Set_SeqFilePostStepCallbackEnabledResponse {
}

message Execution_Get_SeqFilePostStepCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_SeqFilePostStepCallbackEnabledResponse {
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool returnValue = 1;
}

message Execution_Set_ModelPreStepCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool val = 2;
}

message Execution_Set_ModelPreStepCallbackEnabledResponse {
}

message Execution_Get_ModelPreStepCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_ModelPreStepCallbackEnabledResponse {
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool returnValue = 1;
}

message Execution_Set_ModelPostStepCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool val = 2;
}

message Execution_Set_ModelPostStepCallbackEnabledResponse {
}

message Execution_Get_ModelPostStepCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_ModelPostStepCallbackEnabledResponse {
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool returnValue = 1;
}

message Execution_Set_StationPreStepCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool val = 2;
}

message Execution_Set_StationPreStepCallbackEnabledResponse {
}

message Execution_Get_StationPreStepCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_StationPreStepCallbackEnabledResponse {
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool returnValue = 1;
}

message Execution_Set_StationPostStepCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool val = 2;
}

message Execution_Set_StationPostStepCallbackEnabledResponse {
}

message Execution_Get_StationPostStepCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_StationPostStepCallbackEnabledResponse {
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool returnValue = 1;
}

message Execution_Set_SeqFilePreInteractiveCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool val = 2;
}

message Execution_Set_SeqFilePreInteractiveCallbackEnabledResponse {
}

message Execution_Get_SeqFilePreInteractiveCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_SeqFilePreInteractiveCallbackEnabledResponse {
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool returnValue = 1;
}

message Execution_Set_SeqFilePostInteractiveCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool val = 2;
}

message Execution_Set_SeqFilePostInteractiveCallbackEnabledResponse {
}

message Execution_Get_SeqFilePostInteractiveCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_SeqFilePostInteractiveCallbackEnabledResponse {
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool returnValue = 1;
}

message Execution_Set_ModelPreInteractiveCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool val = 2;
}

message Execution_Set_ModelPreInteractiveCallbackEnabledResponse {
}

message Execution_Get_ModelPreInteractiveCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_ModelPreInteractiveCallbackEnabledResponse {
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool returnValue = 1;
}

message Execution_Set_ModelPostInteractiveCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool val = 2;
}

message Execution_Set_ModelPostInteractiveCallbackEnabledResponse {
}

message Execution_Get_ModelPostInteractiveCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_ModelPostInteractiveCallbackEnabledResponse {
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool returnValue = 1;
}

message Execution_Set_StationPreInteractiveCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool val = 2;
}

message Execution_Set_StationPreInteractiveCallbackEnabledResponse {
}

message Execution_Get_StationPreInteractiveCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_StationPreInteractiveCallbackEnabledResponse {
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool returnValue = 1;
}

message Execution_Set_StationPostInteractiveCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool val = 2;
}

message Execution_Set_StationPostInteractiveCallbackEnabledResponse {
}

message Execution_Get_StationPostInteractiveCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_StationPostInteractiveCallbackEnabledResponse {
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool returnValue = 1;
}

message Execution_Set_TimeResultsEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Stores timing results for steps in the execution.
  bool val = 2;
}

message Execution_Set_TimeResultsEnabledResponse {
}

message Execution_Get_TimeResultsEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_TimeResultsEnabledResponse {
  // Stores timing results for steps in the execution.
  bool returnValue = 1;
}

message Execution_Set_StandardResultsEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Stores all the standard results for steps in the execution. Standard results include properties that specify basic step execution information.
  bool val = 2;
}

message Execution_Set_StandardResultsEnabledResponse {
}

message Execution_Get_StandardResultsEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_StandardResultsEnabledResponse {
  // Stores all the standard results for steps in the execution. Standard results include properties that specify basic step execution information.
  bool returnValue = 1;
}

message Execution_Set_StationPostResultCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool val = 2;
}

message Execution_Set_StationPostResultCallbackEnabledResponse {
}

message Execution_Get_StationPostResultCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_StationPostResultCallbackEnabledResponse {
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool returnValue = 1;
}

message Execution_Set_ModelPostResultCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool val = 2;
}

message Execution_Set_ModelPostResultCallbackEnabledResponse {
}

message Execution_Get_ModelPostResultCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_ModelPostResultCallbackEnabledResponse {
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool returnValue = 1;
}

message Execution_Set_SeqFilePostResultCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool val = 2;
}

message Execution_Set_SeqFilePostResultCallbackEnabledResponse {
}

message Execution_Get_SeqFilePostResultCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_SeqFilePostResultCallbackEnabledResponse {
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool returnValue = 1;
}

message Execution_Set_StationPostErrorCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool val = 2;
}

message Execution_Set_StationPostErrorCallbackEnabledResponse {
}

message Execution_Get_StationPostErrorCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_StationPostErrorCallbackEnabledResponse {
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool returnValue = 1;
}

message Execution_Set_ModelPostErrorCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool val = 2;
}

message Execution_Set_ModelPostErrorCallbackEnabledResponse {
}

message Execution_Get_ModelPostErrorCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_ModelPostErrorCallbackEnabledResponse {
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool returnValue = 1;
}

message Execution_Set_SeqFilePostErrorCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool val = 2;
}

message Execution_Set_SeqFilePostErrorCallbackEnabledResponse {
}

message Execution_Get_SeqFilePostErrorCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_SeqFilePostErrorCallbackEnabledResponse {
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool returnValue = 1;
}

message Execution_Set_StationPostFailCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool val = 2;
}

message Execution_Set_StationPostFailCallbackEnabledResponse {
}

message Execution_Get_StationPostFailCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_StationPostFailCallbackEnabledResponse {
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool returnValue = 1;
}

message Execution_Set_ModelPostFailCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool val = 2;
}

message Execution_Set_ModelPostFailCallbackEnabledResponse {
}

message Execution_Get_ModelPostFailCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_ModelPostFailCallbackEnabledResponse {
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback sequence. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool returnValue = 1;
}

message Execution_Set_SeqFilePostFailCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool val = 2;
}

message Execution_Set_SeqFilePostFailCallbackEnabledResponse {
}

message Execution_Get_SeqFilePostFailCallbackEnabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_SeqFilePostFailCallbackEnabledResponse {
  // Note: This property is obsolete. Use the Execution.EnableCallback method to enable the callback. Use the Execution.IsCallbackEnabled method to verify that the callback is enabled.
  bool returnValue = 1;
}

message Execution_Set_DisableResultsRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Records results for steps running in the execution.
  bool val = 2;
}

message Execution_Set_DisableResultsResponse {
}

message Execution_Get_DisableResultsRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_DisableResultsResponse {
  // Records results for steps running in the execution.
  bool returnValue = 1;
}

message Execution_Set_ResultStatusRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies the result status string for the execution.
  string val = 2;
}

message Execution_Set_ResultStatusResponse {
}

message Execution_Get_ResultStatusRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_ResultStatusResponse {
  // Specifies the result status string for the execution.
  string returnValue = 1;
}

message Execution_Get_ErrorObjectRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_ErrorObjectResponse {
  // Returns the error PropertyObject that contains the error reporting properties for this execution.
  PropertyObjectInstance returnValue = 1;
}

message Execution_Get_ReportRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_ReportResponse {
  // Returns the Report object for the execution.
  ReportInstance returnValue = 1;
}

message Execution_Get_IdRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_IdResponse {
  // Returns a unique ID number for the execution.
  // Note: The ID number is never zero.
  int32 returnValue = 1;
}

message Execution_Get_DisplayNameRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_DisplayNameResponse {
  // Returns the name to display for the execution.
  string returnValue = 1;
}

message Execution_Get_ResultObjectRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_ResultObjectResponse {
  // Returns the Result PropertyObject for the execution.
  PropertyObjectInstance returnValue = 1;
}

message Execution_Get_SequenceFilePathRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_SequenceFilePathResponse {
  // Returns the sequence file pathname. Returns an empty string for unsaved sequence files.
  string returnValue = 1;
}

message Execution_Get_ModelSequenceFilePathRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_ModelSequenceFilePathResponse {
  // Returns the absolute pathname of the model sequence file for this execution.
  string returnValue = 1;
}

message Execution_Get_SecondsExecutingRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_SecondsExecutingResponse {
  // Returns the total number of seconds for which the execution has been running.
  double returnValue = 1;
}

message Execution_Get_SecondsSuspendedRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_SecondsSuspendedResponse {
  // Returns the total number of seconds for which the execution has been suspended at breakpoints.
  double returnValue = 1;
}

message Execution_Get_SecondsAtStartRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_SecondsAtStartResponse {
  // Returns the number of seconds between the creation of the engine and the beginning of the execution.
  double returnValue = 1;
}

message Execution_Set_ForegroundThreadRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies the foreground thread of the execution.
  ThreadInstance val = 2;
}

message Execution_Set_ForegroundThreadResponse {
}

message Execution_Get_ForegroundThreadRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_ForegroundThreadResponse {
  // Specifies the foreground thread of the execution.
  ThreadInstance returnValue = 1;
}

message Execution_Set_ClientFileRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies the client sequence file when executing with a process model.
  SequenceFileInstance val = 2;
}

message Execution_Set_ClientFileResponse {
}

message Execution_Get_ClientFileRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_ClientFileResponse {
  // Specifies the client sequence file when executing with a process model.
  SequenceFileInstance returnValue = 1;
}

message Execution_Set_TracingDisabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Disables tracing on a per-execution basis.
  bool val = 2;
}

message Execution_Set_TracingDisabledResponse {
}

message Execution_Get_TracingDisabledRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_TracingDisabledResponse {
  // Disables tracing on a per-execution basis.
  bool returnValue = 1;
}

message Execution_Set_RTEOptionForThisExecutionRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies the current setting that indicates how TestStand responds to a run-time error.
  RTEOptions val = 2;
}

message Execution_Set_RTEOptionForThisExecutionResponse {
}

message Execution_Get_RTEOptionForThisExecutionRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_RTEOptionForThisExecutionResponse {
  // Specifies the current setting that indicates how TestStand responds to a run-time error.
  RTEOptions returnValue = 1;
}

message Execution_Get_BreakOnEntryRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_BreakOnEntryResponse {
  // Returns the value of the breakOnEntry parameter of the method call that started the most recent execution.
  bool returnValue = 1;
}

message Execution_Get_StartCountRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_StartCountResponse {
  // Returns the number of times the execution has been started.
  int32 returnValue = 1;
}

message Execution_Get_RunTimeVariablesRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_RunTimeVariablesResponse {
  // Use this property object to create and access variables you want to exist only for the current run of the execution.
  PropertyObjectInstance returnValue = 1;
}

message Execution_Get_ReportsRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_ReportsResponse {
  // Returns the collection of reports for the execution.
  ReportsInstance returnValue = 1;
}

message Execution_Set_OverrideNonTerminatableThreadsRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Overrides the value you set in the Thread.TerminationOption property. When an execution terminates, threads with a TerminationOption of ThreadTerminationOptions_Normal stop. If the Execution.OverrideNonTerminatableThreads property is set, threads with a TerminationOption of ThreadTerminationOptions_Prompt also stop without prompting. This option does not affect threads with a TerminationOption of ThreadTerminationOptions_Never.
  bool val = 2;
}

message Execution_Set_OverrideNonTerminatableThreadsResponse {
}

message Execution_Get_OverrideNonTerminatableThreadsRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_OverrideNonTerminatableThreadsResponse {
  // Overrides the value you set in the Thread.TerminationOption property. When an execution terminates, threads with a TerminationOption of ThreadTerminationOptions_Normal stop. If the Execution.OverrideNonTerminatableThreads property is set, threads with a TerminationOption of ThreadTerminationOptions_Prompt also stop without prompting. This option does not affect threads with a TerminationOption of ThreadTerminationOptions_Never.
  bool returnValue = 1;
}

message Execution_Set_TerminateNonTerminatableThreadsPromptRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies the prompt message for a user interface to display in response to the UIMsg_NonTerminatableThreadsArePreventingTermination event. For example, a process model that spawns threads with a Thread.TerminationOption property set to ThreadTerminationOptions_Prompt might set this property to inform users of the specific work they might lose if they terminate the threads. A user interface can display a different prompt message, but this behavior typically is not necessary.
  string val = 2;
}

message Execution_Set_TerminateNonTerminatableThreadsPromptResponse {
}

message Execution_Get_TerminateNonTerminatableThreadsPromptRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_TerminateNonTerminatableThreadsPromptResponse {
  // Specifies the prompt message for a user interface to display in response to the UIMsg_NonTerminatableThreadsArePreventingTermination event. For example, a process model that spawns threads with a Thread.TerminationOption property set to ThreadTerminationOptions_Prompt might set this property to inform users of the specific work they might lose if they terminate the threads. A user interface can display a different prompt message, but this behavior typically is not necessary.
  string returnValue = 1;
}

message Execution_Set_MaximumResultsPerPostResultsCallbackRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies the maximum number of results a thread accumulates before calling its PostResults callbacks.
  int32 val = 2;
}

message Execution_Set_MaximumResultsPerPostResultsCallbackResponse {
}

message Execution_Get_MaximumResultsPerPostResultsCallbackRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_MaximumResultsPerPostResultsCallbackResponse {
  // Specifies the maximum number of results a thread accumulates before calling its PostResults callbacks.
  int32 returnValue = 1;
}

message Execution_Set_PostResultsCallbackIntervalRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies the interval at which threads in the execution call PostResults callbacks.
  double val = 2;
}

message Execution_Set_PostResultsCallbackIntervalResponse {
}

message Execution_Get_PostResultsCallbackIntervalRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_PostResultsCallbackIntervalResponse {
  // Specifies the interval at which threads in the execution call PostResults callbacks.
  double returnValue = 1;
}

message Execution_Set_PostResultsCallbackOptionsRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies the options for when TestStand calls PostResults callbacks.
  int32 val = 2;
}

message Execution_Set_PostResultsCallbackOptionsResponse {
}

message Execution_Get_PostResultsCallbackOptionsRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_PostResultsCallbackOptionsResponse {
  // Specifies the options for when TestStand calls PostResults callbacks.
  int32 returnValue = 1;
}

message Execution_Set_DiscardResultsRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // When you set this property to True, each step in the execution does not add its results to the corresponding Locals.ResultList array. Regardless of the value of this property, TestStand passes results to the PostResults and the PostResultListEntry Engine callbacks.
  bool val = 2;
}

message Execution_Set_DiscardResultsResponse {
}

message Execution_Get_DiscardResultsRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_DiscardResultsResponse {
  // When you set this property to True, each step in the execution does not add its results to the corresponding Locals.ResultList array. Regardless of the value of this property, TestStand passes results to the PostResults and the PostResultListEntry Engine callbacks.
  bool returnValue = 1;
}

message Execution_Get_ThreadIdsRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_ThreadIdsResponse {
  // Returns an array that contains the thread ID of each thread in the execution.
  repeated int32 returnValue = 1;
}

message Execution_Set_PostResultsCallbackMaskRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // Specifies the mask of the sequences in which TestStand accumulates step results to transfer as a parameter to the PostResults callbacks sequence.
  int32 val = 2;
}

message Execution_Set_PostResultsCallbackMaskResponse {
}

message Execution_Get_PostResultsCallbackMaskRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_PostResultsCallbackMaskResponse {
  // Specifies the mask of the sequences in which TestStand accumulates step results to transfer as a parameter to the PostResults callbacks sequence.
  int32 returnValue = 1;
}

message Execution_Set_PostResultsCallback_PreFlushMaskRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // TestStand calls PostResults callbacks with all accumulated results before entering any sequence you specify using this property.
  int32 val = 2;
}

message Execution_Set_PostResultsCallback_PreFlushMaskResponse {
}

message Execution_Get_PostResultsCallback_PreFlushMaskRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_PostResultsCallback_PreFlushMaskResponse {
  // TestStand calls PostResults callbacks with all accumulated results before entering any sequence you specify using this property.
  int32 returnValue = 1;
}

message Execution_Set_PostResultsCallback_PostFlushMaskRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // TestStand calls PostResults callbacks with all accumulated results before exiting any sequence you specify using this property.
  int32 val = 2;
}

message Execution_Set_PostResultsCallback_PostFlushMaskResponse {
}

message Execution_Get_PostResultsCallback_PostFlushMaskRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_PostResultsCallback_PostFlushMaskResponse {
  // TestStand calls PostResults callbacks with all accumulated results before exiting any sequence you specify using this property.
  int32 returnValue = 1;
}

message Execution_Get_OutputRecordStreamsRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_OutputRecordStreamsResponse {
  // Returns the collection of ExecutionOutputRecordStream objects associated with this Execution.
  ExecutionOutputRecordStreamsInstance returnValue = 1;
}

message Execution_Set_IsControllerRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
  // 
  bool val = 2;
}

message Execution_Set_IsControllerResponse {
}

message Execution_Get_IsControllerRequest {
  // The id of the Execution object.
  ExecutionInstance instance = 1;
}

message Execution_Get_IsControllerResponse {
  // 
  bool returnValue = 1;
}

// Thread
//
// Threads are elements of an Execution. Each thread maintains a call stack that contains a SequenceContext object for each active sequence invocation. You can obtain a thread of an execution by calling the Execution.GetThread method.
//
service Thread {
  // Method: ClearTemporaryBreakpoint
  //
  // Clears the temporary breakpoint you set by calling the Thread.SetStepInto, Thread.SetStepOut, or Thread.SetStepOver methods.
  //
  // Call the Execution.ClearTemporaryBreakpoints method to clear temporary breakpoints of all threads in an execution.
  //
  // Thread_ClearTemporaryBreakpointRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ThreadInstance - The id of the Thread object.
  //
  // Thread_ClearTemporaryBreakpointResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ClearTemporaryBreakpoint(Thread_ClearTemporaryBreakpointRequest) returns (Thread_ClearTemporaryBreakpointResponse);
  
  
  // Method: SetStepOver
  //
  // Sets the execution to suspend again after execution of the next step completes.
  //
  // The method does not resume the execution. The Execution.StepOver method, however, performs the equivalent of calling this method on the foreground thread and then resuming the execution.
  //
  // Thread_SetStepOverRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ThreadInstance - The id of the Thread object.
  //
  // Thread_SetStepOverResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetStepOver(Thread_SetStepOverRequest) returns (Thread_SetStepOverResponse);
  
  
  // Method: SetStepInto
  //
  // Sets the execution to suspend again at the earliest possible point.
  //
  // The method does not resume the execution. The Execution.StepInto method, however, performs the equivalent of calling this method on the foreground thread and then resuming the execution.
  //
  // Thread_SetStepIntoRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ThreadInstance - The id of the Thread object.
  //
  // Thread_SetStepIntoResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetStepInto(Thread_SetStepIntoRequest) returns (Thread_SetStepIntoResponse);
  
  
  // Method: SetStepOut
  //
  // Sets the execution to suspend again after execution of the current sequence completes.
  //
  // The method does not resume the execution. The Execution.StepOut method, however, performs the equivalent of calling this method on the foreground thread and then resuming the execution.
  //
  // Thread_SetStepOutRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ThreadInstance - The id of the Thread object.
  //
  // Thread_SetStepOutResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetStepOut(Thread_SetStepOutRequest) returns (Thread_SetStepOutResponse);
  
  
  // Method: GetSequenceContext
  //
  // Returns a reference to the SequenceContext object that corresponds to the call stack index you specify.
  //
  // Thread_GetSequenceContextRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ThreadInstance - The id of the Thread object.
  //    - callStackIndex: int32 - Specifies a zero-based index into the call stack. You obtain the number of items on the call stack from the Thread.CallStackSize property. Call stack index 0 specifies the sequence context for the most recently executing step group.
  //
  // Thread_GetSequenceContextResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: SequenceContextInstance - The return type of the SequenceContext object.
  //    - frameId: int3 - Returns a unique ID for the sequence context that this method returns. Use this ID with subsequent calls to GetSequenceContext to determine whether the execution is in the same sequence. This can help you minimize the number of items that you must update in the execution display in a user interface.
  //
  rpc GetSequenceContext(Thread_GetSequenceContextRequest) returns (Thread_GetSequenceContextResponse);
  
  
  // Method: ClearCurrentRTE
  //
  // Clears the Result.Error.Occurred property of the current step.
  //
  // Use this method to cause the execution thread to ignore a run-time error.
  //
  // Thread_ClearCurrentRTERequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ThreadInstance - The id of the Thread object.
  //
  // Thread_ClearCurrentRTEResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ClearCurrentRTE(Thread_ClearCurrentRTERequest) returns (Thread_ClearCurrentRTEResponse);
  
  
  // Method: DoInteractiveExecution
  //
  // Executes specific steps interactively.
  //
  // You can call this method only if the thread is currently suspended at a breakpoint. You can only run steps in the sequence and step group in which the execution is suspended.
  //
  // Thread_DoInteractiveExecutionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ThreadInstance - The id of the Thread object.
  //    - InteractiveArgsParam: InteractiveArgsInstance - Specifies an InteractiveArgs object that indicates which steps are currently selected steps in the user interface and that contains the looping information necessary for an interactive execution. The selected steps you specify must be in the currently executing step group.
  //
  // Thread_DoInteractiveExecutionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc DoInteractiveExecution(Thread_DoInteractiveExecutionRequest) returns (Thread_DoInteractiveExecutionResponse);
  
  
  // Method: PostUIMessage
  //
  // Note: This method is obsolete. Use the Thread.PostUIMessageEx method instead.
  //
  // Posts a user interface message to the current user interface or sequence editor.
  //
  // Thread_PostUIMessageRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ThreadInstance - The id of the Thread object.
  //    - eventCode: UIMessageCodes - Specifies the type of UIMessage.
  //    - numericDataParam: double - Specifies numeric data to pass with the message. For example, when you post a UIMsg_ProgressPercent event, this parameter specifies the percent done.
  //    - stringDataParam: string - Specifies string data to pass with the message. For example, when you post a UIMsg_ProgressText event, this parameter specifies the text to display.
  //    - synchronous: bool - Typically, you pass True for this parameter to direct the method to wait until the user interface processes the message. If you pass False, the method returns immediately without waiting for the user interface to handle the message. If you pass False and post messages faster than the user interface processes messages, the number of messages in the queue the user interface must handle grows unbounded and floods the user interface with messages, which causes the user interface to become unresponsive.
  //
  // Thread_PostUIMessageResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc PostUIMessage(Thread_PostUIMessageRequest) returns (Thread_PostUIMessageResponse);
  
  
  // Method: WaitForEnd
  //
  // Waits for the thread to finish executing.
  //
  // Thread_WaitForEndRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ThreadInstance - The id of the Thread object.
  //    - millisecondTimeOut: int32 - Specifies the number of milliseconds to wait or, pass -1 to wait indefinitely.
  //      If you pass a value for the callingSequenceContext parameter, TestStand suspends the timeout while the calling execution is suspended at a breakpoint so that the time spent at a breakpoint does not count towards the elapsed timeout time.
  //    - processWindowsMsgs: bool - Pass True to process Microsoft Windows messages while waiting.
  //    - stepToStoreResultsIn: ObjectInstance - Specifies the step for which the result is set to the sequence result of this thread.
  //    - callingSequenceContext: ObjectInstance - If you call this method from within a sequence, you can pass the current sequence context to specify that the method returns immediately if the user terminates the execution from which you call this method.
  //
  // Thread_WaitForEndResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the thread finished executing. Returns False if the timeout expired. 
  //
  rpc WaitForEnd(Thread_WaitForEndRequest) returns (Thread_WaitForEndResponse);
  
  
  // Method: AsPropertyObject
  //
  // Returns the underlying PropertyObject that represents the Thread object. Use the PropertyObject to modify, add, or remove custom properties of the object.
  //
  // Thread_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ThreadInstance - The id of the Thread object.
  //
  // Thread_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(Thread_AsPropertyObjectRequest) returns (Thread_AsPropertyObjectResponse);
  
  
  // Method: PostUIMessageEx
  //
  // Posts a user interface message to the current user interface or sequence editor.
  //
  // The messages that you can post from a step are UIMsg_ProgressPercent and UIMsg_ProgressText. These messages tell the user interface to display a progress indicator or text message for the execution.
  //
  // Thread_PostUIMessageExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ThreadInstance - The id of the Thread object.
  //    - eventCode: UIMessageCodes - Specifies the type of UIMessage.
  //    - numericDataParam: double - Specifies numeric data to pass with the message. When you post a UIMsg_ProgressPercent event, this parameter specifies the percent done.
  //    - stringDataParam: string - Specifies string data to pass with the message. When you post a UIMsg_ProgressText event, this parameter specifies the text to display.
  //    - activeXDataParam: ObjectInstance - Specifies an ActiveX reference to pass with the message. 
  //    - synchronous: bool - Typically, you pass True for this parameter to direct the method to wait until the user interface processes the message. If you pass False and post messages faster than the user interface processes messages, the number of messages in the queue the user interface must handle grows unbounded and floods the user interface with messages, which causes the user interface to become unresponsive.
  //
  // Thread_PostUIMessageExResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc PostUIMessageEx(Thread_PostUIMessageExRequest) returns (Thread_PostUIMessageExResponse);
  
  
  // Method: AddToBatch
  //
  // Adds this thread to a Batch object.
  //
  // The Batch Synchronization step type uses this method.
  //
  // Thread_AddToBatchRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ThreadInstance - The id of the Thread object.
  //    - batchObj: ObjectInstance - Specifies the batch object to which TestStand adds the thread.
  //    - orderNumber: int32 - Specifies the order number corresponding to the thread within the batch.
  //
  // Thread_AddToBatchResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc AddToBatch(Thread_AddToBatchRequest) returns (Thread_AddToBatchResponse);
  
  
  // Method: Resume
  //
  // Resumes execution of the thread.
  //
  // If you create a thread as initially suspended using either a sequence call step or the TestStand API, use this method to begin executing the thread.
  //
  // Thread_ResumeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ThreadInstance - The id of the Thread object.
  //
  // Thread_ResumeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Resume(Thread_ResumeRequest) returns (Thread_ResumeResponse);
  
  
  // Method: SetBatchRTEOption
  //
  // Specifies the behavior of TestStand when a run-time error occurs in any execution with a thread that is part of the same batch as the thread on which you call this method.
  //
  // Calling this method on a thread that is not part of a batch has no effect.
  //
  // Thread_SetBatchRTEOptionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ThreadInstance - The id of the Thread object.
  //    - newValue: RTEOptions - Specifies the behavior of TestStand when a run-time error occurs.
  //
  // Thread_SetBatchRTEOptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetBatchRTEOption(Thread_SetBatchRTEOptionRequest) returns (Thread_SetBatchRTEOptionResponse);
  
  
  // Method: FlushPostResults
  //
  // Instructs the thread to immediately call its PostResults callbacks with accumulated results. This method does nothing if the thread has no accumulated results.
  //
  // Thread_FlushPostResultsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ThreadInstance - The id of the Thread object.
  //
  // Thread_FlushPostResultsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc FlushPostResults(Thread_FlushPostResultsRequest) returns (Thread_FlushPostResultsResponse);
  
  

  // Property: DisplayName
  //
  // Returns the name to display for the thread.
  //
  // Thread_Get_DisplayNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ThreadInstance - The id of the Thread object.
  //
  // Thread_Get_DisplayNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name to display for the thread. 
  //
  rpc Get_DisplayName(Thread_Get_DisplayNameRequest) returns (Thread_Get_DisplayNameResponse);
  
  
  // Property: Execution
  //
  // Returns a reference to the Execution object to which the thread belongs.
  //
  // Release the Execution reference when you have finished using it.
  //
  // Thread_Get_ExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ThreadInstance - The id of the Thread object.
  //
  // Thread_Get_ExecutionResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionInstance - Returns a reference to the Execution object to which the thread belongs. 
  //
  rpc Get_Execution(Thread_Get_ExecutionRequest) returns (Thread_Get_ExecutionResponse);
  
  
  // Property: Id
  //
  // Returns a unique ID number for the thread. The ID number is unique with respect to all threads that you initiate before you shut down the TestStand Engine.
  // Note: The ID number is never zero.
  //
  // Use this ID number to compare two Thread object references to determine whether they refer to the same underlying thread.
  //
  // Thread_Get_IdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ThreadInstance - The id of the Thread object.
  //
  // Thread_Get_IdResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a unique ID number for the thread. The ID number is unique with respect to all threads that you initiate before you shut down the TestStand Engine. Note: The ID number is never zero. 
  //
  rpc Get_Id(Thread_Get_IdRequest) returns (Thread_Get_IdResponse);
  
  
  // Property: CallStackSize
  //
  // Returns the number of call stack entries that currently exist for the thread.
  //
  // You can obtain a sequence context for each call stack entry by passing a call stack index to the Thread.GetSequenceContext method.
  //
  // Thread_Get_CallStackSizeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ThreadInstance - The id of the Thread object.
  //
  // Thread_Get_CallStackSizeResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of call stack entries that currently exist for the thread. 
  //
  rpc Get_CallStackSize(Thread_Get_CallStackSizeRequest) returns (Thread_Get_CallStackSizeResponse);
  
  
  // Property: ExternallySuspended
  //
  // Note: Because the Allow Break While in Code Modules option on the Execution tab of the Station Options dialog box is enabled by default in TestStand 2014 or later, you do not need to use this property unless you disable the option.
  // Specifies to treat this thread as suspended when you stop the execution for a breakpoint.
  //
  // By default, when a step blocks or takes a long time to complete and the user attempts to suspend (break) execution, execution cannot suspend until the step unblocks and returns. For example, if the user breaks execution when a step launches a dialog box, execution does not suspend until after the user closes the dialog box.
  // A step uses this property to enable execution to break while it performs a lengthy operation or waits an indeterminate period of time. When a step sets this property, it specifies that TestStand considers the thread to be suspended if the user requests that the execution break. For example, you can add the following code to the step code module:
  // Boolean previousExternallySuspended = mySequenceContext.GetThread().ExternallySuspended' set externally suspended to truemySequenceContext.GetThread().ExternallySuspended = true' Insert code to launch a dialog box or perform another operation that might block indefinitely' restore the previous setting of externally suspendedmySequenceContext.GetThread().ExternallySuspended = previousExternallySuspendedNote: When you reset this property to False, the call to set the property blocks if the execution is suspended. This prevents the step from executing further until the user continues the execution.
  //
  // Thread_Set_ExternallySuspendedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ThreadInstance - The id of the Thread object.
  //    - val: bool - Note: Because the Allow Break While in Code Modules option on the Execution tab of the Station Options dialog box is enabled by default in TestStand 2014 or later, you do not need to use this property unless you disable the option. Specifies to treat this thread as suspended when you stop the execution for a breakpoint. 
  //
  // Thread_Set_ExternallySuspendedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Thread_Get_ExternallySuspendedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ThreadInstance - The id of the Thread object.
  //
  // Thread_Get_ExternallySuspendedResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: Because the Allow Break While in Code Modules option on the Execution tab of the Station Options dialog box is enabled by default in TestStand 2014 or later, you do not need to use this property unless you disable the option. Specifies to treat this thread as suspended when you stop the execution for a breakpoint. 
  //
  rpc Set_ExternallySuspended(Thread_Set_ExternallySuspendedRequest) returns (Thread_Set_ExternallySuspendedResponse);
  rpc Get_ExternallySuspended(Thread_Get_ExternallySuspendedRequest) returns (Thread_Get_ExternallySuspendedResponse);
  
  
  // Property: Batch
  //
  // Returns the Batch object to which this thread belongs.
  //
  // Returns a NULL reference if this thread was not added to a batch. The Batch Synchronization step type uses this method.
  //
  // Thread_Get_BatchRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ThreadInstance - The id of the Thread object.
  //
  // Thread_Get_BatchResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - Returns the Batch object to which this thread belongs. 
  //
  rpc Get_Batch(Thread_Get_BatchRequest) returns (Thread_Get_BatchResponse);
  
  
  // Property: UniqueThreadId
  //
  // Returns an identification string that is unique among all threads in all instances of the TestStand Engine.
  //
  // Use this string to uniquely identify a TestStand thread across multiple instances of the TestStand Engine. If you are using only one instance of the TestStand Engine, you can use the numeric Thread.Id property of the thread instead.
  //
  // Thread_Get_UniqueThreadIdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ThreadInstance - The id of the Thread object.
  //
  // Thread_Get_UniqueThreadIdResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns an identification string that is unique among all threads in all instances of the TestStand Engine. 
  //
  rpc Get_UniqueThreadId(Thread_Get_UniqueThreadIdRequest) returns (Thread_Get_UniqueThreadIdResponse);
  
  
  // Property: RunTimeVariables
  //
  // Use this PropertyObject to create and access variables you want to exist only for the current run of the thread.
  //
  // TestStand destroys these variables when the thread completes, terminates, or aborts.
  //
  // Thread_Get_RunTimeVariablesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ThreadInstance - The id of the Thread object.
  //
  // Thread_Get_RunTimeVariablesResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Use this PropertyObject to create and access variables you want to exist only for the current run of the thread. 
  //
  rpc Get_RunTimeVariables(Thread_Get_RunTimeVariablesRequest) returns (Thread_Get_RunTimeVariablesResponse);
  
  
  // Property: TerminationOption
  //
  // Specifies the behavior of a thread when its execution attempts to terminate. This property does not inhibit aborting. The default value is ThreadTerminationOption_Normal.
  //
  // Thread_Set_TerminationOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ThreadInstance - The id of the Thread object.
  //    - val: ThreadTerminationOptions - Specifies the behavior of a thread when its execution attempts to terminate. This property does not inhibit aborting. The default value is ThreadTerminationOption_Normal. 
  //
  // Thread_Set_TerminationOptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Thread_Get_TerminationOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ThreadInstance - The id of the Thread object.
  //
  // Thread_Get_TerminationOptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: ThreadTerminationOptions - Specifies the behavior of a thread when its execution attempts to terminate. This property does not inhibit aborting. The default value is ThreadTerminationOption_Normal. 
  //
  rpc Set_TerminationOption(Thread_Set_TerminationOptionRequest) returns (Thread_Set_TerminationOptionResponse);
  rpc Get_TerminationOption(Thread_Get_TerminationOptionRequest) returns (Thread_Get_TerminationOptionResponse);
  
  
  // Property: WillStepIntoModule
  //
  // Returns True if the execution will step into the code module for the current step.
  //
  // This property is True only when accessed from a Pre-Step substep and the execution will suspend in the code module for the step that uses the substep. Obtaining this property from other locations, such as an expression or a step code module, always returns False.
  //
  // Thread_Get_WillStepIntoModuleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ThreadInstance - The id of the Thread object.
  //
  // Thread_Get_WillStepIntoModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the execution will step into the code module for the current step. 
  //
  rpc Get_WillStepIntoModule(Thread_Get_WillStepIntoModuleRequest) returns (Thread_Get_WillStepIntoModuleResponse);
  
  
}
message InteractiveArgsInstance {
  // Specifies the handle of the InteractiveArgs instance in the server.
  string id = 1;
}
message Thread_ClearTemporaryBreakpointRequest {
  // The id of the Thread object.
  ThreadInstance instance = 1;
}

message Thread_ClearTemporaryBreakpointResponse {
}

message Thread_SetStepOverRequest {
  // The id of the Thread object.
  ThreadInstance instance = 1;
}

message Thread_SetStepOverResponse {
}

message Thread_SetStepIntoRequest {
  // The id of the Thread object.
  ThreadInstance instance = 1;
}

message Thread_SetStepIntoResponse {
}

message Thread_SetStepOutRequest {
  // The id of the Thread object.
  ThreadInstance instance = 1;
}

message Thread_SetStepOutResponse {
}

message Thread_GetSequenceContextRequest {
  // The id of the Thread object.
  ThreadInstance instance = 1;
  // Specifies a zero-based index into the call stack. You obtain the number of items on the call stack from the Thread.CallStackSize property. Call stack index 0 specifies the sequence context for the most recently executing step group.
  int32 callStackIndex = 2;
}

message Thread_GetSequenceContextResponse {
  // The return type of the SequenceContext object.
  SequenceContextInstance returnValue = 1;
  // Returns a unique ID for the sequence context that this method returns. Use this ID with subsequent calls to GetSequenceContext to determine whether the execution is in the same sequence. This can help you minimize the number of items that you must update in the execution display in a user interface.
  int32 frameId = 2;
}

message Thread_ClearCurrentRTERequest {
  // The id of the Thread object.
  ThreadInstance instance = 1;
}

message Thread_ClearCurrentRTEResponse {
}

message Thread_DoInteractiveExecutionRequest {
  // The id of the Thread object.
  ThreadInstance instance = 1;
  // Specifies an InteractiveArgs object that indicates which steps are currently selected steps in the user interface and that contains the looping information necessary for an interactive execution. The selected steps you specify must be in the currently executing step group.
  InteractiveArgsInstance InteractiveArgsParam = 2;
}

message Thread_DoInteractiveExecutionResponse {
}

message Thread_PostUIMessageRequest {
  // The id of the Thread object.
  ThreadInstance instance = 1;
  // Specifies the type of UIMessage.
  UIMessageCodes eventCode = 2;
  // Specifies numeric data to pass with the message. For example, when you post a UIMsg_ProgressPercent event, this parameter specifies the percent done.
  double numericDataParam = 3;
  // Specifies string data to pass with the message. For example, when you post a UIMsg_ProgressText event, this parameter specifies the text to display.
  string stringDataParam = 4;
  // Typically, you pass True for this parameter to direct the method to wait until the user interface processes the message. If you pass False, the method returns immediately without waiting for the user interface to handle the message. If you pass False and post messages faster than the user interface processes messages, the number of messages in the queue the user interface must handle grows unbounded and floods the user interface with messages, which causes the user interface to become unresponsive.
  bool synchronous = 5;
}

message Thread_PostUIMessageResponse {
}

message Thread_WaitForEndRequest {
  // The id of the Thread object.
  ThreadInstance instance = 1;
  // Specifies the number of milliseconds to wait or, pass -1 to wait indefinitely.
  // If you pass a value for the callingSequenceContext parameter, TestStand suspends the timeout while the calling execution is suspended at a breakpoint so that the time spent at a breakpoint does not count towards the elapsed timeout time.
  int32 millisecondTimeOut = 2;
  // Pass True to process Microsoft Windows messages while waiting.
  bool processWindowsMsgs = 3;
  // Specifies the step for which the result is set to the sequence result of this thread.
  PropertyObjectInstance stepToStoreResultsIn = 4;
  // If you call this method from within a sequence, you can pass the current sequence context to specify that the method returns immediately if the user terminates the execution from which you call this method.
  PropertyObjectInstance callingSequenceContext = 5;
}

message Thread_WaitForEndResponse {
  // Returns True if the thread finished executing. Returns False if the timeout expired.
  bool returnValue = 1;
}

message Thread_AsPropertyObjectRequest {
  // The id of the Thread object.
  ThreadInstance instance = 1;
}

message Thread_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message Thread_PostUIMessageExRequest {
  // The id of the Thread object.
  ThreadInstance instance = 1;
  // Specifies the type of UIMessage.
  UIMessageCodes eventCode = 2;
  // Specifies numeric data to pass with the message. When you post a UIMsg_ProgressPercent event, this parameter specifies the percent done.
  double numericDataParam = 3;
  // Specifies string data to pass with the message. When you post a UIMsg_ProgressText event, this parameter specifies the text to display.
  string stringDataParam = 4;
  // Specifies an ActiveX reference to pass with the message.
  ObjectInstance activeXDataParam = 5;
  // Typically, you pass True for this parameter to direct the method to wait until the user interface processes the message. If you pass False and post messages faster than the user interface processes messages, the number of messages in the queue the user interface must handle grows unbounded and floods the user interface with messages, which causes the user interface to become unresponsive.
  bool synchronous = 6;
}

message Thread_PostUIMessageExResponse {
}

message Thread_AddToBatchRequest {
  // The id of the Thread object.
  ThreadInstance instance = 1;
  // Specifies the batch object to which TestStand adds the thread.
  ObjectInstance batchObj = 2;
  // Specifies the order number corresponding to the thread within the batch.
  int32 orderNumber = 3;
}

message Thread_AddToBatchResponse {
}

message Thread_ResumeRequest {
  // The id of the Thread object.
  ThreadInstance instance = 1;
}

message Thread_ResumeResponse {
}

message Thread_SetBatchRTEOptionRequest {
  // The id of the Thread object.
  ThreadInstance instance = 1;
  // Specifies the behavior of TestStand when a run-time error occurs.
  RTEOptions newValue = 2;
}

message Thread_SetBatchRTEOptionResponse {
}

message Thread_FlushPostResultsRequest {
  // The id of the Thread object.
  ThreadInstance instance = 1;
}

message Thread_FlushPostResultsResponse {
}

message Thread_Get_DisplayNameRequest {
  // The id of the Thread object.
  ThreadInstance instance = 1;
}

message Thread_Get_DisplayNameResponse {
  // Returns the name to display for the thread.
  string returnValue = 1;
}

message Thread_Get_ExecutionRequest {
  // The id of the Thread object.
  ThreadInstance instance = 1;
}

message Thread_Get_ExecutionResponse {
  // Returns a reference to the Execution object to which the thread belongs.
  ExecutionInstance returnValue = 1;
}

message Thread_Get_IdRequest {
  // The id of the Thread object.
  ThreadInstance instance = 1;
}

message Thread_Get_IdResponse {
  // Returns a unique ID number for the thread. The ID number is unique with respect to all threads that you initiate before you shut down the TestStand Engine.
  // Note: The ID number is never zero.
  int32 returnValue = 1;
}

message Thread_Get_CallStackSizeRequest {
  // The id of the Thread object.
  ThreadInstance instance = 1;
}

message Thread_Get_CallStackSizeResponse {
  // Returns the number of call stack entries that currently exist for the thread.
  int32 returnValue = 1;
}

message Thread_Set_ExternallySuspendedRequest {
  // The id of the Thread object.
  ThreadInstance instance = 1;
  // Note: Because the Allow Break While in Code Modules option on the Execution tab of the Station Options dialog box is enabled by default in TestStand 2014 or later, you do not need to use this property unless you disable the option.
  // Specifies to treat this thread as suspended when you stop the execution for a breakpoint.
  bool val = 2;
}

message Thread_Set_ExternallySuspendedResponse {
}

message Thread_Get_ExternallySuspendedRequest {
  // The id of the Thread object.
  ThreadInstance instance = 1;
}

message Thread_Get_ExternallySuspendedResponse {
  // Note: Because the Allow Break While in Code Modules option on the Execution tab of the Station Options dialog box is enabled by default in TestStand 2014 or later, you do not need to use this property unless you disable the option.
  // Specifies to treat this thread as suspended when you stop the execution for a breakpoint.
  bool returnValue = 1;
}

message Thread_Get_BatchRequest {
  // The id of the Thread object.
  ThreadInstance instance = 1;
}

message Thread_Get_BatchResponse {
  // Returns the Batch object to which this thread belongs.
  ObjectInstance returnValue = 1;
}

message Thread_Get_UniqueThreadIdRequest {
  // The id of the Thread object.
  ThreadInstance instance = 1;
}

message Thread_Get_UniqueThreadIdResponse {
  // Returns an identification string that is unique among all threads in all instances of the TestStand Engine.
  string returnValue = 1;
}

message Thread_Get_RunTimeVariablesRequest {
  // The id of the Thread object.
  ThreadInstance instance = 1;
}

message Thread_Get_RunTimeVariablesResponse {
  // Use this PropertyObject to create and access variables you want to exist only for the current run of the thread.
  PropertyObjectInstance returnValue = 1;
}

message Thread_Set_TerminationOptionRequest {
  // The id of the Thread object.
  ThreadInstance instance = 1;
  // Specifies the behavior of a thread when its execution attempts to terminate. This property does not inhibit aborting. The default value is ThreadTerminationOption_Normal.
  ThreadTerminationOptions val = 2;
}

message Thread_Set_TerminationOptionResponse {
}

message Thread_Get_TerminationOptionRequest {
  // The id of the Thread object.
  ThreadInstance instance = 1;
}

message Thread_Get_TerminationOptionResponse {
  // Specifies the behavior of a thread when its execution attempts to terminate. This property does not inhibit aborting. The default value is ThreadTerminationOption_Normal.
  ThreadTerminationOptions returnValue = 1;
}

message Thread_Get_WillStepIntoModuleRequest {
  // The id of the Thread object.
  ThreadInstance instance = 1;
}

message Thread_Get_WillStepIntoModuleResponse {
  // Returns True if the execution will step into the code module for the current step.
  bool returnValue = 1;
}

// SequenceContext
//
// A SequenceContext object contains complete information about an execution at a particular point during the execution. You can use the sequence context to access all the objects, variables, and properties in the execution. From the sequence context, you also can obtain references to all the steps in the current sequence, the sequence contexts for the calling sequences, the Process Model entry point sequence, and the MainSequence in the client sequence file. You can pass the current sequence context or subproperties to code modules you call from steps.
//
service SequenceContext {
  // Method: IsInteractiveStep
  //
  // Returns True if the execution that the sequence context represents is in interactive mode and if the step you specify is selected for interactive execution.
  //
  // User interfaces dim excluded steps during an interactive execution. The StationOptions.InteractiveBranchMode property setting determines if excluded steps execute.
  //
  // SequenceContext_IsInteractiveStepRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //    - stepIndexParam: int32 - Specifies the zero-based index of the step within the current step group.
  //
  // SequenceContext_IsInteractiveStepResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc IsInteractiveStep(SequenceContext_IsInteractiveStepRequest) returns (SequenceContext_IsInteractiveStepResponse);
  
  
  // Method: AsPropertyObject
  //
  // Returns the underlying PropertyObject that represents the object. Use the PropertyObject to modify, add, or remove custom properties of the object.
  //
  // SequenceContext_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(SequenceContext_AsPropertyObjectRequest) returns (SequenceContext_AsPropertyObjectResponse);
  
  
  // Method: IsStepExcludedFromExecution
  //
  // Specifies whether the step was selected as part of the interactive execution or the hierarchical execution in progress.
  //
  // User interfaces dim excluded steps during an interactive execution. The StationOptions.InteractiveBranchMode property setting determines if excluded steps execute.
  //
  // SequenceContext_IsStepExcludedFromExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_IsStepExcludedFromExecutionResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the step was not selected as part of the interactive execution or the hierarchical execution in progress. 
  //
  rpc IsStepExcludedFromExecution(SequenceContext_IsStepExcludedFromExecutionRequest) returns (SequenceContext_IsStepExcludedFromExecutionResponse);
  
  
  // Method: GetRunTimeErrorMessageEx
  //
  // Returns the display strings that contain the run-time error details for the current step the context specifies.
  //
  // If a run-time error occurs, use this method to obtain the error message display strings. Typically, you use this method in a user interface to launch a custom Run-Time Error dialog box. To obtain a reference to a failing context from an Engine callback, such as the PostStepRunTimeError callback, access the context specified by the lookup string "RunState.Caller.ThisContext".
  //
  // SequenceContext_GetRunTimeErrorMessageExRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_GetRunTimeErrorMessageExResponse - The response message from the server. It provides the output parameters.
  //    - detailsMsg: strin - Returns a string that describes the specific cause of the error.
  //    - errorCodeMsg: strin - Returns a string with the error code number and the general meaning.
  //    - locationMsg: strin - Returns a string that describes where the error occurred.
  //
  rpc GetRunTimeErrorMessageEx(SequenceContext_GetRunTimeErrorMessageExRequest) returns (SequenceContext_GetRunTimeErrorMessageExResponse);
  
  
  // Method: GetRunTimeErrorWinHelpInfo
  //
  // Obtains the help ID and help file for the run-time error. Use the help ID and help file when you call the Engine.DisplayHelpTopic method.
  //
  // If a run-time error occurs, use this method to obtain the associated help file and/or help ID.
  // Note: Not all run-time errors have associated help files.
  //
  // SequenceContext_GetRunTimeErrorWinHelpInfoRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_GetRunTimeErrorWinHelpInfoResponse - The response message from the server. It provides the output parameters.
  //    - helpID: int3 - Returns a help ID for a topic in a help file to provide context-sensitive help for the object.
  //    - helpFile: strin - Returns the help file path.
  //
  rpc GetRunTimeErrorWinHelpInfo(SequenceContext_GetRunTimeErrorWinHelpInfoRequest) returns (SequenceContext_GetRunTimeErrorWinHelpInfoResponse);
  
  
  // Method: GetMultipleValues
  //
  // This method determines if the value of an element of a subproperty of multiple steps, such as the value, comment, format, or flags, represents the shared element value for all the steps in the array. Use this method with a SequenceContext that was created by passing an array of step references to the Engine.NewEditContext method, where the SequenceContext.Step property in the context contains the subset of properties all steps contain. This method returns zero if the Step subproperty element specified by lookupString and elem parameters has the same value for all steps.
  //
  // Use this method and the SequenceContext.SetMultipleValues method if you are writing a sequence editor in which you can select multiple steps. Display Multiple Values for an element when the value of the step property element is not the same.
  // You can create a SequenceContext with a Step property that represents multiple steps by calling the Engine.NewEditContext method and passing an array of object references to steps as the first parameter.
  //
  // SequenceContext_GetMultipleValuesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //    - lookupString: string - Specifies the name of a subproperty within the SequenceContext you want to obtain the multiple values of. You can also pass lookup strings to this parameter.
  //    - elem: PropertyObjectElements - Specifies the element of the subproperty that you want to obtain the multiple values of.
  //
  // SequenceContext_GetMultipleValuesResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns 0 if the value of the property element is the same for all steps in the context. If you pass in PropertyObjectElement_Flags for the elem parameter, the return value represents the bits of the PropertyFlags constant. A bit value is 0 if the flag value is the same for all steps. 
  //
  rpc GetMultipleValues(SequenceContext_GetMultipleValuesRequest) returns (SequenceContext_GetMultipleValuesResponse);
  
  
  // Method: SetMultipleValues
  //
  // Use this method to update the multiple value state for property elements under SequenceContext.Step in a context that Engine.NewEditContext created. You create a SequenceContext that represents multiple steps by passing an array of object references to steps as the first parameter. When you set the value of a property element of the steps the context represents, you must use this method to update the context so that SequenceContext.GetMultipleValues returns correct values.
  //
  // Use this method if you are writing a sequence editor in which you can select multiple steps and the editor displays Multiple Values for step property elements.
  // Calling this method does not update any object in the sequence context or any object you used to create the sequence context.
  //
  // SequenceContext_SetMultipleValuesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //    - lookupString: string - Pass the name of a subproperty within the SequenceContext you want to set the multiple values of. You can also pass lookup strings to this parameter.
  //    - elem: PropertyObjectElements - Specifies the element of the subproperty that you want to set the multiple value state of.
  //    - multipleValues: int32 - For the PropertyObjectElement_Flags element of a subproperty, specify the bits of the PropertyFlags constant where each bit is zero if the corresponding flags have the same value. For all other elements, pass 0 if the element contains the same value and 1 if the element contains multiple values.
  //
  // SequenceContext_SetMultipleValuesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetMultipleValues(SequenceContext_SetMultipleValuesRequest) returns (SequenceContext_SetMultipleValuesResponse);
  
  
  // Method: NewExecution
  //
  // Creates and returns a new Execution object.
  //
  // When you call this method, the execution begins immediately. This method behaves similar to a Sequence Call step that you configure to run in a new execution
  //
  // SequenceContext_NewExecutionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //    - sequenceFileParam: SequenceFileInstance - Specifies the SequenceFile object that contains the sequence to execute. If the execution uses a process model, pass the client SequenceFile object.
  //    - sequenceNameParam: string - Specifies the name of the sequence or Process Model entry point to execute.
  //    - processModelParam: SequenceFileInstance - Specifies the process model SequenceFile object if you want to execute a Process Model entry point. Otherwise, a NULL object reference in LabVIEW, 0 in LabWindows/CVI, or the Nothing keyword in Visual Basic, pass a NULL dispatch pointer in Microsoft Foundation Classes.
  //    - breakAtFirstStep: bool - Pass True to suspend execution before executing the first step.
  //    - synchronous: bool - Pass True to force this method to wait until the execution completes.
  //    - executionTypeMaskParam: int32 - Pass 0 for the default behavior or pass one or more ExecutionTypeMask constants. Use the bitwise-OR operator to pass multiple constants.
  //    - sequenceArgsParam: PropertyObjectInstance - Specifies a PropertyObject object that contains the arguments to the sequence you want to execute. Each subproperty of the PropertyObject object represents a parameter to the sequence. The subproperties must appear in the same order as the sequence parameters.
  //
  // SequenceContext_NewExecutionResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionInstance - The execution created by this method. 
  //
  rpc NewExecution(SequenceContext_NewExecutionRequest) returns (SequenceContext_NewExecutionResponse);
  
  
  // Method: CanTrace
  //
  rpc CanTrace(SequenceContext_CanTraceRequest) returns (SequenceContext_CanTraceResponse);
  
  

  // Property: Step
  //
  // Returns a reference to the currently executing step.
  //
  // Returns a run-time error if the execution is currently suspended at a breakpoint.
  //
  // SequenceContext_Get_StepRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_StepResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepInstance - Returns a reference to the currently executing step. 
  //
  rpc Get_Step(SequenceContext_Get_StepRequest) returns (SequenceContext_Get_StepResponse);
  
  
  // Property: PreviousStep
  //
  // Returns a reference to the step that executed last.
  //
  // Returns a run-time error if no previous step exists.
  //
  // SequenceContext_Get_PreviousStepRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_PreviousStepResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepInstance - Returns a reference to the step that executed last. 
  //
  rpc Get_PreviousStep(SequenceContext_Get_PreviousStepRequest) returns (SequenceContext_Get_PreviousStepResponse);
  
  
  // Property: NextStep
  //
  // Returns a reference to the next step to execute.
  //
  // Returns a run-time error if no next step exists.
  //
  // SequenceContext_Get_NextStepRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_NextStepResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepInstance - Returns a reference to the next step to execute. 
  //
  rpc Get_NextStep(SequenceContext_Get_NextStepRequest) returns (SequenceContext_Get_NextStepResponse);
  
  
  // Property: Sequence
  //
  // Returns a reference to the run-time copy of the currently executing sequence.
  //
  // SequenceContext_Get_SequenceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_SequenceResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceInstance - Returns a reference to the run-time copy of the currently executing sequence. 
  //
  rpc Get_Sequence(SequenceContext_Get_SequenceRequest) returns (SequenceContext_Get_SequenceResponse);
  
  
  // Property: SequenceFile
  //
  // Returns a reference to the sequence file of the currently executing sequence.
  //
  // SequenceContext_Get_SequenceFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_SequenceFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFileInstance - Returns a reference to the sequence file of the currently executing sequence. 
  //
  rpc Get_SequenceFile(SequenceContext_Get_SequenceFileRequest) returns (SequenceContext_Get_SequenceFileResponse);
  
  
  // Property: StepIndex
  //
  // Specifies the zero-based index of the currently executing step. The index indicates the position of the step in the step group the SequenceContext.StepGroup property identifies. If execution is suspended between steps, this property returns -1.
  //
  // SequenceContext_Set_StepIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //    - val: int32 - Specifies the zero-based index of the currently executing step. The index indicates the position of the step in the step group the SequenceContext.StepGroup property identifies. If execution is suspended between steps, this property returns -1. 
  //
  // SequenceContext_Set_StepIndexResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceContext_Get_StepIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_StepIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the zero-based index of the currently executing step. The index indicates the position of the step in the step group the SequenceContext.StepGroup property identifies. If execution is suspended between steps, this property returns -1. 
  //
  rpc Set_StepIndex(SequenceContext_Set_StepIndexRequest) returns (SequenceContext_Set_StepIndexResponse);
  rpc Get_StepIndex(SequenceContext_Get_StepIndexRequest) returns (SequenceContext_Get_StepIndexResponse);
  
  
  // Property: PreviousStepIndex
  //
  // Specifies the zero-based index of the step that executed last. The index indicates the position of the step in the step group the SequenceContext.StepGroup property identifies.
  //
  // This property returns -1 if no step executed previously.
  //
  // SequenceContext_Set_PreviousStepIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //    - val: int32 - Specifies the zero-based index of the step that executed last. The index indicates the position of the step in the step group the SequenceContext.StepGroup property identifies. 
  //
  // SequenceContext_Set_PreviousStepIndexResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceContext_Get_PreviousStepIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_PreviousStepIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the zero-based index of the step that executed last. The index indicates the position of the step in the step group the SequenceContext.StepGroup property identifies. 
  //
  rpc Set_PreviousStepIndex(SequenceContext_Set_PreviousStepIndexRequest) returns (SequenceContext_Set_PreviousStepIndexResponse);
  rpc Get_PreviousStepIndex(SequenceContext_Get_PreviousStepIndexRequest) returns (SequenceContext_Get_PreviousStepIndexResponse);
  
  
  // Property: NextStepIndex
  //
  // Specifies the zero-based index of the next step to execute. The index indicates the position of the step in the step group the SequenceContext.StepGroup property identifies.
  //
  // This property returns -1 if the step group contains no additional steps to execute.
  //
  // SequenceContext_Set_NextStepIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //    - val: int32 - Specifies the zero-based index of the next step to execute. The index indicates the position of the step in the step group the SequenceContext.StepGroup property identifies. 
  //
  // SequenceContext_Set_NextStepIndexResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceContext_Get_NextStepIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_NextStepIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the zero-based index of the next step to execute. The index indicates the position of the step in the step group the SequenceContext.StepGroup property identifies. 
  //
  rpc Set_NextStepIndex(SequenceContext_Set_NextStepIndexRequest) returns (SequenceContext_Set_NextStepIndexResponse);
  rpc Get_NextStepIndex(SequenceContext_Get_NextStepIndexRequest) returns (SequenceContext_Get_NextStepIndexResponse);
  
  
  // Property: SequenceIndex
  //
  // Returns the zero-based index of the currently executing sequence in the sequence file.
  //
  // SequenceContext_Get_SequenceIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_SequenceIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the zero-based index of the currently executing sequence in the sequence file. 
  //
  rpc Get_SequenceIndex(SequenceContext_Get_SequenceIndexRequest) returns (SequenceContext_Get_SequenceIndexResponse);
  
  
  // Property: StepGroup
  //
  // Specifies the step group of the currently executing step.
  //
  // SequenceContext_Set_StepGroupRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //    - val: StepGroups - Specifies the step group of the currently executing step. 
  //
  // SequenceContext_Set_StepGroupResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceContext_Get_StepGroupRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_StepGroupResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepGroups - Specifies the step group of the currently executing step. 
  //
  rpc Set_StepGroup(SequenceContext_Set_StepGroupRequest) returns (SequenceContext_Set_StepGroupResponse);
  rpc Get_StepGroup(SequenceContext_Get_StepGroupRequest) returns (SequenceContext_Get_StepGroupResponse);
  
  
  // Property: Caller
  //
  // Returns the sequence context of the calling sequence.
  // Note: To access additional levels of the call stack, such as the caller of the calling sequence, use the Thread.GetSequenceContext method to specify the desired call stack level as a parameter.
  //
  // Returns a NULL reference if no calling sequence exists. For asynchronously called sequences, this property might reference a sequence context that is no longer running steps.
  //
  // SequenceContext_Get_CallerRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_CallerResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceContextInstance - Returns the sequence context of the calling sequence. Note: To access additional levels of the call stack, such as the caller of the calling sequence, use the Thread.GetSequenceContext method to specify the desired call stack level as a parameter. 
  //
  rpc Get_Caller(SequenceContext_Get_CallerRequest) returns (SequenceContext_Get_CallerResponse);
  
  
  // Property: CallStackName
  //
  // Returns the name to display in the call stack list for the sequence context.
  //
  // SequenceContext_Get_CallStackNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_CallStackNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name to display in the call stack list for the sequence context. 
  //
  rpc Get_CallStackName(SequenceContext_Get_CallStackNameRequest) returns (SequenceContext_Get_CallStackNameResponse);
  
  
  // Property: RunTimeErrorMessage
  //
  // Note: This property is obsolete. Use the SequenceContext.GetRunTimeErrorMessageEx method instead.
  //
  // Returns a display string that contains the run-time error message for the current step the context specifies.
  //
  // SequenceContext_Get_RunTimeErrorMessageRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_RunTimeErrorMessageResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Note: This property is obsolete. Use the SequenceContext.GetRunTimeErrorMessageEx method instead. 
  //
  rpc Get_RunTimeErrorMessage(SequenceContext_Get_RunTimeErrorMessageRequest) returns (SequenceContext_Get_RunTimeErrorMessageResponse);
  
  
  // Property: StepGroupStartedInteractiveExe
  //
  // Returns True if the current step group is the one in which an interactive execution was started and this is the sequence context for that execution.
  //
  // SequenceContext_Get_StepGroupStartedInteractiveExeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_StepGroupStartedInteractiveExeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the current step group is the one in which an interactive execution was started and this is the sequence context for that execution. 
  //
  rpc Get_StepGroupStartedInteractiveExe(SequenceContext_Get_StepGroupStartedInteractiveExeRequest) returns (SequenceContext_Get_StepGroupStartedInteractiveExeResponse);
  
  
  // Property: InInteractiveMode
  //
  // Returns True if the sequence context is for an interactive execution.
  //
  // SequenceContext_Get_InInteractiveModeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_InInteractiveModeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the sequence context is for an interactive execution. 
  //
  rpc Get_InInteractiveMode(SequenceContext_Get_InInteractiveModeRequest) returns (SequenceContext_Get_InInteractiveModeResponse);
  
  
  // Property: InteractiveContext
  //
  // If the sequence context is for an interactive execution, this property returns a reference to an InteractiveContext object.
  //
  // Returns a NULL reference if the sequence context is not for an interactive execution.
  //
  // SequenceContext_Get_InteractiveContextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_InteractiveContextResponse - The response message from the server. It provides the return value.
  //    - returnValue: InteractiveContextInstance - If the sequence context is for an interactive execution, this property returns a reference to an InteractiveContext object. 
  //
  rpc Get_InteractiveContext(SequenceContext_Get_InteractiveContextRequest) returns (SequenceContext_Get_InteractiveContextResponse);
  
  
  // Property: Root
  //
  // Returns the root sequence context of the execution with which this sequence context is associated.
  //
  // The root sequence context is the first sequence context of the execution.
  //
  // SequenceContext_Get_RootRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_RootResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceContextInstance - Returns the root sequence context of the execution with which this sequence context is associated. 
  //
  rpc Get_Root(SequenceContext_Get_RootRequest) returns (SequenceContext_Get_RootResponse);
  
  
  // Property: Main
  //
  // Returns the MainSequence context of the execution with which this sequence context is associated.
  //
  // If you start an execution using a Process Model entry point, the MainSequence context is the sequence context of the MainSequence in the client sequence file. If you start an execution without using an Execution entry point by executing a sequence or steps directly the MainSequence context is the same as the root sequence context stored in the SequenceContext.Root property.
  //
  // SequenceContext_Get_MainRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_MainResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceContextInstance - Returns the MainSequence context of the execution with which this sequence context is associated. 
  //
  rpc Get_Main(SequenceContext_Get_MainRequest) returns (SequenceContext_Get_MainResponse);
  
  
  // Property: Thread
  //
  // Returns a reference to the currently executing thread.
  //
  // SequenceContext_Get_ThreadRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_ThreadResponse - The response message from the server. It provides the return value.
  //    - returnValue: ThreadInstance - Returns a reference to the currently executing thread. 
  //
  rpc Get_Thread(SequenceContext_Get_ThreadRequest) returns (SequenceContext_Get_ThreadResponse);
  
  
  // Property: Execution
  //
  // Returns a reference to the currently executing execution.
  //
  // SequenceContext_Get_ExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_ExecutionResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionInstance - Returns a reference to the currently executing execution. 
  //
  rpc Get_Execution(SequenceContext_Get_ExecutionRequest) returns (SequenceContext_Get_ExecutionResponse);
  
  
  // Property: Report
  //
  // Returns a reference to the current report.
  //
  // SequenceContext_Get_ReportRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_ReportResponse - The response message from the server. It provides the return value.
  //    - returnValue: ReportInstance - Returns a reference to the current report. 
  //
  rpc Get_Report(SequenceContext_Get_ReportRequest) returns (SequenceContext_Get_ReportResponse);
  
  
  // Property: ProcessModelClient
  //
  // Specifies a reference to the client sequence file of a process model execution.
  //
  // SequenceContext_Set_ProcessModelClientRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //    - val: SequenceFileInstance - Specifies a reference to the client sequence file of a process model execution. 
  //
  // SequenceContext_Set_ProcessModelClientResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceContext_Get_ProcessModelClientRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_ProcessModelClientResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFileInstance - Specifies a reference to the client sequence file of a process model execution. 
  //
  rpc Set_ProcessModelClient(SequenceContext_Set_ProcessModelClientRequest) returns (SequenceContext_Set_ProcessModelClientResponse);
  rpc Get_ProcessModelClient(SequenceContext_Get_ProcessModelClientRequest) returns (SequenceContext_Get_ProcessModelClientResponse);
  
  
  // Property: SelectedFile
  //
  // Returns a reference to the selected sequence file, if any, when this execution began.
  //
  // TestStand sets this property only for the root context in an execution.
  //
  // SequenceContext_Get_SelectedFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_SelectedFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFileInstance - Returns a reference to the selected sequence file, if any, when this execution began. 
  //
  rpc Get_SelectedFile(SequenceContext_Get_SelectedFileRequest) returns (SequenceContext_Get_SelectedFileResponse);
  
  
  // Property: SelectedExecution
  //
  // Returns a reference to the execution, if any, selected when this execution began.
  //
  // TestStand sets this property only for the root context in an execution.
  //
  // SequenceContext_Get_SelectedExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_SelectedExecutionResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionInstance - Returns a reference to the execution, if any, selected when this execution began. 
  //
  rpc Get_SelectedExecution(SequenceContext_Get_SelectedExecutionRequest) returns (SequenceContext_Get_SelectedExecutionResponse);
  
  
  // Property: Locals
  //
  // Returns a reference to the object that contains the locals for the currently executing sequence.
  //
  // Changes made to the structure or values of properties in locals for the currently executing sequence file do not affect the default file locals defined in the sequence file.
  //
  // SequenceContext_Get_LocalsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_LocalsResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Returns a reference to the object that contains the locals for the currently executing sequence. 
  //
  rpc Get_Locals(SequenceContext_Get_LocalsRequest) returns (SequenceContext_Get_LocalsResponse);
  
  
  // Property: Parameters
  //
  // Returns a reference to the object that contains the parameters for the currently executing sequence.
  //
  // SequenceContext_Get_ParametersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_ParametersResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Returns a reference to the object that contains the parameters for the currently executing sequence. 
  //
  rpc Get_Parameters(SequenceContext_Get_ParametersRequest) returns (SequenceContext_Get_ParametersResponse);
  
  
  // Property: FileGlobals
  //
  // Returns a reference to the object that contains the globals for the currently executing sequence file.
  //
  // Changes made to the structure or values of properties in globals for the currently executing sequence file do not affect the default file globals defined in the sequence file.
  //
  // SequenceContext_Get_FileGlobalsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_FileGlobalsResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Returns a reference to the object that contains the globals for the currently executing sequence file. 
  //
  rpc Get_FileGlobals(SequenceContext_Get_FileGlobalsRequest) returns (SequenceContext_Get_FileGlobalsResponse);
  
  
  // Property: StationGlobals
  //
  // Returns a reference to the object that contains the globals for the current installation of TestStand.
  //
  // You can use this property to store temporary station globals. Updating temporary station globals does not update the station globals file.
  //
  // SequenceContext_Get_StationGlobalsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_StationGlobalsResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Returns a reference to the object that contains the globals for the current installation of TestStand. 
  //
  rpc Get_StationGlobals(SequenceContext_Get_StationGlobalsRequest) returns (SequenceContext_Get_StationGlobalsResponse);
  
  
  // Property: CallStackDepth
  //
  // Returns the zero-based sequence call depth of the sequence context in the current execution. The call depth refers to the number of nested sequences called before reaching the currently executing sequence. The call stack depth of the first sequence an execution calls is zero, and the call stack depth increases with each call to a subsequence.
  //
  // SequenceContext_Get_CallStackDepthRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_CallStackDepthResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the zero-based sequence call depth of the sequence context in the current execution. The call depth refers to the number of nested sequences called before reaching the currently executing sequence. The call stack depth of the first sequence an execution calls is zero, and the call stack depth increases with each call to a subsequence. 
  //
  rpc Get_CallStackDepth(SequenceContext_Get_CallStackDepthRequest) returns (SequenceContext_Get_CallStackDepthResponse);
  
  
  // Property: LoopIndex
  //
  // Specifies the value of the loop index at a given point as a step loops. The value of the loop index depends on the looping construct you select for the step.
  //
  // Note: This property returns the value of the loop index truncated to a 32-bit integer. To retrieve the underlying 64-bit floating point loop index, call SequenceContext.AsPropertyObject().GetValNumber("RunState.LoopIndex", 0).
  //
  // SequenceContext_Set_LoopIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //    - val: int32 - Specifies the value of the loop index at a given point as a step loops. The value of the loop index depends on the looping construct you select for the step. 
  //
  // SequenceContext_Set_LoopIndexResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceContext_Get_LoopIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_LoopIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the value of the loop index at a given point as a step loops. The value of the loop index depends on the looping construct you select for the step. 
  //
  rpc Set_LoopIndex(SequenceContext_Set_LoopIndexRequest) returns (SequenceContext_Set_LoopIndexResponse);
  rpc Get_LoopIndex(SequenceContext_Get_LoopIndexRequest) returns (SequenceContext_Get_LoopIndexResponse);
  
  
  // Property: LoopNumPassed
  //
  // Specifies the number of passed iterations when a step loops.
  //
  // SequenceContext_Set_LoopNumPassedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //    - val: int32 - Specifies the number of passed iterations when a step loops. 
  //
  // SequenceContext_Set_LoopNumPassedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceContext_Get_LoopNumPassedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_LoopNumPassedResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the number of passed iterations when a step loops. 
  //
  rpc Set_LoopNumPassed(SequenceContext_Set_LoopNumPassedRequest) returns (SequenceContext_Set_LoopNumPassedResponse);
  rpc Get_LoopNumPassed(SequenceContext_Get_LoopNumPassedRequest) returns (SequenceContext_Get_LoopNumPassedResponse);
  
  
  // Property: LoopNumFailed
  //
  // Specifies the number of failed iterations when a step loops.
  //
  // SequenceContext_Set_LoopNumFailedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //    - val: int32 - Specifies the number of failed iterations when a step loops. 
  //
  // SequenceContext_Set_LoopNumFailedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceContext_Get_LoopNumFailedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_LoopNumFailedResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the number of failed iterations when a step loops. 
  //
  rpc Set_LoopNumFailed(SequenceContext_Set_LoopNumFailedRequest) returns (SequenceContext_Set_LoopNumFailedResponse);
  rpc Get_LoopNumFailed(SequenceContext_Get_LoopNumFailedRequest) returns (SequenceContext_Get_LoopNumFailedResponse);
  
  
  // Property: IsProcessModel
  //
  // Returns True if the sequence that is executing for the sequence context is within a process model sequence file.
  //
  // SequenceContext_Get_IsProcessModelRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_IsProcessModelResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the sequence that is executing for the sequence context is within a process model sequence file. 
  //
  rpc Get_IsProcessModel(SequenceContext_Get_IsProcessModelRequest) returns (SequenceContext_Get_IsProcessModelResponse);
  
  
  // Property: Tracing
  //
  // Specifies whether to trace the execution of steps to which this sequence context applies.
  //
  // SequenceContext_Set_TracingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //    - val: bool - Specifies whether to trace the execution of steps to which this sequence context applies. 
  //
  // SequenceContext_Set_TracingResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceContext_Get_TracingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_TracingResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether to trace the execution of steps to which this sequence context applies. 
  //
  rpc Set_Tracing(SequenceContext_Set_TracingRequest) returns (SequenceContext_Set_TracingResponse);
  rpc Get_Tracing(SequenceContext_Get_TracingRequest) returns (SequenceContext_Get_TracingResponse);
  
  
  // Property: SequenceFailed
  //
  // Specifies the failure state of the currently executing sequence.
  //
  // Setting this property to True does not cause the currently executing sequence to go to the Cleanup step group when the Sequence.FailureAction property or StationOptions.AlwaysGotoCleanupOnFailure property are True. Set the SequenceContext.GotoCleanup property to True to force a sequence to go to the Cleanup step group.
  //
  // SequenceContext_Set_SequenceFailedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //    - val: bool - Specifies the failure state of the currently executing sequence. 
  //
  // SequenceContext_Set_SequenceFailedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceContext_Get_SequenceFailedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_SequenceFailedResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies the failure state of the currently executing sequence. 
  //
  rpc Set_SequenceFailed(SequenceContext_Set_SequenceFailedRequest) returns (SequenceContext_Set_SequenceFailedResponse);
  rpc Get_SequenceFailed(SequenceContext_Get_SequenceFailedRequest) returns (SequenceContext_Get_SequenceFailedResponse);
  
  
  // Property: SelectedSequences
  //
  // Returns an array of references to the selected sequences, if any, when this execution began.
  //
  // TestStand sets this property only for the root context in an execution.
  // Returns an empty array if no sequences were selected.
  //
  // SequenceContext_Get_SelectedSequencesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_SelectedSequencesResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - Returns an array of references to the selected sequences, if any, when this execution began. 
  //
  rpc Get_SelectedSequences(SequenceContext_Get_SelectedSequencesRequest) returns (SequenceContext_Get_SelectedSequencesResponse);
  
  
  // Property: SelectedSteps
  //
  // Returns an array of references to the selected steps, if any, when this execution began.
  //
  // Returns an empty array if no steps were selected. TestStand sets this property only for the root context in an execution.
  //
  // SequenceContext_Get_SelectedStepsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_SelectedStepsResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - Returns an array of references to the selected steps, if any, when this execution began. 
  //
  rpc Get_SelectedSteps(SequenceContext_Get_SelectedStepsRequest) returns (SequenceContext_Get_SelectedStepsResponse);
  
  
  // Property: ApplicationIsEditor
  //
  // Returns True if the current application is a sequence editor.
  //
  // SequenceContext_Get_ApplicationIsEditorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_ApplicationIsEditorResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the current application is a sequence editor. 
  //
  rpc Get_ApplicationIsEditor(SequenceContext_Get_ApplicationIsEditorRequest) returns (SequenceContext_Get_ApplicationIsEditorResponse);
  
  
  // Property: GotoCleanup
  //
  // Specifies the Goto cleanup state of the currently executing sequence.
  //
  // SequenceContext_Set_GotoCleanupRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //    - val: bool - Specifies the Goto cleanup state of the currently executing sequence. 
  //
  // SequenceContext_Set_GotoCleanupResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceContext_Get_GotoCleanupRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_GotoCleanupResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies the Goto cleanup state of the currently executing sequence. 
  //
  rpc Set_GotoCleanup(SequenceContext_Set_GotoCleanupRequest) returns (SequenceContext_Set_GotoCleanupResponse);
  rpc Get_GotoCleanup(SequenceContext_Get_GotoCleanupRequest) returns (SequenceContext_Get_GotoCleanupResponse);
  
  
  // Property: EngineAsDispatch
  //
  // Note: This property is obsolete. Use the SequenceContext.Engine property instead.
  //
  // Returns a reference to the Engine object.
  //
  // SequenceContext_Get_EngineAsDispatchRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_EngineAsDispatchResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - Note: This property is obsolete. Use the SequenceContext.Engine property instead. 
  //
  rpc Get_EngineAsDispatch(SequenceContext_Get_EngineAsDispatchRequest) returns (SequenceContext_Get_EngineAsDispatchResponse);
  
  
  // Property: Id
  //
  // Returns the unique ID that distinguishes this sequence context from all other sequence contexts.
  // Note: The ID number is never zero.
  //
  // SequenceContext_Get_IdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_IdResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the unique ID that distinguishes this sequence context from all other sequence contexts. Note: The ID number is never zero. 
  //
  rpc Get_Id(SequenceContext_Get_IdRequest) returns (SequenceContext_Get_IdResponse);
  
  
  // Property: CallingStep
  //
  // Returns a run-time copy of the Step object for the step that called the current sequence.
  //
  // This property is valid when the current sequence is called synchronously or asynchronously. This property does not exist in the root SequenceContext. Any changes to property values in the returned Step object only modify the execution version of the object.
  //
  // SequenceContext_Get_CallingStepRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_CallingStepResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepInstance - Returns a run-time copy of the Step object for the step that called the current sequence. 
  //
  rpc Get_CallingStep(SequenceContext_Get_CallingStepRequest) returns (SequenceContext_Get_CallingStepResponse);
  
  
  // Property: SequenceErrorMessage
  //
  // Reports the sequence error message to the step that calls the sequence.
  //
  // SequenceContext_Set_SequenceErrorMessageRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //    - val: string - Reports the sequence error message to the step that calls the sequence. 
  //
  // SequenceContext_Set_SequenceErrorMessageResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceContext_Get_SequenceErrorMessageRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_SequenceErrorMessageResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Reports the sequence error message to the step that calls the sequence. 
  //
  rpc Set_SequenceErrorMessage(SequenceContext_Set_SequenceErrorMessageRequest) returns (SequenceContext_Set_SequenceErrorMessageResponse);
  rpc Get_SequenceErrorMessage(SequenceContext_Get_SequenceErrorMessageRequest) returns (SequenceContext_Get_SequenceErrorMessageResponse);
  
  
  // Property: SequenceErrorCode
  //
  // Reports the sequence error code to the step that calls the sequence.
  //
  // SequenceContext_Set_SequenceErrorCodeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //    - errorCode: int32 - Reports the sequence error code to the step that calls the sequence. 
  //
  // SequenceContext_Set_SequenceErrorCodeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceContext_Get_SequenceErrorCodeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_SequenceErrorCodeResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Reports the sequence error code to the step that calls the sequence. 
  //
  rpc Set_SequenceErrorCode(SequenceContext_Set_SequenceErrorCodeRequest) returns (SequenceContext_Set_SequenceErrorCodeResponse);
  rpc Get_SequenceErrorCode(SequenceContext_Get_SequenceErrorCodeRequest) returns (SequenceContext_Get_SequenceErrorCodeResponse);
  
  
  // Property: SequenceErrorOccurred
  //
  // Reports the sequence error occurred flag to the step that calls the sequence.
  //
  // SequenceContext_Set_SequenceErrorOccurredRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //    - occurredFlag: bool - Reports the sequence error occurred flag to the step that calls the sequence. 
  //
  // SequenceContext_Set_SequenceErrorOccurredResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceContext_Get_SequenceErrorOccurredRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_SequenceErrorOccurredResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Reports the sequence error occurred flag to the step that calls the sequence. 
  //
  rpc Set_SequenceErrorOccurred(SequenceContext_Set_SequenceErrorOccurredRequest) returns (SequenceContext_Set_SequenceErrorOccurredResponse);
  rpc Get_SequenceErrorOccurred(SequenceContext_Get_SequenceErrorOccurredRequest) returns (SequenceContext_Get_SequenceErrorOccurredResponse);
  
  
  // Property: ErrorReported
  //
  // Set this property to True from within a SequenceFilePostStepRuntimeError, ProcessModelPostStepRuntimeError, or StationPostStepRuntimeError callback sequence to prevent TestStand from sending a UIMsg_BreakOnRunTimeError message to the user interface. The UIMsg_BreakOnRunTimeError message tells the user interface to launch the Run-Time Error dialog box. By setting this property to True in the callback, you are telling TestStand that the callback has already handled the run-time error.
  //
  // You can set this property from within an expression such as RunState.Caller.RunState.ErrorReported = True. Also, when you implement the callback, National  Instruments recommends that you verify that this property is already True before continuing because a different run-time error callback might have already handled the error. Outside of run-time error callbacks, this property is always False, and the value has no meaning. Refer to the Overriding SequenceFilePostStepRuntimeError Callback example located in the <TestStand Public>\Examples\Modifying Process Models\Overriding Engine Callbacks directory for more information about how to use this property.
  //
  // SequenceContext_Set_ErrorReportedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //    - val: bool - Set this property to True from within a SequenceFilePostStepRuntimeError, ProcessModelPostStepRuntimeError, or StationPostStepRuntimeError callback sequence to prevent TestStand from sending a UIMsg_BreakOnRunTimeError message to the user interface. The UIMsg_BreakOnRunTimeError message tells the user interface to launch the Run-Time Error dialog box. By setting this property to True in the callback, you are telling TestStand that the callback has already handled the run-time error. 
  //
  // SequenceContext_Set_ErrorReportedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceContext_Get_ErrorReportedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_ErrorReportedResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Set this property to True from within a SequenceFilePostStepRuntimeError, ProcessModelPostStepRuntimeError, or StationPostStepRuntimeError callback sequence to prevent TestStand from sending a UIMsg_BreakOnRunTimeError message to the user interface. The UIMsg_BreakOnRunTimeError message tells the user interface to launch the Run-Time Error dialog box. By setting this property to True in the callback, you are telling TestStand that the callback has already handled the run-time error. 
  //
  rpc Set_ErrorReported(SequenceContext_Set_ErrorReportedRequest) returns (SequenceContext_Set_ErrorReportedResponse);
  rpc Get_ErrorReported(SequenceContext_Get_ErrorReportedRequest) returns (SequenceContext_Get_ErrorReportedResponse);
  
  
  // Property: SelectedStepGroup
  //
  // Specifies the index of the step group selected when the execution started.
  // 
  //
  // TestStand sets this property only for the root context in an execution.
  //
  // SequenceContext_Set_SelectedStepGroupRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //    - StepGroup: StepGroups - Specifies the index of the step group selected when the execution started.  
  //
  // SequenceContext_Set_SelectedStepGroupResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceContext_Get_SelectedStepGroupRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_SelectedStepGroupResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepGroups - Specifies the index of the step group selected when the execution started.  
  //
  rpc Set_SelectedStepGroup(SequenceContext_Set_SelectedStepGroupRequest) returns (SequenceContext_Set_SelectedStepGroupResponse);
  rpc Get_SelectedStepGroup(SequenceContext_Get_SelectedStepGroupRequest) returns (SequenceContext_Get_SelectedStepGroupResponse);
  
  
  // Property: SelectedPropertyObjectFile
  //
  // Returns the PropertyObjectFile object for the file that was active when the execution started.
  //
  // When the initially active file is a sequence file, this property is identical to the SequenceContext.SelectedFile property. TestStand sets this property only for the root context in an execution.
  //
  // SequenceContext_Get_SelectedPropertyObjectFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_SelectedPropertyObjectFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectFileInstance - Returns the PropertyObjectFile object for the file that was active when the execution started. 
  //
  rpc Get_SelectedPropertyObjectFile(SequenceContext_Get_SelectedPropertyObjectFileRequest) returns (SequenceContext_Get_SelectedPropertyObjectFileResponse);
  
  
  // Property: CallerDiscardsResults
  //
  // Returns a value that indicates whether any sequence in the call stack instructs TestStand to disable results or if any calling step higher in the call stack instructs TestStand to not record results.
  //
  // This property does not consider whether the execution or the engine specified to discard the results. A PostStepResult callback typically uses this property to determine whether the callback processes a step result.
  //
  // SequenceContext_Get_CallerDiscardsResultsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_CallerDiscardsResultsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether any sequence in the call stack instructs TestStand to disable results or if any calling step higher in the call stack instructs TestStand to not record results. 
  //
  rpc Get_CallerDiscardsResults(SequenceContext_Get_CallerDiscardsResultsRequest) returns (SequenceContext_Get_CallerDiscardsResultsResponse);
  
  
  // Property: SelectedPropertyObjects
  //
  // Returns an array of references to the selected PropertyObjects, if any, when the execution began.
  //
  // TestStand sets this property only for the root context in an execution.
  //
  // SequenceContext_Get_SelectedPropertyObjectsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_SelectedPropertyObjectsResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - Returns an array of references to the selected PropertyObjects, if any, when the execution began. 
  //
  rpc Get_SelectedPropertyObjects(SequenceContext_Get_SelectedPropertyObjectsRequest) returns (SequenceContext_Get_SelectedPropertyObjectsResponse);
  
  
  // Property: LoopNumIterations
  //
  // Specifies the number of iterations completed at a given point as a step loops.
  //
  // SequenceContext_Set_LoopNumIterationsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //    - val: int32 - Specifies the number of iterations completed at a given point as a step loops. 
  //
  // SequenceContext_Set_LoopNumIterationsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceContext_Get_LoopNumIterationsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_LoopNumIterationsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the number of iterations completed at a given point as a step loops. 
  //
  rpc Set_LoopNumIterations(SequenceContext_Set_LoopNumIterationsRequest) returns (SequenceContext_Set_LoopNumIterationsResponse);
  rpc Get_LoopNumIterations(SequenceContext_Get_LoopNumIterationsRequest) returns (SequenceContext_Get_LoopNumIterationsResponse);
  
  
  // Property: NumStepsExecuted
  //
  // Specifies the number of steps that have completed execution in the stack frame the context represents.
  //
  // SequenceContext_Set_NumStepsExecutedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //    - val: int32 - Specifies the number of steps that have completed execution in the stack frame the context represents. 
  //
  // SequenceContext_Set_NumStepsExecutedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceContext_Get_NumStepsExecutedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceContextInstance - The id of the SequenceContext object.
  //
  // SequenceContext_Get_NumStepsExecutedResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the number of steps that have completed execution in the stack frame the context represents. 
  //
  rpc Set_NumStepsExecuted(SequenceContext_Set_NumStepsExecutedRequest) returns (SequenceContext_Set_NumStepsExecutedResponse);
  rpc Get_NumStepsExecuted(SequenceContext_Get_NumStepsExecutedRequest) returns (SequenceContext_Get_NumStepsExecutedResponse);
  
  
}
message InteractiveContextInstance {
  // Specifies the handle of the InteractiveContext instance in the server.
  string id = 1;
}
message SequenceContext_IsInteractiveStepRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
  // Specifies the zero-based index of the step within the current step group.
  int32 stepIndexParam = 2;
}

message SequenceContext_IsInteractiveStepResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message SequenceContext_AsPropertyObjectRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message SequenceContext_IsStepExcludedFromExecutionRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
  // Specifies the step to verify.
  StepInstance Step = 2;
}

message SequenceContext_IsStepExcludedFromExecutionResponse {
  // Returns True if the step was not selected as part of the interactive execution or the hierarchical execution in progress.
  bool returnValue = 1;
}

message SequenceContext_GetRunTimeErrorMessageExRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_GetRunTimeErrorMessageExResponse {
  // Returns a string that describes the specific cause of the error.
  string detailsMsg = 1;
  // Returns a string with the error code number and the general meaning.
  string errorCodeMsg = 2;
  // Returns a string that describes where the error occurred.
  string locationMsg = 3;
}

message SequenceContext_GetRunTimeErrorWinHelpInfoRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_GetRunTimeErrorWinHelpInfoResponse {
  // Returns a help ID for a topic in a help file to provide context-sensitive help for the object.
  int32 helpID = 1;
  // Returns the help file path.
  string helpFile = 2;
}

message SequenceContext_GetMultipleValuesRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
  // Specifies the name of a subproperty within the SequenceContext you want to obtain the multiple values of. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Specifies the element of the subproperty that you want to obtain the multiple values of.
  PropertyObjectElements elem = 3;
}

message SequenceContext_GetMultipleValuesResponse {
  // Returns 0 if the value of the property element is the same for all steps in the context. If you pass in PropertyObjectElement_Flags for the elem parameter, the return value represents the bits of the PropertyFlags constant. A bit value is 0 if the flag value is the same for all steps.
  int32 returnValue = 1;
}

message SequenceContext_SetMultipleValuesRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
  // Pass the name of a subproperty within the SequenceContext you want to set the multiple values of. You can also pass lookup strings to this parameter.
  string lookupString = 2;
  // Specifies the element of the subproperty that you want to set the multiple value state of.
  PropertyObjectElements elem = 3;
  // For the PropertyObjectElement_Flags element of a subproperty, specify the bits of the PropertyFlags constant where each bit is zero if the corresponding flags have the same value. For all other elements, pass 0 if the element contains the same value and 1 if the element contains multiple values.
  int32 multipleValues = 4;
}

message SequenceContext_SetMultipleValuesResponse {
}

message SequenceContext_NewExecutionRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
  // Specifies the SequenceFile object that contains the sequence to execute. If the execution uses a process model, pass the client SequenceFile object.
  SequenceFileInstance sequenceFileParam = 2;
  // Specifies the name of the sequence or Process Model entry point to execute.
  string sequenceNameParam = 3;
  // Specifies the process model SequenceFile object if you want to execute a Process Model entry point. Otherwise, a NULL object reference in LabVIEW, 0 in LabWindows/CVI, or the Nothing keyword in Visual Basic, pass a NULL dispatch pointer in Microsoft Foundation Classes.
  SequenceFileInstance processModelParam = 4;
  // Pass True to suspend execution before executing the first step.
  bool breakAtFirstStep = 5;
  // Pass True to force this method to wait until the execution completes.
  bool synchronous = 6;
  // Pass 0 for the default behavior or pass one or more ExecutionTypeMask constants. Use the bitwise-OR operator to pass multiple constants.
  ExecutionTypeMask executionTypeMaskParam = 7;
  // Specifies a PropertyObject object that contains the arguments to the sequence you want to execute. Each subproperty of the PropertyObject object represents a parameter to the sequence. The subproperties must appear in the same order as the sequence parameters.
  PropertyObjectInstance sequenceArgsParam = 8;
}

message SequenceContext_NewExecutionResponse {
  // The execution created by this method.
  ExecutionInstance returnValue = 1;
}

message SequenceContext_CanTraceRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_CanTraceResponse {
  bool returnValue = 1;
}

message SequenceContext_Get_StepRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_StepResponse {
  // Returns a reference to the currently executing step.
  StepInstance returnValue = 1;
}

message SequenceContext_Get_PreviousStepRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_PreviousStepResponse {
  // Returns a reference to the step that executed last.
  StepInstance returnValue = 1;
}

message SequenceContext_Get_NextStepRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_NextStepResponse {
  // Returns a reference to the next step to execute.
  StepInstance returnValue = 1;
}

message SequenceContext_Get_SequenceRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_SequenceResponse {
  // Returns a reference to the run-time copy of the currently executing sequence.
  SequenceInstance returnValue = 1;
}

message SequenceContext_Get_SequenceFileRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_SequenceFileResponse {
  // Returns a reference to the sequence file of the currently executing sequence.
  SequenceFileInstance returnValue = 1;
}

message SequenceContext_Set_StepIndexRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
  // Specifies the zero-based index of the currently executing step. The index indicates the position of the step in the step group the SequenceContext.StepGroup property identifies. If execution is suspended between steps, this property returns -1.
  int32 val = 2;
}

message SequenceContext_Set_StepIndexResponse {
}

message SequenceContext_Get_StepIndexRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_StepIndexResponse {
  // Specifies the zero-based index of the currently executing step. The index indicates the position of the step in the step group the SequenceContext.StepGroup property identifies. If execution is suspended between steps, this property returns -1.
  int32 returnValue = 1;
}

message SequenceContext_Set_PreviousStepIndexRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
  // Specifies the zero-based index of the step that executed last. The index indicates the position of the step in the step group the SequenceContext.StepGroup property identifies.
  int32 val = 2;
}

message SequenceContext_Set_PreviousStepIndexResponse {
}

message SequenceContext_Get_PreviousStepIndexRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_PreviousStepIndexResponse {
  // Specifies the zero-based index of the step that executed last. The index indicates the position of the step in the step group the SequenceContext.StepGroup property identifies.
  int32 returnValue = 1;
}

message SequenceContext_Set_NextStepIndexRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
  // Specifies the zero-based index of the next step to execute. The index indicates the position of the step in the step group the SequenceContext.StepGroup property identifies.
  int32 val = 2;
}

message SequenceContext_Set_NextStepIndexResponse {
}

message SequenceContext_Get_NextStepIndexRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_NextStepIndexResponse {
  // Specifies the zero-based index of the next step to execute. The index indicates the position of the step in the step group the SequenceContext.StepGroup property identifies.
  int32 returnValue = 1;
}

message SequenceContext_Get_SequenceIndexRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_SequenceIndexResponse {
  // Returns the zero-based index of the currently executing sequence in the sequence file.
  int32 returnValue = 1;
}

message SequenceContext_Set_StepGroupRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
  // Specifies the step group of the currently executing step.
  StepGroups val = 2;
}

message SequenceContext_Set_StepGroupResponse {
}

message SequenceContext_Get_StepGroupRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_StepGroupResponse {
  // Specifies the step group of the currently executing step.
  StepGroups returnValue = 1;
}

message SequenceContext_Get_CallerRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_CallerResponse {
  // Returns the sequence context of the calling sequence.
  // Note: To access additional levels of the call stack, such as the caller of the calling sequence, use the Thread.GetSequenceContext method to specify the desired call stack level as a parameter.
  SequenceContextInstance returnValue = 1;
}

message SequenceContext_Get_CallStackNameRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_CallStackNameResponse {
  // Returns the name to display in the call stack list for the sequence context.
  string returnValue = 1;
}

message SequenceContext_Get_RunTimeErrorMessageRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_RunTimeErrorMessageResponse {
  // Note: This property is obsolete. Use the SequenceContext.GetRunTimeErrorMessageEx method instead.
  string returnValue = 1;
}

message SequenceContext_Get_StepGroupStartedInteractiveExeRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_StepGroupStartedInteractiveExeResponse {
  // Returns True if the current step group is the one in which an interactive execution was started and this is the sequence context for that execution.
  bool returnValue = 1;
}

message SequenceContext_Get_InInteractiveModeRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_InInteractiveModeResponse {
  // Returns True if the sequence context is for an interactive execution.
  bool returnValue = 1;
}

message SequenceContext_Get_InteractiveContextRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_InteractiveContextResponse {
  // If the sequence context is for an interactive execution, this property returns a reference to an InteractiveContext object.
  InteractiveContextInstance returnValue = 1;
}

message SequenceContext_Get_RootRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_RootResponse {
  // Returns the root sequence context of the execution with which this sequence context is associated.
  SequenceContextInstance returnValue = 1;
}

message SequenceContext_Get_MainRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_MainResponse {
  // Returns the MainSequence context of the execution with which this sequence context is associated.
  SequenceContextInstance returnValue = 1;
}

message SequenceContext_Get_ThreadRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_ThreadResponse {
  // Returns a reference to the currently executing thread.
  ThreadInstance returnValue = 1;
}

message SequenceContext_Get_ExecutionRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_ExecutionResponse {
  // Returns a reference to the currently executing execution.
  ExecutionInstance returnValue = 1;
}

message SequenceContext_Get_ReportRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_ReportResponse {
  // Returns a reference to the current report.
  ReportInstance returnValue = 1;
}

message SequenceContext_Set_ProcessModelClientRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
  // Specifies a reference to the client sequence file of a process model execution.
  SequenceFileInstance val = 2;
}

message SequenceContext_Set_ProcessModelClientResponse {
}

message SequenceContext_Get_ProcessModelClientRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_ProcessModelClientResponse {
  // Specifies a reference to the client sequence file of a process model execution.
  SequenceFileInstance returnValue = 1;
}

message SequenceContext_Get_SelectedFileRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_SelectedFileResponse {
  // Returns a reference to the selected sequence file, if any, when this execution began.
  SequenceFileInstance returnValue = 1;
}

message SequenceContext_Get_SelectedExecutionRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_SelectedExecutionResponse {
  // Returns a reference to the execution, if any, selected when this execution began.
  ExecutionInstance returnValue = 1;
}

message SequenceContext_Get_LocalsRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_LocalsResponse {
  // Returns a reference to the object that contains the locals for the currently executing sequence.
  PropertyObjectInstance returnValue = 1;
}

message SequenceContext_Get_ParametersRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_ParametersResponse {
  // Returns a reference to the object that contains the parameters for the currently executing sequence.
  PropertyObjectInstance returnValue = 1;
}

message SequenceContext_Get_FileGlobalsRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_FileGlobalsResponse {
  // Returns a reference to the object that contains the globals for the currently executing sequence file.
  PropertyObjectInstance returnValue = 1;
}

message SequenceContext_Get_StationGlobalsRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_StationGlobalsResponse {
  // Returns a reference to the object that contains the globals for the current installation of TestStand.
  PropertyObjectInstance returnValue = 1;
}

message SequenceContext_Get_CallStackDepthRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_CallStackDepthResponse {
  // Returns the zero-based sequence call depth of the sequence context in the current execution. The call depth refers to the number of nested sequences called before reaching the currently executing sequence. The call stack depth of the first sequence an execution calls is zero, and the call stack depth increases with each call to a subsequence.
  int32 returnValue = 1;
}

message SequenceContext_Set_LoopIndexRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
  // Specifies the value of the loop index at a given point as a step loops. The value of the loop index depends on the looping construct you select for the step.
  int32 val = 2;
}

message SequenceContext_Set_LoopIndexResponse {
}

message SequenceContext_Get_LoopIndexRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_LoopIndexResponse {
  // Specifies the value of the loop index at a given point as a step loops. The value of the loop index depends on the looping construct you select for the step.
  int32 returnValue = 1;
}

message SequenceContext_Set_LoopNumPassedRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
  // Specifies the number of passed iterations when a step loops.
  int32 val = 2;
}

message SequenceContext_Set_LoopNumPassedResponse {
}

message SequenceContext_Get_LoopNumPassedRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_LoopNumPassedResponse {
  // Specifies the number of passed iterations when a step loops.
  int32 returnValue = 1;
}

message SequenceContext_Set_LoopNumFailedRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
  // Specifies the number of failed iterations when a step loops.
  int32 val = 2;
}

message SequenceContext_Set_LoopNumFailedResponse {
}

message SequenceContext_Get_LoopNumFailedRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_LoopNumFailedResponse {
  // Specifies the number of failed iterations when a step loops.
  int32 returnValue = 1;
}

message SequenceContext_Get_IsProcessModelRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_IsProcessModelResponse {
  // Returns True if the sequence that is executing for the sequence context is within a process model sequence file.
  bool returnValue = 1;
}

message SequenceContext_Set_TracingRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
  // Specifies whether to trace the execution of steps to which this sequence context applies.
  bool val = 2;
}

message SequenceContext_Set_TracingResponse {
}

message SequenceContext_Get_TracingRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_TracingResponse {
  // Specifies whether to trace the execution of steps to which this sequence context applies.
  bool returnValue = 1;
}

message SequenceContext_Set_SequenceFailedRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
  // Specifies the failure state of the currently executing sequence.
  bool val = 2;
}

message SequenceContext_Set_SequenceFailedResponse {
}

message SequenceContext_Get_SequenceFailedRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_SequenceFailedResponse {
  // Specifies the failure state of the currently executing sequence.
  bool returnValue = 1;
}

message SequenceContext_Get_SelectedSequencesRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_SelectedSequencesResponse {
  // Returns an array of references to the selected sequences, if any, when this execution began.
  repeated PropertyObjectInstance returnValue = 1;
}

message SequenceContext_Get_SelectedStepsRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_SelectedStepsResponse {
  // Returns an array of references to the selected steps, if any, when this execution began.
  repeated PropertyObjectInstance returnValue = 1;
}

message SequenceContext_Get_ApplicationIsEditorRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_ApplicationIsEditorResponse {
  // Returns True if the current application is a sequence editor.
  bool returnValue = 1;
}

message SequenceContext_Set_GotoCleanupRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
  // Specifies the Goto cleanup state of the currently executing sequence.
  bool val = 2;
}

message SequenceContext_Set_GotoCleanupResponse {
}

message SequenceContext_Get_GotoCleanupRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_GotoCleanupResponse {
  // Specifies the Goto cleanup state of the currently executing sequence.
  bool returnValue = 1;
}

message SequenceContext_Get_EngineAsDispatchRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_EngineAsDispatchResponse {
  // Note: This property is obsolete. Use the SequenceContext.Engine property instead.
  ObjectInstance returnValue = 1;
}

message SequenceContext_Get_IdRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_IdResponse {
  // Returns the unique ID that distinguishes this sequence context from all other sequence contexts.
  // Note: The ID number is never zero.
  int32 returnValue = 1;
}

message SequenceContext_Get_CallingStepRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_CallingStepResponse {
  // Returns a run-time copy of the Step object for the step that called the current sequence.
  StepInstance returnValue = 1;
}

message SequenceContext_Set_SequenceErrorMessageRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
  // Reports the sequence error message to the step that calls the sequence.
  string val = 2;
}

message SequenceContext_Set_SequenceErrorMessageResponse {
}

message SequenceContext_Get_SequenceErrorMessageRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_SequenceErrorMessageResponse {
  // Reports the sequence error message to the step that calls the sequence.
  string returnValue = 1;
}

message SequenceContext_Set_SequenceErrorCodeRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
  // Reports the sequence error code to the step that calls the sequence.
  int32 errorCode = 2;
}

message SequenceContext_Set_SequenceErrorCodeResponse {
}

message SequenceContext_Get_SequenceErrorCodeRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_SequenceErrorCodeResponse {
  // Reports the sequence error code to the step that calls the sequence.
  int32 returnValue = 1;
}

message SequenceContext_Set_SequenceErrorOccurredRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
  // Reports the sequence error occurred flag to the step that calls the sequence.
  bool occurredFlag = 2;
}

message SequenceContext_Set_SequenceErrorOccurredResponse {
}

message SequenceContext_Get_SequenceErrorOccurredRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_SequenceErrorOccurredResponse {
  // Reports the sequence error occurred flag to the step that calls the sequence.
  bool returnValue = 1;
}

message SequenceContext_Set_ErrorReportedRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
  // Set this property to True from within a SequenceFilePostStepRuntimeError, ProcessModelPostStepRuntimeError, or StationPostStepRuntimeError callback sequence to prevent TestStand from sending a UIMsg_BreakOnRunTimeError message to the user interface. The UIMsg_BreakOnRunTimeError message tells the user interface to launch the Run-Time Error dialog box. By setting this property to True in the callback, you are telling TestStand that the callback has already handled the run-time error.
  bool val = 2;
}

message SequenceContext_Set_ErrorReportedResponse {
}

message SequenceContext_Get_ErrorReportedRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_ErrorReportedResponse {
  // Set this property to True from within a SequenceFilePostStepRuntimeError, ProcessModelPostStepRuntimeError, or StationPostStepRuntimeError callback sequence to prevent TestStand from sending a UIMsg_BreakOnRunTimeError message to the user interface. The UIMsg_BreakOnRunTimeError message tells the user interface to launch the Run-Time Error dialog box. By setting this property to True in the callback, you are telling TestStand that the callback has already handled the run-time error.
  bool returnValue = 1;
}

message SequenceContext_Set_SelectedStepGroupRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
  // Specifies the index of the step group selected when the execution started.
  // 
  StepGroups StepGroup = 2;
}

message SequenceContext_Set_SelectedStepGroupResponse {
}

message SequenceContext_Get_SelectedStepGroupRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_SelectedStepGroupResponse {
  // Specifies the index of the step group selected when the execution started.
  // 
  StepGroups returnValue = 1;
}

message SequenceContext_Get_SelectedPropertyObjectFileRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_SelectedPropertyObjectFileResponse {
  // Returns the PropertyObjectFile object for the file that was active when the execution started.
  PropertyObjectFileInstance returnValue = 1;
}

message SequenceContext_Get_CallerDiscardsResultsRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_CallerDiscardsResultsResponse {
  // Returns a value that indicates whether any sequence in the call stack instructs TestStand to disable results or if any calling step higher in the call stack instructs TestStand to not record results.
  bool returnValue = 1;
}

message SequenceContext_Get_SelectedPropertyObjectsRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_SelectedPropertyObjectsResponse {
  // Returns an array of references to the selected PropertyObjects, if any, when the execution began.
  repeated PropertyObjectInstance returnValue = 1;
}

message SequenceContext_Set_LoopNumIterationsRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
  // Specifies the number of iterations completed at a given point as a step loops.
  int32 val = 2;
}

message SequenceContext_Set_LoopNumIterationsResponse {
}

message SequenceContext_Get_LoopNumIterationsRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_LoopNumIterationsResponse {
  // Specifies the number of iterations completed at a given point as a step loops.
  int32 returnValue = 1;
}

message SequenceContext_Set_NumStepsExecutedRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
  // Specifies the number of steps that have completed execution in the stack frame the context represents.
  int32 val = 2;
}

message SequenceContext_Set_NumStepsExecutedResponse {
}

message SequenceContext_Get_NumStepsExecutedRequest {
  // The id of the SequenceContext object.
  SequenceContextInstance instance = 1;
}

message SequenceContext_Get_NumStepsExecutedResponse {
  // Specifies the number of steps that have completed execution in the stack frame the context represents.
  int32 returnValue = 1;
}

// InteractiveContext
//
// Use objects of this class to obtain additional information about a currently executing interactive execution. Obtain objects of this class using the SequenceContext.InteractiveContext property of the sequence context in which the interactive execution began.
//
service InteractiveContext {
  // Method: AsPropertyObject
  //
  // Returns the underlying PropertyObject that represents the InteractiveContext object.
  //
  // Use the PropertyObject to modify, add, or remove custom properties of the object.
  //
  // InteractiveContext_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InteractiveContextInstance - The id of the InteractiveContext object.
  //
  // InteractiveContext_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(InteractiveContext_AsPropertyObjectRequest) returns (InteractiveContext_AsPropertyObjectResponse);
  
  

  // Property: IsRootExecution
  //
  // Returns True if the execution is a root interactive execution. Returns False if the execution is a nested interactive execution.
  //
  // A root interactive execution is a new, independent execution the user initiates on selected steps from a Sequence File window.
  // The user starts a nested interactive execution from an Execution window for a normal execution suspended at a breakpoint. The nested interactive execution runs within the context of the normal execution.
  //
  // InteractiveContext_Get_IsRootExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InteractiveContextInstance - The id of the InteractiveContext object.
  //
  // InteractiveContext_Get_IsRootExecutionResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the execution is a root interactive execution. Returns False if the execution is a nested interactive execution. 
  //
  rpc Get_IsRootExecution(InteractiveContext_Get_IsRootExecutionRequest) returns (InteractiveContext_Get_IsRootExecutionResponse);
  
  
  // Property: SavedPreviousStepIndex
  //
  // Applies only to nested interactive executions. Returns the index of the last step that executed in the normal execution before the user began the current interactive execution.
  //
  // If the InteractiveContext.IsRootExecution property is False, this property returns the value of the SequenceContext.PreviousStepIndex property at the time the interactive execution began. This value is purely informational and is provided so you can display information to the user when writing a user interface.
  // Returns -1 if the InteractiveContext.IsRootExecution property is True.
  //
  // InteractiveContext_Get_SavedPreviousStepIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InteractiveContextInstance - The id of the InteractiveContext object.
  //
  // InteractiveContext_Get_SavedPreviousStepIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Applies only to nested interactive executions. Returns the index of the last step that executed in the normal execution before the user began the current interactive execution. 
  //
  rpc Get_SavedPreviousStepIndex(InteractiveContext_Get_SavedPreviousStepIndexRequest) returns (InteractiveContext_Get_SavedPreviousStepIndexResponse);
  
  
  // Property: SavedNextStepIndex
  //
  // Applies only to nested interactive executions. Returns the index of the step ready to execute next in the normal execution when the user began the current interactive execution.
  //
  // If the InteractiveContext.IsRootExecution property is False, this property returns the value of the SequenceContext.NextStepIndex property at the time the interactive execution began. This value is purely informational and is provided so you can display information to the user when writing a user interface.
  // Returns -1 if the InteractiveContext.IsRootExecution property is True.
  //
  // InteractiveContext_Get_SavedNextStepIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InteractiveContextInstance - The id of the InteractiveContext object.
  //
  // InteractiveContext_Get_SavedNextStepIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Applies only to nested interactive executions. Returns the index of the step ready to execute next in the normal execution when the user began the current interactive execution. 
  //
  rpc Get_SavedNextStepIndex(InteractiveContext_Get_SavedNextStepIndexRequest) returns (InteractiveContext_Get_SavedNextStepIndexResponse);
  
  
  // Property: SavedStepIndex
  //
  // Applies only to nested interactive executions. Returns the index of the active step in the normal execution when the user began the current interactive execution.
  //
  // If the IsRootExecution property is False, this property returns the state of the SequenceContext.StepIndex property before the interactive execution began.
  // Currently, because you can only begin an interactive execution between steps in the currently executing sequence, this property always returns -1.
  // Returns -1 if the IsRootExecution property is True.
  //
  // InteractiveContext_Get_SavedStepIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InteractiveContextInstance - The id of the InteractiveContext object.
  //
  // InteractiveContext_Get_SavedStepIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Applies only to nested interactive executions. Returns the index of the active step in the normal execution when the user began the current interactive execution. 
  //
  rpc Get_SavedStepIndex(InteractiveContext_Get_SavedStepIndexRequest) returns (InteractiveContext_Get_SavedStepIndexResponse);
  
  
  // Property: InteractiveArgs
  //
  // Returns the InteractiveArgs object for the current interactive execution.
  //
  // Use this property to obtain a reference to the InteractiveArgs object used to initiate the currently executing interactive execution.
  //
  // InteractiveContext_Get_InteractiveArgsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InteractiveContextInstance - The id of the InteractiveContext object.
  //
  // InteractiveContext_Get_InteractiveArgsResponse - The response message from the server. It provides the return value.
  //    - returnValue: InteractiveArgsInstance - Returns the InteractiveArgs object for the current interactive execution. 
  //
  rpc Get_InteractiveArgs(InteractiveContext_Get_InteractiveArgsRequest) returns (InteractiveContext_Get_InteractiveArgsResponse);
  
  
}
message InteractiveContext_AsPropertyObjectRequest {
  // The id of the InteractiveContext object.
  InteractiveContextInstance instance = 1;
}

message InteractiveContext_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message InteractiveContext_Get_IsRootExecutionRequest {
  // The id of the InteractiveContext object.
  InteractiveContextInstance instance = 1;
}

message InteractiveContext_Get_IsRootExecutionResponse {
  // Returns True if the execution is a root interactive execution. Returns False if the execution is a nested interactive execution.
  bool returnValue = 1;
}

message InteractiveContext_Get_SavedPreviousStepIndexRequest {
  // The id of the InteractiveContext object.
  InteractiveContextInstance instance = 1;
}

message InteractiveContext_Get_SavedPreviousStepIndexResponse {
  // Applies only to nested interactive executions. Returns the index of the last step that executed in the normal execution before the user began the current interactive execution.
  int32 returnValue = 1;
}

message InteractiveContext_Get_SavedNextStepIndexRequest {
  // The id of the InteractiveContext object.
  InteractiveContextInstance instance = 1;
}

message InteractiveContext_Get_SavedNextStepIndexResponse {
  // Applies only to nested interactive executions. Returns the index of the step ready to execute next in the normal execution when the user began the current interactive execution.
  int32 returnValue = 1;
}

message InteractiveContext_Get_SavedStepIndexRequest {
  // The id of the InteractiveContext object.
  InteractiveContextInstance instance = 1;
}

message InteractiveContext_Get_SavedStepIndexResponse {
  // Applies only to nested interactive executions. Returns the index of the active step in the normal execution when the user began the current interactive execution.
  int32 returnValue = 1;
}

message InteractiveContext_Get_InteractiveArgsRequest {
  // The id of the InteractiveContext object.
  InteractiveContextInstance instance = 1;
}

message InteractiveContext_Get_InteractiveArgsResponse {
  // Returns the InteractiveArgs object for the current interactive execution.
  InteractiveArgsInstance returnValue = 1;
}

// InteractiveArgs
//
// When you call the Engine.NewExecution or Thread.DoInteractiveExecution methods to create an interactive execution, use an object of this class to pass information about the current state of the user interface. These methods use the object to determine which steps are currently selected in the user interface.
// Create objects for this class using the Engine.NewInteractiveArgs method.
//
service InteractiveArgs {
  // Method: GetStepIndex
  //
  // Returns a step index stored at a specific position in the list of steps to run interactively.
  //
  // The step index that the method returns is a zero-based index into the list of steps for the sequence.
  //
  // InteractiveArgs_GetStepIndexRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: InteractiveArgsInstance - The id of the InteractiveArgs object.
  //    - arrayIndexParam: int32 - Specifies a zero-based index for the list of steps to run interactively.
  //
  // InteractiveArgs_GetStepIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - The return type of the Int32 object.
  //
  rpc GetStepIndex(InteractiveArgs_GetStepIndexRequest) returns (InteractiveArgs_GetStepIndexResponse);
  
  
  // Method: AddStepIndex
  //
  // Adds a step to the list of steps to execute interactively
  //
  // InteractiveArgs_AddStepIndexRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: InteractiveArgsInstance - The id of the InteractiveArgs object.
  //    - stepIndexParam: int32 - Specifies a zero-based index for a step in the list of steps for the sequence in which you are running steps interactively.
  //
  // InteractiveArgs_AddStepIndexResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc AddStepIndex(InteractiveArgs_AddStepIndexRequest) returns (InteractiveArgs_AddStepIndexResponse);
  
  
  // Method: ContainsStep
  //
  // Returns True if the step you specify is in the list of steps to run interactively.
  //
  // InteractiveArgs_ContainsStepRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: InteractiveArgsInstance - The id of the InteractiveArgs object.
  //    - stepIndexParam: int32 - Specifies a zero-based index for a step in the list of steps for the sequence in which you are running steps interactively.
  //
  // InteractiveArgs_ContainsStepResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc ContainsStep(InteractiveArgs_ContainsStepRequest) returns (InteractiveArgs_ContainsStepResponse);
  
  
  // Method: ClearStepList
  //
  // Clears the list of steps to execute interactively.
  //
  // InteractiveArgs_ClearStepListRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InteractiveArgsInstance - The id of the InteractiveArgs object.
  //
  // InteractiveArgs_ClearStepListResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ClearStepList(InteractiveArgs_ClearStepListRequest) returns (InteractiveArgs_ClearStepListResponse);
  
  
  // Method: AsPropertyObject
  //
  // Returns the underlying PropertyObject that represents the InteractiveArgs object.
  //
  // Use the PropertyObject to modify, add, or remove custom properties for the object.
  // Note: Do not use this function to remove or modify the dynamic properties TestStand already provides for InteractiveArgs objects. You can do this through the other methods of the InteractiveArgs class.
  //
  // InteractiveArgs_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InteractiveArgsInstance - The id of the InteractiveArgs object.
  //
  // InteractiveArgs_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(InteractiveArgs_AsPropertyObjectRequest) returns (InteractiveArgs_AsPropertyObjectResponse);
  
  

  // Property: StepGroup
  //
  // Returns or specifies the step group containing the steps to execute interactively.
  //
  // InteractiveArgs_Set_StepGroupRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InteractiveArgsInstance - The id of the InteractiveArgs object.
  //    - val: StepGroups - Returns or specifies the step group containing the steps to execute interactively. 
  //
  // InteractiveArgs_Set_StepGroupResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // InteractiveArgs_Get_StepGroupRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InteractiveArgsInstance - The id of the InteractiveArgs object.
  //
  // InteractiveArgs_Get_StepGroupResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepGroups - Returns or specifies the step group containing the steps to execute interactively. 
  //
  rpc Set_StepGroup(InteractiveArgs_Set_StepGroupRequest) returns (InteractiveArgs_Set_StepGroupResponse);
  rpc Get_StepGroup(InteractiveArgs_Get_StepGroupRequest) returns (InteractiveArgs_Get_StepGroupResponse);
  
  
  // Property: NumSteps
  //
  // Returns the number of step indexes added to the InteractiveArgs object.
  //
  // InteractiveArgs_Get_NumStepsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InteractiveArgsInstance - The id of the InteractiveArgs object.
  //
  // InteractiveArgs_Get_NumStepsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of step indexes added to the InteractiveArgs object. 
  //
  rpc Get_NumSteps(InteractiveArgs_Get_NumStepsRequest) returns (InteractiveArgs_Get_NumStepsResponse);
  
  
  // Property: LoopCount
  //
  // Returns or specifies the number of times to execute the list of selected steps.
  //
  // If the value of this property is -1, the execution loops indefinitely on the selected steps.
  //
  // InteractiveArgs_Set_LoopCountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InteractiveArgsInstance - The id of the InteractiveArgs object.
  //    - val: int32 - Returns or specifies the number of times to execute the list of selected steps. 
  //
  // InteractiveArgs_Set_LoopCountResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // InteractiveArgs_Get_LoopCountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InteractiveArgsInstance - The id of the InteractiveArgs object.
  //
  // InteractiveArgs_Get_LoopCountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns or specifies the number of times to execute the list of selected steps. 
  //
  rpc Set_LoopCount(InteractiveArgs_Set_LoopCountRequest) returns (InteractiveArgs_Set_LoopCountResponse);
  rpc Get_LoopCount(InteractiveArgs_Get_LoopCountRequest) returns (InteractiveArgs_Get_LoopCountResponse);
  
  
  // Property: StopExpression
  //
  // Gets or sets an expression with a value that indicates when to stop an execution that specifies a loop count.
  //
  // If the expression evaluates to True, the interactive execution stops. If the expression is an empty string, it is not evaluated.
  //
  // InteractiveArgs_Set_StopExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InteractiveArgsInstance - The id of the InteractiveArgs object.
  //    - val: string - Gets or sets an expression with a value that indicates when to stop an execution that specifies a loop count. 
  //
  // InteractiveArgs_Set_StopExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // InteractiveArgs_Get_StopExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InteractiveArgsInstance - The id of the InteractiveArgs object.
  //
  // InteractiveArgs_Get_StopExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Gets or sets an expression with a value that indicates when to stop an execution that specifies a loop count. 
  //
  rpc Set_StopExpression(InteractiveArgs_Set_StopExpressionRequest) returns (InteractiveArgs_Set_StopExpressionResponse);
  rpc Get_StopExpression(InteractiveArgs_Get_StopExpressionRequest) returns (InteractiveArgs_Get_StopExpressionResponse);
  
  
  // Property: Sequence
  //
  // Specifies the sequence that contains the steps the InteractiveArgs object lists by index.
  //
  // Set this property before passing the InteractiveArgs to a method that starts an execution. If you do not set this property, TestStand assumes that InteractiveArgs specifies steps in the first sequence the execution runs.  If you specify a process model, the first sequence an execution runs is the Process Model entry point.
  //
  // InteractiveArgs_Set_SequenceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InteractiveArgsInstance - The id of the InteractiveArgs object.
  //    - val: SequenceInstance - Specifies the sequence that contains the steps the InteractiveArgs object lists by index. 
  //
  // InteractiveArgs_Set_SequenceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // InteractiveArgs_Get_SequenceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InteractiveArgsInstance - The id of the InteractiveArgs object.
  //
  // InteractiveArgs_Get_SequenceResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceInstance - Specifies the sequence that contains the steps the InteractiveArgs object lists by index. 
  //
  rpc Set_Sequence(InteractiveArgs_Set_SequenceRequest) returns (InteractiveArgs_Set_SequenceResponse);
  rpc Get_Sequence(InteractiveArgs_Get_SequenceRequest) returns (InteractiveArgs_Get_SequenceResponse);
  
  
}
message InteractiveArgs_GetStepIndexRequest {
  // The id of the InteractiveArgs object.
  InteractiveArgsInstance instance = 1;
  // Specifies a zero-based index for the list of steps to run interactively.
  int32 arrayIndexParam = 2;
}

message InteractiveArgs_GetStepIndexResponse {
  // The return type of the Int32 object.
  int32 returnValue = 1;
}

message InteractiveArgs_AddStepIndexRequest {
  // The id of the InteractiveArgs object.
  InteractiveArgsInstance instance = 1;
  // Specifies a zero-based index for a step in the list of steps for the sequence in which you are running steps interactively.
  int32 stepIndexParam = 2;
}

message InteractiveArgs_AddStepIndexResponse {
}

message InteractiveArgs_ContainsStepRequest {
  // The id of the InteractiveArgs object.
  InteractiveArgsInstance instance = 1;
  // Specifies a zero-based index for a step in the list of steps for the sequence in which you are running steps interactively.
  int32 stepIndexParam = 2;
}

message InteractiveArgs_ContainsStepResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message InteractiveArgs_ClearStepListRequest {
  // The id of the InteractiveArgs object.
  InteractiveArgsInstance instance = 1;
}

message InteractiveArgs_ClearStepListResponse {
}

message InteractiveArgs_AsPropertyObjectRequest {
  // The id of the InteractiveArgs object.
  InteractiveArgsInstance instance = 1;
}

message InteractiveArgs_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message InteractiveArgs_Set_StepGroupRequest {
  // The id of the InteractiveArgs object.
  InteractiveArgsInstance instance = 1;
  // Returns or specifies the step group containing the steps to execute interactively.
  StepGroups val = 2;
}

message InteractiveArgs_Set_StepGroupResponse {
}

message InteractiveArgs_Get_StepGroupRequest {
  // The id of the InteractiveArgs object.
  InteractiveArgsInstance instance = 1;
}

message InteractiveArgs_Get_StepGroupResponse {
  // Returns or specifies the step group containing the steps to execute interactively.
  StepGroups returnValue = 1;
}

message InteractiveArgs_Get_NumStepsRequest {
  // The id of the InteractiveArgs object.
  InteractiveArgsInstance instance = 1;
}

message InteractiveArgs_Get_NumStepsResponse {
  // Returns the number of step indexes added to the InteractiveArgs object.
  int32 returnValue = 1;
}

message InteractiveArgs_Set_LoopCountRequest {
  // The id of the InteractiveArgs object.
  InteractiveArgsInstance instance = 1;
  // Returns or specifies the number of times to execute the list of selected steps.
  int32 val = 2;
}

message InteractiveArgs_Set_LoopCountResponse {
}

message InteractiveArgs_Get_LoopCountRequest {
  // The id of the InteractiveArgs object.
  InteractiveArgsInstance instance = 1;
}

message InteractiveArgs_Get_LoopCountResponse {
  // Returns or specifies the number of times to execute the list of selected steps.
  int32 returnValue = 1;
}

message InteractiveArgs_Set_StopExpressionRequest {
  // The id of the InteractiveArgs object.
  InteractiveArgsInstance instance = 1;
  // Gets or sets an expression with a value that indicates when to stop an execution that specifies a loop count.
  string val = 2;
}

message InteractiveArgs_Set_StopExpressionResponse {
}

message InteractiveArgs_Get_StopExpressionRequest {
  // The id of the InteractiveArgs object.
  InteractiveArgsInstance instance = 1;
}

message InteractiveArgs_Get_StopExpressionResponse {
  // Gets or sets an expression with a value that indicates when to stop an execution that specifies a loop count.
  string returnValue = 1;
}

message InteractiveArgs_Set_SequenceRequest {
  // The id of the InteractiveArgs object.
  InteractiveArgsInstance instance = 1;
  // Specifies the sequence that contains the steps the InteractiveArgs object lists by index.
  SequenceInstance val = 2;
}

message InteractiveArgs_Set_SequenceResponse {
}

message InteractiveArgs_Get_SequenceRequest {
  // The id of the InteractiveArgs object.
  InteractiveArgsInstance instance = 1;
}

message InteractiveArgs_Get_SequenceResponse {
  // Specifies the sequence that contains the steps the InteractiveArgs object lists by index.
  SequenceInstance returnValue = 1;
}

// Report
//
// Use objects of the Report class to modify, save, load, retrieve, and view reports. To obtain the Report object for an execution, retrieve the value of the Execution.Report property.
// Usually, the process model updates the Report object associated with the execution, and the sequence editor or user interface displays it.
//
service Report {
  // Method: Append
  //
  // Appends a string to the report.
  //
  // Note: TestStand releases any ReportSection object assigned to the Report object when you call this method.
  //
  // Report_AppendRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ReportInstance - The id of the Report object.
  //    - stringToAppend: string - Specifies the string to append to the report.
  //
  // Report_AppendResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns an index that refers to this append operation. Use this value with the Report.GetSection method. Calling the Report.Reset method invalidates the index. 
  //
  rpc Append(Report_AppendRequest) returns (Report_AppendResponse);
  
  
  // Method: Reset
  //
  // Replaces the current report data with the data in the string you specify.
  //
  // This method sets the Report.LatestAppendIndex property to 0.
  // Note: Any ReportSection object assigned to the Report object is released when you call this method.
  //
  // Report_ResetRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ReportInstance - The id of the Report object.
  //    - newValue: string - Specifies the new report string.
  //
  // Report_ResetResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of times you have reset the report. 
  //
  rpc Reset(Report_ResetRequest) returns (Report_ResetResponse);
  
  
  // Method: Save
  //
  // Saves the report to the file you specify.
  //
  // Calling this method updates the Report.Location property.
  // Note: If a ReportSection object is assigned to the report, this method saves the report obtained by calling the ReportSection.GetAllText method to disk.
  //
  // Report_SaveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ReportInstance - The id of the Report object.
  //    - pathString: string - Specifies the file in which to save the report.
  //    - appendIfAlreadyExists: bool - Specifies whether to append or overwrite the file if it already exists. Pass True to append to the file. Pass False to overwrite it.
  //    - linefeedConversion: ReportConversion - Specifies a linefeed conversion for the report text.
  //
  // Report_SaveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Save(Report_SaveRequest) returns (Report_SaveResponse);
  
  
  // Method: Load
  //
  // Replaces the current report data with the data in the file you specify.
  //
  // Calling this method updates the Report.Location property.
  //
  // Report_LoadRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ReportInstance - The id of the Report object.
  //    - pathString: string - Specifies the pathname of the file that contains the report data.
  //    - linefeedConversion: ReportConversion - Specifies a linefeed conversion for the report text.
  //
  // Report_LoadResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Load(Report_LoadRequest) returns (Report_LoadResponse);
  
  
  // Method: LaunchViewer
  //
  // Launches an external file viewer to allow the user to view the report.
  //
  // If the current TestStand configuration specifies an external viewer for the format, TestStand launches that viewer. Otherwise, TestStand launches the viewer that Microsoft Windows associates with the file extension the report format specifies.
  //
  // Report_LaunchViewerRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ReportInstance - The id of the Report object.
  //    - linefeedConversion: ReportConversion - Specifies a linefeed conversion for the report text.
  //
  // Report_LaunchViewerResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc LaunchViewer(Report_LaunchViewerRequest) returns (Report_LaunchViewerResponse);
  
  
  // Method: GetTempFile
  //
  // Stores the report in a temporary file and returns the pathname of the file.
  //
  // Report_GetTempFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ReportInstance - The id of the Report object.
  //    - linefeedConversion: ReportConversion - Specifies a linefeed conversion for the report text.
  //    - extensionString: ObjectInstance - String parameter that specifies the file extension for the temporary file. If you do not specify an extension string, the Report.Format property of the report determines the file extension.
  //
  // Report_GetTempFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The pathname of the temporary file used by this method to store the report. 
  //
  rpc GetTempFile(Report_GetTempFileRequest) returns (Report_GetTempFileResponse);
  
  
  // Method: AsPropertyObject
  //
  // Returns the underlying PropertyObject that represents the Report object. Use the PropertyObject to modify, add, or remove custom properties for the object.
  //
  // Report_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportInstance - The id of the Report object.
  //
  // Report_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(Report_AsPropertyObjectRequest) returns (Report_AsPropertyObjectResponse);
  
  
  // Method: GetSection
  //
  // Returns a section of the report.
  //
  // After calling the Report.Append method multiple times, call this method to obtain the section of text associated with the specified append index.
  // Note: When a ReportSection object is assigned to the Report object, this method returns invalid values and is not supported.
  //
  // Report_GetSectionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ReportInstance - The id of the Report object.
  //    - oldestIndex: int32 - Specifies the index of the Report.Append method that starts the section.
  //    - latestIndex: int32 - Specifies the index of the Report.Append method that ends the section.
  //
  // Report_GetSectionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The content of the report that the index parameters specify. 
  //
  rpc GetSection(Report_GetSectionRequest) returns (Report_GetSectionResponse);
  
  
  // Method: NewReportSection
  //
  // Creates and returns a reference to a ReportSection object.
  //
  // The ReportSection object this method returns is empty.
  //
  // Report_NewReportSectionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportInstance - The id of the Report object.
  //
  // Report_NewReportSectionResponse - The response message from the server. It provides the return value.
  //    - returnValue: ReportSectionInstance - The return type of the ReportSection object.
  //
  rpc NewReportSection(Report_NewReportSectionRequest) returns (Report_NewReportSectionResponse);
  
  
  // Method: RefreshDisplay
  //
  // Call this method to refresh the ReportView control after you make changes to an associated Report.ReportSection object to indicate that a report has changed and that the user interface must be refreshed.
  //
  // Calling the Report.Append or Report.Reset methods or assigning a new reference to the Report.ReportSection property automatically refreshes the ReportView control. However, when you make changes to a ReportSection object already assigned to a Report.ReportSection property, the Report object does not automatically notify the ReportView control. You must call the Report.RefreshDisplay method to notify the ReportView control to refresh in this case.
  //
  // Report_RefreshDisplayRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportInstance - The id of the Report object.
  //
  // Report_RefreshDisplayResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc RefreshDisplay(Report_RefreshDisplayRequest) returns (Report_RefreshDisplayResponse);
  
  
  // Method: SetTempFileDirectoryEx
  //
  // Specifies the directory path where TestStand saves the file the Report.GetTempFile method creates.
  //
  // When you use the SetTempFileDirectoryOption_Default option with this method, calling the Report.Load or Report.Save method modifies the directory path where TestStand saves the file the Report.GetTempFile method creates. Using the SetTempFileDirectoryOption_Default option with this method results in the same behavior as using the Report.TempFileDirectory property to specify the directory path where TestStand saves the file the Report.GetTempFile method creates.
  // Use the SetTempFileDirectoryOption_NeverOverride option to ensure that TestStand saves the file the Report.GetTempFile method creates in the directory path this method specifies. You can override the directory path by calling this method again to set the directory path.
  // By default, TestStand saves the file the Report.GetTempFile method creates in the directory path of the report file. Typically, if you save generated reports on a network drive to which you do not have delete permission, you cannot delete the file the Report.GetTempFile method creates after the execution. To work around this situation, use the Report.SetTempFileDirectoryEx method with the SetTempFileDirectoryOption_NeverOverride option to save the file the Report.GetTempFile method creates to a local drive.
  //
  // Report_SetTempFileDirectoryExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ReportInstance - The id of the Report object.
  //    - directory: string - Specifies the directory path to save the file. 
  //    - tempFileDirectoryOption: SetTempFileDirectoryOptions - Pass 0 to specify the default behavior or an option from the SetTempFileDirectoryOptions enumeration.
  //
  // Report_SetTempFileDirectoryExResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetTempFileDirectoryEx(Report_SetTempFileDirectoryExRequest) returns (Report_SetTempFileDirectoryExResponse);
  
  

  // Property: All
  //
  // Returns the entire report as a string.
  //
  // Report_Get_AllRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportInstance - The id of the Report object.
  //
  // Report_Get_AllResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the entire report as a string. 
  //
  rpc Get_All(Report_Get_AllRequest) returns (Report_Get_AllResponse);
  
  
  // Property: Id
  //
  // Returns a unique ID that distinguishes this report from all other reports.
  // Note: The ID number is never zero.
  //
  // Report_Get_IdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportInstance - The id of the Report object.
  //
  // Report_Get_IdResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a unique ID that distinguishes this report from all other reports. Note: The ID number is never zero. 
  //
  rpc Get_Id(Report_Get_IdRequest) returns (Report_Get_IdResponse);
  
  
  // Property: Location
  //
  // Specifies a string that indicates the display value for the report location.
  //
  // If you call the Report.Load or Report.Save method of this class, this property is automatically set to the pathname of the report file. You cannot use this property to set the location of the report.
  //
  // Report_Set_LocationRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportInstance - The id of the Report object.
  //    - val: string - Specifies a string that indicates the display value for the report location. 
  //
  // Report_Set_LocationResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Report_Get_LocationRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportInstance - The id of the Report object.
  //
  // Report_Get_LocationResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies a string that indicates the display value for the report location. 
  //
  rpc Set_Location(Report_Set_LocationRequest) returns (Report_Set_LocationResponse);
  rpc Get_Location(Report_Get_LocationRequest) returns (Report_Get_LocationResponse);
  
  
  // Property: Format
  //
  // Specifies the file format of the report. Specify the file format by passing the file extension for that format, such as txt for ASCII text files, htm or html for HTML files, and rtf for rich text format files.
  //
  // Report_Set_FormatRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportInstance - The id of the Report object.
  //    - val: string - Specifies the file format of the report. Specify the file format by passing the file extension for that format, such as txt for ASCII text files, htm or html for HTML files, and rtf for rich text format files. 
  //
  // Report_Set_FormatResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Report_Get_FormatRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportInstance - The id of the Report object.
  //
  // Report_Get_FormatResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the file format of the report. Specify the file format by passing the file extension for that format, such as txt for ASCII text files, htm or html for HTML files, and rtf for rich text format files. 
  //
  rpc Set_Format(Report_Set_FormatRequest) returns (Report_Set_FormatResponse);
  rpc Get_Format(Report_Get_FormatRequest) returns (Report_Get_FormatResponse);
  
  
  // Property: LatestAppendIndex
  //
  // Returns the most recent index the Report.Append method returns.
  //
  // Use this value with the Report.GetSection method to obtain the last section of the report.
  // Note: When a ReportSection object is assigned to the Report object, this property returns invalid values and is not supported.
  //
  // Report_Get_LatestAppendIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportInstance - The id of the Report object.
  //
  // Report_Get_LatestAppendIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the most recent index the Report.Append method returns. 
  //
  rpc Get_LatestAppendIndex(Report_Get_LatestAppendIndexRequest) returns (Report_Get_LatestAppendIndexResponse);
  
  
  // Property: ResetCount
  //
  // Returns the number of times you have reset the report.
  //
  // Report_Get_ResetCountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportInstance - The id of the Report object.
  //
  // Report_Get_ResetCountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of times you have reset the report. 
  //
  rpc Get_ResetCount(Report_Get_ResetCountRequest) returns (Report_Get_ResetCountResponse);
  
  
  // Property: IsEmpty
  //
  // Returns if the report is empty.
  //
  // Report_Get_IsEmptyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportInstance - The id of the Report object.
  //
  // Report_Get_IsEmptyResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns if the report is empty. 
  //
  rpc Get_IsEmpty(Report_Get_IsEmptyRequest) returns (Report_Get_IsEmptyResponse);
  
  
  // Property: StyleSheetPath
  //
  // Specifies a string which specifies the absolute pathname of the style sheet used to transform XML reports.
  //
  // If this property is not specified, the default style sheet is used to transform the XML report.
  //
  // Report_Set_StyleSheetPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportInstance - The id of the Report object.
  //    - val: string - Specifies a string which specifies the absolute pathname of the style sheet used to transform XML reports. 
  //
  // Report_Set_StyleSheetPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Report_Get_StyleSheetPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportInstance - The id of the Report object.
  //
  // Report_Get_StyleSheetPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies a string which specifies the absolute pathname of the style sheet used to transform XML reports. 
  //
  rpc Set_StyleSheetPath(Report_Set_StyleSheetPathRequest) returns (Report_Set_StyleSheetPathResponse);
  rpc Get_StyleSheetPath(Report_Get_StyleSheetPathRequest) returns (Report_Get_StyleSheetPathResponse);
  
  
  // Property: TempFileDirectory
  //
  // Specifies a string that specifies the directory path where TestStand saves the file the Report.GetTempFile method creates. If you call the Report.Load or Report.Save method of this class, this property is automatically set to the directory path of the report file.
  //
  // Note: Writing to this property is obsolete. Use the Report.SetTempFileDirectoryEx method instead. When you write to this property after calling the Report.SetTempFileDirectoryEx method with the tempFileDirectoryOptions parameter value set to SetTempFileDirectoryOption_NeverOverride, TestStand returns a run-time error.
  //
  // Report_Set_TempFileDirectoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportInstance - The id of the Report object.
  //    - val: string - Specifies a string that specifies the directory path where TestStand saves the file the Report.GetTempFile method creates. If you call the Report.Load or Report.Save method of this class, this property is automatically set to the directory path of the report file. 
  //
  // Report_Set_TempFileDirectoryResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Report_Get_TempFileDirectoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportInstance - The id of the Report object.
  //
  // Report_Get_TempFileDirectoryResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies a string that specifies the directory path where TestStand saves the file the Report.GetTempFile method creates. If you call the Report.Load or Report.Save method of this class, this property is automatically set to the directory path of the report file. 
  //
  rpc Set_TempFileDirectory(Report_Set_TempFileDirectoryRequest) returns (Report_Set_TempFileDirectoryResponse);
  rpc Get_TempFileDirectory(Report_Get_TempFileDirectoryRequest) returns (Report_Get_TempFileDirectoryResponse);
  
  
  // Property: ReportSection
  //
  // Specifies the ReportSection object associated with the Report object, which uses the report data stored in the ReportSection object as the report. If no ReportSection object was previously set, this property returns NULL.
  //
  // If you call the Report.Append, Report.Load, or Report.Reset methods, this property returns NULL.
  // If this property is set, the Report.LatestAppendIndex method always returns -1.
  // Setting this property discards any report data set from prior calls to the Report.Append or Report.Reset methods.
  //
  // Report_Set_ReportSectionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportInstance - The id of the Report object.
  //    - val: ReportSectionInstance - Specifies the ReportSection object associated with the Report object, which uses the report data stored in the ReportSection object as the report. If no ReportSection object was previously set, this property returns NULL. 
  //
  // Report_Set_ReportSectionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Report_Get_ReportSectionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportInstance - The id of the Report object.
  //
  // Report_Get_ReportSectionResponse - The response message from the server. It provides the return value.
  //    - returnValue: ReportSectionInstance - Specifies the ReportSection object associated with the Report object, which uses the report data stored in the ReportSection object as the report. If no ReportSection object was previously set, this property returns NULL. 
  //
  rpc Set_ReportSection(Report_Set_ReportSectionRequest) returns (Report_Set_ReportSectionResponse);
  rpc Get_ReportSection(Report_Get_ReportSectionRequest) returns (Report_Get_ReportSectionResponse);
  
  
  // Property: SuspendReportRefresh
  //
  // Set this property to True to suspend report refreshes when modifying the ReportSection associated with the report. You typically use this property with on-the-fly report generation to avoid generating a partial report, when you are more likely to modify the ReportSection object associated with the report while TestStand processes the report for display purposes.
  //
  // Call this property only from a code module or a statement step used for report generation, not from an executing sequence or the user interface code.
  // After you set this property to True, you must reset this property to False in the same code module or statement step for the user interfaces and report generation to function correctly.
  // When this property is True, the Report.IsEmpty property always returns True and the Report.All property returns an empty string.
  //
  // Report_Set_SuspendReportRefreshRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportInstance - The id of the Report object.
  //    - val: bool - Set this property to True to suspend report refreshes when modifying the ReportSection associated with the report. You typically use this property with on-the-fly report generation to avoid generating a partial report, when you are more likely to modify the ReportSection object associated with the report while TestStand processes the report for display purposes. 
  //
  // Report_Set_SuspendReportRefreshResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Report_Get_SuspendReportRefreshRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportInstance - The id of the Report object.
  //
  // Report_Get_SuspendReportRefreshResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Set this property to True to suspend report refreshes when modifying the ReportSection associated with the report. You typically use this property with on-the-fly report generation to avoid generating a partial report, when you are more likely to modify the ReportSection object associated with the report while TestStand processes the report for display purposes. 
  //
  rpc Set_SuspendReportRefresh(Report_Set_SuspendReportRefreshRequest) returns (Report_Set_SuspendReportRefreshResponse);
  rpc Get_SuspendReportRefresh(Report_Get_SuspendReportRefreshRequest) returns (Report_Get_SuspendReportRefreshResponse);
  
  
}
message Report_AppendRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
  // Specifies the string to append to the report.
  string stringToAppend = 2;
}

message Report_AppendResponse {
  // Returns an index that refers to this append operation. Use this value with the Report.GetSection method. Calling the Report.Reset method invalidates the index.
  int32 returnValue = 1;
}

message Report_ResetRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
  // Specifies the new report string.
  string newValue = 2;
}

message Report_ResetResponse {
  // Returns the number of times you have reset the report.
  int32 returnValue = 1;
}

message Report_SaveRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
  // Specifies the file in which to save the report.
  string pathString = 2;
  // Specifies whether to append or overwrite the file if it already exists. Pass True to append to the file. Pass False to overwrite it.
  bool appendIfAlreadyExists = 3;
  // Specifies a linefeed conversion for the report text.
  ReportConversion linefeedConversion = 4;
}

message Report_SaveResponse {
}

message Report_LoadRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
  // Specifies the pathname of the file that contains the report data.
  string pathString = 2;
  // Specifies a linefeed conversion for the report text.
  ReportConversion linefeedConversion = 3;
}

message Report_LoadResponse {
}

message Report_LaunchViewerRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
  // Specifies a linefeed conversion for the report text.
  ReportConversion linefeedConversion = 2;
}

message Report_LaunchViewerResponse {
}

message Report_GetTempFileRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
  // Specifies a linefeed conversion for the report text.
  ReportConversion linefeedConversion = 2;
  // String parameter that specifies the file extension for the temporary file. If you do not specify an extension string, the Report.Format property of the report determines the file extension.
  ObjectInstance extensionString = 3;
}

message Report_GetTempFileResponse {
  // The pathname of the temporary file used by this method to store the report.
  string returnValue = 1;
}

message Report_AsPropertyObjectRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
}

message Report_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message Report_GetSectionRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
  // Specifies the index of the Report.Append method that starts the section.
  int32 oldestIndex = 2;
  // Specifies the index of the Report.Append method that ends the section.
  int32 latestIndex = 3;
}

message Report_GetSectionResponse {
  // The content of the report that the index parameters specify.
  string returnValue = 1;
}

message Report_NewReportSectionRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
}

message Report_NewReportSectionResponse {
  // The return type of the ReportSection object.
  ReportSectionInstance returnValue = 1;
}

message Report_RefreshDisplayRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
}

message Report_RefreshDisplayResponse {
}

message Report_SetTempFileDirectoryExRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
  // Specifies the directory path to save the file.
  string directory = 2;
  // Pass 0 to specify the default behavior or an option from the SetTempFileDirectoryOptions enumeration.
  SetTempFileDirectoryOptions tempFileDirectoryOption = 3;
}

message Report_SetTempFileDirectoryExResponse {
}

message Report_Get_AllRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
}

message Report_Get_AllResponse {
  // Returns the entire report as a string.
  string returnValue = 1;
}

message Report_Get_IdRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
}

message Report_Get_IdResponse {
  // Returns a unique ID that distinguishes this report from all other reports.
  // Note: The ID number is never zero.
  int32 returnValue = 1;
}

message Report_Set_LocationRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
  // Specifies a string that indicates the display value for the report location.
  string val = 2;
}

message Report_Set_LocationResponse {
}

message Report_Get_LocationRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
}

message Report_Get_LocationResponse {
  // Specifies a string that indicates the display value for the report location.
  string returnValue = 1;
}

message Report_Set_FormatRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
  // Specifies the file format of the report. Specify the file format by passing the file extension for that format, such as txt for ASCII text files, htm or html for HTML files, and rtf for rich text format files.
  string val = 2;
}

message Report_Set_FormatResponse {
}

message Report_Get_FormatRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
}

message Report_Get_FormatResponse {
  // Specifies the file format of the report. Specify the file format by passing the file extension for that format, such as txt for ASCII text files, htm or html for HTML files, and rtf for rich text format files.
  string returnValue = 1;
}

message Report_Get_LatestAppendIndexRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
}

message Report_Get_LatestAppendIndexResponse {
  // Returns the most recent index the Report.Append method returns.
  int32 returnValue = 1;
}

message Report_Get_ResetCountRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
}

message Report_Get_ResetCountResponse {
  // Returns the number of times you have reset the report.
  int32 returnValue = 1;
}

message Report_Get_IsEmptyRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
}

message Report_Get_IsEmptyResponse {
  // Returns if the report is empty.
  bool returnValue = 1;
}

message Report_Set_StyleSheetPathRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
  // Specifies a string which specifies the absolute pathname of the style sheet used to transform XML reports.
  string val = 2;
}

message Report_Set_StyleSheetPathResponse {
}

message Report_Get_StyleSheetPathRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
}

message Report_Get_StyleSheetPathResponse {
  // Specifies a string which specifies the absolute pathname of the style sheet used to transform XML reports.
  string returnValue = 1;
}

message Report_Set_TempFileDirectoryRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
  // Specifies a string that specifies the directory path where TestStand saves the file the Report.GetTempFile method creates. If you call the Report.Load or Report.Save method of this class, this property is automatically set to the directory path of the report file.
  string val = 2;
}

message Report_Set_TempFileDirectoryResponse {
}

message Report_Get_TempFileDirectoryRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
}

message Report_Get_TempFileDirectoryResponse {
  // Specifies a string that specifies the directory path where TestStand saves the file the Report.GetTempFile method creates. If you call the Report.Load or Report.Save method of this class, this property is automatically set to the directory path of the report file.
  string returnValue = 1;
}

message Report_Set_ReportSectionRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
  // Specifies the ReportSection object associated with the Report object, which uses the report data stored in the ReportSection object as the report. If no ReportSection object was previously set, this property returns NULL.
  ReportSectionInstance val = 2;
}

message Report_Set_ReportSectionResponse {
}

message Report_Get_ReportSectionRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
}

message Report_Get_ReportSectionResponse {
  // Specifies the ReportSection object associated with the Report object, which uses the report data stored in the ReportSection object as the report. If no ReportSection object was previously set, this property returns NULL.
  ReportSectionInstance returnValue = 1;
}

message Report_Set_SuspendReportRefreshRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
  // Set this property to True to suspend report refreshes when modifying the ReportSection associated with the report. You typically use this property with on-the-fly report generation to avoid generating a partial report, when you are more likely to modify the ReportSection object associated with the report while TestStand processes the report for display purposes.
  bool val = 2;
}

message Report_Set_SuspendReportRefreshResponse {
}

message Report_Get_SuspendReportRefreshRequest {
  // The id of the Report object.
  ReportInstance instance = 1;
}

message Report_Get_SuspendReportRefreshResponse {
  // Set this property to True to suspend report refreshes when modifying the ReportSection associated with the report. You typically use this property with on-the-fly report generation to avoid generating a partial report, when you are more likely to modify the ReportSection object associated with the report while TestStand processes the report for display purposes.
  bool returnValue = 1;
}

// Reports
//
// This class is a collection of Report objects.
//
service Reports {
  // Method: Insert
  //
  // Adds a new item to the collection and returns the Report object.
  //
  // Reports_InsertRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ReportsInstance - The id of the Reports object.
  //    - index: int32 - Specifies the zero-based index of the location in the collection where you want to insert the Report object. Pass -1 to insert the Report object at the end of the collection.
  //
  // Reports_InsertResponse - The response message from the server. It provides the return value.
  //    - returnValue: ReportInstance - The return type of the Report object.
  //
  rpc Insert(Reports_InsertRequest) returns (Reports_InsertResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection and returns the Report object. The collection must always contain at least one Report object. If the collection contains only one Report object, the Report is not removed until another Report is added to the collection.
  //
  // Reports_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ReportsInstance - The id of the Reports object.
  //    - index: int32 - Specifies the zero-based index of the Report object you want to remove.
  //
  // Reports_RemoveResponse - The response message from the server. It provides the return value.
  //    - returnValue: ReportInstance - The return type of the Report object.
  //
  rpc Remove(Reports_RemoveRequest) returns (Reports_RemoveResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the collection. The collection must contain at least one Report object because this method also creates and adds a new empty Report object to the collection.
  //
  // Reports_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportsInstance - The id of the Reports object.
  //
  // Reports_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(Reports_ClearRequest) returns (Reports_ClearResponse);
  
  
  // Method: InsertExisting
  //
  // Inserts back into the collection a report you previously removed using Reports.Remove. The report must not be in another Reports collection.
  //
  // Reports_InsertExistingRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ReportsInstance - The id of the Reports object.
  //    - val: ReportInstance - Specifies an existing Report object to insert into the collection.
  //    - index: int32 - Specifies the zero-based index of the location in the collection where you want to insert the Report object. Pass -1 to insert the Report object at the end of the collection.
  //
  // Reports_InsertExistingResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc InsertExisting(Reports_InsertExistingRequest) returns (Reports_InsertExistingResponse);
  
  
  // Method: Replace
  //
  // Replaces the Report object you specify in the collection and returns the Report object.
  //
  // Reports_ReplaceRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ReportsInstance - The id of the Reports object.
  //    - oldVal: ReportInstance - Specifies the Report object in the collection to replace. If the Report object you specify is the active report, the replacement Report object becomes the active report.
  //    - newVal: ReportInstance - Specifies the replacement Report object. Pass NULL to create a new empty replacement Report object.
  //
  // Reports_ReplaceResponse - The response message from the server. It provides the return value.
  //    - returnValue: ReportInstance - The return type of the Report object.
  //
  rpc Replace(Reports_ReplaceRequest) returns (Reports_ReplaceResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // Reports_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ReportsInstance - The id of the Reports object.
  //    - index: int32 - Specifies the zero-based index of the Report object to retrieve.
  //
  // Reports_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: ReportInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(Reports_Get_ItemRequest) returns (Reports_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // Reports_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportsInstance - The id of the Reports object.
  //
  // Reports_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(Reports_Get_CountRequest) returns (Reports_Get_CountResponse);
  
  
  // Property: ActiveReport
  //
  // Specifies the active report in the collection. The TestStand ReportView control displays the currently active report.
  //
  // Reports_Set_ActiveReportRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportsInstance - The id of the Reports object.
  //    - val: ReportInstance - Specifies the active report in the collection. The TestStand ReportView control displays the currently active report. 
  //
  // Reports_Set_ActiveReportResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Reports_Get_ActiveReportRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportsInstance - The id of the Reports object.
  //
  // Reports_Get_ActiveReportResponse - The response message from the server. It provides the return value.
  //    - returnValue: ReportInstance - Specifies the active report in the collection. The TestStand ReportView control displays the currently active report. 
  //
  rpc Set_ActiveReport(Reports_Set_ActiveReportRequest) returns (Reports_Set_ActiveReportResponse);
  rpc Get_ActiveReport(Reports_Get_ActiveReportRequest) returns (Reports_Get_ActiveReportResponse);
  
  
}
message Reports_InsertRequest {
  // The id of the Reports object.
  ReportsInstance instance = 1;
  // Specifies the zero-based index of the location in the collection where you want to insert the Report object. Pass -1 to insert the Report object at the end of the collection.
  int32 index = 2;
}

message Reports_InsertResponse {
  // The return type of the Report object.
  ReportInstance returnValue = 1;
}

message Reports_RemoveRequest {
  // The id of the Reports object.
  ReportsInstance instance = 1;
  // Specifies the zero-based index of the Report object you want to remove.
  int32 index = 2;
}

message Reports_RemoveResponse {
  // The return type of the Report object.
  ReportInstance returnValue = 1;
}

message Reports_ClearRequest {
  // The id of the Reports object.
  ReportsInstance instance = 1;
}

message Reports_ClearResponse {
}

message Reports_InsertExistingRequest {
  // The id of the Reports object.
  ReportsInstance instance = 1;
  // Specifies an existing Report object to insert into the collection.
  ReportInstance val = 2;
  // Specifies the zero-based index of the location in the collection where you want to insert the Report object. Pass -1 to insert the Report object at the end of the collection.
  int32 index = 3;
}

message Reports_InsertExistingResponse {
}

message Reports_ReplaceRequest {
  // The id of the Reports object.
  ReportsInstance instance = 1;
  // Specifies the Report object in the collection to replace. If the Report object you specify is the active report, the replacement Report object becomes the active report.
  ReportInstance oldVal = 2;
  // Specifies the replacement Report object. Pass NULL to create a new empty replacement Report object.
  ReportInstance newVal = 3;
}

message Reports_ReplaceResponse {
  // The return type of the Report object.
  ReportInstance returnValue = 1;
}

message Reports_Get_ItemRequest {
  // The id of the Reports object.
  ReportsInstance instance = 1;
  // Specifies the zero-based index of the Report object to retrieve.
  optional int32 index = 2;
}

message Reports_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  ReportInstance returnValue = 1;
}

message Reports_Get_CountRequest {
  // The id of the Reports object.
  ReportsInstance instance = 1;
}

message Reports_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

message Reports_Set_ActiveReportRequest {
  // The id of the Reports object.
  ReportsInstance instance = 1;
  // Specifies the active report in the collection. The TestStand ReportView control displays the currently active report.
  ReportInstance val = 2;
}

message Reports_Set_ActiveReportResponse {
}

message Reports_Get_ActiveReportRequest {
  // The id of the Reports object.
  ReportsInstance instance = 1;
}

message Reports_Get_ActiveReportResponse {
  // Specifies the active report in the collection. The TestStand ReportView control displays the currently active report.
  ReportInstance returnValue = 1;
}

// ExecutionOutputRecordStreams
//
// 
//
service ExecutionOutputRecordStreams {
  // Method: NewStream
  //
  // Create a new ExecutionOutputRecordStream attached to the execution associated with this ExecutionOutputRecordStreams collection.
  // 
  //
  // Attempting to create a new stream with the same name as an existing stream that is already part of this ExecutionOutputRecordStreams collection causes a run-time error.
  //
  // ExecutionOutputRecordStreams_NewStreamRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionOutputRecordStreamsInstance - The id of the ExecutionOutputRecordStreams object.
  //    - streamName: string - The name of the stream to create.  The name must be unique within this ExecutionOutputRecordStreams collection.  Names are case sensitive.
  //
  // ExecutionOutputRecordStreams_NewStreamResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionOutputRecordStreamInstance - The return type of the ExecutionOutputRecordStream object.
  //
  rpc NewStream(ExecutionOutputRecordStreams_NewStreamRequest) returns (ExecutionOutputRecordStreams_NewStreamResponse);
  
  
  // Method: GetStream
  //
  // Get the ExecutionOutputRecordStream with the specified name.
  //
  // ExecutionOutputRecordStreams.GetStream throws a run-time error if the specified stream does not exist.
  //
  // ExecutionOutputRecordStreams_GetStreamRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionOutputRecordStreamsInstance - The id of the ExecutionOutputRecordStreams object.
  //    - streamName: string - The name of the stream to get.  The name is case sensitive.
  //
  // ExecutionOutputRecordStreams_GetStreamResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionOutputRecordStreamInstance - The return type of the ExecutionOutputRecordStream object.
  //
  rpc GetStream(ExecutionOutputRecordStreams_GetStreamRequest) returns (ExecutionOutputRecordStreams_GetStreamResponse);
  
  
  // Method: CloseAndRemoveStream
  //
  // Close the specified stream and remove it from this collection.
  //
  // ExecutionOutputRecordStreams_CloseAndRemoveStreamRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionOutputRecordStreamsInstance - The id of the ExecutionOutputRecordStreams object.
  //    - streamName: string - The name of the stream to close and remove.  The name is case sensitive.
  //      
  //      Specifying a stream that does not exist causes a run-time error.
  //      
  //
  // ExecutionOutputRecordStreams_CloseAndRemoveStreamResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc CloseAndRemoveStream(ExecutionOutputRecordStreams_CloseAndRemoveStreamRequest) returns (ExecutionOutputRecordStreams_CloseAndRemoveStreamResponse);
  
  
  // Method: CloseAll
  //
  // Close all ExecutionOutputRecordStream objects in this collection.
  //
  // Note: Note:  The streams are not removed from the collection.  Call ExecutionOutputRecordStreams.RemoveAll to remove them.
  //
  // ExecutionOutputRecordStreams_CloseAllRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionOutputRecordStreamsInstance - The id of the ExecutionOutputRecordStreams object.
  //
  // ExecutionOutputRecordStreams_CloseAllResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc CloseAll(ExecutionOutputRecordStreams_CloseAllRequest) returns (ExecutionOutputRecordStreams_CloseAllResponse);
  
  
  // Method: RemoveAll
  //
  // Remove all ExecutionOutputRecordStream objects from this collection.
  //
  // Note: Note:  The streams are not automatically closed when you remove them.  Call ExecutionOutputRecordStreams.CloseAll first to close them.
  //
  // ExecutionOutputRecordStreams_RemoveAllRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionOutputRecordStreamsInstance - The id of the ExecutionOutputRecordStreams object.
  //
  // ExecutionOutputRecordStreams_RemoveAllResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc RemoveAll(ExecutionOutputRecordStreams_RemoveAllRequest) returns (ExecutionOutputRecordStreams_RemoveAllResponse);
  
  
  // Method: BeginNextUUTOrBatch
  //
  // Clean up this ExecutionOutputRecordStreams object before beginning the next UUT or batch.
  //
  // BeginNextUUTOrBatch iterates over all ExecutionOutputRecordStream objects contained in this collection.  Any streams with the ExecutionOutputRecordStream.CloseAtNextUUTOrBatch property set to true are closed and removed from the collection.  Streams with this property set to false are left unchanged.
  //
  // ExecutionOutputRecordStreams_BeginNextUUTOrBatchRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionOutputRecordStreamsInstance - The id of the ExecutionOutputRecordStreams object.
  //
  // ExecutionOutputRecordStreams_BeginNextUUTOrBatchResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc BeginNextUUTOrBatch(ExecutionOutputRecordStreams_BeginNextUUTOrBatchRequest) returns (ExecutionOutputRecordStreams_BeginNextUUTOrBatchResponse);
  
  
}
message ExecutionOutputRecordStreamInstance {
  // Specifies the handle of the ExecutionOutputRecordStream instance in the server.
  string id = 1;
}
message ExecutionOutputRecordStreams_NewStreamRequest {
  // The id of the ExecutionOutputRecordStreams object.
  ExecutionOutputRecordStreamsInstance instance = 1;
  // The name of the stream to create.  The name must be unique within this ExecutionOutputRecordStreams collection.  Names are case sensitive.
  string streamName = 2;
}

message ExecutionOutputRecordStreams_NewStreamResponse {
  // The return type of the ExecutionOutputRecordStream object.
  ExecutionOutputRecordStreamInstance returnValue = 1;
}

message ExecutionOutputRecordStreams_GetStreamRequest {
  // The id of the ExecutionOutputRecordStreams object.
  ExecutionOutputRecordStreamsInstance instance = 1;
  // The name of the stream to get.  The name is case sensitive.
  string streamName = 2;
}

message ExecutionOutputRecordStreams_GetStreamResponse {
  // The return type of the ExecutionOutputRecordStream object.
  ExecutionOutputRecordStreamInstance returnValue = 1;
}

message ExecutionOutputRecordStreams_CloseAndRemoveStreamRequest {
  // The id of the ExecutionOutputRecordStreams object.
  ExecutionOutputRecordStreamsInstance instance = 1;
  // The name of the stream to close and remove.  The name is case sensitive.
  // 
  // Specifying a stream that does not exist causes a run-time error.
  // 
  string streamName = 2;
}

message ExecutionOutputRecordStreams_CloseAndRemoveStreamResponse {
}

message ExecutionOutputRecordStreams_CloseAllRequest {
  // The id of the ExecutionOutputRecordStreams object.
  ExecutionOutputRecordStreamsInstance instance = 1;
}

message ExecutionOutputRecordStreams_CloseAllResponse {
}

message ExecutionOutputRecordStreams_RemoveAllRequest {
  // The id of the ExecutionOutputRecordStreams object.
  ExecutionOutputRecordStreamsInstance instance = 1;
}

message ExecutionOutputRecordStreams_RemoveAllResponse {
}

message ExecutionOutputRecordStreams_BeginNextUUTOrBatchRequest {
  // The id of the ExecutionOutputRecordStreams object.
  ExecutionOutputRecordStreamsInstance instance = 1;
}

message ExecutionOutputRecordStreams_BeginNextUUTOrBatchResponse {
}

// ExecutionOutputRecordStream
//
// 
//
service ExecutionOutputRecordStream {
  // Method: Insert
  //
  // Add an OutputRecordStream to this ExecutionOutputRecordStream.
  //
  // ExecutionOutputRecordStream_InsertRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionOutputRecordStreamInstance - The id of the ExecutionOutputRecordStream object.
  //    - stream: OutputRecordStreamInstance - A non-null reference to an OutputRecordStream to add to this ExecutionOutputRecordStream.
  //
  // ExecutionOutputRecordStream_InsertResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Insert(ExecutionOutputRecordStream_InsertRequest) returns (ExecutionOutputRecordStream_InsertResponse);
  
  
  // Method: Remove
  //
  // Remove an OutputRecordStream from this ExecutionOutputRecordStream.
  //
  // The OutputRecordStream is not automatically closed when it is removed.  To close the OutputRecordStream, call OutputRecordStream.Close() on the stream itself.
  //
  // ExecutionOutputRecordStream_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionOutputRecordStreamInstance - The id of the ExecutionOutputRecordStream object.
  //    - stream: OutputRecordStreamInstance - A non-null reference to an OutputRecordStream to remove from this ExecutionOutputRecordStream.
  //
  // ExecutionOutputRecordStream_RemoveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Remove(ExecutionOutputRecordStream_RemoveRequest) returns (ExecutionOutputRecordStream_RemoveResponse);
  
  
  // Method: RemoveAllStreams
  //
  // Remove all OutputRecordStream objects from this ExecutionOutputRecordStream.
  //
  // Streams are not automatically closed when they are removed.  To close the streams, call ExecutionOutputRecordStream.Close before removing them.
  //
  // ExecutionOutputRecordStream_RemoveAllStreamsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionOutputRecordStreamInstance - The id of the ExecutionOutputRecordStream object.
  //
  // ExecutionOutputRecordStream_RemoveAllStreamsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc RemoveAllStreams(ExecutionOutputRecordStream_RemoveAllStreamsRequest) returns (ExecutionOutputRecordStream_RemoveAllStreamsResponse);
  
  
  // Method: DefineFields
  //
  // Define the field names for records displayed in the Report View.
  //
  // Defining the fields names for the ExecutionOutputRecordStream does not define them for the contained OutputRecordStream objects. It only specifies names for display in the Report View. Field names are not a part of the base OutputRecordStream interface, and may or may not be applicable for a specific OutputRecordStream implementation.  To define the field names for a CsvFileOutputRecordStream, call CsvFileOutputRecordStream.WriteFieldHeaders().
  //
  // ExecutionOutputRecordStream_DefineFieldsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionOutputRecordStreamInstance - The id of the ExecutionOutputRecordStream object.
  //    - fieldDefinitions: PropertyObjectInstance - A container or array defining the field names. If the fields parameter is a container, the container is the record, and each subproperty is a field.  The names of the subproperties are the field names.  If the record parameter is an array, the entire array is the record, and each array element is a field.  The values of the array elements coerced to strings are the field names.
  //    - mapping: string - Specifies the mapping from elements (either subproperties or array elements) in the fields parameter to fields in the stream.
  //      
  //      The mapping is a comma-separated list of index ranges.  For example, "0, 3-5, 8-7" specifies that elements 0, 3, 4, 5, 8, and 7 specify the field names.  The final range in the list may be open-ended.  For example, "2, 3-" indicates that elements 2, 3, and all elements beyond 3 specify the field names. For convenience, you may specify an empty string to specify all elements be used in order. That is, an empty string is equivalent to "0-". The default value is an empty string.
  //      
  //
  // ExecutionOutputRecordStream_DefineFieldsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc DefineFields(ExecutionOutputRecordStream_DefineFieldsRequest) returns (ExecutionOutputRecordStream_DefineFieldsResponse);
  
  
  // Method: WriteRecord
  //
  // Write a record to the ExecutionOutputRecordStream.
  //
  // ExecutionOutputRecordStream.WriteRecord invokes OutputRecordStream.WriteRecord on each OutputRecordStream it contains, using the specified parameters.  In addition, it updates the Report View with data from the new record.
  //
  // ExecutionOutputRecordStream_WriteRecordRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionOutputRecordStreamInstance - The id of the ExecutionOutputRecordStream object.
  //    - record: PropertyObjectInstance - The record to write.  The record parameter may be either a container or an array. If the record parameter is a container, the container represents the record, and each subproperty is a field.  If the record parameter is an array, the entire array represents the record, and each array element is a field.
  //      
  //    - mapping: string - Specifies the mapping from elements (either subproperties or array elements) in the record parameter to fields in the stream. The mapping is a comma-separated list of index ranges.  For example, "0, 3-5, 8-7" specifies that elements 0, 3, 4, 5, 8, and 7 be written as the fields to the stream.  The final range in the list may be open-ended.  For example, "2, 3-" indicates that elements 2, 3, and all elements beyond 3 be written to the stream. If the record parameter is a container, the range list may include individual subproperty names.  For example, "Temperature, Pressure, 0-1" specifies that the subproperties "Temperature" and "Pressure" as well as elements 0 and 1 be written as fields to the stream. For convenience, you may specify an empty string to specify all elements be written in order.  That is, an empty string is equivalent to "0-". The default value is an empty string.
  //      
  //
  // ExecutionOutputRecordStream_WriteRecordResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc WriteRecord(ExecutionOutputRecordStream_WriteRecordRequest) returns (ExecutionOutputRecordStream_WriteRecordResponse);
  
  
  // Method: WriteRecordFrom
  //
  // Write a record to the ExecutionOutputRecordStream.
  //
  // ExecutionOutputRecordStream.WriteRecordFrom() invokes OutputRecordStream.WriteRecordFrom() on each OutputRecordStream it contains, using the specified parameters.  In addition, it updates the Report View with data from the new record.
  //
  // ExecutionOutputRecordStream_WriteRecordFromRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionOutputRecordStreamInstance - The id of the ExecutionOutputRecordStream object.
  //    - context: SequenceContextInstance - Specifies the SequenceContext against which to evaluate the lookup strings specified by the record parameter. 
  //    - record: repeated string - An array of lookup strings specifying the fields to write to the stream.  The lookup strings are evaluated relative to the SequenceContext specified by the context parameter.
  //
  // ExecutionOutputRecordStream_WriteRecordFromResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc WriteRecordFrom(ExecutionOutputRecordStream_WriteRecordFromRequest) returns (ExecutionOutputRecordStream_WriteRecordFromResponse);
  
  
  // Method: Flush
  //
  // Flush the OutputRecordStream objects contained in this ExecutionOutputRecordStream.
  //
  // ExecutionOutputRecordStream.Flush invokes OutputRecordStream.Flush on all of its contained OutputRecordStream objects.
  //
  // ExecutionOutputRecordStream_FlushRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionOutputRecordStreamInstance - The id of the ExecutionOutputRecordStream object.
  //
  // ExecutionOutputRecordStream_FlushResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Flush(ExecutionOutputRecordStream_FlushRequest) returns (ExecutionOutputRecordStream_FlushResponse);
  
  
  // Method: Close
  //
  // Close the OutputRecordStream objects contained in this ExecutionOutputRecordStream.
  //
  // ExecutionOutputRecordStream.Close invokes OutputRecordStream.Close on all of the OutputRecordStream objects contained by this ExecutionOutputRecordStream.
  //
  // ExecutionOutputRecordStream_CloseRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionOutputRecordStreamInstance - The id of the ExecutionOutputRecordStream object.
  //
  // ExecutionOutputRecordStream_CloseResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Close(ExecutionOutputRecordStream_CloseRequest) returns (ExecutionOutputRecordStream_CloseResponse);
  
  
  // Method: SetActiveReport
  //
  // Make this ExecutionOutputRecordStream the active (displayed) report in the Report View.
  //
  // SetActiveReport can conflict with the settings for the active report in TestStand process models.  National Instruments recommends against calling SetActiveReport from process model callbacks.
  //
  // ExecutionOutputRecordStream_SetActiveReportRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionOutputRecordStreamInstance - The id of the ExecutionOutputRecordStream object.
  //
  // ExecutionOutputRecordStream_SetActiveReportResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetActiveReport(ExecutionOutputRecordStream_SetActiveReportRequest) returns (ExecutionOutputRecordStream_SetActiveReportResponse);
  
  
  // Method: ClearRecordsFromReportView
  //
  // Clear records for this ExecutionOutputRecordStream from the Report View.
  //
  // ExecutionOutputRecordStream_ClearRecordsFromReportViewRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionOutputRecordStreamInstance - The id of the ExecutionOutputRecordStream object.
  //
  // ExecutionOutputRecordStream_ClearRecordsFromReportViewResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ClearRecordsFromReportView(ExecutionOutputRecordStream_ClearRecordsFromReportViewRequest) returns (ExecutionOutputRecordStream_ClearRecordsFromReportViewResponse);
  
  

  // Property: Name
  //
  // Get the name of this ExecutionOutputRecordStream.
  //
  // You can specify an ExecutionOutputRecordStream by name in the Write Record step type.  You can also retrieve an ExecutionOutputRecordStream from the current execution by name by calling ExecutionOutputRecordStreams.GetStream().
  //
  // ExecutionOutputRecordStream_Get_NameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionOutputRecordStreamInstance - The id of the ExecutionOutputRecordStream object.
  //
  // ExecutionOutputRecordStream_Get_NameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Get the name of this ExecutionOutputRecordStream. 
  //
  rpc Get_Name(ExecutionOutputRecordStream_Get_NameRequest) returns (ExecutionOutputRecordStream_Get_NameResponse);
  
  
  // Property: NumRecordsToDisplayInReportView
  //
  // Get or set the number of records to display in the Report View.
  //
  // A value greater than 0 specifies the upper limit to the number of records to display in the Report View. Once this limit is reached, each new record written to the Report View causes the oldest record to be removed. Specify a value greater than 0 to display recently written records while bounding the memory used by the Report View.
  // 
  // A value of 0 disables updates to the Report View. Specify 0 for maximum performance when you do not need to view records in the Report View.
  // 
  // A value of -1 specifies no limit to the number of records displayed in the Report View. Specify -1 when you are not concerned about memory use and wish to review all records written to the Report View.
  // 
  // Note: Specifying -1 allows an unlimited amount of data to be written to the Report View. With this setting, writing too many records will cause TestStand to run out of memory.
  //
  // ExecutionOutputRecordStream_Set_NumRecordsToDisplayInReportViewRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionOutputRecordStreamInstance - The id of the ExecutionOutputRecordStream object.
  //    - val: int32 - Get or set the number of records to display in the Report View. 
  //
  // ExecutionOutputRecordStream_Set_NumRecordsToDisplayInReportViewResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExecutionOutputRecordStream_Get_NumRecordsToDisplayInReportViewRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionOutputRecordStreamInstance - The id of the ExecutionOutputRecordStream object.
  //
  // ExecutionOutputRecordStream_Get_NumRecordsToDisplayInReportViewResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Get or set the number of records to display in the Report View. 
  //
  rpc Set_NumRecordsToDisplayInReportView(ExecutionOutputRecordStream_Set_NumRecordsToDisplayInReportViewRequest) returns (ExecutionOutputRecordStream_Set_NumRecordsToDisplayInReportViewResponse);
  rpc Get_NumRecordsToDisplayInReportView(ExecutionOutputRecordStream_Get_NumRecordsToDisplayInReportViewRequest) returns (ExecutionOutputRecordStream_Get_NumRecordsToDisplayInReportViewResponse);
  
  
  // Property: CloseAtNextUUTOrBatch
  //
  // Indicate to the process model if it should clean up this ExecutionOutputRecordStream before starting the next UUT or batch.
  //
  // CloseAtNextUUTOrBatch indicates whether ExecutionOutputRecordStreams.BeginNextUUTOrBatch should close and remove this ExecutionOutputRecordStream.
  // 
  // Note: Modifying this property has no direct effect on the behavior of the ExecutionOutputRecordStream. It is simply a flag that can be set or tested. The behavior described here relies on the process model calling ExecutionOutputRecordStreams.BeginNextUUTOrBatch on the ExecutionOutputRecordStreams collection associated with an execution at the appropriate time. Factory models shipped with TestStand support this behavior. Custom process models may or may not support this behavior.
  //
  // ExecutionOutputRecordStream_Set_CloseAtNextUUTOrBatchRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionOutputRecordStreamInstance - The id of the ExecutionOutputRecordStream object.
  //    - val: bool - Indicate to the process model if it should clean up this ExecutionOutputRecordStream before starting the next UUT or batch. 
  //
  // ExecutionOutputRecordStream_Set_CloseAtNextUUTOrBatchResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExecutionOutputRecordStream_Get_CloseAtNextUUTOrBatchRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionOutputRecordStreamInstance - The id of the ExecutionOutputRecordStream object.
  //
  // ExecutionOutputRecordStream_Get_CloseAtNextUUTOrBatchResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Indicate to the process model if it should clean up this ExecutionOutputRecordStream before starting the next UUT or batch. 
  //
  rpc Set_CloseAtNextUUTOrBatch(ExecutionOutputRecordStream_Set_CloseAtNextUUTOrBatchRequest) returns (ExecutionOutputRecordStream_Set_CloseAtNextUUTOrBatchResponse);
  rpc Get_CloseAtNextUUTOrBatch(ExecutionOutputRecordStream_Get_CloseAtNextUUTOrBatchRequest) returns (ExecutionOutputRecordStream_Get_CloseAtNextUUTOrBatchResponse);
  
  
  // Property: Format
  //
  // Sets or retrieves the display format in the Report View.
  //
  // Allowed values are:
  // * "txt"–(default) Plain ASCII text format    * "html"–HTML format that displays CSV data as a table.
  //
  // ExecutionOutputRecordStream_Set_FormatRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionOutputRecordStreamInstance - The id of the ExecutionOutputRecordStream object.
  //    - val: string - Sets or retrieves the display format in the Report View. 
  //
  // ExecutionOutputRecordStream_Set_FormatResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExecutionOutputRecordStream_Get_FormatRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionOutputRecordStreamInstance - The id of the ExecutionOutputRecordStream object.
  //
  // ExecutionOutputRecordStream_Get_FormatResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Sets or retrieves the display format in the Report View. 
  //
  rpc Set_Format(ExecutionOutputRecordStream_Set_FormatRequest) returns (ExecutionOutputRecordStream_Set_FormatResponse);
  rpc Get_Format(ExecutionOutputRecordStream_Get_FormatRequest) returns (ExecutionOutputRecordStream_Get_FormatResponse);
  
  
}
message OutputRecordStreamInstance {
  // Specifies the handle of the OutputRecordStream instance in the server.
  string id = 1;
}
message ExecutionOutputRecordStream_InsertRequest {
  // The id of the ExecutionOutputRecordStream object.
  ExecutionOutputRecordStreamInstance instance = 1;
  // A non-null reference to an OutputRecordStream to add to this ExecutionOutputRecordStream.
  OutputRecordStreamInstance stream = 2;
}

message ExecutionOutputRecordStream_InsertResponse {
}

message ExecutionOutputRecordStream_RemoveRequest {
  // The id of the ExecutionOutputRecordStream object.
  ExecutionOutputRecordStreamInstance instance = 1;
  // A non-null reference to an OutputRecordStream to remove from this ExecutionOutputRecordStream.
  OutputRecordStreamInstance stream = 2;
}

message ExecutionOutputRecordStream_RemoveResponse {
}

message ExecutionOutputRecordStream_RemoveAllStreamsRequest {
  // The id of the ExecutionOutputRecordStream object.
  ExecutionOutputRecordStreamInstance instance = 1;
}

message ExecutionOutputRecordStream_RemoveAllStreamsResponse {
}

message ExecutionOutputRecordStream_DefineFieldsRequest {
  // The id of the ExecutionOutputRecordStream object.
  ExecutionOutputRecordStreamInstance instance = 1;
  // A container or array defining the field names. If the fields parameter is a container, the container is the record, and each subproperty is a field.  The names of the subproperties are the field names.  If the record parameter is an array, the entire array is the record, and each array element is a field.  The values of the array elements coerced to strings are the field names.
  PropertyObjectInstance fieldDefinitions = 2;
  // Specifies the mapping from elements (either subproperties or array elements) in the fields parameter to fields in the stream.
  // 
  // The mapping is a comma-separated list of index ranges.  For example, "0, 3-5, 8-7" specifies that elements 0, 3, 4, 5, 8, and 7 specify the field names.  The final range in the list may be open-ended.  For example, "2, 3-" indicates that elements 2, 3, and all elements beyond 3 specify the field names. For convenience, you may specify an empty string to specify all elements be used in order. That is, an empty string is equivalent to "0-". The default value is an empty string.
  // 
  string mapping = 3;
}

message ExecutionOutputRecordStream_DefineFieldsResponse {
}

message ExecutionOutputRecordStream_WriteRecordRequest {
  // The id of the ExecutionOutputRecordStream object.
  ExecutionOutputRecordStreamInstance instance = 1;
  // The record to write.  The record parameter may be either a container or an array. If the record parameter is a container, the container represents the record, and each subproperty is a field.  If the record parameter is an array, the entire array represents the record, and each array element is a field.
  // 
  PropertyObjectInstance record = 2;
  // Specifies the mapping from elements (either subproperties or array elements) in the record parameter to fields in the stream. The mapping is a comma-separated list of index ranges.  For example, "0, 3-5, 8-7" specifies that elements 0, 3, 4, 5, 8, and 7 be written as the fields to the stream.  The final range in the list may be open-ended.  For example, "2, 3-" indicates that elements 2, 3, and all elements beyond 3 be written to the stream. If the record parameter is a container, the range list may include individual subproperty names.  For example, "Temperature, Pressure, 0-1" specifies that the subproperties "Temperature" and "Pressure" as well as elements 0 and 1 be written as fields to the stream. For convenience, you may specify an empty string to specify all elements be written in order.  That is, an empty string is equivalent to "0-". The default value is an empty string.
  // 
  string mapping = 3;
}

message ExecutionOutputRecordStream_WriteRecordResponse {
}

message ExecutionOutputRecordStream_WriteRecordFromRequest {
  // The id of the ExecutionOutputRecordStream object.
  ExecutionOutputRecordStreamInstance instance = 1;
  // Specifies the SequenceContext against which to evaluate the lookup strings specified by the record parameter.
  SequenceContextInstance context = 2;
  // An array of lookup strings specifying the fields to write to the stream.  The lookup strings are evaluated relative to the SequenceContext specified by the context parameter.
  repeated string record = 3;
}

message ExecutionOutputRecordStream_WriteRecordFromResponse {
}

message ExecutionOutputRecordStream_FlushRequest {
  // The id of the ExecutionOutputRecordStream object.
  ExecutionOutputRecordStreamInstance instance = 1;
}

message ExecutionOutputRecordStream_FlushResponse {
}

message ExecutionOutputRecordStream_CloseRequest {
  // The id of the ExecutionOutputRecordStream object.
  ExecutionOutputRecordStreamInstance instance = 1;
}

message ExecutionOutputRecordStream_CloseResponse {
}

message ExecutionOutputRecordStream_SetActiveReportRequest {
  // The id of the ExecutionOutputRecordStream object.
  ExecutionOutputRecordStreamInstance instance = 1;
}

message ExecutionOutputRecordStream_SetActiveReportResponse {
}

message ExecutionOutputRecordStream_ClearRecordsFromReportViewRequest {
  // The id of the ExecutionOutputRecordStream object.
  ExecutionOutputRecordStreamInstance instance = 1;
}

message ExecutionOutputRecordStream_ClearRecordsFromReportViewResponse {
}

message ExecutionOutputRecordStream_Get_NameRequest {
  // The id of the ExecutionOutputRecordStream object.
  ExecutionOutputRecordStreamInstance instance = 1;
}

message ExecutionOutputRecordStream_Get_NameResponse {
  // The name of this ExecutionOutputRecordStream.
  string returnValue = 1;
}

message ExecutionOutputRecordStream_Set_NumRecordsToDisplayInReportViewRequest {
  // The id of the ExecutionOutputRecordStream object.
  ExecutionOutputRecordStreamInstance instance = 1;
  // Get or set the number of records to display in the Report View.
  int32 val = 2;
}

message ExecutionOutputRecordStream_Set_NumRecordsToDisplayInReportViewResponse {
}

message ExecutionOutputRecordStream_Get_NumRecordsToDisplayInReportViewRequest {
  // The id of the ExecutionOutputRecordStream object.
  ExecutionOutputRecordStreamInstance instance = 1;
}

message ExecutionOutputRecordStream_Get_NumRecordsToDisplayInReportViewResponse {
  // The number of records to display in the Report View.
  int32 returnValue = 1;
}

message ExecutionOutputRecordStream_Set_CloseAtNextUUTOrBatchRequest {
  // The id of the ExecutionOutputRecordStream object.
  ExecutionOutputRecordStreamInstance instance = 1;
  // Indicate to the process model if it should clean up this ExecutionOutputRecordStream before starting the next UUT or batch.
  bool val = 2;
}

message ExecutionOutputRecordStream_Set_CloseAtNextUUTOrBatchResponse {
}

message ExecutionOutputRecordStream_Get_CloseAtNextUUTOrBatchRequest {
  // The id of the ExecutionOutputRecordStream object.
  ExecutionOutputRecordStreamInstance instance = 1;
}

message ExecutionOutputRecordStream_Get_CloseAtNextUUTOrBatchResponse {
  // True if the process model should close this ExecutionOutputRecordStream and remove it from the execution before beginning the next UUT (for test sockets) or batch (for the controller socket in the batch model). False if the process model should not clean up this ExecutionOutputRecordStream.
  bool returnValue = 1;
}

message ExecutionOutputRecordStream_Set_FormatRequest {
  // The id of the ExecutionOutputRecordStream object.
  ExecutionOutputRecordStreamInstance instance = 1;
  // Sets or retrieves the display format in the Report View.
  string val = 2;
}

message ExecutionOutputRecordStream_Set_FormatResponse {
}

message ExecutionOutputRecordStream_Get_FormatRequest {
  // The id of the ExecutionOutputRecordStream object.
  ExecutionOutputRecordStreamInstance instance = 1;
}

message ExecutionOutputRecordStream_Get_FormatResponse {
  // Sets or retrieves the display format in the Report View.
  string returnValue = 1;
}

// OutputRecordStream
//
// 
//
service OutputRecordStream {
  // Method: WriteRecord
  //
  // Write a record to the stream.
  //
  // OutputRecordStream_WriteRecordRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: OutputRecordStreamInstance - The id of the OutputRecordStream object.
  //    - record: PropertyObjectInstance - The record to write.  The record parameter may either be a container or an array. If the record parameter is a container, the container represents the record, and each subproperty is a field.  If the record parameter is an array, the entire array represents the record, and each array element is a field.
  //      
  //    - mapping: string - Specifies the mapping from elements (either subproperties or array elements) in the record parameter to fields in the stream.  The mapping is a comma-separated list of index ranges.  For example, "0, 3-5, 8-7" specifies that elements 0, 3, 4, 5, 8, and 7 be written as the fields to the stream.  The final range in the list may be open-ended.  For example, "2, 3-" indicates that elements 2, 3, and all elements beyond 3 be written to the stream.  If the record parameter is a container, the range list may include individual subproperty names.  For example, "Temperature, Pressure, 0-1" specifies that the subproperties "Temperature" and "Pressure", then elements 0 and 1 be written as fields to the stream.  For convenience, you may specify an empty string to specify all elements be written in order.  That is, an empty string is equivalent to "0-".  The default value of the mapping parameter is an empty string.
  //
  // OutputRecordStream_WriteRecordResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc WriteRecord(OutputRecordStream_WriteRecordRequest) returns (OutputRecordStream_WriteRecordResponse);
  
  
  // Method: WriteRecordFrom
  //
  // Write a record to the stream.
  //
  // OutputRecordStream_WriteRecordFromRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: OutputRecordStreamInstance - The id of the OutputRecordStream object.
  //    - context: SequenceContextInstance - Specifies the SequenceContext against which to evaluate the lookup strings specified by the record parameter. 
  //    - record: repeated string - An array of lookup strings specifying the fields to write to the stream.  The lookup strings are evaluated relative to the SequenceContext specified by the context parameter.
  //
  // OutputRecordStream_WriteRecordFromResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc WriteRecordFrom(OutputRecordStream_WriteRecordFromRequest) returns (OutputRecordStream_WriteRecordFromResponse);
  
  
  // Method: Flush
  //
  // Write any buffered data to the underlying device.
  //
  // The exact behavior of OutputRecordStream.Flush depends on the implementation details of the class that implements the OutputRecordStream interface.  For example, OutputRecordStream.Flush may do nothing for streams with no buffering.
  //
  // OutputRecordStream_FlushRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: OutputRecordStreamInstance - The id of the OutputRecordStream object.
  //
  // OutputRecordStream_FlushResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Flush(OutputRecordStream_FlushRequest) returns (OutputRecordStream_FlushResponse);
  
  
  // Method: Close
  //
  // Flush any remaining buffered data to the underlying device, and close this stream.
  //
  // The exact behavior of Close depends on the implementation details of the class that implements the OutputRecordStream interface.  National Instruments recommends all implementations explicitly call OutputRecordStream.Flush to clear buffered data, regardless of whether there is actually any buffered data, to ensure the implementation is future-proof.
  // 
  //
  // OutputRecordStream_CloseRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: OutputRecordStreamInstance - The id of the OutputRecordStream object.
  //
  // OutputRecordStream_CloseResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Close(OutputRecordStream_CloseRequest) returns (OutputRecordStream_CloseResponse);
  
  
  // Method: GetStreamInfo
  //
  // Get descriptive information about this stream useful for displaying to the user.
  //
  // OutputRecordStream_GetStreamInfoRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: OutputRecordStreamInstance - The id of the OutputRecordStream object.
  //
  // OutputRecordStream_GetStreamInfoResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: string - string - A string describing the location of the underlying stream.  The exact details are up to the implementation.  For file streams, this could be the absolute path of the underlying file.  For other types of streams, it could be an appropriate Uniform Resource Identifier (URI).  
  //    - streamDescription: strin - Outputs an implementation dependent stream description.
  //
  rpc GetStreamInfo(OutputRecordStream_GetStreamInfoRequest) returns (OutputRecordStream_GetStreamInfoResponse);
  
  
}
message OutputRecordStream_WriteRecordRequest {
  // The id of the OutputRecordStream object.
  OutputRecordStreamInstance instance = 1;
  // The record to write.  The record parameter may either be a container or an array. If the record parameter is a container, the container represents the record, and each subproperty is a field.  If the record parameter is an array, the entire array represents the record, and each array element is a field.
  // 
  PropertyObjectInstance record = 2;
  // Specifies the mapping from elements (either subproperties or array elements) in the record parameter to fields in the stream.  The mapping is a comma-separated list of index ranges.  For example, "0, 3-5, 8-7" specifies that elements 0, 3, 4, 5, 8, and 7 be written as the fields to the stream.  The final range in the list may be open-ended.  For example, "2, 3-" indicates that elements 2, 3, and all elements beyond 3 be written to the stream.  If the record parameter is a container, the range list may include individual subproperty names.  For example, "Temperature, Pressure, 0-1" specifies that the subproperties "Temperature" and "Pressure", then elements 0 and 1 be written as fields to the stream.  For convenience, you may specify an empty string to specify all elements be written in order.  That is, an empty string is equivalent to "0-".  The default value of the mapping parameter is an empty string.
  string mapping = 3;
}

message OutputRecordStream_WriteRecordResponse {
}

message OutputRecordStream_WriteRecordFromRequest {
  // The id of the OutputRecordStream object.
  OutputRecordStreamInstance instance = 1;
  // Specifies the SequenceContext against which to evaluate the lookup strings specified by the record parameter.
  SequenceContextInstance context = 2;
  // An array of lookup strings specifying the fields to write to the stream.  The lookup strings are evaluated relative to the SequenceContext specified by the context parameter.
  repeated string record = 3;
}

message OutputRecordStream_WriteRecordFromResponse {
}

message OutputRecordStream_FlushRequest {
  // The id of the OutputRecordStream object.
  OutputRecordStreamInstance instance = 1;
}

message OutputRecordStream_FlushResponse {
}

message OutputRecordStream_CloseRequest {
  // The id of the OutputRecordStream object.
  OutputRecordStreamInstance instance = 1;
}

message OutputRecordStream_CloseResponse {
}

message OutputRecordStream_GetStreamInfoRequest {
  // The id of the OutputRecordStream object.
  OutputRecordStreamInstance instance = 1;
}

message OutputRecordStream_GetStreamInfoResponse {
  // string - A string describing the location of the underlying stream.  The exact details are up to the implementation.  For file streams, this could be the absolute path of the underlying file.  For other types of streams, it could be an appropriate Uniform Resource Identifier (URI).
  // 
  string returnValue = 1;
  // Outputs an implementation dependent stream description.
  string streamDescription = 2;
}

// StepAdditionalResults
//
// Use the Step.AdditionalResults property to obtain an instance of this class, which contains collections for the parameter additional results and custom additional results of a step.
//
service StepAdditionalResults {
  // Property: ParameterResults
  //
  // Returns the parameter results for a step. You cannot directly add or remove additional results in this collection. The parameters in the step module determine the items in this collection.
  //
  // This collection contains an item for every [In] parameter and for every [Out] parameter. For every [In/Out] parameter, this collection contains one item for the [In] value and another item for the [Out] value.
  //
  // StepAdditionalResults_Get_ParameterResultsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepAdditionalResultsInstance - The id of the StepAdditionalResults object.
  //
  // StepAdditionalResults_Get_ParameterResultsResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdditionalResultsInstance - Returns the parameter results for a step. You cannot directly add or remove additional results in this collection. The parameters in the step module determine the items in this collection. 
  //
  rpc Get_ParameterResults(StepAdditionalResults_Get_ParameterResultsRequest) returns (StepAdditionalResults_Get_ParameterResultsResponse);
  
  
  // Property: CustomResults
  //
  // Returns the custom additional results for a step.
  //
  // StepAdditionalResults_Get_CustomResultsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepAdditionalResultsInstance - The id of the StepAdditionalResults object.
  //
  // StepAdditionalResults_Get_CustomResultsResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdditionalResultsInstance - Returns the custom additional results for a step. 
  //
  rpc Get_CustomResults(StepAdditionalResults_Get_CustomResultsRequest) returns (StepAdditionalResults_Get_CustomResultsResponse);
  
  
}
message StepAdditionalResults_Get_ParameterResultsRequest {
  // The id of the StepAdditionalResults object.
  StepAdditionalResultsInstance instance = 1;
}

message StepAdditionalResults_Get_ParameterResultsResponse {
  // Returns the parameter results for a step. You cannot directly add or remove additional results in this collection. The parameters in the step module determine the items in this collection.
  AdditionalResultsInstance returnValue = 1;
}

message StepAdditionalResults_Get_CustomResultsRequest {
  // The id of the StepAdditionalResults object.
  StepAdditionalResultsInstance instance = 1;
}

message StepAdditionalResults_Get_CustomResultsResponse {
  // Returns the custom additional results for a step.
  AdditionalResultsInstance returnValue = 1;
}

// EditArgs
//
// Use objects of the EditArgs class to pass information about the current state of the user interface to methods such as Engine.NewExecution, Sequence.EvalEntryPointNameExpressionEx, Engine.GetEditTimeToolMenuItems, and Engine.GetRunTimeToolMenuItems. Objects of this class contain information about currently selected sequences, steps, sequence files, and executions. This selection information appears in the RunState.InitialSelection property of the sequence context.
// Create objects of this class using the Engine.NewEditArgs method. Typically, you use this class only when you are writing a user interface or sequence editor.
//
service EditArgs {
  // Method: SetSelectedSequenceFile
  //
  // Use this property to set the currently active sequence file as the selected sequence file.
  //
  // Stores the selected sequence file so you can use it in the sequence context.
  //
  // EditArgs_SetSelectedSequenceFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditArgsInstance - The id of the EditArgs object.
  //
  // EditArgs_SetSelectedSequenceFileResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetSelectedSequenceFile(EditArgs_SetSelectedSequenceFileRequest) returns (EditArgs_SetSelectedSequenceFileResponse);
  
  
  // Method: AddSelectedSequence
  //
  // Adds a sequence to the list of currently selected sequences.
  //
  // Stores the selected sequence so you can use it in the sequence context.
  //
  // EditArgs_AddSelectedSequenceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditArgsInstance - The id of the EditArgs object.
  //
  // EditArgs_AddSelectedSequenceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc AddSelectedSequence(EditArgs_AddSelectedSequenceRequest) returns (EditArgs_AddSelectedSequenceResponse);
  
  
  // Method: AddSelectedStep
  //
  // Adds a step to the list of currently selected steps.
  //
  // Stores the selected step so you can use it in the sequence context.
  //
  // EditArgs_AddSelectedStepRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditArgsInstance - The id of the EditArgs object.
  //
  // EditArgs_AddSelectedStepResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc AddSelectedStep(EditArgs_AddSelectedStepRequest) returns (EditArgs_AddSelectedStepResponse);
  
  
  // Method: ClearSelectedSequences
  //
  // Clears the list of currently selected sequences.
  //
  // EditArgs_ClearSelectedSequencesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditArgsInstance - The id of the EditArgs object.
  //
  // EditArgs_ClearSelectedSequencesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ClearSelectedSequences(EditArgs_ClearSelectedSequencesRequest) returns (EditArgs_ClearSelectedSequencesResponse);
  
  
  // Method: ClearSelectedSteps
  //
  // Clears the list of currently selected steps.
  //
  // EditArgs_ClearSelectedStepsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditArgsInstance - The id of the EditArgs object.
  //
  // EditArgs_ClearSelectedStepsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ClearSelectedSteps(EditArgs_ClearSelectedStepsRequest) returns (EditArgs_ClearSelectedStepsResponse);
  
  
  // Method: SetSelectedExecution
  //
  // Use this property to set the currently active execution as the selected execution.
  //
  // Stores the selected execution so you can use it in the sequence context.
  //
  // EditArgs_SetSelectedExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditArgsInstance - The id of the EditArgs object.
  //
  // EditArgs_SetSelectedExecutionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetSelectedExecution(EditArgs_SetSelectedExecutionRequest) returns (EditArgs_SetSelectedExecutionResponse);
  
  
  // Method: SetSelectedStepGroup
  //
  // Use this property to set the currently active step group as the selected step group.
  //
  // Stores the selected step group so you can use it in the sequence context.
  //
  // EditArgs_SetSelectedStepGroupRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EditArgsInstance - The id of the EditArgs object.
  //    - stepGroupParam: StepGroups - Specifies an active step group object.
  //
  // EditArgs_SetSelectedStepGroupResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetSelectedStepGroup(EditArgs_SetSelectedStepGroupRequest) returns (EditArgs_SetSelectedStepGroupResponse);
  
  
  // Method: SetSelectedPropertyObjectFile
  //
  // Use this property to set the currently active property object file as the selected property object file.
  //
  // Stores the selected property object file so you can use it in the sequence context.
  //
  // EditArgs_SetSelectedPropertyObjectFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EditArgsInstance - The id of the EditArgs object.
  //    - propertyFile: PropertyObjectFileInstance - Specifies the selected PropertyObjectFile object.
  //
  // EditArgs_SetSelectedPropertyObjectFileResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetSelectedPropertyObjectFile(EditArgs_SetSelectedPropertyObjectFileRequest) returns (EditArgs_SetSelectedPropertyObjectFileResponse);
  
  
  // Method: AsPropertyObject
  //
  // Returns the underlying PropertyObject that represents the EditArgs object.
  //
  // Use the PropertyObject class to modify, add, or remove the custom properties of the object.
  // Do not use this method to remove or modify the dynamic properties TestStand already provides for EditArgs objects. Instead, use any of the other methods of the EditArgs class to remove or modify the dynamic properties.
  //
  // EditArgs_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditArgsInstance - The id of the EditArgs object.
  //
  // EditArgs_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(EditArgs_AsPropertyObjectRequest) returns (EditArgs_AsPropertyObjectResponse);
  
  
  // Method: AddSelectedPropertyObject
  //
  // Adds a PropertyObject to the list of currently selected property objects.
  //
  // Stores the selected PropertyObject so you can use it in the sequence context.
  //
  // EditArgs_AddSelectedPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EditArgsInstance - The id of the EditArgs object.
  //    - propertyToAdd: PropertyObjectInstance - Specifies the PropertyObject being added to the list.
  //
  // EditArgs_AddSelectedPropertyObjectResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc AddSelectedPropertyObject(EditArgs_AddSelectedPropertyObjectRequest) returns (EditArgs_AddSelectedPropertyObjectResponse);
  
  
  // Method: ClearSelectedPropertyObjects
  //
  // Clears the list of currently selected property objects.
  //
  // EditArgs_ClearSelectedPropertyObjectsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditArgsInstance - The id of the EditArgs object.
  //
  // EditArgs_ClearSelectedPropertyObjectsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ClearSelectedPropertyObjects(EditArgs_ClearSelectedPropertyObjectsRequest) returns (EditArgs_ClearSelectedPropertyObjectsResponse);
  
  
}
message EditArgs_SetSelectedSequenceFileRequest {
  // The id of the EditArgs object.
  EditArgsInstance instance = 1;
  // Specifies the active SequenceFile object.
  SequenceFileInstance SequenceFile = 2;
}

message EditArgs_SetSelectedSequenceFileResponse {
}

message EditArgs_AddSelectedSequenceRequest {
  // The id of the EditArgs object.
  EditArgsInstance instance = 1;
  // Specifies the sequence object being added to the list.
  SequenceInstance Sequence = 2;
}

message EditArgs_AddSelectedSequenceResponse {
}

message EditArgs_AddSelectedStepRequest {
  // The id of the EditArgs object.
  EditArgsInstance instance = 1;
  // Specifies the step object being added to the list.
  StepInstance Step = 2;
}

message EditArgs_AddSelectedStepResponse {
}

message EditArgs_ClearSelectedSequencesRequest {
  // The id of the EditArgs object.
  EditArgsInstance instance = 1;
}

message EditArgs_ClearSelectedSequencesResponse {
}

message EditArgs_ClearSelectedStepsRequest {
  // The id of the EditArgs object.
  EditArgsInstance instance = 1;
}

message EditArgs_ClearSelectedStepsResponse {
}

message EditArgs_SetSelectedExecutionRequest {
  // The id of the EditArgs object.
  EditArgsInstance instance = 1;
  // Specifies the selected Execution object.
  ExecutionInstance Execution = 2;
}

message EditArgs_SetSelectedExecutionResponse {
}

message EditArgs_SetSelectedStepGroupRequest {
  // The id of the EditArgs object.
  EditArgsInstance instance = 1;
  // Specifies an active step group object.
  StepGroups stepGroupParam = 2;
}

message EditArgs_SetSelectedStepGroupResponse {
}

message EditArgs_SetSelectedPropertyObjectFileRequest {
  // The id of the EditArgs object.
  EditArgsInstance instance = 1;
  // Specifies the selected PropertyObjectFile object.
  PropertyObjectFileInstance propertyFile = 2;
}

message EditArgs_SetSelectedPropertyObjectFileResponse {
}

message EditArgs_AsPropertyObjectRequest {
  // The id of the EditArgs object.
  EditArgsInstance instance = 1;
}

message EditArgs_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message EditArgs_AddSelectedPropertyObjectRequest {
  // The id of the EditArgs object.
  EditArgsInstance instance = 1;
  // Specifies the PropertyObject being added to the list.
  PropertyObjectInstance propertyToAdd = 2;
}

message EditArgs_AddSelectedPropertyObjectResponse {
}

message EditArgs_ClearSelectedPropertyObjectsRequest {
  // The id of the EditArgs object.
  EditArgsInstance instance = 1;
}

message EditArgs_ClearSelectedPropertyObjectsResponse {
}

// User
//
// Objects of the User class represent the data and privileges TestStand associates with a TestStand user or user group. Call the Engine.GetUser or Engine.NewUser method to obtain a User object for a particular user or user group. Obtain the object for the currently logged-in user from the Engine.CurrentUser property.
// You can obtain an array of users or user groups using the UsersFile.UserList and UsersFile.UserGroupList properties. Use the PropertyObject class methods to add or remove objects from the array to change the TestStand user or user group list.
// You can use the PropertyObject class to access the subproperties of an object from the User class. Refer to User Data Type Subproperties for the default subproperties TestStand defines.
//
service User {
  // Method: ValidatePassword
  //
  // Returns True if the string you specify matches the user password.
  //
  // User_ValidatePasswordRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: UserInstance - The id of the User object.
  //    - passwordString: string - Specifies the string to compare with the user password.
  //
  // User_ValidatePasswordResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc ValidatePassword(User_ValidatePasswordRequest) returns (User_ValidatePasswordResponse);
  
  
  // Method: HasPrivilege
  //
  // Returns True if the user or any user group of which the user is a member has the privilege you specify by name.
  //
  // User_HasPrivilegeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: UserInstance - The id of the User object.
  //    - privilegeName: string - Specifies the name of the privilege to check. You can specify the name of any privilege property. You can specify the full privilege path in the UserPrivileges property view, such as Debug.RunSelectedTests, or you can specify the base privilege name, such as RunSelectedTests. If you specify only the base privilege name and more than one instance of the base privilege name exists, the method returns the value of the first base privilege it finds with that name.
  //
  // User_HasPrivilegeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc HasPrivilege(User_HasPrivilegeRequest) returns (User_HasPrivilegeResponse);
  
  
  // Method: AsPropertyObject
  //
  // Returns the underlying PropertyObject that represents the User object. Use the PropertyObject to modify, add, or remove custom properties of the object.
  //
  // User_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UserInstance - The id of the User object.
  //
  // User_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(User_AsPropertyObjectRequest) returns (User_AsPropertyObjectResponse);
  
  

  // Property: LoginName
  //
  // Specifies the login name of the user.
  //
  // User_Set_LoginNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UserInstance - The id of the User object.
  //    - val: string - Specifies the login name of the user. 
  //
  // User_Set_LoginNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // User_Get_LoginNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UserInstance - The id of the User object.
  //
  // User_Get_LoginNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the login name of the user. 
  //
  rpc Set_LoginName(User_Set_LoginNameRequest) returns (User_Set_LoginNameResponse);
  rpc Get_LoginName(User_Get_LoginNameRequest) returns (User_Get_LoginNameResponse);
  
  
  // Property: Password
  //
  // Specifies the password for the user.
  //
  // When you set this property, TestStand scrambles the password before storing it internally. When you get this property, TestStand returns the scrambled password to you, to prevent users from programmatically accessing passwords without authorization.
  //
  // User_Set_PasswordRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UserInstance - The id of the User object.
  //    - val: string - Specifies the password for the user. 
  //
  // User_Set_PasswordResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // User_Get_PasswordRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UserInstance - The id of the User object.
  //
  // User_Get_PasswordResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the password for the user. 
  //
  rpc Set_Password(User_Set_PasswordRequest) returns (User_Set_PasswordResponse);
  rpc Get_Password(User_Get_PasswordRequest) returns (User_Get_PasswordResponse);
  
  
  // Property: FullName
  //
  // Specifies the full name of the user.
  //
  // User_Set_FullNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UserInstance - The id of the User object.
  //    - val: string - Specifies the full name of the user. 
  //
  // User_Set_FullNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // User_Get_FullNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UserInstance - The id of the User object.
  //
  // User_Get_FullNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the full name of the user. 
  //
  rpc Set_FullName(User_Set_FullNameRequest) returns (User_Set_FullNameResponse);
  rpc Get_FullName(User_Get_FullNameRequest) returns (User_Get_FullNameResponse);
  
  
  // Property: Privileges
  //
  // Returns the PropertyObject that contains the privilege settings for the user.
  //
  // Do not use this property to determine whether a user has certain privileges. Instead, use the User.HasPrivilege or Engine.CurrentUserHasPrivilege methods.
  //
  // User_Get_PrivilegesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UserInstance - The id of the User object.
  //
  // User_Get_PrivilegesResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Returns the PropertyObject that contains the privilege settings for the user. 
  //
  rpc Get_Privileges(User_Get_PrivilegesRequest) returns (User_Get_PrivilegesResponse);
  
  
  // Property: Members
  //
  // Returns the underlying PropertyObject that represents the list of user names that are members of the group. This property applies only to user groups.
  //
  // User_Get_MembersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UserInstance - The id of the User object.
  //
  // User_Get_MembersResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Returns the underlying PropertyObject that represents the list of user names that are members of the group. This property applies only to user groups. 
  //
  rpc Get_Members(User_Get_MembersRequest) returns (User_Get_MembersResponse);
  
  
}
message UserInstance {
  // Specifies the handle of the User instance in the server.
  string id = 1;
}
message User_ValidatePasswordRequest {
  // The id of the User object.
  UserInstance instance = 1;
  // Specifies the string to compare with the user password.
  string passwordString = 2;
}

message User_ValidatePasswordResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message User_HasPrivilegeRequest {
  // The id of the User object.
  UserInstance instance = 1;
  // Specifies the name of the privilege to check. You can specify the name of any privilege property. You can specify the full privilege path in the UserPrivileges property view, such as Debug.RunSelectedTests, or you can specify the base privilege name, such as RunSelectedTests. If you specify only the base privilege name and more than one instance of the base privilege name exists, the method returns the value of the first base privilege it finds with that name.
  string privilegeName = 2;
}

message User_HasPrivilegeResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message User_AsPropertyObjectRequest {
  // The id of the User object.
  UserInstance instance = 1;
}

message User_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message User_Set_LoginNameRequest {
  // The id of the User object.
  UserInstance instance = 1;
  // Specifies the login name of the user.
  string val = 2;
}

message User_Set_LoginNameResponse {
}

message User_Get_LoginNameRequest {
  // The id of the User object.
  UserInstance instance = 1;
}

message User_Get_LoginNameResponse {
  // Specifies the login name of the user.
  string returnValue = 1;
}

message User_Set_PasswordRequest {
  // The id of the User object.
  UserInstance instance = 1;
  // Specifies the password for the user.
  string val = 2;
}

message User_Set_PasswordResponse {
}

message User_Get_PasswordRequest {
  // The id of the User object.
  UserInstance instance = 1;
}

message User_Get_PasswordResponse {
  // Specifies the password for the user.
  string returnValue = 1;
}

message User_Set_FullNameRequest {
  // The id of the User object.
  UserInstance instance = 1;
  // Specifies the full name of the user.
  string val = 2;
}

message User_Set_FullNameResponse {
}

message User_Get_FullNameRequest {
  // The id of the User object.
  UserInstance instance = 1;
}

message User_Get_FullNameResponse {
  // Specifies the full name of the user.
  string returnValue = 1;
}

message User_Get_PrivilegesRequest {
  // The id of the User object.
  UserInstance instance = 1;
}

message User_Get_PrivilegesResponse {
  // Returns the PropertyObject that contains the privilege settings for the user.
  PropertyObjectInstance returnValue = 1;
}

message User_Get_MembersRequest {
  // The id of the User object.
  UserInstance instance = 1;
}

message User_Get_MembersResponse {
  // Returns the underlying PropertyObject that represents the list of user names that are members of the group. This property applies only to user groups.
  PropertyObjectInstance returnValue = 1;
}

// RExecutor
//
service RExecutor {
  // Method: LoadModule
  //
  rpc LoadModule(RExecutor_LoadModuleRequest) returns (RExecutor_LoadModuleResponse);
  
  
  // Method: Execute
  //
  rpc Execute(RExecutor_ExecuteRequest) returns (RExecutor_ExecuteResponse);
  
  
  // Method: UnloadModule
  //
  rpc UnloadModule(RExecutor_UnloadModuleRequest) returns (RExecutor_UnloadModuleResponse);
  
  
  // Method: AsPropertyObject
  //
  rpc AsPropertyObject(RExecutor_AsPropertyObjectRequest) returns (RExecutor_AsPropertyObjectResponse);
  
  
  // Method: LoadModuleEx
  //
  rpc LoadModuleEx(RExecutor_LoadModuleExRequest) returns (RExecutor_LoadModuleExResponse);
  
  

  // Property: ExecutorType
  //
  rpc Get_ExecutorType(RExecutor_Get_ExecutorTypeRequest) returns (RExecutor_Get_ExecutorTypeResponse);
  
  
}
message RExecutorInstance {
  // Specifies the handle of the RExecutor instance in the server.
  string id = 1;
}
message RExecutor_LoadModuleRequest {
  // The id of the RExecutor object.
  RExecutorInstance instance = 1;
  string modulePath = 2;
}

message RExecutor_LoadModuleResponse {
}

message RExecutor_ExecuteRequest {
  // The id of the RExecutor object.
  RExecutorInstance instance = 1;
  string modulePath = 2;
  string seqName = 3;
  bool trace = 4;
  repeated PropertyObjectInstance args = 5;
}

message RExecutor_ExecuteResponse {
  ExecutionInstance returnValue = 1;
}

message RExecutor_UnloadModuleRequest {
  // The id of the RExecutor object.
  RExecutorInstance instance = 1;
  string modulePath = 2;
}

message RExecutor_UnloadModuleResponse {
}

message RExecutor_AsPropertyObjectRequest {
  // The id of the RExecutor object.
  RExecutorInstance instance = 1;
}

message RExecutor_AsPropertyObjectResponse {
  PropertyObjectInstance returnValue = 1;
}

message RExecutor_LoadModuleExRequest {
  // The id of the RExecutor object.
  RExecutorInstance instance = 1;
  string modulePath = 2;
  int32 loadOptions = 3;
}

message RExecutor_LoadModuleExResponse {
}

message RExecutor_Get_ExecutorTypeRequest {
  // The id of the RExecutor object.
  RExecutorInstance instance = 1;
}

message RExecutor_Get_ExecutorTypeResponse {
  int32 returnValue = 1;
}

// UIMessage
//
// TestStand uses UIMessage objects to pass information about the state of the engine and the current executions to the user interface or sequence editor. You can obtain UIMessage objects in a user interface program by providing a callback to the engine. The engine calls the callback when it has a UIMessage object to pass. If you do not provide a callback, you can set the Engine.UIMessagePollingEnabled property to True and call the Engine.GetUIMessage method to poll for UIMessage objects.
//
service UIMessage {
  // Method: AsPropertyObject
  //
  // Returns the underlying PropertyObject that represents the UIMessage object. Use the PropertyObject to modify, add, or remove custom properties of the object.
  //
  // UIMessage_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UIMessageInstance - The id of the UIMessage object.
  //
  // UIMessage_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(UIMessage_AsPropertyObjectRequest) returns (UIMessage_AsPropertyObjectResponse);
  
  
  // Method: Acknowledge
  //
  // If you are not using the TestStand manager controls in a custom user interface, call this method on each UIMessage you receive after you finish using the message. The TestStand manager controls automatically call this method. If the user interface message is synchronous, this method unblocks the thread that posts the message. This method also indicates to the engine that you are ready to receive further messages.
  //
  // UIMessage_AcknowledgeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UIMessageInstance - The id of the UIMessage object.
  //
  // UIMessage_AcknowledgeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Acknowledge(UIMessage_AcknowledgeRequest) returns (UIMessage_AcknowledgeResponse);
  
  

  // Property: Event
  //
  // Returns the event code that describes the type of UIMessage. The eventCode parameter of the Thread.PostUIMessageEx method that posted the user interface message specifies the value this method returns.
  //
  // UIMessage_Get_EventRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UIMessageInstance - The id of the UIMessage object.
  //
  // UIMessage_Get_EventResponse - The response message from the server. It provides the return value.
  //    - returnValue: UIMessageCodes - Returns the event code that describes the type of UIMessage. The eventCode parameter of the Thread.PostUIMessageEx method that posted the user interface message specifies the value this method returns. 
  //
  rpc Get_Event(UIMessage_Get_EventRequest) returns (UIMessage_Get_EventResponse);
  
  
  // Property: IsSynchronous
  //
  // Returns True if the thread that posted the event is blocked and is waiting for you to acknowledge the UIMessage.
  //
  // Threads can post UIMessages synchronously or asynchronously. If a thread posts a user interface message synchronously, the thread blocks until the message is acknowledged or the last reference to the user interface message is released. If a thread posts a user interface message asynchronously, the thread returns False.
  //
  // UIMessage_Get_IsSynchronousRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UIMessageInstance - The id of the UIMessage object.
  //
  // UIMessage_Get_IsSynchronousResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the thread that posted the event is blocked and is waiting for you to acknowledge the UIMessage. 
  //
  rpc Get_IsSynchronous(UIMessage_Get_IsSynchronousRequest) returns (UIMessage_Get_IsSynchronousResponse);
  
  
  // Property: Execution
  //
  // Returns a reference to the execution to which the event applies.
  //
  // Release the execution reference when you are done using it. If the event is not associated with an execution, this property returns a NULL reference.
  //
  // UIMessage_Get_ExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UIMessageInstance - The id of the UIMessage object.
  //
  // UIMessage_Get_ExecutionResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionInstance - Returns a reference to the execution to which the event applies. 
  //
  rpc Get_Execution(UIMessage_Get_ExecutionRequest) returns (UIMessage_Get_ExecutionResponse);
  
  
  // Property: Thread
  //
  // Returns a reference to the thread to which the event applies.
  //
  // Release the thread reference when you are done using it. If the event is not associated with a thread, this property returns a NULL reference.
  //
  // UIMessage_Get_ThreadRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UIMessageInstance - The id of the UIMessage object.
  //
  // UIMessage_Get_ThreadResponse - The response message from the server. It provides the return value.
  //    - returnValue: ThreadInstance - Returns a reference to the thread to which the event applies. 
  //
  rpc Get_Thread(UIMessage_Get_ThreadRequest) returns (UIMessage_Get_ThreadResponse);
  
  
  // Property: NumericData
  //
  // Returns the numeric value passed to the numericDataParam parameter of the Thread.PostUIMessageEx method that posted the UIMessage.
  //
  // An example of a user interface message event that uses numericDataParam is the UIMsg_ProgressPercent event. If you define custom user interface message events, you can pass numeric data to the Thread.PostUIMessageEx method.
  //
  // UIMessage_Get_NumericDataRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UIMessageInstance - The id of the UIMessage object.
  //
  // UIMessage_Get_NumericDataResponse - The response message from the server. It provides the return value.
  //    - returnValue: double - Returns the numeric value passed to the numericDataParam parameter of the Thread.PostUIMessageEx method that posted the UIMessage. 
  //
  rpc Get_NumericData(UIMessage_Get_NumericDataRequest) returns (UIMessage_Get_NumericDataResponse);
  
  
  // Property: StringData
  //
  // Returns the string value passed to the stringDataParam parameter of the Thread.PostUIMessageEx method that posted the UIMessage.
  //
  // An example of a user interface message event that uses stringDataParam is the UIMsg_ProgressText event. If you define custom user interface message events, you can pass string data to the Thread.PostUIMessageEx method.
  //
  // UIMessage_Get_StringDataRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UIMessageInstance - The id of the UIMessage object.
  //
  // UIMessage_Get_StringDataResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the string value passed to the stringDataParam parameter of the Thread.PostUIMessageEx method that posted the UIMessage. 
  //
  rpc Get_StringData(UIMessage_Get_StringDataRequest) returns (UIMessage_Get_StringDataResponse);
  
  
  // Property: ActiveXData
  //
  // Returns the ActiveX reference passed to the activeXDataParam parameter of the Thread.PostUIMessageEx method that posted the user interface message.
  //
  // UIMessage_Get_ActiveXDataRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UIMessageInstance - The id of the UIMessage object.
  //
  // UIMessage_Get_ActiveXDataResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - Returns the ActiveX reference passed to the activeXDataParam parameter of the Thread.PostUIMessageEx method that posted the user interface message. 
  //
  rpc Get_ActiveXData(UIMessage_Get_ActiveXDataRequest) returns (UIMessage_Get_ActiveXDataResponse);
  
  
}
message UIMessageInstance {
  // Specifies the handle of the UIMessage instance in the server.
  string id = 1;
}
message UIMessage_AsPropertyObjectRequest {
  // The id of the UIMessage object.
  UIMessageInstance instance = 1;
}

message UIMessage_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message UIMessage_AcknowledgeRequest {
  // The id of the UIMessage object.
  UIMessageInstance instance = 1;
}

message UIMessage_AcknowledgeResponse {
}

message UIMessage_Get_EventRequest {
  // The id of the UIMessage object.
  UIMessageInstance instance = 1;
}

message UIMessage_Get_EventResponse {
  // Returns the event code that describes the type of UIMessage. The eventCode parameter of the Thread.PostUIMessageEx method that posted the user interface message specifies the value this method returns.
  UIMessageCodes returnValue = 1;
}

message UIMessage_Get_IsSynchronousRequest {
  // The id of the UIMessage object.
  UIMessageInstance instance = 1;
}

message UIMessage_Get_IsSynchronousResponse {
  // Returns True if the thread that posted the event is blocked and is waiting for you to acknowledge the UIMessage.
  bool returnValue = 1;
}

message UIMessage_Get_ExecutionRequest {
  // The id of the UIMessage object.
  UIMessageInstance instance = 1;
}

message UIMessage_Get_ExecutionResponse {
  // Returns a reference to the execution to which the event applies.
  ExecutionInstance returnValue = 1;
}

message UIMessage_Get_ThreadRequest {
  // The id of the UIMessage object.
  UIMessageInstance instance = 1;
}

message UIMessage_Get_ThreadResponse {
  // Returns a reference to the thread to which the event applies.
  ThreadInstance returnValue = 1;
}

message UIMessage_Get_NumericDataRequest {
  // The id of the UIMessage object.
  UIMessageInstance instance = 1;
}

message UIMessage_Get_NumericDataResponse {
  // Returns the numeric value passed to the numericDataParam parameter of the Thread.PostUIMessageEx method that posted the UIMessage.
  double returnValue = 1;
}

message UIMessage_Get_StringDataRequest {
  // The id of the UIMessage object.
  UIMessageInstance instance = 1;
}

message UIMessage_Get_StringDataResponse {
  // Returns the string value passed to the stringDataParam parameter of the Thread.PostUIMessageEx method that posted the UIMessage.
  string returnValue = 1;
}

message UIMessage_Get_ActiveXDataRequest {
  // The id of the UIMessage object.
  UIMessageInstance instance = 1;
}

message UIMessage_Get_ActiveXDataResponse {
  // Returns the ActiveX reference passed to the activeXDataParam parameter of the Thread.PostUIMessageEx method that posted the user interface message.
  ObjectInstance returnValue = 1;
}

// UsersFile
//
// The UsersFile class represents the file that contains a list of TestStand users and user profiles. Use this class to add or delete users and user profiles. You can obtain a reference to the users file TestStand loads at startup with the Engine.UsersFile property.
// To perform read or write operations for objects from the UsersFile class, obtain a reference to the PropertyObjectFile interface by using the AsPropertyObjectFile methods, then use the PropertyObjectFile.ReadFile and PropertyObjectFile.WriteFile methods.
//
service UsersFile {
  // Method: ReloadFromDisk
  //
  // Reloads the users file from disk.
  //
  // Note: After reloading the user file, any references to the UsersFile.UserList property and other users will be out of date.
  //
  // UsersFile_ReloadFromDiskRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UsersFileInstance - The id of the UsersFile object.
  //
  // UsersFile_ReloadFromDiskResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ReloadFromDisk(UsersFile_ReloadFromDiskRequest) returns (UsersFile_ReloadFromDiskResponse);
  
  
  // Method: AsPropertyObjectFile
  //
  // Returns the underlying PropertyObjectFile that represents the UsersFile object.
  //
  // UsersFile_AsPropertyObjectFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UsersFileInstance - The id of the UsersFile object.
  //
  // UsersFile_AsPropertyObjectFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectFileInstance - The return type of the PropertyObjectFile object.
  //
  rpc AsPropertyObjectFile(UsersFile_AsPropertyObjectFileRequest) returns (UsersFile_AsPropertyObjectFileResponse);
  
  

  // Property: UserList
  //
  // Specifies the array of users.
  //
  // Use the methods of the PropertyObject class to add or remove users from this object to change the TestStand user list, and to access the subproperties of each element in the array of User objects. Refer to User Data Type Subproperties for the default subproperties that TestStand defines.
  //
  // UsersFile_Set_UserListRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UsersFileInstance - The id of the UsersFile object.
  //    - val: PropertyObjectInstance - Specifies the array of users. 
  //
  // UsersFile_Set_UserListResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // UsersFile_Get_UserListRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UsersFileInstance - The id of the UsersFile object.
  //
  // UsersFile_Get_UserListResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Specifies the array of users. 
  //
  rpc Set_UserList(UsersFile_Set_UserListRequest) returns (UsersFile_Set_UserListResponse);
  rpc Get_UserList(UsersFile_Get_UserListRequest) returns (UsersFile_Get_UserListResponse);
  
  
  // Property: UserProfileList
  //
  // Specifies the array of user profiles.
  // Note: This property is obsolete. Use UserGroupList instead.
  //
  // Use the methods of the PropertyObject class to add or remove user profiles from this object to change the TestStand user list, and to access the subproperties of each element in the array of User objects.
  //
  // UsersFile_Set_UserProfileListRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UsersFileInstance - The id of the UsersFile object.
  //    - val: PropertyObjectInstance - Specifies the array of user profiles. Note: This property is obsolete. Use UserGroupList instead. 
  //
  // UsersFile_Set_UserProfileListResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // UsersFile_Get_UserProfileListRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UsersFileInstance - The id of the UsersFile object.
  //
  // UsersFile_Get_UserProfileListResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Specifies the array of user profiles. Note: This property is obsolete. Use UserGroupList instead. 
  //
  rpc Set_UserProfileList(UsersFile_Set_UserProfileListRequest) returns (UsersFile_Set_UserProfileListResponse);
  rpc Get_UserProfileList(UsersFile_Get_UserProfileListRequest) returns (UsersFile_Get_UserProfileListResponse);
  
  
  // Property: UserGroupList
  //
  // Specifies the array of User objects.
  //
  // Use the methods of the PropertyObject class to add or remove user groups from this object to change the TestStand user group list, and to access the subproperties of each element in the array of group objects. Use the User.Members property to edit the user names that are members of the group. Refer to User Data Type Subproperties for the default subproperties TestStand defines.
  //
  // UsersFile_Set_UserGroupListRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UsersFileInstance - The id of the UsersFile object.
  //    - val: PropertyObjectInstance - Specifies the array of User objects. 
  //
  // UsersFile_Set_UserGroupListResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // UsersFile_Get_UserGroupListRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UsersFileInstance - The id of the UsersFile object.
  //
  // UsersFile_Get_UserGroupListResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Specifies the array of User objects. 
  //
  rpc Set_UserGroupList(UsersFile_Set_UserGroupListRequest) returns (UsersFile_Set_UserGroupListResponse);
  rpc Get_UserGroupList(UsersFile_Get_UserGroupListRequest) returns (UsersFile_Get_UserGroupListResponse);
  
  
}
message UsersFileInstance {
  // Specifies the handle of the UsersFile instance in the server.
  string id = 1;
}
message UsersFile_ReloadFromDiskRequest {
  // The id of the UsersFile object.
  UsersFileInstance instance = 1;
}

message UsersFile_ReloadFromDiskResponse {
}

message UsersFile_AsPropertyObjectFileRequest {
  // The id of the UsersFile object.
  UsersFileInstance instance = 1;
}

message UsersFile_AsPropertyObjectFileResponse {
  // The return type of the PropertyObjectFile object.
  PropertyObjectFileInstance returnValue = 1;
}

message UsersFile_Set_UserListRequest {
  // The id of the UsersFile object.
  UsersFileInstance instance = 1;
  // Specifies the array of users.
  PropertyObjectInstance val = 2;
}

message UsersFile_Set_UserListResponse {
}

message UsersFile_Get_UserListRequest {
  // The id of the UsersFile object.
  UsersFileInstance instance = 1;
}

message UsersFile_Get_UserListResponse {
  // Returns a property object that is an array of User objects.
  PropertyObjectInstance returnValue = 1;
}

message UsersFile_Set_UserProfileListRequest {
  // The id of the UsersFile object.
  UsersFileInstance instance = 1;
  // Specifies the array of user profiles.
  // Note: This property is obsolete. Use UserGroupList instead.
  PropertyObjectInstance val = 2;
}

message UsersFile_Set_UserProfileListResponse {
}

message UsersFile_Get_UserProfileListRequest {
  // The id of the UsersFile object.
  UsersFileInstance instance = 1;
}

message UsersFile_Get_UserProfileListResponse {
  // Returns a property object that is an array of User objects.
  PropertyObjectInstance returnValue = 1;
}

message UsersFile_Set_UserGroupListRequest {
  // The id of the UsersFile object.
  UsersFileInstance instance = 1;
  // Specifies the array of User objects.
  PropertyObjectInstance val = 2;
}

message UsersFile_Set_UserGroupListResponse {
}

message UsersFile_Get_UserGroupListRequest {
  // The id of the UsersFile object.
  UsersFileInstance instance = 1;
}

message UsersFile_Get_UserGroupListResponse {
  // Returns a property object that is an array of User objects.
  PropertyObjectInstance returnValue = 1;
}

// WorkspaceFile
//
// Objects of the WorkspaceFile class represent workspace files that can contain projects. A workspace file contains a list of project files and source code control provider information. Each project file contains lists of sequence files, code modules, and other files required by a particular test system.
// To perform read or write operations for objects from the WorkspaceFile class, obtain a reference to the PropertyObjectFile interface by using the WorkspaceFile.AsPropertyObjectFile method, then use the PropertyObjectFile.ReadFile and PropertyObjectFile.WriteFile methods, respectively.
//
service WorkspaceFile {
  // Method: AsPropertyObjectFile
  //
  // Returns the underlying PropertyObjectFile that represents the WorkspaceFile object.
  //
  // WorkspaceFile_AsPropertyObjectFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WorkspaceFileInstance - The id of the WorkspaceFile object.
  //
  // WorkspaceFile_AsPropertyObjectFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectFileInstance - The return type of the PropertyObjectFile object.
  //
  rpc AsPropertyObjectFile(WorkspaceFile_AsPropertyObjectFileRequest) returns (WorkspaceFile_AsPropertyObjectFileResponse);
  
  
  // Method: FindWorkspaceObject
  //
  // Finds a WorkspaceObject for the specified pathname.
  //
  // WorkspaceFile_FindWorkspaceObjectRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: WorkspaceFileInstance - The id of the WorkspaceFile object.
  //    - fullPath: string - Specifies ss the absolute pathname of the file to find.
  //
  // WorkspaceFile_FindWorkspaceObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: WorkspaceObjectInstance - Returns the first WorkspaceObject in the workspace that corresponds to the specified pathname. Returns a NULL reference if no object is found. 
  //
  rpc FindWorkspaceObject(WorkspaceFile_FindWorkspaceObjectRequest) returns (WorkspaceFile_FindWorkspaceObjectResponse);
  
  
  // Method: RunSourceControlProvider
  //
  // Launches the user interface of the source code control provider.
  //
  // WorkspaceFile_RunSourceControlProviderRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WorkspaceFileInstance - The id of the WorkspaceFile object.
  //
  // WorkspaceFile_RunSourceControlProviderResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc RunSourceControlProvider(WorkspaceFile_RunSourceControlProviderRequest) returns (WorkspaceFile_RunSourceControlProviderResponse);
  
  
  // Method: DisplayAddFileToWorkspaceDialog
  //
  // Launches the Add File To Workspace dialog box, in which you can add a file to the workspace file at the location you select.
  //
  // WorkspaceFile_DisplayAddFileToWorkspaceDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: WorkspaceFileInstance - The id of the WorkspaceFile object.
  //    - selectedProject: WorkspaceObjectInstance - Specifies the currently selected project in the workspace. Pass a NULL reference if nothing is selected.
  //    - fullPath: string - Specifies the absolute pathname of the file to add it to the workspace.
  //
  // WorkspaceFile_DisplayAddFileToWorkspaceDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the file was added to the workspace. 
  //
  rpc DisplayAddFileToWorkspaceDialog(WorkspaceFile_DisplayAddFileToWorkspaceDialogRequest) returns (WorkspaceFile_DisplayAddFileToWorkspaceDialogResponse);
  
  
  // Method: SaveWorkspaceAndProjectFiles
  //
  // Writes the contents of the workspace file and the projects to disk if the files have been modified.
  //
  // This method does nothing if the workspace and project files have not been modified. If the files have been modified, this method prompts the user with the option to save and then writes the files. PropertyObjectFile.Path determines the pathname of the file to write. If an error occurs while saving any of the files, an exception is thrown containing all the files that could not be saved.
  //
  // WorkspaceFile_SaveWorkspaceAndProjectFilesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: WorkspaceFileInstance - The id of the WorkspaceFile object.
  //    - options: int32 - Specifies one or more SaveWorkspaceFileOptions constants. Use the bitwise-OR operator to specify more than one options.
  //
  // WorkspaceFile_SaveWorkspaceAndProjectFilesResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns False if you click Cancel in the Prompt dialog box. 
  //
  rpc SaveWorkspaceAndProjectFiles(WorkspaceFile_SaveWorkspaceAndProjectFilesRequest) returns (WorkspaceFile_SaveWorkspaceAndProjectFilesResponse);
  
  

  // Property: RootWorkspaceObject
  //
  // Returns the root WorkspaceObject.
  //
  // This object contains all the projects the workspace file contains.
  //
  // WorkspaceFile_Get_RootWorkspaceObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WorkspaceFileInstance - The id of the WorkspaceFile object.
  //
  // WorkspaceFile_Get_RootWorkspaceObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: WorkspaceObjectInstance - Returns the root WorkspaceObject. 
  //
  rpc Get_RootWorkspaceObject(WorkspaceFile_Get_RootWorkspaceObjectRequest) returns (WorkspaceFile_Get_RootWorkspaceObjectResponse);
  
  
  // Property: IsConnectedToSCProvider
  //
  // Returns a value that indicates whether the workspace file is connected to a source code control (SCC) provider.
  //
  // TestStand connects a workspace file to an SCC provider when you set the Engine.CurrentWorkspaceFile property. The WorkspaceFile.ProviderName property specifies the associated provider. If the workspace file does not have a provider associated with it, TestStand connects to the default provider specified in the registry at HKEY_LOCAL_MACHINE\SOFTWARE\SourceCodeControlProvider. (Platform: (32-bit TestStand)) On 64-bit operating systems, this registry key appears only in the 32-bit registry. Use the path HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\SourceCodeControlProvider to access the key in the registry editor.
  //
  // WorkspaceFile_Get_IsConnectedToSCProviderRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WorkspaceFileInstance - The id of the WorkspaceFile object.
  //
  // WorkspaceFile_Get_IsConnectedToSCProviderResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the workspace file is connected to a source code control (SCC) provider. 
  //
  rpc Get_IsConnectedToSCProvider(WorkspaceFile_Get_IsConnectedToSCProviderRequest) returns (WorkspaceFile_Get_IsConnectedToSCProviderResponse);
  
  
  // Property: ProviderName
  //
  // Specifies the name of the source code control provider. The registry key entries located in HKEY_LOCAL_MACHINE\Software\SourceCodeControlProvider\InstalledSCCProviders define the name for a provider. (Platform: (32-bit TestStand)) On 64-bit operating systems, this registry key appears only in the 32-bit registry. Use the path HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\SourceCodeControlProvider\InstalledSCCProviders to access the key in the registry editor.
  // 
  //
  // This property returns <None> if the workspace does not specify any provider. An empty value specifies to use the default provider specified by the system.
  //
  // WorkspaceFile_Set_ProviderNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WorkspaceFileInstance - The id of the WorkspaceFile object.
  //    - val: string - Specifies the name of the source code control provider. The registry key entries located in HKEY_LOCAL_MACHINE\Software\SourceCodeControlProvider\InstalledSCCProviders define the name for a provider. (Platform: (32-bit TestStand)) On 64-bit operating systems, this registry key appears only in the 32-bit registry. Use the path HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\SourceCodeControlProvider\InstalledSCCProviders to access the key in the registry editor.  
  //
  // WorkspaceFile_Set_ProviderNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // WorkspaceFile_Get_ProviderNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WorkspaceFileInstance - The id of the WorkspaceFile object.
  //
  // WorkspaceFile_Get_ProviderNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the name of the source code control provider. The registry key entries located in HKEY_LOCAL_MACHINE\Software\SourceCodeControlProvider\InstalledSCCProviders define the name for a provider. (Platform: (32-bit TestStand)) On 64-bit operating systems, this registry key appears only in the 32-bit registry. Use the path HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\SourceCodeControlProvider\InstalledSCCProviders to access the key in the registry editor.  
  //
  rpc Set_ProviderName(WorkspaceFile_Set_ProviderNameRequest) returns (WorkspaceFile_Set_ProviderNameResponse);
  rpc Get_ProviderName(WorkspaceFile_Get_ProviderNameRequest) returns (WorkspaceFile_Get_ProviderNameResponse);
  
  
  // Property: OptionsFile
  //
  // Returns the workspace options file.
  //
  // The workspace options file is a file with the same base name as the workspace file, but with the .tso extension. TestStand saves information in this file to preserve certain user settings, such as window positions, source code control information, and the expansion state of the Workspace pane.
  // Note: National Instruments recommends that you do not put the options file in source code control or share it with other users.
  //
  // WorkspaceFile_Get_OptionsFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WorkspaceFileInstance - The id of the WorkspaceFile object.
  //
  // WorkspaceFile_Get_OptionsFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectFileInstance - Returns the workspace options file. 
  //
  rpc Get_OptionsFile(WorkspaceFile_Get_OptionsFileRequest) returns (WorkspaceFile_Get_OptionsFileResponse);
  
  
}
message WorkspaceFileInstance {
  // Specifies the handle of the WorkspaceFile instance in the server.
  string id = 1;
}

message WorkspaceObjectInstance {
  // Specifies the handle of the WorkspaceObject instance in the server.
  string id = 1;
}
message WorkspaceFile_AsPropertyObjectFileRequest {
  // The id of the WorkspaceFile object.
  WorkspaceFileInstance instance = 1;
}

message WorkspaceFile_AsPropertyObjectFileResponse {
  // The return type of the PropertyObjectFile object.
  PropertyObjectFileInstance returnValue = 1;
}

message WorkspaceFile_FindWorkspaceObjectRequest {
  // The id of the WorkspaceFile object.
  WorkspaceFileInstance instance = 1;
  // Specifies ss the absolute pathname of the file to find.
  string fullPath = 2;
}

message WorkspaceFile_FindWorkspaceObjectResponse {
  // Returns the first WorkspaceObject in the workspace that corresponds to the specified pathname. Returns a NULL reference if no object is found.
  WorkspaceObjectInstance returnValue = 1;
}

message WorkspaceFile_RunSourceControlProviderRequest {
  // The id of the WorkspaceFile object.
  WorkspaceFileInstance instance = 1;
}

message WorkspaceFile_RunSourceControlProviderResponse {
}

message WorkspaceFile_DisplayAddFileToWorkspaceDialogRequest {
  // The id of the WorkspaceFile object.
  WorkspaceFileInstance instance = 1;
  // Specifies the currently selected project in the workspace. Pass a NULL reference if nothing is selected.
  WorkspaceObjectInstance selectedProject = 2;
  // Specifies the absolute pathname of the file to add it to the workspace.
  string fullPath = 3;
}

message WorkspaceFile_DisplayAddFileToWorkspaceDialogResponse {
  // Returns True if the file was added to the workspace.
  bool returnValue = 1;
}

message WorkspaceFile_SaveWorkspaceAndProjectFilesRequest {
  // The id of the WorkspaceFile object.
  WorkspaceFileInstance instance = 1;
  // Specifies one or more SaveWorkspaceFileOptions constants. Use the bitwise-OR operator to specify more than one options.
  SaveWorkspaceFileOptions options = 2;
}

message WorkspaceFile_SaveWorkspaceAndProjectFilesResponse {
  // Returns False if you click Cancel in the Prompt dialog box.
  bool returnValue = 1;
}

message WorkspaceFile_Get_RootWorkspaceObjectRequest {
  // The id of the WorkspaceFile object.
  WorkspaceFileInstance instance = 1;
}

message WorkspaceFile_Get_RootWorkspaceObjectResponse {
  // Returns the root WorkspaceObject.
  WorkspaceObjectInstance returnValue = 1;
}

message WorkspaceFile_Get_IsConnectedToSCProviderRequest {
  // The id of the WorkspaceFile object.
  WorkspaceFileInstance instance = 1;
}

message WorkspaceFile_Get_IsConnectedToSCProviderResponse {
  // Returns a value that indicates whether the workspace file is connected to a source code control (SCC) provider.
  bool returnValue = 1;
}

message WorkspaceFile_Set_ProviderNameRequest {
  // The id of the WorkspaceFile object.
  WorkspaceFileInstance instance = 1;
  // Specifies the name of the source code control provider. The registry key entries located in HKEY_LOCAL_MACHINE\Software\SourceCodeControlProvider\InstalledSCCProviders define the name for a provider. (Platform: (32-bit TestStand)) On 64-bit operating systems, this registry key appears only in the 32-bit registry. Use the path HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\SourceCodeControlProvider\InstalledSCCProviders to access the key in the registry editor.
  // 
  string val = 2;
}

message WorkspaceFile_Set_ProviderNameResponse {
}

message WorkspaceFile_Get_ProviderNameRequest {
  // The id of the WorkspaceFile object.
  WorkspaceFileInstance instance = 1;
}

message WorkspaceFile_Get_ProviderNameResponse {
  // Specifies the name of the source code control provider. The registry key entries located in HKEY_LOCAL_MACHINE\Software\SourceCodeControlProvider\InstalledSCCProviders define the name for a provider. (Platform: (32-bit TestStand)) On 64-bit operating systems, this registry key appears only in the 32-bit registry. Use the path HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\SourceCodeControlProvider\InstalledSCCProviders to access the key in the registry editor.
  // 
  string returnValue = 1;
}

message WorkspaceFile_Get_OptionsFileRequest {
  // The id of the WorkspaceFile object.
  WorkspaceFileInstance instance = 1;
}

message WorkspaceFile_Get_OptionsFileResponse {
  // Returns the workspace options file.
  PropertyObjectFileInstance returnValue = 1;
}

// WorkspaceObject
//
// Objects of the WorkspaceObject class represent nodes for workspace and project files on the Workspace pane. Workspace objects handle all source code control operations on files.
//
service WorkspaceObject {
  // Method: NewFolder
  //
  // Creates a WorkspaceObject folder.
  //
  // Use the WorkspaceObject.InsertObject method to insert the object into the workspace.
  //
  // WorkspaceObject_NewFolderRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: WorkspaceObjectInstance - The id of the WorkspaceObject object.
  //    - Name: string - Specifies the name of the folder.
  //
  // WorkspaceObject_NewFolderResponse - The response message from the server. It provides the return value.
  //    - returnValue: WorkspaceObjectInstance - The return type of the WorkspaceObject object.
  //
  rpc NewFolder(WorkspaceObject_NewFolderRequest) returns (WorkspaceObject_NewFolderResponse);
  
  
  // Method: NewFile
  //
  // Creates a new WorkspaceObject associated with the specified pathname.
  //
  // Use the WorkspaceObject.InsertObject method to insert the object into the workspace. This method uses the file extension to determine the type of WorkspaceObject.
  //
  // WorkspaceObject_NewFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WorkspaceObjectInstance - The id of the WorkspaceObject object.
  //
  // WorkspaceObject_NewFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: WorkspaceObjectInstance - The return type of the WorkspaceObject object.
  //
  rpc NewFile(WorkspaceObject_NewFileRequest) returns (WorkspaceObject_NewFileResponse);
  
  
  // Method: InsertObject
  //
  // Inserts a WorkspaceObject at the specified index under another WorkspaceObject.
  //
  // Use the WorkspaceObject.NewFile or WorkspaceObject.NewFolder method to create a new WorkspaceObject.
  //
  // WorkspaceObject_InsertObjectRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: WorkspaceObjectInstance - The id of the WorkspaceObject object.
  //    - obj: WorkspaceObjectInstance - Specifies the WorkspaceObject to be insert.
  //    - index: int32 - Specifies the zero-based index specifying the location at which to insert the WorkspaceObject.
  //
  // WorkspaceObject_InsertObjectResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc InsertObject(WorkspaceObject_InsertObjectRequest) returns (WorkspaceObject_InsertObjectResponse);
  
  
  // Method: DoSourceControlCommand
  //
  // Performs the specified source code control command on the specified files.
  //
  // Call the WorkspaceObject.CanDoSourceControlCommand method before calling this method.
  //
  // WorkspaceObject_DoSourceControlCommandRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: WorkspaceObjectInstance - The id of the WorkspaceObject object.
  //    - scCommand: SourceControlCommands - Specifies the source code control command to perform.
  //    - options: int32 - Specifies one or more of the SourceControlCommandOptions constants.
  //    - itemList: ObjectInstance - Specifies an array of WorkspaceObjects that specifies the selected files. If you omit this argument, the method uses the file associated with this WorkspaceObject. 
  //
  // WorkspaceObject_DoSourceControlCommandResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if the command was completed successfully for all specified files. 
  //    - modifiedObject: boo - Returns True if the command modified the workspace file.
  //
  rpc DoSourceControlCommand(WorkspaceObject_DoSourceControlCommandRequest) returns (WorkspaceObject_DoSourceControlCommandResponse);
  
  
  // Method: AsPropertyObject
  //
  // Returns the underlying PropertyObject that represents the WorkspaceObject object. Use the PropertyObject to modify, add, or remove custom properties of the object.
  //
  // WorkspaceObject_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WorkspaceObjectInstance - The id of the WorkspaceObject object.
  //
  // WorkspaceObject_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(WorkspaceObject_AsPropertyObjectRequest) returns (WorkspaceObject_AsPropertyObjectResponse);
  
  
  // Method: GetAbsolutePath
  //
  // Returns the absolute pathname of the file associated with this WorkspaceObject.
  //
  // WorkspaceObject_GetAbsolutePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WorkspaceObjectInstance - The id of the WorkspaceObject object.
  //
  // WorkspaceObject_GetAbsolutePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetAbsolutePath(WorkspaceObject_GetAbsolutePathRequest) returns (WorkspaceObject_GetAbsolutePathResponse);
  
  
  // Method: RemoveObject
  //
  // Removes the WorkspaceObject at the specified index.
  //
  // WorkspaceObject_RemoveObjectRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: WorkspaceObjectInstance - The id of the WorkspaceObject object.
  //    - index: int32 - Specifies the zero-based index of the object to remove.
  //
  // WorkspaceObject_RemoveObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: WorkspaceObjectInstance - Returns the removed object. 
  //
  rpc RemoveObject(WorkspaceObject_RemoveObjectRequest) returns (WorkspaceObject_RemoveObjectResponse);
  
  
  // Method: InsertCodeModules
  //
  // Inserts WorkspaceObjects for the code modules of the specified sequence files.
  //
  // This method traverses the WorkspaceObject hierarchy searching for sequence files. For each sequence file it finds, this method finds all the code modules in the sequence file and adds a WorkspaceObject for each one to the workspace.
  // Note: Code modules are a static representation of the current WorkspaceObject hierarchy. If you change the hierarchy or any elements in the hierarchy, you must delete the code module WorkspaceObjects and call this method again.
  //
  // WorkspaceObject_InsertCodeModulesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: WorkspaceObjectInstance - The id of the WorkspaceObject object.
  //    - itemList: ObjectInstance - Specifies an array of WorkspaceObjects that specifies the selected files. If you omit this argument, the method uses this WorkspaceObject.
  //
  // WorkspaceObject_InsertCodeModulesResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated WorkspaceObjectInstance - Returns an array of WorkspaceObjects that were added to the workspace. 
  //
  rpc InsertCodeModules(WorkspaceObject_InsertCodeModulesRequest) returns (WorkspaceObject_InsertCodeModulesResponse);
  
  
  // Method: UpdateStatus
  //
  // Updates the source code control status of the specified WorkspaceObjects.
  //
  // WorkspaceObject_UpdateStatusRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: WorkspaceObjectInstance - The id of the WorkspaceObject object.
  //    - options: int32 - Pass SCCmdOption_DoNotRecurse to specify only this WorkspaceObject. Otherwise, this method updates the status of all contained objects as well.
  //
  // WorkspaceObject_UpdateStatusResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc UpdateStatus(WorkspaceObject_UpdateStatusRequest) returns (WorkspaceObject_UpdateStatusResponse);
  
  
  // Method: CanDoSourceControlCommand
  //
  // Indicates if the provider supports the specified source code control command for the specified files.
  //
  // Call this function to determine whether you can call the WorkspaceObject.DoSourceControlCommand method on the selected files.
  //
  // WorkspaceObject_CanDoSourceControlCommandRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: WorkspaceObjectInstance - The id of the WorkspaceObject object.
  //    - scCommand: SourceControlCommands - Specifies the command to check.
  //    - options: int32 - Specifies one or more of the SourceControlCommandOptions constants.
  //    - itemList: ObjectInstance - Specifies an array of WorkspaceObjects that specifies the selected files. If you omit this argument, the method uses the file associated with this WorkspaceObject. 
  //
  // WorkspaceObject_CanDoSourceControlCommandResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the command is supported. 
  //
  rpc CanDoSourceControlCommand(WorkspaceObject_CanDoSourceControlCommandRequest) returns (WorkspaceObject_CanDoSourceControlCommandResponse);
  
  
  // Method: GetParentContainer
  //
  // Returns the parent WorkspaceObject that contains this WorkspaceObject.
  //
  // This method returns a NULL reference for the parent WorkspaceObject.
  //
  // WorkspaceObject_GetParentContainerRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WorkspaceObjectInstance - The id of the WorkspaceObject object.
  //
  // WorkspaceObject_GetParentContainerResponse - The response message from the server. It provides the return value.
  //    - returnValue: WorkspaceObjectInstance - The return type of the WorkspaceObject object.
  //
  rpc GetParentContainer(WorkspaceObject_GetParentContainerRequest) returns (WorkspaceObject_GetParentContainerResponse);
  
  
  // Method: GetContainedObject
  //
  // Returns the WorkspaceObject the index specifies.
  //
  // WorkspaceObject_GetContainedObjectRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: WorkspaceObjectInstance - The id of the WorkspaceObject object.
  //    - index: int32 - Specifies the zero-based index of the object contained by this WorkspaceObject.
  //
  // WorkspaceObject_GetContainedObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: WorkspaceObjectInstance - The return type of the WorkspaceObject object.
  //
  rpc GetContainedObject(WorkspaceObject_GetContainedObjectRequest) returns (WorkspaceObject_GetContainedObjectResponse);
  
  

  // Property: Path
  //
  // Returns the pathname associated with the WorkspaceObject.
  //
  // Folder objects do not contain a pathname. The pathname can be relative.
  //
  // WorkspaceObject_Set_PathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WorkspaceObjectInstance - The id of the WorkspaceObject object.
  //    - val: string - Returns the pathname associated with the WorkspaceObject. 
  //
  // WorkspaceObject_Set_PathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // WorkspaceObject_Get_PathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WorkspaceObjectInstance - The id of the WorkspaceObject object.
  //
  // WorkspaceObject_Get_PathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the pathname associated with the WorkspaceObject. 
  //
  rpc Set_Path(WorkspaceObject_Set_PathRequest) returns (WorkspaceObject_Set_PathResponse);
  rpc Get_Path(WorkspaceObject_Get_PathRequest) returns (WorkspaceObject_Get_PathResponse);
  
  
  // Property: DisplayName
  //
  // Specifies the display name for this WorkspaceObject.
  //
  // Generally, the display name is the name of the file, if one exists.
  //
  // WorkspaceObject_Set_DisplayNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WorkspaceObjectInstance - The id of the WorkspaceObject object.
  //    - val: string - Specifies the display name for this WorkspaceObject. 
  //
  // WorkspaceObject_Set_DisplayNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // WorkspaceObject_Get_DisplayNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WorkspaceObjectInstance - The id of the WorkspaceObject object.
  //
  // WorkspaceObject_Get_DisplayNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the display name for this WorkspaceObject. 
  //
  rpc Set_DisplayName(WorkspaceObject_Set_DisplayNameRequest) returns (WorkspaceObject_Set_DisplayNameResponse);
  rpc Get_DisplayName(WorkspaceObject_Get_DisplayNameRequest) returns (WorkspaceObject_Get_DisplayNameResponse);
  
  
  // Property: IsCodeModule
  //
  // Returns a value that indicates whether the WorkspaceObject refers to a code module.
  //
  // WorkspaceObject_Get_IsCodeModuleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WorkspaceObjectInstance - The id of the WorkspaceObject object.
  //
  // WorkspaceObject_Get_IsCodeModuleResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the WorkspaceObject refers to a code module. 
  //
  rpc Get_IsCodeModule(WorkspaceObject_Get_IsCodeModuleRequest) returns (WorkspaceObject_Get_IsCodeModuleResponse);
  
  
  // Property: CodeModuleSeqFilePath
  //
  // Specifies the pathname of the sequence file to which this code module belongs.
  //
  // This property associates a WorkspaceObject with a particular sequence file. Code modules that are stored in the workspace use the property to determine to which sequence file they belong.
  //
  // WorkspaceObject_Set_CodeModuleSeqFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WorkspaceObjectInstance - The id of the WorkspaceObject object.
  //    - val: string - Specifies the pathname of the sequence file to which this code module belongs. 
  //
  // WorkspaceObject_Set_CodeModuleSeqFilePathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // WorkspaceObject_Get_CodeModuleSeqFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WorkspaceObjectInstance - The id of the WorkspaceObject object.
  //
  // WorkspaceObject_Get_CodeModuleSeqFilePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the pathname of the sequence file to which this code module belongs. 
  //
  rpc Set_CodeModuleSeqFilePath(WorkspaceObject_Set_CodeModuleSeqFilePathRequest) returns (WorkspaceObject_Set_CodeModuleSeqFilePathResponse);
  rpc Get_CodeModuleSeqFilePath(WorkspaceObject_Get_CodeModuleSeqFilePathRequest) returns (WorkspaceObject_Get_CodeModuleSeqFilePathResponse);
  
  
  // Property: ObjectType
  //
  // Returns the WorkspaceObject type.
  //
  // WorkspaceObject_Get_ObjectTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WorkspaceObjectInstance - The id of the WorkspaceObject object.
  //
  // WorkspaceObject_Get_ObjectTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: WorkspaceObjectTypes - Returns the WorkspaceObject type. 
  //
  rpc Get_ObjectType(WorkspaceObject_Get_ObjectTypeRequest) returns (WorkspaceObject_Get_ObjectTypeResponse);
  
  
  // Property: SourceControlStatus
  //
  // Returns the current source code control status of this WorkspaceObject.
  //
  // WorkspaceObject_Get_SourceControlStatusRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WorkspaceObjectInstance - The id of the WorkspaceObject object.
  //
  // WorkspaceObject_Get_SourceControlStatusResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the current source code control status of this WorkspaceObject. 
  //
  rpc Get_SourceControlStatus(WorkspaceObject_Get_SourceControlStatusRequest) returns (WorkspaceObject_Get_SourceControlStatusResponse);
  
  
  // Property: ProjectFile
  //
  // Returns the project file to which this object belongs.
  //
  // All WorkspaceObjects belong to a single project file in the workspace.
  //
  // WorkspaceObject_Get_ProjectFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WorkspaceObjectInstance - The id of the WorkspaceObject object.
  //
  // WorkspaceObject_Get_ProjectFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectFileInstance - Returns the project file to which this object belongs. 
  //
  rpc Get_ProjectFile(WorkspaceObject_Get_ProjectFileRequest) returns (WorkspaceObject_Get_ProjectFileResponse);
  
  
  // Property: FileExists
  //
  // Returns a value that indicates whether the file associated with the WorkspaceObject exists.
  //
  // This method is valid only on WorkspaceObjects that contain a pathname.
  //
  // WorkspaceObject_Get_FileExistsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WorkspaceObjectInstance - The id of the WorkspaceObject object.
  //
  // WorkspaceObject_Get_FileExistsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the file associated with the WorkspaceObject exists. 
  //
  rpc Get_FileExists(WorkspaceObject_Get_FileExistsRequest) returns (WorkspaceObject_Get_FileExistsResponse);
  
  
  // Property: LastSourceControlMessages
  //
  // Returns the most recent information and error messages the source code control provider reports.
  //
  // Call this method after calling the WorkspaceObject.DoSourceControlCommand method to obtain any messages the SCC provider reports.
  //
  // WorkspaceObject_Get_LastSourceControlMessagesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WorkspaceObjectInstance - The id of the WorkspaceObject object.
  //
  // WorkspaceObject_Get_LastSourceControlMessagesResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the most recent information and error messages the source code control provider reports. 
  //
  rpc Get_LastSourceControlMessages(WorkspaceObject_Get_LastSourceControlMessagesRequest) returns (WorkspaceObject_Get_LastSourceControlMessagesResponse);
  
  
  // Property: NumContainedObjects
  //
  // Returns the number of objects that this WorkspaceObject contains.
  //
  // WorkspaceObject_Get_NumContainedObjectsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WorkspaceObjectInstance - The id of the WorkspaceObject object.
  //
  // WorkspaceObject_Get_NumContainedObjectsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of objects that this WorkspaceObject contains. 
  //
  rpc Get_NumContainedObjects(WorkspaceObject_Get_NumContainedObjectsRequest) returns (WorkspaceObject_Get_NumContainedObjectsResponse);
  
  
}
message WorkspaceObject_NewFolderRequest {
  // The id of the WorkspaceObject object.
  WorkspaceObjectInstance instance = 1;
  // Specifies the name of the folder.
  string Name = 2;
}

message WorkspaceObject_NewFolderResponse {
  // The return type of the WorkspaceObject object.
  WorkspaceObjectInstance returnValue = 1;
}

message WorkspaceObject_NewFileRequest {
  // The id of the WorkspaceObject object.
  WorkspaceObjectInstance instance = 1;
  // Specifies the pathname associated with the WorkspaceObject. This pathname can be relative.
  string Path = 2;
}

message WorkspaceObject_NewFileResponse {
  // The return type of the WorkspaceObject object.
  WorkspaceObjectInstance returnValue = 1;
}

message WorkspaceObject_InsertObjectRequest {
  // The id of the WorkspaceObject object.
  WorkspaceObjectInstance instance = 1;
  // Specifies the WorkspaceObject to be insert.
  WorkspaceObjectInstance obj = 2;
  // Specifies the zero-based index specifying the location at which to insert the WorkspaceObject.
  int32 index = 3;
}

message WorkspaceObject_InsertObjectResponse {
}

message WorkspaceObject_DoSourceControlCommandRequest {
  // The id of the WorkspaceObject object.
  WorkspaceObjectInstance instance = 1;
  // Specifies the source code control command to perform.
  SourceControlCommands scCommand = 2;
  // Specifies one or more of the SourceControlCommandOptions constants.
  SourceControlCommandOptions options = 3;
  // Specifies an array of WorkspaceObjects that specifies the selected files. If you omit this argument, the method uses the file associated with this WorkspaceObject.
  repeated PropertyObjectInstance itemList = 4;
}

message WorkspaceObject_DoSourceControlCommandResponse {
  // Returns True if the command was completed successfully for all specified files.
  bool returnValue = 1;
  // Returns True if the command modified the workspace file.
  bool modifiedObject = 2;
}

message WorkspaceObject_AsPropertyObjectRequest {
  // The id of the WorkspaceObject object.
  WorkspaceObjectInstance instance = 1;
}

message WorkspaceObject_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message WorkspaceObject_GetAbsolutePathRequest {
  // The id of the WorkspaceObject object.
  WorkspaceObjectInstance instance = 1;
}

message WorkspaceObject_GetAbsolutePathResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message WorkspaceObject_RemoveObjectRequest {
  // The id of the WorkspaceObject object.
  WorkspaceObjectInstance instance = 1;
  // Specifies the zero-based index of the object to remove.
  int32 index = 2;
}

message WorkspaceObject_RemoveObjectResponse {
  // Returns the removed object.
  WorkspaceObjectInstance returnValue = 1;
}

message WorkspaceObject_InsertCodeModulesRequest {
  // The id of the WorkspaceObject object.
  WorkspaceObjectInstance instance = 1;
  // Specifies an array of WorkspaceObjects that specifies the selected files. If you omit this argument, the method uses this WorkspaceObject.
  repeated PropertyObjectInstance itemList = 2;
}

message WorkspaceObject_InsertCodeModulesResponse {
  // Returns an array of WorkspaceObjects that were added to the workspace.
  repeated WorkspaceObjectInstance returnValue = 1;
}

message WorkspaceObject_UpdateStatusRequest {
  // The id of the WorkspaceObject object.
  WorkspaceObjectInstance instance = 1;
  // Pass SCCmdOption_DoNotRecurse to specify only this WorkspaceObject. Otherwise, this method updates the status of all contained objects as well.
  int32 options = 2;
}

message WorkspaceObject_UpdateStatusResponse {
}

message WorkspaceObject_CanDoSourceControlCommandRequest {
  // The id of the WorkspaceObject object.
  WorkspaceObjectInstance instance = 1;
  // Specifies the command to check.
  SourceControlCommands scCommand = 2;
  // Specifies one or more of the SourceControlCommandOptions constants.
  SourceControlCommandOptions options = 3;
  // Specifies an array of WorkspaceObjects that specifies the selected files. If you omit this argument, the method uses the file associated with this WorkspaceObject.
  repeated PropertyObjectInstance itemList = 4;
}

message WorkspaceObject_CanDoSourceControlCommandResponse {
  // Returns True if the command is supported.
  bool returnValue = 1;
}

message WorkspaceObject_GetParentContainerRequest {
  // The id of the WorkspaceObject object.
  WorkspaceObjectInstance instance = 1;
}

message WorkspaceObject_GetParentContainerResponse {
  // The return type of the WorkspaceObject object.
  WorkspaceObjectInstance returnValue = 1;
}

message WorkspaceObject_GetContainedObjectRequest {
  // The id of the WorkspaceObject object.
  WorkspaceObjectInstance instance = 1;
  // Specifies the zero-based index of the object contained by this WorkspaceObject.
  int32 index = 2;
}

message WorkspaceObject_GetContainedObjectResponse {
  // The return type of the WorkspaceObject object.
  WorkspaceObjectInstance returnValue = 1;
}

message WorkspaceObject_Set_PathRequest {
  // The id of the WorkspaceObject object.
  WorkspaceObjectInstance instance = 1;
  // Returns the pathname associated with the WorkspaceObject.
  string val = 2;
}

message WorkspaceObject_Set_PathResponse {
}

message WorkspaceObject_Get_PathRequest {
  // The id of the WorkspaceObject object.
  WorkspaceObjectInstance instance = 1;
}

message WorkspaceObject_Get_PathResponse {
  // Returns the pathname associated with the WorkspaceObject.
  string returnValue = 1;
}

message WorkspaceObject_Set_DisplayNameRequest {
  // The id of the WorkspaceObject object.
  WorkspaceObjectInstance instance = 1;
  // Specifies the display name for this WorkspaceObject.
  string val = 2;
}

message WorkspaceObject_Set_DisplayNameResponse {
}

message WorkspaceObject_Get_DisplayNameRequest {
  // The id of the WorkspaceObject object.
  WorkspaceObjectInstance instance = 1;
}

message WorkspaceObject_Get_DisplayNameResponse {
  // Specifies the display name for this WorkspaceObject.
  string returnValue = 1;
}

message WorkspaceObject_Get_IsCodeModuleRequest {
  // The id of the WorkspaceObject object.
  WorkspaceObjectInstance instance = 1;
}

message WorkspaceObject_Get_IsCodeModuleResponse {
  // Returns a value that indicates whether the WorkspaceObject refers to a code module.
  bool returnValue = 1;
}

message WorkspaceObject_Set_CodeModuleSeqFilePathRequest {
  // The id of the WorkspaceObject object.
  WorkspaceObjectInstance instance = 1;
  // Specifies the pathname of the sequence file to which this code module belongs.
  string val = 2;
}

message WorkspaceObject_Set_CodeModuleSeqFilePathResponse {
}

message WorkspaceObject_Get_CodeModuleSeqFilePathRequest {
  // The id of the WorkspaceObject object.
  WorkspaceObjectInstance instance = 1;
}

message WorkspaceObject_Get_CodeModuleSeqFilePathResponse {
  // The pathname of the sequence file. This pathname can be relative.
  string returnValue = 1;
}

message WorkspaceObject_Get_ObjectTypeRequest {
  // The id of the WorkspaceObject object.
  WorkspaceObjectInstance instance = 1;
}

message WorkspaceObject_Get_ObjectTypeResponse {
  // Returns the WorkspaceObject type.
  WorkspaceObjectTypes returnValue = 1;
}

message WorkspaceObject_Get_SourceControlStatusRequest {
  // The id of the WorkspaceObject object.
  WorkspaceObjectInstance instance = 1;
}

message WorkspaceObject_Get_SourceControlStatusResponse {
  // One of the values in SourceControlStatuses.
  SourceControlStatuses returnValue = 1;
}

message WorkspaceObject_Get_ProjectFileRequest {
  // The id of the WorkspaceObject object.
  WorkspaceObjectInstance instance = 1;
}

message WorkspaceObject_Get_ProjectFileResponse {
  // Returns the project file to which this object belongs.
  PropertyObjectFileInstance returnValue = 1;
}

message WorkspaceObject_Get_FileExistsRequest {
  // The id of the WorkspaceObject object.
  WorkspaceObjectInstance instance = 1;
}

message WorkspaceObject_Get_FileExistsResponse {
  // Returns a value that indicates whether the file associated with the WorkspaceObject exists.
  bool returnValue = 1;
}

message WorkspaceObject_Get_LastSourceControlMessagesRequest {
  // The id of the WorkspaceObject object.
  WorkspaceObjectInstance instance = 1;
}

message WorkspaceObject_Get_LastSourceControlMessagesResponse {
  // Returns the most recent information and error messages the source code control provider reports.
  string returnValue = 1;
}

message WorkspaceObject_Get_NumContainedObjectsRequest {
  // The id of the WorkspaceObject object.
  WorkspaceObjectInstance instance = 1;
}

message WorkspaceObject_Get_NumContainedObjectsResponse {
  // Returns the number of objects that this WorkspaceObject contains.
  int32 returnValue = 1;
}

// WatchExpressions
//
// Objects of the WatchExpressions class are collections of objects of the WatchExpression class.
//
service WatchExpressions {
  // Method: Insert
  //
  // Adds a new item to the collection and inserts it into the watch expression list.
  //
  // The TestStand Engine maintains a list of watch expressions. The engine automatically evaluates watch expressions with conditional break settings during execution. The engine only monitors for value changes in watch expressions for which the current sequence context matches the scope the WatchExpression.ClientSequenceFile, WatchExpression.ExecutionScope and WatchExpression.SequenceScope properties define. To add the newly created watch expression to the watch expression list the engine maintains, pass True for the insertInEngine parameter.
  // If the Engine.PersistWatchExpressions property is True, the engine associates the list of watch expressions with the current workspace. When you change the current workspace, the engine automatically saves the current watch expression list associated with the new workspace. The engine saves the watch expression list every time TestStand saves the workspace or sequence files in it.
  //
  // WatchExpressions_InsertRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: WatchExpressionsInstance - The id of the WatchExpressions object.
  //    - beforePos: WatchExpressionInstance - Specifies a reference to a WatchExpression object already in the list to specify the object before which TestStand inserts the new WatchExpression object. Pass NULL to insert the new object at the end of the list.
  //    - clientSequenceFileParam: ObjectInstance - Specifies the client sequence file to associate with the newly created WatchExpression object. Pass NULL to create a global watch expression, a watch expression associated with no client sequence file. If this parameter is not specified, the parameter defaults to NULL.
  //    - insertInEngine: ObjectInstance - Specifies whether to insert the new WatchExpression object in the watch expression list the engine maintains. Pass True to add the watch expression to the collection and to the watch expression list the engine maintains. Pass False to add only the new watch expression to the collection. If no value is specified, the behavior is the same as passing True.
  //
  // WatchExpressions_InsertResponse - The response message from the server. It provides the return value.
  //    - returnValue: WatchExpressionInstance - The newly created watch expression. 
  //
  rpc Insert(WatchExpressions_InsertRequest) returns (WatchExpressions_InsertResponse);
  
  
  // Method: Remove
  //
  // Removes a watch expression from the collection and the watch expression list that the engine maintains.
  //
  // This method removes only the watch expression from the collection and the watch expression list that the engine maintains. To delete the WatchExpression object itself, you must release any references to the object after calling this method. This method does not return an error if the WatchExpression object is not in the collection or in the watch expression list that the engine maintains.
  //
  // WatchExpressions_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: WatchExpressionsInstance - The id of the WatchExpressions object.
  //    - WatchExpression: WatchExpressionInstance - Specifies a reference to the WatchExpression object to remove from the collection.
  //
  // WatchExpressions_RemoveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Remove(WatchExpressions_RemoveRequest) returns (WatchExpressions_RemoveResponse);
  
  
  // Method: Clear
  //
  // Removes all WatchExpression objects from both the collection and the watch expression list the engine maintains.
  //
  // This method releases only the references to the WatchExpression objects the collection and the engine hold. To delete the WatchExpression objects, you must release any other references to the WatchExpression objects.
  //
  // WatchExpressions_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WatchExpressionsInstance - The id of the WatchExpressions object.
  //
  // WatchExpressions_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(WatchExpressions_ClearRequest) returns (WatchExpressions_ClearResponse);
  
  
  // Method: Clone
  //
  // Clones the WatchExpression objects in the collection and returns the cloned objects in a new collection.
  //
  // WatchExpressions_CloneRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: WatchExpressionsInstance - The id of the WatchExpressions object.
  //    - insertInEngine: ObjectInstance - Specifies if TestStand adds the new WatchExpression objects to the watch expression list the engine maintains. Pass True to add the watch expressions to the cloned collection and to the watch expression list the engine maintains. Pass False to add only the new watch expression to the cloned collection. If no value is specified, the behavior is the same as passing True.
  //
  // WatchExpressions_CloneResponse - The response message from the server. It provides the return value.
  //    - returnValue: WatchExpressionsInstance - A WatchExpression object collection that contains clones of the WatchExpression objects in the original collection. 
  //
  rpc Clone(WatchExpressions_CloneRequest) returns (WatchExpressions_CloneResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // WatchExpressions_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: WatchExpressionsInstance - The id of the WatchExpressions object.
  //    - index: int32 - Specifies the index of the item to retrieve within the collection.
  //
  // WatchExpressions_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: WatchExpressionInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(WatchExpressions_Get_ItemRequest) returns (WatchExpressions_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // WatchExpressions_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WatchExpressionsInstance - The id of the WatchExpressions object.
  //
  // WatchExpressions_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(WatchExpressions_Get_CountRequest) returns (WatchExpressions_Get_CountResponse);
  
  
}
message WatchExpressionsInstance {
  // Specifies the handle of the WatchExpressions instance in the server.
  string id = 1;
}

message WatchExpressionInstance {
  // Specifies the handle of the WatchExpression instance in the server.
  string id = 1;
}
message WatchExpressions_InsertRequest {
  // The id of the WatchExpressions object.
  WatchExpressionsInstance instance = 1;
  // Specifies a reference to a WatchExpression object already in the list to specify the object before which TestStand inserts the new WatchExpression object. Pass NULL to insert the new object at the end of the list.
  WatchExpressionInstance beforePos = 2;
  // Specifies the client sequence file to associate with the newly created WatchExpression object. Pass NULL to create a global watch expression, a watch expression associated with no client sequence file. If this parameter is not specified, the parameter defaults to NULL.
  PropertyObjectInstance clientSequenceFileParam = 3;
  // Specifies whether to insert the new WatchExpression object in the watch expression list the engine maintains. Pass True to add the watch expression to the collection and to the watch expression list the engine maintains. Pass False to add only the new watch expression to the collection. If no value is specified, the behavior is the same as passing True.
  optional bool insertInEngine = 4;
}

message WatchExpressions_InsertResponse {
  // The newly created watch expression.
  WatchExpressionInstance returnValue = 1;
}

message WatchExpressions_RemoveRequest {
  // The id of the WatchExpressions object.
  WatchExpressionsInstance instance = 1;
  // Specifies a reference to the WatchExpression object to remove from the collection.
  WatchExpressionInstance WatchExpression = 2;
}

message WatchExpressions_RemoveResponse {
}

message WatchExpressions_ClearRequest {
  // The id of the WatchExpressions object.
  WatchExpressionsInstance instance = 1;
}

message WatchExpressions_ClearResponse {
}

message WatchExpressions_CloneRequest {
  // The id of the WatchExpressions object.
  WatchExpressionsInstance instance = 1;
  // Specifies if TestStand adds the new WatchExpression objects to the watch expression list the engine maintains. Pass True to add the watch expressions to the cloned collection and to the watch expression list the engine maintains. Pass False to add only the new watch expression to the cloned collection. If no value is specified, the behavior is the same as passing True.
  optional bool insertInEngine = 2;
}

message WatchExpressions_CloneResponse {
  // A WatchExpression object collection that contains clones of the WatchExpression objects in the original collection.
  WatchExpressionsInstance returnValue = 1;
}

message WatchExpressions_Get_ItemRequest {
  // The id of the WatchExpressions object.
  WatchExpressionsInstance instance = 1;
  // Specifies the index of the item to retrieve within the collection.
  optional int32 index = 2;
}

message WatchExpressions_Get_ItemResponse {
  // The item at the specified index.
  WatchExpressionInstance returnValue = 1;
}

message WatchExpressions_Get_CountRequest {
  // The id of the WatchExpressions object.
  WatchExpressionsInstance instance = 1;
}

message WatchExpressions_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// WatchExpression
//
// Use objects of the WatchExpression class to monitor the values of properties and variables using expressions. Typically, you use WatchExpression objects to display run-time values in a Watch View pane in a user interface. A WatchExpression object defines an expression TestStand evaluates during sequence execution.
// You can configure a conditional breakpoint on a watch expression. The breakpoint suspends execution when a value of the watch expression changes, or whenever the coerced value of the watch expression evaluates to True. The TestStand Engine maintains a list of watch expressions and evaluates conditional breakpoints during execution.
// You can also specify the scope of the watch expression, which specifies whether the expression applies to all executions of the client sequence file or only the current execution, and whether to evaluate the watch expression only when executing within a specific sequence file or sequence.
// Use the collection object the Engine.GetWatchExpressions method returns to manage a watch expression list. You can create new watch expressions by using the WatchExpressions.Insert method, which adds a new watch expression to the collection and returns the new object. To add a watch expression to the list the engine maintains and monitors, pass True for the insertInEngine parameter.
//
service WatchExpression {
  // Method: Evaluate
  //
  // Evaluates the watch expression and returns the result.
  //
  // TestStand evaluates the watch expression within the context of the PropertyObject on which you call this method. This means that the expression can reference the subproperties of the PropertyObject as variables. This method modifies the context if the expression contains operators or method calls that change property values. This method throws an exception if the evaluation of the watch expression fails.
  //
  // WatchExpression_EvaluateRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: WatchExpressionInstance - The id of the WatchExpression object.
  //    - seqContext: SequenceContextInstance - Specifies the SequenceContext to use while evaluating the watch expression. This context must be associated with a currently running execution.
  //    - reserved: int32 - Pass 0 for this parameter.
  //
  // WatchExpression_EvaluateResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Result of the expression, in the form of PropertyObject. The PropertyObject can contain a value of any type depending on the expression. The returned PropertyObject is the actual object and not a copy. 
  //
  rpc Evaluate(WatchExpression_EvaluateRequest) returns (WatchExpression_EvaluateResponse);
  
  
  // Method: BreakpointTriggered
  //
  // Returns a value that indicates whether the suspension of the execution was a result of the breakpoint condition being met for the watch expression.
  //
  // Call this method after the TestStand Engine suspends an execution. Multiple watch expressions can return True for this method simultaneously if their breakpoint conditions are satisfied. This method returns the same value until the engine evaluates the watch expression again.
  //
  // WatchExpression_BreakpointTriggeredRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: WatchExpressionInstance - The id of the WatchExpression object.
  //    - seqContext: SequenceContextInstance - Specifies the sequence context for the suspended execution.
  //
  // WatchExpression_BreakpointTriggeredResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the breakpoint condition has been met. Otherwise, returns False. 
  //
  rpc BreakpointTriggered(WatchExpression_BreakpointTriggeredRequest) returns (WatchExpression_BreakpointTriggeredResponse);
  
  
  // Method: DisplayConfigurationDialog
  //
  // Launches the Watch Expression Settings dialog box, in which you can edit the settings of the watch expression.
  //
  // WatchExpression_DisplayConfigurationDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: WatchExpressionInstance - The id of the WatchExpression object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - context: SequenceContextInstance - Specifies the sequence context the dialog box uses to evaluate expressions specified for the watch expression. You can use the  Engine.NewEditContext method to obtain an edit-time sequence context.
  //    - dlgOptions: int32 - Specifies any combination of the CommonDialogOptions constants
  //
  // WatchExpression_DisplayConfigurationDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the user clicks OK. Otherwise, returns False. 
  //
  rpc DisplayConfigurationDialog(WatchExpression_DisplayConfigurationDialogRequest) returns (WatchExpression_DisplayConfigurationDialogResponse);
  
  
  // Method: GetScopingContext
  //
  // Returns the scoping context, if any, associated with the watch expression.
  //
  // The scoping context is stored when the WatchExpression.UseScopingContext property is True and a thread enters the specified scope. The context is released if the UseScopingContext property is False or if the specified scope is changed.
  //
  // WatchExpression_GetScopingContextRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: WatchExpressionInstance - The id of the WatchExpression object.
  //    - currentSeqContext: SequenceContextInstance - Specifies a reference to the sequence context from the current execution. 
  //
  // WatchExpression_GetScopingContextResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceContextInstance - The sequence context associated with the specified scope. Returns NULL if a sequence context is not associated with the scope or if the WatchExpressionUseScopingContext property is False. 
  //
  rpc GetScopingContext(WatchExpression_GetScopingContextRequest) returns (WatchExpression_GetScopingContextResponse);
  
  

  // Property: ClientSequenceFile
  //
  // Specifies the name of the client sequence file associated with the watch expression.
  //
  // Every watch expression created in the sequence editor Watch View pane is associated with a client sequence file, and is visible only within executions that use the specified client sequence file. By default, a watch expression is associated with the client sequence file that was executing when the watch expression was created. The watch expression is valid throughout the execution of the specified client sequence file, unless it is restricted by other scope properties, such as sequence filename or sequence. All scoping properties have the suffix Scope attached to their name.
  // A watch expression without an associated client sequence file is called a global watch expression. Global watch expressions are visible in executions for all client sequence files, unless restricted by other scope properties. You can create Global watch expressions using the Watch Expressions tab of the Edit Breakpoints/Watch Expressions dialog box.
  //
  // WatchExpression_Set_ClientSequenceFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WatchExpressionInstance - The id of the WatchExpression object.
  //    - clientFileNameParam: string - Specifies the name of the client sequence file associated with the watch expression. 
  //
  // WatchExpression_Set_ClientSequenceFileResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // WatchExpression_Get_ClientSequenceFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WatchExpressionInstance - The id of the WatchExpression object.
  //
  // WatchExpression_Get_ClientSequenceFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the name of the client sequence file associated with the watch expression. 
  //
  rpc Set_ClientSequenceFile(WatchExpression_Set_ClientSequenceFileRequest) returns (WatchExpression_Set_ClientSequenceFileResponse);
  rpc Get_ClientSequenceFile(WatchExpression_Get_ClientSequenceFileRequest) returns (WatchExpression_Get_ClientSequenceFileResponse);
  
  
  // Property: SequenceFileScope
  //
  // Specifies the sequence file to which the watch expression applies.
  //
  // Limits the scope of a watch expression by associating the object with a particular sequence file. The TestStand Engine only evaluates a watch expression when a sequence in the specified sequence file is executing. Set this property to an empty string to instruct TestStand to evaluate the watch expression for all sequence files. You can specify a sequence filename or an absolute path name.
  // Use the WatchExpression.SequenceScope property to limit the scope of the watch expression to sequences with a particular name.
  //
  // WatchExpression_Set_SequenceFileScopeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WatchExpressionInstance - The id of the WatchExpression object.
  //    - sequenceFileNameParam: string - Specifies the sequence file to which the watch expression applies. 
  //
  // WatchExpression_Set_SequenceFileScopeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // WatchExpression_Get_SequenceFileScopeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WatchExpressionInstance - The id of the WatchExpression object.
  //
  // WatchExpression_Get_SequenceFileScopeResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the sequence file to which the watch expression applies. 
  //
  rpc Set_SequenceFileScope(WatchExpression_Set_SequenceFileScopeRequest) returns (WatchExpression_Set_SequenceFileScopeResponse);
  rpc Get_SequenceFileScope(WatchExpression_Get_SequenceFileScopeRequest) returns (WatchExpression_Get_SequenceFileScopeResponse);
  
  
  // Property: SequenceScope
  //
  // Specifies the name of the sequence to which the watch expression applies.
  //
  // Limits the scope of the watch expression by associating the object with a particular sequence name. The TestStand Engine evaluates a watch expression only when the specified sequence executes. Set this property to an empty string to evaluate the watch expression for all sequences.
  //
  // WatchExpression_Set_SequenceScopeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WatchExpressionInstance - The id of the WatchExpression object.
  //    - sequenceNameParam: string - Specifies the name of the sequence to which the watch expression applies. 
  //
  // WatchExpression_Set_SequenceScopeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // WatchExpression_Get_SequenceScopeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WatchExpressionInstance - The id of the WatchExpression object.
  //
  // WatchExpression_Get_SequenceScopeResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the name of the sequence to which the watch expression applies. 
  //
  rpc Set_SequenceScope(WatchExpression_Set_SequenceScopeRequest) returns (WatchExpression_Set_SequenceScopeResponse);
  rpc Get_SequenceScope(WatchExpression_Get_SequenceScopeRequest) returns (WatchExpression_Get_SequenceScopeResponse);
  
  
  // Property: ExecutionScope
  //
  // Specifies the execution to which the watch expression applies.
  //
  // Limits the scope of the watch expression by associating the object with a particular execution. The TestStand Engine only evaluates a watch expression for the specified execution. Watch expressions that apply to a specific execution are discarded when you release the execution. Set this property to NULL to associate the watch expression with all executions for the specified client sequence file. Watch expressions that apply to all executions are automatically saved and reloaded if the Engine.PersistWatchExpressions property is set to True.
  //
  // WatchExpression_Set_ExecutionScopeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WatchExpressionInstance - The id of the WatchExpression object.
  //    - execParam: ExecutionInstance - Specifies the execution to which the watch expression applies. 
  //
  // WatchExpression_Set_ExecutionScopeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // WatchExpression_Get_ExecutionScopeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WatchExpressionInstance - The id of the WatchExpression object.
  //
  // WatchExpression_Get_ExecutionScopeResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionInstance - Specifies the execution to which the watch expression applies. 
  //
  rpc Set_ExecutionScope(WatchExpression_Set_ExecutionScopeRequest) returns (WatchExpression_Set_ExecutionScopeResponse);
  rpc Get_ExecutionScope(WatchExpression_Get_ExecutionScopeRequest) returns (WatchExpression_Get_ExecutionScopeResponse);
  
  
  // Property: Expression
  //
  // Specifies the expression for the watch expression.
  //
  // Set this property to a variable name, property name, or expression. Call the WatchExpression.Evaluate method to evaluate the expression against a specific context.
  //
  // WatchExpression_Set_ExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WatchExpressionInstance - The id of the WatchExpression object.
  //    - val: string - Specifies the expression for the watch expression. 
  //
  // WatchExpression_Set_ExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // WatchExpression_Get_ExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WatchExpressionInstance - The id of the WatchExpression object.
  //
  // WatchExpression_Get_ExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the expression for the watch expression. 
  //
  rpc Set_Expression(WatchExpression_Set_ExpressionRequest) returns (WatchExpression_Set_ExpressionResponse);
  rpc Get_Expression(WatchExpression_Get_ExpressionRequest) returns (WatchExpression_Get_ExpressionResponse);
  
  
  // Property: NumericFormat
  //
  // Specifies the numeric format to use when displaying the value the WatchExpression.Evaluate method returns.
  //
  // This property applies only to watch expressions that evaluate to numeric, container, or array values. For arrays and containers, the numeric format applies to all the subproperties of an array or container. The syntax of the numeric format string is identical to the format string the C printf function accepts, with the following exceptions:
  // * Place a $ character after the % character in the format string to remove trailing zeros after the decimal point.    * Use a format code of %b to format a number in binary.    * Specify an empty string to set the format to the default numeric format.
  //
  // WatchExpression_Set_NumericFormatRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WatchExpressionInstance - The id of the WatchExpression object.
  //    - val: string - Specifies the numeric format to use when displaying the value the WatchExpression.Evaluate method returns. 
  //
  // WatchExpression_Set_NumericFormatResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // WatchExpression_Get_NumericFormatRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WatchExpressionInstance - The id of the WatchExpression object.
  //
  // WatchExpression_Get_NumericFormatResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the numeric format to use when displaying the value the WatchExpression.Evaluate method returns. 
  //
  rpc Set_NumericFormat(WatchExpression_Set_NumericFormatRequest) returns (WatchExpression_Set_NumericFormatResponse);
  rpc Get_NumericFormat(WatchExpression_Get_NumericFormatRequest) returns (WatchExpression_Get_NumericFormatResponse);
  
  
  // Property: BreakpointType
  //
  // Specifies the type of the conditional breakpoint settings for the watch expression.
  //
  // The TestStand Engine maintains and monitors a list of watch expressions and evaluates conditional breakpoint settings during execution. You can add a watch expression to the list that the engine maintains and monitors by passing True to the insertInEngine parameter of the WatchExpressions.Insert method. Breakpoints are ignored if you disable them using the StationOptions.BreakpointsEnabled property.
  //
  // WatchExpression_Set_BreakpointTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WatchExpressionInstance - The id of the WatchExpression object.
  //    - val: WatchExpressionBreakType - Specifies the type of the conditional breakpoint settings for the watch expression. 
  //
  // WatchExpression_Set_BreakpointTypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // WatchExpression_Get_BreakpointTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WatchExpressionInstance - The id of the WatchExpression object.
  //
  // WatchExpression_Get_BreakpointTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: WatchExpressionBreakType - Specifies the type of the conditional breakpoint settings for the watch expression. 
  //
  rpc Set_BreakpointType(WatchExpression_Set_BreakpointTypeRequest) returns (WatchExpression_Set_BreakpointTypeResponse);
  rpc Get_BreakpointType(WatchExpression_Get_BreakpointTypeRequest) returns (WatchExpression_Get_BreakpointTypeResponse);
  
  
  // Property: UniqueWatchId
  //
  // Returns an identification string unique to this watch expression in all instances of the TestStand Engine.
  //
  // The unique ID of a watch expression persists if the watch expression persists.
  //
  // WatchExpression_Get_UniqueWatchIdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WatchExpressionInstance - The id of the WatchExpression object.
  //
  // WatchExpression_Get_UniqueWatchIdResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns an identification string unique to this watch expression in all instances of the TestStand Engine. 
  //
  rpc Get_UniqueWatchId(WatchExpression_Get_UniqueWatchIdRequest) returns (WatchExpression_Get_UniqueWatchIdResponse);
  
  
  // Property: UseScopingContext
  //
  // Specifies if TestStand attaches a watch expression to a sequence context that matches the scoping properties of the watch expression. While the attached sequence context is valid, the watch expression uses the sequence context to evaluate the watch expression, even if the thread adds additional call stack levels by invoking subsequences.
  //
  // If this property is set, TestStand automatically caches the scoping context when a thread enters a specified scope. Otherwise, use the active context to evaluate the watch expression.
  // This property defaults to False.
  //
  // WatchExpression_Set_UseScopingContextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WatchExpressionInstance - The id of the WatchExpression object.
  //    - val: bool - Specifies if TestStand attaches a watch expression to a sequence context that matches the scoping properties of the watch expression. While the attached sequence context is valid, the watch expression uses the sequence context to evaluate the watch expression, even if the thread adds additional call stack levels by invoking subsequences. 
  //
  // WatchExpression_Set_UseScopingContextResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // WatchExpression_Get_UseScopingContextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: WatchExpressionInstance - The id of the WatchExpression object.
  //
  // WatchExpression_Get_UseScopingContextResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if TestStand attaches a watch expression to a sequence context that matches the scoping properties of the watch expression. While the attached sequence context is valid, the watch expression uses the sequence context to evaluate the watch expression, even if the thread adds additional call stack levels by invoking subsequences. 
  //
  rpc Set_UseScopingContext(WatchExpression_Set_UseScopingContextRequest) returns (WatchExpression_Set_UseScopingContextResponse);
  rpc Get_UseScopingContext(WatchExpression_Get_UseScopingContextRequest) returns (WatchExpression_Get_UseScopingContextResponse);
  
  
}
message WatchExpression_EvaluateRequest {
  // The id of the WatchExpression object.
  WatchExpressionInstance instance = 1;
  // Specifies the SequenceContext to use while evaluating the watch expression. This context must be associated with a currently running execution.
  SequenceContextInstance seqContext = 2;
  // Pass 0 for this parameter.
  int32 reserved = 3;
}

message WatchExpression_EvaluateResponse {
  // Result of the expression, in the form of PropertyObject. The PropertyObject can contain a value of any type depending on the expression. The returned PropertyObject is the actual object and not a copy.
  PropertyObjectInstance returnValue = 1;
}

message WatchExpression_BreakpointTriggeredRequest {
  // The id of the WatchExpression object.
  WatchExpressionInstance instance = 1;
  // Specifies the sequence context for the suspended execution.
  SequenceContextInstance seqContext = 2;
}

message WatchExpression_BreakpointTriggeredResponse {
  // Returns True if the breakpoint condition has been met. Otherwise, returns False.
  bool returnValue = 1;
}

message WatchExpression_DisplayConfigurationDialogRequest {
  // The id of the WatchExpression object.
  WatchExpressionInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies the sequence context the dialog box uses to evaluate expressions specified for the watch expression. You can use the  Engine.NewEditContext method to obtain an edit-time sequence context.
  SequenceContextInstance context = 3;
  // Specifies any combination of the CommonDialogOptions constants
  CommonDialogOptions dlgOptions = 4;
}

message WatchExpression_DisplayConfigurationDialogResponse {
  // Returns True if the user clicks OK. Otherwise, returns False.
  bool returnValue = 1;
}

message WatchExpression_GetScopingContextRequest {
  // The id of the WatchExpression object.
  WatchExpressionInstance instance = 1;
  // Specifies a reference to the sequence context from the current execution.
  SequenceContextInstance currentSeqContext = 2;
}

message WatchExpression_GetScopingContextResponse {
  // The sequence context associated with the specified scope. Returns NULL if a sequence context is not associated with the scope or if the WatchExpressionUseScopingContext property is False.
  SequenceContextInstance returnValue = 1;
}

message WatchExpression_Set_ClientSequenceFileRequest {
  // The id of the WatchExpression object.
  WatchExpressionInstance instance = 1;
  // Specifies the name of the client sequence file associated with the watch expression.
  string clientFileNameParam = 2;
}

message WatchExpression_Set_ClientSequenceFileResponse {
}

message WatchExpression_Get_ClientSequenceFileRequest {
  // The id of the WatchExpression object.
  WatchExpressionInstance instance = 1;
}

message WatchExpression_Get_ClientSequenceFileResponse {
  // Specifies the name of the client sequence file associated with the watch expression.
  string returnValue = 1;
}

message WatchExpression_Set_SequenceFileScopeRequest {
  // The id of the WatchExpression object.
  WatchExpressionInstance instance = 1;
  // Specifies the sequence file to which the watch expression applies.
  string sequenceFileNameParam = 2;
}

message WatchExpression_Set_SequenceFileScopeResponse {
}

message WatchExpression_Get_SequenceFileScopeRequest {
  // The id of the WatchExpression object.
  WatchExpressionInstance instance = 1;
}

message WatchExpression_Get_SequenceFileScopeResponse {
  // Specifies the sequence file to which the watch expression applies.
  string returnValue = 1;
}

message WatchExpression_Set_SequenceScopeRequest {
  // The id of the WatchExpression object.
  WatchExpressionInstance instance = 1;
  // Specifies the name of the sequence to which the watch expression applies.
  string sequenceNameParam = 2;
}

message WatchExpression_Set_SequenceScopeResponse {
}

message WatchExpression_Get_SequenceScopeRequest {
  // The id of the WatchExpression object.
  WatchExpressionInstance instance = 1;
}

message WatchExpression_Get_SequenceScopeResponse {
  // Specifies the name of the sequence to which the watch expression applies.
  string returnValue = 1;
}

message WatchExpression_Set_ExecutionScopeRequest {
  // The id of the WatchExpression object.
  WatchExpressionInstance instance = 1;
  // Specifies the execution to which the watch expression applies.
  ExecutionInstance execParam = 2;
}

message WatchExpression_Set_ExecutionScopeResponse {
}

message WatchExpression_Get_ExecutionScopeRequest {
  // The id of the WatchExpression object.
  WatchExpressionInstance instance = 1;
}

message WatchExpression_Get_ExecutionScopeResponse {
  // Specifies the execution to which the watch expression applies.
  ExecutionInstance returnValue = 1;
}

message WatchExpression_Set_ExpressionRequest {
  // The id of the WatchExpression object.
  WatchExpressionInstance instance = 1;
  // Specifies the expression for the watch expression.
  string val = 2;
}

message WatchExpression_Set_ExpressionResponse {
}

message WatchExpression_Get_ExpressionRequest {
  // The id of the WatchExpression object.
  WatchExpressionInstance instance = 1;
}

message WatchExpression_Get_ExpressionResponse {
  // Specifies the expression for the watch expression.
  string returnValue = 1;
}

message WatchExpression_Set_NumericFormatRequest {
  // The id of the WatchExpression object.
  WatchExpressionInstance instance = 1;
  // Specifies the numeric format to use when displaying the value the WatchExpression.Evaluate method returns.
  string val = 2;
}

message WatchExpression_Set_NumericFormatResponse {
}

message WatchExpression_Get_NumericFormatRequest {
  // The id of the WatchExpression object.
  WatchExpressionInstance instance = 1;
}

message WatchExpression_Get_NumericFormatResponse {
  // Specifies the numeric format to use when displaying the value the WatchExpression.Evaluate method returns.
  string returnValue = 1;
}

message WatchExpression_Set_BreakpointTypeRequest {
  // The id of the WatchExpression object.
  WatchExpressionInstance instance = 1;
  // Specifies the type of the conditional breakpoint settings for the watch expression.
  WatchExpressionBreakType val = 2;
}

message WatchExpression_Set_BreakpointTypeResponse {
}

message WatchExpression_Get_BreakpointTypeRequest {
  // The id of the WatchExpression object.
  WatchExpressionInstance instance = 1;
}

message WatchExpression_Get_BreakpointTypeResponse {
  // Specifies the type of the conditional breakpoint settings for the watch expression.
  WatchExpressionBreakType returnValue = 1;
}

message WatchExpression_Get_UniqueWatchIdRequest {
  // The id of the WatchExpression object.
  WatchExpressionInstance instance = 1;
}

message WatchExpression_Get_UniqueWatchIdResponse {
  // Returns an identification string unique to this watch expression in all instances of the TestStand Engine.
  string returnValue = 1;
}

message WatchExpression_Set_UseScopingContextRequest {
  // The id of the WatchExpression object.
  WatchExpressionInstance instance = 1;
  // Specifies if TestStand attaches a watch expression to a sequence context that matches the scoping properties of the watch expression. While the attached sequence context is valid, the watch expression uses the sequence context to evaluate the watch expression, even if the thread adds additional call stack levels by invoking subsequences.
  bool val = 2;
}

message WatchExpression_Set_UseScopingContextResponse {
}

message WatchExpression_Get_UseScopingContextRequest {
  // The id of the WatchExpression object.
  WatchExpressionInstance instance = 1;
}

message WatchExpression_Get_UseScopingContextResponse {
  // Specifies if TestStand attaches a watch expression to a sequence context that matches the scoping properties of the watch expression. While the attached sequence context is valid, the watch expression uses the sequence context to evaluate the watch expression, even if the thread adds additional call stack levels by invoking subsequences.
  bool returnValue = 1;
}

// SearchDirectories
//
// This collection class contains elements using the SearchDirectory type. The collection specifies the directories TestStand searches for finding files. The directories listed first in the collection take precedence over those listed later in the collection. When you run TestStand for the first time, the collection contains a default set of search directory paths.
//
service SearchDirectories {
  // Method: Insert
  //
  // Adds a new item to the collection.
  //
  // A search directory is a search path for finding files.
  //
  // SearchDirectories_InsertRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SearchDirectoriesInstance - The id of the SearchDirectories object.
  //    - index: int32 - TestStand maintains an internal list of search directories in which the lower index paths take precedence over the higher index paths. The index parameter specifies the index where the new search directory must be inserted. If you pass a value of -1, the new directory is inserted at the end of the list.
  //    - searchSubDirs: bool - Specifies whether to include all subdirectories within the selected path in the overall search path.
  //    - fileExtRestrict: string - Specifies the specific file extensions that restrict which files apply to the search directory. If the exclude parameter is False, TestStand searches in the directories only for files with the specified extensions. If the exclude parameter is True, TestStand searches in the directories for files that do not have the specified file extensions. For example, to search for only DLLs and executable files, pass "DLL,EXE" for this parameter and False for the exclude parameter.
  //    - exclude: bool - If you pass False, TestStand searches only for files with the specific file extensions specified in the fileExtRestrict parameter. If you pass True, TestStand searches for files without the specific extension.
  //
  // SearchDirectories_InsertResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Insert(SearchDirectories_InsertRequest) returns (SearchDirectories_InsertResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // You cannot delete predefined search directories.
  //
  // SearchDirectories_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SearchDirectoriesInstance - The id of the SearchDirectories object.
  //    - index: int32 - Specifies the zero-based index of the item to remove.
  //
  // SearchDirectories_RemoveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Remove(SearchDirectories_RemoveRequest) returns (SearchDirectories_RemoveResponse);
  
  
  // Method: MoveSearchDirectory
  //
  // Moves a search directory within the collection.
  //
  // TestStand maintains an internal list of search directories in which the lower index paths take precedence over the higher index paths.
  //
  // SearchDirectories_MoveSearchDirectoryRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SearchDirectoriesInstance - The id of the SearchDirectories object.
  //    - index: int32 - Specifies a zero-based index indicating the new position of the search directory to move.
  //    - newIndex: int32 - Specifies a zero-based index indicating the new position of the search directory to move.
  //
  // SearchDirectories_MoveSearchDirectoryResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc MoveSearchDirectory(SearchDirectories_MoveSearchDirectoryRequest) returns (SearchDirectories_MoveSearchDirectoryResponse);
  
  
  // Method: Reload
  //
  // Instructs TestStand to discard the current search directory list and reload the list from disk.
  //
  // Note: TestStand immediately updates the TestExec.ini configuration file when you make changes to the search directories programmatically or by using a user interface. Use the SearchDirectories.Reload method to update the search directories after an external application, such as a source code control application, modifies the TestExec.ini configuration file.
  //
  // SearchDirectories_ReloadRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchDirectoriesInstance - The id of the SearchDirectories object.
  //
  // SearchDirectories_ReloadResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Reload(SearchDirectories_ReloadRequest) returns (SearchDirectories_ReloadResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // SearchDirectories_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SearchDirectoriesInstance - The id of the SearchDirectories object.
  //    - index: int32 - Specifies the zero-based index of the item to retrieve.
  //
  // SearchDirectories_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: SearchDirectoryInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(SearchDirectories_Get_ItemRequest) returns (SearchDirectories_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // SearchDirectories_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchDirectoriesInstance - The id of the SearchDirectories object.
  //
  // SearchDirectories_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(SearchDirectories_Get_CountRequest) returns (SearchDirectories_Get_CountResponse);
  
  
}
message SearchDirectoriesInstance {
  // Specifies the handle of the SearchDirectories instance in the server.
  string id = 1;
}

message SearchDirectoryInstance {
  // Specifies the handle of the SearchDirectory instance in the server.
  string id = 1;
}
message SearchDirectories_InsertRequest {
  // The id of the SearchDirectories object.
  SearchDirectoriesInstance instance = 1;
  // Specifies the path used to find files.
  string Path = 2;
  // TestStand maintains an internal list of search directories in which the lower index paths take precedence over the higher index paths. The index parameter specifies the index where the new search directory must be inserted. If you pass a value of -1, the new directory is inserted at the end of the list.
  int32 index = 3;
  // Specifies whether to include all subdirectories within the selected path in the overall search path.
  bool searchSubDirs = 4;
  // Specifies the specific file extensions that restrict which files apply to the search directory. If the exclude parameter is False, TestStand searches in the directories only for files with the specified extensions. If the exclude parameter is True, TestStand searches in the directories for files that do not have the specified file extensions. For example, to search for only DLLs and executable files, pass "DLL,EXE" for this parameter and False for the exclude parameter.
  string fileExtRestrict = 5;
  // If you pass False, TestStand searches only for files with the specific file extensions specified in the fileExtRestrict parameter. If you pass True, TestStand searches for files without the specific extension.
  bool exclude = 6;
  // Set this parameter to False if you want the search directory to be included in the overall search path. This setting allows the user to disable the search directory without deleting it from the list.
  bool Disabled = 7;
}

message SearchDirectories_InsertResponse {
}

message SearchDirectories_RemoveRequest {
  // The id of the SearchDirectories object.
  SearchDirectoriesInstance instance = 1;
  // Specifies the zero-based index of the item to remove.
  int32 index = 2;
}

message SearchDirectories_RemoveResponse {
}

message SearchDirectories_MoveSearchDirectoryRequest {
  // The id of the SearchDirectories object.
  SearchDirectoriesInstance instance = 1;
  // Specifies a zero-based index indicating the new position of the search directory to move.
  int32 index = 2;
  // Specifies a zero-based index indicating the new position of the search directory to move.
  int32 newIndex = 3;
}

message SearchDirectories_MoveSearchDirectoryResponse {
}

message SearchDirectories_ReloadRequest {
  // The id of the SearchDirectories object.
  SearchDirectoriesInstance instance = 1;
}

message SearchDirectories_ReloadResponse {
}

message SearchDirectories_Get_ItemRequest {
  // The id of the SearchDirectories object.
  SearchDirectoriesInstance instance = 1;
  // Specifies the zero-based index of the item to retrieve.
  optional int32 index = 2;
}

message SearchDirectories_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  SearchDirectoryInstance returnValue = 1;
}

message SearchDirectories_Get_CountRequest {
  // The id of the SearchDirectories object.
  SearchDirectoriesInstance instance = 1;
}

message SearchDirectories_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// SearchDirectory
//
// A SearchDirectory object specifies a directory in which TestStand searches for finding files. An object of this class specifies a path to an explicit directory or specifies a predefined directory, such as the TestStand directory or the Microsoft Windows directory. An object specifies any file extension restrictions and whether to search subdirectories.
//
service SearchDirectory {
  // Property: Type
  //
  // Several types of search directories exist. This property returns the type of search directory.
  //
  // SearchDirectory_Get_TypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchDirectoryInstance - The id of the SearchDirectory object.
  //
  // SearchDirectory_Get_TypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: SearchDirectoryTypes - Several types of search directories exist. This property returns the type of search directory. 
  //
  rpc Get_Type(SearchDirectory_Get_TypeRequest) returns (SearchDirectory_Get_TypeResponse);
  
  
  // Property: Path
  //
  // Specifies the path used to find files.
  //
  // Specifies the directory path when the value of the SearchDirectory.Type property is SearchDirectory_ExplicitDir. This property is read-only for all other directory types, and TestStand returns the path of the non-explicit directory. TestStand returns an empty string when the directory type is SearchDirectoryType_ContainingProjectDir or SearchDirectoryType_CurrentSequenceFileDir. TestStand returns an empty string if the directory type is SearchDirectoryType_CurrentWorkspaceDir when no workspace is loaded.
  //
  // SearchDirectory_Set_PathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchDirectoryInstance - The id of the SearchDirectory object.
  //    - val: string - Specifies the path used to find files. 
  //
  // SearchDirectory_Set_PathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SearchDirectory_Get_PathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchDirectoryInstance - The id of the SearchDirectory object.
  //
  // SearchDirectory_Get_PathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the path used to find files. 
  //
  rpc Set_Path(SearchDirectory_Set_PathRequest) returns (SearchDirectory_Set_PathResponse);
  rpc Get_Path(SearchDirectory_Get_PathRequest) returns (SearchDirectory_Get_PathResponse);
  
  
  // Property: SearchSubdirectories
  //
  // Specifies whether to include all subdirectories within the selected path in the overall search directory path.
  //
  // SearchDirectory_Set_SearchSubdirectoriesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchDirectoryInstance - The id of the SearchDirectory object.
  //    - val: bool - Specifies whether to include all subdirectories within the selected path in the overall search directory path. 
  //
  // SearchDirectory_Set_SearchSubdirectoriesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SearchDirectory_Get_SearchSubdirectoriesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchDirectoryInstance - The id of the SearchDirectory object.
  //
  // SearchDirectory_Get_SearchSubdirectoriesResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether to include all subdirectories within the selected path in the overall search directory path. 
  //
  rpc Set_SearchSubdirectories(SearchDirectory_Set_SearchSubdirectoriesRequest) returns (SearchDirectory_Set_SearchSubdirectoriesResponse);
  rpc Get_SearchSubdirectories(SearchDirectory_Get_SearchSubdirectoriesRequest) returns (SearchDirectory_Get_SearchSubdirectoriesResponse);
  
  
  // Property: FileExtensionRestrictions
  //
  // Specifies the specific file extensions that restrict which files apply to the search directory. If the SearchDirectory.ExcludeFileExtension property is False, TestStand searches only for files in the directory with the specified extension. If the exclude parameter is True, TestStand searches only for files in the directory that does not have the specified file extensions. For example, to search only for DLLs and executable files, enter "DLL, EXE" and set the SearchDirectory.ExcludeFileExtension property to False.
  //
  // SearchDirectory_Set_FileExtensionRestrictionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchDirectoryInstance - The id of the SearchDirectory object.
  //    - val: string - Specifies the specific file extensions that restrict which files apply to the search directory. If the SearchDirectory.ExcludeFileExtension property is False, TestStand searches only for files in the directory with the specified extension. If the exclude parameter is True, TestStand searches only for files in the directory that does not have the specified file extensions. For example, to search only for DLLs and executable files, enter "DLL, EXE" and set the SearchDirectory.ExcludeFileExtension property to False. 
  //
  // SearchDirectory_Set_FileExtensionRestrictionsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SearchDirectory_Get_FileExtensionRestrictionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchDirectoryInstance - The id of the SearchDirectory object.
  //
  // SearchDirectory_Get_FileExtensionRestrictionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the specific file extensions that restrict which files apply to the search directory. If the SearchDirectory.ExcludeFileExtension property is False, TestStand searches only for files in the directory with the specified extension. If the exclude parameter is True, TestStand searches only for files in the directory that does not have the specified file extensions. For example, to search only for DLLs and executable files, enter "DLL, EXE" and set the SearchDirectory.ExcludeFileExtension property to False. 
  //
  rpc Set_FileExtensionRestrictions(SearchDirectory_Set_FileExtensionRestrictionsRequest) returns (SearchDirectory_Set_FileExtensionRestrictionsResponse);
  rpc Get_FileExtensionRestrictions(SearchDirectory_Get_FileExtensionRestrictionsRequest) returns (SearchDirectory_Get_FileExtensionRestrictionsResponse);
  
  
  // Property: ExcludeFileExtension
  //
  // Set this property to False if you want TestStand to search only for files with the file extensions you specify in the SearchDirectory.FileExtensionRestrictions property. Set this property to True if you want TestStand to search only for files that do not have the file extensions specified in the SearchDirectory.FileExtensionRestrictions property.
  //
  // SearchDirectory_Set_ExcludeFileExtensionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchDirectoryInstance - The id of the SearchDirectory object.
  //    - val: bool - Set this property to False if you want TestStand to search only for files with the file extensions you specify in the SearchDirectory.FileExtensionRestrictions property. Set this property to True if you want TestStand to search only for files that do not have the file extensions specified in the SearchDirectory.FileExtensionRestrictions property. 
  //
  // SearchDirectory_Set_ExcludeFileExtensionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SearchDirectory_Get_ExcludeFileExtensionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchDirectoryInstance - The id of the SearchDirectory object.
  //
  // SearchDirectory_Get_ExcludeFileExtensionResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Set this property to False if you want TestStand to search only for files with the file extensions you specify in the SearchDirectory.FileExtensionRestrictions property. Set this property to True if you want TestStand to search only for files that do not have the file extensions specified in the SearchDirectory.FileExtensionRestrictions property. 
  //
  rpc Set_ExcludeFileExtension(SearchDirectory_Set_ExcludeFileExtensionRequest) returns (SearchDirectory_Set_ExcludeFileExtensionResponse);
  rpc Get_ExcludeFileExtension(SearchDirectory_Get_ExcludeFileExtensionRequest) returns (SearchDirectory_Get_ExcludeFileExtensionResponse);
  
  
  // Property: Disabled
  //
  // If you want the search directory to be included in the overall search path, set this property to False. If you set this property to True, the search directory is disabled but is included in the search directories list.
  //
  // SearchDirectory_Set_DisabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchDirectoryInstance - The id of the SearchDirectory object.
  //    - val: bool - If you want the search directory to be included in the overall search path, set this property to False. If you set this property to True, the search directory is disabled but is included in the search directories list. 
  //
  // SearchDirectory_Set_DisabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SearchDirectory_Get_DisabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchDirectoryInstance - The id of the SearchDirectory object.
  //
  // SearchDirectory_Get_DisabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - If you want the search directory to be included in the overall search path, set this property to False. If you set this property to True, the search directory is disabled but is included in the search directories list. 
  //
  rpc Set_Disabled(SearchDirectory_Set_DisabledRequest) returns (SearchDirectory_Set_DisabledResponse);
  rpc Get_Disabled(SearchDirectory_Get_DisabledRequest) returns (SearchDirectory_Get_DisabledResponse);
  
  
  // Property: ExcludeHiddenSubdirectories
  //
  // Specifies to exclude search directory subdirectories that specify the Hidden attribute in the Microsoft Windows file system. This property is False by default and has no effect unless the SearchDirectory.SearchSubdirectories property is True.
  //
  // SearchDirectory_Set_ExcludeHiddenSubdirectoriesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchDirectoryInstance - The id of the SearchDirectory object.
  //    - val: bool - Specifies to exclude search directory subdirectories that specify the Hidden attribute in the Microsoft Windows file system. This property is False by default and has no effect unless the SearchDirectory.SearchSubdirectories property is True. 
  //
  // SearchDirectory_Set_ExcludeHiddenSubdirectoriesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SearchDirectory_Get_ExcludeHiddenSubdirectoriesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SearchDirectoryInstance - The id of the SearchDirectory object.
  //
  // SearchDirectory_Get_ExcludeHiddenSubdirectoriesResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies to exclude search directory subdirectories that specify the Hidden attribute in the Microsoft Windows file system. This property is False by default and has no effect unless the SearchDirectory.SearchSubdirectories property is True. 
  //
  rpc Set_ExcludeHiddenSubdirectories(SearchDirectory_Set_ExcludeHiddenSubdirectoriesRequest) returns (SearchDirectory_Set_ExcludeHiddenSubdirectoriesResponse);
  rpc Get_ExcludeHiddenSubdirectories(SearchDirectory_Get_ExcludeHiddenSubdirectoriesRequest) returns (SearchDirectory_Get_ExcludeHiddenSubdirectoriesResponse);
  
  
}
message SearchDirectory_Get_TypeRequest {
  // The id of the SearchDirectory object.
  SearchDirectoryInstance instance = 1;
}

message SearchDirectory_Get_TypeResponse {
  // Several types of search directories exist. This property returns the type of search directory.
  SearchDirectoryTypes returnValue = 1;
}

message SearchDirectory_Set_PathRequest {
  // The id of the SearchDirectory object.
  SearchDirectoryInstance instance = 1;
  // Specifies the path used to find files.
  string val = 2;
}

message SearchDirectory_Set_PathResponse {
}

message SearchDirectory_Get_PathRequest {
  // The id of the SearchDirectory object.
  SearchDirectoryInstance instance = 1;
}

message SearchDirectory_Get_PathResponse {
  // Specifies the path used to find files.
  string returnValue = 1;
}

message SearchDirectory_Set_SearchSubdirectoriesRequest {
  // The id of the SearchDirectory object.
  SearchDirectoryInstance instance = 1;
  // Specifies whether to include all subdirectories within the selected path in the overall search directory path.
  bool val = 2;
}

message SearchDirectory_Set_SearchSubdirectoriesResponse {
}

message SearchDirectory_Get_SearchSubdirectoriesRequest {
  // The id of the SearchDirectory object.
  SearchDirectoryInstance instance = 1;
}

message SearchDirectory_Get_SearchSubdirectoriesResponse {
  // Specifies whether to include all subdirectories within the selected path in the overall search directory path.
  bool returnValue = 1;
}

message SearchDirectory_Set_FileExtensionRestrictionsRequest {
  // The id of the SearchDirectory object.
  SearchDirectoryInstance instance = 1;
  // Specifies the specific file extensions that restrict which files apply to the search directory. If the SearchDirectory.ExcludeFileExtension property is False, TestStand searches only for files in the directory with the specified extension. If the exclude parameter is True, TestStand searches only for files in the directory that does not have the specified file extensions. For example, to search only for DLLs and executable files, enter "DLL, EXE" and set the SearchDirectory.ExcludeFileExtension property to False.
  string val = 2;
}

message SearchDirectory_Set_FileExtensionRestrictionsResponse {
}

message SearchDirectory_Get_FileExtensionRestrictionsRequest {
  // The id of the SearchDirectory object.
  SearchDirectoryInstance instance = 1;
}

message SearchDirectory_Get_FileExtensionRestrictionsResponse {
  // Specifies the specific file extensions that restrict which files apply to the search directory. If the SearchDirectory.ExcludeFileExtension property is False, TestStand searches only for files in the directory with the specified extension. If the exclude parameter is True, TestStand searches only for files in the directory that does not have the specified file extensions. For example, to search only for DLLs and executable files, enter "DLL, EXE" and set the SearchDirectory.ExcludeFileExtension property to False.
  string returnValue = 1;
}

message SearchDirectory_Set_ExcludeFileExtensionRequest {
  // The id of the SearchDirectory object.
  SearchDirectoryInstance instance = 1;
  // Set this property to False if you want TestStand to search only for files with the file extensions you specify in the SearchDirectory.FileExtensionRestrictions property. Set this property to True if you want TestStand to search only for files that do not have the file extensions specified in the SearchDirectory.FileExtensionRestrictions property.
  bool val = 2;
}

message SearchDirectory_Set_ExcludeFileExtensionResponse {
}

message SearchDirectory_Get_ExcludeFileExtensionRequest {
  // The id of the SearchDirectory object.
  SearchDirectoryInstance instance = 1;
}

message SearchDirectory_Get_ExcludeFileExtensionResponse {
  // Set this property to False if you want TestStand to search only for files with the file extensions you specify in the SearchDirectory.FileExtensionRestrictions property. Set this property to True if you want TestStand to search only for files that do not have the file extensions specified in the SearchDirectory.FileExtensionRestrictions property.
  bool returnValue = 1;
}

message SearchDirectory_Set_DisabledRequest {
  // The id of the SearchDirectory object.
  SearchDirectoryInstance instance = 1;
  // If you want the search directory to be included in the overall search path, set this property to False. If you set this property to True, the search directory is disabled but is included in the search directories list.
  bool val = 2;
}

message SearchDirectory_Set_DisabledResponse {
}

message SearchDirectory_Get_DisabledRequest {
  // The id of the SearchDirectory object.
  SearchDirectoryInstance instance = 1;
}

message SearchDirectory_Get_DisabledResponse {
  // If you want the search directory to be included in the overall search path, set this property to False. If you set this property to True, the search directory is disabled but is included in the search directories list.
  bool returnValue = 1;
}

message SearchDirectory_Set_ExcludeHiddenSubdirectoriesRequest {
  // The id of the SearchDirectory object.
  SearchDirectoryInstance instance = 1;
  // Specifies to exclude search directory subdirectories that specify the Hidden attribute in the Microsoft Windows file system. This property is False by default and has no effect unless the SearchDirectory.SearchSubdirectories property is True.
  bool val = 2;
}

message SearchDirectory_Set_ExcludeHiddenSubdirectoriesResponse {
}

message SearchDirectory_Get_ExcludeHiddenSubdirectoriesRequest {
  // The id of the SearchDirectory object.
  SearchDirectoryInstance instance = 1;
}

message SearchDirectory_Get_ExcludeHiddenSubdirectoriesResponse {
  // Specifies to exclude search directory subdirectories that specify the Hidden attribute in the Microsoft Windows file system. This property is False by default and has no effect unless the SearchDirectory.SearchSubdirectories property is True.
  bool returnValue = 1;
}

// ExternalReportViewers
//
// Collection that contains elements using the ExternalReportViewer type.
// Represents the list of external report viewers used to open the different report file types TestStand supports.
//
service ExternalReportViewers {
  // Method: Add
  //
  // Adds a new external report viewer to the collection.
  //
  // ExternalReportViewers_AddRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExternalReportViewersInstance - The id of the ExternalReportViewers object.
  //
  // ExternalReportViewers_AddResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Add(ExternalReportViewers_AddRequest) returns (ExternalReportViewers_AddResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // ExternalReportViewers_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExternalReportViewersInstance - The id of the ExternalReportViewers object.
  //    - index: int32 - Specifies the zero-based index of the item to remove.
  //
  // ExternalReportViewers_RemoveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Remove(ExternalReportViewers_RemoveRequest) returns (ExternalReportViewers_RemoveResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // ExternalReportViewers_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExternalReportViewersInstance - The id of the ExternalReportViewers object.
  //    - index: int32 - Specifies the zero-based index of the item to retrieve.
  //
  // ExternalReportViewers_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExternalReportViewerInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(ExternalReportViewers_Get_ItemRequest) returns (ExternalReportViewers_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // ExternalReportViewers_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExternalReportViewersInstance - The id of the ExternalReportViewers object.
  //
  // ExternalReportViewers_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(ExternalReportViewers_Get_CountRequest) returns (ExternalReportViewers_Get_CountResponse);
  
  
  // Property: AutoLaunchDefaultExternalViewers
  //
  // Specifies whether TestStand launches default external viewers Microsoft Windows associates with file extensions.
  //
  // ExternalReportViewers_Set_AutoLaunchDefaultExternalViewersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExternalReportViewersInstance - The id of the ExternalReportViewers object.
  //    - isEnabled: bool - Specifies whether TestStand launches default external viewers Microsoft Windows associates with file extensions. 
  //
  // ExternalReportViewers_Set_AutoLaunchDefaultExternalViewersResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExternalReportViewers_Get_AutoLaunchDefaultExternalViewersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExternalReportViewersInstance - The id of the ExternalReportViewers object.
  //
  // ExternalReportViewers_Get_AutoLaunchDefaultExternalViewersResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether TestStand launches default external viewers Microsoft Windows associates with file extensions. 
  //
  rpc Set_AutoLaunchDefaultExternalViewers(ExternalReportViewers_Set_AutoLaunchDefaultExternalViewersRequest) returns (ExternalReportViewers_Set_AutoLaunchDefaultExternalViewersResponse);
  rpc Get_AutoLaunchDefaultExternalViewers(ExternalReportViewers_Get_AutoLaunchDefaultExternalViewersRequest) returns (ExternalReportViewers_Get_AutoLaunchDefaultExternalViewersResponse);
  
  
}
message ExternalReportViewersInstance {
  // Specifies the handle of the ExternalReportViewers instance in the server.
  string id = 1;
}

message ExternalReportViewerInstance {
  // Specifies the handle of the ExternalReportViewer instance in the server.
  string id = 1;
}
message ExternalReportViewers_AddRequest {
  // The id of the ExternalReportViewers object.
  ExternalReportViewersInstance instance = 1;
  // When you specify an external report viewer, you must indicate the external report viewer name and the report format, such as Microsoft Notepad (txt) or Google Chrome (html).
  string Format = 2;
  // Specifies the name for the external report viewer to launch.
  string Path = 3;
  // Specifies the optional command-line arguments required to launch the external report viewer.
  string Arguments = 4;
  // Specifies the external report viewer to automatically launch when the report is generated. Pass True to automatically launch the external report viewer and show the report.
  bool AutoLaunch = 5;
}

message ExternalReportViewers_AddResponse {
}

message ExternalReportViewers_RemoveRequest {
  // The id of the ExternalReportViewers object.
  ExternalReportViewersInstance instance = 1;
  // Specifies the zero-based index of the item to remove.
  int32 index = 2;
}

message ExternalReportViewers_RemoveResponse {
}

message ExternalReportViewers_Get_ItemRequest {
  // The id of the ExternalReportViewers object.
  ExternalReportViewersInstance instance = 1;
  // Specifies the zero-based index of the item to retrieve.
  optional int32 index = 2;
}

message ExternalReportViewers_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  ExternalReportViewerInstance returnValue = 1;
}

message ExternalReportViewers_Get_CountRequest {
  // The id of the ExternalReportViewers object.
  ExternalReportViewersInstance instance = 1;
}

message ExternalReportViewers_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

message ExternalReportViewers_Set_AutoLaunchDefaultExternalViewersRequest {
  // The id of the ExternalReportViewers object.
  ExternalReportViewersInstance instance = 1;
  // Specifies whether TestStand launches default external viewers Microsoft Windows associates with file extensions.
  bool isEnabled = 2;
}

message ExternalReportViewers_Set_AutoLaunchDefaultExternalViewersResponse {
}

message ExternalReportViewers_Get_AutoLaunchDefaultExternalViewersRequest {
  // The id of the ExternalReportViewers object.
  ExternalReportViewersInstance instance = 1;
}

message ExternalReportViewers_Get_AutoLaunchDefaultExternalViewersResponse {
  // Specifies whether TestStand launches default external viewers Microsoft Windows associates with file extensions.
  bool returnValue = 1;
}

// ExternalReportViewer
//
// An ExternalReportViewer represents relationships between a specific report format and the application used to open it. TestStand keeps a list of report viewers. If you do not specify an external viewer for a format, the file opens in the application Microsoft Windows associates with the file extension of the report file.
//
service ExternalReportViewer {
  // Property: Format
  //
  // Specifies the report format for the external report viewer to display. For example, txt for text files or HTML for HTML files.
  //
  // ExternalReportViewer_Set_FormatRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExternalReportViewerInstance - The id of the ExternalReportViewer object.
  //    - val: string - Specifies the report format for the external report viewer to display. For example, txt for text files or HTML for HTML files. 
  //
  // ExternalReportViewer_Set_FormatResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExternalReportViewer_Get_FormatRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExternalReportViewerInstance - The id of the ExternalReportViewer object.
  //
  // ExternalReportViewer_Get_FormatResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the report format for the external report viewer to display. For example, txt for text files or HTML for HTML files. 
  //
  rpc Set_Format(ExternalReportViewer_Set_FormatRequest) returns (ExternalReportViewer_Set_FormatResponse);
  rpc Get_Format(ExternalReportViewer_Get_FormatRequest) returns (ExternalReportViewer_Get_FormatResponse);
  
  
  // Property: Arguments
  //
  // Specifies optional arguments that indicate to the external viewer which file to open and how to open it. For example, "%filename" indicates to the external viewer the name of the file to open.
  //
  // ExternalReportViewer_Set_ArgumentsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExternalReportViewerInstance - The id of the ExternalReportViewer object.
  //    - val: string - Specifies optional arguments that indicate to the external viewer which file to open and how to open it. For example, "%filename" indicates to the external viewer the name of the file to open. 
  //
  // ExternalReportViewer_Set_ArgumentsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExternalReportViewer_Get_ArgumentsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExternalReportViewerInstance - The id of the ExternalReportViewer object.
  //
  // ExternalReportViewer_Get_ArgumentsResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies optional arguments that indicate to the external viewer which file to open and how to open it. For example, "%filename" indicates to the external viewer the name of the file to open. 
  //
  rpc Set_Arguments(ExternalReportViewer_Set_ArgumentsRequest) returns (ExternalReportViewer_Set_ArgumentsResponse);
  rpc Get_Arguments(ExternalReportViewer_Get_ArgumentsRequest) returns (ExternalReportViewer_Get_ArgumentsResponse);
  
  
  // Property: Path
  //
  // Specifies the filename the external report viewer executes.
  //
  // ExternalReportViewer_Set_PathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExternalReportViewerInstance - The id of the ExternalReportViewer object.
  //    - val: string - Specifies the filename the external report viewer executes. 
  //
  // ExternalReportViewer_Set_PathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExternalReportViewer_Get_PathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExternalReportViewerInstance - The id of the ExternalReportViewer object.
  //
  // ExternalReportViewer_Get_PathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the filename the external report viewer executes. 
  //
  rpc Set_Path(ExternalReportViewer_Set_PathRequest) returns (ExternalReportViewer_Set_PathResponse);
  rpc Get_Path(ExternalReportViewer_Get_PathRequest) returns (ExternalReportViewer_Get_PathResponse);
  
  
  // Property: AutoLaunch
  //
  // Specifies the external report viewer to launch automatically when the report is generated.
  // Set this property to True to automatically launch the external report viewer and show the report.
  //
  // ExternalReportViewer_Set_AutoLaunchRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExternalReportViewerInstance - The id of the ExternalReportViewer object.
  //    - val: bool - Specifies the external report viewer to launch automatically when the report is generated. Set this property to True to automatically launch the external report viewer and show the report. 
  //
  // ExternalReportViewer_Set_AutoLaunchResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExternalReportViewer_Get_AutoLaunchRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExternalReportViewerInstance - The id of the ExternalReportViewer object.
  //
  // ExternalReportViewer_Get_AutoLaunchResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies the external report viewer to launch automatically when the report is generated. Set this property to True to automatically launch the external report viewer and show the report. 
  //
  rpc Set_AutoLaunch(ExternalReportViewer_Set_AutoLaunchRequest) returns (ExternalReportViewer_Set_AutoLaunchResponse);
  rpc Get_AutoLaunch(ExternalReportViewer_Get_AutoLaunchRequest) returns (ExternalReportViewer_Get_AutoLaunchResponse);
  
  
}
message ExternalReportViewer_Set_FormatRequest {
  // The id of the ExternalReportViewer object.
  ExternalReportViewerInstance instance = 1;
  // Specifies the report format for the external report viewer to display. For example, txt for text files or HTML for HTML files.
  string val = 2;
}

message ExternalReportViewer_Set_FormatResponse {
}

message ExternalReportViewer_Get_FormatRequest {
  // The id of the ExternalReportViewer object.
  ExternalReportViewerInstance instance = 1;
}

message ExternalReportViewer_Get_FormatResponse {
  // Specifies the report format for the external report viewer to display. For example, txt for text files or HTML for HTML files.
  string returnValue = 1;
}

message ExternalReportViewer_Set_ArgumentsRequest {
  // The id of the ExternalReportViewer object.
  ExternalReportViewerInstance instance = 1;
  // Specifies optional arguments that indicate to the external viewer which file to open and how to open it. For example, "%filename" indicates to the external viewer the name of the file to open.
  string val = 2;
}

message ExternalReportViewer_Set_ArgumentsResponse {
}

message ExternalReportViewer_Get_ArgumentsRequest {
  // The id of the ExternalReportViewer object.
  ExternalReportViewerInstance instance = 1;
}

message ExternalReportViewer_Get_ArgumentsResponse {
  // Specifies optional arguments that indicate to the external viewer which file to open and how to open it. For example, "%filename" indicates to the external viewer the name of the file to open.
  string returnValue = 1;
}

message ExternalReportViewer_Set_PathRequest {
  // The id of the ExternalReportViewer object.
  ExternalReportViewerInstance instance = 1;
  // Specifies the filename the external report viewer executes.
  string val = 2;
}

message ExternalReportViewer_Set_PathResponse {
}

message ExternalReportViewer_Get_PathRequest {
  // The id of the ExternalReportViewer object.
  ExternalReportViewerInstance instance = 1;
}

message ExternalReportViewer_Get_PathResponse {
  // Specifies the filename the external report viewer executes.
  string returnValue = 1;
}

message ExternalReportViewer_Set_AutoLaunchRequest {
  // The id of the ExternalReportViewer object.
  ExternalReportViewerInstance instance = 1;
  // Specifies the external report viewer to launch automatically when the report is generated.
  // Set this property to True to automatically launch the external report viewer and show the report.
  bool val = 2;
}

message ExternalReportViewer_Set_AutoLaunchResponse {
}

message ExternalReportViewer_Get_AutoLaunchRequest {
  // The id of the ExternalReportViewer object.
  ExternalReportViewerInstance instance = 1;
}

message ExternalReportViewer_Get_AutoLaunchResponse {
  // Specifies the external report viewer to launch automatically when the report is generated.
  // Set this property to True to automatically launch the external report viewer and show the report.
  bool returnValue = 1;
}

// Expression
//
// An Expression object holds an expression string. You can check the validity of the expression string or you can evaluate the expression string to obtain the result of the expression.
// The Expression object provides the same functionality as the PropertyObject.EvaluateEx, Engine.CheckExpression, and Engine.CheckExprSyntax methods. However, if you are repeatedly evaluating the same expression, it is more efficient to use an Expression object because it only parses the expression string when you first evaluate the expression. Because the Expression object retains the parsed form of the expression, it does not re-parse the expression when you reevaluate the same string.
// The Expression object also provides the NumTokens property and the Tokenize and GetToken methods, which you can use to identify the operators, identifiers, and constants that comprise an expression. The capability to parse the expression into component tokens is useful for specialized purposes, such as implementing expression syntax coloring. Because TestStand provides an ActiveX Expression control that features syntax coloring, you typically do not need to identify the tokens in an expression.
//
service Expression {
  // Method: GetToken
  //
  // This method returns information about the token you specify by index. You must call the Expression.Tokenize method before you call this method for the first time and before you call this method after changing the value the Expression.Text property.
  //
  // Expression_GetTokenRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExpressionInstance - The id of the Expression object.
  //    - tokenIndex: int32 - Specifies the zero-based index of a token in the expression.
  //
  // Expression_GetTokenResponse - The response message from the server. It provides the output parameters.
  //    - charIndex: int3 - Returns the zero-based index within the expression string of the first character in the token.
  //    - numChars: int3 - Returns the number of characters in the token.
  //    - tokenText: strin - Returns the characters in the token.
  //
  rpc GetToken(Expression_GetTokenRequest) returns (Expression_GetTokenResponse);
  
  
  // Method: Tokenize
  //
  // This method parses the expression text to identify the tokens that represent operators, identifiers, and constants. The capability to parse the expression into component tokens is useful for specialized purposes, such as implementing expression syntax coloring. Typically, you do not call this method.
  // Note: You must call this method before you call the Expression.GetToken method or access the Expression.NumTokens property.
  //
  // Expression_TokenizeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExpressionInstance - The id of the Expression object.
  //    - options: int32 - Pass TokenizeOptions_NoOptions to specify the default behavior, or pass one or more TokenizeOptions constants. Use the bitwise-OR operator to specify multiple options. The Expression object retains the options you specify to use whenever it must tokenize the expression in the Expression.Validate and Expression.Evaluate methods.
  //    - initialParseState: int32 - Pass 0 if you are tokenizing a complete expression. Typically, you pass 0 to this parameter.
  //      If you separately tokenize each visible line in an expression, pass 0 to tokenize the first visible line and pass the return value of this method from tokenizing the previous line to tokenize a subsequent line.
  //      Note: Tokenizing a multiline expression line-by-line is more efficient or convenient for certain specific applications, such as syntax-coloring text that displays in a control when the control wraps the text across multiple lines to fit within the control. In this case, you can resume tokenizing a logical line the control splits into multiple visible lines. Tokenize line-by-line to account for virtual new lines a control creates when wrapping expression text. If the expression contains actual new line characters, you can tokenize the entire expression with a single call to this method.
  //
  // Expression_TokenizeResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - The return value represents the parsing state at the end of the expression. If you individually tokenize each displayed line of an expression wrapped to multiple lines by a user interface control, pass this value to the initialParseState parameter of this method when you tokenize the next visible line. 
  //
  rpc Tokenize(Expression_TokenizeRequest) returns (Expression_TokenizeResponse);
  
  
  // Method: Validate
  //
  // Checks the validity of an expression and returns error information.
  //
  // Expression_ValidateRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExpressionInstance - The id of the Expression object.
  //    - evaluationContext: PropertyObjectInstance - Specifies the context in which to evaluate the expression. This method uses this object to determine whether the variables in the expression are valid.
  //    - checkSyntaxOnly: bool - Pass True to check the expression syntax only. Pass False to also verify that the variables in the expression are valid.
  //
  // Expression_ValidateResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if the expression is valid. Returns False if the expression contains an error. 
  //    - errMsg: strin - If the expression is invalid, this parameter returns a description of the error.
  //    - errorCharIndex: int3 - If the expression is invalid, this parameter returns the character index of the start of the invalid portion of the expression.
  //    - errorEndCharIndex: int3 - If the expression is invalid, this parameter returns the character index of the end of the invalid portion of the expression.
  //
  rpc Validate(Expression_ValidateRequest) returns (Expression_ValidateResponse);
  
  
  // Method: Evaluate
  //
  // Evaluates an expression and returns the result.
  //
  // Expression_EvaluateRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExpressionInstance - The id of the Expression object.
  //    - evaluationContext: PropertyObjectInstance - Specifies the context in which to evaluate the expression. This method uses this object to locate variables the expression specifies.
  //
  // Expression_EvaluateResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Returns the result of the expression in the form of a PropertyObject. The PropertyObject can contain a value of any type depending on the expression. Release the result when you finish using it. If the expression is empty and you pass EvalOption_AllowEmptyExpression, this method returns a NULL dispatch pointer or object reference. 
  //
  rpc Evaluate(Expression_EvaluateRequest) returns (Expression_EvaluateResponse);
  
  
  // Method: ValidateEvaluationType
  //
  // Checks that the expression evaluates to a specified type and returns error information if the expression does not.
  //
  // This method returns TS_Err_NoError if the expression evaluates to a type the validEvaluationTypes parameter specifies. This method returns the corresponding TSError if the expression has a syntax or evaluation error. This method returns TS_Err_UnexpectedType if the expression evaluates without an error, but does not evaluate to a type the validEvaluationTypes parameter specifies.
  //
  // Expression_ValidateEvaluationTypeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExpressionInstance - The id of the Expression object.
  //    - validEvaluationTypes: EvaluationTypesInstance - Specifies the type(s) to which you expect the expression to evaluate.
  //    - additionalConstants: repeated PropertyObjectInstance - Specifies additional variables the expression might contain that are not part of the evaluationContext. This parameter is useful if the expression can contain a constant from an enumeration, such as a parameter value of a module call when the parameter type is an enumeration. You can pass NULL for this parameter if there are no additional constants you want to use when evaluating the expression.
  //    - evaluationContext: PropertyObjectInstance - Specifies the context in which to evaluate the expression. This method uses this object to locate variables the expression specifies.
  //
  // Expression_ValidateEvaluationTypeResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: TSError - The return type of the TSError object.
  //    - errMsg: strin - If the expression does not evaluate to the specified type, this parameter returns a description of the error.
  //    - errorStartIndex: int3 - If the expression does not evaluate to the specified type, this parameter returns the character index of the start of the invalid portion of the expression.
  //    - errorEndIndex: int3 - If the expression does not evaluate to the specified type, this parameter returns the character index of the end of the invalid portion of the expression.
  //
  rpc ValidateEvaluationType(Expression_ValidateEvaluationTypeRequest) returns (Expression_ValidateEvaluationTypeResponse);
  
  
  // Method: GetConstantValue
  //
  // If the expression is a constant, the method returns the result of the expression in the form of a PropertyObject, otherwise the method returns NULL.
  //
  // This method evaluates the expression without a context and without altering values.
  //
  // Expression_GetConstantValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionInstance - The id of the Expression object.
  //
  // Expression_GetConstantValueResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc GetConstantValue(Expression_GetConstantValueRequest) returns (Expression_GetConstantValueResponse);
  
  

  // Property: Text
  //
  // Specifies the text of the expression the Expression object evaluates. The following are example expressions:
  // Local.frequency / 2"DMM" + Str(RunState.TestSockets.MyIndex)
  //
  // Expression_Set_TextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionInstance - The id of the Expression object.
  //    - val: string - Specifies the text of the expression the Expression object evaluates. The following are example expressions: Local.frequency / 2"DMM" + Str(RunState.TestSockets.MyIndex) 
  //
  // Expression_Set_TextResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Expression_Get_TextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionInstance - The id of the Expression object.
  //
  // Expression_Get_TextResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the text of the expression the Expression object evaluates. The following are example expressions: Local.frequency / 2"DMM" + Str(RunState.TestSockets.MyIndex) 
  //
  rpc Set_Text(Expression_Set_TextRequest) returns (Expression_Set_TextResponse);
  rpc Get_Text(Expression_Get_TextRequest) returns (Expression_Get_TextResponse);
  
  
  // Property: NumTokens
  //
  // Returns the number of tokens the expression contains. A token is a set of contiguous characters in the expression text that represent an identifier, operator, or constant. A token does not include surrounding white space characters.
  // Note: You must call the Expression.Tokenize method before you access this property for the first time and after changing the value of the Expression.Text property.
  //
  // Expression_Get_NumTokensRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionInstance - The id of the Expression object.
  //
  // Expression_Get_NumTokensResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of tokens the expression contains. A token is a set of contiguous characters in the expression text that represent an identifier, operator, or constant. A token does not include surrounding white space characters. Note: You must call the Expression.Tokenize method before you access this property for the first time and after changing the value of the Expression.Text property. 
  //
  rpc Get_NumTokens(Expression_Get_NumTokensRequest) returns (Expression_Get_NumTokensResponse);
  
  
}
message ExpressionInstance {
  // Specifies the handle of the Expression instance in the server.
  string id = 1;
}

message EvaluationTypesInstance {
  // Specifies the handle of the EvaluationTypes instance in the server.
  string id = 1;
}
message Expression_GetTokenRequest {
  // The id of the Expression object.
  ExpressionInstance instance = 1;
  // Specifies the zero-based index of a token in the expression.
  int32 tokenIndex = 2;
}

message Expression_GetTokenResponse {
  // Returns a code that specifies which expression element the token represents.
  TokenCode TokenCode = 1;
  // Returns the zero-based index within the expression string of the first character in the token.
  int32 charIndex = 2;
  // Returns the number of characters in the token.
  int32 numChars = 3;
  // Returns the characters in the token.
  string tokenText = 4;
}

message Expression_TokenizeRequest {
  // The id of the Expression object.
  ExpressionInstance instance = 1;
  // Pass TokenizeOptions_NoOptions to specify the default behavior, or pass one or more TokenizeOptions constants. Use the bitwise-OR operator to specify multiple options. The Expression object retains the options you specify to use whenever it must tokenize the expression in the Expression.Validate and Expression.Evaluate methods.
  TokenizeOptions options = 2;
  // Pass 0 if you are tokenizing a complete expression. Typically, you pass 0 to this parameter.
  // If you separately tokenize each visible line in an expression, pass 0 to tokenize the first visible line and pass the return value of this method from tokenizing the previous line to tokenize a subsequent line.
  // Note: Tokenizing a multiline expression line-by-line is more efficient or convenient for certain specific applications, such as syntax-coloring text that displays in a control when the control wraps the text across multiple lines to fit within the control. In this case, you can resume tokenizing a logical line the control splits into multiple visible lines. Tokenize line-by-line to account for virtual new lines a control creates when wrapping expression text. If the expression contains actual new line characters, you can tokenize the entire expression with a single call to this method.
  int32 initialParseState = 3;
}

message Expression_TokenizeResponse {
  // The return value represents the parsing state at the end of the expression.
  // If you individually tokenize each displayed line of an expression wrapped to multiple lines by a user interface control, pass this value to the initialParseState parameter of this method when you tokenize the next visible line.
  int32 returnValue = 1;
}

message Expression_ValidateRequest {
  // The id of the Expression object.
  ExpressionInstance instance = 1;
  // Specifies the context in which to evaluate the expression. This method uses this object to determine whether the variables in the expression are valid.
  PropertyObjectInstance evaluationContext = 2;
  // Pass True to check the expression syntax only. Pass False to also verify that the variables in the expression are valid.
  bool checkSyntaxOnly = 3;
  // Pass 0 to specify the default behavior, or pass one or more EvaluationOptions constants. Use the bitwise-OR operator to specify multiple options.
  EvaluationOptions EvaluationOptions = 4;
}

message Expression_ValidateResponse {
  // Returns True if the expression is valid. Returns False if the expression contains an error.
  bool returnValue = 1;
  // If the expression is invalid, this parameter returns a description of the error.
  string errMsg = 2;
  // If the expression is invalid, this parameter returns the character index of the start of the invalid portion of the expression.
  int32 errorCharIndex = 3;
  // If the expression is invalid, this parameter returns the character index of the end of the invalid portion of the expression.
  int32 errorEndCharIndex = 4;
}

message Expression_EvaluateRequest {
  // The id of the Expression object.
  ExpressionInstance instance = 1;
  // Specifies the context in which to evaluate the expression. This method uses this object to locate variables the expression specifies.
  PropertyObjectInstance evaluationContext = 2;
  // Pass 0 to specify the default behavior, or pass one or more EvaluationOptions constants. Use the bitwise-OR operator to specify multiple options.
  EvaluationOptions EvaluationOptions = 3;
}

message Expression_EvaluateResponse {
  // Returns the result of the expression in the form of a PropertyObject. The PropertyObject can contain a value of any type depending on the expression. Release the result when you finish using it. If the expression is empty and you pass EvalOption_AllowEmptyExpression, this method returns a NULL dispatch pointer or object reference.
  PropertyObjectInstance returnValue = 1;
}

message Expression_ValidateEvaluationTypeRequest {
  // The id of the Expression object.
  ExpressionInstance instance = 1;
  // Specifies the type(s) to which you expect the expression to evaluate.
  EvaluationTypesInstance validEvaluationTypes = 2;
  // Specifies additional variables the expression might contain that are not part of the evaluationContext. This parameter is useful if the expression can contain a constant from an enumeration, such as a parameter value of a module call when the parameter type is an enumeration. You can pass NULL for this parameter if there are no additional constants you want to use when evaluating the expression.
  repeated PropertyObjectInstance additionalConstants = 3;
  // Specifies the context in which to evaluate the expression. This method uses this object to locate variables the expression specifies.
  PropertyObjectInstance evaluationContext = 4;
  // Specifies any combination of the EvaluationOptions constants. It is not necessary to pass the EvalOption_DoNotAlterValues constant because this method never alters values.
  EvaluationOptions EvaluationOptions = 5;
}

message Expression_ValidateEvaluationTypeResponse {
  // The return type of the TSError object.
  TSError returnValue = 1;
  // If the expression does not evaluate to the specified type, this parameter returns a description of the error.
  string errMsg = 2;
  // If the expression does not evaluate to the specified type, this parameter returns the character index of the start of the invalid portion of the expression.
  int32 errorStartIndex = 3;
  // If the expression does not evaluate to the specified type, this parameter returns the character index of the end of the invalid portion of the expression.
  int32 errorEndIndex = 4;
}

message Expression_GetConstantValueRequest {
  // The id of the Expression object.
  ExpressionInstance instance = 1;
}

message Expression_GetConstantValueResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message Expression_Set_TextRequest {
  // The id of the Expression object.
  ExpressionInstance instance = 1;
  // Specifies the text of the expression the Expression object evaluates. The following are example expressions:
  // Local.frequency / 2"DMM" + Str(RunState.TestSockets.MyIndex)
  string val = 2;
}

message Expression_Set_TextResponse {
}

message Expression_Get_TextRequest {
  // The id of the Expression object.
  ExpressionInstance instance = 1;
}

message Expression_Get_TextResponse {
  // Specifies the text of the expression the Expression object evaluates. The following are example expressions:
  // Local.frequency / 2"DMM" + Str(RunState.TestSockets.MyIndex)
  string returnValue = 1;
}

message Expression_Get_NumTokensRequest {
  // The id of the Expression object.
  ExpressionInstance instance = 1;
}

message Expression_Get_NumTokensResponse {
  // Returns the number of tokens the expression contains. A token is a set of contiguous characters in the expression text that represent an identifier, operator, or constant. A token does not include surrounding white space characters.
  // Note: You must call the Expression.Tokenize method before you access this property for the first time and after changing the value of the Expression.Text property.
  int32 returnValue = 1;
}

// EvaluationTypes
//
// This interface specifies expected types for evaluating an expression. Obtain an EvaluationTypes object by calling the Engine.NewEvaluationTypes method or through a property of a parameter for a module call such as the LabVIEWParameter.ValidEvaluationTypes property. Pass an instance of EvaluationTypes to the Expression.ValidateEvaluationType method to perform type checking on an expression.
//
service EvaluationTypes {
  // Property: PropertyValueTypeFlags
  //
  // Specifies the expected types for an expression. Use any combination of property value type flags with this property. The Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to any type this property specifies.
  //
  // EvaluationTypes_Set_PropertyValueTypeFlagsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EvaluationTypesInstance - The id of the EvaluationTypes object.
  //    - val: int32 - Specifies the expected types for an expression. Use any combination of property value type flags with this property. The Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to any type this property specifies. 
  //
  // EvaluationTypes_Set_PropertyValueTypeFlagsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // EvaluationTypes_Get_PropertyValueTypeFlagsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EvaluationTypesInstance - The id of the EvaluationTypes object.
  //
  // EvaluationTypes_Get_PropertyValueTypeFlagsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the expected types for an expression. Use any combination of property value type flags with this property. The Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to any type this property specifies. 
  //
  rpc Set_PropertyValueTypeFlags(EvaluationTypes_Set_PropertyValueTypeFlagsRequest) returns (EvaluationTypes_Set_PropertyValueTypeFlagsResponse);
  rpc Get_PropertyValueTypeFlags(EvaluationTypes_Get_PropertyValueTypeFlagsRequest) returns (EvaluationTypes_Get_PropertyValueTypeFlagsResponse);
  
  
  // Property: NamedTypes
  //
  // Specifies the expected named types for an expression. the Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to a named type specified by any element of this property. For example, if the elements of this property are CommonResults and Error, the Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to PropertyObject using a CommonResults or Error type.
  //
  // The EvaluationTypes.PropertyValueTypeFlags property must include PropValTypeFlag_NamedType to use this property.
  //
  // EvaluationTypes_Set_NamedTypesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EvaluationTypesInstance - The id of the EvaluationTypes object.
  //    - val: repeated string - Specifies the expected named types for an expression. the Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to a named type specified by any element of this property. For example, if the elements of this property are CommonResults and Error, the Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to PropertyObject using a CommonResults or Error type. 
  //
  // EvaluationTypes_Set_NamedTypesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // EvaluationTypes_Get_NamedTypesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EvaluationTypesInstance - The id of the EvaluationTypes object.
  //
  // EvaluationTypes_Get_NamedTypesResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated string - Specifies the expected named types for an expression. the Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to a named type specified by any element of this property. For example, if the elements of this property are CommonResults and Error, the Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to PropertyObject using a CommonResults or Error type. 
  //
  rpc Set_NamedTypes(EvaluationTypes_Set_NamedTypesRequest) returns (EvaluationTypes_Set_NamedTypesResponse);
  rpc Get_NamedTypes(EvaluationTypes_Get_NamedTypesRequest) returns (EvaluationTypes_Get_NamedTypesResponse);
  
  
  // Property: ArrayOfNamedTypes
  //
  // Represents an array of named types. An expression expects an array of these types. the Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to an array of a named type specified by any element of this property. For example, if the elements of this property are CommonResults and Error, the Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to PropertyObject using an array of CommonResults type or an array of Error type.
  //
  // The EvaluationTypes.PropertyValueTypeFlags property must include PropValTypeFlag_ArrayOfNamedType to use this property.
  //
  // EvaluationTypes_Set_ArrayOfNamedTypesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EvaluationTypesInstance - The id of the EvaluationTypes object.
  //    - val: repeated string - Represents an array of named types. An expression expects an array of these types. the Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to an array of a named type specified by any element of this property. For example, if the elements of this property are CommonResults and Error, the Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to PropertyObject using an array of CommonResults type or an array of Error type. 
  //
  // EvaluationTypes_Set_ArrayOfNamedTypesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // EvaluationTypes_Get_ArrayOfNamedTypesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EvaluationTypesInstance - The id of the EvaluationTypes object.
  //
  // EvaluationTypes_Get_ArrayOfNamedTypesResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated string - Represents an array of named types. An expression expects an array of these types. the Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to an array of a named type specified by any element of this property. For example, if the elements of this property are CommonResults and Error, the Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to PropertyObject using an array of CommonResults type or an array of Error type. 
  //
  rpc Set_ArrayOfNamedTypes(EvaluationTypes_Set_ArrayOfNamedTypesRequest) returns (EvaluationTypes_Set_ArrayOfNamedTypesResponse);
  rpc Get_ArrayOfNamedTypes(EvaluationTypes_Get_ArrayOfNamedTypesRequest) returns (EvaluationTypes_Get_ArrayOfNamedTypesResponse);
  
  
  // Property: AllowedRepresentations
  //
  // Specifies the expected representation for an expression. The Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to a numeric property with a representation that any element of this property specifies.
  //
  // The EvaluationTypes.PropertyValueTypeFlags property must include PropValTypeFlag_Number to use this property.
  //
  // EvaluationTypes_Set_AllowedRepresentationsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EvaluationTypesInstance - The id of the EvaluationTypes object.
  //    - val: repeated PropertyRepresentations - Specifies the expected representation for an expression. The Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to a numeric property with a representation that any element of this property specifies. 
  //
  // EvaluationTypes_Set_AllowedRepresentationsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // EvaluationTypes_Get_AllowedRepresentationsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EvaluationTypesInstance - The id of the EvaluationTypes object.
  //
  // EvaluationTypes_Get_AllowedRepresentationsResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated PropertyRepresentations - Specifies the expected representation for an expression. The Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to a numeric property with a representation that any element of this property specifies. 
  //
  rpc Set_AllowedRepresentations(EvaluationTypes_Set_AllowedRepresentationsRequest) returns (EvaluationTypes_Set_AllowedRepresentationsResponse);
  rpc Get_AllowedRepresentations(EvaluationTypes_Get_AllowedRepresentationsRequest) returns (EvaluationTypes_Get_AllowedRepresentationsResponse);
  
  
  // Property: AllowedArrayRepresentations
  //
  // Specifies the expected representation for an expression. The Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to a numeric array property with a representation that any element of this property specifies.
  //
  // The EvaluationTypes.PropertyValueTypeFlags property must include PropValTypeFlag_NumberArray to use this property.
  //
  // EvaluationTypes_Set_AllowedArrayRepresentationsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EvaluationTypesInstance - The id of the EvaluationTypes object.
  //    - val: repeated PropertyRepresentations - Specifies the expected representation for an expression. The Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to a numeric array property with a representation that any element of this property specifies. 
  //
  // EvaluationTypes_Set_AllowedArrayRepresentationsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // EvaluationTypes_Get_AllowedArrayRepresentationsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EvaluationTypesInstance - The id of the EvaluationTypes object.
  //
  // EvaluationTypes_Get_AllowedArrayRepresentationsResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated PropertyRepresentations - Specifies the expected representation for an expression. The Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to a numeric array property with a representation that any element of this property specifies. 
  //
  rpc Set_AllowedArrayRepresentations(EvaluationTypes_Set_AllowedArrayRepresentationsRequest) returns (EvaluationTypes_Set_AllowedArrayRepresentationsResponse);
  rpc Get_AllowedArrayRepresentations(EvaluationTypes_Get_AllowedArrayRepresentationsRequest) returns (EvaluationTypes_Get_AllowedArrayRepresentationsResponse);
  
  
}
message EvaluationTypes_Set_PropertyValueTypeFlagsRequest {
  // The id of the EvaluationTypes object.
  EvaluationTypesInstance instance = 1;
  // Specifies the expected types for an expression. Use any combination of property value type flags with this property. The Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to any type this property specifies.
  PropertyValueTypeFlags val = 2;
}

message EvaluationTypes_Set_PropertyValueTypeFlagsResponse {
}

message EvaluationTypes_Get_PropertyValueTypeFlagsRequest {
  // The id of the EvaluationTypes object.
  EvaluationTypesInstance instance = 1;
}

message EvaluationTypes_Get_PropertyValueTypeFlagsResponse {
  // Specifies the expected types for an expression. Use any combination of property value type flags with this property. The Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to any type this property specifies.
  PropertyValueTypeFlags returnValue = 1;
}

message EvaluationTypes_Set_NamedTypesRequest {
  // The id of the EvaluationTypes object.
  EvaluationTypesInstance instance = 1;
  // Specifies the expected named types for an expression. the Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to a named type specified by any element of this property. For example, if the elements of this property are CommonResults and Error, the Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to PropertyObject using a CommonResults or Error type.
  repeated string val = 2;
}

message EvaluationTypes_Set_NamedTypesResponse {
}

message EvaluationTypes_Get_NamedTypesRequest {
  // The id of the EvaluationTypes object.
  EvaluationTypesInstance instance = 1;
}

message EvaluationTypes_Get_NamedTypesResponse {
  // Specifies the expected named types for an expression. the Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to a named type specified by any element of this property. For example, if the elements of this property are CommonResults and Error, the Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to PropertyObject using a CommonResults or Error type.
  repeated string returnValue = 1;
}

message EvaluationTypes_Set_ArrayOfNamedTypesRequest {
  // The id of the EvaluationTypes object.
  EvaluationTypesInstance instance = 1;
  // Represents an array of named types. An expression expects an array of these types. the Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to an array of a named type specified by any element of this property. For example, if the elements of this property are CommonResults and Error, the Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to PropertyObject using an array of CommonResults type or an array of Error type.
  repeated string val = 2;
}

message EvaluationTypes_Set_ArrayOfNamedTypesResponse {
}

message EvaluationTypes_Get_ArrayOfNamedTypesRequest {
  // The id of the EvaluationTypes object.
  EvaluationTypesInstance instance = 1;
}

message EvaluationTypes_Get_ArrayOfNamedTypesResponse {
  // Represents an array of named types. An expression expects an array of these types. the Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to an array of a named type specified by any element of this property. For example, if the elements of this property are CommonResults and Error, the Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to PropertyObject using an array of CommonResults type or an array of Error type.
  repeated string returnValue = 1;
}

message EvaluationTypes_Set_AllowedRepresentationsRequest {
  // The id of the EvaluationTypes object.
  EvaluationTypesInstance instance = 1;
  // Specifies the expected representation for an expression. The Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to a numeric property with a representation that any element of this property specifies.
  repeated PropertyRepresentations val = 2;
}

message EvaluationTypes_Set_AllowedRepresentationsResponse {
}

message EvaluationTypes_Get_AllowedRepresentationsRequest {
  // The id of the EvaluationTypes object.
  EvaluationTypesInstance instance = 1;
}

message EvaluationTypes_Get_AllowedRepresentationsResponse {
  // Specifies the expected representation for an expression. The Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to a numeric property with a representation that any element of this property specifies.
  repeated PropertyRepresentations returnValue = 1;
}

message EvaluationTypes_Set_AllowedArrayRepresentationsRequest {
  // The id of the EvaluationTypes object.
  EvaluationTypesInstance instance = 1;
  // Specifies the expected representation for an expression. The Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to a numeric array property with a representation that any element of this property specifies.
  repeated PropertyRepresentations val = 2;
}

message EvaluationTypes_Set_AllowedArrayRepresentationsResponse {
}

message EvaluationTypes_Get_AllowedArrayRepresentationsRequest {
  // The id of the EvaluationTypes object.
  EvaluationTypesInstance instance = 1;
}

message EvaluationTypes_Get_AllowedArrayRepresentationsResponse {
  // Specifies the expected representation for an expression. The Expression.ValidateEvaluationType method returns TS_Err_NoError if the expression evaluates to a numeric array property with a representation that any element of this property specifies.
  repeated PropertyRepresentations returnValue = 1;
}

// StationOptions
//
// Use the StationOptions class to set preferences for TestStand. The settings affect all sequence editor and user interface sessions. Use the Engine.DisplayOptionsDialog method to launch the Station Options dialog box.
//
service StationOptions {
  // Method: GetTimeLimitEnabled
  //
  // Returns a value that indicates whether a time limit for an execution is enabled for a specific type of time limit and operation.
  //
  // TestStand maintains a set of time limit settings that determine whether TestStand takes an action when an execution state does not change for a specified amount of time. For example, TestStand could attempt to abort an execution if, while TestStand is attempting to shut down, a terminating execution takes longer than 10 seconds.
  // TestStand maintains unique time limit settings for normal executions and for executions that run while the engine is exiting. For each type of execution, TestStand maintains different time limit settings for when an execution is aborting, executing, and terminating.
  //
  // StationOptions_GetTimeLimitEnabledRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - operation: TimeLimitOperations - Specifies the operation type for the setting the method returns.
  //
  // StationOptions_GetTimeLimitEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the time limit is enabled. 
  //
  rpc GetTimeLimitEnabled(StationOptions_GetTimeLimitEnabledRequest) returns (StationOptions_GetTimeLimitEnabledResponse);
  
  
  // Method: SetTimeLimitEnabled
  //
  // Specifies whether a time limit for an execution is enabled for a specific type of time limit and operation.
  //
  // TestStand maintains a set of time limit settings that determine whether TestStand takes an action when an execution state does not change for a specified amount of time. For example, TestStand could attempt to abort an execution if, while TestStand is attempting to shut down, a terminating execution takes longer than 10 seconds.
  // TestStand maintains unique time limit settings for normal executions and for executions that run while the engine is exiting. For each type of execution, TestStand maintains different time limit settings for when an execution is aborting, executing, and terminating.
  //
  // StationOptions_SetTimeLimitEnabledRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - operation: TimeLimitOperations - Specifies the operation type for the setting the method sets.
  //    - enabled: bool - Specifies if the time limit is enabled.
  //
  // StationOptions_SetTimeLimitEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetTimeLimitEnabled(StationOptions_SetTimeLimitEnabledRequest) returns (StationOptions_SetTimeLimitEnabledResponse);
  
  
  // Method: GetTimeLimit
  //
  // Returns a value that indicates whether a time limit for an execution is enabled for a specific type of time limit and operation.
  //
  // TestStand maintains a set of time limit settings that determine whether TestStand takes an action when an execution state does not change for a specified amount of time. For example, TestStand could attempt to abort an execution if, while TestStand is attempting to shut down, a terminating execution takes longer than 10 seconds.
  // TestStand maintains unique time limit settings for normal executions and for executions that run while the engine is exiting. For each type of execution, TestStand maintains different time limit settings for when an execution is aborting, executing, and terminating.
  //
  // StationOptions_GetTimeLimitRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - operation: TimeLimitOperations - Specifies the operation type for the setting the method returns.
  //
  // StationOptions_GetTimeLimitResponse - The response message from the server. It provides the return value.
  //    - returnValue: double - Returns a value that indicates whether the time limit is enabled. 
  //
  rpc GetTimeLimit(StationOptions_GetTimeLimitRequest) returns (StationOptions_GetTimeLimitResponse);
  
  
  // Method: SetTimeLimit
  //
  // Specifies an action for a specific type of time limit and operation TestStand takes if the time limit expires.
  //
  // TestStand maintains a set of time limit settings that determine whether TestStand takes an action when an execution state does not change for a specified amount of time. For example, TestStand could attempt to abort an execution if, while TestStand is attempting to shut down, a terminating execution takes longer than 10 seconds.
  // TestStand maintains unique time limit settings for normal executions and for executions that run while the engine is exiting. For each type of execution, TestStand maintains different time limit settings for when an execution is aborting, executing, and terminating.
  // Note: You must enable the corresponding time limit with the  StationOptions.SetTimeLimitEnabled method before calling this method. Otherwise, the method does not have any effect. If a time limit is disabled, the time limit action is set to TimeLimitAction_Prompt as default.
  //
  // StationOptions_SetTimeLimitRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - operation: TimeLimitOperations - Specifies the operation type for the setting the method sets.
  //
  // StationOptions_SetTimeLimitResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetTimeLimit(StationOptions_SetTimeLimitRequest) returns (StationOptions_SetTimeLimitResponse);
  
  
  // Method: GetTimeLimitAction
  //
  // Returns the action for a specific type of time limit and operation TestStand takes if the time limit expires.
  //
  // TestStand maintains a set of time limit settings that determine whether TestStand takes an action when an execution state does not change for a specified amount of time. For example, TestStand could attempt to abort an execution if, while TestStand is attempting to shut down, a terminating execution takes longer than 10 seconds.
  // TestStand maintains unique time limit settings for normal executions and for executions that run while the engine is exiting. For each type of execution, TestStand maintains different time limit settings for when an execution is aborting, executing, and terminating.
  // Note: If a time limit is disabled, the time limit action is set to TimeLimitAction_Prompt as default.
  //
  // StationOptions_GetTimeLimitActionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - operation: TimeLimitOperations - Specifies the operation type for the setting the method returns.
  //
  // StationOptions_GetTimeLimitActionResponse - The response message from the server. It provides the return value.
  //    - returnValue: TimeLimitActions - Returns the action TestStand takes when the time limit expires. 
  //
  rpc GetTimeLimitAction(StationOptions_GetTimeLimitActionRequest) returns (StationOptions_GetTimeLimitActionResponse);
  
  
  // Method: SetTimeLimitAction
  //
  // Specifies an action for a specific type of time limit and operation TestStand takes if the time limit expires.
  //
  // TestStand maintains a set of time limit settings that determine whether TestStand takes an action when an execution state does not change for a specified amount of time. For example, TestStand could attempt to abort an execution if, while TestStand is attempting to shut down, a terminating execution takes longer than 10 seconds.
  // TestStand maintains unique time limit settings for normal executions and for executions that run while the engine is exiting. For each type of execution, TestStand maintains different time limit settings for when an execution is aborting, executing, and terminating.
  // Note: You must enable the corresponding time limit with the  StationOptions.SetTimeLimitEnabled method before calling this method. Otherwise, the method does not have any effect. If a time limit is disabled, the time limit action is set to TimeLimitAction_Prompt as default.
  //
  // StationOptions_SetTimeLimitActionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - operation: TimeLimitOperations - Specifies the operation type for the setting the method sets.
  //    - action: TimeLimitActions - Specifies the action TestStand takes when the time limit expires.
  //
  // StationOptions_SetTimeLimitActionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetTimeLimitAction(StationOptions_SetTimeLimitActionRequest) returns (StationOptions_SetTimeLimitActionResponse);
  
  
  // Method: GetLanguages
  //
  // Obtains a list of languages TestStand supports.
  // 
  //
  // This method obtains an array of strings containing the list of directories that correspond to the possible language configurations supported.
  //
  // StationOptions_GetLanguagesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_GetLanguagesResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated string - The return type of the String[] object.
  //
  rpc GetLanguages(StationOptions_GetLanguagesRequest) returns (StationOptions_GetLanguagesResponse);
  
  

  // Property: UserFilePath
  //
  // Specifies the location of the current user manager file.
  // 
  //
  // Pass an empty path to this property to instruct TestStand to use the default user manager file.
  // A change to this property does not take effect until you restart the engine.
  //
  // StationOptions_Set_UserFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - val: string - Specifies the location of the current user manager file.  
  //
  // StationOptions_Set_UserFilePathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_UserFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_UserFilePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the location of the current user manager file.  
  //
  rpc Set_UserFilePath(StationOptions_Set_UserFilePathRequest) returns (StationOptions_Set_UserFilePathResponse);
  rpc Get_UserFilePath(StationOptions_Get_UserFilePathRequest) returns (StationOptions_Get_UserFilePathResponse);
  
  
  // Property: EnableUserPrivilegeChecking
  //
  // Specifies whether the sequence editor or user interface verify user privileges.
  //
  // When this property is False, the sequence editor or user interface do not verify that the user has the privileges necessary for performing specific operations. Instead, all operations that depend on user privileges are always available.
  //
  // StationOptions_Set_EnableUserPrivilegeCheckingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - enabled: bool - Specifies whether the sequence editor or user interface verify user privileges. 
  //
  // StationOptions_Set_EnableUserPrivilegeCheckingResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_EnableUserPrivilegeCheckingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_EnableUserPrivilegeCheckingResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the sequence editor or user interface verify user privileges. 
  //
  rpc Set_EnableUserPrivilegeChecking(StationOptions_Set_EnableUserPrivilegeCheckingRequest) returns (StationOptions_Set_EnableUserPrivilegeCheckingResponse);
  rpc Get_EnableUserPrivilegeChecking(StationOptions_Get_EnableUserPrivilegeCheckingRequest) returns (StationOptions_Get_EnableUserPrivilegeCheckingResponse);
  
  
  // Property: AutoLoginSystemUser
  //
  // Specifies if the LoginLogout callback sequence uses the current user login for the operating system as the login for TestStand when first launching a user interface or sequence editor.
  // 
  //
  // If the user login for the operating system does not exist in TestStand, the Login dialog box launches. If the user login for the operating system exists in TestStand, TestStand automatically logs in the user using the operating system login.
  // Note: TestStand does not perform password authentication for an automatic login.
  //
  // StationOptions_Set_AutoLoginSystemUserRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - enabled: bool - Specifies if the LoginLogout callback sequence uses the current user login for the operating system as the login for TestStand when first launching a user interface or sequence editor.  
  //
  // StationOptions_Set_AutoLoginSystemUserResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_AutoLoginSystemUserRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_AutoLoginSystemUserResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if the LoginLogout callback sequence uses the current user login for the operating system as the login for TestStand when first launching a user interface or sequence editor.  
  //
  rpc Set_AutoLoginSystemUser(StationOptions_Set_AutoLoginSystemUserRequest) returns (StationOptions_Set_AutoLoginSystemUserResponse);
  rpc Get_AutoLoginSystemUser(StationOptions_Get_AutoLoginSystemUserRequest) returns (StationOptions_Get_AutoLoginSystemUserResponse);
  
  
  // Property: RequireUserLogin
  //
  // Specifies if the sequence editor or user interfaces require that a user be logged in.
  // 
  //
  // TestStand only uses this property when the StationOptions.EnableUserPrivilegeChecking property is False. When this property is True, the user interfaces are disabled until a user successfully logs in.
  //
  // StationOptions_Set_RequireUserLoginRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - requireUser: bool - Specifies if the sequence editor or user interfaces require that a user be logged in.  
  //
  // StationOptions_Set_RequireUserLoginResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_RequireUserLoginRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_RequireUserLoginResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if the sequence editor or user interfaces require that a user be logged in.  
  //
  rpc Set_RequireUserLogin(StationOptions_Set_RequireUserLoginRequest) returns (StationOptions_Set_RequireUserLoginResponse);
  rpc Get_RequireUserLogin(StationOptions_Get_RequireUserLoginRequest) returns (StationOptions_Get_RequireUserLoginResponse);
  
  
  // Property: RTEOption
  //
  // Specifies the default behavior of TestStand when a run-time error occurs in an execution.
  // 
  //
  // This property replaced the more limited property Engine.BreakOnRTE and offers a superset of the functionality.
  //
  // StationOptions_Set_RTEOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - option: RTEOptions - Specifies the default behavior of TestStand when a run-time error occurs in an execution.  
  //
  // StationOptions_Set_RTEOptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_RTEOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_RTEOptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: RTEOptions - Specifies the default behavior of TestStand when a run-time error occurs in an execution.  
  //
  rpc Set_RTEOption(StationOptions_Set_RTEOptionRequest) returns (StationOptions_Set_RTEOptionResponse);
  rpc Get_RTEOption(StationOptions_Get_RTEOptionRequest) returns (StationOptions_Get_RTEOptionResponse);
  
  
  // Property: TracingEnabled
  //
  // Specifies if tracing is enabled for the sequence editor and user interfaces.
  //
  // StationOptions_Set_TracingEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - isEnabled: bool - Specifies if tracing is enabled for the sequence editor and user interfaces. 
  //
  // StationOptions_Set_TracingEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_TracingEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_TracingEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if tracing is enabled for the sequence editor and user interfaces. 
  //
  rpc Set_TracingEnabled(StationOptions_Set_TracingEnabledRequest) returns (StationOptions_Set_TracingEnabledResponse);
  rpc Get_TracingEnabled(StationOptions_Get_TracingEnabledRequest) returns (StationOptions_Get_TracingEnabledResponse);
  
  
  // Property: BreakpointsEnabled
  //
  // Specifies whether to stop on breakpoints in all executions.
  // 
  //
  // Set this property to True to stop on breakpoints. Set this property to False to ignore breakpoints.
  //
  // StationOptions_Set_BreakpointsEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - isEnabled: bool - Specifies whether to stop on breakpoints in all executions.  
  //
  // StationOptions_Set_BreakpointsEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_BreakpointsEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_BreakpointsEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether to stop on breakpoints in all executions.  
  //
  rpc Set_BreakpointsEnabled(StationOptions_Set_BreakpointsEnabledRequest) returns (StationOptions_Set_BreakpointsEnabledResponse);
  rpc Get_BreakpointsEnabled(StationOptions_Get_BreakpointsEnabledRequest) returns (StationOptions_Get_BreakpointsEnabledResponse);
  
  
  // Property: DisableResults
  //
  // Specifies whether to disable recording of results for all steps.
  //
  // When this property is True, TestStand does not record results for steps. When this property is False, TestStand records results based on the setting of the Step.ResultRecordingOption property of each individual step or based on the Sequence.DisableResults property and the Execution.DisableResults property.
  // Note: TestStand might not honor changes to this property in a running sequence until the sequence completes the current step group.
  //
  // StationOptions_Set_DisableResultsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - isDisabled: bool - Specifies whether to disable recording of results for all steps. 
  //
  // StationOptions_Set_DisableResultsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_DisableResultsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_DisableResultsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether to disable recording of results for all steps. 
  //
  rpc Set_DisableResults(StationOptions_Set_DisableResultsRequest) returns (StationOptions_Set_DisableResultsResponse);
  rpc Get_DisableResults(StationOptions_Get_DisableResultsRequest) returns (StationOptions_Get_DisableResultsResponse);
  
  
  // Property: AlwaysGotoCleanupOnFailure
  //
  // Overrides the Sequence.FailureAction property setting when this property is True.
  //
  // StationOptions_Set_AlwaysGotoCleanupOnFailureRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - isEnabled: bool - Overrides the Sequence.FailureAction property setting when this property is True. 
  //
  // StationOptions_Set_AlwaysGotoCleanupOnFailureResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_AlwaysGotoCleanupOnFailureRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_AlwaysGotoCleanupOnFailureResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Overrides the Sequence.FailureAction property setting when this property is True. 
  //
  rpc Set_AlwaysGotoCleanupOnFailure(StationOptions_Set_AlwaysGotoCleanupOnFailureRequest) returns (StationOptions_Set_AlwaysGotoCleanupOnFailureResponse);
  rpc Get_AlwaysGotoCleanupOnFailure(StationOptions_Get_AlwaysGotoCleanupOnFailureRequest) returns (StationOptions_Get_AlwaysGotoCleanupOnFailureResponse);
  
  
  // Property: ExecutionMask
  //
  // Specifies execution options.
  //
  // Specifies the execution options using ExecutionMask constants. To specify multiple execution options, use the bitwise-OR operator.
  //
  // StationOptions_Set_ExecutionMaskRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - val: int32 - Specifies execution options. 
  //
  // StationOptions_Set_ExecutionMaskResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_ExecutionMaskRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_ExecutionMaskResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies execution options. 
  //
  rpc Set_ExecutionMask(StationOptions_Set_ExecutionMaskRequest) returns (StationOptions_Set_ExecutionMaskResponse);
  rpc Get_ExecutionMask(StationOptions_Get_ExecutionMaskRequest) returns (StationOptions_Get_ExecutionMaskResponse);
  
  
  // Property: InteractiveBranchMode
  //
  // Specifies the action TestStand takes when executing a Goto step or evaluating a post action that specifies a new destination step while running in an interactive execution.
  //
  // StationOptions_Set_InteractiveBranchModeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - mode: InteractiveBranchModes - Specifies the action TestStand takes when executing a Goto step or evaluating a post action that specifies a new destination step while running in an interactive execution. 
  //
  // StationOptions_Set_InteractiveBranchModeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_InteractiveBranchModeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_InteractiveBranchModeResponse - The response message from the server. It provides the return value.
  //    - returnValue: InteractiveBranchModes - Specifies the action TestStand takes when executing a Goto step or evaluating a post action that specifies a new destination step while running in an interactive execution. 
  //
  rpc Set_InteractiveBranchMode(StationOptions_Set_InteractiveBranchModeRequest) returns (StationOptions_Set_InteractiveBranchModeResponse);
  rpc Get_InteractiveBranchMode(StationOptions_Get_InteractiveBranchModeRequest) returns (StationOptions_Get_InteractiveBranchModeResponse);
  
  
  // Property: ShowHiddenProperties
  //
  // Specifies whether to display in user interfaces properties marked as hidden.
  // 
  //
  // When this property is True, TestStand applications display all the subproperties of property objects in dialog boxes and variables views. When this property is False, TestStand applications do not display the subproperties marked with the PropFlags_Hidden flag.
  //
  // StationOptions_Set_ShowHiddenPropertiesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - show: bool - Specifies whether to display in user interfaces properties marked as hidden.  
  //
  // StationOptions_Set_ShowHiddenPropertiesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_ShowHiddenPropertiesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_ShowHiddenPropertiesResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether to display in user interfaces properties marked as hidden.  
  //
  rpc Set_ShowHiddenProperties(StationOptions_Set_ShowHiddenPropertiesRequest) returns (StationOptions_Set_ShowHiddenPropertiesResponse);
  rpc Get_ShowHiddenProperties(StationOptions_Get_ShowHiddenPropertiesRequest) returns (StationOptions_Get_ShowHiddenPropertiesResponse);
  
  
  // Property: PromptToFindFiles
  //
  // Specifies if TestStand launches a File dialog box when it cannot find the necessary files in the current search directory paths.
  //
  // StationOptions_Set_PromptToFindFilesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - isEnabled: bool - Specifies if TestStand launches a File dialog box when it cannot find the necessary files in the current search directory paths. 
  //
  // StationOptions_Set_PromptToFindFilesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_PromptToFindFilesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_PromptToFindFilesResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if TestStand launches a File dialog box when it cannot find the necessary files in the current search directory paths. 
  //
  rpc Set_PromptToFindFiles(StationOptions_Set_PromptToFindFilesRequest) returns (StationOptions_Set_PromptToFindFilesResponse);
  rpc Get_PromptToFindFiles(StationOptions_Get_PromptToFindFilesRequest) returns (StationOptions_Get_PromptToFindFilesResponse);
  
  
  // Property: SeqFileVersionAutoIncrementOpt
  //
  // Specifies if sequence file versions are automatically incremented when the file is saved.
  //
  // StationOptions_Set_SeqFileVersionAutoIncrementOptRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - option: FileVersionAutoIncrement - Specifies if sequence file versions are automatically incremented when the file is saved. 
  //
  // StationOptions_Set_SeqFileVersionAutoIncrementOptResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_SeqFileVersionAutoIncrementOptRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_SeqFileVersionAutoIncrementOptResponse - The response message from the server. It provides the return value.
  //    - returnValue: FileVersionAutoIncrement - Specifies if sequence file versions are automatically incremented when the file is saved. 
  //
  rpc Set_SeqFileVersionAutoIncrementOpt(StationOptions_Set_SeqFileVersionAutoIncrementOptRequest) returns (StationOptions_Set_SeqFileVersionAutoIncrementOptResponse);
  rpc Get_SeqFileVersionAutoIncrementOpt(StationOptions_Get_SeqFileVersionAutoIncrementOptRequest) returns (StationOptions_Get_SeqFileVersionAutoIncrementOptResponse);
  
  
  // Property: TypeVersionAutoIncrementOpt
  //
  // Specifies if the sequence editor automatically increments type versions before saving modified types.
  //
  // The type version number is composed of the following four things in this format: Major.Minor.Revision.Build.
  //
  // StationOptions_Set_TypeVersionAutoIncrementOptRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - option: TypeVersionAutoIncrement - Specifies if the sequence editor automatically increments type versions before saving modified types. 
  //
  // StationOptions_Set_TypeVersionAutoIncrementOptResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_TypeVersionAutoIncrementOptRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_TypeVersionAutoIncrementOptResponse - The response message from the server. It provides the return value.
  //    - returnValue: TypeVersionAutoIncrement - Specifies if the sequence editor automatically increments type versions before saving modified types. 
  //
  rpc Set_TypeVersionAutoIncrementOpt(StationOptions_Set_TypeVersionAutoIncrementOptRequest) returns (StationOptions_Set_TypeVersionAutoIncrementOptResponse);
  rpc Get_TypeVersionAutoIncrementOpt(StationOptions_Get_TypeVersionAutoIncrementOptRequest) returns (StationOptions_Get_TypeVersionAutoIncrementOptResponse);
  
  
  // Property: TypeVersionAutoIncrementPromptOpt
  //
  // Specifies if the sequence editor prompts the user to increment the type version before saving the modified types.
  //
  // StationOptions_Set_TypeVersionAutoIncrementPromptOptRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - option: bool - Specifies if the sequence editor prompts the user to increment the type version before saving the modified types. 
  //
  // StationOptions_Set_TypeVersionAutoIncrementPromptOptResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_TypeVersionAutoIncrementPromptOptRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_TypeVersionAutoIncrementPromptOptResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if the sequence editor prompts the user to increment the type version before saving the modified types. 
  //
  rpc Set_TypeVersionAutoIncrementPromptOpt(StationOptions_Set_TypeVersionAutoIncrementPromptOptRequest) returns (StationOptions_Set_TypeVersionAutoIncrementPromptOptResponse);
  rpc Get_TypeVersionAutoIncrementPromptOpt(StationOptions_Get_TypeVersionAutoIncrementPromptOptRequest) returns (StationOptions_Get_TypeVersionAutoIncrementPromptOptResponse);
  
  
  // Property: ReloadDocsWhenOpeningWorkspace
  //
  // Specifies if the sequence editor opens the documents that were open when the workspace was unloaded.
  // 
  //
  // When this property is True and you open a workspace file, the sequence editor opens the documents that were open when the workspace file was last closed.
  //
  // StationOptions_Set_ReloadDocsWhenOpeningWorkspaceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - reloadDocs: bool - Specifies if the sequence editor opens the documents that were open when the workspace was unloaded.  
  //
  // StationOptions_Set_ReloadDocsWhenOpeningWorkspaceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_ReloadDocsWhenOpeningWorkspaceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_ReloadDocsWhenOpeningWorkspaceResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if the sequence editor opens the documents that were open when the workspace was unloaded.  
  //
  rpc Set_ReloadDocsWhenOpeningWorkspace(StationOptions_Set_ReloadDocsWhenOpeningWorkspaceRequest) returns (StationOptions_Set_ReloadDocsWhenOpeningWorkspaceResponse);
  rpc Get_ReloadDocsWhenOpeningWorkspace(StationOptions_Get_ReloadDocsWhenOpeningWorkspaceRequest) returns (StationOptions_Get_ReloadDocsWhenOpeningWorkspaceResponse);
  
  
  // Property: ReloadWorkspaceAtStartup
  //
  // Specifies if the sequence editor opens the last workspace file loaded when it launches.
  // 
  //
  // If this option is True when the sequence editor launches, the sequence editor loads the workspace file the Engine.LastWorkspacePath property specifies.
  //
  // StationOptions_Set_ReloadWorkspaceAtStartupRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - reloadWorkspace: bool - Specifies if the sequence editor opens the last workspace file loaded when it launches.  
  //
  // StationOptions_Set_ReloadWorkspaceAtStartupResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_ReloadWorkspaceAtStartupRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_ReloadWorkspaceAtStartupResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if the sequence editor opens the last workspace file loaded when it launches.  
  //
  rpc Set_ReloadWorkspaceAtStartup(StationOptions_Set_ReloadWorkspaceAtStartupRequest) returns (StationOptions_Set_ReloadWorkspaceAtStartupResponse);
  rpc Get_ReloadWorkspaceAtStartup(StationOptions_Get_ReloadWorkspaceAtStartupRequest) returns (StationOptions_Get_ReloadWorkspaceAtStartupResponse);
  
  
  // Property: StationID
  //
  // Specifies a test station identification string for this instance of the TestStand Engine.
  // This property never returns an empty string. If you set this property to an empty string, this property returns the same value as the Engine.ComputerName property.
  // 
  //
  // StationOptions_Set_StationIDRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - val: string - Specifies a test station identification string for this instance of the TestStand Engine. This property never returns an empty string. If you set this property to an empty string, this property returns the same value as the Engine.ComputerName property.  
  //
  // StationOptions_Set_StationIDResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_StationIDRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_StationIDResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies a test station identification string for this instance of the TestStand Engine. This property never returns an empty string. If you set this property to an empty string, this property returns the same value as the Engine.ComputerName property.  
  //
  rpc Set_StationID(StationOptions_Set_StationIDRequest) returns (StationOptions_Set_StationIDResponse);
  rpc Get_StationID(StationOptions_Get_StationIDRequest) returns (StationOptions_Get_StationIDResponse);
  
  
  // Property: SpecifyStepsByUniqueIdInExpressions
  //
  // Specifies how the Expression Browser dialog box specifies steps in expressions.
  //
  // TestStand uses this option to determine whether to replace the step name with the step ID when you construct an expression in the Expression Browser dialog box, as follows: Sequence.Main["step name"].Property.
  //
  // StationOptions_Set_SpecifyStepsByUniqueIdInExpressionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - option: SpecifyStepsByUniqueIdOptions - Specifies how the Expression Browser dialog box specifies steps in expressions. 
  //
  // StationOptions_Set_SpecifyStepsByUniqueIdInExpressionsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_SpecifyStepsByUniqueIdInExpressionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_SpecifyStepsByUniqueIdInExpressionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: SpecifyStepsByUniqueIdOptions - Specifies how the Expression Browser dialog box specifies steps in expressions. 
  //
  rpc Set_SpecifyStepsByUniqueIdInExpressions(StationOptions_Set_SpecifyStepsByUniqueIdInExpressionsRequest) returns (StationOptions_Set_SpecifyStepsByUniqueIdInExpressionsResponse);
  rpc Get_SpecifyStepsByUniqueIdInExpressions(StationOptions_Get_SpecifyStepsByUniqueIdInExpressionsRequest) returns (StationOptions_Get_SpecifyStepsByUniqueIdInExpressionsResponse);
  
  
  // Property: UseStationModel
  //
  // Specifies if client sequence files use the station model.
  //
  // When you set this property to True, the station model specified by StationModelSequenceFilePath is used when the model option for a client sequence file specifies to use the station model.
  // When you set this property to False, sequence files only have a process model file associated with them if they explicitly specify one. Typically, sequence files do not explicitly specify a process model file.
  //
  // StationOptions_Set_UseStationModelRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - isEnabled: bool - Specifies if client sequence files use the station model. 
  //
  // StationOptions_Set_UseStationModelResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_UseStationModelRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_UseStationModelResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if client sequence files use the station model. 
  //
  rpc Set_UseStationModel(StationOptions_Set_UseStationModelRequest) returns (StationOptions_Set_UseStationModelResponse);
  rpc Get_UseStationModel(StationOptions_Get_UseStationModelRequest) returns (StationOptions_Get_UseStationModelResponse);
  
  
  // Property: AllowOtherModels
  //
  // Specifies if sequence files can specify a process model file other than the current station model file.
  // 
  //
  // When you set this property to False, you can only load the following sequence files:
  // * Sequence files that do not specify a process model file    * Sequence files that specify the current station model as their process model file
  //
  // StationOptions_Set_AllowOtherModelsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - isEnabled: bool - Specifies if sequence files can specify a process model file other than the current station model file.  
  //
  // StationOptions_Set_AllowOtherModelsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_AllowOtherModelsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_AllowOtherModelsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if sequence files can specify a process model file other than the current station model file.  
  //
  rpc Set_AllowOtherModels(StationOptions_Set_AllowOtherModelsRequest) returns (StationOptions_Set_AllowOtherModelsResponse);
  rpc Get_AllowOtherModels(StationOptions_Get_AllowOtherModelsRequest) returns (StationOptions_Get_AllowOtherModelsResponse);
  
  
  // Property: StationModelSequenceFilePath
  //
  // Specifies the pathname of the station model sequence file.
  // 
  //
  // If this property is a relative pathname, TestStand uses the Engine.FindFileEx method to determine the absolute pathname of the station model sequence file.
  //
  // StationOptions_Set_StationModelSequenceFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - ModelPath: string - Specifies the pathname of the station model sequence file.  
  //
  // StationOptions_Set_StationModelSequenceFilePathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_StationModelSequenceFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_StationModelSequenceFilePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the pathname of the station model sequence file.  
  //
  rpc Set_StationModelSequenceFilePath(StationOptions_Set_StationModelSequenceFilePathRequest) returns (StationOptions_Set_StationModelSequenceFilePathResponse);
  rpc Get_StationModelSequenceFilePath(StationOptions_Get_StationModelSequenceFilePathRequest) returns (StationOptions_Get_StationModelSequenceFilePathResponse);
  
  
  // Property: Language
  //
  // Specifies the language TestStand uses to display text.
  //
  // Changes to this property do not take effect until the next time you start the engine or call the Engine.ReloadStringResourceFiles method.
  //
  // StationOptions_Set_LanguageRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - Language: string - Specifies the language TestStand uses to display text. 
  //
  // StationOptions_Set_LanguageResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_LanguageRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_LanguageResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the language TestStand uses to display text. 
  //
  rpc Set_Language(StationOptions_Set_LanguageRequest) returns (StationOptions_Set_LanguageResponse);
  rpc Get_Language(StationOptions_Get_LanguageRequest) returns (StationOptions_Get_LanguageResponse);
  
  
  // Property: UseLocalizedDecimalPoint
  //
  // Specifies whether to use the operating system setting to determine the character used as a decimal point.
  // 
  //
  // When this property is True, TestStand uses the operating system setting to determine the character it uses as the localized decimal point. When this property is False, TestStand uses the period character to represent decimal points.
  //
  // StationOptions_Set_UseLocalizedDecimalPointRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - enabled: bool - Specifies whether to use the operating system setting to determine the character used as a decimal point.  
  //
  // StationOptions_Set_UseLocalizedDecimalPointResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_UseLocalizedDecimalPointRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_UseLocalizedDecimalPointResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether to use the operating system setting to determine the character used as a decimal point.  
  //
  rpc Set_UseLocalizedDecimalPoint(StationOptions_Set_UseLocalizedDecimalPointRequest) returns (StationOptions_Set_UseLocalizedDecimalPointResponse);
  rpc Get_UseLocalizedDecimalPoint(StationOptions_Get_UseLocalizedDecimalPointRequest) returns (StationOptions_Get_UseLocalizedDecimalPointResponse);
  
  
  // Property: RecognizeMBChars
  //
  // Indicates whether TestStand recognizes extended character code sequences when it compares and processes strings.
  //
  // The TestStand Engine determines this based on the current system code page at launch.
  // Note: As of TestStand 2019, this property is read-only. Attempting to set it results in a run-time error. Assigning to the current value is ignored.
  //
  // StationOptions_Set_RecognizeMBCharsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - isEnabled: bool - Indicates whether TestStand recognizes extended character code sequences when it compares and processes strings. 
  //
  // StationOptions_Set_RecognizeMBCharsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_RecognizeMBCharsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_RecognizeMBCharsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Indicates whether TestStand recognizes extended character code sequences when it compares and processes strings. 
  //
  rpc Set_RecognizeMBChars(StationOptions_Set_RecognizeMBCharsRequest) returns (StationOptions_Set_RecognizeMBCharsResponse);
  rpc Get_RecognizeMBChars(StationOptions_Get_RecognizeMBCharsRequest) returns (StationOptions_Get_RecognizeMBCharsResponse);
  
  
  // Property: AllowSequenceCallsFromRemoteMachine
  //
  // Specifies if a remote computer can run a sequence on the current station.
  //
  // StationOptions_Set_AllowSequenceCallsFromRemoteMachineRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - isEnabled: bool - Specifies if a remote computer can run a sequence on the current station. 
  //
  // StationOptions_Set_AllowSequenceCallsFromRemoteMachineResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_AllowSequenceCallsFromRemoteMachineRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_AllowSequenceCallsFromRemoteMachineResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if a remote computer can run a sequence on the current station. 
  //
  rpc Set_AllowSequenceCallsFromRemoteMachine(StationOptions_Set_AllowSequenceCallsFromRemoteMachineRequest) returns (StationOptions_Set_AllowSequenceCallsFromRemoteMachineResponse);
  rpc Get_AllowSequenceCallsFromRemoteMachine(StationOptions_Get_AllowSequenceCallsFromRemoteMachineRequest) returns (StationOptions_Get_AllowSequenceCallsFromRemoteMachineResponse);
  
  
  // Property: AllowAllUsersAccessFromRemoteMachine
  //
  // Specifies whether all users from remote machines can call sequences on this computer.
  // 
  //
  // If you set this property to True, you do not have to configure the remote TestStand server using the dcomcnfg application. When you set this property, TestStand modifies the registry in the same manner as dcomcnfg.
  // Note: TestStand does not use this setting unless you set the StationOptions.AllowSequenceCallFromRemoteMachine property to True.
  //
  // StationOptions_Set_AllowAllUsersAccessFromRemoteMachineRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - isEnabled: bool - Specifies whether all users from remote machines can call sequences on this computer.  
  //
  // StationOptions_Set_AllowAllUsersAccessFromRemoteMachineResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_AllowAllUsersAccessFromRemoteMachineRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_AllowAllUsersAccessFromRemoteMachineResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether all users from remote machines can call sequences on this computer.  
  //
  rpc Set_AllowAllUsersAccessFromRemoteMachine(StationOptions_Set_AllowAllUsersAccessFromRemoteMachineRequest) returns (StationOptions_Set_AllowAllUsersAccessFromRemoteMachineResponse);
  rpc Get_AllowAllUsersAccessFromRemoteMachine(StationOptions_Get_AllowAllUsersAccessFromRemoteMachineRequest) returns (StationOptions_Get_AllowAllUsersAccessFromRemoteMachineResponse);
  
  
  // Property: ShowEngineTrayIconOnRemoteStations
  //
  // Specifies whether to show the system tray icon when the TestStand remote engine is active on this computer.
  //
  // StationOptions_Set_ShowEngineTrayIconOnRemoteStationsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - isEnabled: bool - Specifies whether to show the system tray icon when the TestStand remote engine is active on this computer. 
  //
  // StationOptions_Set_ShowEngineTrayIconOnRemoteStationsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_ShowEngineTrayIconOnRemoteStationsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_ShowEngineTrayIconOnRemoteStationsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether to show the system tray icon when the TestStand remote engine is active on this computer. 
  //
  rpc Set_ShowEngineTrayIconOnRemoteStations(StationOptions_Set_ShowEngineTrayIconOnRemoteStationsRequest) returns (StationOptions_Set_ShowEngineTrayIconOnRemoteStationsResponse);
  rpc Get_ShowEngineTrayIconOnRemoteStations(StationOptions_Get_ShowEngineTrayIconOnRemoteStationsRequest) returns (StationOptions_Get_ShowEngineTrayIconOnRemoteStationsResponse);
  
  
  // Property: CheckOutFilesWhenEdited
  //
  // Specifies if the sequence editor checks a file out from source code control when you attempt to modify the file in the sequence editor.
  // 
  //
  // The default value is True. If this property is True and a current workspace is specified when you attempt to edit a checked-in file, the sequence editor prompts you to check the file out from source code control. If this property is False, you can edit a read-only file in the sequence editor only when you enable the Allow Editing of Read-Only Files option in the sequence editor.
  //
  // StationOptions_Set_CheckOutFilesWhenEditedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - checkOutFiles: bool - Specifies if the sequence editor checks a file out from source code control when you attempt to modify the file in the sequence editor.  
  //
  // StationOptions_Set_CheckOutFilesWhenEditedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_CheckOutFilesWhenEditedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_CheckOutFilesWhenEditedResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if the sequence editor checks a file out from source code control when you attempt to modify the file in the sequence editor.  
  //
  rpc Set_CheckOutFilesWhenEdited(StationOptions_Set_CheckOutFilesWhenEditedRequest) returns (StationOptions_Set_CheckOutFilesWhenEditedResponse);
  rpc Get_CheckOutFilesWhenEdited(StationOptions_Get_CheckOutFilesWhenEditedRequest) returns (StationOptions_Get_CheckOutFilesWhenEditedResponse);
  
  
  // Property: PromptWhenAddingFilesToSC
  //
  // Specifies if the sequence editor prompts you to add files to source code control when you add files to a workspace.
  // 
  //
  // When this option is True and a current workspace file is specified, the sequence editor launches a dialog box, in which you can add files to source code control whenever you add them to a workspace file. When this option is False, the sequence editor does not launch a dialog box.
  //
  // StationOptions_Set_PromptWhenAddingFilesToSCRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - promptAddFile: bool - Specifies if the sequence editor prompts you to add files to source code control when you add files to a workspace.  
  //
  // StationOptions_Set_PromptWhenAddingFilesToSCResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_PromptWhenAddingFilesToSCRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_PromptWhenAddingFilesToSCResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if the sequence editor prompts you to add files to source code control when you add files to a workspace.  
  //
  rpc Set_PromptWhenAddingFilesToSC(StationOptions_Set_PromptWhenAddingFilesToSCRequest) returns (StationOptions_Set_PromptWhenAddingFilesToSCResponse);
  rpc Get_PromptWhenAddingFilesToSC(StationOptions_Get_PromptWhenAddingFilesToSCRequest) returns (StationOptions_Get_PromptWhenAddingFilesToSCResponse);
  
  
  // Property: UseDialogForCheckOut
  //
  // Specifies if the sequence editor launches a dialog box to check out files from source code control.
  // 
  //
  // When this property is True, the sequence editor always launches a dialog box when you check out files from source code control. When this property is False, the sequence editor checks out the files without launching the dialog box.
  //
  // StationOptions_Set_UseDialogForCheckOutRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - useDialog: bool - Specifies if the sequence editor launches a dialog box to check out files from source code control.  
  //
  // StationOptions_Set_UseDialogForCheckOutResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_UseDialogForCheckOutRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_UseDialogForCheckOutResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if the sequence editor launches a dialog box to check out files from source code control.  
  //
  rpc Set_UseDialogForCheckOut(StationOptions_Set_UseDialogForCheckOutRequest) returns (StationOptions_Set_UseDialogForCheckOutResponse);
  rpc Get_UseDialogForCheckOut(StationOptions_Get_UseDialogForCheckOutRequest) returns (StationOptions_Get_UseDialogForCheckOutResponse);
  
  
  // Property: CheckOutOnlySelectedFiles
  //
  // Specifies if the sequence editor checks out only selected files in the workspace from source code control.
  // 
  //
  // A workspace file contains a list of project files, each project file contains a lists of sequence files, and a sequence file can contain lists of code modules and other files. When you set this option to True, the sequence editor only displays the selected file, such as a project file, in the source code control dialog boxes. When this property is False, the sequence editor displays the selected item and all the items it contains in the source code control dialog boxes.
  //
  // StationOptions_Set_CheckOutOnlySelectedFilesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - onlySelectedFiles: bool - Specifies if the sequence editor checks out only selected files in the workspace from source code control.  
  //
  // StationOptions_Set_CheckOutOnlySelectedFilesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_CheckOutOnlySelectedFilesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_CheckOutOnlySelectedFilesResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if the sequence editor checks out only selected files in the workspace from source code control.  
  //
  rpc Set_CheckOutOnlySelectedFiles(StationOptions_Set_CheckOutOnlySelectedFilesRequest) returns (StationOptions_Set_CheckOutOnlySelectedFilesResponse);
  rpc Get_CheckOutOnlySelectedFiles(StationOptions_Get_CheckOutOnlySelectedFilesRequest) returns (StationOptions_Get_CheckOutOnlySelectedFilesResponse);
  
  
  // Property: SystemDefaultSourceCodeControlProvider
  //
  // Specifies the default system source code control provider.
  // If you do not want to specify a default source code control provider, pass an empty string as the value of this property.
  // 
  //
  // Note: This is a system property. Changes to this property affect all Microsoft Windows applications using source code control integration.Note: Setting StationOptions.SystemDefaultSourceCodeControlProvider fails silently if TestStand does not have sufficient privileges to modify the Windows registry.
  // This property reflects the value stored in the Windows registry for the system source code control settings located in the string key HKEY_LOCAL_MACHINE\Software\SourceCodeControlProvider\ProviderRegKey. The key specifies the name of the HKEY_LOCAL_MACHINE\Software registry key that contains the source code control provider server name and path. (Platform: (32-bit TestStand)) On 64-bit operating systems, this registry key appears only in the 32-bit registry. Use the path HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\SourceCodeControlProvider\ProviderRegKey to access the key in the registry editor.
  // If the Engine.CurrentWorkspaceFile property is not empty and the WorkspaceFile.ProviderName property for the current workspace is empty, TestStand connects to the system default source code control provider to perform source code control operations.
  // If the value of this property is empty, TestStand only connects to a source code control provider if the WorkspaceFile.ProviderName property for the current workspace is not empty.
  //
  // StationOptions_Set_SystemDefaultSourceCodeControlProviderRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - val: string - Specifies the default system source code control provider. If you do not want to specify a default source code control provider, pass an empty string as the value of this property.  
  //
  // StationOptions_Set_SystemDefaultSourceCodeControlProviderResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_SystemDefaultSourceCodeControlProviderRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_SystemDefaultSourceCodeControlProviderResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the default system source code control provider. If you do not want to specify a default source code control provider, pass an empty string as the value of this property.  
  //
  rpc Set_SystemDefaultSourceCodeControlProvider(StationOptions_Set_SystemDefaultSourceCodeControlProviderRequest) returns (StationOptions_Set_SystemDefaultSourceCodeControlProviderResponse);
  rpc Get_SystemDefaultSourceCodeControlProvider(StationOptions_Get_SystemDefaultSourceCodeControlProviderRequest) returns (StationOptions_Get_SystemDefaultSourceCodeControlProviderResponse);
  
  
  // Property: UIMessageDelay
  //
  // Specifies how many milliseconds must pass between postings of UIMsg_Trace events.
  //
  // Set this property to specify how many milliseconds must pass before you receive the next UIMsg_Trace event. This property is useful for slowing down the posting of trace messages to the user interface or sequence editor to allow time for processing mouse events and/or to display the trace of an execution more slowly.
  // Note: The value of this property can never be less than the value of the StationOptions.UIMessageMinDelay property. If set to a lesser value, UIMessageDelay is automatically reset to the value of the StationOptions.UIMessageMinDelay property.
  //
  // StationOptions_Set_UIMessageDelayRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - millisecDelay: int32 - Specifies how many milliseconds must pass between postings of UIMsg_Trace events. 
  //
  // StationOptions_Set_UIMessageDelayResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_UIMessageDelayRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_UIMessageDelayResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies how many milliseconds must pass between postings of UIMsg_Trace events. 
  //
  rpc Set_UIMessageDelay(StationOptions_Set_UIMessageDelayRequest) returns (StationOptions_Set_UIMessageDelayResponse);
  rpc Get_UIMessageDelay(StationOptions_Get_UIMessageDelayRequest) returns (StationOptions_Get_UIMessageDelayResponse);
  
  
  // Property: UIMessageMinDelay
  //
  // Specifies the minimum value allowed for the StationOptions.UIMessageDelay property. This setting is not persisted like most StationOptions. The setting lasts only for the lifetime of the Engine.
  //
  // Default value is 0.
  // Use this property to specify the minimum value allowed for the StationOptions.UIMessageDelay property for the sequence editor or user interface.
  // 
  //
  // StationOptions_Set_UIMessageMinDelayRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - millisecDelay: int32 - Specifies the minimum value allowed for the StationOptions.UIMessageDelay property. This setting is not persisted like most StationOptions. The setting lasts only for the lifetime of the Engine. 
  //
  // StationOptions_Set_UIMessageMinDelayResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_UIMessageMinDelayRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_UIMessageMinDelayResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the minimum value allowed for the StationOptions.UIMessageDelay property. This setting is not persisted like most StationOptions. The setting lasts only for the lifetime of the Engine. 
  //
  rpc Set_UIMessageMinDelay(StationOptions_Set_UIMessageMinDelayRequest) returns (StationOptions_Set_UIMessageMinDelayResponse);
  rpc Get_UIMessageMinDelay(StationOptions_Get_UIMessageMinDelayRequest) returns (StationOptions_Get_UIMessageMinDelayResponse);
  
  
  // Property: InteractiveExePropagateStatus
  //
  // Specifies if TestStand allows sequence failure, Goto cleanup, and error settings from a nested interactive execution to propagate to the invoking execution.
  //
  // When this property is False, TestStand saves the values of the SequenceContext.SequenceFailed, SequenceContext.GotoCleanup, and SequenceContext.SequenceErrorOccurred properties before executing a nested interactive execution, and restores the values after executing a nested interactive execution. When this property is True, TestStand allows the nested interactive execution changes to affect the execution that invokes the nested interactive execution.
  //
  // StationOptions_Set_InteractiveExePropagateStatusRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - isEnabled: bool - Specifies if TestStand allows sequence failure, Goto cleanup, and error settings from a nested interactive execution to propagate to the invoking execution. 
  //
  // StationOptions_Set_InteractiveExePropagateStatusResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_InteractiveExePropagateStatusRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_InteractiveExePropagateStatusResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if TestStand allows sequence failure, Goto cleanup, and error settings from a nested interactive execution to propagate to the invoking execution. 
  //
  rpc Set_InteractiveExePropagateStatus(StationOptions_Set_InteractiveExePropagateStatusRequest) returns (StationOptions_Set_InteractiveExePropagateStatusResponse);
  rpc Get_InteractiveExePropagateStatus(StationOptions_Get_InteractiveExePropagateStatusRequest) returns (StationOptions_Get_InteractiveExePropagateStatusResponse);
  
  
  // Property: BreakOnStepFailure
  //
  // If this property is True, TestStand suspends an execution for any step that fails. If this property is False, TestStand suspends execution based on whether the ExecTypeMask_BreakOnStepFailure option is enabled for the execution.
  //
  // If a step in a process model sequence file fails, TestStand only suspends the execution if tracing is enabled for the sequence or if a previous suspend occurred within the sequence context.
  //
  // StationOptions_Set_BreakOnStepFailureRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - isEnabled: bool - If this property is True, TestStand suspends an execution for any step that fails. If this property is False, TestStand suspends execution based on whether the ExecTypeMask_BreakOnStepFailure option is enabled for the execution. 
  //
  // StationOptions_Set_BreakOnStepFailureResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_BreakOnStepFailureRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_BreakOnStepFailureResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - If this property is True, TestStand suspends an execution for any step that fails. If this property is False, TestStand suspends execution based on whether the ExecTypeMask_BreakOnStepFailure option is enabled for the execution. 
  //
  rpc Set_BreakOnStepFailure(StationOptions_Set_BreakOnStepFailureRequest) returns (StationOptions_Set_BreakOnStepFailureResponse);
  rpc Get_BreakOnStepFailure(StationOptions_Get_BreakOnStepFailureRequest) returns (StationOptions_Get_BreakOnStepFailureResponse);
  
  
  // Property: BreakOnSequenceFailure
  //
  // If this property is True, TestStand suspends an execution on sequence failure. If this property is False, TestStand suspends execution based on whether the ExecTypeMask_BreakOnSequenceFailure option is enabled for the execution.
  //
  // If a step in a process model sequence file causes the sequence to fail, TestStand only suspends the execution if tracing is enabled for the sequence or if a previous suspend occurred within the sequence context. TestStand also suspends an execution if the SequenceContext.SequenceFailed property is set during the execution of a step even when the step does not fail.
  //
  // StationOptions_Set_BreakOnSequenceFailureRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - isEnabled: bool - If this property is True, TestStand suspends an execution on sequence failure. If this property is False, TestStand suspends execution based on whether the ExecTypeMask_BreakOnSequenceFailure option is enabled for the execution. 
  //
  // StationOptions_Set_BreakOnSequenceFailureResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_BreakOnSequenceFailureRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_BreakOnSequenceFailureResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - If this property is True, TestStand suspends an execution on sequence failure. If this property is False, TestStand suspends execution based on whether the ExecTypeMask_BreakOnSequenceFailure option is enabled for the execution. 
  //
  rpc Set_BreakOnSequenceFailure(StationOptions_Set_BreakOnSequenceFailureRequest) returns (StationOptions_Set_BreakOnSequenceFailureResponse);
  rpc Get_BreakOnSequenceFailure(StationOptions_Get_BreakOnSequenceFailureRequest) returns (StationOptions_Get_BreakOnSequenceFailureResponse);
  
  
  // Property: DebugOptions
  //
  // Specifies the type of debug features that TestStand performs. Specify one or more DebugOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // StationOptions_Set_DebugOptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - val: int32 - Specifies the type of debug features that TestStand performs. Specify one or more DebugOptions constants. Use the bitwise-OR operator to specify multiple options. 
  //
  // StationOptions_Set_DebugOptionsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_DebugOptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_DebugOptionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the type of debug features that TestStand performs. Specify one or more DebugOptions constants. Use the bitwise-OR operator to specify multiple options. 
  //
  rpc Set_DebugOptions(StationOptions_Set_DebugOptionsRequest) returns (StationOptions_Set_DebugOptionsResponse);
  rpc Get_DebugOptions(StationOptions_Get_DebugOptionsRequest) returns (StationOptions_Get_DebugOptionsResponse);
  
  
  // Property: DefaultFileWritingFormat
  //
  // Specifies the format in which TestStand writes new files.
  //
  // Attempting to set to INI (or any other unsupported value) will throw an exception.
  //
  // StationOptions_Set_DefaultFileWritingFormatRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - returnVal: FileWritingFormats - Specifies the format in which TestStand writes new files. 
  //
  // StationOptions_Set_DefaultFileWritingFormatResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_DefaultFileWritingFormatRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_DefaultFileWritingFormatResponse - The response message from the server. It provides the return value.
  //    - returnValue: FileWritingFormats - Specifies the format in which TestStand writes new files. 
  //
  rpc Set_DefaultFileWritingFormat(StationOptions_Set_DefaultFileWritingFormatRequest) returns (StationOptions_Set_DefaultFileWritingFormatResponse);
  rpc Get_DefaultFileWritingFormat(StationOptions_Get_DefaultFileWritingFormatRequest) returns (StationOptions_Get_DefaultFileWritingFormatResponse);
  
  
  // Property: AllowAutomaticTypeConflictResolution
  //
  // Specifies how TestStand automatically resolves type conflicts. TestStand normally resolves type conflicts when TestStand loads a file with a version of a type that differs from the version of the type currently in memory and when the Use the definition that has the highest version number option on the Version tab of the Type Properties dialog box or on the Version tab of the Step Type Properties dialog box is enabled for both versions of the type. In this case, TestStand updates the file with the lower version of the type to use the higher version.
  //
  // StationOptions_Set_AllowAutomaticTypeConflictResolutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - val: AllowAutomaticTypeConflictResolutionOptions - Specifies how TestStand automatically resolves type conflicts. TestStand normally resolves type conflicts when TestStand loads a file with a version of a type that differs from the version of the type currently in memory and when the Use the definition that has the highest version number option on the Version tab of the Type Properties dialog box or on the Version tab of the Step Type Properties dialog box is enabled for both versions of the type. In this case, TestStand updates the file with the lower version of the type to use the higher version. 
  //
  // StationOptions_Set_AllowAutomaticTypeConflictResolutionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_AllowAutomaticTypeConflictResolutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_AllowAutomaticTypeConflictResolutionResponse - The response message from the server. It provides the return value.
  //    - returnValue: AllowAutomaticTypeConflictResolutionOptions - Specifies how TestStand automatically resolves type conflicts. TestStand normally resolves type conflicts when TestStand loads a file with a version of a type that differs from the version of the type currently in memory and when the Use the definition that has the highest version number option on the Version tab of the Type Properties dialog box or on the Version tab of the Step Type Properties dialog box is enabled for both versions of the type. In this case, TestStand updates the file with the lower version of the type to use the higher version. 
  //
  rpc Set_AllowAutomaticTypeConflictResolution(StationOptions_Set_AllowAutomaticTypeConflictResolutionRequest) returns (StationOptions_Set_AllowAutomaticTypeConflictResolutionResponse);
  rpc Get_AllowAutomaticTypeConflictResolution(StationOptions_Get_AllowAutomaticTypeConflictResolutionRequest) returns (StationOptions_Get_AllowAutomaticTypeConflictResolutionResponse);
  
  
  // Property: FileModificationIndicatorPolicy
  //
  // Specifies the policy for when to indicate that a file being opened is modified. When you open a file, TestStand must modify the file in memory when a version of a type defined in the file is updated as a result of an automatic type conflict resolution, or if the data format of the file changes as a result of opening the file in a newer version of TestStand. In such cases, TestStand modifies the file in memory even if the policy specifies not to indicate that the file is modified.
  // Specify one or more FileModificationIndicatorPolicies constants. Use the bitwise-OR operator to specify multiple policies.
  //
  // StationOptions_Set_FileModificationIndicatorPolicyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - val: int32 - Specifies the policy for when to indicate that a file being opened is modified. When you open a file, TestStand must modify the file in memory when a version of a type defined in the file is updated as a result of an automatic type conflict resolution, or if the data format of the file changes as a result of opening the file in a newer version of TestStand. In such cases, TestStand modifies the file in memory even if the policy specifies not to indicate that the file is modified. Specify one or more FileModificationIndicatorPolicies constants. Use the bitwise-OR operator to specify multiple policies. 
  //
  // StationOptions_Set_FileModificationIndicatorPolicyResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_FileModificationIndicatorPolicyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_FileModificationIndicatorPolicyResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the policy for when to indicate that a file being opened is modified. When you open a file, TestStand must modify the file in memory when a version of a type defined in the file is updated as a result of an automatic type conflict resolution, or if the data format of the file changes as a result of opening the file in a newer version of TestStand. In such cases, TestStand modifies the file in memory even if the policy specifies not to indicate that the file is modified. Specify one or more FileModificationIndicatorPolicies constants. Use the bitwise-OR operator to specify multiple policies. 
  //
  rpc Set_FileModificationIndicatorPolicy(StationOptions_Set_FileModificationIndicatorPolicyRequest) returns (StationOptions_Set_FileModificationIndicatorPolicyResponse);
  rpc Get_FileModificationIndicatorPolicy(StationOptions_Get_FileModificationIndicatorPolicyRequest) returns (StationOptions_Get_FileModificationIndicatorPolicyResponse);
  
  
  // Property: DefaultCPUAffinityForThreads
  //
  // Note: This property is obsolete. Use the StationOptions.DefaultCPUAffinityForThreadsEx property instead. Getting this property on a 64-bit instance of the TestStand Engine results in an error. Setting this property on 32-bit architectures does not result in an error, but only the first 32 CPUs can be specified.
  //
  // Specifies which CPUs to use for threads TestStand creates and the user interface thread.
  // This property is a number in which each bit represents a CPU. The lowest-order bit represents the first CPU. For example, a value of 12, which is 1100 in binary, represents CPUs 3 and 4 on a quad-core computer. A value of -1 specifies to use all CPUs available to the process.
  // TestStand does not update the CPU affinity of threads for currently executing sequences when you change this property.
  // Refer to Using TestStand on SMP Systems for more information about optimizing TestStand performance on symmetric multiprocessing (SMP) systems for multithreaded applications.
  //
  // StationOptions_Set_DefaultCPUAffinityForThreadsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - val: int32 - Note: This property is obsolete. Use the StationOptions.DefaultCPUAffinityForThreadsEx property instead. Getting this property on a 64-bit instance of the TestStand Engine results in an error. Setting this property on 32-bit architectures does not result in an error, but only the first 32 CPUs can be specified. 
  //
  // StationOptions_Set_DefaultCPUAffinityForThreadsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_DefaultCPUAffinityForThreadsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_DefaultCPUAffinityForThreadsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Note: This property is obsolete. Use the StationOptions.DefaultCPUAffinityForThreadsEx property instead. Getting this property on a 64-bit instance of the TestStand Engine results in an error. Setting this property on 32-bit architectures does not result in an error, but only the first 32 CPUs can be specified. 
  //
  rpc Set_DefaultCPUAffinityForThreads(StationOptions_Set_DefaultCPUAffinityForThreadsRequest) returns (StationOptions_Set_DefaultCPUAffinityForThreadsResponse);
  rpc Get_DefaultCPUAffinityForThreads(StationOptions_Get_DefaultCPUAffinityForThreadsRequest) returns (StationOptions_Get_DefaultCPUAffinityForThreadsResponse);
  
  
  // Property: PreloadProgressDelay
  //
  // Specifies the delay in seconds before the Preload Progress dialog box launches while preloading code modules. Specify a negative value to disable the Preload Progress dialog box but continue to preload code modules.
  //
  // StationOptions_Set_PreloadProgressDelayRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - val: double - Specifies the delay in seconds before the Preload Progress dialog box launches while preloading code modules. Specify a negative value to disable the Preload Progress dialog box but continue to preload code modules. 
  //
  // StationOptions_Set_PreloadProgressDelayResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_PreloadProgressDelayRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_PreloadProgressDelayResponse - The response message from the server. It provides the return value.
  //    - returnValue: double - Specifies the delay in seconds before the Preload Progress dialog box launches while preloading code modules. Specify a negative value to disable the Preload Progress dialog box but continue to preload code modules. 
  //
  rpc Set_PreloadProgressDelay(StationOptions_Set_PreloadProgressDelayRequest) returns (StationOptions_Set_PreloadProgressDelayResponse);
  rpc Get_PreloadProgressDelay(StationOptions_Get_PreloadProgressDelayRequest) returns (StationOptions_Get_PreloadProgressDelayResponse);
  
  
  // Property: AllowCancellingPreloadExpression
  //
  // When this Boolean expression is empty or evaluates to True, the Preload Progress dialog box includes a Cancel button so users can cancel preloading files. When this property evaluates to False, the dialog box does not contain a Cancel button to prevent users from cancelling preloading files.
  //
  // If you cancel preloading a file when you open a sequence file, the sequence file opens without preloading the code modules. If you cancel preloading files when you execute a sequence file, the execution does not initiate.
  // You can use the CurrentUserHasPrivilege expression function to allow users to cancel preloading files based on privileges. For example, set this property to CurrentUserHasPrivilege(Priv_Terminate) || CurrentUserHasPrivilege(Priv_Abort) to allow users to cancel preloading files only when the user has terminate or abort privileges.
  // This property only affects cancelling preloading files directly from the Preload Progress dialog box. If TestStand cannot find a file during preloading and launches a Find File dialog box, you can cancel the Find File dialog box to cancel preloading files regardless of the value of this property.
  //
  // StationOptions_Set_AllowCancellingPreloadExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - val: string - When this Boolean expression is empty or evaluates to True, the Preload Progress dialog box includes a Cancel button so users can cancel preloading files. When this property evaluates to False, the dialog box does not contain a Cancel button to prevent users from cancelling preloading files. 
  //
  // StationOptions_Set_AllowCancellingPreloadExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_AllowCancellingPreloadExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_AllowCancellingPreloadExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - When this Boolean expression is empty or evaluates to True, the Preload Progress dialog box includes a Cancel button so users can cancel preloading files. When this property evaluates to False, the dialog box does not contain a Cancel button to prevent users from cancelling preloading files. 
  //
  rpc Set_AllowCancellingPreloadExpression(StationOptions_Set_AllowCancellingPreloadExpressionRequest) returns (StationOptions_Set_AllowCancellingPreloadExpressionResponse);
  rpc Get_AllowCancellingPreloadExpression(StationOptions_Get_AllowCancellingPreloadExpressionRequest) returns (StationOptions_Get_AllowCancellingPreloadExpressionResponse);
  
  
  // Property: DefaultCPUAffinityForThreadsEx
  //
  // Specifies which CPUs to use for threads TestStand creates and the user interface thread.
  //
  // This property is a number in which each bit represents a CPU. The lowest-order bit represents the first CPU. For example, a value of 12, which is 1100 in binary, represents CPUs 3 and 4 on a quad-core computer. A value of -1 specifies to use all CPUs available to the process.
  // TestStand does not update the CPU affinity of threads for currently executing sequences when you change this property.
  // Refer to Using TestStand on SMP Systems for more information about optimizing TestStand performance on symmetric multiprocessing (SMP) systems for multithreaded applications.
  //
  // StationOptions_Set_DefaultCPUAffinityForThreadsExRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - val: uint64 - Specifies which CPUs to use for threads TestStand creates and the user interface thread. 
  //
  // StationOptions_Set_DefaultCPUAffinityForThreadsExResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_DefaultCPUAffinityForThreadsExRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_DefaultCPUAffinityForThreadsExResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint64 - Specifies which CPUs to use for threads TestStand creates and the user interface thread. 
  //
  rpc Set_DefaultCPUAffinityForThreadsEx(StationOptions_Set_DefaultCPUAffinityForThreadsExRequest) returns (StationOptions_Set_DefaultCPUAffinityForThreadsExResponse);
  rpc Get_DefaultCPUAffinityForThreadsEx(StationOptions_Get_DefaultCPUAffinityForThreadsExRequest) returns (StationOptions_Get_DefaultCPUAffinityForThreadsExResponse);
  
  
  // Property: LoginOnStart
  //
  // When this property is True and the ApplicationMgr.LoginOnStart property is True, the LoginLogout Front-End callback sequence runs when you call the ApplicationMgr.Start method.
  //
  // StationOptions_Set_LoginOnStartRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - val: bool - When this property is True and the ApplicationMgr.LoginOnStart property is True, the LoginLogout Front-End callback sequence runs when you call the ApplicationMgr.Start method. 
  //
  // StationOptions_Set_LoginOnStartResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_LoginOnStartRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_LoginOnStartResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When this property is True and the ApplicationMgr.LoginOnStart property is True, the LoginLogout Front-End callback sequence runs when you call the ApplicationMgr.Start method. 
  //
  rpc Set_LoginOnStart(StationOptions_Set_LoginOnStartRequest) returns (StationOptions_Set_LoginOnStartResponse);
  rpc Get_LoginOnStart(StationOptions_Get_LoginOnStartRequest) returns (StationOptions_Get_LoginOnStartResponse);
  
  
  // Property: AutoCreateVariableLocation
  //
  // Specifies the location where automatically generated variables are created.
  //
  // StationOptions_Set_AutoCreateVariableLocationRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //    - option: AutoCreateVariableLocationOptions - Specifies the location where automatically generated variables are created. 
  //
  // StationOptions_Set_AutoCreateVariableLocationResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StationOptions_Get_AutoCreateVariableLocationRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StationOptionsInstance - The id of the StationOptions object.
  //
  // StationOptions_Get_AutoCreateVariableLocationResponse - The response message from the server. It provides the return value.
  //    - returnValue: AutoCreateVariableLocationOptions - Specifies the location where automatically generated variables are created. 
  //
  rpc Set_AutoCreateVariableLocation(StationOptions_Set_AutoCreateVariableLocationRequest) returns (StationOptions_Set_AutoCreateVariableLocationResponse);
  rpc Get_AutoCreateVariableLocation(StationOptions_Get_AutoCreateVariableLocationRequest) returns (StationOptions_Get_AutoCreateVariableLocationResponse);
  
  
}
message StationOptionsInstance {
  // Specifies the handle of the StationOptions instance in the server.
  string id = 1;
}
message StationOptions_GetTimeLimitEnabledRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies the type of time limit for the setting the method returns.
  TimeLimitTypes Type = 2;
  // Specifies the operation type for the setting the method returns.
  TimeLimitOperations operation = 3;
}

message StationOptions_GetTimeLimitEnabledResponse {
  // Returns a value that indicates whether the time limit is enabled.
  bool returnValue = 1;
}

message StationOptions_SetTimeLimitEnabledRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies the type of time limit for the setting the method sets.
  TimeLimitTypes Type = 2;
  // Specifies the operation type for the setting the method sets.
  TimeLimitOperations operation = 3;
  // Specifies if the time limit is enabled.
  bool enabled = 4;
}

message StationOptions_SetTimeLimitEnabledResponse {
}

message StationOptions_GetTimeLimitRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies the type of time limit for the setting the method returns.
  TimeLimitTypes Type = 2;
  // Specifies the operation type for the setting the method returns.
  TimeLimitOperations operation = 3;
}

message StationOptions_GetTimeLimitResponse {
  // Returns a value that indicates whether the time limit is enabled.
  double returnValue = 1;
}

message StationOptions_SetTimeLimitRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies the type of time limit for the setting the method sets.
  TimeLimitTypes Type = 2;
  // Specifies the operation type for the setting the method sets.
  TimeLimitOperations operation = 3;
  double timeLimit = 4;
}

message StationOptions_SetTimeLimitResponse {
}

message StationOptions_GetTimeLimitActionRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies the type of time limit for the setting the method returns.
  TimeLimitTypes Type = 2;
  // Specifies the operation type for the setting the method returns.
  TimeLimitOperations operation = 3;
}

message StationOptions_GetTimeLimitActionResponse {
  // Returns the action TestStand takes when the time limit expires.
  TimeLimitActions returnValue = 1;
}

message StationOptions_SetTimeLimitActionRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies the type of time limit for the setting the method sets.
  TimeLimitTypes Type = 2;
  // Specifies the operation type for the setting the method sets.
  TimeLimitOperations operation = 3;
  // Specifies the action TestStand takes when the time limit expires.
  TimeLimitActions action = 4;
}

message StationOptions_SetTimeLimitActionResponse {
}

message StationOptions_GetLanguagesRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_GetLanguagesResponse {
  // The return type of the String[] object.
  repeated string returnValue = 1;
}

message StationOptions_Set_UserFilePathRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies the location of the current user manager file.
  // 
  string val = 2;
}

message StationOptions_Set_UserFilePathResponse {
}

message StationOptions_Get_UserFilePathRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_UserFilePathResponse {
  // Specifies the location of the current user manager file.
  // 
  string returnValue = 1;
}

message StationOptions_Set_EnableUserPrivilegeCheckingRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies whether the sequence editor or user interface verify user privileges.
  bool enabled = 2;
}

message StationOptions_Set_EnableUserPrivilegeCheckingResponse {
}

message StationOptions_Get_EnableUserPrivilegeCheckingRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_EnableUserPrivilegeCheckingResponse {
  // Specifies whether the sequence editor or user interface verify user privileges.
  bool returnValue = 1;
}

message StationOptions_Set_AutoLoginSystemUserRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies if the LoginLogout callback sequence uses the current user login for the operating system as the login for TestStand when first launching a user interface or sequence editor.
  // 
  bool enabled = 2;
}

message StationOptions_Set_AutoLoginSystemUserResponse {
}

message StationOptions_Get_AutoLoginSystemUserRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_AutoLoginSystemUserResponse {
  // Specifies if the LoginLogout callback sequence uses the current user login for the operating system as the login for TestStand when first launching a user interface or sequence editor.
  // 
  bool returnValue = 1;
}

message StationOptions_Set_RequireUserLoginRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies if the sequence editor or user interfaces require that a user be logged in.
  // 
  bool requireUser = 2;
}

message StationOptions_Set_RequireUserLoginResponse {
}

message StationOptions_Get_RequireUserLoginRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_RequireUserLoginResponse {
  // Specifies if the sequence editor or user interfaces require that a user be logged in.
  // 
  bool returnValue = 1;
}

message StationOptions_Set_RTEOptionRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies the default behavior of TestStand when a run-time error occurs in an execution.
  // 
  RTEOptions option = 2;
}

message StationOptions_Set_RTEOptionResponse {
}

message StationOptions_Get_RTEOptionRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_RTEOptionResponse {
  // Specifies the default behavior of TestStand when a run-time error occurs in an execution.
  // 
  RTEOptions returnValue = 1;
}

message StationOptions_Set_TracingEnabledRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies if tracing is enabled for the sequence editor and user interfaces.
  bool isEnabled = 2;
}

message StationOptions_Set_TracingEnabledResponse {
}

message StationOptions_Get_TracingEnabledRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_TracingEnabledResponse {
  // Specifies if tracing is enabled for the sequence editor and user interfaces.
  bool returnValue = 1;
}

message StationOptions_Set_BreakpointsEnabledRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies whether to stop on breakpoints in all executions.
  // 
  bool isEnabled = 2;
}

message StationOptions_Set_BreakpointsEnabledResponse {
}

message StationOptions_Get_BreakpointsEnabledRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_BreakpointsEnabledResponse {
  // Specifies whether to stop on breakpoints in all executions.
  // 
  bool returnValue = 1;
}

message StationOptions_Set_DisableResultsRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies whether to disable recording of results for all steps.
  bool isDisabled = 2;
}

message StationOptions_Set_DisableResultsResponse {
}

message StationOptions_Get_DisableResultsRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_DisableResultsResponse {
  // Specifies whether to disable recording of results for all steps.
  bool returnValue = 1;
}

message StationOptions_Set_AlwaysGotoCleanupOnFailureRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Overrides the Sequence.FailureAction property setting when this property is True.
  bool isEnabled = 2;
}

message StationOptions_Set_AlwaysGotoCleanupOnFailureResponse {
}

message StationOptions_Get_AlwaysGotoCleanupOnFailureRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_AlwaysGotoCleanupOnFailureResponse {
  // Overrides the Sequence.FailureAction property setting when this property is True.
  bool returnValue = 1;
}

message StationOptions_Set_ExecutionMaskRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies execution options.
  ExecutionMask val = 2;
}

message StationOptions_Set_ExecutionMaskResponse {
}

message StationOptions_Get_ExecutionMaskRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_ExecutionMaskResponse {
  // Specifies execution options.
  ExecutionMask returnValue = 1;
}

message StationOptions_Set_InteractiveBranchModeRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies the action TestStand takes when executing a Goto step or evaluating a post action that specifies a new destination step while running in an interactive execution.
  InteractiveBranchModes mode = 2;
}

message StationOptions_Set_InteractiveBranchModeResponse {
}

message StationOptions_Get_InteractiveBranchModeRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_InteractiveBranchModeResponse {
  // Specifies the action TestStand takes when executing a Goto step or evaluating a post action that specifies a new destination step while running in an interactive execution.
  InteractiveBranchModes returnValue = 1;
}

message StationOptions_Set_ShowHiddenPropertiesRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies whether to display in user interfaces properties marked as hidden.
  // 
  bool show = 2;
}

message StationOptions_Set_ShowHiddenPropertiesResponse {
}

message StationOptions_Get_ShowHiddenPropertiesRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_ShowHiddenPropertiesResponse {
  // Specifies whether to display in user interfaces properties marked as hidden.
  // 
  bool returnValue = 1;
}

message StationOptions_Set_PromptToFindFilesRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies if TestStand launches a File dialog box when it cannot find the necessary files in the current search directory paths.
  bool isEnabled = 2;
}

message StationOptions_Set_PromptToFindFilesResponse {
}

message StationOptions_Get_PromptToFindFilesRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_PromptToFindFilesResponse {
  // Specifies if TestStand launches a File dialog box when it cannot find the necessary files in the current search directory paths.
  bool returnValue = 1;
}

message StationOptions_Set_SeqFileVersionAutoIncrementOptRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies if sequence file versions are automatically incremented when the file is saved.
  FileVersionAutoIncrement option = 2;
}

message StationOptions_Set_SeqFileVersionAutoIncrementOptResponse {
}

message StationOptions_Get_SeqFileVersionAutoIncrementOptRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_SeqFileVersionAutoIncrementOptResponse {
  // Specifies if sequence file versions are automatically incremented when the file is saved.
  FileVersionAutoIncrement returnValue = 1;
}

message StationOptions_Set_TypeVersionAutoIncrementOptRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies if the sequence editor automatically increments type versions before saving modified types.
  TypeVersionAutoIncrement option = 2;
}

message StationOptions_Set_TypeVersionAutoIncrementOptResponse {
}

message StationOptions_Get_TypeVersionAutoIncrementOptRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_TypeVersionAutoIncrementOptResponse {
  // Specifies if the sequence editor automatically increments type versions before saving modified types.
  TypeVersionAutoIncrement returnValue = 1;
}

message StationOptions_Set_TypeVersionAutoIncrementPromptOptRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies if the sequence editor prompts the user to increment the type version before saving the modified types.
  bool option = 2;
}

message StationOptions_Set_TypeVersionAutoIncrementPromptOptResponse {
}

message StationOptions_Get_TypeVersionAutoIncrementPromptOptRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_TypeVersionAutoIncrementPromptOptResponse {
  // Specifies if the sequence editor prompts the user to increment the type version before saving the modified types.
  bool returnValue = 1;
}

message StationOptions_Set_ReloadDocsWhenOpeningWorkspaceRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies if the sequence editor opens the documents that were open when the workspace was unloaded.
  // 
  bool reloadDocs = 2;
}

message StationOptions_Set_ReloadDocsWhenOpeningWorkspaceResponse {
}

message StationOptions_Get_ReloadDocsWhenOpeningWorkspaceRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_ReloadDocsWhenOpeningWorkspaceResponse {
  // Specifies if the sequence editor opens the documents that were open when the workspace was unloaded.
  // 
  bool returnValue = 1;
}

message StationOptions_Set_ReloadWorkspaceAtStartupRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies if the sequence editor opens the last workspace file loaded when it launches.
  // 
  bool reloadWorkspace = 2;
}

message StationOptions_Set_ReloadWorkspaceAtStartupResponse {
}

message StationOptions_Get_ReloadWorkspaceAtStartupRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_ReloadWorkspaceAtStartupResponse {
  // Specifies if the sequence editor opens the last workspace file loaded when it launches.
  // 
  bool returnValue = 1;
}

message StationOptions_Set_StationIDRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies a test station identification string for this instance of the TestStand Engine.
  // This property never returns an empty string. If you set this property to an empty string, this property returns the same value as the Engine.ComputerName property.
  // 
  string val = 2;
}

message StationOptions_Set_StationIDResponse {
}

message StationOptions_Get_StationIDRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_StationIDResponse {
  // Specifies a test station identification string for this instance of the TestStand Engine.
  // This property never returns an empty string. If you set this property to an empty string, this property returns the same value as the Engine.ComputerName property.
  // 
  string returnValue = 1;
}

message StationOptions_Set_SpecifyStepsByUniqueIdInExpressionsRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies how the Expression Browser dialog box specifies steps in expressions.
  SpecifyStepsByUniqueIdOptions option = 2;
}

message StationOptions_Set_SpecifyStepsByUniqueIdInExpressionsResponse {
}

message StationOptions_Get_SpecifyStepsByUniqueIdInExpressionsRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_SpecifyStepsByUniqueIdInExpressionsResponse {
  // Specifies how the Expression Browser dialog box specifies steps in expressions.
  SpecifyStepsByUniqueIdOptions returnValue = 1;
}

message StationOptions_Set_UseStationModelRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies if client sequence files use the station model.
  bool isEnabled = 2;
}

message StationOptions_Set_UseStationModelResponse {
}

message StationOptions_Get_UseStationModelRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_UseStationModelResponse {
  // Specifies if client sequence files use the station model.
  bool returnValue = 1;
}

message StationOptions_Set_AllowOtherModelsRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies if sequence files can specify a process model file other than the current station model file.
  // 
  bool isEnabled = 2;
}

message StationOptions_Set_AllowOtherModelsResponse {
}

message StationOptions_Get_AllowOtherModelsRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_AllowOtherModelsResponse {
  // Specifies if sequence files can specify a process model file other than the current station model file.
  // 
  bool returnValue = 1;
}

message StationOptions_Set_StationModelSequenceFilePathRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies the pathname of the station model sequence file.
  // 
  string ModelPath = 2;
}

message StationOptions_Set_StationModelSequenceFilePathResponse {
}

message StationOptions_Get_StationModelSequenceFilePathRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_StationModelSequenceFilePathResponse {
  // Specifies the pathname of the station model sequence file.
  // 
  string returnValue = 1;
}

message StationOptions_Set_LanguageRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies the language TestStand uses to display text.
  string Language = 2;
}

message StationOptions_Set_LanguageResponse {
}

message StationOptions_Get_LanguageRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_LanguageResponse {
  // Specifies the language TestStand uses to display text.
  string returnValue = 1;
}

message StationOptions_Set_UseLocalizedDecimalPointRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies whether to use the operating system setting to determine the character used as a decimal point.
  // 
  bool enabled = 2;
}

message StationOptions_Set_UseLocalizedDecimalPointResponse {
}

message StationOptions_Get_UseLocalizedDecimalPointRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_UseLocalizedDecimalPointResponse {
  // Specifies whether to use the operating system setting to determine the character used as a decimal point.
  // 
  bool returnValue = 1;
}

message StationOptions_Set_RecognizeMBCharsRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Indicates whether TestStand recognizes extended character code sequences when it compares and processes strings.
  bool isEnabled = 2;
}

message StationOptions_Set_RecognizeMBCharsResponse {
}

message StationOptions_Get_RecognizeMBCharsRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_RecognizeMBCharsResponse {
  // Indicates whether TestStand recognizes extended character code sequences when it compares and processes strings.
  bool returnValue = 1;
}

message StationOptions_Set_AllowSequenceCallsFromRemoteMachineRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies if a remote computer can run a sequence on the current station.
  bool isEnabled = 2;
}

message StationOptions_Set_AllowSequenceCallsFromRemoteMachineResponse {
}

message StationOptions_Get_AllowSequenceCallsFromRemoteMachineRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_AllowSequenceCallsFromRemoteMachineResponse {
  // Specifies if a remote computer can run a sequence on the current station.
  bool returnValue = 1;
}

message StationOptions_Set_AllowAllUsersAccessFromRemoteMachineRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies whether all users from remote machines can call sequences on this computer.
  // 
  bool isEnabled = 2;
}

message StationOptions_Set_AllowAllUsersAccessFromRemoteMachineResponse {
}

message StationOptions_Get_AllowAllUsersAccessFromRemoteMachineRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_AllowAllUsersAccessFromRemoteMachineResponse {
  // Specifies whether all users from remote machines can call sequences on this computer.
  // 
  bool returnValue = 1;
}

message StationOptions_Set_ShowEngineTrayIconOnRemoteStationsRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies whether to show the system tray icon when the TestStand remote engine is active on this computer.
  bool isEnabled = 2;
}

message StationOptions_Set_ShowEngineTrayIconOnRemoteStationsResponse {
}

message StationOptions_Get_ShowEngineTrayIconOnRemoteStationsRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_ShowEngineTrayIconOnRemoteStationsResponse {
  // Specifies whether to show the system tray icon when the TestStand remote engine is active on this computer.
  bool returnValue = 1;
}

message StationOptions_Set_CheckOutFilesWhenEditedRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies if the sequence editor checks a file out from source code control when you attempt to modify the file in the sequence editor.
  // 
  bool checkOutFiles = 2;
}

message StationOptions_Set_CheckOutFilesWhenEditedResponse {
}

message StationOptions_Get_CheckOutFilesWhenEditedRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_CheckOutFilesWhenEditedResponse {
  // Specifies if the sequence editor checks a file out from source code control when you attempt to modify the file in the sequence editor.
  // 
  bool returnValue = 1;
}

message StationOptions_Set_PromptWhenAddingFilesToSCRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies if the sequence editor prompts you to add files to source code control when you add files to a workspace.
  // 
  bool promptAddFile = 2;
}

message StationOptions_Set_PromptWhenAddingFilesToSCResponse {
}

message StationOptions_Get_PromptWhenAddingFilesToSCRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_PromptWhenAddingFilesToSCResponse {
  // Specifies if the sequence editor prompts you to add files to source code control when you add files to a workspace.
  // 
  bool returnValue = 1;
}

message StationOptions_Set_UseDialogForCheckOutRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies if the sequence editor launches a dialog box to check out files from source code control.
  // 
  bool useDialog = 2;
}

message StationOptions_Set_UseDialogForCheckOutResponse {
}

message StationOptions_Get_UseDialogForCheckOutRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_UseDialogForCheckOutResponse {
  // Specifies if the sequence editor launches a dialog box to check out files from source code control.
  // 
  bool returnValue = 1;
}

message StationOptions_Set_CheckOutOnlySelectedFilesRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies if the sequence editor checks out only selected files in the workspace from source code control.
  // 
  bool onlySelectedFiles = 2;
}

message StationOptions_Set_CheckOutOnlySelectedFilesResponse {
}

message StationOptions_Get_CheckOutOnlySelectedFilesRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_CheckOutOnlySelectedFilesResponse {
  // Specifies if the sequence editor checks out only selected files in the workspace from source code control.
  // 
  bool returnValue = 1;
}

message StationOptions_Set_SystemDefaultSourceCodeControlProviderRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies the default system source code control provider.
  // If you do not want to specify a default source code control provider, pass an empty string as the value of this property.
  // 
  string val = 2;
}

message StationOptions_Set_SystemDefaultSourceCodeControlProviderResponse {
}

message StationOptions_Get_SystemDefaultSourceCodeControlProviderRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_SystemDefaultSourceCodeControlProviderResponse {
  // Specifies the default system source code control provider.
  // If you do not want to specify a default source code control provider, pass an empty string as the value of this property.
  // 
  string returnValue = 1;
}

message StationOptions_Set_UIMessageDelayRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies how many milliseconds must pass between postings of UIMsg_Trace events.
  int32 millisecDelay = 2;
}

message StationOptions_Set_UIMessageDelayResponse {
}

message StationOptions_Get_UIMessageDelayRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_UIMessageDelayResponse {
  // Specifies how many milliseconds must pass between postings of UIMsg_Trace events.
  int32 returnValue = 1;
}

message StationOptions_Set_UIMessageMinDelayRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies the minimum value allowed for the StationOptions.UIMessageDelay property. This setting is not persisted like most StationOptions. The setting lasts only for the lifetime of the Engine.
  int32 millisecDelay = 2;
}

message StationOptions_Set_UIMessageMinDelayResponse {
}

message StationOptions_Get_UIMessageMinDelayRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_UIMessageMinDelayResponse {
  // Specifies the minimum value allowed for the StationOptions.UIMessageDelay property. This setting is not persisted like most StationOptions. The setting lasts only for the lifetime of the Engine.
  int32 returnValue = 1;
}

message StationOptions_Set_InteractiveExePropagateStatusRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies if TestStand allows sequence failure, Goto cleanup, and error settings from a nested interactive execution to propagate to the invoking execution.
  bool isEnabled = 2;
}

message StationOptions_Set_InteractiveExePropagateStatusResponse {
}

message StationOptions_Get_InteractiveExePropagateStatusRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_InteractiveExePropagateStatusResponse {
  // Specifies if TestStand allows sequence failure, Goto cleanup, and error settings from a nested interactive execution to propagate to the invoking execution.
  bool returnValue = 1;
}

message StationOptions_Set_BreakOnStepFailureRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // If this property is True, TestStand suspends an execution for any step that fails. If this property is False, TestStand suspends execution based on whether the ExecTypeMask_BreakOnStepFailure option is enabled for the execution.
  bool isEnabled = 2;
}

message StationOptions_Set_BreakOnStepFailureResponse {
}

message StationOptions_Get_BreakOnStepFailureRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_BreakOnStepFailureResponse {
  // If this property is True, TestStand suspends an execution for any step that fails. If this property is False, TestStand suspends execution based on whether the ExecTypeMask_BreakOnStepFailure option is enabled for the execution.
  bool returnValue = 1;
}

message StationOptions_Set_BreakOnSequenceFailureRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // If this property is True, TestStand suspends an execution on sequence failure. If this property is False, TestStand suspends execution based on whether the ExecTypeMask_BreakOnSequenceFailure option is enabled for the execution.
  bool isEnabled = 2;
}

message StationOptions_Set_BreakOnSequenceFailureResponse {
}

message StationOptions_Get_BreakOnSequenceFailureRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_BreakOnSequenceFailureResponse {
  // If this property is True, TestStand suspends an execution on sequence failure. If this property is False, TestStand suspends execution based on whether the ExecTypeMask_BreakOnSequenceFailure option is enabled for the execution.
  bool returnValue = 1;
}

message StationOptions_Set_DebugOptionsRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies the type of debug features that TestStand performs. Specify one or more DebugOptions constants. Use the bitwise-OR operator to specify multiple options.
  DebugOptions val = 2;
}

message StationOptions_Set_DebugOptionsResponse {
}

message StationOptions_Get_DebugOptionsRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_DebugOptionsResponse {
  // Specifies the type of debug features that TestStand performs. Specify one or more DebugOptions constants. Use the bitwise-OR operator to specify multiple options.
  DebugOptions returnValue = 1;
}

message StationOptions_Set_DefaultFileWritingFormatRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies the format in which TestStand writes new files.
  FileWritingFormats returnVal = 2;
}

message StationOptions_Set_DefaultFileWritingFormatResponse {
}

message StationOptions_Get_DefaultFileWritingFormatRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_DefaultFileWritingFormatResponse {
  // Specifies the format in which TestStand writes new files.
  FileWritingFormats returnValue = 1;
}

message StationOptions_Set_AllowAutomaticTypeConflictResolutionRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies how TestStand automatically resolves type conflicts. TestStand normally resolves type conflicts when TestStand loads a file with a version of a type that differs from the version of the type currently in memory and when the Use the definition that has the highest version number option on the Version tab of the Type Properties dialog box or on the Version tab of the Step Type Properties dialog box is enabled for both versions of the type. In this case, TestStand updates the file with the lower version of the type to use the higher version.
  AllowAutomaticTypeConflictResolutionOptions val = 2;
}

message StationOptions_Set_AllowAutomaticTypeConflictResolutionResponse {
}

message StationOptions_Get_AllowAutomaticTypeConflictResolutionRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_AllowAutomaticTypeConflictResolutionResponse {
  // Specifies how TestStand automatically resolves type conflicts. TestStand normally resolves type conflicts when TestStand loads a file with a version of a type that differs from the version of the type currently in memory and when the Use the definition that has the highest version number option on the Version tab of the Type Properties dialog box or on the Version tab of the Step Type Properties dialog box is enabled for both versions of the type. In this case, TestStand updates the file with the lower version of the type to use the higher version.
  AllowAutomaticTypeConflictResolutionOptions returnValue = 1;
}

message StationOptions_Set_FileModificationIndicatorPolicyRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies the policy for when to indicate that a file being opened is modified. When you open a file, TestStand must modify the file in memory when a version of a type defined in the file is updated as a result of an automatic type conflict resolution, or if the data format of the file changes as a result of opening the file in a newer version of TestStand. In such cases, TestStand modifies the file in memory even if the policy specifies not to indicate that the file is modified.
  // Specify one or more FileModificationIndicatorPolicies constants. Use the bitwise-OR operator to specify multiple policies.
  FileModificationIndicatorPolicies val = 2;
}

message StationOptions_Set_FileModificationIndicatorPolicyResponse {
}

message StationOptions_Get_FileModificationIndicatorPolicyRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_FileModificationIndicatorPolicyResponse {
  // Specifies the policy for when to indicate that a file being opened is modified. When you open a file, TestStand must modify the file in memory when a version of a type defined in the file is updated as a result of an automatic type conflict resolution, or if the data format of the file changes as a result of opening the file in a newer version of TestStand. In such cases, TestStand modifies the file in memory even if the policy specifies not to indicate that the file is modified.
  // Specify one or more FileModificationIndicatorPolicies constants. Use the bitwise-OR operator to specify multiple policies.
  FileModificationIndicatorPolicies returnValue = 1;
}

message StationOptions_Set_DefaultCPUAffinityForThreadsRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Note: This property is obsolete. Use the StationOptions.DefaultCPUAffinityForThreadsEx property instead. Getting this property on a 64-bit instance of the TestStand Engine results in an error. Setting this property on 32-bit architectures does not result in an error, but only the first 32 CPUs can be specified.
  int32 val = 2;
}

message StationOptions_Set_DefaultCPUAffinityForThreadsResponse {
}

message StationOptions_Get_DefaultCPUAffinityForThreadsRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_DefaultCPUAffinityForThreadsResponse {
  // Note: This property is obsolete. Use the StationOptions.DefaultCPUAffinityForThreadsEx property instead. Getting this property on a 64-bit instance of the TestStand Engine results in an error. Setting this property on 32-bit architectures does not result in an error, but only the first 32 CPUs can be specified.
  int32 returnValue = 1;
}

message StationOptions_Set_PreloadProgressDelayRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies the delay in seconds before the Preload Progress dialog box launches while preloading code modules. Specify a negative value to disable the Preload Progress dialog box but continue to preload code modules.
  double val = 2;
}

message StationOptions_Set_PreloadProgressDelayResponse {
}

message StationOptions_Get_PreloadProgressDelayRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_PreloadProgressDelayResponse {
  // Specifies the delay in seconds before the Preload Progress dialog box launches while preloading code modules. Specify a negative value to disable the Preload Progress dialog box but continue to preload code modules.
  double returnValue = 1;
}

message StationOptions_Set_AllowCancellingPreloadExpressionRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // When this Boolean expression is empty or evaluates to True, the Preload Progress dialog box includes a Cancel button so users can cancel preloading files. When this property evaluates to False, the dialog box does not contain a Cancel button to prevent users from cancelling preloading files.
  string val = 2;
}

message StationOptions_Set_AllowCancellingPreloadExpressionResponse {
}

message StationOptions_Get_AllowCancellingPreloadExpressionRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_AllowCancellingPreloadExpressionResponse {
  // When this Boolean expression is empty or evaluates to True, the Preload Progress dialog box includes a Cancel button so users can cancel preloading files. When this property evaluates to False, the dialog box does not contain a Cancel button to prevent users from cancelling preloading files.
  string returnValue = 1;
}

message StationOptions_Set_DefaultCPUAffinityForThreadsExRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies which CPUs to use for threads TestStand creates and the user interface thread.
  uint64 val = 2;
}

message StationOptions_Set_DefaultCPUAffinityForThreadsExResponse {
}

message StationOptions_Get_DefaultCPUAffinityForThreadsExRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_DefaultCPUAffinityForThreadsExResponse {
  // Specifies which CPUs to use for threads TestStand creates and the user interface thread.
  uint64 returnValue = 1;
}

message StationOptions_Set_LoginOnStartRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // When this property is True and the ApplicationMgr.LoginOnStart property is True, the LoginLogout Front-End callback sequence runs when you call the ApplicationMgr.Start method.
  bool val = 2;
}

message StationOptions_Set_LoginOnStartResponse {
}

message StationOptions_Get_LoginOnStartRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_LoginOnStartResponse {
  // When this property is True and the ApplicationMgr.LoginOnStart property is True, the LoginLogout Front-End callback sequence runs when you call the ApplicationMgr.Start method.
  bool returnValue = 1;
}

message StationOptions_Set_AutoCreateVariableLocationRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
  // Specifies the location where automatically generated variables are created.
  AutoCreateVariableLocationOptions option = 2;
}

message StationOptions_Set_AutoCreateVariableLocationResponse {
}

message StationOptions_Get_AutoCreateVariableLocationRequest {
  // The id of the StationOptions object.
  StationOptionsInstance instance = 1;
}

message StationOptions_Get_AutoCreateVariableLocationResponse {
  // Specifies the location where automatically generated variables are created.
  AutoCreateVariableLocationOptions returnValue = 1;
}

// Images
//
// This collection class contains objects of the Picture data type. Use the Engine.Images property to acquire the collection object. The collection specifies the images TestStand loads from the <TestStand>\Components\Icons and <TestStand Public>\Components\Icons directories and images you add using the Engine.AddImage method. Use the Images.FindImage method to find an image using an image name.
// Use the Images collection as an alternative to using the Engine.LargeImageListEx and Engine.SmallImageListEx properties.
//
service Images {
  // Method: FindImage
  //
  // Searches the collection for an image with a specific name.
  //
  // Returns the image in a Picture object. This method errors if the image is not found.
  //
  // Images_FindImageRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ImagesInstance - The id of the Images object.
  //    - desiredWidth: int32 - Specifies the width, in pixels, of the image to return.
  //    - desiredHeight: int32 - Specifies the height, in pixels, of the image to return.
  //
  // Images_FindImageResponse - The response message from the server. It provides the return value.
  //    - returnValue: IPictureInstance - The return type of the IPicture object.
  //
  rpc FindImage(Images_FindImageRequest) returns (Images_FindImageResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // Images_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ImagesInstance - The id of the Images object.
  //    - imageIndex: int32 - Specifies a zero-based index.
  //
  // Images_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: IPictureInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(Images_Get_ItemRequest) returns (Images_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // Images_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ImagesInstance - The id of the Images object.
  //
  // Images_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(Images_Get_CountRequest) returns (Images_Get_CountResponse);
  
  
}
message ImagesInstance {
  // Specifies the handle of the Images instance in the server.
  string id = 1;
}
message Images_FindImageRequest {
  // The id of the Images object.
  ImagesInstance instance = 1;
  // Specifies the name of the image to find. Typically, the name includes the filename and file extension. Icon files are located in the <TestStand>\Components\Icons and <TestStand Public>\Components\Icons directories.
  string IconName = 2;
  // Specifies the width, in pixels, of the image to return.
  int32 desiredWidth = 3;
  // Specifies the height, in pixels, of the image to return.
  int32 desiredHeight = 4;
}

message Images_FindImageResponse {
  // The return type of the IPicture object.
  IPictureInstance returnValue = 1;
}

message Images_Get_ItemRequest {
  // The id of the Images object.
  ImagesInstance instance = 1;
  // Specifies a zero-based index.
  int32 imageIndex = 2;
}

message Images_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  IPictureInstance returnValue = 1;
}

message Images_Get_CountRequest {
  // The id of the Images object.
  ImagesInstance instance = 1;
}

message Images_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// EditTimeMenuItems
//
// The EditTimeMenuItems class specifies a collection of EditTimeMenuItem objects. An EditTimeMenuItem object represents a menu item such as a command, a call to a sequence, a submenu, or a submenu of calls to sequence in a sequence file. Each object in the collection specifies the menu item type and the expressions which determine the item text, hidden state, and enabled state. A submenu item specifies a collection of menu items in the submenu.
// Use the Engine.GetEditTimeToolMenuItems method to obtain a reference to a collection of this class for the Tools menu. Use this collection to customize the contents of the Tools menu.
//
service EditTimeMenuItems {
  // Method: Insert
  //
  // Adds a new item to the collection.
  //
  // EditTimeMenuItems_InsertRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EditTimeMenuItemsInstance - The id of the EditTimeMenuItems object.
  //    - index: int32 - Specifies the index where the new menu item is inserted. If you pass -1, the new item is inserted at the end of the list.
  //
  // EditTimeMenuItems_InsertResponse - The response message from the server. It provides the return value.
  //    - returnValue: EditTimeMenuItemInstance - The return type of the EditTimeMenuItem object.
  //
  rpc Insert(EditTimeMenuItems_InsertRequest) returns (EditTimeMenuItems_InsertResponse);
  
  
  // Method: Remove
  //
  // Removes the menu item at the specified index.
  //
  // EditTimeMenuItems_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EditTimeMenuItemsInstance - The id of the EditTimeMenuItems object.
  //    - index: int32 - Specifies the zero-based index of the item to remove.
  //
  // EditTimeMenuItems_RemoveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Remove(EditTimeMenuItems_RemoveRequest) returns (EditTimeMenuItems_RemoveResponse);
  
  
  // Method: MoveItem
  //
  // Moves the menu item specified by a specific index to a new index within the list.
  //
  // EditTimeMenuItems_MoveItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EditTimeMenuItemsInstance - The id of the EditTimeMenuItems object.
  //    - index: int32 - Specifies the zero-based index of the item to move.
  //    - newIndex: int32 - Specifies a zero-based index determining where to move the menu item to.
  //
  // EditTimeMenuItems_MoveItemResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc MoveItem(EditTimeMenuItems_MoveItemRequest) returns (EditTimeMenuItems_MoveItemResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // EditTimeMenuItems_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EditTimeMenuItemsInstance - The id of the EditTimeMenuItems object.
  //    - index: int32 - Specifies the zero-based index of the item to retrieve.
  //
  // EditTimeMenuItems_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: EditTimeMenuItemInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(EditTimeMenuItems_Get_ItemRequest) returns (EditTimeMenuItems_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // EditTimeMenuItems_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemsInstance - The id of the EditTimeMenuItems object.
  //
  // EditTimeMenuItems_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(EditTimeMenuItems_Get_CountRequest) returns (EditTimeMenuItems_Get_CountResponse);
  
  
}
message EditTimeMenuItemsInstance {
  // Specifies the handle of the EditTimeMenuItems instance in the server.
  string id = 1;
}

message EditTimeMenuItemInstance {
  // Specifies the handle of the EditTimeMenuItem instance in the server.
  string id = 1;
}
message EditTimeMenuItems_InsertRequest {
  // The id of the EditTimeMenuItems object.
  EditTimeMenuItemsInstance instance = 1;
  // Specifies the type of menu item to insert.
  ToolMenuTypes Type = 2;
  // Specifies the index where the new menu item is inserted. If you pass -1, the new item is inserted at the end of the list.
  int32 index = 3;
}

message EditTimeMenuItems_InsertResponse {
  // The return type of the EditTimeMenuItem object.
  EditTimeMenuItemInstance returnValue = 1;
}

message EditTimeMenuItems_RemoveRequest {
  // The id of the EditTimeMenuItems object.
  EditTimeMenuItemsInstance instance = 1;
  // Specifies the zero-based index of the item to remove.
  int32 index = 2;
}

message EditTimeMenuItems_RemoveResponse {
}

message EditTimeMenuItems_MoveItemRequest {
  // The id of the EditTimeMenuItems object.
  EditTimeMenuItemsInstance instance = 1;
  // Specifies the zero-based index of the item to move.
  int32 index = 2;
  // Specifies a zero-based index determining where to move the menu item to.
  int32 newIndex = 3;
}

message EditTimeMenuItems_MoveItemResponse {
}

message EditTimeMenuItems_Get_ItemRequest {
  // The id of the EditTimeMenuItems object.
  EditTimeMenuItemsInstance instance = 1;
  // Specifies the zero-based index of the item to retrieve.
  optional int32 index = 2;
}

message EditTimeMenuItems_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  EditTimeMenuItemInstance returnValue = 1;
}

message EditTimeMenuItems_Get_CountRequest {
  // The id of the EditTimeMenuItems object.
  EditTimeMenuItemsInstance instance = 1;
}

message EditTimeMenuItems_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// EditTimeMenuItem
//
// Objects of the EditTimeMenuItem class represent menu items in the sequence editor or user interface. A menu item is a command, a call to a sequence, a submenu, or a submenu of calls to sequences in a sequence file. EditTimeMenuItem objects specify the menu item type, which includes paths and arguments for commands, paths for sequence files, and names of sequences. Each object specifies an expression for evaluating item text at run time, and expressions that determine whether the item is enabled or visible at run time.
// Use the Engine.GetEditTimeToolMenuItems method to obtain a reference to a collection of EditTimeMenuItem objects for the TestStand Tools menu. Use this collection to customize the contents of the Tools menu.
// Use the Engine.GetRunTimeToolMenuItems method to obtain a reference to a collection of RunTimeMenuItem objects, which represent an evaluated version of the Tools menu. Use this collection to determine what is displayed in the Tools menu at run time.
//
service EditTimeMenuItem {
  // Property: Type
  //
  // Specifies the type of Tools menu item.
  //
  // If you set this property to ToolMenuType_SubMenu, TestStand assigns an EditTimeMenuItems collection object to SubMenuItems.
  //
  // EditTimeMenuItem_Set_TypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemInstance - The id of the EditTimeMenuItem object.
  //    - val: ToolMenuTypes - Specifies the type of Tools menu item. 
  //
  // EditTimeMenuItem_Set_TypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // EditTimeMenuItem_Get_TypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemInstance - The id of the EditTimeMenuItem object.
  //
  // EditTimeMenuItem_Get_TypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: ToolMenuTypes - Specifies the type of Tools menu item. 
  //
  rpc Set_Type(EditTimeMenuItem_Set_TypeRequest) returns (EditTimeMenuItem_Set_TypeResponse);
  rpc Get_Type(EditTimeMenuItem_Get_TypeRequest) returns (EditTimeMenuItem_Get_TypeResponse);
  
  
  // Property: ItemTextExpression
  //
  // Specifies the expression TestStand uses to determine the menu item text at run time.
  //
  // EditTimeMenuItem_Set_ItemTextExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemInstance - The id of the EditTimeMenuItem object.
  //    - val: string - Specifies the expression TestStand uses to determine the menu item text at run time. 
  //
  // EditTimeMenuItem_Set_ItemTextExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // EditTimeMenuItem_Get_ItemTextExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemInstance - The id of the EditTimeMenuItem object.
  //
  // EditTimeMenuItem_Get_ItemTextExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the expression TestStand uses to determine the menu item text at run time. 
  //
  rpc Set_ItemTextExpression(EditTimeMenuItem_Set_ItemTextExpressionRequest) returns (EditTimeMenuItem_Set_ItemTextExpressionResponse);
  rpc Get_ItemTextExpression(EditTimeMenuItem_Get_ItemTextExpressionRequest) returns (EditTimeMenuItem_Get_ItemTextExpressionResponse);
  
  
  // Property: EnabledExpression
  //
  // Specifies the expression TestStand uses to determine whether the menu item is enabled at run time.
  //
  // EditTimeMenuItem_Set_EnabledExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemInstance - The id of the EditTimeMenuItem object.
  //    - val: string - Specifies the expression TestStand uses to determine whether the menu item is enabled at run time. 
  //
  // EditTimeMenuItem_Set_EnabledExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // EditTimeMenuItem_Get_EnabledExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemInstance - The id of the EditTimeMenuItem object.
  //
  // EditTimeMenuItem_Get_EnabledExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the expression TestStand uses to determine whether the menu item is enabled at run time. 
  //
  rpc Set_EnabledExpression(EditTimeMenuItem_Set_EnabledExpressionRequest) returns (EditTimeMenuItem_Set_EnabledExpressionResponse);
  rpc Get_EnabledExpression(EditTimeMenuItem_Get_EnabledExpressionRequest) returns (EditTimeMenuItem_Get_EnabledExpressionResponse);
  
  
  // Property: HiddenExpression
  //
  // Specifies the expression TestStand uses to determine whether the menu item is visible at run time.
  //
  // TestStand excludes any edit-time menu items with hidden expressions that evaluate to False from the run-time collection.
  //
  // EditTimeMenuItem_Set_HiddenExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemInstance - The id of the EditTimeMenuItem object.
  //    - val: string - Specifies the expression TestStand uses to determine whether the menu item is visible at run time. 
  //
  // EditTimeMenuItem_Set_HiddenExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // EditTimeMenuItem_Get_HiddenExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemInstance - The id of the EditTimeMenuItem object.
  //
  // EditTimeMenuItem_Get_HiddenExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the expression TestStand uses to determine whether the menu item is visible at run time. 
  //
  rpc Set_HiddenExpression(EditTimeMenuItem_Set_HiddenExpressionRequest) returns (EditTimeMenuItem_Set_HiddenExpressionResponse);
  rpc Get_HiddenExpression(EditTimeMenuItem_Get_HiddenExpressionRequest) returns (EditTimeMenuItem_Get_HiddenExpressionResponse);
  
  
  // Property: SeparatorBefore
  //
  // Specifies that a menu separator precedes the Tools menu item.
  //
  // EditTimeMenuItem_Set_SeparatorBeforeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemInstance - The id of the EditTimeMenuItem object.
  //    - val: bool - Specifies that a menu separator precedes the Tools menu item. 
  //
  // EditTimeMenuItem_Set_SeparatorBeforeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // EditTimeMenuItem_Get_SeparatorBeforeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemInstance - The id of the EditTimeMenuItem object.
  //
  // EditTimeMenuItem_Get_SeparatorBeforeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies that a menu separator precedes the Tools menu item. 
  //
  rpc Set_SeparatorBefore(EditTimeMenuItem_Set_SeparatorBeforeRequest) returns (EditTimeMenuItem_Set_SeparatorBeforeResponse);
  rpc Get_SeparatorBefore(EditTimeMenuItem_Get_SeparatorBeforeRequest) returns (EditTimeMenuItem_Get_SeparatorBeforeResponse);
  
  
  // Property: SequenceFilePath
  //
  // Specifies the path to the sequence file for sequence and sequence file menu types.
  //
  // This property applies only when the EditTimeMenuItem.Type property is set to ToolMenuType_SequenceFile or ToolMenuType_Sequence.
  // The run-time copy of the Tools menu automatically expands submenus for menu items using the ToolMenuType_SequenceFile type, where each submenu item is a menu item using the ToolMenuType_Sequence type.
  //
  // EditTimeMenuItem_Set_SequenceFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemInstance - The id of the EditTimeMenuItem object.
  //    - val: string - Specifies the path to the sequence file for sequence and sequence file menu types. 
  //
  // EditTimeMenuItem_Set_SequenceFilePathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // EditTimeMenuItem_Get_SequenceFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemInstance - The id of the EditTimeMenuItem object.
  //
  // EditTimeMenuItem_Get_SequenceFilePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the path to the sequence file for sequence and sequence file menu types. 
  //
  rpc Set_SequenceFilePath(EditTimeMenuItem_Set_SequenceFilePathRequest) returns (EditTimeMenuItem_Set_SequenceFilePathResponse);
  rpc Get_SequenceFilePath(EditTimeMenuItem_Get_SequenceFilePathRequest) returns (EditTimeMenuItem_Get_SequenceFilePathResponse);
  
  
  // Property: SequenceName
  //
  // Specifies the name of the sequence that TestStand launches in an execution for sequence menu item types.
  //
  // EditTimeMenuItem_Set_SequenceNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemInstance - The id of the EditTimeMenuItem object.
  //    - val: string - Specifies the name of the sequence that TestStand launches in an execution for sequence menu item types. 
  //
  // EditTimeMenuItem_Set_SequenceNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // EditTimeMenuItem_Get_SequenceNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemInstance - The id of the EditTimeMenuItem object.
  //
  // EditTimeMenuItem_Get_SequenceNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the name of the sequence that TestStand launches in an execution for sequence menu item types. 
  //
  rpc Set_SequenceName(EditTimeMenuItem_Set_SequenceNameRequest) returns (EditTimeMenuItem_Set_SequenceNameResponse);
  rpc Get_SequenceName(EditTimeMenuItem_Get_SequenceNameRequest) returns (EditTimeMenuItem_Get_SequenceNameResponse);
  
  
  // Property: EditsSelectedFile
  //
  // Specifies if the Tools menu item edits the selected sequence file.
  //
  // This property applies only to sequence and sequence file item types. The sequence editor uses this option to determine whether to prompt the user to check out the selected file from source control if it is not already checked out.
  //
  // EditTimeMenuItem_Set_EditsSelectedFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemInstance - The id of the EditTimeMenuItem object.
  //    - val: bool - Specifies if the Tools menu item edits the selected sequence file. 
  //
  // EditTimeMenuItem_Set_EditsSelectedFileResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // EditTimeMenuItem_Get_EditsSelectedFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemInstance - The id of the EditTimeMenuItem object.
  //
  // EditTimeMenuItem_Get_EditsSelectedFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if the Tools menu item edits the selected sequence file. 
  //
  rpc Set_EditsSelectedFile(EditTimeMenuItem_Set_EditsSelectedFileRequest) returns (EditTimeMenuItem_Set_EditsSelectedFileResponse);
  rpc Get_EditsSelectedFile(EditTimeMenuItem_Get_EditsSelectedFileRequest) returns (EditTimeMenuItem_Get_EditsSelectedFileResponse);
  
  
  // Property: CommandPath
  //
  // Specifies the path to the executable or system command the menu item invokes.
  //
  // EditTimeMenuItem_Set_CommandPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemInstance - The id of the EditTimeMenuItem object.
  //    - val: string - Specifies the path to the executable or system command the menu item invokes. 
  //
  // EditTimeMenuItem_Set_CommandPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // EditTimeMenuItem_Get_CommandPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemInstance - The id of the EditTimeMenuItem object.
  //
  // EditTimeMenuItem_Get_CommandPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the path to the executable or system command the menu item invokes. 
  //
  rpc Set_CommandPath(EditTimeMenuItem_Set_CommandPathRequest) returns (EditTimeMenuItem_Set_CommandPathResponse);
  rpc Get_CommandPath(EditTimeMenuItem_Get_CommandPathRequest) returns (EditTimeMenuItem_Get_CommandPathResponse);
  
  
  // Property: CommandArguments
  //
  // Specifies the command-line arguments to pass to the command the EditTimeMenuItem.CommandPath property specifies.
  //
  // This property applies only when the EditTimeMenuItem.Type property is set to ToolMenuType_Command.
  //
  // EditTimeMenuItem_Set_CommandArgumentsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemInstance - The id of the EditTimeMenuItem object.
  //    - val: string - Specifies the command-line arguments to pass to the command the EditTimeMenuItem.CommandPath property specifies. 
  //
  // EditTimeMenuItem_Set_CommandArgumentsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // EditTimeMenuItem_Get_CommandArgumentsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemInstance - The id of the EditTimeMenuItem object.
  //
  // EditTimeMenuItem_Get_CommandArgumentsResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the command-line arguments to pass to the command the EditTimeMenuItem.CommandPath property specifies. 
  //
  rpc Set_CommandArguments(EditTimeMenuItem_Set_CommandArgumentsRequest) returns (EditTimeMenuItem_Set_CommandArgumentsResponse);
  rpc Get_CommandArguments(EditTimeMenuItem_Get_CommandArgumentsRequest) returns (EditTimeMenuItem_Get_CommandArgumentsResponse);
  
  
  // Property: CommandInitialDirectory
  //
  // Specifies the initial working directory when invoking the command the EditTimeMenuItem.CommandPath property specifies.
  //
  // EditTimeMenuItem_Set_CommandInitialDirectoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemInstance - The id of the EditTimeMenuItem object.
  //    - val: string - Specifies the initial working directory when invoking the command the EditTimeMenuItem.CommandPath property specifies. 
  //
  // EditTimeMenuItem_Set_CommandInitialDirectoryResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // EditTimeMenuItem_Get_CommandInitialDirectoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemInstance - The id of the EditTimeMenuItem object.
  //
  // EditTimeMenuItem_Get_CommandInitialDirectoryResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the initial working directory when invoking the command the EditTimeMenuItem.CommandPath property specifies. 
  //
  rpc Set_CommandInitialDirectory(EditTimeMenuItem_Set_CommandInitialDirectoryRequest) returns (EditTimeMenuItem_Set_CommandInitialDirectoryResponse);
  rpc Get_CommandInitialDirectory(EditTimeMenuItem_Get_CommandInitialDirectoryRequest) returns (EditTimeMenuItem_Get_CommandInitialDirectoryResponse);
  
  
  // Property: Editable
  //
  // Specifies whether the properties of the menu item display as read-only.
  //
  // EditTimeMenuItem_Set_EditableRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemInstance - The id of the EditTimeMenuItem object.
  //    - val: bool - Specifies whether the properties of the menu item display as read-only. 
  //
  // EditTimeMenuItem_Set_EditableResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // EditTimeMenuItem_Get_EditableRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemInstance - The id of the EditTimeMenuItem object.
  //
  // EditTimeMenuItem_Get_EditableResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the properties of the menu item display as read-only. 
  //
  rpc Set_Editable(EditTimeMenuItem_Set_EditableRequest) returns (EditTimeMenuItem_Set_EditableResponse);
  rpc Get_Editable(EditTimeMenuItem_Get_EditableRequest) returns (EditTimeMenuItem_Get_EditableResponse);
  
  
  // Property: SubMenuItems
  //
  // Returns a collection of Tools menu items that represent the submenu for the menu item.
  //
  // The collection exists only when the EditTimeMenuItem.Type property is set to ToolMenuType_SubMenu. Otherwise, this property returns NULL.
  //
  // EditTimeMenuItem_Get_SubMenuItemsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemInstance - The id of the EditTimeMenuItem object.
  //
  // EditTimeMenuItem_Get_SubMenuItemsResponse - The response message from the server. It provides the return value.
  //    - returnValue: EditTimeMenuItemsInstance - Returns a collection of Tools menu items that represent the submenu for the menu item. 
  //
  rpc Get_SubMenuItems(EditTimeMenuItem_Get_SubMenuItemsRequest) returns (EditTimeMenuItem_Get_SubMenuItemsResponse);
  
  
  // Property: CommandArgumentsExpression
  //
  // Specifies an expression defining the command-line arguments to pass to the command that the EditTimeMenuItem.CommandPath property specifies.
  //
  // This property applies only when the EditTimeMenuItem.Type property is set to ToolMenuType_Command.
  //
  // EditTimeMenuItem_Set_CommandArgumentsExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemInstance - The id of the EditTimeMenuItem object.
  //    - val: string - Specifies an expression defining the command-line arguments to pass to the command that the EditTimeMenuItem.CommandPath property specifies. 
  //
  // EditTimeMenuItem_Set_CommandArgumentsExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // EditTimeMenuItem_Get_CommandArgumentsExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EditTimeMenuItemInstance - The id of the EditTimeMenuItem object.
  //
  // EditTimeMenuItem_Get_CommandArgumentsExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies an expression defining the command-line arguments to pass to the command that the EditTimeMenuItem.CommandPath property specifies. 
  //
  rpc Set_CommandArgumentsExpression(EditTimeMenuItem_Set_CommandArgumentsExpressionRequest) returns (EditTimeMenuItem_Set_CommandArgumentsExpressionResponse);
  rpc Get_CommandArgumentsExpression(EditTimeMenuItem_Get_CommandArgumentsExpressionRequest) returns (EditTimeMenuItem_Get_CommandArgumentsExpressionResponse);
  
  
}
message EditTimeMenuItem_Set_TypeRequest {
  // The id of the EditTimeMenuItem object.
  EditTimeMenuItemInstance instance = 1;
  // Specifies the type of Tools menu item.
  ToolMenuTypes val = 2;
}

message EditTimeMenuItem_Set_TypeResponse {
}

message EditTimeMenuItem_Get_TypeRequest {
  // The id of the EditTimeMenuItem object.
  EditTimeMenuItemInstance instance = 1;
}

message EditTimeMenuItem_Get_TypeResponse {
  // Specifies the type of Tools menu item.
  ToolMenuTypes returnValue = 1;
}

message EditTimeMenuItem_Set_ItemTextExpressionRequest {
  // The id of the EditTimeMenuItem object.
  EditTimeMenuItemInstance instance = 1;
  // Specifies the expression TestStand uses to determine the menu item text at run time.
  string val = 2;
}

message EditTimeMenuItem_Set_ItemTextExpressionResponse {
}

message EditTimeMenuItem_Get_ItemTextExpressionRequest {
  // The id of the EditTimeMenuItem object.
  EditTimeMenuItemInstance instance = 1;
}

message EditTimeMenuItem_Get_ItemTextExpressionResponse {
  // Specifies the expression TestStand uses to determine the menu item text at run time.
  string returnValue = 1;
}

message EditTimeMenuItem_Set_EnabledExpressionRequest {
  // The id of the EditTimeMenuItem object.
  EditTimeMenuItemInstance instance = 1;
  // Specifies the expression TestStand uses to determine whether the menu item is enabled at run time.
  string val = 2;
}

message EditTimeMenuItem_Set_EnabledExpressionResponse {
}

message EditTimeMenuItem_Get_EnabledExpressionRequest {
  // The id of the EditTimeMenuItem object.
  EditTimeMenuItemInstance instance = 1;
}

message EditTimeMenuItem_Get_EnabledExpressionResponse {
  // Specifies the expression TestStand uses to determine whether the menu item is enabled at run time.
  string returnValue = 1;
}

message EditTimeMenuItem_Set_HiddenExpressionRequest {
  // The id of the EditTimeMenuItem object.
  EditTimeMenuItemInstance instance = 1;
  // Specifies the expression TestStand uses to determine whether the menu item is visible at run time.
  string val = 2;
}

message EditTimeMenuItem_Set_HiddenExpressionResponse {
}

message EditTimeMenuItem_Get_HiddenExpressionRequest {
  // The id of the EditTimeMenuItem object.
  EditTimeMenuItemInstance instance = 1;
}

message EditTimeMenuItem_Get_HiddenExpressionResponse {
  // Specifies the expression TestStand uses to determine whether the menu item is visible at run time.
  string returnValue = 1;
}

message EditTimeMenuItem_Set_SeparatorBeforeRequest {
  // The id of the EditTimeMenuItem object.
  EditTimeMenuItemInstance instance = 1;
  // Specifies that a menu separator precedes the Tools menu item.
  bool val = 2;
}

message EditTimeMenuItem_Set_SeparatorBeforeResponse {
}

message EditTimeMenuItem_Get_SeparatorBeforeRequest {
  // The id of the EditTimeMenuItem object.
  EditTimeMenuItemInstance instance = 1;
}

message EditTimeMenuItem_Get_SeparatorBeforeResponse {
  // Specifies that a menu separator precedes the Tools menu item.
  bool returnValue = 1;
}

message EditTimeMenuItem_Set_SequenceFilePathRequest {
  // The id of the EditTimeMenuItem object.
  EditTimeMenuItemInstance instance = 1;
  // Specifies the path to the sequence file for sequence and sequence file menu types.
  string val = 2;
}

message EditTimeMenuItem_Set_SequenceFilePathResponse {
}

message EditTimeMenuItem_Get_SequenceFilePathRequest {
  // The id of the EditTimeMenuItem object.
  EditTimeMenuItemInstance instance = 1;
}

message EditTimeMenuItem_Get_SequenceFilePathResponse {
  // Specifies the path to the sequence file for sequence and sequence file menu types.
  string returnValue = 1;
}

message EditTimeMenuItem_Set_SequenceNameRequest {
  // The id of the EditTimeMenuItem object.
  EditTimeMenuItemInstance instance = 1;
  // Specifies the name of the sequence that TestStand launches in an execution for sequence menu item types.
  string val = 2;
}

message EditTimeMenuItem_Set_SequenceNameResponse {
}

message EditTimeMenuItem_Get_SequenceNameRequest {
  // The id of the EditTimeMenuItem object.
  EditTimeMenuItemInstance instance = 1;
}

message EditTimeMenuItem_Get_SequenceNameResponse {
  // Specifies the name of the sequence that TestStand launches in an execution for sequence menu item types.
  string returnValue = 1;
}

message EditTimeMenuItem_Set_EditsSelectedFileRequest {
  // The id of the EditTimeMenuItem object.
  EditTimeMenuItemInstance instance = 1;
  // Specifies if the Tools menu item edits the selected sequence file.
  bool val = 2;
}

message EditTimeMenuItem_Set_EditsSelectedFileResponse {
}

message EditTimeMenuItem_Get_EditsSelectedFileRequest {
  // The id of the EditTimeMenuItem object.
  EditTimeMenuItemInstance instance = 1;
}

message EditTimeMenuItem_Get_EditsSelectedFileResponse {
  // Specifies if the Tools menu item edits the selected sequence file.
  bool returnValue = 1;
}

message EditTimeMenuItem_Set_CommandPathRequest {
  // The id of the EditTimeMenuItem object.
  EditTimeMenuItemInstance instance = 1;
  // Specifies the path to the executable or system command the menu item invokes.
  string val = 2;
}

message EditTimeMenuItem_Set_CommandPathResponse {
}

message EditTimeMenuItem_Get_CommandPathRequest {
  // The id of the EditTimeMenuItem object.
  EditTimeMenuItemInstance instance = 1;
}

message EditTimeMenuItem_Get_CommandPathResponse {
  // Specifies the path to the executable or system command the menu item invokes.
  string returnValue = 1;
}

message EditTimeMenuItem_Set_CommandArgumentsRequest {
  // The id of the EditTimeMenuItem object.
  EditTimeMenuItemInstance instance = 1;
  // Specifies the command-line arguments to pass to the command the EditTimeMenuItem.CommandPath property specifies.
  string val = 2;
}

message EditTimeMenuItem_Set_CommandArgumentsResponse {
}

message EditTimeMenuItem_Get_CommandArgumentsRequest {
  // The id of the EditTimeMenuItem object.
  EditTimeMenuItemInstance instance = 1;
}

message EditTimeMenuItem_Get_CommandArgumentsResponse {
  // Specifies the command-line arguments to pass to the command the EditTimeMenuItem.CommandPath property specifies.
  string returnValue = 1;
}

message EditTimeMenuItem_Set_CommandInitialDirectoryRequest {
  // The id of the EditTimeMenuItem object.
  EditTimeMenuItemInstance instance = 1;
  // Specifies the initial working directory when invoking the command the EditTimeMenuItem.CommandPath property specifies.
  string val = 2;
}

message EditTimeMenuItem_Set_CommandInitialDirectoryResponse {
}

message EditTimeMenuItem_Get_CommandInitialDirectoryRequest {
  // The id of the EditTimeMenuItem object.
  EditTimeMenuItemInstance instance = 1;
}

message EditTimeMenuItem_Get_CommandInitialDirectoryResponse {
  // Specifies the initial working directory when invoking the command the EditTimeMenuItem.CommandPath property specifies.
  string returnValue = 1;
}

message EditTimeMenuItem_Set_EditableRequest {
  // The id of the EditTimeMenuItem object.
  EditTimeMenuItemInstance instance = 1;
  // Specifies whether the properties of the menu item display as read-only.
  bool val = 2;
}

message EditTimeMenuItem_Set_EditableResponse {
}

message EditTimeMenuItem_Get_EditableRequest {
  // The id of the EditTimeMenuItem object.
  EditTimeMenuItemInstance instance = 1;
}

message EditTimeMenuItem_Get_EditableResponse {
  // Specifies whether the properties of the menu item display as read-only.
  bool returnValue = 1;
}

message EditTimeMenuItem_Get_SubMenuItemsRequest {
  // The id of the EditTimeMenuItem object.
  EditTimeMenuItemInstance instance = 1;
}

message EditTimeMenuItem_Get_SubMenuItemsResponse {
  // Returns a collection of Tools menu items that represent the submenu for the menu item.
  EditTimeMenuItemsInstance returnValue = 1;
}

message EditTimeMenuItem_Set_CommandArgumentsExpressionRequest {
  // The id of the EditTimeMenuItem object.
  EditTimeMenuItemInstance instance = 1;
  // Specifies an expression defining the command-line arguments to pass to the command that the EditTimeMenuItem.CommandPath property specifies.
  string val = 2;
}

message EditTimeMenuItem_Set_CommandArgumentsExpressionResponse {
}

message EditTimeMenuItem_Get_CommandArgumentsExpressionRequest {
  // The id of the EditTimeMenuItem object.
  EditTimeMenuItemInstance instance = 1;
}

message EditTimeMenuItem_Get_CommandArgumentsExpressionResponse {
  // Specifies an expression defining the command-line arguments to pass to the command that the EditTimeMenuItem.CommandPath property specifies.
  string returnValue = 1;
}

// RunTimeMenuItems
//
// The RunTimeMenuItems class specifies a collection of RunTimeMenuItem objects, which represent an evaluated version of a EditTimeMenuItem object. The properties of the RunTimeMenuItem object specify the item text and if the menu item is disabled. You can use the RunTimeMenuItem.InvokeItem method to execute the item, which launches an executable or a sequence in a new execution.
// Use this collection to determine what to display in the Tools menu at run time. Use the Engine.GetRunTimeToolMenuItems method to obtain a reference to a collection of this class for the Tools menu.
//
service RunTimeMenuItems {
  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // RunTimeMenuItems_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: RunTimeMenuItemsInstance - The id of the RunTimeMenuItems object.
  //    - index: int32 - Specifies the zero-based index of the item to retrieve.
  //
  // RunTimeMenuItems_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: RunTimeMenuItemInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(RunTimeMenuItems_Get_ItemRequest) returns (RunTimeMenuItems_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // RunTimeMenuItems_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: RunTimeMenuItemsInstance - The id of the RunTimeMenuItems object.
  //
  // RunTimeMenuItems_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(RunTimeMenuItems_Get_CountRequest) returns (RunTimeMenuItems_Get_CountResponse);
  
  
}
message RunTimeMenuItemsInstance {
  // Specifies the handle of the RunTimeMenuItems instance in the server.
  string id = 1;
}

message RunTimeMenuItemInstance {
  // Specifies the handle of the RunTimeMenuItem instance in the server.
  string id = 1;
}
message RunTimeMenuItems_Get_ItemRequest {
  // The id of the RunTimeMenuItems object.
  RunTimeMenuItemsInstance instance = 1;
  // Specifies the zero-based index of the item to retrieve.
  optional int32 index = 2;
}

message RunTimeMenuItems_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  RunTimeMenuItemInstance returnValue = 1;
}

message RunTimeMenuItems_Get_CountRequest {
  // The id of the RunTimeMenuItems object.
  RunTimeMenuItemsInstance instance = 1;
}

message RunTimeMenuItems_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// RunTimeMenuItem
//
// Objects of the RunTimeMenuItem class represent an evaluated version of a EditTimeMenuItem object. The properties of the RunTimeMenuItem object specify the item text, if the menu item is disabled, and if a separator appears before it. You can use the RunTimeMenuItem.InvokeItem method to execute the item, which launches a sequence in a new execution or an executable.
// Use the Engine.GetRunTimeToolMenuItems method to obtain a reference to a collection of this class for the Tools menu. Use this collection to determine what to display in the Tools menu at run time.
//
service RunTimeMenuItem {
  // Method: InvokeItem
  //
  // Executes the action the menu item specifies.
  //
  // This method has no effect when called on a menu item that represents a submenu.
  //
  // RunTimeMenuItem_InvokeItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: RunTimeMenuItemInstance - The id of the RunTimeMenuItem object.
  //    - editArgsParam: ObjectInstance - Specifies which items in the user interface are currently selected.
  //    - reserved: int32 - Pass 0 for this parameter.
  //
  // RunTimeMenuItem_InvokeItemResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc InvokeItem(RunTimeMenuItem_InvokeItemRequest) returns (RunTimeMenuItem_InvokeItemResponse);
  
  

  // Property: Text
  //
  // Returns from the EditTimeMenuItem.ItemTextExpression property the menu item text the expression defines.
  //
  // RunTimeMenuItem_Get_TextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: RunTimeMenuItemInstance - The id of the RunTimeMenuItem object.
  //
  // RunTimeMenuItem_Get_TextResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns from the EditTimeMenuItem.ItemTextExpression property the menu item text the expression defines. 
  //
  rpc Get_Text(RunTimeMenuItem_Get_TextRequest) returns (RunTimeMenuItem_Get_TextResponse);
  
  
  // Property: ItemEnabled
  //
  // Returns a value that indicates whether the expression the EditTimeMenuItem.EnabledExpression property defines returned True or False.
  //
  // RunTimeMenuItem_Get_ItemEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: RunTimeMenuItemInstance - The id of the RunTimeMenuItem object.
  //
  // RunTimeMenuItem_Get_ItemEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the expression the EditTimeMenuItem.EnabledExpression property defines returned True or False. 
  //
  rpc Get_ItemEnabled(RunTimeMenuItem_Get_ItemEnabledRequest) returns (RunTimeMenuItem_Get_ItemEnabledResponse);
  
  
  // Property: SubMenuItems
  //
  // Returns a collection of Tools menu items that represent the submenu for the menu item.
  //
  // This property only exists when the value of the EditTimeMenuItem.Type property is ToolMenuType_SubMenu or ToolMenuType_SequenceFile.
  //
  // RunTimeMenuItem_Get_SubMenuItemsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: RunTimeMenuItemInstance - The id of the RunTimeMenuItem object.
  //
  // RunTimeMenuItem_Get_SubMenuItemsResponse - The response message from the server. It provides the return value.
  //    - returnValue: RunTimeMenuItemsInstance - Returns a collection of Tools menu items that represent the submenu for the menu item. 
  //
  rpc Get_SubMenuItems(RunTimeMenuItem_Get_SubMenuItemsRequest) returns (RunTimeMenuItem_Get_SubMenuItemsResponse);
  
  
  // Property: SeparatorBefore
  //
  // Returns a value that indicates whether a menu separator precedes the Tools menu item.
  //
  // RunTimeMenuItem_Get_SeparatorBeforeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: RunTimeMenuItemInstance - The id of the RunTimeMenuItem object.
  //
  // RunTimeMenuItem_Get_SeparatorBeforeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether a menu separator precedes the Tools menu item. 
  //
  rpc Get_SeparatorBefore(RunTimeMenuItem_Get_SeparatorBeforeRequest) returns (RunTimeMenuItem_Get_SeparatorBeforeResponse);
  
  
  // Property: EditsSelectedFile
  //
  // Returns a value that indicates whether the tools menu item edits the selected sequence file.
  //
  // This property applies only to sequence and sequence file item types. The sequence editor uses this option to determine whether to prompt the user to check out the selected file from source code control, if it is not already checked out.
  //
  // RunTimeMenuItem_Get_EditsSelectedFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: RunTimeMenuItemInstance - The id of the RunTimeMenuItem object.
  //
  // RunTimeMenuItem_Get_EditsSelectedFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the tools menu item edits the selected sequence file. 
  //
  rpc Get_EditsSelectedFile(RunTimeMenuItem_Get_EditsSelectedFileRequest) returns (RunTimeMenuItem_Get_EditsSelectedFileResponse);
  
  
}
message RunTimeMenuItem_InvokeItemRequest {
  // The id of the RunTimeMenuItem object.
  RunTimeMenuItemInstance instance = 1;
  // Specifies which items in the user interface are currently selected.
  PropertyObjectInstance editArgsParam = 2;
  // Pass 0 for this parameter.
  int32 reserved = 3;
}

message RunTimeMenuItem_InvokeItemResponse {
}

message RunTimeMenuItem_Get_TextRequest {
  // The id of the RunTimeMenuItem object.
  RunTimeMenuItemInstance instance = 1;
}

message RunTimeMenuItem_Get_TextResponse {
  // Returns from the EditTimeMenuItem.ItemTextExpression property the menu item text the expression defines.
  string returnValue = 1;
}

message RunTimeMenuItem_Get_ItemEnabledRequest {
  // The id of the RunTimeMenuItem object.
  RunTimeMenuItemInstance instance = 1;
}

message RunTimeMenuItem_Get_ItemEnabledResponse {
  // Returns a value that indicates whether the expression the EditTimeMenuItem.EnabledExpression property defines returned True or False.
  bool returnValue = 1;
}

message RunTimeMenuItem_Get_SubMenuItemsRequest {
  // The id of the RunTimeMenuItem object.
  RunTimeMenuItemInstance instance = 1;
}

message RunTimeMenuItem_Get_SubMenuItemsResponse {
  // Returns a collection of Tools menu items that represent the submenu for the menu item.
  RunTimeMenuItemsInstance returnValue = 1;
}

message RunTimeMenuItem_Get_SeparatorBeforeRequest {
  // The id of the RunTimeMenuItem object.
  RunTimeMenuItemInstance instance = 1;
}

message RunTimeMenuItem_Get_SeparatorBeforeResponse {
  // Returns a value that indicates whether a menu separator precedes the Tools menu item.
  bool returnValue = 1;
}

message RunTimeMenuItem_Get_EditsSelectedFileRequest {
  // The id of the RunTimeMenuItem object.
  RunTimeMenuItemInstance instance = 1;
}

message RunTimeMenuItem_Get_EditsSelectedFileResponse {
  // Returns a value that indicates whether the tools menu item edits the selected sequence file.
  bool returnValue = 1;
}

// SequenceFileDiffer
//
service SequenceFileDiffer {
  // Method: UpdateDifferences
  //
  rpc UpdateDifferences(SequenceFileDiffer_UpdateDifferencesRequest) returns (SequenceFileDiffer_UpdateDifferencesResponse);
  
  
  // Method: DiffSequenceFiles
  //
  rpc DiffSequenceFiles(SequenceFileDiffer_DiffSequenceFilesRequest) returns (SequenceFileDiffer_DiffSequenceFilesResponse);
  
  

  // Property: DifferencesRoot
  //
  rpc Get_DifferencesRoot(SequenceFileDiffer_Get_DifferencesRootRequest) returns (SequenceFileDiffer_Get_DifferencesRootResponse);
  
  
}
message SequenceFileDifferInstance {
  // Specifies the handle of the SequenceFileDiffer instance in the server.
  string id = 1;
}
message SequenceFileDiffer_UpdateDifferencesRequest {
  // The id of the SequenceFileDiffer object.
  SequenceFileDifferInstance instance = 1;
  SequenceFileDifferenceSectionInstance differSection = 2;
}

message SequenceFileDiffer_UpdateDifferencesResponse {
  int32 returnValue = 1;
}

message SequenceFileDiffer_DiffSequenceFilesRequest {
  // The id of the SequenceFileDiffer object.
  SequenceFileDifferInstance instance = 1;
}

message SequenceFileDiffer_DiffSequenceFilesResponse {
}

message SequenceFileDiffer_Get_DifferencesRootRequest {
  // The id of the SequenceFileDiffer object.
  SequenceFileDifferInstance instance = 1;
}

message SequenceFileDiffer_Get_DifferencesRootResponse {
  SequenceFileDifferenceSectionInstance returnValue = 1;
}
message SequenceFileDifferenceSectionInstance {
  // Specifies the handle of the SequenceFileDifferenceSection instance in the server.
  string id = 1;
}

// SequenceFileDifferenceSection
//
service SequenceFileDifferenceSection {
  // Method: GetDifferenceGroup
  //
  rpc GetDifferenceGroup(SequenceFileDifferenceSection_GetDifferenceGroupRequest) returns (SequenceFileDifferenceSection_GetDifferenceGroupResponse);
  
  

  // Property: Name
  //
  rpc Get_Name(SequenceFileDifferenceSection_Get_NameRequest) returns (SequenceFileDifferenceSection_Get_NameResponse);
  
  
  // Property: SmallIconIndex
  //
  rpc Get_SmallIconIndex(SequenceFileDifferenceSection_Get_SmallIconIndexRequest) returns (SequenceFileDifferenceSection_Get_SmallIconIndexResponse);
  
  
  // Property: File1Section
  //
  rpc Get_File1Section(SequenceFileDifferenceSection_Get_File1SectionRequest) returns (SequenceFileDifferenceSection_Get_File1SectionResponse);
  
  
  // Property: File2Section
  //
  rpc Get_File2Section(SequenceFileDifferenceSection_Get_File2SectionRequest) returns (SequenceFileDifferenceSection_Get_File2SectionResponse);
  
  
  // Property: File1Location
  //
  rpc Get_File1Location(SequenceFileDifferenceSection_Get_File1LocationRequest) returns (SequenceFileDifferenceSection_Get_File1LocationResponse);
  
  
  // Property: File2Location
  //
  rpc Get_File2Location(SequenceFileDifferenceSection_Get_File2LocationRequest) returns (SequenceFileDifferenceSection_Get_File2LocationResponse);
  
  
  // Property: File1Differences
  //
  rpc Get_File1Differences(SequenceFileDifferenceSection_Get_File1DifferencesRequest) returns (SequenceFileDifferenceSection_Get_File1DifferencesResponse);
  
  
  // Property: File2Differences
  //
  rpc Get_File2Differences(SequenceFileDifferenceSection_Get_File2DifferencesRequest) returns (SequenceFileDifferenceSection_Get_File2DifferencesResponse);
  
  
  // Property: NumberOfDifferenceGroups
  //
  rpc Get_NumberOfDifferenceGroups(SequenceFileDifferenceSection_Get_NumberOfDifferenceGroupsRequest) returns (SequenceFileDifferenceSection_Get_NumberOfDifferenceGroupsResponse);
  
  
  // Property: NumberOfDifferences
  //
  rpc Get_NumberOfDifferences(SequenceFileDifferenceSection_Get_NumberOfDifferencesRequest) returns (SequenceFileDifferenceSection_Get_NumberOfDifferencesResponse);
  
  
  // Property: TotalNumberOfDifferences
  //
  rpc Get_TotalNumberOfDifferences(SequenceFileDifferenceSection_Get_TotalNumberOfDifferencesRequest) returns (SequenceFileDifferenceSection_Get_TotalNumberOfDifferencesResponse);
  
  
  // Property: SubSections
  //
  rpc Get_SubSections(SequenceFileDifferenceSection_Get_SubSectionsRequest) returns (SequenceFileDifferenceSection_Get_SubSectionsResponse);
  
  
}
message SequenceFileDifferenceSection_GetDifferenceGroupRequest {
  // The id of the SequenceFileDifferenceSection object.
  SequenceFileDifferenceSectionInstance instance = 1;
  int32 index = 2;
}

message SequenceFileDifferenceSection_GetDifferenceGroupResponse {
  repeated int32 file1DifferenceGroup = 1;
  repeated int32 file2DifferenceGroup = 2;
}

message SequenceFileDifferenceSection_Get_NameRequest {
  // The id of the SequenceFileDifferenceSection object.
  SequenceFileDifferenceSectionInstance instance = 1;
}

message SequenceFileDifferenceSection_Get_NameResponse {
  string returnValue = 1;
}

message SequenceFileDifferenceSection_Get_SmallIconIndexRequest {
  // The id of the SequenceFileDifferenceSection object.
  SequenceFileDifferenceSectionInstance instance = 1;
}

message SequenceFileDifferenceSection_Get_SmallIconIndexResponse {
  int32 returnValue = 1;
}

message SequenceFileDifferenceSection_Get_File1SectionRequest {
  // The id of the SequenceFileDifferenceSection object.
  SequenceFileDifferenceSectionInstance instance = 1;
}

message SequenceFileDifferenceSection_Get_File1SectionResponse {
  PropertyObjectInstance returnValue = 1;
}

message SequenceFileDifferenceSection_Get_File2SectionRequest {
  // The id of the SequenceFileDifferenceSection object.
  SequenceFileDifferenceSectionInstance instance = 1;
}

message SequenceFileDifferenceSection_Get_File2SectionResponse {
  PropertyObjectInstance returnValue = 1;
}

message SequenceFileDifferenceSection_Get_File1LocationRequest {
  // The id of the SequenceFileDifferenceSection object.
  SequenceFileDifferenceSectionInstance instance = 1;
}

message SequenceFileDifferenceSection_Get_File1LocationResponse {
  string returnValue = 1;
}

message SequenceFileDifferenceSection_Get_File2LocationRequest {
  // The id of the SequenceFileDifferenceSection object.
  SequenceFileDifferenceSectionInstance instance = 1;
}

message SequenceFileDifferenceSection_Get_File2LocationResponse {
  string returnValue = 1;
}

message SequenceFileDifferenceSection_Get_File1DifferencesRequest {
  // The id of the SequenceFileDifferenceSection object.
  SequenceFileDifferenceSectionInstance instance = 1;
}

message SequenceFileDifferenceSection_Get_File1DifferencesResponse {
  repeated int32 returnValue = 1;
}

message SequenceFileDifferenceSection_Get_File2DifferencesRequest {
  // The id of the SequenceFileDifferenceSection object.
  SequenceFileDifferenceSectionInstance instance = 1;
}

message SequenceFileDifferenceSection_Get_File2DifferencesResponse {
  repeated int32 returnValue = 1;
}

message SequenceFileDifferenceSection_Get_NumberOfDifferenceGroupsRequest {
  // The id of the SequenceFileDifferenceSection object.
  SequenceFileDifferenceSectionInstance instance = 1;
}

message SequenceFileDifferenceSection_Get_NumberOfDifferenceGroupsResponse {
  int32 returnValue = 1;
}

message SequenceFileDifferenceSection_Get_NumberOfDifferencesRequest {
  // The id of the SequenceFileDifferenceSection object.
  SequenceFileDifferenceSectionInstance instance = 1;
}

message SequenceFileDifferenceSection_Get_NumberOfDifferencesResponse {
  int32 returnValue = 1;
}

message SequenceFileDifferenceSection_Get_TotalNumberOfDifferencesRequest {
  // The id of the SequenceFileDifferenceSection object.
  SequenceFileDifferenceSectionInstance instance = 1;
}

message SequenceFileDifferenceSection_Get_TotalNumberOfDifferencesResponse {
  int32 returnValue = 1;
}

message SequenceFileDifferenceSection_Get_SubSectionsRequest {
  // The id of the SequenceFileDifferenceSection object.
  SequenceFileDifferenceSectionInstance instance = 1;
}

message SequenceFileDifferenceSection_Get_SubSectionsResponse {
  SequenceFileDifferenceSectionsInstance returnValue = 1;
}
message SequenceFileDifferenceSectionsInstance {
  // Specifies the handle of the SequenceFileDifferenceSections instance in the server.
  string id = 1;
}

// SequenceFileDifferenceSections
//
service SequenceFileDifferenceSections {
  // Property: Item
  //
  rpc Get_Item(SequenceFileDifferenceSections_Get_ItemRequest) returns (SequenceFileDifferenceSections_Get_ItemResponse);
  
  
  // Property: Count
  //
  rpc Get_Count(SequenceFileDifferenceSections_Get_CountRequest) returns (SequenceFileDifferenceSections_Get_CountResponse);
  
  
}
message SequenceFileDifferenceSections_Get_ItemRequest {
  // The id of the SequenceFileDifferenceSections object.
  SequenceFileDifferenceSectionsInstance instance = 1;
  optional int32 index = 2;
}

message SequenceFileDifferenceSections_Get_ItemResponse {
  SequenceFileDifferenceSectionInstance returnValue = 1;
}

message SequenceFileDifferenceSections_Get_CountRequest {
  // The id of the SequenceFileDifferenceSections object.
  SequenceFileDifferenceSectionsInstance instance = 1;
}

message SequenceFileDifferenceSections_Get_CountResponse {
  int32 returnValue = 1;
}

// Locations
//
// Locations is a collection of Location objects. Use Locations to instruct the user interface to update the selection. Follow these steps to set the selection in a user interface:    * Call the Engine.NewLocations method to create a Locations object.    * Call the Locations.AddFileLocation, Locations.AddExecutionLocation, or Locations.AddTypeLocation method on a Locations object to specify data for the user interface to select.    * Call the Locations.GotoLocation method on the Locations object to send the Locations object to the user interface.    * The user interface receives the Locations object through the UIMessage.ActiveXData property of a UIMsg_GotoLocation UIMessage.    * If the user interface supports the Goto location action, it updates the selection to correspond to the Locations object.
//
service Locations {
  // Method: AddFileLocation
  //
  // Adds a new file location to the collection.
  //
  // Locations_AddFileLocationRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LocationsInstance - The id of the Locations object.
  //    - file: PropertyObjectFileInstance - Specifies ss the file to initialize the Location.FileDisplayName, Location.FileId, and Location.FilePath properties.
  //    - lookupString: string - Specifies a subproperty of the file parameter. This method sets the Location.PropertyPath property of the new Location to the lookup string to lookupString from file. This method also sets as many properties of the new Location as this method can obtain from the object you pass. This method specifies the lookupString parameter relative to the root of the PropertyObjectFile object. For example, if the location is underneath the PropertyObjectFile.Data element, the lookup string must use the Data. prefix.
  //    - elem: PropertyObjectElements - Specifies the value of the Location.Element property of the new location.
  //    - selectionStart: int32 - Specifies the value of the Location.SelStart property of the new location.
  //    - selectionLength: int32 - Specifies the value of the Location.SelLength property of the new location.
  //
  // Locations_AddFileLocationResponse - The response message from the server. It provides the return value.
  //    - returnValue: LocationInstance - The Location added to the collection. 
  //
  rpc AddFileLocation(Locations_AddFileLocationRequest) returns (Locations_AddFileLocationResponse);
  
  
  // Method: AddFileLocationByObject
  //
  // Adds a new file location to the collection.
  //
  // Locations_AddFileLocationByObjectRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LocationsInstance - The id of the Locations object.
  //    - obj: PropertyObjectInstance - Specifies any PropertyObject, such as step, sequence, variable, or sequence context. This method sets as many properties of the new Location object as this method can obtain from the object you pass.
  //    - elem: PropertyObjectElements - Specifies the value of the Location.Element property of the new location.
  //    - selectionStart: int32 - Specifies the value of the Location.SelStart property of the new location.
  //    - selectionLength: int32 - Specifies the value of the Location.SelLength property of the new location.
  //
  // Locations_AddFileLocationByObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: LocationInstance - The Location added to the collection. 
  //
  rpc AddFileLocationByObject(Locations_AddFileLocationByObjectRequest) returns (Locations_AddFileLocationByObjectResponse);
  
  
  // Method: AddExecutionLocation
  //
  // Adds a new execution location to the collection.
  //
  // Locations_AddExecutionLocationRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LocationsInstance - The id of the Locations object.
  //    - seqContext: SequenceContextInstance - Specifies the sequence context to initialize the Location.ContextId, Location.ExecutionId, and Location.ThreadId properties.
  //    - lookupString: string - Specifies the path to a subproperty of the seqContext parameter. This method sets the Location.PropertyPath property of the new Location using the lookup string you pass. This method also sets as many properties of the new Location as this method can obtain from the subproperty this parameter specifies.
  //    - elem: PropertyObjectElements - Specifies the value of the Location.Element property of the new location.
  //    - selectionStart: int32 - Specifies the value of the Location.SelStart property of the new location.
  //    - selectionLength: int32 - Specifies the value of the Location.SelLength property of the new location.
  //
  // Locations_AddExecutionLocationResponse - The response message from the server. It provides the return value.
  //    - returnValue: LocationInstance - The Location added to the collection. 
  //
  rpc AddExecutionLocation(Locations_AddExecutionLocationRequest) returns (Locations_AddExecutionLocationResponse);
  
  
  // Method: AddExecutionLocationByObject
  //
  // Adds a new execution location to the collection.
  //
  // Locations_AddExecutionLocationByObjectRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LocationsInstance - The id of the Locations object.
  //    - seqContext: SequenceContextInstance - Specifies the sequence context to initialize the Location.ContextId, Location.ExecutionId, and Location.ThreadId properties.
  //    - obj: PropertyObjectInstance - Specifies a subproperty of the seqContext parameter. This method sets the  Location.PropertyPath property of the new Location to the lookup string to obj from seqContext. This method also sets as many properties of the new Location as this method can obtain from the object which you pass.
  //    - elem: PropertyObjectElements - Specifies the value of the Location.Element property of the new location.
  //    - selectionStart: int32 - Specifies the value of the Location.SelStart property of the new location.
  //    - selectionLength: int32 - Specifies the value of the Location.SelLength property of the new location.
  //
  // Locations_AddExecutionLocationByObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: LocationInstance - The Location added to the collection. 
  //
  rpc AddExecutionLocationByObject(Locations_AddExecutionLocationByObjectRequest) returns (Locations_AddExecutionLocationByObjectResponse);
  
  
  // Method: AddTypeLocation
  //
  // Adds a new type location to the collection.
  //
  // Locations_AddTypeLocationRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LocationsInstance - The id of the Locations object.
  //    - file: PropertyObjectFileInstance - Specifies the file in which the type you pass to the rootTypeDef parameter is saved.
  //      
  //    - rootTypeDef: PropertyObjectInstance - Specifies a type definition. This method sets the Location.TypeName and Location.TypeCategory properties of the new Location from the root type definition this parameter specifies. This method also sets the Location.PropertyPath property of the new Location using the lookupString parameter.
  //    - lookupString: string - Specifies the path to a subproperty of the rootTypeDef parameter. This method sets the Location.PropertyPath property of the new Location using the lookup string you pass. This method also sets as many properties of the new Location as this method can obtain from the subproperty this parameter specifies.
  //    - elem: PropertyObjectElements - Specifies the value of the Location.Element property of the new location.
  //    - selectionStart: int32 - Specifies the value of the Location.SelStart property of the new location.
  //    - selectionLength: int32 - Specifies the value of the Location.SelLength property of the new location.
  //
  // Locations_AddTypeLocationResponse - The response message from the server. It provides the return value.
  //    - returnValue: LocationInstance - The Location added to the collection. 
  //
  rpc AddTypeLocation(Locations_AddTypeLocationRequest) returns (Locations_AddTypeLocationResponse);
  
  
  // Method: AddTypeLocationByObject
  //
  // Adds a new type location to the collection.
  //
  // Locations_AddTypeLocationByObjectRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LocationsInstance - The id of the Locations object.
  //    - file: PropertyObjectFileInstance - Specifies the file in which the type you pass to the obj parameter is saved.
  //    - obj: PropertyObjectInstance - Specifies a type definition. This method sets the Location.TypeName and Location.TypeCategory properties of the new Location from the root type definition that contains the type definition you pass. This method sets the Location.PropertyPath property of the new Location to the lookup string to obj from the root type definition of obj.
  //    - elem: PropertyObjectElements - Specifies the value of the Location.Element property of the new location.
  //    - selectionStart: int32 - Specifies the value of the Location.SelStart property of the new location.
  //    - selectionLength: int32 - Specifies the value of the Location.SelLength property of the new location.
  //
  // Locations_AddTypeLocationByObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: LocationInstance - The Location added to the collection. 
  //
  rpc AddTypeLocationByObject(Locations_AddTypeLocationByObjectRequest) returns (Locations_AddTypeLocationByObjectResponse);
  
  
  // Method: AddLocations
  //
  // Adds the Location objects from a specified Locations to the end of this Locations.
  //
  // Locations_AddLocationsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LocationsInstance - The id of the Locations object.
  //    - locationsToAdd: LocationsInstance - Specifies Locations to append to this Locations.
  //    - copyLocationOption: CopyLocationsOptions - Specifies whether this method copies locationsToAdd before adding them to the collection.
  //
  // Locations_AddLocationsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc AddLocations(Locations_AddLocationsRequest) returns (Locations_AddLocationsResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // Locations_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LocationsInstance - The id of the Locations object.
  //    - index: int32 - Specifies the zero-based index of the item to remove.
  //
  // Locations_RemoveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Remove(Locations_RemoveRequest) returns (Locations_RemoveResponse);
  
  
  // Method: Clear
  //
  // Removes all items from this collection.
  //
  // Locations_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationsInstance - The id of the Locations object.
  //
  // Locations_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(Locations_ClearRequest) returns (Locations_ClearResponse);
  
  
  // Method: GotoLocation
  //
  // This method sends this Locations collection to the user interface in a synchronous UIMsg_GotoLocation user interface message. If the user interface supports GotoLocation, the user interface displays this location by updating which controls are visible and active and by updating the selected state of controls.
  //
  // After you call this method, you can use the Locations.LocationFound property to see if the user interface successfully went to the location. If the Locations.LocationFound property is False, you can use the Locations.LocationNotFoundMessage property to obtain a description of why the user interface could not go to the location.
  //
  // Locations_GotoLocationRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LocationsInstance - The id of the Locations object.
  //    - options: int32 - Specifies any combination of GotoLocationOptions.
  //
  // Locations_GotoLocationResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GotoLocation(Locations_GotoLocationRequest) returns (Locations_GotoLocationResponse);
  
  
  // Method: ToPropertyObject
  //
  // Returns a PropertyObject representation of the Locations collection. You can use the PropertyObject to persist the collection.
  // Note: The PropertyObject representation does not store the value of the Locations.UserData property.
  //
  // Locations_ToPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationsInstance - The id of the Locations object.
  //
  // Locations_ToPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc ToPropertyObject(Locations_ToPropertyObjectRequest) returns (Locations_ToPropertyObjectResponse);
  
  
  // Method: FromPropertyObject
  //
  // Restores the Locations state the Locations.ToPropertyObject method stores in the PropertyObject.
  //
  // Locations_FromPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LocationsInstance - The id of the Locations object.
  //    - val: PropertyObjectInstance - Specifies the PropertyObject.
  //
  // Locations_FromPropertyObjectResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc FromPropertyObject(Locations_FromPropertyObjectRequest) returns (Locations_FromPropertyObjectResponse);
  
  
  // Method: AddAPILocation
  //
  // Use this method to add a new file location from an API call to the collection.
  //
  // Locations_AddAPILocationRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LocationsInstance - The id of the Locations object.
  //    - baseObj: PropertyObjectInstance - Specifies the base object to use with the apiLocation parameter as the location to add.
  //    - apiLocation: APILocations - Pass the APILocations enumeration to use as the location to add.
  //    - objFile: PropertyObjectFileInstance - Specifies the file associated with the base object. Use this parameter only if the baseObj parameter is a type definition. TestStand ignores this parameter if the baseObj parameter is not a type definition.
  //
  // Locations_AddAPILocationResponse - The response message from the server. It provides the return value.
  //    - returnValue: LocationInstance - The return type of the Location object.
  //
  rpc AddAPILocation(Locations_AddAPILocationRequest) returns (Locations_AddAPILocationResponse);
  
  
  // Method: GotoLocationInApplication
  //
  // Sends the Locations collection to the user interface the applicationPath parameter specifies. If the user interface supports the Locations.GotoLocation method, the user interface displays the location by updating which controls are visible and active and by updating the selected state of controls.
  //
  // If the applicationPath parameter specifies the path of the currently executing user interface, this method behaves the same as the Locations.GotoLocation method. Otherwise, this method differs from the Locations.GotoLocation method in the following ways:
  // * This method supports only Locations of LocationKind_File type.    * If the applicationPath parameter specifies the path of a user interface that is currently executing, this method attempts to go to the location in that instance of the user interface. Otherwise, this method starts a new instance of the user interface and attempts to go to the location in that instance.    * This method does not set the Locations.LocationFound property and does not use the Locations.LocationNotFoundMessage property when the applicationPath parameter specifies an external user interface.
  //
  // Locations_GotoLocationInApplicationRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LocationsInstance - The id of the Locations object.
  //    - applicationPath: string - Specifies the absolute path of the user interface application.
  //    - options: int32 - Specifies any combination of GotoLocationOptions. This method does not use the GotoLocationOption_DoNotDisplayMessageIfLocationNotFound option unless the applicationPath parameter specifies the path of the currently executing user interface.
  //
  // Locations_GotoLocationInApplicationResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GotoLocationInApplication(Locations_GotoLocationInApplicationRequest) returns (Locations_GotoLocationInApplicationResponse);
  
  
  // Method: AddIOConfiguraionLocation
  //
  // 
  //
  // Locations_AddIOConfiguraionLocationRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationsInstance - The id of the Locations object.
  //
  // Locations_AddIOConfiguraionLocationResponse - The response message from the server. It provides the return value.
  //    - returnValue: LocationInstance - The return type of the Location object.
  //
  rpc AddIOConfiguraionLocation(Locations_AddIOConfiguraionLocationRequest) returns (Locations_AddIOConfiguraionLocationResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // Locations_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LocationsInstance - The id of the Locations object.
  //    - index: int32 - Specifies the zero-based index of the item to retrieve.
  //
  // Locations_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: LocationInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(Locations_Get_ItemRequest) returns (Locations_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // Locations_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationsInstance - The id of the Locations object.
  //
  // Locations_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(Locations_Get_CountRequest) returns (Locations_Get_CountResponse);
  
  
  // Property: ApplicationSite
  //
  // Specifies where to display a location in a user interface when the user interface can display the location in more than one place.
  //
  // Locations_Set_ApplicationSiteRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationsInstance - The id of the Locations object.
  //    - val: ApplicationSites - Specifies where to display a location in a user interface when the user interface can display the location in more than one place. 
  //
  // Locations_Set_ApplicationSiteResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Locations_Get_ApplicationSiteRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationsInstance - The id of the Locations object.
  //
  // Locations_Get_ApplicationSiteResponse - The response message from the server. It provides the return value.
  //    - returnValue: ApplicationSites - Specifies where to display a location in a user interface when the user interface can display the location in more than one place. 
  //
  rpc Set_ApplicationSite(Locations_Set_ApplicationSiteRequest) returns (Locations_Set_ApplicationSiteResponse);
  rpc Get_ApplicationSite(Locations_Get_ApplicationSiteRequest) returns (Locations_Get_ApplicationSiteResponse);
  
  
  // Property: LocationFound
  //
  // When you handle the UIMsg_GotoLocation user interface message, set this property to True to indicate that the user interface selected the Locations collection. If you do not set this property to True, the Locations.GotoLocation method displays an error to indicate that the user interface could not go to the Locations.
  //
  // Locations_Set_LocationFoundRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationsInstance - The id of the Locations object.
  //    - val: bool - When you handle the UIMsg_GotoLocation user interface message, set this property to True to indicate that the user interface selected the Locations collection. If you do not set this property to True, the Locations.GotoLocation method displays an error to indicate that the user interface could not go to the Locations. 
  //
  // Locations_Set_LocationFoundResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Locations_Get_LocationFoundRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationsInstance - The id of the Locations object.
  //
  // Locations_Get_LocationFoundResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When you handle the UIMsg_GotoLocation user interface message, set this property to True to indicate that the user interface selected the Locations collection. If you do not set this property to True, the Locations.GotoLocation method displays an error to indicate that the user interface could not go to the Locations. 
  //
  rpc Set_LocationFound(Locations_Set_LocationFoundRequest) returns (Locations_Set_LocationFoundResponse);
  rpc Get_LocationFound(Locations_Get_LocationFoundRequest) returns (Locations_Get_LocationFoundResponse);
  
  
  // Property: LocationNotFoundMessage
  //
  // When you handle the UIMsg_GotoLocation user interface message and do not set the Locations.LocationFound property to True, set this property to a message to explain why the user interface could not go to the Locations. The Locations.GotoLocation method includes this message in the error it displays when LocationFound is False.
  //
  // Locations_Set_LocationNotFoundMessageRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationsInstance - The id of the Locations object.
  //    - val: string - When you handle the UIMsg_GotoLocation user interface message and do not set the Locations.LocationFound property to True, set this property to a message to explain why the user interface could not go to the Locations. The Locations.GotoLocation method includes this message in the error it displays when LocationFound is False. 
  //
  // Locations_Set_LocationNotFoundMessageResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Locations_Get_LocationNotFoundMessageRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationsInstance - The id of the Locations object.
  //
  // Locations_Get_LocationNotFoundMessageResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - When you handle the UIMsg_GotoLocation user interface message and do not set the Locations.LocationFound property to True, set this property to a message to explain why the user interface could not go to the Locations. The Locations.GotoLocation method includes this message in the error it displays when LocationFound is False. 
  //
  rpc Set_LocationNotFoundMessage(Locations_Set_LocationNotFoundMessageRequest) returns (Locations_Set_LocationNotFoundMessageResponse);
  rpc Get_LocationNotFoundMessage(Locations_Get_LocationNotFoundMessageRequest) returns (Locations_Get_LocationNotFoundMessageResponse);
  
  
  // Property: CanDisplayDialog
  //
  // This property specifies if calling the Locations.GotoLocation method can display the location in a dialog box. If you handle the UIMsg_GotoLocation user interface message, check the value of this property before displaying a location in a dialog box. The default value of this property is True.
  //
  // If the user interface cannot go to the location, the Locations.GotoLocation method uses the options parameter to determine whether to launch a dialog box to inform the user that the user interface could not go to the location.
  //
  // Locations_Set_CanDisplayDialogRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationsInstance - The id of the Locations object.
  //    - val: bool - This property specifies if calling the Locations.GotoLocation method can display the location in a dialog box. If you handle the UIMsg_GotoLocation user interface message, check the value of this property before displaying a location in a dialog box. The default value of this property is True. 
  //
  // Locations_Set_CanDisplayDialogResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Locations_Get_CanDisplayDialogRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationsInstance - The id of the Locations object.
  //
  // Locations_Get_CanDisplayDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - This property specifies if calling the Locations.GotoLocation method can display the location in a dialog box. If you handle the UIMsg_GotoLocation user interface message, check the value of this property before displaying a location in a dialog box. The default value of this property is True. 
  //
  rpc Set_CanDisplayDialog(Locations_Set_CanDisplayDialogRequest) returns (Locations_Set_CanDisplayDialogResponse);
  rpc Get_CanDisplayDialog(Locations_Get_CanDisplayDialogRequest) returns (Locations_Get_CanDisplayDialogResponse);
  
  
}
message LocationsInstance {
  // Specifies the handle of the Locations instance in the server.
  string id = 1;
}

message LocationInstance {
  // Specifies the handle of the Location instance in the server.
  string id = 1;
}
message Locations_AddFileLocationRequest {
  // The id of the Locations object.
  LocationsInstance instance = 1;
  // Specifies ss the file to initialize the Location.FileDisplayName, Location.FileId, and Location.FilePath properties.
  PropertyObjectFileInstance file = 2;
  // Specifies a subproperty of the file parameter. This method sets the Location.PropertyPath property of the new Location to the lookup string to lookupString from file. This method also sets as many properties of the new Location as this method can obtain from the object you pass. This method specifies the lookupString parameter relative to the root of the PropertyObjectFile object. For example, if the location is underneath the PropertyObjectFile.Data element, the lookup string must use the Data. prefix.
  string lookupString = 3;
  // Specifies the value of the Location.Element property of the new location.
  PropertyObjectElements elem = 4;
  // Specifies the value of the Location.SelStart property of the new location.
  int32 selectionStart = 5;
  // Specifies the value of the Location.SelLength property of the new location.
  int32 selectionLength = 6;
}

message Locations_AddFileLocationResponse {
  // The Location added to the collection.
  LocationInstance returnValue = 1;
}

message Locations_AddFileLocationByObjectRequest {
  // The id of the Locations object.
  LocationsInstance instance = 1;
  // Specifies any PropertyObject, such as step, sequence, variable, or sequence context. This method sets as many properties of the new Location object as this method can obtain from the object you pass.
  PropertyObjectInstance obj = 2;
  // Specifies the value of the Location.Element property of the new location.
  PropertyObjectElements elem = 3;
  // Specifies the value of the Location.SelStart property of the new location.
  int32 selectionStart = 4;
  // Specifies the value of the Location.SelLength property of the new location.
  int32 selectionLength = 5;
}

message Locations_AddFileLocationByObjectResponse {
  // The Location added to the collection.
  LocationInstance returnValue = 1;
}

message Locations_AddExecutionLocationRequest {
  // The id of the Locations object.
  LocationsInstance instance = 1;
  // Specifies the sequence context to initialize the Location.ContextId, Location.ExecutionId, and Location.ThreadId properties.
  SequenceContextInstance seqContext = 2;
  // Specifies the path to a subproperty of the seqContext parameter. This method sets the Location.PropertyPath property of the new Location using the lookup string you pass. This method also sets as many properties of the new Location as this method can obtain from the subproperty this parameter specifies.
  string lookupString = 3;
  // Specifies the value of the Location.Element property of the new location.
  PropertyObjectElements elem = 4;
  // Specifies the value of the Location.SelStart property of the new location.
  int32 selectionStart = 5;
  // Specifies the value of the Location.SelLength property of the new location.
  int32 selectionLength = 6;
}

message Locations_AddExecutionLocationResponse {
  // The Location added to the collection.
  LocationInstance returnValue = 1;
}

message Locations_AddExecutionLocationByObjectRequest {
  // The id of the Locations object.
  LocationsInstance instance = 1;
  // Specifies the sequence context to initialize the Location.ContextId, Location.ExecutionId, and Location.ThreadId properties.
  SequenceContextInstance seqContext = 2;
  // Specifies a subproperty of the seqContext parameter. This method sets the  Location.PropertyPath property of the new Location to the lookup string to obj from seqContext. This method also sets as many properties of the new Location as this method can obtain from the object which you pass.
  PropertyObjectInstance obj = 3;
  // Specifies the value of the Location.Element property of the new location.
  PropertyObjectElements elem = 4;
  // Specifies the value of the Location.SelStart property of the new location.
  int32 selectionStart = 5;
  // Specifies the value of the Location.SelLength property of the new location.
  int32 selectionLength = 6;
}

message Locations_AddExecutionLocationByObjectResponse {
  // The Location added to the collection.
  LocationInstance returnValue = 1;
}

message Locations_AddTypeLocationRequest {
  // The id of the Locations object.
  LocationsInstance instance = 1;
  // Specifies the file in which the type you pass to the rootTypeDef parameter is saved.
  // 
  PropertyObjectFileInstance file = 2;
  // Specifies a type definition. This method sets the Location.TypeName and Location.TypeCategory properties of the new Location from the root type definition this parameter specifies. This method also sets the Location.PropertyPath property of the new Location using the lookupString parameter.
  PropertyObjectInstance rootTypeDef = 3;
  // Specifies the path to a subproperty of the rootTypeDef parameter. This method sets the Location.PropertyPath property of the new Location using the lookup string you pass. This method also sets as many properties of the new Location as this method can obtain from the subproperty this parameter specifies.
  string lookupString = 4;
  // Specifies the value of the Location.Element property of the new location.
  PropertyObjectElements elem = 5;
  // Specifies the value of the Location.SelStart property of the new location.
  int32 selectionStart = 6;
  // Specifies the value of the Location.SelLength property of the new location.
  int32 selectionLength = 7;
}

message Locations_AddTypeLocationResponse {
  // The Location added to the collection.
  LocationInstance returnValue = 1;
}

message Locations_AddTypeLocationByObjectRequest {
  // The id of the Locations object.
  LocationsInstance instance = 1;
  // Specifies the file in which the type you pass to the obj parameter is saved.
  PropertyObjectFileInstance file = 2;
  // Specifies a type definition. This method sets the Location.TypeName and Location.TypeCategory properties of the new Location from the root type definition that contains the type definition you pass. This method sets the Location.PropertyPath property of the new Location to the lookup string to obj from the root type definition of obj.
  PropertyObjectInstance obj = 3;
  // Specifies the value of the Location.Element property of the new location.
  PropertyObjectElements elem = 4;
  // Specifies the value of the Location.SelStart property of the new location.
  int32 selectionStart = 5;
  // Specifies the value of the Location.SelLength property of the new location.
  int32 selectionLength = 6;
}

message Locations_AddTypeLocationByObjectResponse {
  // The Location added to the collection.
  LocationInstance returnValue = 1;
}

message Locations_AddLocationsRequest {
  // The id of the Locations object.
  LocationsInstance instance = 1;
  // Specifies Locations to append to this Locations.
  LocationsInstance locationsToAdd = 2;
  // Specifies whether this method copies locationsToAdd before adding them to the collection.
  CopyLocationsOptions copyLocationOption = 3;
}

message Locations_AddLocationsResponse {
}

message Locations_RemoveRequest {
  // The id of the Locations object.
  LocationsInstance instance = 1;
  // Specifies the zero-based index of the item to remove.
  int32 index = 2;
}

message Locations_RemoveResponse {
}

message Locations_ClearRequest {
  // The id of the Locations object.
  LocationsInstance instance = 1;
}

message Locations_ClearResponse {
}

message Locations_GotoLocationRequest {
  // The id of the Locations object.
  LocationsInstance instance = 1;
  // Specifies any combination of GotoLocationOptions.
  GotoLocationOptions options = 2;
}

message Locations_GotoLocationResponse {
}

message Locations_ToPropertyObjectRequest {
  // The id of the Locations object.
  LocationsInstance instance = 1;
}

message Locations_ToPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message Locations_FromPropertyObjectRequest {
  // The id of the Locations object.
  LocationsInstance instance = 1;
  // Specifies the PropertyObject.
  PropertyObjectInstance val = 2;
}

message Locations_FromPropertyObjectResponse {
}

message Locations_AddAPILocationRequest {
  // The id of the Locations object.
  LocationsInstance instance = 1;
  // Specifies the base object to use with the apiLocation parameter as the location to add.
  PropertyObjectInstance baseObj = 2;
  // Pass the APILocations enumeration to use as the location to add.
  APILocations apiLocation = 3;
  // Specifies the file associated with the base object. Use this parameter only if the baseObj parameter is a type definition. TestStand ignores this parameter if the baseObj parameter is not a type definition.
  PropertyObjectFileInstance objFile = 4;
}

message Locations_AddAPILocationResponse {
  // The return type of the Location object.
  LocationInstance returnValue = 1;
}

message Locations_GotoLocationInApplicationRequest {
  // The id of the Locations object.
  LocationsInstance instance = 1;
  // Specifies the absolute path of the user interface application.
  string applicationPath = 2;
  // Specifies any combination of GotoLocationOptions. This method does not use the GotoLocationOption_DoNotDisplayMessageIfLocationNotFound option unless the applicationPath parameter specifies the path of the currently executing user interface.
  int32 options = 3;
}

message Locations_GotoLocationInApplicationResponse {
}

message Locations_AddIOConfiguraionLocationRequest {
  // The id of the Locations object.
  LocationsInstance instance = 1;
  // 
  string IOConfigurationName = 2;
}

message Locations_AddIOConfiguraionLocationResponse {
  // The return type of the Location object.
  LocationInstance returnValue = 1;
}

message Locations_Get_ItemRequest {
  // The id of the Locations object.
  LocationsInstance instance = 1;
  // Specifies the zero-based index of the item to retrieve.
  int32 index = 2;
}

message Locations_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  LocationInstance returnValue = 1;
}

message Locations_Get_CountRequest {
  // The id of the Locations object.
  LocationsInstance instance = 1;
}

message Locations_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

message Locations_Set_ApplicationSiteRequest {
  // The id of the Locations object.
  LocationsInstance instance = 1;
  // Specifies where to display a location in a user interface when the user interface can display the location in more than one place.
  ApplicationSites val = 2;
}

message Locations_Set_ApplicationSiteResponse {
}

message Locations_Get_ApplicationSiteRequest {
  // The id of the Locations object.
  LocationsInstance instance = 1;
}

message Locations_Get_ApplicationSiteResponse {
  // Specifies where to display a location in a user interface when the user interface can display the location in more than one place.
  ApplicationSites returnValue = 1;
}

message Locations_Set_LocationFoundRequest {
  // The id of the Locations object.
  LocationsInstance instance = 1;
  // When you handle the UIMsg_GotoLocation user interface message, set this property to True to indicate that the user interface selected the Locations collection. If you do not set this property to True, the Locations.GotoLocation method displays an error to indicate that the user interface could not go to the Locations.
  bool val = 2;
}

message Locations_Set_LocationFoundResponse {
}

message Locations_Get_LocationFoundRequest {
  // The id of the Locations object.
  LocationsInstance instance = 1;
}

message Locations_Get_LocationFoundResponse {
  // When you handle the UIMsg_GotoLocation user interface message, set this property to True to indicate that the user interface selected the Locations collection. If you do not set this property to True, the Locations.GotoLocation method displays an error to indicate that the user interface could not go to the Locations.
  bool returnValue = 1;
}

message Locations_Set_LocationNotFoundMessageRequest {
  // The id of the Locations object.
  LocationsInstance instance = 1;
  // When you handle the UIMsg_GotoLocation user interface message and do not set the Locations.LocationFound property to True, set this property to a message to explain why the user interface could not go to the Locations. The Locations.GotoLocation method includes this message in the error it displays when LocationFound is False.
  string val = 2;
}

message Locations_Set_LocationNotFoundMessageResponse {
}

message Locations_Get_LocationNotFoundMessageRequest {
  // The id of the Locations object.
  LocationsInstance instance = 1;
}

message Locations_Get_LocationNotFoundMessageResponse {
  // When you handle the UIMsg_GotoLocation user interface message and do not set the Locations.LocationFound property to True, set this property to a message to explain why the user interface could not go to the Locations. The Locations.GotoLocation method includes this message in the error it displays when LocationFound is False.
  string returnValue = 1;
}

message Locations_Set_CanDisplayDialogRequest {
  // The id of the Locations object.
  LocationsInstance instance = 1;
  // This property specifies if calling the Locations.GotoLocation method can display the location in a dialog box. If you handle the UIMsg_GotoLocation user interface message, check the value of this property before displaying a location in a dialog box. The default value of this property is True.
  bool val = 2;
}

message Locations_Set_CanDisplayDialogResponse {
}

message Locations_Get_CanDisplayDialogRequest {
  // The id of the Locations object.
  LocationsInstance instance = 1;
}

message Locations_Get_CanDisplayDialogResponse {
  // This property specifies if calling the Locations.GotoLocation method can display the location in a dialog box. If you handle the UIMsg_GotoLocation user interface message, check the value of this property before displaying a location in a dialog box. The default value of this property is True.
  bool returnValue = 1;
}

// Location
//
// The properties of a Location object contain enough information for a user interface to find a specific piece of data the user interface displays.
//
service Location {
  // Property: Kind
  //
  // Specifies whether the location is a file, execution, or type location.
  //
  // Location_Set_KindRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //    - val: LocationKinds - Specifies whether the location is a file, execution, or type location. 
  //
  // Location_Set_KindResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Location_Get_KindRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //
  // Location_Get_KindResponse - The response message from the server. It provides the return value.
  //    - returnValue: LocationKinds - Specifies whether the location is a file, execution, or type location. 
  //
  rpc Set_Kind(Location_Set_KindRequest) returns (Location_Set_KindResponse);
  rpc Get_Kind(Location_Get_KindRequest) returns (Location_Get_KindResponse);
  
  
  // Property: FilePath
  //
  // For a file location, this property specifies the absolute path of the file of which the Location.PropertyPath property is a subproperty. For an execution location, this property specifies the absolute path of the sequence file of the executing sequence. For a type location, this property specifies the absolute path of the file in which the type is saved.
  //
  // Location_Set_FilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //    - val: string - For a file location, this property specifies the absolute path of the file of which the Location.PropertyPath property is a subproperty. For an execution location, this property specifies the absolute path of the sequence file of the executing sequence. For a type location, this property specifies the absolute path of the file in which the type is saved. 
  //
  // Location_Set_FilePathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Location_Get_FilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //
  // Location_Get_FilePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - For a file location, this property specifies the absolute path of the file of which the Location.PropertyPath property is a subproperty. For an execution location, this property specifies the absolute path of the sequence file of the executing sequence. For a type location, this property specifies the absolute path of the file in which the type is saved. 
  //
  rpc Set_FilePath(Location_Set_FilePathRequest) returns (Location_Set_FilePathResponse);
  rpc Get_FilePath(Location_Get_FilePathRequest) returns (Location_Get_FilePathResponse);
  
  
  // Property: FileId
  //
  // For a file location, this property specifies the ID of the file of which the Location.PropertyPath property is a subproperty. For an execution location, this property specifies the ID of the sequence file of the executing sequence. For a type location, this property specifies the ID of the file in which the type is saved.
  //
  // Location_Set_FileIdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //    - val: int32 - For a file location, this property specifies the ID of the file of which the Location.PropertyPath property is a subproperty. For an execution location, this property specifies the ID of the sequence file of the executing sequence. For a type location, this property specifies the ID of the file in which the type is saved. 
  //
  // Location_Set_FileIdResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Location_Get_FileIdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //
  // Location_Get_FileIdResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - For a file location, this property specifies the ID of the file of which the Location.PropertyPath property is a subproperty. For an execution location, this property specifies the ID of the sequence file of the executing sequence. For a type location, this property specifies the ID of the file in which the type is saved. 
  //
  rpc Set_FileId(Location_Set_FileIdRequest) returns (Location_Set_FileIdResponse);
  rpc Get_FileId(Location_Get_FileIdRequest) returns (Location_Get_FileIdResponse);
  
  
  // Property: FileDisplayName
  //
  // For a file location, specifies the display name of the file of which the Location.PropertyPath property is a subproperty. For an execution location, specifies the display name of the sequence file of the executing sequence. For a type location, specifies the display name of the file in which you saved the type.
  //
  // Location_Set_FileDisplayNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //    - val: string - For a file location, specifies the display name of the file of which the Location.PropertyPath property is a subproperty. For an execution location, specifies the display name of the sequence file of the executing sequence. For a type location, specifies the display name of the file in which you saved the type. 
  //
  // Location_Set_FileDisplayNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Location_Get_FileDisplayNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //
  // Location_Get_FileDisplayNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - For a file location, specifies the display name of the file of which the Location.PropertyPath property is a subproperty. For an execution location, specifies the display name of the sequence file of the executing sequence. For a type location, specifies the display name of the file in which you saved the type. 
  //
  rpc Set_FileDisplayName(Location_Set_FileDisplayNameRequest) returns (Location_Set_FileDisplayNameResponse);
  rpc Get_FileDisplayName(Location_Get_FileDisplayNameRequest) returns (Location_Get_FileDisplayNameResponse);
  
  
  // Property: PropertyPath
  //
  // Specifies the lookup string for this location.
  //
  // For a file location, this property is relative to the file the Location.FileId and Location.FilePath properties specify. For an execution location, this property is relative to the sequence context the Location.ContextId property specifies. For a type location, this property is relative to the type the Location.TypeName property specifies. For a workspace file location, this property is relative to the WorkspaceObject the WorkspaceFile.RootWorkspaceObject property returns.
  //
  // Location_Set_PropertyPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //    - val: string - Specifies the lookup string for this location. 
  //
  // Location_Set_PropertyPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Location_Get_PropertyPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //
  // Location_Get_PropertyPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the lookup string for this location. 
  //
  rpc Set_PropertyPath(Location_Set_PropertyPathRequest) returns (Location_Set_PropertyPathResponse);
  rpc Get_PropertyPath(Location_Get_PropertyPathRequest) returns (Location_Get_PropertyPathResponse);
  
  
  // Property: PropertyPathWithNames
  //
  // Specifies the lookup string for this location. The lookup string includes names instead of a numeric index for elements of object arrays if the name is not empty.
  //
  // The name of an object element in an array is not guaranteed to be unique within the array. Do not use this property with methods that have a lookup string parameter, such as the PropertyObject.GetPropertyObject method and the PropertyObject.Exists method. Use the Location.PropertyPath property if you want an unambiguous lookup string.
  // For a file location, this property is relative to the file the Location.FileId and the Location.FilePath properties specify. For an execution location, this property is relative to the sequence context the Location.ContextId property specifies. For a type location, this property is relative to the type the Location.TypeName property specifies. For a workspace file location, this property is relative to the WorkspaceObject the WorkspaceFile.RootWorkspaceObject property returns.
  //
  // Location_Set_PropertyPathWithNamesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //    - val: string - Specifies the lookup string for this location. The lookup string includes names instead of a numeric index for elements of object arrays if the name is not empty. 
  //
  // Location_Set_PropertyPathWithNamesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Location_Get_PropertyPathWithNamesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //
  // Location_Get_PropertyPathWithNamesResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the lookup string for this location. The lookup string includes names instead of a numeric index for elements of object arrays if the name is not empty. 
  //
  rpc Set_PropertyPathWithNames(Location_Set_PropertyPathWithNamesRequest) returns (Location_Set_PropertyPathWithNamesResponse);
  rpc Get_PropertyPathWithNames(Location_Get_PropertyPathWithNamesRequest) returns (Location_Get_PropertyPathWithNamesResponse);
  
  
  // Property: SequenceName
  //
  // For a file location, this property specifies the name of the sequence of which the Location.PropertyPath property is a subproperty. This property is empty if the Location.PropertyPath property is not a subproperty of a sequence. For an execution location, this property specifies the name of the executing sequence.
  //
  // Location_Set_SequenceNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //    - val: string - For a file location, this property specifies the name of the sequence of which the Location.PropertyPath property is a subproperty. This property is empty if the Location.PropertyPath property is not a subproperty of a sequence. For an execution location, this property specifies the name of the executing sequence. 
  //
  // Location_Set_SequenceNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Location_Get_SequenceNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //
  // Location_Get_SequenceNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - For a file location, this property specifies the name of the sequence of which the Location.PropertyPath property is a subproperty. This property is empty if the Location.PropertyPath property is not a subproperty of a sequence. For an execution location, this property specifies the name of the executing sequence. 
  //
  rpc Set_SequenceName(Location_Set_SequenceNameRequest) returns (Location_Set_SequenceNameResponse);
  rpc Get_SequenceName(Location_Get_SequenceNameRequest) returns (Location_Get_SequenceNameResponse);
  
  
  // Property: StepGroup
  //
  // For a file location, this property specifies the step group of which the Location.PropertyPath property is a subproperty. The value is -1 if the Location.PropertyPath property is not a subproperty of a step group. For an execution location, this property specifies the step group of the executing step.
  //
  // Location_Set_StepGroupRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //    - val: StepGroups - For a file location, this property specifies the step group of which the Location.PropertyPath property is a subproperty. The value is -1 if the Location.PropertyPath property is not a subproperty of a step group. For an execution location, this property specifies the step group of the executing step. 
  //
  // Location_Set_StepGroupResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Location_Get_StepGroupRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //
  // Location_Get_StepGroupResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepGroups - For a file location, this property specifies the step group of which the Location.PropertyPath property is a subproperty. The value is -1 if the Location.PropertyPath property is not a subproperty of a step group. For an execution location, this property specifies the step group of the executing step. 
  //
  rpc Set_StepGroup(Location_Set_StepGroupRequest) returns (Location_Set_StepGroupResponse);
  rpc Get_StepGroup(Location_Get_StepGroupRequest) returns (Location_Get_StepGroupResponse);
  
  
  // Property: StepName
  //
  // For a file location, this property specifies the name of the step of which the Location.PropertyPath property is a subproperty. This property is empty if the Location.PropertyPath property is not a subproperty of a step. For an execution location, this property specifies the step name of the executing step.
  //
  // Location_Set_StepNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //    - val: string - For a file location, this property specifies the name of the step of which the Location.PropertyPath property is a subproperty. This property is empty if the Location.PropertyPath property is not a subproperty of a step. For an execution location, this property specifies the step name of the executing step. 
  //
  // Location_Set_StepNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Location_Get_StepNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //
  // Location_Get_StepNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - For a file location, this property specifies the name of the step of which the Location.PropertyPath property is a subproperty. This property is empty if the Location.PropertyPath property is not a subproperty of a step. For an execution location, this property specifies the step name of the executing step. 
  //
  rpc Set_StepName(Location_Set_StepNameRequest) returns (Location_Set_StepNameResponse);
  rpc Get_StepName(Location_Get_StepNameRequest) returns (Location_Get_StepNameResponse);
  
  
  // Property: StepId
  //
  // For a file location, this property specifies the unique step ID of the step of which the Location.PropertyPath property is a subproperty. This property is empty if the Location.PropertyPath property is not a subproperty of a step. For an execution location, this property specifies the unique step ID of the executing step.
  //
  // Location_Set_StepIdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //    - val: string - For a file location, this property specifies the unique step ID of the step of which the Location.PropertyPath property is a subproperty. This property is empty if the Location.PropertyPath property is not a subproperty of a step. For an execution location, this property specifies the unique step ID of the executing step. 
  //
  // Location_Set_StepIdResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Location_Get_StepIdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //
  // Location_Get_StepIdResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - For a file location, this property specifies the unique step ID of the step of which the Location.PropertyPath property is a subproperty. This property is empty if the Location.PropertyPath property is not a subproperty of a step. For an execution location, this property specifies the unique step ID of the executing step. 
  //
  rpc Set_StepId(Location_Set_StepIdRequest) returns (Location_Set_StepIdResponse);
  rpc Get_StepId(Location_Get_StepIdRequest) returns (Location_Get_StepIdResponse);
  
  
  // Property: StepIndex
  //
  // For a file location, this property specifies the index of the step of which the Location.PropertyPath property is a subproperty. This property is -1 if the Location.PropertyPath property is not a subproperty of a step. For an execution location, this property specifies the step index of the executing step.
  //
  // Location_Set_StepIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //    - val: int32 - For a file location, this property specifies the index of the step of which the Location.PropertyPath property is a subproperty. This property is -1 if the Location.PropertyPath property is not a subproperty of a step. For an execution location, this property specifies the step index of the executing step. 
  //
  // Location_Set_StepIndexResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Location_Get_StepIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //
  // Location_Get_StepIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - For a file location, this property specifies the index of the step of which the Location.PropertyPath property is a subproperty. This property is -1 if the Location.PropertyPath property is not a subproperty of a step. For an execution location, this property specifies the step index of the executing step. 
  //
  rpc Set_StepIndex(Location_Set_StepIndexRequest) returns (Location_Set_StepIndexResponse);
  rpc Get_StepIndex(Location_Get_StepIndexRequest) returns (Location_Get_StepIndexResponse);
  
  
  // Property: ExecutionId
  //
  // For an execution location, specifies the ID of the execution.
  //
  // Location_Set_ExecutionIdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //    - val: int32 - For an execution location, specifies the ID of the execution. 
  //
  // Location_Set_ExecutionIdResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Location_Get_ExecutionIdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //
  // Location_Get_ExecutionIdResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - For an execution location, specifies the ID of the execution. 
  //
  rpc Set_ExecutionId(Location_Set_ExecutionIdRequest) returns (Location_Set_ExecutionIdResponse);
  rpc Get_ExecutionId(Location_Get_ExecutionIdRequest) returns (Location_Get_ExecutionIdResponse);
  
  
  // Property: ExecutionDisplayName
  //
  // For an execution location, specifies the display name of the execution.
  //
  // Location_Set_ExecutionDisplayNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //    - val: string - For an execution location, specifies the display name of the execution. 
  //
  // Location_Set_ExecutionDisplayNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Location_Get_ExecutionDisplayNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //
  // Location_Get_ExecutionDisplayNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - For an execution location, specifies the display name of the execution. 
  //
  rpc Set_ExecutionDisplayName(Location_Set_ExecutionDisplayNameRequest) returns (Location_Set_ExecutionDisplayNameResponse);
  rpc Get_ExecutionDisplayName(Location_Get_ExecutionDisplayNameRequest) returns (Location_Get_ExecutionDisplayNameResponse);
  
  
  // Property: ThreadId
  //
  // For an execution location, specifies the ID of the executing thread.
  //
  // Location_Set_ThreadIdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //    - val: int32 - For an execution location, specifies the ID of the executing thread. 
  //
  // Location_Set_ThreadIdResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Location_Get_ThreadIdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //
  // Location_Get_ThreadIdResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - For an execution location, specifies the ID of the executing thread. 
  //
  rpc Set_ThreadId(Location_Set_ThreadIdRequest) returns (Location_Set_ThreadIdResponse);
  rpc Get_ThreadId(Location_Get_ThreadIdRequest) returns (Location_Get_ThreadIdResponse);
  
  
  // Property: ContextId
  //
  // For an execution location, this property specifies the ID of the sequence context to which the Location.PropertyPath property is relative. For a file location, this property specifies the ID of the sequence context which has properties that correspond to properties of this location.
  //
  // Location_Set_ContextIdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //    - val: int32 - For an execution location, this property specifies the ID of the sequence context to which the Location.PropertyPath property is relative. For a file location, this property specifies the ID of the sequence context which has properties that correspond to properties of this location. 
  //
  // Location_Set_ContextIdResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Location_Get_ContextIdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //
  // Location_Get_ContextIdResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - For an execution location, this property specifies the ID of the sequence context to which the Location.PropertyPath property is relative. For a file location, this property specifies the ID of the sequence context which has properties that correspond to properties of this location. 
  //
  rpc Set_ContextId(Location_Set_ContextIdRequest) returns (Location_Set_ContextIdResponse);
  rpc Get_ContextId(Location_Get_ContextIdRequest) returns (Location_Get_ContextIdResponse);
  
  
  // Property: TypeName
  //
  // For a type location, this property specifies the name of a root type definition. Location.PropertyPath specifies a subproperty of the root type definition this property specifies.
  //
  // Location_Set_TypeNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //    - val: string - For a type location, this property specifies the name of a root type definition. Location.PropertyPath specifies a subproperty of the root type definition this property specifies. 
  //
  // Location_Set_TypeNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Location_Get_TypeNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //
  // Location_Get_TypeNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - For a type location, this property specifies the name of a root type definition. Location.PropertyPath specifies a subproperty of the root type definition this property specifies. 
  //
  rpc Set_TypeName(Location_Set_TypeNameRequest) returns (Location_Set_TypeNameResponse);
  rpc Get_TypeName(Location_Get_TypeNameRequest) returns (Location_Get_TypeNameResponse);
  
  
  // Property: TypeCategory
  //
  // For a type location, specifies the type category of the root type definition the Location.TypeName property specifies.
  //
  // Location_Set_TypeCategoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //    - val: TypeCategories - For a type location, specifies the type category of the root type definition the Location.TypeName property specifies. 
  //
  // Location_Set_TypeCategoryResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Location_Get_TypeCategoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //
  // Location_Get_TypeCategoryResponse - The response message from the server. It provides the return value.
  //    - returnValue: TypeCategories - For a type location, specifies the type category of the root type definition the Location.TypeName property specifies. 
  //
  rpc Set_TypeCategory(Location_Set_TypeCategoryRequest) returns (Location_Set_TypeCategoryResponse);
  rpc Get_TypeCategory(Location_Get_TypeCategoryRequest) returns (Location_Get_TypeCategoryResponse);
  
  
  // Property: Element
  //
  // Specifies a part of the property object which the Location.PropertyPath property specifies.
  //
  // Location_Set_ElementRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //    - val: PropertyObjectElements - Specifies a part of the property object which the Location.PropertyPath property specifies. 
  //
  // Location_Set_ElementResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Location_Get_ElementRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //
  // Location_Get_ElementResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectElements - Specifies a part of the property object which the Location.PropertyPath property specifies. 
  //
  rpc Set_Element(Location_Set_ElementRequest) returns (Location_Set_ElementResponse);
  rpc Get_Element(Location_Get_ElementRequest) returns (Location_Get_ElementResponse);
  
  
  // Property: SelStart
  //
  // Specifies the zero-based starting index of the selection of the text that the Location.Element property refers to.
  //
  // A user interface only uses this property if Element specifies a value, name, comment, or numeric format.
  //
  // Location_Set_SelStartRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //    - val: int32 - Specifies the zero-based starting index of the selection of the text that the Location.Element property refers to. 
  //
  // Location_Set_SelStartResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Location_Get_SelStartRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //
  // Location_Get_SelStartResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the zero-based starting index of the selection of the text that the Location.Element property refers to. 
  //
  rpc Set_SelStart(Location_Set_SelStartRequest) returns (Location_Set_SelStartResponse);
  rpc Get_SelStart(Location_Get_SelStartRequest) returns (Location_Get_SelStartResponse);
  
  
  // Property: SelLength
  //
  // Specifies the number of selected characters of the text that the Location.Element property refers to.
  //
  // A user interface only uses this property if Element specifies a value, name, comment, or numeric format.
  //
  // Location_Set_SelLengthRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //    - val: int32 - Specifies the number of selected characters of the text that the Location.Element property refers to. 
  //
  // Location_Set_SelLengthResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Location_Get_SelLengthRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //
  // Location_Get_SelLengthResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the number of selected characters of the text that the Location.Element property refers to. 
  //
  rpc Set_SelLength(Location_Set_SelLengthRequest) returns (Location_Set_SelLengthResponse);
  rpc Get_SelLength(Location_Get_SelLengthRequest) returns (Location_Get_SelLengthResponse);
  
  
  // Property: ThreadDisplayName
  //
  // For an execution location, specifies the display name of the thread.
  //
  // Location_Set_ThreadDisplayNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //    - val: string - For an execution location, specifies the display name of the thread. 
  //
  // Location_Set_ThreadDisplayNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Location_Get_ThreadDisplayNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //
  // Location_Get_ThreadDisplayNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - For an execution location, specifies the display name of the thread. 
  //
  rpc Set_ThreadDisplayName(Location_Set_ThreadDisplayNameRequest) returns (Location_Set_ThreadDisplayNameResponse);
  rpc Get_ThreadDisplayName(Location_Get_ThreadDisplayNameRequest) returns (Location_Get_ThreadDisplayNameResponse);
  
  
  // Property: BaseAttributesPath
  //
  // Specifies the portion of Location.PropertyPath before any top-level attribute or top-level type attribute.
  //
  // If the Location.PropertyPath property does not specify an attribute location, this property has the same value as the Location.PropertyPath property.
  //
  // Location_Set_BaseAttributesPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //    - val: string - Specifies the portion of Location.PropertyPath before any top-level attribute or top-level type attribute. 
  //
  // Location_Set_BaseAttributesPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Location_Get_BaseAttributesPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //
  // Location_Get_BaseAttributesPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the portion of Location.PropertyPath before any top-level attribute or top-level type attribute. 
  //
  rpc Set_BaseAttributesPath(Location_Set_BaseAttributesPathRequest) returns (Location_Set_BaseAttributesPathResponse);
  rpc Get_BaseAttributesPath(Location_Get_BaseAttributesPathRequest) returns (Location_Get_BaseAttributesPathResponse);
  
  
  // Property: AttributesPath
  //
  // Specifies the portion of the Location.PropertyPath property value that starts with the top-level attribute or top-level type attribute.
  //
  // If the Location.PropertyPath property does not specify an attribute location, this property is an empty string. If the Location.PropertyPath property specifies an attribute location, this property always starts with Attributes or TypeAttributes.
  //
  // Location_Set_AttributesPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //    - val: string - Specifies the portion of the Location.PropertyPath property value that starts with the top-level attribute or top-level type attribute. 
  //
  // Location_Set_AttributesPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Location_Get_AttributesPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //
  // Location_Get_AttributesPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the portion of the Location.PropertyPath property value that starts with the top-level attribute or top-level type attribute. 
  //
  rpc Set_AttributesPath(Location_Set_AttributesPathRequest) returns (Location_Set_AttributesPathResponse);
  rpc Get_AttributesPath(Location_Get_AttributesPathRequest) returns (Location_Get_AttributesPathResponse);
  
  
  // Property: IOConfigurationName
  //
  // 
  //
  // Location_Set_IOConfigurationNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //    - val: string -  
  //
  // Location_Set_IOConfigurationNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Location_Get_IOConfigurationNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LocationInstance - The id of the Location object.
  //
  // Location_Get_IOConfigurationNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string -  
  //
  rpc Set_IOConfigurationName(Location_Set_IOConfigurationNameRequest) returns (Location_Set_IOConfigurationNameResponse);
  rpc Get_IOConfigurationName(Location_Get_IOConfigurationNameRequest) returns (Location_Get_IOConfigurationNameResponse);
  
  
}
message Location_Set_KindRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
  // Specifies whether the location is a file, execution, or type location.
  LocationKinds val = 2;
}

message Location_Set_KindResponse {
}

message Location_Get_KindRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
}

message Location_Get_KindResponse {
  // Specifies whether the location is a file, execution, or type location.
  LocationKinds returnValue = 1;
}

message Location_Set_FilePathRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
  // For a file location, this property specifies the absolute path of the file of which the Location.PropertyPath property is a subproperty. For an execution location, this property specifies the absolute path of the sequence file of the executing sequence. For a type location, this property specifies the absolute path of the file in which the type is saved.
  string val = 2;
}

message Location_Set_FilePathResponse {
}

message Location_Get_FilePathRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
}

message Location_Get_FilePathResponse {
  // For a file location, this property specifies the absolute path of the file of which the Location.PropertyPath property is a subproperty. For an execution location, this property specifies the absolute path of the sequence file of the executing sequence. For a type location, this property specifies the absolute path of the file in which the type is saved.
  string returnValue = 1;
}

message Location_Set_FileIdRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
  // For a file location, this property specifies the ID of the file of which the Location.PropertyPath property is a subproperty. For an execution location, this property specifies the ID of the sequence file of the executing sequence. For a type location, this property specifies the ID of the file in which the type is saved.
  int32 val = 2;
}

message Location_Set_FileIdResponse {
}

message Location_Get_FileIdRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
}

message Location_Get_FileIdResponse {
  // For a file location, this property specifies the ID of the file of which the Location.PropertyPath property is a subproperty. For an execution location, this property specifies the ID of the sequence file of the executing sequence. For a type location, this property specifies the ID of the file in which the type is saved.
  int32 returnValue = 1;
}

message Location_Set_FileDisplayNameRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
  // For a file location, specifies the display name of the file of which the Location.PropertyPath property is a subproperty. For an execution location, specifies the display name of the sequence file of the executing sequence. For a type location, specifies the display name of the file in which you saved the type.
  string val = 2;
}

message Location_Set_FileDisplayNameResponse {
}

message Location_Get_FileDisplayNameRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
}

message Location_Get_FileDisplayNameResponse {
  // For a file location, specifies the display name of the file of which the Location.PropertyPath property is a subproperty. For an execution location, specifies the display name of the sequence file of the executing sequence. For a type location, specifies the display name of the file in which you saved the type.
  string returnValue = 1;
}

message Location_Set_PropertyPathRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
  // Specifies the lookup string for this location.
  string val = 2;
}

message Location_Set_PropertyPathResponse {
}

message Location_Get_PropertyPathRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
}

message Location_Get_PropertyPathResponse {
  // Specifies the lookup string for this location.
  string returnValue = 1;
}

message Location_Set_PropertyPathWithNamesRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
  // Specifies the lookup string for this location. The lookup string includes names instead of a numeric index for elements of object arrays if the name is not empty.
  string val = 2;
}

message Location_Set_PropertyPathWithNamesResponse {
}

message Location_Get_PropertyPathWithNamesRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
}

message Location_Get_PropertyPathWithNamesResponse {
  // Specifies the lookup string for this location. The lookup string includes names instead of a numeric index for elements of object arrays if the name is not empty.
  string returnValue = 1;
}

message Location_Set_SequenceNameRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
  // For a file location, this property specifies the name of the sequence of which the Location.PropertyPath property is a subproperty. This property is empty if the Location.PropertyPath property is not a subproperty of a sequence. For an execution location, this property specifies the name of the executing sequence.
  string val = 2;
}

message Location_Set_SequenceNameResponse {
}

message Location_Get_SequenceNameRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
}

message Location_Get_SequenceNameResponse {
  // For a file location, this property specifies the name of the sequence of which the Location.PropertyPath property is a subproperty. This property is empty if the Location.PropertyPath property is not a subproperty of a sequence. For an execution location, this property specifies the name of the executing sequence.
  string returnValue = 1;
}

message Location_Set_StepGroupRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
  // For a file location, this property specifies the step group of which the Location.PropertyPath property is a subproperty. The value is -1 if the Location.PropertyPath property is not a subproperty of a step group. For an execution location, this property specifies the step group of the executing step.
  StepGroups val = 2;
}

message Location_Set_StepGroupResponse {
}

message Location_Get_StepGroupRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
}

message Location_Get_StepGroupResponse {
  // For a file location, this property specifies the step group of which the Location.PropertyPath property is a subproperty. The value is -1 if the Location.PropertyPath property is not a subproperty of a step group. For an execution location, this property specifies the step group of the executing step.
  StepGroups returnValue = 1;
}

message Location_Set_StepNameRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
  // For a file location, this property specifies the name of the step of which the Location.PropertyPath property is a subproperty. This property is empty if the Location.PropertyPath property is not a subproperty of a step. For an execution location, this property specifies the step name of the executing step.
  string val = 2;
}

message Location_Set_StepNameResponse {
}

message Location_Get_StepNameRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
}

message Location_Get_StepNameResponse {
  // For a file location, this property specifies the name of the step of which the Location.PropertyPath property is a subproperty. This property is empty if the Location.PropertyPath property is not a subproperty of a step. For an execution location, this property specifies the step name of the executing step.
  string returnValue = 1;
}

message Location_Set_StepIdRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
  // For a file location, this property specifies the unique step ID of the step of which the Location.PropertyPath property is a subproperty. This property is empty if the Location.PropertyPath property is not a subproperty of a step. For an execution location, this property specifies the unique step ID of the executing step.
  string val = 2;
}

message Location_Set_StepIdResponse {
}

message Location_Get_StepIdRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
}

message Location_Get_StepIdResponse {
  // For a file location, this property specifies the unique step ID of the step of which the Location.PropertyPath property is a subproperty. This property is empty if the Location.PropertyPath property is not a subproperty of a step. For an execution location, this property specifies the unique step ID of the executing step.
  string returnValue = 1;
}

message Location_Set_StepIndexRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
  // For a file location, this property specifies the index of the step of which the Location.PropertyPath property is a subproperty. This property is -1 if the Location.PropertyPath property is not a subproperty of a step. For an execution location, this property specifies the step index of the executing step.
  int32 val = 2;
}

message Location_Set_StepIndexResponse {
}

message Location_Get_StepIndexRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
}

message Location_Get_StepIndexResponse {
  // For a file location, this property specifies the index of the step of which the Location.PropertyPath property is a subproperty. This property is -1 if the Location.PropertyPath property is not a subproperty of a step. For an execution location, this property specifies the step index of the executing step.
  int32 returnValue = 1;
}

message Location_Set_ExecutionIdRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
  // For an execution location, specifies the ID of the execution.
  int32 val = 2;
}

message Location_Set_ExecutionIdResponse {
}

message Location_Get_ExecutionIdRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
}

message Location_Get_ExecutionIdResponse {
  // For an execution location, specifies the ID of the execution.
  int32 returnValue = 1;
}

message Location_Set_ExecutionDisplayNameRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
  // For an execution location, specifies the display name of the execution.
  string val = 2;
}

message Location_Set_ExecutionDisplayNameResponse {
}

message Location_Get_ExecutionDisplayNameRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
}

message Location_Get_ExecutionDisplayNameResponse {
  // For an execution location, specifies the display name of the execution.
  string returnValue = 1;
}

message Location_Set_ThreadIdRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
  // For an execution location, specifies the ID of the executing thread.
  int32 val = 2;
}

message Location_Set_ThreadIdResponse {
}

message Location_Get_ThreadIdRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
}

message Location_Get_ThreadIdResponse {
  // For an execution location, specifies the ID of the executing thread.
  int32 returnValue = 1;
}

message Location_Set_ContextIdRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
  // For an execution location, this property specifies the ID of the sequence context to which the Location.PropertyPath property is relative. For a file location, this property specifies the ID of the sequence context which has properties that correspond to properties of this location.
  int32 val = 2;
}

message Location_Set_ContextIdResponse {
}

message Location_Get_ContextIdRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
}

message Location_Get_ContextIdResponse {
  // For an execution location, this property specifies the ID of the sequence context to which the Location.PropertyPath property is relative. For a file location, this property specifies the ID of the sequence context which has properties that correspond to properties of this location.
  int32 returnValue = 1;
}

message Location_Set_TypeNameRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
  // For a type location, this property specifies the name of a root type definition. Location.PropertyPath specifies a subproperty of the root type definition this property specifies.
  string val = 2;
}

message Location_Set_TypeNameResponse {
}

message Location_Get_TypeNameRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
}

message Location_Get_TypeNameResponse {
  // For a type location, this property specifies the name of a root type definition. Location.PropertyPath specifies a subproperty of the root type definition this property specifies.
  string returnValue = 1;
}

message Location_Set_TypeCategoryRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
  // For a type location, specifies the type category of the root type definition the Location.TypeName property specifies.
  TypeCategories val = 2;
}

message Location_Set_TypeCategoryResponse {
}

message Location_Get_TypeCategoryRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
}

message Location_Get_TypeCategoryResponse {
  // For a type location, specifies the type category of the root type definition the Location.TypeName property specifies.
  TypeCategories returnValue = 1;
}

message Location_Set_ElementRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
  // Specifies a part of the property object which the Location.PropertyPath property specifies.
  PropertyObjectElements val = 2;
}

message Location_Set_ElementResponse {
}

message Location_Get_ElementRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
}

message Location_Get_ElementResponse {
  // Specifies a part of the property object which the Location.PropertyPath property specifies.
  PropertyObjectElements returnValue = 1;
}

message Location_Set_SelStartRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
  // Specifies the zero-based starting index of the selection of the text that the Location.Element property refers to.
  int32 val = 2;
}

message Location_Set_SelStartResponse {
}

message Location_Get_SelStartRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
}

message Location_Get_SelStartResponse {
  // Specifies the zero-based starting index of the selection of the text that the Location.Element property refers to.
  int32 returnValue = 1;
}

message Location_Set_SelLengthRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
  // Specifies the number of selected characters of the text that the Location.Element property refers to.
  int32 val = 2;
}

message Location_Set_SelLengthResponse {
}

message Location_Get_SelLengthRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
}

message Location_Get_SelLengthResponse {
  // Specifies the number of selected characters of the text that the Location.Element property refers to.
  int32 returnValue = 1;
}

message Location_Set_ThreadDisplayNameRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
  // For an execution location, specifies the display name of the thread.
  string val = 2;
}

message Location_Set_ThreadDisplayNameResponse {
}

message Location_Get_ThreadDisplayNameRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
}

message Location_Get_ThreadDisplayNameResponse {
  // For an execution location, specifies the display name of the thread.
  string returnValue = 1;
}

message Location_Set_BaseAttributesPathRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
  // Specifies the portion of Location.PropertyPath before any top-level attribute or top-level type attribute.
  string val = 2;
}

message Location_Set_BaseAttributesPathResponse {
}

message Location_Get_BaseAttributesPathRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
}

message Location_Get_BaseAttributesPathResponse {
  // Specifies the portion of Location.PropertyPath before any top-level attribute or top-level type attribute.
  string returnValue = 1;
}

message Location_Set_AttributesPathRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
  // Specifies the portion of the Location.PropertyPath property value that starts with the top-level attribute or top-level type attribute.
  string val = 2;
}

message Location_Set_AttributesPathResponse {
}

message Location_Get_AttributesPathRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
}

message Location_Get_AttributesPathResponse {
  // Specifies the portion of the Location.PropertyPath property value that starts with the top-level attribute or top-level type attribute.
  string returnValue = 1;
}

message Location_Set_IOConfigurationNameRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
  // 
  string val = 2;
}

message Location_Set_IOConfigurationNameResponse {
}

message Location_Get_IOConfigurationNameRequest {
  // The id of the Location object.
  LocationInstance instance = 1;
}

message Location_Get_IOConfigurationNameResponse {
  // 
  string returnValue = 1;
}

// UndoItemCreator
//
// Use UndoItemCreator to make edits to TestStand files undoable. To use UndoItemCreator, first create an UndoItemCreator object using the Engine.NewUndoItemCreator method. Then call the BeginEdit method, make an edit to a TestStand object, and call the EndEdit method. You can call BeginEdit and EndEdit more than once to edit more than one TestStand object. Then call the CreateAndPostUndoItem method to create an undo item for all the edits you made.
//
service UndoItemCreator {
  // Method: BeginEdit
  //
  // Note: This method is obsolete. Use the UndoItemCreator.BeginEditEx method instead.
  //
  // Call this method before you modify a TestStand object.
  //
  // UndoItemCreator_BeginEditRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: UndoItemCreatorInstance - The id of the UndoItemCreator object.
  //    - obj: PropertyObjectInstance - Specifies the object you are about to edit. The object you pass depends on which EditKinds you passed to the Engine.NewUndoItemCreator method. For each of the following EditKinds, pass the specified object.
  //      
  //      * EditKind_ChangeNumericFormat–Pass the property object with the numeric format you are changing to this method.    * EditKind_ChangeObject–Pass the object you are modifying to this method. For this EditKind, an UndoItemCreator creates an undo item that restores all subproperties of the property object you pass in.    * EditKind_ChangeRunMode–Pass the step you are changing the run mode of to this method. Call Step.SetRunModeEx to change the run mode of a step.    * EditKind_ChangeSequenceFileProperties–Pass the sequence file you are modifying through the Sequence File Properties Dialog Box to this method.    * EditKind_ChangeSequenceProperties–Pass the sequence you are modifying through the Sequence Properties Dialog Box to this method.    * EditKind_ChangeStep–Pass the step with the properties you are changing to this method. For example, you could pass a step you are modifying through the Step Properties Dialog Box to this method.    * EditKind_ChangeValue–Pass the property object with the value you are changing to this method. Call a PropertyObject.SetVal method to change the value of a property object.    * EditKind_DeleteProperty–Pass the property object you are deleting to this method. Call the  PropertyObject.DeleteSubProperty method to delete a property object.    * EditKind_DeleteSequence–Pass the sequence you are deleting to this method. Call the  SequenceFile.DeleteSequence or SequenceFile.RemoveSequence method to delete a sequence.    * EditKind_DeleteStep–Pass the step you are deleting to this method. Call the Sequence.DeleteStep method to delete a step.    * EditKind_InsertProperty–Pass the property object you are inserting to this method. Call the PropertyObject.InsertSubProperty method to insert a property object.    * EditKind_InsertSequence–Pass the sequence you are inserting to this method. Call the SequenceFile.InsertSequenceEx method to insert a sequence.    * EditKind_InsertStep–Pass the step you are inserting to this method. Call the Sequence.InsertStep method to insert a step.    * EditKind_InsertType–Pass the type you are inserting to this method. Call the TypeUsageList.InsertType method to insert a type.    * EditKind_ModifyComment–Pass the property object with the comment you are changing to this method.    * EditKind_ModifyFlags–Pass the property object with the flags you are changing to this method.    * EditKind_MoveProperty–Pass the property object you are moving to this method. Call the PropertyObject.DeleteSubProperty method and then the PropertyObject.InsertSubProperty method to move a property object.    * EditKind_MoveSequence–Pass the sequence you are moving to this method. Call the SequenceFile.DeleteSequence or SequenceFile.RemoveSequence method and then the SequenceFile.InsertSequenceEx method to move a sequence.    * EditKind_MoveStep–Pass the step you are moving to this method. Call the Sequence.DeleteStep method and then the Sequence.InsertStep method to move a step.    * EditKind_Rename–Pass the property object you are renaming to this method.    * EditKind_ReplaceProperty–Pass the property object you are replacing to this method. Call the PropertyObject.SetPropertyObject method to replace a property object.
  //
  // UndoItemCreator_BeginEditResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc BeginEdit(UndoItemCreator_BeginEditRequest) returns (UndoItemCreator_BeginEditResponse);
  
  
  // Method: EndEdit
  //
  // Call this method after you modify a TestStand object.
  //
  // UndoItemCreator_EndEditRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UndoItemCreatorInstance - The id of the UndoItemCreator object.
  //
  // UndoItemCreator_EndEditResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc EndEdit(UndoItemCreator_EndEditRequest) returns (UndoItemCreator_EndEditResponse);
  
  
  // Method: BeginBatchEdit
  //
  // Call this method before you modify a batch of TestStand objects.
  //
  // Instead of calling this method and the UndoItemCreator.EndBatchEdit method, you could call the UndoItemCreator.BeginEditEx and UndoItemCreator.EndEdit methods once for every object you pass to this method. However, it is somewhat more efficient to insert, delete, and move steps using the UndoItemCreator.BeginBatchEdit and UndoItemCreator.EndBatchEdit methods.
  //
  // UndoItemCreator_BeginBatchEditRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: UndoItemCreatorInstance - The id of the UndoItemCreator object.
  //    - objs: repeated PropertyObjectInstance - Specifies the objects you are about to modify. The objects you pass depend on which EditKinds you passed to the  Engine.NewUndoItemCreator method. Because you pass the same object to this method as you would pass to the UndoItemCreator.BeginEdit method, see the UndoItemCreator.BeginEdit method for more information about which objects to pass to this method.
  //
  // UndoItemCreator_BeginBatchEditResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc BeginBatchEdit(UndoItemCreator_BeginBatchEditRequest) returns (UndoItemCreator_BeginBatchEditResponse);
  
  
  // Method: EndBatchEdit
  //
  // Call this method after you modify a batch of TestStand objects.
  //
  // UndoItemCreator_EndBatchEditRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UndoItemCreatorInstance - The id of the UndoItemCreator object.
  //
  // UndoItemCreator_EndBatchEditResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc EndBatchEdit(UndoItemCreator_EndBatchEditRequest) returns (UndoItemCreator_EndBatchEditResponse);
  
  
  // Method: BeginEditEx
  //
  // Call this method before you modify a TestStand object.
  //
  // The object you specify with the obj and lookupString parameters depends on which EditKinds enumeration value you passed to the Engine.NewUndoItemCreator method. For each of the following EditKinds enumeration values, pass the specified object.
  // * EditKind_ChangeNumericFormat–Pass the property object with the numeric format you are changing to this method.    * EditKind_ChangeObject–Pass the object you are modifying to this method. For this EditKind, an UndoItemCreator creates an undo item that restores all subproperties of the property object you pass in.    * EditKind_ChangeRunMode–Pass the step you are changing the run mode of to this method. Call Step.SetRunModeEx to change the run mode of a step.    * EditKind_ChangeSequenceFileProperties–Pass the sequence file you are modifying through the Sequence File Properties Dialog Box to this method.    * EditKind_ChangeSequenceProperties–Pass the sequence you are modifying through the Sequence Properties Dialog Box to this method.    * EditKind_ChangeStep–Pass the step with the properties you are changing to this method. For example, you could pass a step you are modifying through the Step Properties Dialog Box to this method.    * EditKind_ChangeValue–Pass the property object with the value you are changing to this method. Call a PropertyObject.SetVal method to change the value of a property object.    * EditKind_DeleteProperty–Pass the property object you are deleting to this method. Call the  PropertyObject.DeleteSubProperty method to delete a property object.    * EditKind_DeleteSequence–Pass the sequence you are deleting to this method. Call the  SequenceFile.DeleteSequence or SequenceFile.RemoveSequence method to delete a sequence.    * EditKind_DeleteStep–Pass the step you are deleting to this method. Call the Sequence.DeleteStep method to delete a step.    * EditKind_InsertProperty–Pass the property object you are inserting to this method. Call the PropertyObject.InsertSubProperty method to insert a property object.    * EditKind_InsertSequence–Pass the sequence you are inserting to this method. Call the SequenceFile.InsertSequenceEx method to insert a sequence.    * EditKind_InsertStep–Pass the step you are inserting to this method. Call the Sequence.InsertStep method to insert a step.    * EditKind_InsertType–Pass the type you are inserting to this method. Call the TypeUsageList.InsertType method to insert a type.    * EditKind_ModifyComment–Pass the property object with the comment you are changing to this method.    * EditKind_ModifyFlags–Pass the property object with the flags you are changing to this method.    * EditKind_MoveProperty–Pass the property object you are moving to this method. Call the PropertyObject.DeleteSubProperty method and then the PropertyObject.InsertSubProperty method to move a property object.    * EditKind_MoveSequence–Pass the sequence you are moving to this method. Call the SequenceFile.DeleteSequence or SequenceFile.RemoveSequence method and then the SequenceFile.InsertSequenceEx method to move a sequence.    * EditKind_MoveStep–Pass the step you are moving to this method. Call the Sequence.DeleteStep method and then the Sequence.InsertStep method to move a step.    * EditKind_Rename–Pass the property object you are renaming to this method.    * EditKind_ReplaceProperty–Pass the property object you are replacing to this method. Call the PropertyObject.SetPropertyObject method to replace a property object.
  //
  // UndoItemCreator_BeginEditExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: UndoItemCreatorInstance - The id of the UndoItemCreator object.
  //    - obj: PropertyObjectInstance - Specifies an object that contains the location the lookupString parameter specifies. If you are modifying an element of an array object, pass the array object or an object that contains the array object. 
  //    - lookupString: string - Pass an empty string to denote the obj parameter, or pass the name of a subproperty within obj for the object you are modifying or the array index if obj is an array object. Array index strings are a list of numbers, enclosed in brackets, that index each dimension of the array. For example, [0][1] is an array index for a two-dimensional array.
  //
  // UndoItemCreator_BeginEditExResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc BeginEditEx(UndoItemCreator_BeginEditExRequest) returns (UndoItemCreator_BeginEditExResponse);
  
  

  // Property: HaveEditsBeenMade
  //
  // This property is True if you modify a TestStand object between calls to the UndoItemCreator.BeginEdit method and UndoItemCreator.EndEdit method or between calls to the UndoItemCreator.BeginBatchEdit method and UndoItemCreator.EndBatchEdit method. If this property is False, do not increment the change count of the edited file or call the UndoItemCreator.CreateAndPostUndoItem method.
  //
  // UndoItemCreator_Get_HaveEditsBeenMadeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UndoItemCreatorInstance - The id of the UndoItemCreator object.
  //
  // UndoItemCreator_Get_HaveEditsBeenMadeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - This property is True if you modify a TestStand object between calls to the UndoItemCreator.BeginEdit method and UndoItemCreator.EndEdit method or between calls to the UndoItemCreator.BeginBatchEdit method and UndoItemCreator.EndBatchEdit method. If this property is False, do not increment the change count of the edited file or call the UndoItemCreator.CreateAndPostUndoItem method. 
  //
  rpc Get_HaveEditsBeenMade(UndoItemCreator_Get_HaveEditsBeenMadeRequest) returns (UndoItemCreator_Get_HaveEditsBeenMadeResponse);
  
  
}
message UndoItemCreatorInstance {
  // Specifies the handle of the UndoItemCreator instance in the server.
  string id = 1;
}
message UndoItemCreator_BeginEditRequest {
  // The id of the UndoItemCreator object.
  UndoItemCreatorInstance instance = 1;
  // Specifies the object you are about to edit. The object you pass depends on which EditKinds you passed to the Engine.NewUndoItemCreator method. For each of the following EditKinds, pass the specified object.
  // 
  // * EditKind_ChangeNumericFormat–Pass the property object with the numeric format you are changing to this method.    * EditKind_ChangeObject–Pass the object you are modifying to this method. For this EditKind, an UndoItemCreator creates an undo item that restores all subproperties of the property object you pass in.    * EditKind_ChangeRunMode–Pass the step you are changing the run mode of to this method. Call Step.SetRunModeEx to change the run mode of a step.    * EditKind_ChangeSequenceFileProperties–Pass the sequence file you are modifying through the Sequence File Properties Dialog Box to this method.    * EditKind_ChangeSequenceProperties–Pass the sequence you are modifying through the Sequence Properties Dialog Box to this method.    * EditKind_ChangeStep–Pass the step with the properties you are changing to this method. For example, you could pass a step you are modifying through the Step Properties Dialog Box to this method.    * EditKind_ChangeValue–Pass the property object with the value you are changing to this method. Call a PropertyObject.SetVal method to change the value of a property object.    * EditKind_DeleteProperty–Pass the property object you are deleting to this method. Call the  PropertyObject.DeleteSubProperty method to delete a property object.    * EditKind_DeleteSequence–Pass the sequence you are deleting to this method. Call the  SequenceFile.DeleteSequence or SequenceFile.RemoveSequence method to delete a sequence.    * EditKind_DeleteStep–Pass the step you are deleting to this method. Call the Sequence.DeleteStep method to delete a step.    * EditKind_InsertProperty–Pass the property object you are inserting to this method. Call the PropertyObject.InsertSubProperty method to insert a property object.    * EditKind_InsertSequence–Pass the sequence you are inserting to this method. Call the SequenceFile.InsertSequenceEx method to insert a sequence.    * EditKind_InsertStep–Pass the step you are inserting to this method. Call the Sequence.InsertStep method to insert a step.    * EditKind_InsertType–Pass the type you are inserting to this method. Call the TypeUsageList.InsertType method to insert a type.    * EditKind_ModifyComment–Pass the property object with the comment you are changing to this method.    * EditKind_ModifyFlags–Pass the property object with the flags you are changing to this method.    * EditKind_MoveProperty–Pass the property object you are moving to this method. Call the PropertyObject.DeleteSubProperty method and then the PropertyObject.InsertSubProperty method to move a property object.    * EditKind_MoveSequence–Pass the sequence you are moving to this method. Call the SequenceFile.DeleteSequence or SequenceFile.RemoveSequence method and then the SequenceFile.InsertSequenceEx method to move a sequence.    * EditKind_MoveStep–Pass the step you are moving to this method. Call the Sequence.DeleteStep method and then the Sequence.InsertStep method to move a step.    * EditKind_Rename–Pass the property object you are renaming to this method.    * EditKind_ReplaceProperty–Pass the property object you are replacing to this method. Call the PropertyObject.SetPropertyObject method to replace a property object.
  PropertyObjectInstance obj = 2;
}

message UndoItemCreator_BeginEditResponse {
}

message UndoItemCreator_EndEditRequest {
  // The id of the UndoItemCreator object.
  UndoItemCreatorInstance instance = 1;
}

message UndoItemCreator_EndEditResponse {
}

message UndoItemCreator_BeginBatchEditRequest {
  // The id of the UndoItemCreator object.
  UndoItemCreatorInstance instance = 1;
  // Specifies the objects you are about to modify. The objects you pass depend on which EditKinds you passed to the  Engine.NewUndoItemCreator method. Because you pass the same object to this method as you would pass to the UndoItemCreator.BeginEdit method, see the UndoItemCreator.BeginEdit method for more information about which objects to pass to this method.
  repeated PropertyObjectInstance objs = 2;
}

message UndoItemCreator_BeginBatchEditResponse {
}

message UndoItemCreator_EndBatchEditRequest {
  // The id of the UndoItemCreator object.
  UndoItemCreatorInstance instance = 1;
}

message UndoItemCreator_EndBatchEditResponse {
}

message UndoItemCreator_BeginEditExRequest {
  // The id of the UndoItemCreator object.
  UndoItemCreatorInstance instance = 1;
  // Specifies an object that contains the location the lookupString parameter specifies. If you are modifying an element of an array object, pass the array object or an object that contains the array object.
  PropertyObjectInstance obj = 2;
  // Pass an empty string to denote the obj parameter, or pass the name of a subproperty within obj for the object you are modifying or the array index if obj is an array object. Array index strings are a list of numbers, enclosed in brackets, that index each dimension of the array. For example, [0][1] is an array index for a two-dimensional array.
  string lookupString = 3;
}

message UndoItemCreator_BeginEditExResponse {
}

message UndoItemCreator_Get_HaveEditsBeenMadeRequest {
  // The id of the UndoItemCreator object.
  UndoItemCreatorInstance instance = 1;
}

message UndoItemCreator_Get_HaveEditsBeenMadeResponse {
  // This property is True if you modify a TestStand object between calls to the UndoItemCreator.BeginEdit method and UndoItemCreator.EndEdit method or between calls to the UndoItemCreator.BeginBatchEdit method and UndoItemCreator.EndBatchEdit method. If this property is False, do not increment the change count of the edited file or call the UndoItemCreator.CreateAndPostUndoItem method.
  bool returnValue = 1;
}

// IUndoItem
//
service IUndoItem {
  // Method: Undo
  //
  rpc Undo(IUndoItem_UndoRequest) returns (IUndoItem_UndoResponse);
  
  
  // Method: Redo
  //
  rpc Redo(IUndoItem_RedoRequest) returns (IUndoItem_RedoResponse);
  
  

  // Property: EditedFile
  //
  rpc Get_EditedFile(IUndoItem_Get_EditedFileRequest) returns (IUndoItem_Get_EditedFileResponse);
  
  
  // Property: EditedObjects
  //
  rpc Get_EditedObjects(IUndoItem_Get_EditedObjectsRequest) returns (IUndoItem_Get_EditedObjectsResponse);
  
  
  // Property: UndoDescription
  //
  rpc Get_UndoDescription(IUndoItem_Get_UndoDescriptionRequest) returns (IUndoItem_Get_UndoDescriptionResponse);
  
  
  // Property: RedoDescription
  //
  rpc Get_RedoDescription(IUndoItem_Get_RedoDescriptionRequest) returns (IUndoItem_Get_RedoDescriptionResponse);
  
  
  // Property: CanUndo
  //
  rpc Get_CanUndo(IUndoItem_Get_CanUndoRequest) returns (IUndoItem_Get_CanUndoResponse);
  
  
  // Property: CanRedo
  //
  rpc Get_CanRedo(IUndoItem_Get_CanRedoRequest) returns (IUndoItem_Get_CanRedoResponse);
  
  
  // Property: UndoEditKind
  //
  rpc Get_UndoEditKind(IUndoItem_Get_UndoEditKindRequest) returns (IUndoItem_Get_UndoEditKindResponse);
  
  
  // Property: RedoEditKind
  //
  rpc Get_RedoEditKind(IUndoItem_Get_RedoEditKindRequest) returns (IUndoItem_Get_RedoEditKindResponse);
  
  
  // Property: UndoStack
  //
  rpc Set_UndoStack(IUndoItem_Set_UndoStackRequest) returns (IUndoItem_Set_UndoStackResponse);
  rpc Get_UndoStack(IUndoItem_Get_UndoStackRequest) returns (IUndoItem_Get_UndoStackResponse);
  
  
  // Property: RefreshEnabled
  //
  rpc Set_RefreshEnabled(IUndoItem_Set_RefreshEnabledRequest) returns (IUndoItem_Set_RefreshEnabledResponse);
  rpc Get_RefreshEnabled(IUndoItem_Get_RefreshEnabledRequest) returns (IUndoItem_Get_RefreshEnabledResponse);
  
  
  // Property: PreEditLocations
  //
  rpc Get_PreEditLocations(IUndoItem_Get_PreEditLocationsRequest) returns (IUndoItem_Get_PreEditLocationsResponse);
  
  
  // Property: PostEditLocations
  //
  rpc Get_PostEditLocations(IUndoItem_Get_PostEditLocationsRequest) returns (IUndoItem_Get_PostEditLocationsResponse);
  
  
  // Property: PreEditChangeCount
  //
  rpc Get_PreEditChangeCount(IUndoItem_Get_PreEditChangeCountRequest) returns (IUndoItem_Get_PreEditChangeCountResponse);
  
  
  // Property: PostEditChangeCount
  //
  rpc Get_PostEditChangeCount(IUndoItem_Get_PostEditChangeCountRequest) returns (IUndoItem_Get_PostEditChangeCountResponse);
  
  
}
message IUndoItemInstance {
  // Specifies the handle of the IUndoItem instance in the server.
  string id = 1;
}
message IUndoItem_UndoRequest {
  // The id of the IUndoItem object.
  IUndoItemInstance instance = 1;
}

message IUndoItem_UndoResponse {
}

message IUndoItem_RedoRequest {
  // The id of the IUndoItem object.
  IUndoItemInstance instance = 1;
}

message IUndoItem_RedoResponse {
}

message IUndoItem_Get_EditedFileRequest {
  // The id of the IUndoItem object.
  IUndoItemInstance instance = 1;
}

message IUndoItem_Get_EditedFileResponse {
  PropertyObjectFileInstance returnValue = 1;
}

message IUndoItem_Get_EditedObjectsRequest {
  // The id of the IUndoItem object.
  IUndoItemInstance instance = 1;
}

message IUndoItem_Get_EditedObjectsResponse {
  repeated PropertyObjectInstance returnValue = 1;
}

message IUndoItem_Get_UndoDescriptionRequest {
  // The id of the IUndoItem object.
  IUndoItemInstance instance = 1;
}

message IUndoItem_Get_UndoDescriptionResponse {
  string returnValue = 1;
}

message IUndoItem_Get_RedoDescriptionRequest {
  // The id of the IUndoItem object.
  IUndoItemInstance instance = 1;
}

message IUndoItem_Get_RedoDescriptionResponse {
  string returnValue = 1;
}

message IUndoItem_Get_CanUndoRequest {
  // The id of the IUndoItem object.
  IUndoItemInstance instance = 1;
}

message IUndoItem_Get_CanUndoResponse {
  bool returnValue = 1;
}

message IUndoItem_Get_CanRedoRequest {
  // The id of the IUndoItem object.
  IUndoItemInstance instance = 1;
}

message IUndoItem_Get_CanRedoResponse {
  bool returnValue = 1;
}

message IUndoItem_Get_UndoEditKindRequest {
  // The id of the IUndoItem object.
  IUndoItemInstance instance = 1;
}

message IUndoItem_Get_UndoEditKindResponse {
  EditKinds returnValue = 1;
}

message IUndoItem_Get_RedoEditKindRequest {
  // The id of the IUndoItem object.
  IUndoItemInstance instance = 1;
}

message IUndoItem_Get_RedoEditKindResponse {
  EditKinds returnValue = 1;
}

message IUndoItem_Set_UndoStackRequest {
  // The id of the IUndoItem object.
  IUndoItemInstance instance = 1;
  UndoStackInstance val = 2;
}

message IUndoItem_Set_UndoStackResponse {
}

message IUndoItem_Get_UndoStackRequest {
  // The id of the IUndoItem object.
  IUndoItemInstance instance = 1;
}

message IUndoItem_Get_UndoStackResponse {
  UndoStackInstance returnValue = 1;
}

message IUndoItem_Set_RefreshEnabledRequest {
  // The id of the IUndoItem object.
  IUndoItemInstance instance = 1;
  bool val = 2;
}

message IUndoItem_Set_RefreshEnabledResponse {
}

message IUndoItem_Get_RefreshEnabledRequest {
  // The id of the IUndoItem object.
  IUndoItemInstance instance = 1;
}

message IUndoItem_Get_RefreshEnabledResponse {
  bool returnValue = 1;
}

message IUndoItem_Get_PreEditLocationsRequest {
  // The id of the IUndoItem object.
  IUndoItemInstance instance = 1;
}

message IUndoItem_Get_PreEditLocationsResponse {
  LocationsInstance returnValue = 1;
}

message IUndoItem_Get_PostEditLocationsRequest {
  // The id of the IUndoItem object.
  IUndoItemInstance instance = 1;
}

message IUndoItem_Get_PostEditLocationsResponse {
  LocationsInstance returnValue = 1;
}

message IUndoItem_Get_PreEditChangeCountRequest {
  // The id of the IUndoItem object.
  IUndoItemInstance instance = 1;
}

message IUndoItem_Get_PreEditChangeCountResponse {
  int32 returnValue = 1;
}

message IUndoItem_Get_PostEditChangeCountRequest {
  // The id of the IUndoItem object.
  IUndoItemInstance instance = 1;
}

message IUndoItem_Get_PostEditChangeCountResponse {
  int32 returnValue = 1;
}
message UndoStackInstance {
  // Specifies the handle of the UndoStack instance in the server.
  string id = 1;
}

// UndoStack
//
// An UndoStack manages a stack of undo items and a stack of redo items. Normally, you create an UndoStack for every document in a sequence editor in which you can undo edits to a TestStand file. You receive undo items to push onto an undo stack through the UIMessage.ActiveXData property of a UIMsg_PushUndoItem UI Message. You use the UndoItem.EditedFile property of the undo item to determine onto which document undo stack to push the undo item.
// Use the Engine.NewUndoStack method to create an UndoStack object. You typically use UndoStack objects with the ApplicationMgr.UndoStack and SequenceFileViewMgr.UndoStack properties.
//
service UndoStack {
  // Method: GetUndoDescription
  //
  // Returns the menu item text describing the next undo operation.
  //
  // UndoStack_GetUndoDescriptionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: UndoStackInstance - The id of the UndoStack object.
  //    - acceleratorPrefix: string - Specifies the character(s) you want to precede the accelerator character, if one exists, in the description the method returns. The accelerator prefix for menu items and button labels varies according to the programming environment. For example, LabVIEW uses "_", LabWindows/CVI uses "__", and Microsoft Visual C++/Visual Basic use "&".
  //
  // UndoStack_GetUndoDescriptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetUndoDescription(UndoStack_GetUndoDescriptionRequest) returns (UndoStack_GetUndoDescriptionResponse);
  
  
  // Method: GetRedoDescription
  //
  // Returns the menu item text describing the next redo operation.
  //
  // UndoStack_GetRedoDescriptionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: UndoStackInstance - The id of the UndoStack object.
  //    - acceleratorPrefix: string - Specifies the character(s) you want to precede the accelerator character, if one exists, in the description the method returns. The accelerator prefix for menu items and button labels varies according to the programming environment. For example, LabVIEW uses "_", LabWindows/CVI uses "__", and Microsoft Visual C++/Visual Basic use "&".
  //
  // UndoStack_GetRedoDescriptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetRedoDescription(UndoStack_GetRedoDescriptionRequest) returns (UndoStack_GetRedoDescriptionResponse);
  
  
  // Method: Undo
  //
  // Calls UndoItem.Undo on the top undo item and then moves the item from the top of the undo stack to the top of the redo stack.
  //
  // UndoStack_UndoRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UndoStackInstance - The id of the UndoStack object.
  //
  // UndoStack_UndoResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Undo(UndoStack_UndoRequest) returns (UndoStack_UndoResponse);
  
  
  // Method: Redo
  //
  // Calls the UndoItem.Redo method on the top redo item and then moves the item from the top of the redo stack to the top of the undo stack.
  //
  // UndoStack_RedoRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UndoStackInstance - The id of the UndoStack object.
  //
  // UndoStack_RedoResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Redo(UndoStack_RedoRequest) returns (UndoStack_RedoResponse);
  
  
  // Method: Push
  //
  // Adds an item at the top of the undo stack and clears the redo stack.
  //
  // UndoStack_PushRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UndoStackInstance - The id of the UndoStack object.
  //
  // UndoStack_PushResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Push(UndoStack_PushRequest) returns (UndoStack_PushResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the undo and redo stacks.
  //
  // UndoStack_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UndoStackInstance - The id of the UndoStack object.
  //
  // UndoStack_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(UndoStack_ClearRequest) returns (UndoStack_ClearResponse);
  
  
  // Method: AggregateTopUndoItems
  //
  // Combines a specified number of items on the top of the undo stack into one item.
  //
  // UndoStack_AggregateTopUndoItemsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: UndoStackInstance - The id of the UndoStack object.
  //    - numItemsToAggregate: int32 - Specifies the number of items to combine into one item.
  //    - aggregateItemDescription: string - Specifies the UndoItem.UndoDescription and UndoItem.RedoDescription properties of the aggregate item. If you pass an empty string, the aggregate item uses the UndoItem.UndoDescription and UndoItem.RedoDescription properties of the lowest undo item on the stack this method aggregates.
  //    - aggregatePreEditLocations: LocationsInstance - Specifies the UndoItem.PreEditLocations property of the aggregate undo item. If you pass NULL, the aggregate undo item computes the UndoItem.PreEditLocations property from the UndoItem.PreEditLocations of the aggregated undo items.
  //    - aggregatePostEditLocations: LocationsInstance - Specifies the UndoItem.PostEditLocations property of the aggregate undo item. If you pass NULL, the aggregate undo item computes the UndoItem.PostEditLocations from the UndoItem.PostEditLocations of the aggregated undo items.
  //
  // UndoStack_AggregateTopUndoItemsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc AggregateTopUndoItems(UndoStack_AggregateTopUndoItemsRequest) returns (UndoStack_AggregateTopUndoItemsResponse);
  
  

  // Property: CanUndo
  //
  // If this property is False, do not call the UndoStack.Undo method.
  //
  // UndoStack_Get_CanUndoRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UndoStackInstance - The id of the UndoStack object.
  //
  // UndoStack_Get_CanUndoResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - If this property is False, do not call the UndoStack.Undo method. 
  //
  rpc Get_CanUndo(UndoStack_Get_CanUndoRequest) returns (UndoStack_Get_CanUndoResponse);
  
  
  // Property: CanRedo
  //
  // If this property is False, do not call the UndoStack.Redo method.
  //
  // UndoStack_Get_CanRedoRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UndoStackInstance - The id of the UndoStack object.
  //
  // UndoStack_Get_CanRedoResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - If this property is False, do not call the UndoStack.Redo method. 
  //
  rpc Get_CanRedo(UndoStack_Get_CanRedoRequest) returns (UndoStack_Get_CanRedoResponse);
  
  
  // Property: UndoItems
  //
  // The items on the undo stack.
  //
  // UndoStack_Get_UndoItemsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UndoStackInstance - The id of the UndoStack object.
  //
  // UndoStack_Get_UndoItemsResponse - The response message from the server. It provides the return value.
  //    - returnValue: UndoItemsInstance - The items on the undo stack. 
  //
  rpc Get_UndoItems(UndoStack_Get_UndoItemsRequest) returns (UndoStack_Get_UndoItemsResponse);
  
  
  // Property: RedoItems
  //
  // Returns the items on the redo stack.
  //
  // UndoStack_Get_RedoItemsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UndoStackInstance - The id of the UndoStack object.
  //
  // UndoStack_Get_RedoItemsResponse - The response message from the server. It provides the return value.
  //    - returnValue: UndoItemsInstance - Returns the items on the redo stack. 
  //
  rpc Get_RedoItems(UndoStack_Get_RedoItemsRequest) returns (UndoStack_Get_RedoItemsResponse);
  
  
  // Property: InUndo
  //
  // Indicates whether the UndoStack is currently performing an Undo operation. Read this property when handling refresh or focus change events to determine if the event was triggered by an Undo operation.
  //
  // UndoStack_Get_InUndoRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UndoStackInstance - The id of the UndoStack object.
  //
  // UndoStack_Get_InUndoResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Indicates whether the UndoStack is currently performing an Undo operation. Read this property when handling refresh or focus change events to determine if the event was triggered by an Undo operation. 
  //
  rpc Get_InUndo(UndoStack_Get_InUndoRequest) returns (UndoStack_Get_InUndoResponse);
  
  
  // Property: InRedo
  //
  // Indicates whether the UndoStack is currently performing a Redo operation. Read this property when handling refresh or focus change events to determine if the event was triggered by a Redo operation.
  //
  // UndoStack_Get_InRedoRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UndoStackInstance - The id of the UndoStack object.
  //
  // UndoStack_Get_InRedoResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Indicates whether the UndoStack is currently performing a Redo operation. Read this property when handling refresh or focus change events to determine if the event was triggered by a Redo operation. 
  //
  rpc Get_InRedo(UndoStack_Get_InRedoRequest) returns (UndoStack_Get_InRedoResponse);
  
  
}
message UndoItemsInstance {
  // Specifies the handle of the UndoItems instance in the server.
  string id = 1;
}
message UndoStack_GetUndoDescriptionRequest {
  // The id of the UndoStack object.
  UndoStackInstance instance = 1;
  // Specifies the character(s) you want to precede the accelerator character, if one exists, in the description the method returns. The accelerator prefix for menu items and button labels varies according to the programming environment. For example, LabVIEW uses "_", LabWindows/CVI uses "__", and Microsoft Visual C++/Visual Basic use "&".
  string acceleratorPrefix = 2;
}

message UndoStack_GetUndoDescriptionResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message UndoStack_GetRedoDescriptionRequest {
  // The id of the UndoStack object.
  UndoStackInstance instance = 1;
  // Specifies the character(s) you want to precede the accelerator character, if one exists, in the description the method returns. The accelerator prefix for menu items and button labels varies according to the programming environment. For example, LabVIEW uses "_", LabWindows/CVI uses "__", and Microsoft Visual C++/Visual Basic use "&".
  string acceleratorPrefix = 2;
}

message UndoStack_GetRedoDescriptionResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message UndoStack_UndoRequest {
  // The id of the UndoStack object.
  UndoStackInstance instance = 1;
}

message UndoStack_UndoResponse {
}

message UndoStack_RedoRequest {
  // The id of the UndoStack object.
  UndoStackInstance instance = 1;
}

message UndoStack_RedoResponse {
}

message UndoStack_PushRequest {
  // The id of the UndoStack object.
  UndoStackInstance instance = 1;
  // Specifies the item to add to the undo stack.
  IUndoItemInstance Item = 2;
}

message UndoStack_PushResponse {
}

message UndoStack_ClearRequest {
  // The id of the UndoStack object.
  UndoStackInstance instance = 1;
}

message UndoStack_ClearResponse {
}

message UndoStack_AggregateTopUndoItemsRequest {
  // The id of the UndoStack object.
  UndoStackInstance instance = 1;
  // Specifies the number of items to combine into one item.
  int32 numItemsToAggregate = 2;
  // Specifies the UndoItem.UndoDescription and UndoItem.RedoDescription properties of the aggregate item. If you pass an empty string, the aggregate item uses the UndoItem.UndoDescription and UndoItem.RedoDescription properties of the lowest undo item on the stack this method aggregates.
  string aggregateItemDescription = 3;
  // Specifies the UndoItem.PreEditLocations property of the aggregate undo item. If you pass NULL, the aggregate undo item computes the UndoItem.PreEditLocations property from the UndoItem.PreEditLocations of the aggregated undo items.
  LocationsInstance aggregatePreEditLocations = 4;
  // Specifies the UndoItem.PostEditLocations property of the aggregate undo item. If you pass NULL, the aggregate undo item computes the UndoItem.PostEditLocations from the UndoItem.PostEditLocations of the aggregated undo items.
  LocationsInstance aggregatePostEditLocations = 5;
}

message UndoStack_AggregateTopUndoItemsResponse {
}

message UndoStack_Get_CanUndoRequest {
  // The id of the UndoStack object.
  UndoStackInstance instance = 1;
}

message UndoStack_Get_CanUndoResponse {
  // If this property is False, do not call the UndoStack.Undo method.
  bool returnValue = 1;
}

message UndoStack_Get_CanRedoRequest {
  // The id of the UndoStack object.
  UndoStackInstance instance = 1;
}

message UndoStack_Get_CanRedoResponse {
  // If this property is False, do not call the UndoStack.Redo method.
  bool returnValue = 1;
}

message UndoStack_Get_UndoItemsRequest {
  // The id of the UndoStack object.
  UndoStackInstance instance = 1;
}

message UndoStack_Get_UndoItemsResponse {
  // The items on the undo stack.
  UndoItemsInstance returnValue = 1;
}

message UndoStack_Get_RedoItemsRequest {
  // The id of the UndoStack object.
  UndoStackInstance instance = 1;
}

message UndoStack_Get_RedoItemsResponse {
  // Returns the items on the redo stack.
  UndoItemsInstance returnValue = 1;
}

message UndoStack_Get_InUndoRequest {
  // The id of the UndoStack object.
  UndoStackInstance instance = 1;
}

message UndoStack_Get_InUndoResponse {
  // Indicates whether the UndoStack is currently performing an Undo operation. Read this property when handling refresh or focus change events to determine if the event was triggered by an Undo operation.
  bool returnValue = 1;
}

message UndoStack_Get_InRedoRequest {
  // The id of the UndoStack object.
  UndoStackInstance instance = 1;
}

message UndoStack_Get_InRedoResponse {
  // Indicates whether the UndoStack is currently performing a Redo operation. Read this property when handling refresh or focus change events to determine if the event was triggered by a Redo operation.
  bool returnValue = 1;
}

// UndoItems
//
// You can obtain a collection of UndoItem objects from the UndoStack.UndoItems property.
//
service UndoItems {
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // UndoItems_RemoveRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UndoItemsInstance - The id of the UndoItems object.
  //
  // UndoItems_RemoveResponse - The response message from the server. It provides the return value.
  //    - returnValue: IUndoItemInstance - Specifies the zero-based index of the item to remove. 
  //
  rpc Remove(UndoItems_RemoveRequest) returns (UndoItems_RemoveResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // UndoItems_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: UndoItemsInstance - The id of the UndoItems object.
  //    - index: int32 - Specifies the zero-based index of the item to retrieve.
  //
  // UndoItems_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: IUndoItemInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(UndoItems_Get_ItemRequest) returns (UndoItems_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // UndoItems_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UndoItemsInstance - The id of the UndoItems object.
  //
  // UndoItems_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(UndoItems_Get_CountRequest) returns (UndoItems_Get_CountResponse);
  
  
  // Property: TopItem
  //
  // Returns the item at the highest index in the collection. This property is NULL if the collection is empty.
  //
  // UndoItems_Get_TopItemRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UndoItemsInstance - The id of the UndoItems object.
  //
  // UndoItems_Get_TopItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: IUndoItemInstance - Returns the item at the highest index in the collection. This property is NULL if the collection is empty. 
  //
  rpc Get_TopItem(UndoItems_Get_TopItemRequest) returns (UndoItems_Get_TopItemResponse);
  
  
}
message UndoItems_RemoveRequest {
  // The id of the UndoItems object.
  UndoItemsInstance instance = 1;
  // 
  int32 index = 2;
}

message UndoItems_RemoveResponse {
  // Specifies the zero-based index of the item to remove.
  IUndoItemInstance returnValue = 1;
}

message UndoItems_Get_ItemRequest {
  // The id of the UndoItems object.
  UndoItemsInstance instance = 1;
  // Specifies the zero-based index of the item to retrieve.
  int32 index = 2;
}

message UndoItems_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  IUndoItemInstance returnValue = 1;
}

message UndoItems_Get_CountRequest {
  // The id of the UndoItems object.
  UndoItemsInstance instance = 1;
}

message UndoItems_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

message UndoItems_Get_TopItemRequest {
  // The id of the UndoItems object.
  UndoItemsInstance instance = 1;
}

message UndoItems_Get_TopItemResponse {
  // Returns the item at the highest index in the collection. This property is NULL if the collection is empty.
  IUndoItemInstance returnValue = 1;
}

// OutputMessages
//
// This collection class contains elements of the OutputMessage type. You can post an output message to TestStand by calling the Engine.NewOutputMessage method to create a new message object and by calling the OutputMessage.Post method on the object. You can also call the OutputMessage expression function.
// 
// When the number of items in the collection changes from zero to one, TestStand sends a UIMsg_OutputMessages message to the TestStand application.
// 
// TestStand adds only messages to the collection and sends a UIMsg_OutputMessages message if you enable the Engine.OutputMessagesEnabled property.
// 
// An application can retrieve the latest output messages by transferring messages from the collection TestStand maintains to a new collection the application creates, as shown in the following pseudocode:
// // C# exampleif (uiMsg.Event == UIMessageCodes.UIMsg_OutputMessages){     OutputMessages outputMessages = uiMsg.ActiveXData as OutputMessages;     OutputMessages appOutputMessages = engine.NewOutputMessages();     outputMessages.CopyMessagesToCollection(appOutputMessages);     for(i = 0; i < appOutputMessages.Count; i++)     {          uiControl.Add(appOutputMessages[i].Message);     }}// C++ exampleif (uiMsg->Event == UIMsg_OutputMessages){     TS::OutputMessagesPtr outputMessages = uiMsg->ActiveXData;     TS::OutputMessagesPtr appOutputMessages = engine->NewOutputMessages();     outputMessages->CopyMessagesToCollection(appOutputMessages);     for(i = 0; i < appOutputMessages->Count; i++)     {          uiControl.Add(appOutputMessages->Item[i]->Message);     }}TestStand always sends output messages to a debugger if you enable the DebugOptions_SendOutputMessagesToDebugger option of the StationOptions.DebugOptions property.
// 
//
service OutputMessages {
  // Method: Add
  //
  // Adds an OutputMessage object to the collection.
  //
  // The OutputMessage object is appended to the end of the collection.
  //
  // OutputMessages_AddRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: OutputMessagesInstance - The id of the OutputMessages object.
  //
  // OutputMessages_AddResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Add(OutputMessages_AddRequest) returns (OutputMessages_AddResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // This method releases only the reference to the OutputMessage object the collection holds. To delete the OutputMessage object, you must release all other references.
  //
  // OutputMessages_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: OutputMessagesInstance - The id of the OutputMessages object.
  //    - index: int32 - Specifies the zero-based index of the item to remove.
  //
  // OutputMessages_RemoveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Remove(OutputMessages_RemoveRequest) returns (OutputMessages_RemoveResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // This method releases only the references to the OutputMessage objects the collection holds. To delete the OutputMessage objects, you must release all other references.
  //
  // OutputMessages_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: OutputMessagesInstance - The id of the OutputMessages object.
  //
  // OutputMessages_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(OutputMessages_ClearRequest) returns (OutputMessages_ClearResponse);
  
  
  // Method: TransferMessagesToCollection
  //
  // Transfers all OutputMessage objects in the collection to a target collection. The collection is empty after you call this method.
  // 
  //
  // This method is thread-safe with respect to the source collection in that the source collection cannot be modified from another thread while the transfer is in progress.
  //
  // OutputMessages_TransferMessagesToCollectionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: OutputMessagesInstance - The id of the OutputMessages object.
  //    - target: OutputMessagesInstance - Specifies the target collection to receive the OutputMessage objects.
  //
  // OutputMessages_TransferMessagesToCollectionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc TransferMessagesToCollection(OutputMessages_TransferMessagesToCollectionRequest) returns (OutputMessages_TransferMessagesToCollectionResponse);
  
  
  // Method: CopyMessagesToCollection
  //
  // Copies all OutputMessage object references in the collection to the end of the target collection.
  //
  // Use this method in an application that handles the UIMsg_OutputMessages event to copy the messages from the collection in UIMessage.ActiveXData to a private collection. This method is thread-safe with respect to the source collection in that the source collection cannot be modified from another thread while the copy is in progress.
  //
  // OutputMessages_CopyMessagesToCollectionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: OutputMessagesInstance - The id of the OutputMessages object.
  //    - target: OutputMessagesInstance - Specifies the target collection to receive the OutputMessage objects references.
  //
  // OutputMessages_CopyMessagesToCollectionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc CopyMessagesToCollection(OutputMessages_CopyMessagesToCollectionRequest) returns (OutputMessages_CopyMessagesToCollectionResponse);
  
  
  // Method: FindIndex
  //
  // Returns the index of the OutputMessage in the collection. If the OutputMessage is not in the collection, the return value is -1.
  //
  // OutputMessages_FindIndexRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: OutputMessagesInstance - The id of the OutputMessages object.
  //    - outputMessageId: int32 - Specifies the ID of the OutputMessage to search for in the collection.
  //
  // OutputMessages_FindIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - The return type of the Int32 object.
  //
  rpc FindIndex(OutputMessages_FindIndexRequest) returns (OutputMessages_FindIndexResponse);
  
  
  // Method: ToPropertyObject
  //
  // Returns a PropertyObject representation of the collection. You can use the PropertyObject to persist the collection.
  // Note: The PropertyObject representation does not store the value of the UserData property for any Locations objects OutputMessages hold in the OutputMessages collection.
  //
  // OutputMessages_ToPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: OutputMessagesInstance - The id of the OutputMessages object.
  //    - storeExecutionLocations: bool - To reduce the size of the PropertyObject, you can pass False to omit the values of the OutputMessage.ExecutionLocations property from the property object representation of the OutputMessages collection.
  //
  // OutputMessages_ToPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc ToPropertyObject(OutputMessages_ToPropertyObjectRequest) returns (OutputMessages_ToPropertyObjectResponse);
  
  
  // Method: FromPropertyObject
  //
  // Restores the collection state that was stored in the PropertyObject by a call to the OutputMessages.ToPropertyObject method.
  //
  // OutputMessages_FromPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: OutputMessagesInstance - The id of the OutputMessages object.
  //    - val: PropertyObjectInstance - Specifies the PropertyObject.
  //
  // OutputMessages_FromPropertyObjectResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc FromPropertyObject(OutputMessages_FromPropertyObjectRequest) returns (OutputMessages_FromPropertyObjectResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // OutputMessages_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: OutputMessagesInstance - The id of the OutputMessages object.
  //    - index: int32 - Specifies a zero-based index.
  //
  // OutputMessages_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: OutputMessageInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(OutputMessages_Get_ItemRequest) returns (OutputMessages_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // OutputMessages_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: OutputMessagesInstance - The id of the OutputMessages object.
  //
  // OutputMessages_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(OutputMessages_Get_CountRequest) returns (OutputMessages_Get_CountResponse);
  
  
}
message OutputMessagesInstance {
  // Specifies the handle of the OutputMessages instance in the server.
  string id = 1;
}

message OutputMessageInstance {
  // Specifies the handle of the OutputMessage instance in the server.
  string id = 1;
}
message OutputMessages_AddRequest {
  // The id of the OutputMessages object.
  OutputMessagesInstance instance = 1;
  // Specifies the OutputMessage object to add.
  OutputMessageInstance OutputMessage = 2;
}

message OutputMessages_AddResponse {
}

message OutputMessages_RemoveRequest {
  // The id of the OutputMessages object.
  OutputMessagesInstance instance = 1;
  // Specifies the zero-based index of the item to remove.
  int32 index = 2;
}

message OutputMessages_RemoveResponse {
}

message OutputMessages_ClearRequest {
  // The id of the OutputMessages object.
  OutputMessagesInstance instance = 1;
}

message OutputMessages_ClearResponse {
}

message OutputMessages_TransferMessagesToCollectionRequest {
  // The id of the OutputMessages object.
  OutputMessagesInstance instance = 1;
  // Specifies the target collection to receive the OutputMessage objects.
  OutputMessagesInstance target = 2;
}

message OutputMessages_TransferMessagesToCollectionResponse {
}

message OutputMessages_CopyMessagesToCollectionRequest {
  // The id of the OutputMessages object.
  OutputMessagesInstance instance = 1;
  // Specifies the target collection to receive the OutputMessage objects references.
  OutputMessagesInstance target = 2;
}

message OutputMessages_CopyMessagesToCollectionResponse {
}

message OutputMessages_FindIndexRequest {
  // The id of the OutputMessages object.
  OutputMessagesInstance instance = 1;
  // Specifies the ID of the OutputMessage to search for in the collection.
  int32 outputMessageId = 2;
}

message OutputMessages_FindIndexResponse {
  // The return type of the Int32 object.
  int32 returnValue = 1;
}

message OutputMessages_ToPropertyObjectRequest {
  // The id of the OutputMessages object.
  OutputMessagesInstance instance = 1;
  // To reduce the size of the PropertyObject, you can pass False to omit the values of the OutputMessage.ExecutionLocations property from the property object representation of the OutputMessages collection.
  bool storeExecutionLocations = 2;
}

message OutputMessages_ToPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message OutputMessages_FromPropertyObjectRequest {
  // The id of the OutputMessages object.
  OutputMessagesInstance instance = 1;
  // Specifies the PropertyObject.
  PropertyObjectInstance val = 2;
}

message OutputMessages_FromPropertyObjectResponse {
}

message OutputMessages_Get_ItemRequest {
  // The id of the OutputMessages object.
  OutputMessagesInstance instance = 1;
  // Specifies a zero-based index.
  optional int32 index = 2;
}

message OutputMessages_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  OutputMessageInstance returnValue = 1;
}

message OutputMessages_Get_CountRequest {
  // The id of the OutputMessages object.
  OutputMessagesInstance instance = 1;
}

message OutputMessages_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// OutputMessage
//
// An OutputMessage object specifies the details about an output message. The object lets you specify the message text, timestamp, category, severity, color, icon, and location. When you call the OutputMessage.Post method, TestStand copies the OutputMessage object and adds the copy to the collection TestStand maintains. You can access the collection using the reference the Engine.GetOutputMessages method returns.
//
service OutputMessage {
  // Method: Post
  //
  // Appends a reference to the OutputMessage into an OutputMessages collection that TestStand maintains. Periodically, TestStand checks to see if this collection is not empty. If the collection is not empty, TestStand attaches the entire collection to the ActiveXData member of a user interface message posted with the UIMsg_OutputMessages event code.
  //
  // TestStand adds the message to the output messages collection and sends UIMsg_OutputMessages messages only if you enable the Engine.OutputMessagesEnabled property. In TestStand 4.0 and 4.0.1, this method appended a copy of the OutputMessage, and the caller of this method could not access this copy directly. In TestStand 4.1 or later, this method adds a reference to the message.
  //
  // OutputMessage_PostRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: OutputMessageInstance - The id of the OutputMessage object.
  //
  // OutputMessage_PostResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Post(OutputMessage_PostRequest) returns (OutputMessage_PostResponse);
  
  
  // Method: AsPropertyObject
  //
  // Returns the underlying PropertyObject that represents the OutputMessage object.
  //
  // Use the PropertyObject to modify, add, or remove custom properties of the object.
  //
  // OutputMessage_AsPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: OutputMessageInstance - The id of the OutputMessage object.
  //
  // OutputMessage_AsPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc AsPropertyObject(OutputMessage_AsPropertyObjectRequest) returns (OutputMessage_AsPropertyObjectResponse);
  
  

  // Property: Category
  //
  // Specifies the output message category. Applications typically use the category to filter or sort messages. If you do not define a category when you create an output message, the output message is considered uncategorized. You can specify any value for this property.
  //
  // OutputMessage_Set_CategoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: OutputMessageInstance - The id of the OutputMessage object.
  //    - val: string - Specifies the output message category. Applications typically use the category to filter or sort messages. If you do not define a category when you create an output message, the output message is considered uncategorized. You can specify any value for this property. 
  //
  // OutputMessage_Set_CategoryResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // OutputMessage_Get_CategoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: OutputMessageInstance - The id of the OutputMessage object.
  //
  // OutputMessage_Get_CategoryResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the output message category. Applications typically use the category to filter or sort messages. If you do not define a category when you create an output message, the output message is considered uncategorized. You can specify any value for this property. 
  //
  rpc Set_Category(OutputMessage_Set_CategoryRequest) returns (OutputMessage_Set_CategoryResponse);
  rpc Get_Category(OutputMessage_Get_CategoryRequest) returns (OutputMessage_Get_CategoryResponse);
  
  
  // Property: Severity
  //
  // Specifies the output message severity. Applications typically use the category to filter or sort messages.
  //
  // OutputMessage_Set_SeverityRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: OutputMessageInstance - The id of the OutputMessage object.
  //    - val: OutputMessageSeverityTypes - Specifies the output message severity. Applications typically use the category to filter or sort messages. 
  //
  // OutputMessage_Set_SeverityResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // OutputMessage_Get_SeverityRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: OutputMessageInstance - The id of the OutputMessage object.
  //
  // OutputMessage_Get_SeverityResponse - The response message from the server. It provides the return value.
  //    - returnValue: OutputMessageSeverityTypes - Specifies the output message severity. Applications typically use the category to filter or sort messages. 
  //
  rpc Set_Severity(OutputMessage_Set_SeverityRequest) returns (OutputMessage_Set_SeverityResponse);
  rpc Get_Severity(OutputMessage_Get_SeverityRequest) returns (OutputMessage_Get_SeverityResponse);
  
  
  // Property: Message
  //
  // Specifies the text of the output message.
  //
  // OutputMessage_Set_MessageRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: OutputMessageInstance - The id of the OutputMessage object.
  //    - val: string - Specifies the text of the output message. 
  //
  // OutputMessage_Set_MessageResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // OutputMessage_Get_MessageRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: OutputMessageInstance - The id of the OutputMessage object.
  //
  // OutputMessage_Get_MessageResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the text of the output message. 
  //
  rpc Set_Message(OutputMessage_Set_MessageRequest) returns (OutputMessage_Set_MessageResponse);
  rpc Get_Message(OutputMessage_Get_MessageRequest) returns (OutputMessage_Get_MessageResponse);
  
  
  // Property: TextColor
  //
  // Specifies the text color associated with the output message.
  //
  // An application uses the specified color when displaying the text message.
  //
  // OutputMessage_Set_TextColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: OutputMessageInstance - The id of the OutputMessage object.
  //    - val: uint32 - Specifies the text color associated with the output message. 
  //
  // OutputMessage_Set_TextColorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // OutputMessage_Get_TextColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: OutputMessageInstance - The id of the OutputMessage object.
  //
  // OutputMessage_Get_TextColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Specifies the text color associated with the output message. 
  //
  rpc Set_TextColor(OutputMessage_Set_TextColorRequest) returns (OutputMessage_Set_TextColorResponse);
  rpc Get_TextColor(OutputMessage_Get_TextColorRequest) returns (OutputMessage_Get_TextColorResponse);
  
  
  // Property: TimeStamp
  //
  // Specifies the timestamp of the output message.
  //
  // When creating a new OutputMessage object, TestStand initializes the TimeStamp property to the current time.
  //
  // OutputMessage_Set_TimeStampRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: OutputMessageInstance - The id of the OutputMessage object.
  //    - val: google.protobuf.Timestamp - Specifies the timestamp of the output message. 
  //
  // OutputMessage_Set_TimeStampResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // OutputMessage_Get_TimeStampRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: OutputMessageInstance - The id of the OutputMessage object.
  //
  // OutputMessage_Get_TimeStampResponse - The response message from the server. It provides the return value.
  //    - returnValue: google.protobuf.Timestamp - Specifies the timestamp of the output message. 
  //
  rpc Set_TimeStamp(OutputMessage_Set_TimeStampRequest) returns (OutputMessage_Set_TimeStampResponse);
  rpc Get_TimeStamp(OutputMessage_Get_TimeStampRequest) returns (OutputMessage_Get_TimeStampResponse);
  
  
  // Property: IconName
  //
  // Specifies the icon filename assigned to the output message.
  //
  // The TestStand Engine maintains a list of images that contain all the icons located in the <TestStand>\Components\Icons and <TestStand Public>\Components\Icons directories and images you add using the Engine.AddImage method.
  // 
  // When creating a new OutputMessage object, TestStand initializes the IconName property based on the following severity types:
  // * Information—Generic.ico    * Warning—Warning.ico    * Error—Error.ico
  // TestStand Sequence Editor displays the icon next to the output message.
  //
  // OutputMessage_Set_IconNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: OutputMessageInstance - The id of the OutputMessage object.
  //    - val: string - Specifies the icon filename assigned to the output message. 
  //
  // OutputMessage_Set_IconNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // OutputMessage_Get_IconNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: OutputMessageInstance - The id of the OutputMessage object.
  //
  // OutputMessage_Get_IconNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the icon filename assigned to the output message. 
  //
  rpc Set_IconName(OutputMessage_Set_IconNameRequest) returns (OutputMessage_Set_IconNameResponse);
  rpc Get_IconName(OutputMessage_Get_IconNameRequest) returns (OutputMessage_Get_IconNameResponse);
  
  
  // Property: FileLocations
  //
  // Specifies a collection of locations used to identify the step in the sequence file that generated the output message.
  //
  // When you pass a SequenceContext object to the sequenceContext parameter of the Engine.NewOutputMessage method, TestStand automatically adds a new Location object to the Locations collection. Otherwise, the collection is empty.
  //
  // OutputMessage_Get_FileLocationsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: OutputMessageInstance - The id of the OutputMessage object.
  //
  // OutputMessage_Get_FileLocationsResponse - The response message from the server. It provides the return value.
  //    - returnValue: LocationsInstance - Specifies a collection of locations used to identify the step in the sequence file that generated the output message. 
  //
  rpc Get_FileLocations(OutputMessage_Get_FileLocationsRequest) returns (OutputMessage_Get_FileLocationsResponse);
  
  
  // Property: ExecutionLocations
  //
  // Specifies a collection of locations used to identify the step, thread and execution that generated the output message.
  //
  // When you pass a SequenceContext object to the sequenceContext parameter of the Engine.NewOutputMessage method, TestStand automatically adds a new Location object to the Locations collection, otherwise, the collection is empty.
  //
  // OutputMessage_Get_ExecutionLocationsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: OutputMessageInstance - The id of the OutputMessage object.
  //
  // OutputMessage_Get_ExecutionLocationsResponse - The response message from the server. It provides the return value.
  //    - returnValue: LocationsInstance - Specifies a collection of locations used to identify the step, thread and execution that generated the output message. 
  //
  rpc Get_ExecutionLocations(OutputMessage_Get_ExecutionLocationsRequest) returns (OutputMessage_Get_ExecutionLocationsResponse);
  
  
  // Property: TimeInSeconds
  //
  // Specifies the creation time of the output message.
  //
  // When creating a new OutputMessage object, TestStand initializes this property to the current value of the Engine.SecondsSinceStart property.
  //
  // OutputMessage_Set_TimeInSecondsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: OutputMessageInstance - The id of the OutputMessage object.
  //    - val: double - Specifies the creation time of the output message. 
  //
  // OutputMessage_Set_TimeInSecondsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // OutputMessage_Get_TimeInSecondsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: OutputMessageInstance - The id of the OutputMessage object.
  //
  // OutputMessage_Get_TimeInSecondsResponse - The response message from the server. It provides the return value.
  //    - returnValue: double - Specifies the creation time of the output message. 
  //
  rpc Set_TimeInSeconds(OutputMessage_Set_TimeInSecondsRequest) returns (OutputMessage_Set_TimeInSecondsResponse);
  rpc Get_TimeInSeconds(OutputMessage_Get_TimeInSecondsRequest) returns (OutputMessage_Get_TimeInSecondsResponse);
  
  
  // Property: Id
  //
  // Returns a unique ID number for the output message.
  // Note: The ID number is never zero.
  //
  // The ID number is unique with respect to all output messages the TestStand Engine creates in an operating system process. Use this ID number to compare two OutputMessage object references to determine whether they refer to the same underlying output message.
  //
  // OutputMessage_Get_IdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: OutputMessageInstance - The id of the OutputMessage object.
  //
  // OutputMessage_Get_IdResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a unique ID number for the output message. Note: The ID number is never zero. 
  //
  rpc Get_Id(OutputMessage_Get_IdRequest) returns (OutputMessage_Get_IdResponse);
  
  
}
message OutputMessage_PostRequest {
  // The id of the OutputMessage object.
  OutputMessageInstance instance = 1;
}

message OutputMessage_PostResponse {
}

message OutputMessage_AsPropertyObjectRequest {
  // The id of the OutputMessage object.
  OutputMessageInstance instance = 1;
}

message OutputMessage_AsPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message OutputMessage_Set_CategoryRequest {
  // The id of the OutputMessage object.
  OutputMessageInstance instance = 1;
  // Specifies the output message category. Applications typically use the category to filter or sort messages. If you do not define a category when you create an output message, the output message is considered uncategorized. You can specify any value for this property.
  string val = 2;
}

message OutputMessage_Set_CategoryResponse {
}

message OutputMessage_Get_CategoryRequest {
  // The id of the OutputMessage object.
  OutputMessageInstance instance = 1;
}

message OutputMessage_Get_CategoryResponse {
  // Specifies the output message category. Applications typically use the category to filter or sort messages. If you do not define a category when you create an output message, the output message is considered uncategorized. You can specify any value for this property.
  string returnValue = 1;
}

message OutputMessage_Set_SeverityRequest {
  // The id of the OutputMessage object.
  OutputMessageInstance instance = 1;
  // Specifies the output message severity. Applications typically use the category to filter or sort messages.
  OutputMessageSeverityTypes val = 2;
}

message OutputMessage_Set_SeverityResponse {
}

message OutputMessage_Get_SeverityRequest {
  // The id of the OutputMessage object.
  OutputMessageInstance instance = 1;
}

message OutputMessage_Get_SeverityResponse {
  // Specifies the output message severity. Applications typically use the category to filter or sort messages.
  OutputMessageSeverityTypes returnValue = 1;
}

message OutputMessage_Set_MessageRequest {
  // The id of the OutputMessage object.
  OutputMessageInstance instance = 1;
  // Specifies the text of the output message.
  string val = 2;
}

message OutputMessage_Set_MessageResponse {
}

message OutputMessage_Get_MessageRequest {
  // The id of the OutputMessage object.
  OutputMessageInstance instance = 1;
}

message OutputMessage_Get_MessageResponse {
  // Specifies the text of the output message.
  string returnValue = 1;
}

message OutputMessage_Set_TextColorRequest {
  // The id of the OutputMessage object.
  OutputMessageInstance instance = 1;
  // Specifies the text color associated with the output message.
  uint32 val = 2;
}

message OutputMessage_Set_TextColorResponse {
}

message OutputMessage_Get_TextColorRequest {
  // The id of the OutputMessage object.
  OutputMessageInstance instance = 1;
}

message OutputMessage_Get_TextColorResponse {
  // Specifies the text color associated with the output message.
  uint32 returnValue = 1;
}

message OutputMessage_Set_TimeStampRequest {
  // The id of the OutputMessage object.
  OutputMessageInstance instance = 1;
  // Specifies the timestamp of the output message.
  google.protobuf.Timestamp val = 2;
}

message OutputMessage_Set_TimeStampResponse {
}

message OutputMessage_Get_TimeStampRequest {
  // The id of the OutputMessage object.
  OutputMessageInstance instance = 1;
}

message OutputMessage_Get_TimeStampResponse {
  // Specifies the timestamp of the output message.
  google.protobuf.Timestamp returnValue = 1;
}

message OutputMessage_Set_IconNameRequest {
  // The id of the OutputMessage object.
  OutputMessageInstance instance = 1;
  // Specifies the icon filename assigned to the output message.
  string val = 2;
}

message OutputMessage_Set_IconNameResponse {
}

message OutputMessage_Get_IconNameRequest {
  // The id of the OutputMessage object.
  OutputMessageInstance instance = 1;
}

message OutputMessage_Get_IconNameResponse {
  // Specifies the icon filename assigned to the output message.
  string returnValue = 1;
}

message OutputMessage_Get_FileLocationsRequest {
  // The id of the OutputMessage object.
  OutputMessageInstance instance = 1;
}

message OutputMessage_Get_FileLocationsResponse {
  // Specifies a collection of locations used to identify the step in the sequence file that generated the output message.
  LocationsInstance returnValue = 1;
}

message OutputMessage_Get_ExecutionLocationsRequest {
  // The id of the OutputMessage object.
  OutputMessageInstance instance = 1;
}

message OutputMessage_Get_ExecutionLocationsResponse {
  // Specifies a collection of locations used to identify the step, thread and execution that generated the output message.
  LocationsInstance returnValue = 1;
}

message OutputMessage_Set_TimeInSecondsRequest {
  // The id of the OutputMessage object.
  OutputMessageInstance instance = 1;
  // Specifies the creation time of the output message.
  double val = 2;
}

message OutputMessage_Set_TimeInSecondsResponse {
}

message OutputMessage_Get_TimeInSecondsRequest {
  // The id of the OutputMessage object.
  OutputMessageInstance instance = 1;
}

message OutputMessage_Get_TimeInSecondsResponse {
  // Specifies the creation time of the output message.
  double returnValue = 1;
}

message OutputMessage_Get_IdRequest {
  // The id of the OutputMessage object.
  OutputMessageInstance instance = 1;
}

message OutputMessage_Get_IdResponse {
  // Returns a unique ID number for the output message.
  // Note: The ID number is never zero.
  int32 returnValue = 1;
}

// FileInformation
//
// Use FileInformation objects to obtain file information, such as file version, file format version, and file type, on files TestStand recognizes without fully loading the files into memory. When you call methods and properties on a FileInformation object, TestStand can cache the information. For changes made to a file on disk to be reflected in a FileInformation object, you must release the object and use the Engine.GetFileInformation method to obtain a new FileInformation object.
//
service FileInformation {
  // Method: GetFileFormatVersion
  //
  // Returns the format version of the file. If no format version is available, the method returns an empty string.
  //
  // Generally, the file format version is the format of the file. The method returns the TestStand Engine version that saved a TestStand file, the LabVIEW server version that saved a VI file, or the type of binary file for DLL and executable files. For example, the file format version of a Microsoft Windows XP binary executable is usually PE (Portable Executable), the file format version of a .NET assembly is .NET, the file format version of a LabVIEW VI is the version of the LabVIEW development system that saved the VI, such as 12.0.0, and the file format version of a TestStand sequence file is the version of the TestStand Engine that saved the file, such as 5.0.0.
  // This property throws an exception if TestStand cannot locate the file when it is first accessed. Use the FileInformation.FileExists property to determine whether the file is available.
  //
  // FileInformation_GetFileFormatVersionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: FileInformationInstance - The id of the FileInformation object.
  //
  // FileInformation_GetFileFormatVersionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetFileFormatVersion(FileInformation_GetFileFormatVersionRequest) returns (FileInformation_GetFileFormatVersionResponse);
  
  
  // Method: GetFileVersion
  //
  // Obtains the version of the file. The method returns True if the file has a file version.  Otherwise it returns False.
  //
  // Generally, the file version is the version or revision of the file. The method returns the PropertyObjectFile.Version property value for TestStand files, the revision from a LabVIEW VI, and file version value in the resource of DLL and executable files.
  // The version number usually appears in the MajorVersion.MinorVersion.RevisionVersion format, such as 1.0.2.
  // This method throws an exception if the file cannot be located when it is first accessed. Use the FileExists property to determine whether the file is available.
  //
  // FileInformation_GetFileVersionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: FileInformationInstance - The id of the FileInformation object.
  //
  // FileInformation_GetFileVersionResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if the file has a file version. Otherwise, returns False. 
  //    - val: strin - Returns the version of the file. If no version is available, the method returns an empty string.
  //
  rpc GetFileVersion(FileInformation_GetFileVersionRequest) returns (FileInformation_GetFileVersionResponse);
  
  
  // Method: GetFileFormatDisplayVersion
  //
  // Returns the format display version of the file if the FileInformation.IsPropertyObjectFile property is True for the file, otherwise this method returns the value from the FileInformation.GetFileFormatVersion method. If no format version is available, the method returns an empty string.
  //
  // For a property object file, this method returns the TestStand version in which the file was created.
  // This method returns an error if TestStand cannot locate the file when it is first accessed. Use the FileInformation.FileExists property to determine whether the file is available.
  //
  // FileInformation_GetFileFormatDisplayVersionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: FileInformationInstance - The id of the FileInformation object.
  //
  // FileInformation_GetFileFormatDisplayVersionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetFileFormatDisplayVersion(FileInformation_GetFileFormatDisplayVersionRequest) returns (FileInformation_GetFileFormatDisplayVersionResponse);
  
  

  // Property: FileExists
  //
  // Returns True if a file exists and is accessible at the path specified for this FileInformation object. This property is not cached. TestStand attempts to locate the file on disk every time you call this property.
  //
  // Use this property to determine whether you can use the other properties and methods on the FileInformation object.
  //
  // FileInformation_Get_FileExistsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: FileInformationInstance - The id of the FileInformation object.
  //
  // FileInformation_Get_FileExistsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if a file exists and is accessible at the path specified for this FileInformation object. This property is not cached. TestStand attempts to locate the file on disk every time you call this property. 
  //
  rpc Get_FileExists(FileInformation_Get_FileExistsRequest) returns (FileInformation_Get_FileExistsResponse);
  
  
  // Property: IsCustomFile
  //
  // Returns True if the file is a custom format file TestStand can load using a custom sequence file translator.
  //
  // Files in native TestStand formats always return False for this property.
  // This property throws an exception if TestStand cannot locate the file when it is first accessed. Use the FileInformation.FileExists property to determine whether the file is available.
  //
  // FileInformation_Get_IsCustomFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: FileInformationInstance - The id of the FileInformation object.
  //
  // FileInformation_Get_IsCustomFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the file is a custom format file TestStand can load using a custom sequence file translator. 
  //
  rpc Get_IsCustomFile(FileInformation_Get_IsCustomFileRequest) returns (FileInformation_Get_IsCustomFileResponse);
  
  
  // Property: IsSequenceFile
  //
  // Returns True if the file is a TestStand sequence file or a custom sequence file TestStand can load with a custom sequence file translator.
  //
  // Use this property to determine whether you can load the file using the Engine.GetSequenceFileEx method.
  // This property throws an exception if TestStand cannot locate the file when it is first accessed. Use the FileExists property to determine whether the file is available.
  //
  // FileInformation_Get_IsSequenceFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: FileInformationInstance - The id of the FileInformation object.
  //
  // FileInformation_Get_IsSequenceFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the file is a TestStand sequence file or a custom sequence file TestStand can load with a custom sequence file translator. 
  //
  rpc Get_IsSequenceFile(FileInformation_Get_IsSequenceFileRequest) returns (FileInformation_Get_IsSequenceFileResponse);
  
  
  // Property: IsPropertyObjectFile
  //
  // Returns True if the file is a TestStand PropertyObjectFile.
  //
  // Use this property to determine whether you can load the file using the  PropertyObjectFile.ReadFile method.
  // This property throws an exception if TestStand cannot locate the file when it is first accessed. Use the FileInformation.FileExists property to determine whether the file is available.
  //
  // FileInformation_Get_IsPropertyObjectFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: FileInformationInstance - The id of the FileInformation object.
  //
  // FileInformation_Get_IsPropertyObjectFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the file is a TestStand PropertyObjectFile. 
  //
  rpc Get_IsPropertyObjectFile(FileInformation_Get_IsPropertyObjectFileRequest) returns (FileInformation_Get_IsPropertyObjectFileResponse);
  
  
  // Property: FileWritingFormat
  //
  // Returns the format in which TestStand wrote a property object file, such as binary, INI, or XML.
  //
  // This method is valid only for native TestStand files. Use the FileInformation.IsPropertyObjectFile property to determine whether you can safely access this property.
  // This property throws an exception if TestStand cannot locate the file when it is first accessed. Use the FileInformation.FileExists property to determine whether the file is available.
  //
  // FileInformation_Get_FileWritingFormatRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: FileInformationInstance - The id of the FileInformation object.
  //
  // FileInformation_Get_FileWritingFormatResponse - The response message from the server. It provides the return value.
  //    - returnValue: FileWritingFormats - Returns the format in which TestStand wrote a property object file, such as binary, INI, or XML. 
  //
  rpc Get_FileWritingFormat(FileInformation_Get_FileWritingFormatRequest) returns (FileInformation_Get_FileWritingFormatResponse);
  
  
  // Property: PropertyObjectFileType
  //
  // Returns the file type of the file.
  //
  // Use this property to determine the type of file to create before using the PropertyObjectFile.ReadFile method.
  // This property returns an error if TestStand cannot locate the file when it is first accessed or if the file is not a PropertyObjectFile. Use the FileInformation.FileExists property to determine if the file is available and the FileInformation.IsPropertyObjectFile property to determine if the file is a PropertyObjectFile.
  //
  // FileInformation_Get_PropertyObjectFileTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: FileInformationInstance - The id of the FileInformation object.
  //
  // FileInformation_Get_PropertyObjectFileTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectFileTypes - Returns the file type of the file. 
  //
  rpc Get_PropertyObjectFileType(FileInformation_Get_PropertyObjectFileTypeRequest) returns (FileInformation_Get_PropertyObjectFileTypeResponse);
  
  
  // Property: IsDotNetAssembly
  //
  // Returns True if the file is a .NET assembly.
  //
  // Use this property to determine whether you can use the file to specify the assembly for a DotNetModule object.
  // This property returns an error if TestStand cannot locate the file when TestStand first attempts to access the file. Use the FileInformation.FileExists property to determine whether the file is available.
  //
  // FileInformation_Get_IsDotNetAssemblyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: FileInformationInstance - The id of the FileInformation object.
  //
  // FileInformation_Get_IsDotNetAssemblyResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the file is a .NET assembly. 
  //
  rpc Get_IsDotNetAssembly(FileInformation_Get_IsDotNetAssemblyRequest) returns (FileInformation_Get_IsDotNetAssemblyResponse);
  
  
  // Property: IsCVIDll
  //
  // Returns True if the file is a LabWindows/CVI DLL.
  //
  // This property returns an error if TestStand cannot locate the file when TestStand first attempts to access the file. Use the FileInformation.FileExists property to determine whether the file is available.
  //
  // FileInformation_Get_IsCVIDllRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: FileInformationInstance - The id of the FileInformation object.
  //
  // FileInformation_Get_IsCVIDllResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the file is a LabWindows/CVI DLL. 
  //
  rpc Get_IsCVIDll(FileInformation_Get_IsCVIDllRequest) returns (FileInformation_Get_IsCVIDllResponse);
  
  
}
message FileInformationInstance {
  // Specifies the handle of the FileInformation instance in the server.
  string id = 1;
}
message FileInformation_GetFileFormatVersionRequest {
  // The id of the FileInformation object.
  FileInformationInstance instance = 1;
}

message FileInformation_GetFileFormatVersionResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message FileInformation_GetFileVersionRequest {
  // The id of the FileInformation object.
  FileInformationInstance instance = 1;
}

message FileInformation_GetFileVersionResponse {
  // Returns True if the file has a file version. Otherwise, returns False.
  bool returnValue = 1;
  // Returns the version of the file. If no version is available, the method returns an empty string.
  string val = 2;
}

message FileInformation_GetFileFormatDisplayVersionRequest {
  // The id of the FileInformation object.
  FileInformationInstance instance = 1;
}

message FileInformation_GetFileFormatDisplayVersionResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message FileInformation_Get_FileExistsRequest {
  // The id of the FileInformation object.
  FileInformationInstance instance = 1;
}

message FileInformation_Get_FileExistsResponse {
  // Returns True if a file exists and is accessible at the path specified for this FileInformation object. This property is not cached. TestStand attempts to locate the file on disk every time you call this property.
  bool returnValue = 1;
}

message FileInformation_Get_IsCustomFileRequest {
  // The id of the FileInformation object.
  FileInformationInstance instance = 1;
}

message FileInformation_Get_IsCustomFileResponse {
  // Returns True if the file is a custom format file TestStand can load using a custom sequence file translator.
  bool returnValue = 1;
}

message FileInformation_Get_IsSequenceFileRequest {
  // The id of the FileInformation object.
  FileInformationInstance instance = 1;
}

message FileInformation_Get_IsSequenceFileResponse {
  // Returns True if the file is a TestStand sequence file or a custom sequence file TestStand can load with a custom sequence file translator.
  bool returnValue = 1;
}

message FileInformation_Get_IsPropertyObjectFileRequest {
  // The id of the FileInformation object.
  FileInformationInstance instance = 1;
}

message FileInformation_Get_IsPropertyObjectFileResponse {
  // Returns True if the file is a TestStand PropertyObjectFile.
  bool returnValue = 1;
}

message FileInformation_Get_FileWritingFormatRequest {
  // The id of the FileInformation object.
  FileInformationInstance instance = 1;
}

message FileInformation_Get_FileWritingFormatResponse {
  // Returns the format in which TestStand wrote a property object file, such as binary, INI, or XML.
  FileWritingFormats returnValue = 1;
}

message FileInformation_Get_PropertyObjectFileTypeRequest {
  // The id of the FileInformation object.
  FileInformationInstance instance = 1;
}

message FileInformation_Get_PropertyObjectFileTypeResponse {
  // Returns the file type of the file.
  PropertyObjectFileTypes returnValue = 1;
}

message FileInformation_Get_IsDotNetAssemblyRequest {
  // The id of the FileInformation object.
  FileInformationInstance instance = 1;
}

message FileInformation_Get_IsDotNetAssemblyResponse {
  // Returns True if the file is a .NET assembly.
  bool returnValue = 1;
}

message FileInformation_Get_IsCVIDllRequest {
  // The id of the FileInformation object.
  FileInformationInstance instance = 1;
}

message FileInformation_Get_IsCVIDllResponse {
  // Returns True if the file is a LabWindows/CVI DLL.
  bool returnValue = 1;
}

// Utility
//
// Use this class to perform utility functions. Use the Engine.Utility property to obtain an instance of this class.
//
service Utility {
  // Method: Escape
  //
  // Replaces special characters with the following escaping sequences:
  // @table(2,7,True,Sequence!Purpose!\n!New line!\r!Carriage return!\r\n!Carriage return/new line!\"!Quotation marks!\\!Backslash character!\t!Tab)
  //
  // Utility_EscapeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: UtilityInstance - The id of the Utility object.
  //    - stringToEscape: string - Specifies the string to escape.
  //    - options: int32 - Specifies the EscapingOptions constants to surround the returned string in quotation marks.
  //
  // Utility_EscapeResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The escaped string. 
  //
  rpc Escape(Utility_EscapeRequest) returns (Utility_EscapeResponse);
  
  
  // Method: Unescape
  //
  // Converts escaping sequences to special characters as follows:
  // @table(2,7,True,Sequence!Purpose!\n!New line!\r!Carriage return!\r\n!Carriage return/new line!\"!Quotation marks!\\!Backslash character!\t!Tab)
  //
  // Utility_UnescapeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: UtilityInstance - The id of the Utility object.
  //    - stringToUnescape: string - Specifies the string to unescape.
  //    - options: int32 - Specifies the EscapingOptions constants to remove surrounding quotation marks before unescaping the string.
  //
  // Utility_UnescapeResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The unescaped string. 
  //
  rpc Unescape(Utility_UnescapeRequest) returns (Utility_UnescapeResponse);
  
  
  // Method: ConvertFieldMappingToIndexArray
  //
  rpc ConvertFieldMappingToIndexArray(Utility_ConvertFieldMappingToIndexArrayRequest) returns (Utility_ConvertFieldMappingToIndexArrayResponse);
  
  
  // Method: ConvertFieldMappingToIndexArrayForRecord
  //
  rpc ConvertFieldMappingToIndexArrayForRecord(Utility_ConvertFieldMappingToIndexArrayForRecordRequest) returns (Utility_ConvertFieldMappingToIndexArrayForRecordResponse);
  
  
  // Method: ApplyFieldMappingToRecord
  //
  rpc ApplyFieldMappingToRecord(Utility_ApplyFieldMappingToRecordRequest) returns (Utility_ApplyFieldMappingToRecordResponse);
  
  
  // Method: NewParameterizedInputRecordStream
  //
  rpc NewParameterizedInputRecordStream(Utility_NewParameterizedInputRecordStreamRequest) returns (Utility_NewParameterizedInputRecordStreamResponse);
  
  
  // Method: NewConstantSweepParameterStrategy
  //
  rpc NewConstantSweepParameterStrategy(Utility_NewConstantSweepParameterStrategyRequest) returns (Utility_NewConstantSweepParameterStrategyResponse);
  
  
  // Method: NewArraySweepParameterStrategy
  //
  rpc NewArraySweepParameterStrategy(Utility_NewArraySweepParameterStrategyRequest) returns (Utility_NewArraySweepParameterStrategyResponse);
  
  
  // Method: NewStartStopStepSweepParameterStrategy
  //
  rpc NewStartStopStepSweepParameterStrategy(Utility_NewStartStopStepSweepParameterStrategyRequest) returns (Utility_NewStartStopStepSweepParameterStrategyResponse);
  
  
  // Method: NewStartStopStepSweepParameterStrategyInt64
  //
  rpc NewStartStopStepSweepParameterStrategyInt64(Utility_NewStartStopStepSweepParameterStrategyInt64Request) returns (Utility_NewStartStopStepSweepParameterStrategyInt64Response);
  
  
  // Method: NewStartStopStepSweepParameterStrategyUInt64
  //
  rpc NewStartStopStepSweepParameterStrategyUInt64(Utility_NewStartStopStepSweepParameterStrategyUInt64Request) returns (Utility_NewStartStopStepSweepParameterStrategyUInt64Response);
  
  
  // Method: NewStartStopNumPointsSweepParameterStrategy
  //
  rpc NewStartStopNumPointsSweepParameterStrategy(Utility_NewStartStopNumPointsSweepParameterStrategyRequest) returns (Utility_NewStartStopNumPointsSweepParameterStrategyResponse);
  
  
  // Method: NewStartStopNumPointsSweepParameterStrategyInt64
  //
  rpc NewStartStopNumPointsSweepParameterStrategyInt64(Utility_NewStartStopNumPointsSweepParameterStrategyInt64Request) returns (Utility_NewStartStopNumPointsSweepParameterStrategyInt64Response);
  
  
  // Method: NewStartStopNumPointsSweepParameterStrategyUInt64
  //
  rpc NewStartStopNumPointsSweepParameterStrategyUInt64(Utility_NewStartStopNumPointsSweepParameterStrategyUInt64Request) returns (Utility_NewStartStopNumPointsSweepParameterStrategyUInt64Response);
  
  
  // Method: CreateParameterizedInputRecordStreamFromParameters
  //
  rpc CreateParameterizedInputRecordStreamFromParameters(Utility_CreateParameterizedInputRecordStreamFromParametersRequest) returns (Utility_CreateParameterizedInputRecordStreamFromParametersResponse);
  
  
  // Method: CreateRecordFromParameters
  //
  rpc CreateRecordFromParameters(Utility_CreateRecordFromParametersRequest) returns (Utility_CreateRecordFromParametersResponse);
  
  
  // Method: CreateDebugLogs
  //
  // Creates TestStand logs.
  //
  // Call this method to create TestStand crash log and NIER dump files. After an application crash, this method creates the crash log in <TestStand_LocalAppData>\CrashLogs and the NIER dump file in <TestStand_LocalAppData>\NIERDump. The contents of these files depend on the settings you specify in the configuration INI file for the application.
  //
  // Utility_CreateDebugLogsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: UtilityInstance - The id of the Utility object.
  //    - reserved: int32 - Pass 0 for this parameter.
  //
  // Utility_CreateDebugLogsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc CreateDebugLogs(Utility_CreateDebugLogsRequest) returns (Utility_CreateDebugLogsResponse);
  
  
  // Method: GetSweepParameterErrors
  //
  rpc GetSweepParameterErrors(Utility_GetSweepParameterErrorsRequest) returns (Utility_GetSweepParameterErrorsResponse);
  
  
  // Method: GetSweepStepErrors
  //
  rpc GetSweepStepErrors(Utility_GetSweepStepErrorsRequest) returns (Utility_GetSweepStepErrorsResponse);
  
  
  // Method: LogUsageData
  //
  rpc LogUsageData(Utility_LogUsageDataRequest) returns (Utility_LogUsageDataResponse);
  
  
}
message UtilityInstance {
  // Specifies the handle of the Utility instance in the server.
  string id = 1;
}
message Utility_EscapeRequest {
  // The id of the Utility object.
  UtilityInstance instance = 1;
  // Specifies the string to escape.
  string stringToEscape = 2;
  // Specifies the EscapingOptions constants to surround the returned string in quotation marks.
  EscapingOptions options = 3;
}

message Utility_EscapeResponse {
  // The escaped string.
  string returnValue = 1;
}

message Utility_UnescapeRequest {
  // The id of the Utility object.
  UtilityInstance instance = 1;
  // Specifies the string to unescape.
  string stringToUnescape = 2;
  // Specifies the EscapingOptions constants to remove surrounding quotation marks before unescaping the string.
  EscapingOptions options = 3;
}

message Utility_UnescapeResponse {
  // The unescaped string.
  string returnValue = 1;
}

message Utility_ConvertFieldMappingToIndexArrayRequest {
  // The id of the Utility object.
  UtilityInstance instance = 1;
  string mapping = 2;
  int32 numFields = 3;
}

message Utility_ConvertFieldMappingToIndexArrayResponse {
  repeated int32 returnValue = 1;
}

message Utility_ConvertFieldMappingToIndexArrayForRecordRequest {
  // The id of the Utility object.
  UtilityInstance instance = 1;
  string mapping = 2;
  PropertyObjectInstance record = 3;
}

message Utility_ConvertFieldMappingToIndexArrayForRecordResponse {
  repeated int32 returnValue = 1;
}

message Utility_ApplyFieldMappingToRecordRequest {
  // The id of the Utility object.
  UtilityInstance instance = 1;
  string mapping = 2;
  PropertyObjectInstance record = 3;
}

message Utility_ApplyFieldMappingToRecordResponse {
  PropertyObjectInstance returnValue = 1;
}

message Utility_NewParameterizedInputRecordStreamRequest {
  // The id of the Utility object.
  UtilityInstance instance = 1;
}

message Utility_NewParameterizedInputRecordStreamResponse {
  ParameterizedInputRecordStreamInstance returnValue = 1;
}

message Utility_NewConstantSweepParameterStrategyRequest {
  // The id of the Utility object.
  UtilityInstance instance = 1;
  PropertyObjectInstance constant = 2;
  string specificationValue = 3;
}

message Utility_NewConstantSweepParameterStrategyResponse {
  SweepParameterStrategyInstance returnValue = 1;
}

message Utility_NewArraySweepParameterStrategyRequest {
  // The id of the Utility object.
  UtilityInstance instance = 1;
  PropertyObjectInstance values = 2;
  string specificationValue = 3;
}

message Utility_NewArraySweepParameterStrategyResponse {
  SweepParameterStrategyInstance returnValue = 1;
}

message Utility_NewStartStopStepSweepParameterStrategyRequest {
  // The id of the Utility object.
  UtilityInstance instance = 1;
  double start = 2;
  double stop = 3;
  double Step = 4;
  int32 scale = 5;
}

message Utility_NewStartStopStepSweepParameterStrategyResponse {
  SweepParameterStrategyInstance returnValue = 1;
}

message Utility_NewStartStopStepSweepParameterStrategyInt64Request {
  // The id of the Utility object.
  UtilityInstance instance = 1;
  int64 start = 2;
  int64 stop = 3;
  int64 Step = 4;
  int32 scale = 5;
}

message Utility_NewStartStopStepSweepParameterStrategyInt64Response {
  SweepParameterStrategyInstance returnValue = 1;
}

message Utility_NewStartStopStepSweepParameterStrategyUInt64Request {
  // The id of the Utility object.
  UtilityInstance instance = 1;
  uint64 start = 2;
  uint64 stop = 3;
  uint64 Step = 4;
  int32 scale = 5;
}

message Utility_NewStartStopStepSweepParameterStrategyUInt64Response {
  SweepParameterStrategyInstance returnValue = 1;
}

message Utility_NewStartStopNumPointsSweepParameterStrategyRequest {
  // The id of the Utility object.
  UtilityInstance instance = 1;
  double start = 2;
  double stop = 3;
  uint64 numPoints = 4;
  int32 scale = 5;
}

message Utility_NewStartStopNumPointsSweepParameterStrategyResponse {
  SweepParameterStrategyInstance returnValue = 1;
}

message Utility_NewStartStopNumPointsSweepParameterStrategyInt64Request {
  // The id of the Utility object.
  UtilityInstance instance = 1;
  int64 start = 2;
  int64 stop = 3;
  uint64 numPoints = 4;
  int32 scale = 5;
}

message Utility_NewStartStopNumPointsSweepParameterStrategyInt64Response {
  SweepParameterStrategyInstance returnValue = 1;
}

message Utility_NewStartStopNumPointsSweepParameterStrategyUInt64Request {
  // The id of the Utility object.
  UtilityInstance instance = 1;
  uint64 start = 2;
  uint64 stop = 3;
  uint64 numPoints = 4;
  int32 scale = 5;
}

message Utility_NewStartStopNumPointsSweepParameterStrategyUInt64Response {
  SweepParameterStrategyInstance returnValue = 1;
}

message Utility_CreateParameterizedInputRecordStreamFromParametersRequest {
  // The id of the Utility object.
  UtilityInstance instance = 1;
  SequenceContextInstance context = 2;
  PropertyObjectInstance parametersArray = 3;
}

message Utility_CreateParameterizedInputRecordStreamFromParametersResponse {
  ParameterizedInputRecordStreamInstance returnValue = 1;
}

message Utility_CreateRecordFromParametersRequest {
  // The id of the Utility object.
  UtilityInstance instance = 1;
  SequenceContextInstance context = 2;
  PropertyObjectInstance parametersArray = 3;
}

message Utility_CreateRecordFromParametersResponse {
  PropertyObjectInstance returnValue = 1;
}

message Utility_CreateDebugLogsRequest {
  // The id of the Utility object.
  UtilityInstance instance = 1;
  // Pass 0 for this parameter.
  int32 reserved = 2;
}

message Utility_CreateDebugLogsResponse {
}

message Utility_GetSweepParameterErrorsRequest {
  // The id of the Utility object.
  UtilityInstance instance = 1;
  PropertyObjectInstance parameter = 2;
  SequenceContextInstance context = 3;
}

message Utility_GetSweepParameterErrorsResponse {
  SweepErrorsInstance returnValue = 1;
}

message Utility_GetSweepStepErrorsRequest {
  // The id of the Utility object.
  UtilityInstance instance = 1;
  PropertyObjectInstance sweepStep = 2;
  SequenceContextInstance context = 3;
}

message Utility_GetSweepStepErrorsResponse {
  SweepErrorsInstance returnValue = 1;
}

message Utility_LogUsageDataRequest {
  // The id of the Utility object.
  UtilityInstance instance = 1;
  string usageKey = 2;
  string val = 3;
  int32 options = 4;
}

message Utility_LogUsageDataResponse {
}
message ParameterizedInputRecordStreamInstance {
  // Specifies the handle of the ParameterizedInputRecordStream instance in the server.
  string id = 1;
}

message SweepParameterStrategyInstance {
  // Specifies the handle of the SweepParameterStrategy instance in the server.
  string id = 1;
}

message SweepErrorsInstance {
  // Specifies the handle of the SweepErrors instance in the server.
  string id = 1;
}

// ParameterizedInputRecordStream
//
service ParameterizedInputRecordStream {
  // Method: AddParameter
  //
  rpc AddParameter(ParameterizedInputRecordStream_AddParameterRequest) returns (ParameterizedInputRecordStream_AddParameterResponse);
  
  
  // Method: Reset
  //
  rpc Reset(ParameterizedInputRecordStream_ResetRequest) returns (ParameterizedInputRecordStream_ResetResponse);
  
  

  // Property: Count
  //
  rpc Get_Count(ParameterizedInputRecordStream_Get_CountRequest) returns (ParameterizedInputRecordStream_Get_CountResponse);
  
  
  // Property: IsInfinite
  //
  rpc Get_IsInfinite(ParameterizedInputRecordStream_Get_IsInfiniteRequest) returns (ParameterizedInputRecordStream_Get_IsInfiniteResponse);
  
  
  // Property: Permute
  //
  rpc Set_Permute(ParameterizedInputRecordStream_Set_PermuteRequest) returns (ParameterizedInputRecordStream_Set_PermuteResponse);
  rpc Get_Permute(ParameterizedInputRecordStream_Get_PermuteRequest) returns (ParameterizedInputRecordStream_Get_PermuteResponse);
  
  
  // Property: CurrentIteration
  //
  rpc Get_CurrentIteration(ParameterizedInputRecordStream_Get_CurrentIterationRequest) returns (ParameterizedInputRecordStream_Get_CurrentIterationResponse);
  
  
}
message ParameterizedInputRecordStream_AddParameterRequest {
  // The id of the ParameterizedInputRecordStream object.
  ParameterizedInputRecordStreamInstance instance = 1;
  string parameterName = 2;
  SweepParameterStrategyInstance strategy = 3;
}

message ParameterizedInputRecordStream_AddParameterResponse {
}

message ParameterizedInputRecordStream_ResetRequest {
  // The id of the ParameterizedInputRecordStream object.
  ParameterizedInputRecordStreamInstance instance = 1;
}

message ParameterizedInputRecordStream_ResetResponse {
}

message ParameterizedInputRecordStream_Get_CountRequest {
  // The id of the ParameterizedInputRecordStream object.
  ParameterizedInputRecordStreamInstance instance = 1;
}

message ParameterizedInputRecordStream_Get_CountResponse {
  uint64 returnValue = 1;
}

message ParameterizedInputRecordStream_Get_IsInfiniteRequest {
  // The id of the ParameterizedInputRecordStream object.
  ParameterizedInputRecordStreamInstance instance = 1;
}

message ParameterizedInputRecordStream_Get_IsInfiniteResponse {
  bool returnValue = 1;
}

message ParameterizedInputRecordStream_Set_PermuteRequest {
  // The id of the ParameterizedInputRecordStream object.
  ParameterizedInputRecordStreamInstance instance = 1;
  bool val = 2;
}

message ParameterizedInputRecordStream_Set_PermuteResponse {
}

message ParameterizedInputRecordStream_Get_PermuteRequest {
  // The id of the ParameterizedInputRecordStream object.
  ParameterizedInputRecordStreamInstance instance = 1;
}

message ParameterizedInputRecordStream_Get_PermuteResponse {
  bool returnValue = 1;
}

message ParameterizedInputRecordStream_Get_CurrentIterationRequest {
  // The id of the ParameterizedInputRecordStream object.
  ParameterizedInputRecordStreamInstance instance = 1;
}

message ParameterizedInputRecordStream_Get_CurrentIterationResponse {
  string returnValue = 1;
}

// SweepParameterStrategy
//
service SweepParameterStrategy {
  // Method: Reset
  //
  rpc Reset(SweepParameterStrategy_ResetRequest) returns (SweepParameterStrategy_ResetResponse);
  
  
  // Method: Increment
  //
  rpc Increment(SweepParameterStrategy_IncrementRequest) returns (SweepParameterStrategy_IncrementResponse);
  
  
  // Method: Skip
  //
  rpc Skip(SweepParameterStrategy_SkipRequest) returns (SweepParameterStrategy_SkipResponse);
  
  
  // Method: GetCurrentValue
  //
  rpc GetCurrentValue(SweepParameterStrategy_GetCurrentValueRequest) returns (SweepParameterStrategy_GetCurrentValueResponse);
  
  
  // Method: GetBooleanValues
  //
  rpc GetBooleanValues(SweepParameterStrategy_GetBooleanValuesRequest) returns (SweepParameterStrategy_GetBooleanValuesResponse);
  
  
  // Method: GetFloat64Values
  //
  rpc GetFloat64Values(SweepParameterStrategy_GetFloat64ValuesRequest) returns (SweepParameterStrategy_GetFloat64ValuesResponse);
  
  
  // Method: GetInteger64Values
  //
  rpc GetInteger64Values(SweepParameterStrategy_GetInteger64ValuesRequest) returns (SweepParameterStrategy_GetInteger64ValuesResponse);
  
  
  // Method: GetUnsignedInteger64Values
  //
  rpc GetUnsignedInteger64Values(SweepParameterStrategy_GetUnsignedInteger64ValuesRequest) returns (SweepParameterStrategy_GetUnsignedInteger64ValuesResponse);
  
  
  // Method: GetStringValues
  //
  rpc GetStringValues(SweepParameterStrategy_GetStringValuesRequest) returns (SweepParameterStrategy_GetStringValuesResponse);
  
  

  // Property: Type
  //
  rpc Get_Type(SweepParameterStrategy_Get_TypeRequest) returns (SweepParameterStrategy_Get_TypeResponse);
  
  
  // Property: IsDone
  //
  rpc Get_IsDone(SweepParameterStrategy_Get_IsDoneRequest) returns (SweepParameterStrategy_Get_IsDoneResponse);
  
  
  // Property: Count
  //
  rpc Get_Count(SweepParameterStrategy_Get_CountRequest) returns (SweepParameterStrategy_Get_CountResponse);
  
  
  // Property: IsInfinite
  //
  rpc Get_IsInfinite(SweepParameterStrategy_Get_IsInfiniteRequest) returns (SweepParameterStrategy_Get_IsInfiniteResponse);
  
  
}
message SweepParameterStrategy_ResetRequest {
  // The id of the SweepParameterStrategy object.
  SweepParameterStrategyInstance instance = 1;
}

message SweepParameterStrategy_ResetResponse {
}

message SweepParameterStrategy_IncrementRequest {
  // The id of the SweepParameterStrategy object.
  SweepParameterStrategyInstance instance = 1;
}

message SweepParameterStrategy_IncrementResponse {
}

message SweepParameterStrategy_SkipRequest {
  // The id of the SweepParameterStrategy object.
  SweepParameterStrategyInstance instance = 1;
  uint64 numValues = 2;
}

message SweepParameterStrategy_SkipResponse {
  uint64 returnValue = 1;
}

message SweepParameterStrategy_GetCurrentValueRequest {
  // The id of the SweepParameterStrategy object.
  SweepParameterStrategyInstance instance = 1;
  PropertyObjectInstance val = 2;
}

message SweepParameterStrategy_GetCurrentValueResponse {
  PropertyObjectInstance val = 1;
}

message SweepParameterStrategy_GetBooleanValuesRequest {
  // The id of the SweepParameterStrategy object.
  SweepParameterStrategyInstance instance = 1;
  uint64 startingOffset = 2;
  uint64 numberOfValues = 3;
}

message SweepParameterStrategy_GetBooleanValuesResponse {
  repeated bool returnValue = 1;
}

message SweepParameterStrategy_GetFloat64ValuesRequest {
  // The id of the SweepParameterStrategy object.
  SweepParameterStrategyInstance instance = 1;
  uint64 startingOffset = 2;
  uint64 numberOfValues = 3;
}

message SweepParameterStrategy_GetFloat64ValuesResponse {
  repeated double returnValue = 1;
}

message SweepParameterStrategy_GetInteger64ValuesRequest {
  // The id of the SweepParameterStrategy object.
  SweepParameterStrategyInstance instance = 1;
  uint64 startingOffset = 2;
  uint64 numberOfValues = 3;
}

message SweepParameterStrategy_GetInteger64ValuesResponse {
  repeated int64 returnValue = 1;
}

message SweepParameterStrategy_GetUnsignedInteger64ValuesRequest {
  // The id of the SweepParameterStrategy object.
  SweepParameterStrategyInstance instance = 1;
  uint64 startingOffset = 2;
  uint64 numberOfValues = 3;
}

message SweepParameterStrategy_GetUnsignedInteger64ValuesResponse {
  repeated uint64 returnValue = 1;
}

message SweepParameterStrategy_GetStringValuesRequest {
  // The id of the SweepParameterStrategy object.
  SweepParameterStrategyInstance instance = 1;
  uint64 startingOffset = 2;
  uint64 numberOfValues = 3;
}

message SweepParameterStrategy_GetStringValuesResponse {
  repeated string returnValue = 1;
}

message SweepParameterStrategy_Get_TypeRequest {
  // The id of the SweepParameterStrategy object.
  SweepParameterStrategyInstance instance = 1;
}

message SweepParameterStrategy_Get_TypeResponse {
  PropertyValueTypes returnValue = 1;
}

message SweepParameterStrategy_Get_IsDoneRequest {
  // The id of the SweepParameterStrategy object.
  SweepParameterStrategyInstance instance = 1;
}

message SweepParameterStrategy_Get_IsDoneResponse {
  bool returnValue = 1;
}

message SweepParameterStrategy_Get_CountRequest {
  // The id of the SweepParameterStrategy object.
  SweepParameterStrategyInstance instance = 1;
}

message SweepParameterStrategy_Get_CountResponse {
  uint64 returnValue = 1;
}

message SweepParameterStrategy_Get_IsInfiniteRequest {
  // The id of the SweepParameterStrategy object.
  SweepParameterStrategyInstance instance = 1;
}

message SweepParameterStrategy_Get_IsInfiniteResponse {
  bool returnValue = 1;
}

// SweepErrors
//
service SweepErrors {
  // Property: Item
  //
  rpc Get_Item(SweepErrors_Get_ItemRequest) returns (SweepErrors_Get_ItemResponse);
  
  
  // Property: Count
  //
  rpc Get_Count(SweepErrors_Get_CountRequest) returns (SweepErrors_Get_CountResponse);
  
  
}
message SweepErrors_Get_ItemRequest {
  // The id of the SweepErrors object.
  SweepErrorsInstance instance = 1;
  optional int32 index = 2;
}

message SweepErrors_Get_ItemResponse {
  SweepErrorInstance returnValue = 1;
}

message SweepErrors_Get_CountRequest {
  // The id of the SweepErrors object.
  SweepErrorsInstance instance = 1;
}

message SweepErrors_Get_CountResponse {
  int32 returnValue = 1;
}
message SweepErrorInstance {
  // Specifies the handle of the SweepError instance in the server.
  string id = 1;
}

// SweepError
//
service SweepError {
  // Property: Type
  //
  rpc Get_Type(SweepError_Get_TypeRequest) returns (SweepError_Get_TypeResponse);
  
  
  // Property: SummaryMessage
  //
  rpc Get_SummaryMessage(SweepError_Get_SummaryMessageRequest) returns (SweepError_Get_SummaryMessageResponse);
  
  
  // Property: Message
  //
  rpc Get_Message(SweepError_Get_MessageRequest) returns (SweepError_Get_MessageResponse);
  
  
  // Property: Tooltip
  //
  rpc Get_Tooltip(SweepError_Get_TooltipRequest) returns (SweepError_Get_TooltipResponse);
  
  
  // Property: ParameterIndex
  //
  rpc Get_ParameterIndex(SweepError_Get_ParameterIndexRequest) returns (SweepError_Get_ParameterIndexResponse);
  
  
  // Property: Location
  //
  rpc Get_Location(SweepError_Get_LocationRequest) returns (SweepError_Get_LocationResponse);
  
  
}
message SweepError_Get_TypeRequest {
  // The id of the SweepError object.
  SweepErrorInstance instance = 1;
}

message SweepError_Get_TypeResponse {
  SweepErrorType returnValue = 1;
}

message SweepError_Get_SummaryMessageRequest {
  // The id of the SweepError object.
  SweepErrorInstance instance = 1;
}

message SweepError_Get_SummaryMessageResponse {
  string returnValue = 1;
}

message SweepError_Get_MessageRequest {
  // The id of the SweepError object.
  SweepErrorInstance instance = 1;
}

message SweepError_Get_MessageResponse {
  string returnValue = 1;
}

message SweepError_Get_TooltipRequest {
  // The id of the SweepError object.
  SweepErrorInstance instance = 1;
}

message SweepError_Get_TooltipResponse {
  string returnValue = 1;
}

message SweepError_Get_ParameterIndexRequest {
  // The id of the SweepError object.
  SweepErrorInstance instance = 1;
}

message SweepError_Get_ParameterIndexResponse {
  int32 returnValue = 1;
}

message SweepError_Get_LocationRequest {
  // The id of the SweepError object.
  SweepErrorInstance instance = 1;
}

message SweepError_Get_LocationResponse {
  string returnValue = 1;
}

// ResultLogger
//
// ResultLogger objects write TestStand results to a file. Use a ResultLog object to read the results from the file.
//
service ResultLogger {
  // Method: Open
  //
  // Opens the results file you specify for writing and creates the file if it does not exist.
  //
  // ResultLogger_OpenRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ResultLoggerInstance - The id of the ResultLogger object.
  //    - isOnTheFly: bool - Specifies to log results on-the-fly by calling the ResultLogger.LogOnTheFlyStepResults method. If you pass True, TestStand does not log results attached as subproperties of the uutResult parameter of the ResultLogger.LogPostUUT method because TestStand logs those values when you call the ResultLogger.LogOnTheFlyStepResults method. 
  //    - logInSeparateThread: bool - Specifies to write the results to the file from a separate thread. If you pass True, the ResultLogger.LogBatchDone, ResultLogger.LogBatchStart, ResultLogger.LogBegin, ResultLogger.LogEnd, ResultLogger.LogOnTheFlyStepResults, ResultLogger.LogPostBatch, ResultLogger.LogPostUUT, ResultLogger.LogPreBatch, ResultLogger.LogPreUUT, ResultLogger.LogUUTDone, and ResultLogger.LogUUTStart methods return immediately after queuing data to the writing thread.
  //
  // ResultLogger_OpenResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Open(ResultLogger_OpenRequest) returns (ResultLogger_OpenResponse);
  
  
  // Method: Close
  //
  // Completes all writing to the TestStand results (.tsr) file and closes the file.
  //
  // ResultLogger_CloseRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ResultLoggerInstance - The id of the ResultLogger object.
  //
  // ResultLogger_CloseResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Close(ResultLogger_CloseRequest) returns (ResultLogger_CloseResponse);
  
  
  // Method: LogBegin
  //
  // Logs parameters to the Model Plugin - Begin entry point.
  //
  // ResultLogger_LogBeginRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ResultLoggerInstance - The id of the ResultLogger object.
  //    - parentThread: ThreadInstance - Specifies the parent controller thread of the test socket thread. Pass NULL if no such thread exists.
  //    - modelThreadType: PropertyObjectInstance - Pass an instance of an NI_ModelThreadType type that describes the thread parameter.
  //    - modelData: PropertyObjectInstance - Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named ModelType using the NI_ModelType type. For controller threads, this parameter must also contain a field named TestSockets using a container array type, where each element in the array contains a field named MainSequenceResults using an object reference type.
  //    - processModelClientPath: string - Specifies the absolute path of the process model client file. Pass an empty string if no such file exists.
  //    - numberOfSockets: int32 - Specifies the number of test sockets in the execution.
  //    - socketIndex: int32 - Specifies the test socket index for the thread parameter.
  //
  // ResultLogger_LogBeginResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc LogBegin(ResultLogger_LogBeginRequest) returns (ResultLogger_LogBeginResponse);
  
  
  // Method: LogPreBatch
  //
  // Logs parameters to the Model Plugin - Pre Batch entry point.
  //
  // ResultLogger_LogPreBatchRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ResultLoggerInstance - The id of the ResultLogger object.
  //    - modelThreadType: PropertyObjectInstance - Pass an instance of an NI_ModelThreadType type that describes the thread parameter.
  //    - modelData: PropertyObjectInstance - Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named ModelType using the NI_ModelType type. For controller threads, this parameter must also contain a field named TestSockets using a container array type, where each element in the array contains a field named MainSequenceResults using an object reference type.
  //    - processModelClientPath: string - Pass the absolute path of the process model client file or an empty string if none exists.
  //    - startDate: PropertyObjectInstance - Specifies an instance of the DateDetails custom data type that indicates the date on which the batch test began.
  //    - startTime: PropertyObjectInstance - Specifies an instance of the TimeDetails custom data type that indicates the time at which the batch test began.
  //    - uut: PropertyObjectInstance - Specifies the container that describes the batch.
  //    - continueTesting: bool - Specifies whether testing continues to the next batch.
  //      
  //
  // ResultLogger_LogPreBatchResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc LogPreBatch(ResultLogger_LogPreBatchRequest) returns (ResultLogger_LogPreBatchResponse);
  
  
  // Method: LogBatchStart
  //
  // Logs parameters to the Model Plugin - Batch Start entry point.
  //
  // Model Plugin - Batch Start
  //
  // ResultLogger_LogBatchStartRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ResultLoggerInstance - The id of the ResultLogger object.
  //    - modelThreadType: PropertyObjectInstance - Pass an instance of an NI_ModelThreadType type that describes the thread parameter.
  //    - modelData: PropertyObjectInstance - Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named ModelType using the NI_ModelType type. For controller threads, this parameter must also contain a field named TestSockets using a container array type, where each element in the array contains a field named MainSequenceResults using an object reference type.
  //    - processModelClientPath: string - Specifies the absolute path of the process model client file. Pass an empty string if no such file exists.
  //    - startDate: PropertyObjectInstance - Specifies an instance of the DateDetails custom data type that indicates the date on which the batch test began.
  //    - startTime: PropertyObjectInstance - Specifies an instance of the TimeDetails custom data type that indicates the time at which the batch test began.
  //    - uut: PropertyObjectInstance - Specifies the container that describes the batch.
  //
  // ResultLogger_LogBatchStartResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc LogBatchStart(ResultLogger_LogBatchStartRequest) returns (ResultLogger_LogBatchStartResponse);
  
  
  // Method: LogPreUUT
  //
  // Logs parameters to the Model Plugin - Pre UUT entry point.
  //
  // ResultLogger_LogPreUUTRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ResultLoggerInstance - The id of the ResultLogger object.
  //    - modelThreadType: PropertyObjectInstance - Pass an instance of an NI_ModelThreadType type that describes the thread parameter.
  //    - modelData: PropertyObjectInstance - Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named ModelType using the NI_ModelType type. For controller threads, this parameter must also contain a field named TestSockets using a container array type, where each element in the array contains a field named MainSequenceResults using an object reference type.
  //    - processModelClientPath: string - Specifies the absolute path of the process model client file. Pass an empty string if no such file exists.
  //    - startDate: PropertyObjectInstance - Specifies an instance of the DateDetails custom data type that indicates the date on which the UUT test began.
  //    - startTime: PropertyObjectInstance - Specifies an instance of the TimeDetails custom data type that indicates the time at which the UUT test began.
  //    - uut: PropertyObjectInstance - Specifies the container that describes the UUT.
  //    - continueTesting: bool - Specifies whether testing continues to the next UUT.
  //
  // ResultLogger_LogPreUUTResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc LogPreUUT(ResultLogger_LogPreUUTRequest) returns (ResultLogger_LogPreUUTResponse);
  
  
  // Method: LogUUTStart
  //
  // Logs parameters to the Model Plugin - UUT Start entry point.
  //
  // ResultLogger_LogUUTStartRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ResultLoggerInstance - The id of the ResultLogger object.
  //    - modelThreadType: PropertyObjectInstance - Pass an instance of an NI_ModelThreadType type that describes the thread parameter.
  //    - modelData: PropertyObjectInstance - Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named ModelType using the NI_ModelType type. For controller threads, this parameter must also contain a field named TestSockets using a container array type, where each element in the array contains a field named MainSequenceResults using an object reference type.
  //    - processModelClientPath: string - Specifies the absolute path of the process model client file. Pass an empty string if no such file exists.
  //    - startDate: PropertyObjectInstance - Specifies an instance of the DateDetails custom data type that indicates the date on which the UUT test began.
  //    - startTime: PropertyObjectInstance - Specifies an instance of the TimeDetails custom data type that indicates the time at which the UUT test began.
  //    - uut: PropertyObjectInstance - Specifies the container that describes the UUT.
  //
  // ResultLogger_LogUUTStartResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc LogUUTStart(ResultLogger_LogUUTStartRequest) returns (ResultLogger_LogUUTStartResponse);
  
  
  // Method: LogOnTheFlyStepResults
  //
  // Logs parameters to the Model Plugin - OnTheFly Step Results entry point.
  //
  // ResultLogger_LogOnTheFlyStepResultsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ResultLoggerInstance - The id of the ResultLogger object.
  //    - uut: PropertyObjectInstance - Specifies the container that describes the UUT.
  //    - steps: PropertyObjectInstance - Pass the Steps parameter TestStand passed to the PostResults callback.
  //    - results: PropertyObjectInstance - Pass the Results parameter TestStand passed to the PostResults callback.
  //    - callbackNames: PropertyObjectInstance - Pass the CallbackNames parameter TestStand passed to the PostResults callback.
  //    - parentIds: PropertyObjectInstance - Pass the ParentIds parameter TestStand passed to the PostResults callback.
  //
  // ResultLogger_LogOnTheFlyStepResultsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc LogOnTheFlyStepResults(ResultLogger_LogOnTheFlyStepResultsRequest) returns (ResultLogger_LogOnTheFlyStepResultsResponse);
  
  
  // Method: LogUUTDone
  //
  // Logs parameters to the Model Plugin - UUT Done entry point.
  //
  // Model Plugin - UUT Done
  //
  // ResultLogger_LogUUTDoneRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ResultLoggerInstance - The id of the ResultLogger object.
  //    - modelData: PropertyObjectInstance - Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named ModelType using the NI_ModelType type. For controller threads, this parameter must also contain a field named TestSockets using a container array type, where each element in the array contains a field named MainSequenceResults using an object reference type.
  //    - uut: PropertyObjectInstance - Specifies the container that describes the UUT.
  //    - uutStatus: string - Specifies the result status for the UUT.
  //    - uutResult: PropertyObjectInstance - Pass the result of the sequence call that invoked the MainSequence in the client sequence file.
  //
  // ResultLogger_LogUUTDoneResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc LogUUTDone(ResultLogger_LogUUTDoneRequest) returns (ResultLogger_LogUUTDoneResponse);
  
  
  // Method: LogPostUUT
  //
  // Logs parameters to the Model Plugin - Post UUT entry point.
  //
  // Model Plugin - Post UUT
  //
  // ResultLogger_LogPostUUTRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ResultLoggerInstance - The id of the ResultLogger object.
  //    - modelData: PropertyObjectInstance - Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named ModelType using the NI_ModelType type. For controller threads, this parameter must also contain a field named TestSockets using a container array type, where each element in the array contains a field named MainSequenceResults using an object reference type.
  //    - uut: PropertyObjectInstance - Specifies the container that describes the UUT.
  //    - uutStatus: string - Specifies the result status for the UUT.
  //
  // ResultLogger_LogPostUUTResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc LogPostUUT(ResultLogger_LogPostUUTRequest) returns (ResultLogger_LogPostUUTResponse);
  
  
  // Method: LogBatchDone
  //
  // Logs parameters to the Model Plugin - Batch Done entry point.
  //
  // ResultLogger_LogBatchDoneRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ResultLoggerInstance - The id of the ResultLogger object.
  //    - modelData: PropertyObjectInstance - Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named ModelType using the NI_ModelType type. For controller threads, this parameter must also contain a field named TestSockets using a container array type, where each element in the array contains a field named MainSequenceResults using an object reference type.
  //    - uut: PropertyObjectInstance - Specifies the container that describes the UUT.
  //    - uutStatus: string - Specifies the result status for the UUT.
  //
  // ResultLogger_LogBatchDoneResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc LogBatchDone(ResultLogger_LogBatchDoneRequest) returns (ResultLogger_LogBatchDoneResponse);
  
  
  // Method: LogPostBatch
  //
  // Logs parameters to the Model Plugin - Post Batch entry point.
  //
  // Model Plugin - Post Batch
  //
  // ResultLogger_LogPostBatchRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ResultLoggerInstance - The id of the ResultLogger object.
  //    - modelData: PropertyObjectInstance - Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named ModelType using the NI_ModelType type. For controller threads, this parameter must also contain a field named TestSockets using a container array type, where each element in the array contains a field named MainSequenceResults using an object reference type.
  //    - uut: PropertyObjectInstance - Specifies the container that describes the UUT.
  //    - uutStatus: string - Specifies the result status for the UUT.
  //
  // ResultLogger_LogPostBatchResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc LogPostBatch(ResultLogger_LogPostBatchRequest) returns (ResultLogger_LogPostBatchResponse);
  
  
  // Method: LogEnd
  //
  // Logs parameters to the Model Plugin - End entry point.
  //
  // Model Plugin - End
  //
  // ResultLogger_LogEndRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ResultLoggerInstance - The id of the ResultLogger object.
  //    - modelData: PropertyObjectInstance - Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named ModelType using the NI_ModelType type. For controller threads, this parameter must also contain a field named TestSockets using a container array type, where each element in the array contains a field named MainSequenceResults using an object reference type.
  //
  // ResultLogger_LogEndResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc LogEnd(ResultLogger_LogEndRequest) returns (ResultLogger_LogEndResponse);
  
  
  // Method: ContinueInNewFile
  //
  // Completes writing to the current TestStand results (.tsr) file, closes the file, and then opens a new file for future writing.
  //
  // If a Begin record does not have a corresponding End record, this method creates an End record in the old file and copies the Begin record to the new file. This method deletes any records for in-progress UUTs or batches from the old file and copies the records to the new file.
  //
  // ResultLogger_ContinueInNewFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ResultLoggerInstance - The id of the ResultLogger object.
  //
  // ResultLogger_ContinueInNewFileResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ContinueInNewFile(ResultLogger_ContinueInNewFileRequest) returns (ResultLogger_ContinueInNewFileResponse);
  
  
  // Method: Flush
  //
  // Completes all pending writes to the TestStand results (.tsr) file before returning, including writes queued to the writing thread if you enabled the logInSeparateThread parameter of the ResultLogger.Open method.
  //
  // ResultLogger_FlushRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ResultLoggerInstance - The id of the ResultLogger object.
  //
  // ResultLogger_FlushResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Flush(ResultLogger_FlushRequest) returns (ResultLogger_FlushResponse);
  
  
  // Method: DeferrableRename
  //
  // Calling this method is similar to assigning a new value to the ResultLogger.Path property. However, when you use this method, the ResultLogger object does not update the path property and execution continues if renaming the underlying file fails, such as in the case of remote file systems that do not support the rename operation. If the initial renaming operation fails, the ResultLogger object defers updating the path property. The ResultLogger object updates the path property and the name of the file on disk when the ResultLogger object closes or the ResultLogger.ContinueInNewFile method is invoked. If at this point the rename operation remains impossible, the ResultLogger object simulates renaming the file by copying the file to the new path and deleting the existing file.
  // While a deferred renaming operation is pending, if the value of the ResultLogger.Path property changes or an additional call to the ResultLogger.DeferrableRename method occurs, the ResultLogger object cancels any previously deferred renaming operation.
  //
  // National Instruments recommends using the ResultLogger.Path property directly instead of the ResultLogger.DeferrableRename method whenever possible. The ResultLogger.DeferrableRename method is generally useful only in situations in which you repeatedly rename a single file to indicate status. For example, the default offline results generator process model plug-in uses the ResultLogger.DeferrableRename method to update the range of UUT serial numbers stored in the TestStand results (.tsr) file as UUTs execute.
  //
  // ResultLogger_DeferrableRenameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ResultLoggerInstance - The id of the ResultLogger object.
  //
  // ResultLogger_DeferrableRenameResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - A return value of True indicates that the rename operation succeeded and that the ResultLogger object updated the corresponding path property and renamed the TestStand results (.tsr) file on disk. A return value of False indicates that the rename operation failed and that the ResultLogger object did not update the corresponding path property and deferred renaming the file. 
  //
  rpc DeferrableRename(ResultLogger_DeferrableRenameRequest) returns (ResultLogger_DeferrableRenameResponse);
  
  
  // Method: GetFilesWritten
  //
  // Returns the paths of all the completed offline results (.tsr) files TestStand recorded. You can also use this method to clear the internal record of completed paths.
  //
  // ResultLogger_GetFilesWrittenRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ResultLoggerInstance - The id of the ResultLogger object.
  //
  // ResultLogger_GetFilesWrittenResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc GetFilesWritten(ResultLogger_GetFilesWrittenRequest) returns (ResultLogger_GetFilesWrittenResponse);
  
  

  // Property: Path
  //
  // Specifies the name of the TestStand results (.tsr) file on disk. You can change the path while logging to rename the file to best describe the contents of the file.
  //
  // ResultLogger_Set_PathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ResultLoggerInstance - The id of the ResultLogger object.
  //    - val: string - Specifies the name of the TestStand results (.tsr) file on disk. You can change the path while logging to rename the file to best describe the contents of the file. 
  //
  // ResultLogger_Set_PathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ResultLogger_Get_PathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ResultLoggerInstance - The id of the ResultLogger object.
  //
  // ResultLogger_Get_PathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the name of the TestStand results (.tsr) file on disk. You can change the path while logging to rename the file to best describe the contents of the file. 
  //
  rpc Set_Path(ResultLogger_Set_PathRequest) returns (ResultLogger_Set_PathResponse);
  rpc Get_Path(ResultLogger_Get_PathRequest) returns (ResultLogger_Get_PathResponse);
  
  
  // Property: RecordFilesWritten
  //
  // Specifies to store the paths of all offline results (.tsr) files when TestStand completes writing the file. The default value is False, which specifies to not record the filepaths. When this property is True, the internal record of completed files grows without bound unless you periodically pass True to the ResultLogger.GetFilesWritten method to clear the internal record.
  //
  // Changing the value of the ResultLogger.RecordFilesWritten property from True to False only prevents TestStand from recording additional completed files and does not clear the internal record of files already completed. Call the ResultLogger.GetFilesWritten method to obtain or clear the list of complete offline results files.
  // You can also modify the PreUUTLoop callback to record completed files.
  //
  // ResultLogger_Set_RecordFilesWrittenRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ResultLoggerInstance - The id of the ResultLogger object.
  //    - val: bool - Specifies to store the paths of all offline results (.tsr) files when TestStand completes writing the file. The default value is False, which specifies to not record the filepaths. When this property is True, the internal record of completed files grows without bound unless you periodically pass True to the ResultLogger.GetFilesWritten method to clear the internal record. 
  //
  // ResultLogger_Set_RecordFilesWrittenResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ResultLogger_Get_RecordFilesWrittenRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ResultLoggerInstance - The id of the ResultLogger object.
  //
  // ResultLogger_Get_RecordFilesWrittenResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies to store the paths of all offline results (.tsr) files when TestStand completes writing the file. The default value is False, which specifies to not record the filepaths. When this property is True, the internal record of completed files grows without bound unless you periodically pass True to the ResultLogger.GetFilesWritten method to clear the internal record. 
  //
  rpc Set_RecordFilesWritten(ResultLogger_Set_RecordFilesWrittenRequest) returns (ResultLogger_Set_RecordFilesWrittenResponse);
  rpc Get_RecordFilesWritten(ResultLogger_Get_RecordFilesWrittenRequest) returns (ResultLogger_Get_RecordFilesWrittenResponse);
  
  
}
message ResultLoggerInstance {
  // Specifies the handle of the ResultLogger instance in the server.
  string id = 1;
}
message ResultLogger_OpenRequest {
  // The id of the ResultLogger object.
  ResultLoggerInstance instance = 1;
  // Specifies the absolute path of the file in which to store results.
  string Path = 2;
  // Specifies to log results on-the-fly by calling the ResultLogger.LogOnTheFlyStepResults method. If you pass True, TestStand does not log results attached as subproperties of the uutResult parameter of the ResultLogger.LogPostUUT method because TestStand logs those values when you call the ResultLogger.LogOnTheFlyStepResults method.
  bool isOnTheFly = 3;
  // Specifies to write the results to the file from a separate thread. If you pass True, the ResultLogger.LogBatchDone, ResultLogger.LogBatchStart, ResultLogger.LogBegin, ResultLogger.LogEnd, ResultLogger.LogOnTheFlyStepResults, ResultLogger.LogPostBatch, ResultLogger.LogPostUUT, ResultLogger.LogPreBatch, ResultLogger.LogPreUUT, ResultLogger.LogUUTDone, and ResultLogger.LogUUTStart methods return immediately after queuing data to the writing thread.
  bool logInSeparateThread = 4;
}

message ResultLogger_OpenResponse {
}

message ResultLogger_CloseRequest {
  // The id of the ResultLogger object.
  ResultLoggerInstance instance = 1;
}

message ResultLogger_CloseResponse {
}

message ResultLogger_LogBeginRequest {
  // The id of the ResultLogger object.
  ResultLoggerInstance instance = 1;
  // Specifies the process model controller or test socket thread that invokes this method.
  ThreadInstance Thread = 2;
  // Specifies the parent controller thread of the test socket thread. Pass NULL if no such thread exists.
  ThreadInstance parentThread = 3;
  // Pass an instance of an NI_ModelThreadType type that describes the thread parameter.
  PropertyObjectInstance modelThreadType = 4;
  // Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named ModelType using the NI_ModelType type. For controller threads, this parameter must also contain a field named TestSockets using a container array type, where each element in the array contains a field named MainSequenceResults using an object reference type.
  PropertyObjectInstance modelData = 5;
  // Specifies the absolute path of the process model client file. Pass an empty string if no such file exists.
  string processModelClientPath = 6;
  // Specifies the number of test sockets in the execution.
  int32 numberOfSockets = 7;
  // Specifies the test socket index for the thread parameter.
  int32 socketIndex = 8;
}

message ResultLogger_LogBeginResponse {
}

message ResultLogger_LogPreBatchRequest {
  // The id of the ResultLogger object.
  ResultLoggerInstance instance = 1;
  // Specifies the process model controller or test socket thread that invokes this method.
  ThreadInstance Thread = 2;
  // Pass an instance of an NI_ModelThreadType type that describes the thread parameter.
  PropertyObjectInstance modelThreadType = 3;
  // Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named ModelType using the NI_ModelType type. For controller threads, this parameter must also contain a field named TestSockets using a container array type, where each element in the array contains a field named MainSequenceResults using an object reference type.
  PropertyObjectInstance modelData = 4;
  // Pass the absolute path of the process model client file or an empty string if none exists.
  string processModelClientPath = 5;
  // Specifies an instance of the DateDetails custom data type that indicates the date on which the batch test began.
  PropertyObjectInstance startDate = 6;
  // Specifies an instance of the TimeDetails custom data type that indicates the time at which the batch test began.
  PropertyObjectInstance startTime = 7;
  // Specifies the container that describes the batch.
  PropertyObjectInstance uut = 8;
  // Specifies whether testing continues to the next batch.
  // 
  bool continueTesting = 9;
}

message ResultLogger_LogPreBatchResponse {
}

message ResultLogger_LogBatchStartRequest {
  // The id of the ResultLogger object.
  ResultLoggerInstance instance = 1;
  // Specifies the process model controller or test socket thread that invokes this method.
  ThreadInstance Thread = 2;
  // Pass an instance of an NI_ModelThreadType type that describes the thread parameter.
  PropertyObjectInstance modelThreadType = 3;
  // Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named ModelType using the NI_ModelType type. For controller threads, this parameter must also contain a field named TestSockets using a container array type, where each element in the array contains a field named MainSequenceResults using an object reference type.
  PropertyObjectInstance modelData = 4;
  // Specifies the absolute path of the process model client file. Pass an empty string if no such file exists.
  string processModelClientPath = 5;
  // Specifies an instance of the DateDetails custom data type that indicates the date on which the batch test began.
  PropertyObjectInstance startDate = 6;
  // Specifies an instance of the TimeDetails custom data type that indicates the time at which the batch test began.
  PropertyObjectInstance startTime = 7;
  // Specifies the container that describes the batch.
  PropertyObjectInstance uut = 8;
}

message ResultLogger_LogBatchStartResponse {
}

message ResultLogger_LogPreUUTRequest {
  // The id of the ResultLogger object.
  ResultLoggerInstance instance = 1;
  // Specifies the process model controller or test socket thread that invokes this method.
  ThreadInstance Thread = 2;
  // Pass an instance of an NI_ModelThreadType type that describes the thread parameter.
  PropertyObjectInstance modelThreadType = 3;
  // Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named ModelType using the NI_ModelType type. For controller threads, this parameter must also contain a field named TestSockets using a container array type, where each element in the array contains a field named MainSequenceResults using an object reference type.
  PropertyObjectInstance modelData = 4;
  // Specifies the absolute path of the process model client file. Pass an empty string if no such file exists.
  string processModelClientPath = 5;
  // Specifies an instance of the DateDetails custom data type that indicates the date on which the UUT test began.
  PropertyObjectInstance startDate = 6;
  // Specifies an instance of the TimeDetails custom data type that indicates the time at which the UUT test began.
  PropertyObjectInstance startTime = 7;
  // Specifies the container that describes the UUT.
  PropertyObjectInstance uut = 8;
  // Specifies whether testing continues to the next UUT.
  bool continueTesting = 9;
}

message ResultLogger_LogPreUUTResponse {
}

message ResultLogger_LogUUTStartRequest {
  // The id of the ResultLogger object.
  ResultLoggerInstance instance = 1;
  // Specifies the process model controller or test socket thread that invokes this method.
  ThreadInstance Thread = 2;
  // Pass an instance of an NI_ModelThreadType type that describes the thread parameter.
  PropertyObjectInstance modelThreadType = 3;
  // Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named ModelType using the NI_ModelType type. For controller threads, this parameter must also contain a field named TestSockets using a container array type, where each element in the array contains a field named MainSequenceResults using an object reference type.
  PropertyObjectInstance modelData = 4;
  // Specifies the absolute path of the process model client file. Pass an empty string if no such file exists.
  string processModelClientPath = 5;
  // Specifies an instance of the DateDetails custom data type that indicates the date on which the UUT test began.
  PropertyObjectInstance startDate = 6;
  // Specifies an instance of the TimeDetails custom data type that indicates the time at which the UUT test began.
  PropertyObjectInstance startTime = 7;
  // Specifies the container that describes the UUT.
  PropertyObjectInstance uut = 8;
}

message ResultLogger_LogUUTStartResponse {
}

message ResultLogger_LogOnTheFlyStepResultsRequest {
  // The id of the ResultLogger object.
  ResultLoggerInstance instance = 1;
  // Specifies the test socket thread that invokes this method.
  ThreadInstance Thread = 2;
  // Specifies the container that describes the UUT.
  PropertyObjectInstance uut = 3;
  // Pass the Steps parameter TestStand passed to the PostResults callback.
  PropertyObjectInstance steps = 4;
  // Pass the Results parameter TestStand passed to the PostResults callback.
  PropertyObjectInstance results = 5;
  // Pass the CallbackNames parameter TestStand passed to the PostResults callback.
  PropertyObjectInstance callbackNames = 6;
  // Pass the ParentIds parameter TestStand passed to the PostResults callback.
  PropertyObjectInstance parentIds = 7;
}

message ResultLogger_LogOnTheFlyStepResultsResponse {
}

message ResultLogger_LogUUTDoneRequest {
  // The id of the ResultLogger object.
  ResultLoggerInstance instance = 1;
  // Specifies the process model controller or test socket thread that invokes this method.
  ThreadInstance Thread = 2;
  // Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named ModelType using the NI_ModelType type. For controller threads, this parameter must also contain a field named TestSockets using a container array type, where each element in the array contains a field named MainSequenceResults using an object reference type.
  PropertyObjectInstance modelData = 3;
  // Specifies the container that describes the UUT.
  PropertyObjectInstance uut = 4;
  // Specifies the result status for the UUT.
  string uutStatus = 5;
  // Pass the result of the sequence call that invoked the MainSequence in the client sequence file.
  PropertyObjectInstance uutResult = 6;
}

message ResultLogger_LogUUTDoneResponse {
}

message ResultLogger_LogPostUUTRequest {
  // The id of the ResultLogger object.
  ResultLoggerInstance instance = 1;
  // Specifies the process model controller or test socket thread that invokes this method.
  ThreadInstance Thread = 2;
  // Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named ModelType using the NI_ModelType type. For controller threads, this parameter must also contain a field named TestSockets using a container array type, where each element in the array contains a field named MainSequenceResults using an object reference type.
  PropertyObjectInstance modelData = 3;
  // Specifies the container that describes the UUT.
  PropertyObjectInstance uut = 4;
  // Specifies the result status for the UUT.
  string uutStatus = 5;
}

message ResultLogger_LogPostUUTResponse {
}

message ResultLogger_LogBatchDoneRequest {
  // The id of the ResultLogger object.
  ResultLoggerInstance instance = 1;
  // Specifies the process model controller or test socket thread that invokes this method.
  ThreadInstance Thread = 2;
  // Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named ModelType using the NI_ModelType type. For controller threads, this parameter must also contain a field named TestSockets using a container array type, where each element in the array contains a field named MainSequenceResults using an object reference type.
  PropertyObjectInstance modelData = 3;
  // Specifies the container that describes the UUT.
  PropertyObjectInstance uut = 4;
  // Specifies the result status for the UUT.
  string uutStatus = 5;
}

message ResultLogger_LogBatchDoneResponse {
}

message ResultLogger_LogPostBatchRequest {
  // The id of the ResultLogger object.
  ResultLoggerInstance instance = 1;
  // Specifies the process model controller or test socket thread that invokes this method.
  ThreadInstance Thread = 2;
  // Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named ModelType using the NI_ModelType type. For controller threads, this parameter must also contain a field named TestSockets using a container array type, where each element in the array contains a field named MainSequenceResults using an object reference type.
  PropertyObjectInstance modelData = 3;
  // Specifies the container that describes the UUT.
  PropertyObjectInstance uut = 4;
  // Specifies the result status for the UUT.
  string uutStatus = 5;
}

message ResultLogger_LogPostBatchResponse {
}

message ResultLogger_LogEndRequest {
  // The id of the ResultLogger object.
  ResultLoggerInstance instance = 1;
  // Specifies the process model controller or test socket thread that invokes this method.
  ThreadInstance Thread = 2;
  // Specifies the process model-specific data. At a minimum, this parameter must be a container with a field named ModelType using the NI_ModelType type. For controller threads, this parameter must also contain a field named TestSockets using a container array type, where each element in the array contains a field named MainSequenceResults using an object reference type.
  PropertyObjectInstance modelData = 3;
}

message ResultLogger_LogEndResponse {
}

message ResultLogger_ContinueInNewFileRequest {
  // The id of the ResultLogger object.
  ResultLoggerInstance instance = 1;
  // Specifies the path of the new file.
  string Path = 2;
}

message ResultLogger_ContinueInNewFileResponse {
}

message ResultLogger_FlushRequest {
  // The id of the ResultLogger object.
  ResultLoggerInstance instance = 1;
}

message ResultLogger_FlushResponse {
}

message ResultLogger_DeferrableRenameRequest {
  // The id of the ResultLogger object.
  ResultLoggerInstance instance = 1;
  // Specifies the absolute path to use to rename the TestStand results (.tsr) file, such as C:\OfflineResults\MyResults.tsr.
  string Path = 2;
}

message ResultLogger_DeferrableRenameResponse {
  // A return value of True indicates that the rename operation succeeded and that the ResultLogger object updated the corresponding path property and renamed the TestStand results (.tsr) file on disk. A return value of False indicates that the rename operation failed and that the ResultLogger object did not update the corresponding path property and deferred renaming the file.
  bool returnValue = 1;
}

message ResultLogger_GetFilesWrittenRequest {
  // The id of the ResultLogger object.
  ResultLoggerInstance instance = 1;
  // Specifies to clear the internal record of completed .tsr files. When the clear parameter is True, subsequent calls to the ResultLogger.GetFilesWritten method return only files completed since the most recent call to the method. When the clear parameter is False, TestStand does not clear the internal record of completed .tsr files and subsequent calls to the ResultLogger.GetFilesWritten method return files returned from previous calls to the method and any files completed since the most recent call to the method.
  bool Clear = 2;
}

message ResultLogger_GetFilesWrittenResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message ResultLogger_Set_PathRequest {
  // The id of the ResultLogger object.
  ResultLoggerInstance instance = 1;
  // Specifies the name of the TestStand results (.tsr) file on disk. You can change the path while logging to rename the file to best describe the contents of the file.
  string val = 2;
}

message ResultLogger_Set_PathResponse {
}

message ResultLogger_Get_PathRequest {
  // The id of the ResultLogger object.
  ResultLoggerInstance instance = 1;
}

message ResultLogger_Get_PathResponse {
  // Specifies the name of the TestStand results (.tsr) file on disk. You can change the path while logging to rename the file to best describe the contents of the file.
  string returnValue = 1;
}

message ResultLogger_Set_RecordFilesWrittenRequest {
  // The id of the ResultLogger object.
  ResultLoggerInstance instance = 1;
  // Specifies to store the paths of all offline results (.tsr) files when TestStand completes writing the file. The default value is False, which specifies to not record the filepaths. When this property is True, the internal record of completed files grows without bound unless you periodically pass True to the ResultLogger.GetFilesWritten method to clear the internal record.
  bool val = 2;
}

message ResultLogger_Set_RecordFilesWrittenResponse {
}

message ResultLogger_Get_RecordFilesWrittenRequest {
  // The id of the ResultLogger object.
  ResultLoggerInstance instance = 1;
}

message ResultLogger_Get_RecordFilesWrittenResponse {
  // Specifies to store the paths of all offline results (.tsr) files when TestStand completes writing the file. The default value is False, which specifies to not record the filepaths. When this property is True, the internal record of completed files grows without bound unless you periodically pass True to the ResultLogger.GetFilesWritten method to clear the internal record.
  bool returnValue = 1;
}

// ResultLog
//
// ResultLog objects read TestStand results from a file that a ResultLogger object creates.
//
service ResultLog {
  // Method: Open
  //
  // Opens the results file for reading.
  //
  // ResultLog_OpenRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ResultLogInstance - The id of the ResultLog object.
  //
  // ResultLog_OpenResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Open(ResultLog_OpenRequest) returns (ResultLog_OpenResponse);
  
  
  // Method: Close
  //
  // Closes the results file.
  //
  // ResultLog_CloseRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ResultLogInstance - The id of the ResultLog object.
  //
  // ResultLog_CloseResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Close(ResultLog_CloseRequest) returns (ResultLog_CloseResponse);
  
  
  // Method: ReadNextRecord
  //
  // Reads one record from the TestStand results (.tsr) file. Returns False if no more records exist.
  //
  // ResultLog_ReadNextRecordRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ResultLogInstance - The id of the ResultLog object.
  //
  // ResultLog_ReadNextRecordResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - The return type of the Boolean object.
  //    - resultLogRecordType: ResultLogRecordType - Returns the type of record read.
  //    - objects: repeated PropertyObjectInstanc - Returns the objects logged to the record.
  //
  rpc ReadNextRecord(ResultLog_ReadNextRecordRequest) returns (ResultLog_ReadNextRecordResponse);
  
  
  // Method: SetReportPaths
  //
  // Stores an array of file paths. TestStand writes the file paths to a file with the same name as the ResultLog file with the addition of a .reportlist suffix. Use this method to record the paths of reports that are created from processing a ResultLog file.
  //
  // ResultLog_SetReportPathsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ResultLogInstance - The id of the ResultLog object.
  //    - pathStringArray: PropertyObjectInstance - Specifies a property object array of strings that contains report paths.
  //
  // ResultLog_SetReportPathsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetReportPaths(ResultLog_SetReportPathsRequest) returns (ResultLog_SetReportPathsResponse);
  
  
  // Method: GetReportPaths
  //
  // Returns the array of file paths the ResultLog.SetReportPaths method stores. If no paths have been stored, the method returns an empty array.
  //
  // ResultLog_GetReportPathsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ResultLogInstance - The id of the ResultLog object.
  //
  // ResultLog_GetReportPathsResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc GetReportPaths(ResultLog_GetReportPathsRequest) returns (ResultLog_GetReportPathsResponse);
  
  

  // Property: OnTheFly
  //
  // Returns a value that indicates whether the results file contains results stored on-the-fly in ResultLogRecordType_OnTheFlyStepResults records or if the results are stored as a subproperty tree under the uut result in ResultLogRecordType_PostUUT records.
  //
  // ResultLog_Get_OnTheFlyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ResultLogInstance - The id of the ResultLog object.
  //
  // ResultLog_Get_OnTheFlyResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the results file contains results stored on-the-fly in ResultLogRecordType_OnTheFlyStepResults records or if the results are stored as a subproperty tree under the uut result in ResultLogRecordType_PostUUT records. 
  //
  rpc Get_OnTheFly(ResultLog_Get_OnTheFlyRequest) returns (ResultLog_Get_OnTheFlyResponse);
  
  
  // Property: Path
  //
  // Returns the absolute path of the results file.
  //
  // ResultLog_Get_PathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ResultLogInstance - The id of the ResultLog object.
  //
  // ResultLog_Get_PathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the absolute path of the results file. 
  //
  rpc Get_Path(ResultLog_Get_PathRequest) returns (ResultLog_Get_PathResponse);
  
  
  // Property: ClosedWhenWritten
  //
  // Returns True if the ResultLogger.Close method was called when the file was written. A False value indicates that the writing process was aborted and that the file might be incomplete or corrupt.
  //
  // ResultLog_Get_ClosedWhenWrittenRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ResultLogInstance - The id of the ResultLog object.
  //
  // ResultLog_Get_ClosedWhenWrittenResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the ResultLogger.Close method was called when the file was written. A False value indicates that the writing process was aborted and that the file might be incomplete or corrupt. 
  //
  rpc Get_ClosedWhenWritten(ResultLog_Get_ClosedWhenWrittenRequest) returns (ResultLog_Get_ClosedWhenWrittenResponse);
  
  
  // Property: UniqueId
  //
  // Returns a string that is globally unique to the result log file. Two result log files can return the same unique ID only if one file is a copy of the other. This property returns an empty string if you access it before a successful call to the ResultLog.Open method.
  //
  // ResultLog_Get_UniqueIdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ResultLogInstance - The id of the ResultLog object.
  //
  // ResultLog_Get_UniqueIdResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns a string that is globally unique to the result log file. Two result log files can return the same unique ID only if one file is a copy of the other. This property returns an empty string if you access it before a successful call to the ResultLog.Open method. 
  //
  rpc Get_UniqueId(ResultLog_Get_UniqueIdRequest) returns (ResultLog_Get_UniqueIdResponse);
  
  
  // Property: SecondsAtStartIn1970UniversalCoordinatedTime
  //
  // Returns the value of the Engine.SecondsAtStartIn1970UniversalCoordinatedTime property for the engine that created the TestStand results .tsr file. If the log file contains any custom properties that contain time values relative to the time the engine that created the .tsr started, you can use this value to adjust the values to be relative to the time the current engine started. The Seconds expression function and the Engine.SecondsSinceStart property return times relative to engine startup.
  //
  // The ResultLog.ReadNextRecord method uses this property to automatically adjust the values of TS.StartTime result subproperties to be relative to the start time of the current engine.
  //
  // ResultLog_Get_SecondsAtStartIn1970UniversalCoordinatedTimeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ResultLogInstance - The id of the ResultLog object.
  //
  // ResultLog_Get_SecondsAtStartIn1970UniversalCoordinatedTimeResponse - The response message from the server. It provides the return value.
  //    - returnValue: double - Returns the value of the Engine.SecondsAtStartIn1970UniversalCoordinatedTime property for the engine that created the TestStand results .tsr file. If the log file contains any custom properties that contain time values relative to the time the engine that created the .tsr started, you can use this value to adjust the values to be relative to the time the current engine started. The Seconds expression function and the Engine.SecondsSinceStart property return times relative to engine startup. 
  //
  rpc Get_SecondsAtStartIn1970UniversalCoordinatedTime(ResultLog_Get_SecondsAtStartIn1970UniversalCoordinatedTimeRequest) returns (ResultLog_Get_SecondsAtStartIn1970UniversalCoordinatedTimeResponse);
  
  
  // Property: SimulateOnTheFly
  //
  // This property is reserved for internal use. Do not access it.
  //
  // ResultLog_Set_SimulateOnTheFlyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ResultLogInstance - The id of the ResultLog object.
  //    - val: bool - This property is reserved for internal use. Do not access it. 
  //
  // ResultLog_Set_SimulateOnTheFlyResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ResultLog_Get_SimulateOnTheFlyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ResultLogInstance - The id of the ResultLog object.
  //
  // ResultLog_Get_SimulateOnTheFlyResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - This property is reserved for internal use. Do not access it. 
  //
  rpc Set_SimulateOnTheFly(ResultLog_Set_SimulateOnTheFlyRequest) returns (ResultLog_Set_SimulateOnTheFlyResponse);
  rpc Get_SimulateOnTheFly(ResultLog_Get_SimulateOnTheFlyRequest) returns (ResultLog_Get_SimulateOnTheFlyResponse);
  
  
  // Property: FileSavedWithFeaturesToggled
  //
  // 
  //
  // ResultLog_Get_FileSavedWithFeaturesToggledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ResultLogInstance - The id of the ResultLog object.
  //
  // ResultLog_Get_FileSavedWithFeaturesToggledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool -  
  //
  rpc Get_FileSavedWithFeaturesToggled(ResultLog_Get_FileSavedWithFeaturesToggledRequest) returns (ResultLog_Get_FileSavedWithFeaturesToggledResponse);
  
  
}
message ResultLogInstance {
  // Specifies the handle of the ResultLog instance in the server.
  string id = 1;
}
message ResultLog_OpenRequest {
  // The id of the ResultLog object.
  ResultLogInstance instance = 1;
  // Specifies the path of the TestStand results (.tsr) file to open.
  string Path = 2;
}

message ResultLog_OpenResponse {
}

message ResultLog_CloseRequest {
  // The id of the ResultLog object.
  ResultLogInstance instance = 1;
}

message ResultLog_CloseResponse {
}

message ResultLog_ReadNextRecordRequest {
  // The id of the ResultLog object.
  ResultLogInstance instance = 1;
}

message ResultLog_ReadNextRecordResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
  // Returns the type of record read.
  ResultLogRecordTypes resultLogRecordType = 2;
  // Returns the ID of the execution that logged the record.
  int32 ExecutionId = 3;
  // Returns the ID of the thread that logged the record.
  int32 ThreadId = 4;
  // Returns the objects logged to the record.
  repeated PropertyObjectInstance objects = 5;
}

message ResultLog_SetReportPathsRequest {
  // The id of the ResultLog object.
  ResultLogInstance instance = 1;
  // Specifies a property object array of strings that contains report paths.
  PropertyObjectInstance pathStringArray = 2;
}

message ResultLog_SetReportPathsResponse {
}

message ResultLog_GetReportPathsRequest {
  // The id of the ResultLog object.
  ResultLogInstance instance = 1;
}

message ResultLog_GetReportPathsResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message ResultLog_Get_OnTheFlyRequest {
  // The id of the ResultLog object.
  ResultLogInstance instance = 1;
}

message ResultLog_Get_OnTheFlyResponse {
  // Returns a value that indicates whether the results file contains results stored on-the-fly in ResultLogRecordType_OnTheFlyStepResults records or if the results are stored as a subproperty tree under the uut result in ResultLogRecordType_PostUUT records.
  bool returnValue = 1;
}

message ResultLog_Get_PathRequest {
  // The id of the ResultLog object.
  ResultLogInstance instance = 1;
}

message ResultLog_Get_PathResponse {
  // Returns the absolute path of the results file.
  string returnValue = 1;
}

message ResultLog_Get_ClosedWhenWrittenRequest {
  // The id of the ResultLog object.
  ResultLogInstance instance = 1;
}

message ResultLog_Get_ClosedWhenWrittenResponse {
  // Returns True if the ResultLogger.Close method was called when the file was written. A False value indicates that the writing process was aborted and that the file might be incomplete or corrupt.
  bool returnValue = 1;
}

message ResultLog_Get_UniqueIdRequest {
  // The id of the ResultLog object.
  ResultLogInstance instance = 1;
}

message ResultLog_Get_UniqueIdResponse {
  // Returns a string that is globally unique to the result log file. Two result log files can return the same unique ID only if one file is a copy of the other. This property returns an empty string if you access it before a successful call to the ResultLog.Open method.
  string returnValue = 1;
}

message ResultLog_Get_SecondsAtStartIn1970UniversalCoordinatedTimeRequest {
  // The id of the ResultLog object.
  ResultLogInstance instance = 1;
}

message ResultLog_Get_SecondsAtStartIn1970UniversalCoordinatedTimeResponse {
  // Returns the value of the Engine.SecondsAtStartIn1970UniversalCoordinatedTime property for the engine that created the TestStand results .tsr file. If the log file contains any custom properties that contain time values relative to the time the engine that created the .tsr started, you can use this value to adjust the values to be relative to the time the current engine started. The Seconds expression function and the Engine.SecondsSinceStart property return times relative to engine startup.
  double returnValue = 1;
}

message ResultLog_Set_SimulateOnTheFlyRequest {
  // The id of the ResultLog object.
  ResultLogInstance instance = 1;
  // This property is reserved for internal use. Do not access it.
  bool val = 2;
}

message ResultLog_Set_SimulateOnTheFlyResponse {
}

message ResultLog_Get_SimulateOnTheFlyRequest {
  // The id of the ResultLog object.
  ResultLogInstance instance = 1;
}

message ResultLog_Get_SimulateOnTheFlyResponse {
  // This property is reserved for internal use. Do not access it.
  bool returnValue = 1;
}

message ResultLog_Get_FileSavedWithFeaturesToggledRequest {
  // The id of the ResultLog object.
  ResultLogInstance instance = 1;
}

message ResultLog_Get_FileSavedWithFeaturesToggledResponse {
  // 
  bool returnValue = 1;
}

// CsvFileInputRecordStream
//
// 
//
service CsvFileInputRecordStream {
  // Method: Open
  //
  // Open the file specified by the absolutePath argument, associating it with this CsvFileInputRecordStream.
  //
  // You will not normally need to call this method, as Engine.NewCsvFileInputRecordStream returns a stream already associated with an open file. When a CsvFileInputRecordStream is no longer needed, it should be closed by calling CsvFileInputRecordStream.Close. If it is not closed already, the stream will close automatically when the last reference to it is removed.
  // 
  //
  // CsvFileInputRecordStream_OpenRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CsvFileInputRecordStreamInstance - The id of the CsvFileInputRecordStream object.
  //    - absolutePath: string - Specifies the absolute path to the CSV file.
  //
  // CsvFileInputRecordStream_OpenResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Open(CsvFileInputRecordStream_OpenRequest) returns (CsvFileInputRecordStream_OpenResponse);
  
  
  // Method: ReadLine
  //
  // Read the next line of text from the underlying file.
  //
  // CsvFileInputRecordStream.ReadLine provides a lower level interface to the underlying file than ReadRecord. The next line of text from the file is stored directly to the lineString parameter with no additional processing. Note: Note: CsvFileInputRecordStream.ReadLine has no special behavior for end of table the way CsvFileInputRecordStream.ReadRecord does.
  // 
  //
  // CsvFileInputRecordStream_ReadLineRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CsvFileInputRecordStreamInstance - The id of the CsvFileInputRecordStream object.
  //
  // CsvFileInputRecordStream_ReadLineResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: int32 - Returns 0 if a line of text was successfully read. Returns non-zero if end of file is encountered. 
  //    - lineString: strin - Outputs the next line from the CSV file.
  //
  rpc ReadLine(CsvFileInputRecordStream_ReadLineRequest) returns (CsvFileInputRecordStream_ReadLineResponse);
  
  
  // Method: ScanForTag
  //
  // Search forward through the file for the line beginning with the specified string.  Reading begins from the next line.
  //
  // Use CsvFileInputRecordStream.ScanForTag to search through a CSV file for a known string that indicates the location of the records you wish to read.
  //
  // CsvFileInputRecordStream_ScanForTagRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CsvFileInputRecordStreamInstance - The id of the CsvFileInputRecordStream object.
  //    - tag: string - The tag to search for.
  //    - ignoreCase: bool - Specifies whether to perform case-sensitive or case-insensitive matching.  Specify true to ignore case, or false to perform case-sensitive matching.
  //
  // CsvFileInputRecordStream_ScanForTagResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns 0 if the tag was found. Returns non-zero if end of file was encountered without finding the tag. 
  //
  rpc ScanForTag(CsvFileInputRecordStream_ScanForTagRequest) returns (CsvFileInputRecordStream_ScanForTagResponse);
  
  
  // Method: SkipLines
  //
  // Skip the specified number of lines.
  //
  // This method provides a lower level interface to the underlying file than InputRecordStream.SkipRecords.  Lines are read from the file and discarded immediately without further processing.  Unlike InputRecordStream.SkipRecords, InputRecordStream.SkipLines has no special behavior for end of table.
  //
  // CsvFileInputRecordStream_SkipLinesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CsvFileInputRecordStreamInstance - The id of the CsvFileInputRecordStream object.
  //    - numLines: int32 - The number of lines to skip.  A value of 0 indicates to return successfully without skipping any lines.  A negative value causes a run-time error.
  //
  // CsvFileInputRecordStream_SkipLinesResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns 0 if numLines were successfully skipped. Returns non-zero if end of file is encountered before numLines could be skipped. 
  //
  rpc SkipLines(CsvFileInputRecordStream_SkipLinesRequest) returns (CsvFileInputRecordStream_SkipLinesResponse);
  
  
  // Method: SetRecordPrototype
  //
  // Set the prototype associated with this CsvFileInputRecordStream.
  //
  // CsvFileInputRecordStream_SetRecordPrototypeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CsvFileInputRecordStreamInstance - The id of the CsvFileInputRecordStream object.
  //    - prototype: PropertyObjectInstance - A container defining the prototype for this stream. The name and type of each subproperty correspond to the name and type of the column in the CSV file with the same index as the subproperty.
  //    - mapping: string - Specifies the mapping from subproperties in the prototype parameter to columns in the CSV file. The mapping is a comma-separated list of index ranges. For example, "0, 3-5, 8-7" specifies that subproperties 0, 3, 4, 5, 8, and 7 of the container correspond to columns 0-5 of the CSV file. The final range in the list may be open-ended. For example, "2, 3-" indicates that subproperties 2, 3, and all subproperties beyond 3 map to columns 0, 1, 2, etc. of the CSV file. The range list may also include individual subproperty names. For example, "Temperature, Pressure, 0-1" specifies that the subproperties "Temperature" and "Pressure", then subproperties 0 and 1 define columns 0-3 of the CSV file. For convenience, you can specify an empty string to specify all subproperties of the container define the columns in order. That is, an empty string is equivalent to "0-".
  //
  // CsvFileInputRecordStream_SetRecordPrototypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetRecordPrototype(CsvFileInputRecordStream_SetRecordPrototypeRequest) returns (CsvFileInputRecordStream_SetRecordPrototypeResponse);
  
  
  // Method: GetRecordPrototype
  //
  // Get the prototype associated with this CsvFileInputRecordStream.
  //
  // CsvFileInputRecordStream_GetRecordPrototypeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CsvFileInputRecordStreamInstance - The id of the CsvFileInputRecordStream object.
  //    - options: int32 - This parameter is reserved for future use.
  //
  // CsvFileInputRecordStream_GetRecordPrototypeResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - True if there is a record prototype associated with this CsvFileInputRecordStream. Otherwise, returns false. 
  //    - prototype: PropertyObjectInstanc - The new value of prototype if the method modifies it.
  //
  rpc GetRecordPrototype(CsvFileInputRecordStream_GetRecordPrototypeRequest) returns (CsvFileInputRecordStream_GetRecordPrototypeResponse);
  
  
  // Method: ReadRecordPrototype
  //
  // Read the record prototype from the CSV file, and set it.
  //
  // CsvFileInputRecordStream_ReadRecordPrototypeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CsvFileInputRecordStreamInstance - The id of the CsvFileInputRecordStream object.
  //    - options: int32 - This parameter is reserved for future use.
  //
  // CsvFileInputRecordStream_ReadRecordPrototypeResponse - The response message from the server. It provides the output parameters.
  //    - prototype: PropertyObjectInstanc - The new value of prototype if the method modifies it.
  //
  rpc ReadRecordPrototype(CsvFileInputRecordStream_ReadRecordPrototypeRequest) returns (CsvFileInputRecordStream_ReadRecordPrototypeResponse);
  
  
  // Method: ParseRecordPrototype
  //
  rpc ParseRecordPrototype(CsvFileInputRecordStream_ParseRecordPrototypeRequest) returns (CsvFileInputRecordStream_ParseRecordPrototypeResponse);
  
  

  // Property: Path
  //
  // Get the absolute path of the CSV file associated with this CsvFileInputRecordStream.
  //
  // An empty string is returned if this stream is not currently associated with an open file. Path is set implicitly by calling CsvFileInputRecordStream.Open and cleared by calling CsvFileInputRecordStream.Close.
  //
  // CsvFileInputRecordStream_Get_PathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CsvFileInputRecordStreamInstance - The id of the CsvFileInputRecordStream object.
  //
  // CsvFileInputRecordStream_Get_PathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Get the absolute path of the CSV file associated with this CsvFileInputRecordStream. 
  //
  rpc Get_Path(CsvFileInputRecordStream_Get_PathRequest) returns (CsvFileInputRecordStream_Get_PathResponse);
  
  
  // Property: SeparatorChar
  //
  // Get or set the separator character associated with this CsvFileInputRecordStream.  By default, the separator character is a "," (comma).
  //
  // Note: The only separator compliant with RFC 4180 is the comma.CsvFileInputRecordStream supports any single character for the separator except for '"' (double quote), new line, carriage return, or null (empty string). Attempting to set the separator to an empty string or string of two or more characters causes a run-time error. Note: Although this interface accepts any Unicode character, TestStand only supports values that map to ANSI multibyte characters from the current code page.
  //
  // CsvFileInputRecordStream_Set_SeparatorCharRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CsvFileInputRecordStreamInstance - The id of the CsvFileInputRecordStream object.
  //    - val: string - Get or set the separator character associated with this CsvFileInputRecordStream.  By default, the separator character is a "," (comma). 
  //
  // CsvFileInputRecordStream_Set_SeparatorCharResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CsvFileInputRecordStream_Get_SeparatorCharRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CsvFileInputRecordStreamInstance - The id of the CsvFileInputRecordStream object.
  //
  // CsvFileInputRecordStream_Get_SeparatorCharResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Get or set the separator character associated with this CsvFileInputRecordStream.  By default, the separator character is a "," (comma). 
  //
  rpc Set_SeparatorChar(CsvFileInputRecordStream_Set_SeparatorCharRequest) returns (CsvFileInputRecordStream_Set_SeparatorCharResponse);
  rpc Get_SeparatorChar(CsvFileInputRecordStream_Get_SeparatorCharRequest) returns (CsvFileInputRecordStream_Get_SeparatorCharResponse);
  
  
}
message CsvFileInputRecordStreamInstance {
  // Specifies the handle of the CsvFileInputRecordStream instance in the server.
  string id = 1;
}
message CsvFileInputRecordStream_OpenRequest {
  // The id of the CsvFileInputRecordStream object.
  CsvFileInputRecordStreamInstance instance = 1;
  // Specifies the absolute path to the CSV file.
  string absolutePath = 2;
}

message CsvFileInputRecordStream_OpenResponse {
}

message CsvFileInputRecordStream_ReadLineRequest {
  // The id of the CsvFileInputRecordStream object.
  CsvFileInputRecordStreamInstance instance = 1;
}

message CsvFileInputRecordStream_ReadLineResponse {
  // Returns 0 if a line of text was successfully read. Returns non-zero if end of file is encountered.
  int32 returnValue = 1;
  // Outputs the next line from the CSV file.
  string lineString = 2;
}

message CsvFileInputRecordStream_ScanForTagRequest {
  // The id of the CsvFileInputRecordStream object.
  CsvFileInputRecordStreamInstance instance = 1;
  // The tag to search for.
  string tag = 2;
  // Specifies whether to perform case-sensitive or case-insensitive matching.  Specify true to ignore case, or false to perform case-sensitive matching.
  bool ignoreCase = 3;
}

message CsvFileInputRecordStream_ScanForTagResponse {
  // Returns 0 if the tag was found. Returns non-zero if end of file was encountered without finding the tag.
  int32 returnValue = 1;
}

message CsvFileInputRecordStream_SkipLinesRequest {
  // The id of the CsvFileInputRecordStream object.
  CsvFileInputRecordStreamInstance instance = 1;
  // The number of lines to skip.  A value of 0 indicates to return successfully without skipping any lines.  A negative value causes a run-time error.
  int32 numLines = 2;
}

message CsvFileInputRecordStream_SkipLinesResponse {
  // Returns 0 if numLines were successfully skipped. Returns non-zero if end of file is encountered before numLines could be skipped.
  int32 returnValue = 1;
}

message CsvFileInputRecordStream_SetRecordPrototypeRequest {
  // The id of the CsvFileInputRecordStream object.
  CsvFileInputRecordStreamInstance instance = 1;
  // A container defining the prototype for this stream. The name and type of each subproperty correspond to the name and type of the column in the CSV file with the same index as the subproperty.
  PropertyObjectInstance prototype = 2;
  // Specifies the mapping from subproperties in the prototype parameter to columns in the CSV file. The mapping is a comma-separated list of index ranges. For example, "0, 3-5, 8-7" specifies that subproperties 0, 3, 4, 5, 8, and 7 of the container correspond to columns 0-5 of the CSV file. The final range in the list may be open-ended. For example, "2, 3-" indicates that subproperties 2, 3, and all subproperties beyond 3 map to columns 0, 1, 2, etc. of the CSV file. The range list may also include individual subproperty names. For example, "Temperature, Pressure, 0-1" specifies that the subproperties "Temperature" and "Pressure", then subproperties 0 and 1 define columns 0-3 of the CSV file. For convenience, you can specify an empty string to specify all subproperties of the container define the columns in order. That is, an empty string is equivalent to "0-".
  string mapping = 3;
}

message CsvFileInputRecordStream_SetRecordPrototypeResponse {
}

message CsvFileInputRecordStream_GetRecordPrototypeRequest {
  // The id of the CsvFileInputRecordStream object.
  CsvFileInputRecordStreamInstance instance = 1;
  // A container defining the prototype for this stream. The name and type of each subproperty correspond to the name and type of the column in the CSV file with the same index as the subproperty.
  PropertyObjectInstance prototype = 2;
  // This parameter is reserved for future use.
  int32 options = 3;
}

message CsvFileInputRecordStream_GetRecordPrototypeResponse {
  // True if there is a record prototype associated with this CsvFileInputRecordStream. Otherwise, returns false.
  bool returnValue = 1;
  // A container defining the prototype for this stream. The name and type of each subproperty correspond to the name and type of the column in the CSV file with the same index as the subproperty.
  PropertyObjectInstance prototype = 2;
}

message CsvFileInputRecordStream_ReadRecordPrototypeRequest {
  // The id of the CsvFileInputRecordStream object.
  CsvFileInputRecordStreamInstance instance = 1;
  // A container defining the prototype for this stream. The name and type of each subproperty correspond to the name and type of the column in the CSV file with the same index as the subproperty.
  PropertyObjectInstance prototype = 2;
  // This parameter is reserved for future use.
  int32 options = 3;
}

message CsvFileInputRecordStream_ReadRecordPrototypeResponse {
  // A container defining the prototype for this stream. The name and type of each subproperty correspond to the name and type of the column in the CSV file with the same index as the subproperty.
  PropertyObjectInstance prototype = 1;
}

message CsvFileInputRecordStream_ParseRecordPrototypeRequest {
  // The id of the CsvFileInputRecordStream object.
  CsvFileInputRecordStreamInstance instance = 1;
  string typesLine = 2;
  string namesLine = 3;
}

message CsvFileInputRecordStream_ParseRecordPrototypeResponse {
  PropertyObjectInstance returnValue = 1;
}

message CsvFileInputRecordStream_Get_PathRequest {
  // The id of the CsvFileInputRecordStream object.
  CsvFileInputRecordStreamInstance instance = 1;
}

message CsvFileInputRecordStream_Get_PathResponse {
  // The path of the CSV file associated with this stream.
  string returnValue = 1;
}

message CsvFileInputRecordStream_Set_SeparatorCharRequest {
  // The id of the CsvFileInputRecordStream object.
  CsvFileInputRecordStreamInstance instance = 1;
  // Get or set the separator character associated with this CsvFileInputRecordStream.  By default, the separator character is a "," (comma).
  string val = 2;
}

message CsvFileInputRecordStream_Set_SeparatorCharResponse {
}

message CsvFileInputRecordStream_Get_SeparatorCharRequest {
  // The id of the CsvFileInputRecordStream object.
  CsvFileInputRecordStreamInstance instance = 1;
}

message CsvFileInputRecordStream_Get_SeparatorCharResponse {
  // The separator character for the CSV file.
  string returnValue = 1;
}

// CsvFileOutputRecordStream
//
// 
//
service CsvFileOutputRecordStream {
  // Method: Open
  //
  // Open the file specified by the absolutePath argument, associating it with this CsvFileOutputRecordStream.
  //
  // You will not normally need to call this method, as Engine.NewCsvFileOutputRecordStream returns a stream already associated with an open file. When a CsvFileOutputRecordStream is no longer needed, it should be closed by calling CsvFileOutputRecordStream.Close.  If it is not closed already, the stream will close automatically when the last reference to it is removed.
  // 
  //
  // CsvFileOutputRecordStream_OpenRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CsvFileOutputRecordStreamInstance - The id of the CsvFileOutputRecordStream object.
  //    - absolutePath: string - Specifies the absolute path to the CSV file.
  //    - openMode: int32 - Specifies how to open the CSV file.  Supported options include:     * FileOpenMode_NoOptions - Create the file if it does not exist. Fail with a run-time error if the file exists.    * FileOpenMode_Truncate - If the file exists, overwrite it deleting the previous contents. Create a new file if it does not exist.    * FileOpenMode_Append - If the file exists, append to the end of it, preserving the existing contents.  Create a new file if it does not exist.    * FileOpenMode_Uniquify - Create a new file if it does not exist.  If a file with the specified path exists, attempt to make the file name unique by appending "_" (underscore) plus a numeric suffix to the file name. For example, if "AlreadyExists.csv" already exists, "AlreadyExists_2.csv" is tried, then "AlreadyExists_3.csv", etc. until a unique name has been found. If a unique name is not found after 10000 attempts, the method fails and throws a runtime error.
  //
  // CsvFileOutputRecordStream_OpenResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Open(CsvFileOutputRecordStream_OpenRequest) returns (CsvFileOutputRecordStream_OpenResponse);
  
  
  // Method: WriteFieldHeaders
  //
  // Write the field headers (i.e. column names) for your data to the underlying CSV file.
  //
  // WriteFieldHeaders is very similar to CsvFileOutputRecordStream.WriteRecord. The only difference is that if the specified record is a container, the names of the subproperties are written to the CSV file instead of the values.  This makes it straightforward to completely specify records with a container. WriteFieldHeaders will also accept an array, but in this case the behavior is identical to CsvFileOutputRecordStream.WriteRecord. The values in the array specify the field headers.
  //
  // CsvFileOutputRecordStream_WriteFieldHeadersRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CsvFileOutputRecordStreamInstance - The id of the CsvFileOutputRecordStream object.
  //    - fields: PropertyObjectInstance - A container or array specifying the field headers. If a container is specified, names of the subproperties specify the field headers. If an array is specified, the values of the array elements coerced to strings define the field headers.
  //    - mapping: string - Specifies the mapping from elements (either subproperties or array elements) in the fields parameter to fields in the stream. The mapping is a comma-separated list of index ranges. For example, "0, 3-5, 8-7" specifies that elements 0, 3, 4, 5, 8, and 7 define the field headers.  The final range in the list may be open-ended. For example, "2, 3-" indicates that elements 2, 3, and all elements beyond 3 define the field headers. For convenience, you may specify an empty string to specify all elements be written in order. That is, an empty string is equivalent to 0-. The default value is an empty string.
  //
  // CsvFileOutputRecordStream_WriteFieldHeadersResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc WriteFieldHeaders(CsvFileOutputRecordStream_WriteFieldHeadersRequest) returns (CsvFileOutputRecordStream_WriteFieldHeadersResponse);
  
  
  // Method: WriteLine
  //
  // Write a line of text to the file.  A line feed is appended automatically.
  //
  // WriteLine provides a lower level interface to the underlying file than OutputRecordStream.WriteRecord. The specified string plus a linefeed is written directly to the file without further processing or escaping. Use this method to add formatting or other non-record data to the CSV file.
  //
  // CsvFileOutputRecordStream_WriteLineRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CsvFileOutputRecordStreamInstance - The id of the CsvFileOutputRecordStream object.
  //    - lineString: string - The string to write.
  //
  // CsvFileOutputRecordStream_WriteLineResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc WriteLine(CsvFileOutputRecordStream_WriteLineRequest) returns (CsvFileOutputRecordStream_WriteLineResponse);
  
  
  // Method: WriteRecordPrototype
  //
  // Write the specified prototype to the CSV file.
  //
  // CsvFileOutputRecordStream_WriteRecordPrototypeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CsvFileOutputRecordStreamInstance - The id of the CsvFileOutputRecordStream object.
  //    - prototype: PropertyObjectInstance - A container or PropertyObject array defining the prototype for this stream. The name and type of each subproperty or array element define to the name and type of the column in the CSV file with the corresponding index.
  //    - mapping: string - Specifies the mapping from fields in the prototype parameter to columns in the CSV file. The mapping is a comma-separated list of index ranges. For example, "0, 3-5, 8-7" specifies that fields 0, 3, 4, 5, 8, and 7 of the container correspond to columns 0-5 of the CSV file. The final range in the list may be open-ended. For example, "2, 3-" indicates that fields 2, 3, and all fields beyond 3 map to columns 0, 1, 2, etc. of the CSV file. The range list may also include individual subproperty or array element names. For example, "Temperature, Pressure, 0-1" specifies that the subproperties or array elements named "Temperature" and "Pressure", followed by those with indices 0 and 1 define columns 0-3 of the CSV file. For convenience, you can specify an empty string to specify all fields from the prototype parameter define the columns in order. That is, an empty string is equivalent to "0-".
  //
  // CsvFileOutputRecordStream_WriteRecordPrototypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc WriteRecordPrototype(CsvFileOutputRecordStream_WriteRecordPrototypeRequest) returns (CsvFileOutputRecordStream_WriteRecordPrototypeResponse);
  
  

  // Property: Path
  //
  // Get the absolute path of the CSV file associated with this CsvFileOutputRecordStream.
  //
  // An empty string is returned if this stream is not currently associated with an open file. Path is set implicitly by calling CsvFileOutputRecordStream.Open and cleared by calling CsvFileOutputRecordStream.Close.
  //
  // CsvFileOutputRecordStream_Get_PathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CsvFileOutputRecordStreamInstance - The id of the CsvFileOutputRecordStream object.
  //
  // CsvFileOutputRecordStream_Get_PathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Get the absolute path of the CSV file associated with this CsvFileOutputRecordStream. 
  //
  rpc Get_Path(CsvFileOutputRecordStream_Get_PathRequest) returns (CsvFileOutputRecordStream_Get_PathResponse);
  
  
  // Property: SeparatorChar
  //
  // Get or set the separator character associated with this CsvFileInputRecordStream. By default, the separator character is a "," (comma).
  // 
  //
  // Note: Note: The only separator compliant with RFC 4180 is the comma.CsvFileOutputRecordStream supports any single character besides '"' (double quote), as well as null (empty string) for the separator. However, CsvFileInputRecordStream does not support carriage return, new line, or null separator characters. While it is possible to write files using these separator characters with CsvFileOutputRecordStream, CsvFileInputRecordStream cannot parse them. Attempting to set SeparatorChar to a string of two or more characters results in a run-time error. Note: Note: Although this interface accepts any Unicode character, TestStand only supports values that map to ANSI multibyte characters from the current code page.Note: Note: The comma is the only separator compliant with RFC 4180, "Common Format and MIME Type for Comma-Separated Values (CSV) Files."
  //
  // CsvFileOutputRecordStream_Set_SeparatorCharRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CsvFileOutputRecordStreamInstance - The id of the CsvFileOutputRecordStream object.
  //    - val: string - Get or set the separator character associated with this CsvFileInputRecordStream. By default, the separator character is a "," (comma).  
  //
  // CsvFileOutputRecordStream_Set_SeparatorCharResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CsvFileOutputRecordStream_Get_SeparatorCharRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CsvFileOutputRecordStreamInstance - The id of the CsvFileOutputRecordStream object.
  //
  // CsvFileOutputRecordStream_Get_SeparatorCharResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Get or set the separator character associated with this CsvFileInputRecordStream. By default, the separator character is a "," (comma).  
  //
  rpc Set_SeparatorChar(CsvFileOutputRecordStream_Set_SeparatorCharRequest) returns (CsvFileOutputRecordStream_Set_SeparatorCharResponse);
  rpc Get_SeparatorChar(CsvFileOutputRecordStream_Get_SeparatorCharRequest) returns (CsvFileOutputRecordStream_Get_SeparatorCharResponse);
  
  
  // Property: AutoFlush
  //
  // Set or retrieve the automatic flushing behavior of this CsvFileOutputRecordStream.
  //
  // If AutoFlush is false, this CsvFileOutputRecordStream is free to buffer data to improve performance. If AutoFlush is true, write operations (CsvFileOutputRecordStream.WriteRecord, CsvFileOutputRecordStream.WriteRecordFrom, and CsvFileOutputRecordStream.WriteLine) automatically flush before returning, reducing the risk of data loss in the event of a crash or other failure.
  // Set AutoFlush to true when it is critical that no data be lost in the event of an unexpected crash or internal error. Set AutoFlush to false to achieve better performance. By default AutoFlush is false.
  // 
  //
  // CsvFileOutputRecordStream_Set_AutoFlushRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CsvFileOutputRecordStreamInstance - The id of the CsvFileOutputRecordStream object.
  //    - val: bool - Set or retrieve the automatic flushing behavior of this CsvFileOutputRecordStream. 
  //
  // CsvFileOutputRecordStream_Set_AutoFlushResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CsvFileOutputRecordStream_Get_AutoFlushRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CsvFileOutputRecordStreamInstance - The id of the CsvFileOutputRecordStream object.
  //
  // CsvFileOutputRecordStream_Get_AutoFlushResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Set or retrieve the automatic flushing behavior of this CsvFileOutputRecordStream. 
  //
  rpc Set_AutoFlush(CsvFileOutputRecordStream_Set_AutoFlushRequest) returns (CsvFileOutputRecordStream_Set_AutoFlushResponse);
  rpc Get_AutoFlush(CsvFileOutputRecordStream_Get_AutoFlushRequest) returns (CsvFileOutputRecordStream_Get_AutoFlushResponse);
  
  
}
message CsvFileOutputRecordStreamInstance {
  // Specifies the handle of the CsvFileOutputRecordStream instance in the server.
  string id = 1;
}
message CsvFileOutputRecordStream_OpenRequest {
  // The id of the CsvFileOutputRecordStream object.
  CsvFileOutputRecordStreamInstance instance = 1;
  // Specifies the absolute path to the CSV file.
  string absolutePath = 2;
  // Specifies how to open the CSV file.  Supported options include:     * FileOpenMode_NoOptions - Create the file if it does not exist. Fail with a run-time error if the file exists.    * FileOpenMode_Truncate - If the file exists, overwrite it deleting the previous contents. Create a new file if it does not exist.    * FileOpenMode_Append - If the file exists, append to the end of it, preserving the existing contents.  Create a new file if it does not exist.    * FileOpenMode_Uniquify - Create a new file if it does not exist.  If a file with the specified path exists, attempt to make the file name unique by appending "_" (underscore) plus a numeric suffix to the file name. For example, if "AlreadyExists.csv" already exists, "AlreadyExists_2.csv" is tried, then "AlreadyExists_3.csv", etc. until a unique name has been found. If a unique name is not found after 10000 attempts, the method fails and throws a runtime error.
  FileOpenModes openMode = 3;
}

message CsvFileOutputRecordStream_OpenResponse {
}

message CsvFileOutputRecordStream_WriteFieldHeadersRequest {
  // The id of the CsvFileOutputRecordStream object.
  CsvFileOutputRecordStreamInstance instance = 1;
  // A container or array specifying the field headers. If a container is specified, names of the subproperties specify the field headers. If an array is specified, the values of the array elements coerced to strings define the field headers.
  PropertyObjectInstance fields = 2;
  // Specifies the mapping from elements (either subproperties or array elements) in the fields parameter to fields in the stream. The mapping is a comma-separated list of index ranges. For example, "0, 3-5, 8-7" specifies that elements 0, 3, 4, 5, 8, and 7 define the field headers.  The final range in the list may be open-ended. For example, "2, 3-" indicates that elements 2, 3, and all elements beyond 3 define the field headers. For convenience, you may specify an empty string to specify all elements be written in order. That is, an empty string is equivalent to 0-. The default value is an empty string.
  string mapping = 3;
}

message CsvFileOutputRecordStream_WriteFieldHeadersResponse {
}

message CsvFileOutputRecordStream_WriteLineRequest {
  // The id of the CsvFileOutputRecordStream object.
  CsvFileOutputRecordStreamInstance instance = 1;
  // The string to write.
  string lineString = 2;
}

message CsvFileOutputRecordStream_WriteLineResponse {
}

message CsvFileOutputRecordStream_WriteRecordPrototypeRequest {
  // The id of the CsvFileOutputRecordStream object.
  CsvFileOutputRecordStreamInstance instance = 1;
  // A container or PropertyObject array defining the prototype for this stream. The name and type of each subproperty or array element define to the name and type of the column in the CSV file with the corresponding index.
  PropertyObjectInstance prototype = 2;
  // Specifies the mapping from fields in the prototype parameter to columns in the CSV file. The mapping is a comma-separated list of index ranges. For example, "0, 3-5, 8-7" specifies that fields 0, 3, 4, 5, 8, and 7 of the container correspond to columns 0-5 of the CSV file. The final range in the list may be open-ended. For example, "2, 3-" indicates that fields 2, 3, and all fields beyond 3 map to columns 0, 1, 2, etc. of the CSV file. The range list may also include individual subproperty or array element names. For example, "Temperature, Pressure, 0-1" specifies that the subproperties or array elements named "Temperature" and "Pressure", followed by those with indices 0 and 1 define columns 0-3 of the CSV file. For convenience, you can specify an empty string to specify all fields from the prototype parameter define the columns in order. That is, an empty string is equivalent to "0-".
  string mapping = 3;
}

message CsvFileOutputRecordStream_WriteRecordPrototypeResponse {
}

message CsvFileOutputRecordStream_Get_PathRequest {
  // The id of the CsvFileOutputRecordStream object.
  CsvFileOutputRecordStreamInstance instance = 1;
}

message CsvFileOutputRecordStream_Get_PathResponse {
  // The path of the CSV file associated with this stream.
  string returnValue = 1;
}

message CsvFileOutputRecordStream_Set_SeparatorCharRequest {
  // The id of the CsvFileOutputRecordStream object.
  CsvFileOutputRecordStreamInstance instance = 1;
  // Get or set the separator character associated with this CsvFileInputRecordStream. By default, the separator character is a "," (comma).
  // 
  string val = 2;
}

message CsvFileOutputRecordStream_Set_SeparatorCharResponse {
}

message CsvFileOutputRecordStream_Get_SeparatorCharRequest {
  // The id of the CsvFileOutputRecordStream object.
  CsvFileOutputRecordStreamInstance instance = 1;
}

message CsvFileOutputRecordStream_Get_SeparatorCharResponse {
  // The separator character for the CSV file.
  string returnValue = 1;
}

message CsvFileOutputRecordStream_Set_AutoFlushRequest {
  // The id of the CsvFileOutputRecordStream object.
  CsvFileOutputRecordStreamInstance instance = 1;
  // Set or retrieve the automatic flushing behavior of this CsvFileOutputRecordStream.
  bool val = 2;
}

message CsvFileOutputRecordStream_Set_AutoFlushResponse {
}

message CsvFileOutputRecordStream_Get_AutoFlushRequest {
  // The id of the CsvFileOutputRecordStream object.
  CsvFileOutputRecordStreamInstance instance = 1;
}

message CsvFileOutputRecordStream_Get_AutoFlushResponse {
  // True makes all write operations flush immediately.  False allows this stream to buffer write operations for better performance.
  bool returnValue = 1;
}

// SelectedBreakpointItem
//
// A SelectedBreakpointItem object specifies a breakpoint in a sequence file. Use this object for the selectedItemParam parameter of the Engine.DisplayEditBreakAndWatchDialog method, which returns the last selected item on the Breakpoints tab of the Edit Breakpoints/Watch Expressions dialog box when the user clicks the Goto button. The selected item can be a sequence file, sequence, or step.
//
service SelectedBreakpointItem {
  // Method: IsEndSelected
  //
  // Returns a value that indicates whether the selected breakpoint was on the End marker in the sequence.
  //
  // SelectedBreakpointItem_IsEndSelectedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SelectedBreakpointItemInstance - The id of the SelectedBreakpointItem object.
  //
  // SelectedBreakpointItem_IsEndSelectedResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the selected breakpoint is on the End marker. Otherwise, returns False. 
  //
  rpc IsEndSelected(SelectedBreakpointItem_IsEndSelectedRequest) returns (SelectedBreakpointItem_IsEndSelectedResponse);
  
  

  // Property: SequenceFile
  //
  // Returns the selected sequence file. TestStand returns an empty reference if no item was selected.
  //
  // SelectedBreakpointItem_Get_SequenceFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SelectedBreakpointItemInstance - The id of the SelectedBreakpointItem object.
  //
  // SelectedBreakpointItem_Get_SequenceFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFileInstance - Returns the selected sequence file. TestStand returns an empty reference if no item was selected. 
  //
  rpc Get_SequenceFile(SelectedBreakpointItem_Get_SequenceFileRequest) returns (SelectedBreakpointItem_Get_SequenceFileResponse);
  
  
  // Property: SequenceName
  //
  // Returns the name of the selected sequence. TestStand returns an empty string if only the sequence file of a breakpoint was selected.
  //
  // SelectedBreakpointItem_Get_SequenceNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SelectedBreakpointItemInstance - The id of the SelectedBreakpointItem object.
  //
  // SelectedBreakpointItem_Get_SequenceNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the selected sequence. TestStand returns an empty string if only the sequence file of a breakpoint was selected. 
  //
  rpc Get_SequenceName(SelectedBreakpointItem_Get_SequenceNameRequest) returns (SelectedBreakpointItem_Get_SequenceNameResponse);
  
  
  // Property: StepGroup
  //
  // Returns the step group that contains the selected breakpoint. The return value for this parameter is meaningless if only the sequence file or sequence of a breakpoint was selected.
  //
  // SelectedBreakpointItem_Get_StepGroupRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SelectedBreakpointItemInstance - The id of the SelectedBreakpointItem object.
  //
  // SelectedBreakpointItem_Get_StepGroupResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepGroups - Returns the step group that contains the selected breakpoint. The return value for this parameter is meaningless if only the sequence file or sequence of a breakpoint was selected. 
  //
  rpc Get_StepGroup(SelectedBreakpointItem_Get_StepGroupRequest) returns (SelectedBreakpointItem_Get_StepGroupResponse);
  
  
  // Property: StepId
  //
  // Returns the ID of the step that has the selected breakpoint. TestStand returns an empty string if only a sequence file or sequence was selected.
  //
  // SelectedBreakpointItem_Get_StepIdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SelectedBreakpointItemInstance - The id of the SelectedBreakpointItem object.
  //
  // SelectedBreakpointItem_Get_StepIdResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the ID of the step that has the selected breakpoint. TestStand returns an empty string if only a sequence file or sequence was selected. 
  //
  rpc Get_StepId(SelectedBreakpointItem_Get_StepIdRequest) returns (SelectedBreakpointItem_Get_StepIdResponse);
  
  
}
message SelectedBreakpointItemInstance {
  // Specifies the handle of the SelectedBreakpointItem instance in the server.
  string id = 1;
}
message SelectedBreakpointItem_IsEndSelectedRequest {
  // The id of the SelectedBreakpointItem object.
  SelectedBreakpointItemInstance instance = 1;
}

message SelectedBreakpointItem_IsEndSelectedResponse {
  // Returns True if the selected breakpoint is on the End marker. Otherwise, returns False.
  bool returnValue = 1;
}

message SelectedBreakpointItem_Get_SequenceFileRequest {
  // The id of the SelectedBreakpointItem object.
  SelectedBreakpointItemInstance instance = 1;
}

message SelectedBreakpointItem_Get_SequenceFileResponse {
  // Returns the selected sequence file. TestStand returns an empty reference if no item was selected.
  SequenceFileInstance returnValue = 1;
}

message SelectedBreakpointItem_Get_SequenceNameRequest {
  // The id of the SelectedBreakpointItem object.
  SelectedBreakpointItemInstance instance = 1;
}

message SelectedBreakpointItem_Get_SequenceNameResponse {
  // Returns the name of the selected sequence. TestStand returns an empty string if only the sequence file of a breakpoint was selected.
  string returnValue = 1;
}

message SelectedBreakpointItem_Get_StepGroupRequest {
  // The id of the SelectedBreakpointItem object.
  SelectedBreakpointItemInstance instance = 1;
}

message SelectedBreakpointItem_Get_StepGroupResponse {
  // Returns the step group that contains the selected breakpoint. The return value for this parameter is meaningless if only the sequence file or sequence of a breakpoint was selected.
  StepGroups returnValue = 1;
}

message SelectedBreakpointItem_Get_StepIdRequest {
  // The id of the SelectedBreakpointItem object.
  SelectedBreakpointItemInstance instance = 1;
}

message SelectedBreakpointItem_Get_StepIdResponse {
  // Returns the ID of the step that has the selected breakpoint. TestStand returns an empty string if only a sequence file or sequence was selected.
  string returnValue = 1;
}

// IUndoItem2
//
service IUndoItem2 {
  // Method: Undo
  //
  rpc Undo(IUndoItem2_UndoRequest) returns (IUndoItem2_UndoResponse);
  
  
  // Method: Redo
  //
  rpc Redo(IUndoItem2_RedoRequest) returns (IUndoItem2_RedoResponse);
  
  

  // Property: EditedFile
  //
  rpc Get_EditedFile(IUndoItem2_Get_EditedFileRequest) returns (IUndoItem2_Get_EditedFileResponse);
  
  
  // Property: EditedObjects
  //
  rpc Get_EditedObjects(IUndoItem2_Get_EditedObjectsRequest) returns (IUndoItem2_Get_EditedObjectsResponse);
  
  
  // Property: UndoDescription
  //
  rpc Get_UndoDescription(IUndoItem2_Get_UndoDescriptionRequest) returns (IUndoItem2_Get_UndoDescriptionResponse);
  
  
  // Property: RedoDescription
  //
  rpc Get_RedoDescription(IUndoItem2_Get_RedoDescriptionRequest) returns (IUndoItem2_Get_RedoDescriptionResponse);
  
  
  // Property: CanUndo
  //
  rpc Get_CanUndo(IUndoItem2_Get_CanUndoRequest) returns (IUndoItem2_Get_CanUndoResponse);
  
  
  // Property: CanRedo
  //
  rpc Get_CanRedo(IUndoItem2_Get_CanRedoRequest) returns (IUndoItem2_Get_CanRedoResponse);
  
  
  // Property: UndoEditKind
  //
  rpc Get_UndoEditKind(IUndoItem2_Get_UndoEditKindRequest) returns (IUndoItem2_Get_UndoEditKindResponse);
  
  
  // Property: RedoEditKind
  //
  rpc Get_RedoEditKind(IUndoItem2_Get_RedoEditKindRequest) returns (IUndoItem2_Get_RedoEditKindResponse);
  
  
  // Property: UndoStack
  //
  rpc Set_UndoStack(IUndoItem2_Set_UndoStackRequest) returns (IUndoItem2_Set_UndoStackResponse);
  rpc Get_UndoStack(IUndoItem2_Get_UndoStackRequest) returns (IUndoItem2_Get_UndoStackResponse);
  
  
  // Property: RefreshEnabled
  //
  rpc Set_RefreshEnabled(IUndoItem2_Set_RefreshEnabledRequest) returns (IUndoItem2_Set_RefreshEnabledResponse);
  rpc Get_RefreshEnabled(IUndoItem2_Get_RefreshEnabledRequest) returns (IUndoItem2_Get_RefreshEnabledResponse);
  
  
  // Property: PreEditLocations
  //
  rpc Get_PreEditLocations(IUndoItem2_Get_PreEditLocationsRequest) returns (IUndoItem2_Get_PreEditLocationsResponse);
  
  
  // Property: PostEditLocations
  //
  rpc Get_PostEditLocations(IUndoItem2_Get_PostEditLocationsRequest) returns (IUndoItem2_Get_PostEditLocationsResponse);
  
  
  // Property: PreEditChangeCount
  //
  rpc Get_PreEditChangeCount(IUndoItem2_Get_PreEditChangeCountRequest) returns (IUndoItem2_Get_PreEditChangeCountResponse);
  
  
  // Property: PostEditChangeCount
  //
  rpc Get_PostEditChangeCount(IUndoItem2_Get_PostEditChangeCountRequest) returns (IUndoItem2_Get_PostEditChangeCountResponse);
  
  
  // Property: TopObjects
  //
  rpc Get_TopObjects(IUndoItem2_Get_TopObjectsRequest) returns (IUndoItem2_Get_TopObjectsResponse);
  
  
  // Property: LookupStrings
  //
  rpc Get_LookupStrings(IUndoItem2_Get_LookupStringsRequest) returns (IUndoItem2_Get_LookupStringsResponse);
  
  
}
message IUndoItem2Instance {
  // Specifies the handle of the IUndoItem2 instance in the server.
  string id = 1;
}
message IUndoItem2_UndoRequest {
  // The id of the IUndoItem2 object.
  IUndoItem2Instance instance = 1;
}

message IUndoItem2_UndoResponse {
}

message IUndoItem2_RedoRequest {
  // The id of the IUndoItem2 object.
  IUndoItem2Instance instance = 1;
}

message IUndoItem2_RedoResponse {
}

message IUndoItem2_Get_EditedFileRequest {
  // The id of the IUndoItem2 object.
  IUndoItem2Instance instance = 1;
}

message IUndoItem2_Get_EditedFileResponse {
  PropertyObjectFileInstance returnValue = 1;
}

message IUndoItem2_Get_EditedObjectsRequest {
  // The id of the IUndoItem2 object.
  IUndoItem2Instance instance = 1;
}

message IUndoItem2_Get_EditedObjectsResponse {
  repeated PropertyObjectInstance returnValue = 1;
}

message IUndoItem2_Get_UndoDescriptionRequest {
  // The id of the IUndoItem2 object.
  IUndoItem2Instance instance = 1;
}

message IUndoItem2_Get_UndoDescriptionResponse {
  string returnValue = 1;
}

message IUndoItem2_Get_RedoDescriptionRequest {
  // The id of the IUndoItem2 object.
  IUndoItem2Instance instance = 1;
}

message IUndoItem2_Get_RedoDescriptionResponse {
  string returnValue = 1;
}

message IUndoItem2_Get_CanUndoRequest {
  // The id of the IUndoItem2 object.
  IUndoItem2Instance instance = 1;
}

message IUndoItem2_Get_CanUndoResponse {
  bool returnValue = 1;
}

message IUndoItem2_Get_CanRedoRequest {
  // The id of the IUndoItem2 object.
  IUndoItem2Instance instance = 1;
}

message IUndoItem2_Get_CanRedoResponse {
  bool returnValue = 1;
}

message IUndoItem2_Get_UndoEditKindRequest {
  // The id of the IUndoItem2 object.
  IUndoItem2Instance instance = 1;
}

message IUndoItem2_Get_UndoEditKindResponse {
  EditKinds returnValue = 1;
}

message IUndoItem2_Get_RedoEditKindRequest {
  // The id of the IUndoItem2 object.
  IUndoItem2Instance instance = 1;
}

message IUndoItem2_Get_RedoEditKindResponse {
  EditKinds returnValue = 1;
}

message IUndoItem2_Set_UndoStackRequest {
  // The id of the IUndoItem2 object.
  IUndoItem2Instance instance = 1;
  UndoStackInstance val = 2;
}

message IUndoItem2_Set_UndoStackResponse {
}

message IUndoItem2_Get_UndoStackRequest {
  // The id of the IUndoItem2 object.
  IUndoItem2Instance instance = 1;
}

message IUndoItem2_Get_UndoStackResponse {
  UndoStackInstance returnValue = 1;
}

message IUndoItem2_Set_RefreshEnabledRequest {
  // The id of the IUndoItem2 object.
  IUndoItem2Instance instance = 1;
  bool val = 2;
}

message IUndoItem2_Set_RefreshEnabledResponse {
}

message IUndoItem2_Get_RefreshEnabledRequest {
  // The id of the IUndoItem2 object.
  IUndoItem2Instance instance = 1;
}

message IUndoItem2_Get_RefreshEnabledResponse {
  bool returnValue = 1;
}

message IUndoItem2_Get_PreEditLocationsRequest {
  // The id of the IUndoItem2 object.
  IUndoItem2Instance instance = 1;
}

message IUndoItem2_Get_PreEditLocationsResponse {
  LocationsInstance returnValue = 1;
}

message IUndoItem2_Get_PostEditLocationsRequest {
  // The id of the IUndoItem2 object.
  IUndoItem2Instance instance = 1;
}

message IUndoItem2_Get_PostEditLocationsResponse {
  LocationsInstance returnValue = 1;
}

message IUndoItem2_Get_PreEditChangeCountRequest {
  // The id of the IUndoItem2 object.
  IUndoItem2Instance instance = 1;
}

message IUndoItem2_Get_PreEditChangeCountResponse {
  int32 returnValue = 1;
}

message IUndoItem2_Get_PostEditChangeCountRequest {
  // The id of the IUndoItem2 object.
  IUndoItem2Instance instance = 1;
}

message IUndoItem2_Get_PostEditChangeCountResponse {
  int32 returnValue = 1;
}

message IUndoItem2_Get_TopObjectsRequest {
  // The id of the IUndoItem2 object.
  IUndoItem2Instance instance = 1;
}

message IUndoItem2_Get_TopObjectsResponse {
  repeated PropertyObjectInstance returnValue = 1;
}

message IUndoItem2_Get_LookupStringsRequest {
  // The id of the IUndoItem2 object.
  IUndoItem2Instance instance = 1;
}

message IUndoItem2_Get_LookupStringsResponse {
  repeated string returnValue = 1;
}

// InputRecordStream
//
// 
//
service InputRecordStream {
  // Method: ReadRecord
  //
  // Read the next record from the stream.
  //
  // InputRecordStream_ReadRecordRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: InputRecordStreamInstance - The id of the InputRecordStream object.
  //    - record: PropertyObjectInstance - Specifies where to store the incoming record. The record parameter may be a container, array, or string.  If it is a container, the container represents the record, and each subproperty is a field.  If the record parameter is an array, the array represents the record, and each array element is a field.  If the record parameter is a string, the fields are written to the string as a comma-separated list.
  //    - mapping: string - Specifies the mapping to elements (subproperties or array elements) in the record parameter from fields in the InputRecordStream.  Mapping is not supported if the record parameter is a string. The mapping is a comma-separated list of index ranges.  For example, "0, 3-5, 8-7" specifies that fields from the incoming record be stored to elements 0, 3, 4, 5, 8, and 7 of the container or array.  The last range in the list may be open-ended.  For example, "2, 3-" specifies that fields from the incoming record be written to elements 2, 3, and all elements beyond 3 of the container or array. If the record parameter is a container, the range list may include individual subproperty names.  For example, "Temperature, Pressure, 0-1" specifies that fields from the incoming record be written to the subproperties "Temperature" and "Pressure" followed by elements 0 and 1. For convenience, you may specify an empty string to specify all elements be written in order.  That is, an empty string is equivalent to "0-". The default value is an empty string.
  //
  // InputRecordStream_ReadRecordResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns 0 if a record was successfully read.  Returns non-zero if end of file was encountered before reading a record. 
  //
  rpc ReadRecord(InputRecordStream_ReadRecordRequest) returns (InputRecordStream_ReadRecordResponse);
  
  
  // Method: ReadRecordTo
  //
  // Read the next record from this stream.
  //
  // InputRecordStream_ReadRecordToRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: InputRecordStreamInstance - The id of the InputRecordStream object.
  //    - context: SequenceContextInstance - Specifies the SequenceContext against which to evaluate the lookup strings specified by the record parameter. 
  //    - record: repeated string - An array of lookup strings specifying where to store the fields from the incoming record.  The lookup strings are evaluated relative to the SequenceContext specified by the context parameter.
  //
  // InputRecordStream_ReadRecordToResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns 0 if a record was successfully read.  Returns non-zero if end of file was encountered before reading a record. 
  //
  rpc ReadRecordTo(InputRecordStream_ReadRecordToRequest) returns (InputRecordStream_ReadRecordToResponse);
  
  
  // Method: SkipRecords
  //
  // Skip the specified number of records.
  //
  // InputRecordStream_SkipRecordsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: InputRecordStreamInstance - The id of the InputRecordStream object.
  //    - numRecords: int32 - The number of records to skip.  If numRecords is 0, InputRecordStream.SkipRecords returns successfully without modifying the stream. Classes that implement the InputRecordStream interface are not required to support negative values for numRecords.
  //
  // InputRecordStream_SkipRecordsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns 0 if numRecords were successfully skipped.  Returns non-zero if end of file was encountered before numRecords were skipped. 
  //
  rpc SkipRecords(InputRecordStream_SkipRecordsRequest) returns (InputRecordStream_SkipRecordsResponse);
  
  
  // Method: Close
  //
  // Close this InputRecordStream.
  //
  // The exact behavior of Close depends on the implementation details of the class that implements the InputRecordStream interface.
  //
  // InputRecordStream_CloseRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InputRecordStreamInstance - The id of the InputRecordStream object.
  //
  // InputRecordStream_CloseResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Close(InputRecordStream_CloseRequest) returns (InputRecordStream_CloseResponse);
  
  

  // Property: FieldMapping
  //
  // Specifies which fields to read from the InputRecordStream.
  //
  // The mapping is a comma-separated list of index ranges.  For example, 0, 3-5, 8-7 specifies that fields 0, 3, 4, 5, 8, and 7 of each record in the stream be stored to fields 0-5 of each read record output from InputRecordStream.ReadRecord or InputRecordStream.ReadRecordTo.  The last range in the list may be open-ended.  For example, 2, 3- specifies that fields 2, 3, and fields beyond 3 will be stored to fields 0, 1, and fields beyond 1 of each read record.
  // 
  // Note: This mapping is distinct from and may be used in combination with the mapping parameter in calls to ReadRecord.
  //
  // InputRecordStream_Set_FieldMappingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InputRecordStreamInstance - The id of the InputRecordStream object.
  //    - val: string - Specifies which fields to read from the InputRecordStream. 
  //
  // InputRecordStream_Set_FieldMappingResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // InputRecordStream_Get_FieldMappingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InputRecordStreamInstance - The id of the InputRecordStream object.
  //
  // InputRecordStream_Get_FieldMappingResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies which fields to read from the InputRecordStream. 
  //
  rpc Set_FieldMapping(InputRecordStream_Set_FieldMappingRequest) returns (InputRecordStream_Set_FieldMappingResponse);
  rpc Get_FieldMapping(InputRecordStream_Get_FieldMappingRequest) returns (InputRecordStream_Get_FieldMappingResponse);
  
  
}
message InputRecordStreamInstance {
  // Specifies the handle of the InputRecordStream instance in the server.
  string id = 1;
}
message InputRecordStream_ReadRecordRequest {
  // The id of the InputRecordStream object.
  InputRecordStreamInstance instance = 1;
  // Specifies where to store the incoming record. The record parameter may be a container, array, or string.  If it is a container, the container represents the record, and each subproperty is a field.  If the record parameter is an array, the array represents the record, and each array element is a field.  If the record parameter is a string, the fields are written to the string as a comma-separated list.
  PropertyObjectInstance record = 2;
  // Specifies the mapping to elements (subproperties or array elements) in the record parameter from fields in the InputRecordStream.  Mapping is not supported if the record parameter is a string. The mapping is a comma-separated list of index ranges.  For example, "0, 3-5, 8-7" specifies that fields from the incoming record be stored to elements 0, 3, 4, 5, 8, and 7 of the container or array.  The last range in the list may be open-ended.  For example, "2, 3-" specifies that fields from the incoming record be written to elements 2, 3, and all elements beyond 3 of the container or array. If the record parameter is a container, the range list may include individual subproperty names.  For example, "Temperature, Pressure, 0-1" specifies that fields from the incoming record be written to the subproperties "Temperature" and "Pressure" followed by elements 0 and 1. For convenience, you may specify an empty string to specify all elements be written in order.  That is, an empty string is equivalent to "0-". The default value is an empty string.
  string mapping = 3;
}

message InputRecordStream_ReadRecordResponse {
  // Returns 0 if a record was successfully read.  Returns non-zero if end of file was encountered before reading a record.
  int32 returnValue = 1;
}

message InputRecordStream_ReadRecordToRequest {
  // The id of the InputRecordStream object.
  InputRecordStreamInstance instance = 1;
  // Specifies the SequenceContext against which to evaluate the lookup strings specified by the record parameter.
  SequenceContextInstance context = 2;
  // An array of lookup strings specifying where to store the fields from the incoming record.  The lookup strings are evaluated relative to the SequenceContext specified by the context parameter.
  repeated string record = 3;
}

message InputRecordStream_ReadRecordToResponse {
  // Returns 0 if a record was successfully read.  Returns non-zero if end of file was encountered before reading a record.
  int32 returnValue = 1;
}

message InputRecordStream_SkipRecordsRequest {
  // The id of the InputRecordStream object.
  InputRecordStreamInstance instance = 1;
  // The number of records to skip.  If numRecords is 0, InputRecordStream.SkipRecords returns successfully without modifying the stream. Classes that implement the InputRecordStream interface are not required to support negative values for numRecords.
  int32 numRecords = 2;
}

message InputRecordStream_SkipRecordsResponse {
  // Returns 0 if numRecords were successfully skipped.  Returns non-zero if end of file was encountered before numRecords were skipped.
  int32 returnValue = 1;
}

message InputRecordStream_CloseRequest {
  // The id of the InputRecordStream object.
  InputRecordStreamInstance instance = 1;
}

message InputRecordStream_CloseResponse {
}

message InputRecordStream_Set_FieldMappingRequest {
  // The id of the InputRecordStream object.
  InputRecordStreamInstance instance = 1;
  // Specifies which fields to read from the InputRecordStream.
  string val = 2;
}

message InputRecordStream_Set_FieldMappingResponse {
}

message InputRecordStream_Get_FieldMappingRequest {
  // The id of the InputRecordStream object.
  InputRecordStreamInstance instance = 1;
}

message InputRecordStream_Get_FieldMappingResponse {
  // Specifies which fields to read from the InputRecordStream.
  // 
  string returnValue = 1;
}

// InputStream
//
// Objects of the InputStream class represent an abstract stream of data. In a sequence file translator, this stream reads the content of a user file. The InputStream class allows the translators to read, seek, and query the size of a file.
// You cannot create an InputStream object externally, and you can obtain a reference only in the DLL interface exposed to a sequence file translator. The TestStand Engine creates an InputStream object and passes the object to various callbacks in the DLL interface.
//
service InputStream {
  // Method: ReadBytes
  //
  // Obtains an array of bytes that contains the data read from the stream. This method reads the specified number of bytes from the stream and stores them in a byte array.
  //
  // This method increments the Offset of the stream reader by using the number of bytes read from the stream.
  // The actual number of bytes read from the stream can be less than the number of bytes specified for reading. You can use the stream reader Offset before and after the read to determine the actual number of bytes read.
  // 
  //
  // InputStream_ReadBytesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: InputStreamInstance - The id of the InputStream object.
  //    - numBytes: int32 - Specifies the maximum number of bytes to read from the stream.
  //
  // InputStream_ReadBytesResponse - The response message from the server. It provides the return value.
  //    - returnValue: bytes - An array of bytes that contains the data read from the stream. 
  //
  rpc ReadBytes(InputStream_ReadBytesRequest) returns (InputStream_ReadBytesResponse);
  
  

  // Property: IsEndofStream
  //
  // Indicates if the end of the stream has been reached.
  //
  // Use this property to determine whether the end of stream has been reached.
  //
  // InputStream_Get_IsEndofStreamRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InputStreamInstance - The id of the InputStream object.
  //
  // InputStream_Get_IsEndofStreamResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Indicates if the end of the stream has been reached. 
  //
  rpc Get_IsEndofStream(InputStream_Get_IsEndofStreamRequest) returns (InputStream_Get_IsEndofStreamResponse);
  
  
  // Property: Length
  //
  // Returns the size of the stream in bytes.
  //
  // Use this property to obtain the size of the stream. You can use this value to determine how many characters to allocate for a buffer or to read from the stream.
  //
  // InputStream_Get_LengthRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InputStreamInstance - The id of the InputStream object.
  //
  // InputStream_Get_LengthResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the size of the stream in bytes. 
  //
  rpc Get_Length(InputStream_Get_LengthRequest) returns (InputStream_Get_LengthResponse);
  
  
  // Property: Offset
  //
  // Specifies the current position of the reader in the stream. The offset is always from the start of the stream.
  //
  // Use this property to query the current position in the stream or to move the reader to a different position in the stream. The InputStream.ReadBytes method updates the stream reader position by using the number of bytes read from the stream.
  //
  // InputStream_Set_OffsetRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InputStreamInstance - The id of the InputStream object.
  //    - val: int32 - Specifies the current position of the reader in the stream. The offset is always from the start of the stream. 
  //
  // InputStream_Set_OffsetResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // InputStream_Get_OffsetRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InputStreamInstance - The id of the InputStream object.
  //
  // InputStream_Get_OffsetResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the current position of the reader in the stream. The offset is always from the start of the stream. 
  //
  rpc Set_Offset(InputStream_Set_OffsetRequest) returns (InputStream_Set_OffsetResponse);
  rpc Get_Offset(InputStream_Get_OffsetRequest) returns (InputStream_Get_OffsetResponse);
  
  
  // Property: Path
  //
  // Returns the pathname TestStand used when it loaded the user file.
  //
  // InputStream_Get_PathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InputStreamInstance - The id of the InputStream object.
  //
  // InputStream_Get_PathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the pathname TestStand used when it loaded the user file. 
  //
  rpc Get_Path(InputStream_Get_PathRequest) returns (InputStream_Get_PathResponse);
  
  
}
message InputStreamInstance {
  // Specifies the handle of the InputStream instance in the server.
  string id = 1;
}
message InputStream_ReadBytesRequest {
  // The id of the InputStream object.
  InputStreamInstance instance = 1;
  // Specifies the maximum number of bytes to read from the stream.
  int32 numBytes = 2;
}

message InputStream_ReadBytesResponse {
  // An array of bytes that contains the data read from the stream.
  bytes returnValue = 1;
}

message InputStream_Get_IsEndofStreamRequest {
  // The id of the InputStream object.
  InputStreamInstance instance = 1;
}

message InputStream_Get_IsEndofStreamResponse {
  // Indicates if the end of the stream has been reached.
  bool returnValue = 1;
}

message InputStream_Get_LengthRequest {
  // The id of the InputStream object.
  InputStreamInstance instance = 1;
}

message InputStream_Get_LengthResponse {
  // Returns the size of the stream in bytes.
  int32 returnValue = 1;
}

message InputStream_Set_OffsetRequest {
  // The id of the InputStream object.
  InputStreamInstance instance = 1;
  // Specifies the current position of the reader in the stream. The offset is always from the start of the stream.
  int32 val = 2;
}

message InputStream_Set_OffsetResponse {
}

message InputStream_Get_OffsetRequest {
  // The id of the InputStream object.
  InputStreamInstance instance = 1;
}

message InputStream_Get_OffsetResponse {
  // Specifies the current position of the reader in the stream. The offset is always from the start of the stream.
  int32 returnValue = 1;
}

message InputStream_Get_PathRequest {
  // The id of the InputStream object.
  InputStreamInstance instance = 1;
}

message InputStream_Get_PathResponse {
  // Returns the pathname TestStand used when it loaded the user file.
  string returnValue = 1;
}

// Engine
//
// Use the Engine class to create and access objects of other classes, control executions, launch built-in dialog boxes, implement a Tools menu, find files and directories, and invoke various utilities. Create the Engine object directly using ActiveX. To access the Engine object from a step, use the TestStand API to obtain the value of the Engine property from the SequenceContext class or pass the SequenceContext property RunState.Engine as an object parameter to the step.
// The following examples show how to create the initial Engine object:
// (Platform: LabWindows/CVI)
// CAObjHandle engineObj = 0;TS_NewEngine(NULL, &engineObj);
// (Platform: Visual Basic)
// 'Place the TestStand Engine ActiveX control on the main form.
// (Platform: Visual C/C++)
// #import "C:\TestStand\Bin\teapi.dll"TS::IEnginePtr engine;HRESULT hr = engine.CreateInstance(__uuidof(TS::Engine));
//
service Engine {
  // Service: Engine
  //
  // Creates a new Engine instance
  //
  // EngineRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // EngineResponse - The response message from the server. It provides the return value.
  //    - returnValue: EngineInstance - The return type of the Engine object.
  //
  rpc Engine(Engine_EngineRequest) returns (Engine_EngineResponse);

  // Method: NewCsvFileInputRecordStream
  //
  // Create a new CsvFileInputRecordStream for the specified file.
  //
  // When the returned CsvFileInputRecordStream is no longer needed, it should be closed by calling CsvFileInputRecordStream.Close.  If it is not closed already, the stream closes automatically when the last reference to it is removed.
  //
  // Engine_NewCsvFileInputRecordStreamRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - absolutePath: string - Specifies the absolute path to the CSV file.
  //
  // Engine_NewCsvFileInputRecordStreamResponse - The response message from the server. It provides the return value.
  //    - returnValue: CsvFileInputRecordStreamInstance - The return type of the CsvFileInputRecordStream object.
  //
  rpc NewCsvFileInputRecordStream(Engine_NewCsvFileInputRecordStreamRequest) returns (Engine_NewCsvFileInputRecordStreamResponse);
  
  
  // Method: NewCsvFileOutputRecordStream
  //
  // Create a new CsvFileOutputRecordStream for the specified file.
  //
  // When the returned CsvFileOutputRecordStream is no longer needed, it should be closed by calling OutputRecordStream.Close.  If it is not closed already, the stream closes automatically when the last reference to it is removed.
  //
  // Engine_NewCsvFileOutputRecordStreamRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - absolutePath: string - Specifies the absolute path to the CSV file.
  //    - openMode: int32 - Specifies how to open the CSV file. Supported options include:FileOpenMode_NoOptions - Create the file if it does not exist.  Fail with a run-time error if the file exists.
  //      FileOpenMode_Truncate - If the file exists, overwrite it deleting the previous contents.  Create a new file if it does not exist.
  //      FileOpenMode_Append - If the file exists, append to the end of it, preserving the existing contents.  Create a new file if it does not exist.
  //      FileOpenMode_Uniquify - Create a new file if it does not exist.  If a file with the specified path exists, attempt to make the file name unique by appending "_" (underscore) plus a numeric suffix to the file name.  For example, if AlreadyExists.csv already exists, AlreadyExists_2.csv is tried, then AlreadyExists_3.csv, etc. until a unique name has been found.  If a unique name is not found after 10000 attempts, the method fails and throws a runtime error.
  //
  // Engine_NewCsvFileOutputRecordStreamResponse - The response message from the server. It provides the return value.
  //    - returnValue: CsvFileOutputRecordStreamInstance - The return type of the CsvFileOutputRecordStream object.
  //
  rpc NewCsvFileOutputRecordStream(Engine_NewCsvFileOutputRecordStreamRequest) returns (Engine_NewCsvFileOutputRecordStreamResponse);
  
  
  // Method: RegisterSequenceToExecuteOnCrash
  //
  // Registers the sequence to execute on TestStand application crash.
  //
  // The sequence is executed in an external application on TestStand application crash. Default parameter values are used when calling the registered sequence. If run time error option is set to Show dialog, the setting is ignored (no dialogs are shown from external application) and cleanup will be executed.
  //
  // Engine_RegisterSequenceToExecuteOnCrashRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - seqFilePath: string - Specifies the pathname of the sequence file. If the pathname is relative, this method tries to find it using Engine.FindFileEx method.
  //    - seqName: string - Specifies the name of the sequence to execute on TestStand application crash.
  //    - options: int32 - Specifies whether to load the sequence file in the external application after TestStand application crash or when sequence is registered. Pass 0 to specify the default behavior, or pass one or more CrashCallbackOptions. Use the bitwise-OR operator to specify multiple options. 
  //      
  //    - reserved: ObjectInstance - This parameter is reserved.
  //
  // Engine_RegisterSequenceToExecuteOnCrashResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the registration id for Engine.UnregisterSequenceToExecuteOnCrash. 
  //
  rpc RegisterSequenceToExecuteOnCrash(Engine_RegisterSequenceToExecuteOnCrashRequest) returns (Engine_RegisterSequenceToExecuteOnCrashResponse);
  
  
  // Method: UnregisterSequenceToExecuteOnCrash
  //
  // Unregisters the sequence to execute on TestStand application crash.
  //
  // Engine_UnregisterSequenceToExecuteOnCrashRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - registrationId: int32 - Pass the registrationId you receive as the return value from Engine.RegisterSequenceToExecuteOnCrash method.
  //
  // Engine_UnregisterSequenceToExecuteOnCrashResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc UnregisterSequenceToExecuteOnCrash(Engine_UnregisterSequenceToExecuteOnCrashRequest) returns (Engine_UnregisterSequenceToExecuteOnCrashResponse);
  
  
  // Method: DisplayIOConfigurationOptionsDialog
  //
  // Launches a dialog box for configuring IO Configuration options.
  //
  // Engine_DisplayIOConfigurationOptionsDialogRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_DisplayIOConfigurationOptionsDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if you click OK in the dialog box. Returns False if you click Cancel. 
  //
  rpc DisplayIOConfigurationOptionsDialog(Engine_DisplayIOConfigurationOptionsDialogRequest) returns (Engine_DisplayIOConfigurationOptionsDialogResponse);
  
  
  // Method: DisplayErrorDialog
  //
  // Launches a dialog box to display an error message.
  //
  // Depending on the error message, the dialog might divide the message into expandable subsections. If the message includes location information, the dialog can offer the user the option to navigate to the location.
  //
  // Engine_DisplayErrorDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - errorMessage: string - Specifies the error message text to display in the dialog box.
  //    - errorCode: int32 - Specifies the error code to display in the dialog box. If the error code is a TestStand error code and the errorMessage does not already contain the description of the error code, the dialog also displays the error code description.
  //    - dlgOptions: int32 - Specifies CommonDlgOption_NoOptions or CommonDlgOption_DisableGotoLocation.
  //
  // Engine_DisplayErrorDialogResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc DisplayErrorDialog(Engine_DisplayErrorDialogRequest) returns (Engine_DisplayErrorDialogResponse);
  
  
  // Method: DiffSequenceFiles
  //
  // 
  //
  // Engine_DiffSequenceFilesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - sequenceFile1Param: SequenceFileInstance - Specifies
  //    - sequenceFile2Param: SequenceFileInstance - Specifies
  //    - options: int32 - Specifies
  //
  // Engine_DiffSequenceFilesResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFileDifferInstance - The return type of the SequenceFileDiffer object.
  //
  rpc DiffSequenceFiles(Engine_DiffSequenceFilesRequest) returns (Engine_DiffSequenceFilesResponse);
  
  
  // Method: NewLocations
  //
  // Creates and returns a new Locations object.
  //
  // Engine_NewLocationsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_NewLocationsResponse - The response message from the server. It provides the return value.
  //    - returnValue: LocationsInstance - The return type of the Locations object.
  //
  rpc NewLocations(Engine_NewLocationsRequest) returns (Engine_NewLocationsResponse);
  
  
  // Method: NewUndoItemCreator
  //
  // Creates and returns a new UndoItemCreator object.
  //
  // Engine_NewUndoItemCreatorRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - kindParam: EditKinds - Specifies the kind of edit for which the UndoItemCreator creates an undo item.
  //    - editedFileParam: PropertyObjectFileInstance - Specifies the file you are editing.
  //    - editDescription: string - Specifies a string to use as the UndoDescription and RedoDescription of the undo item the UndoItemCreator creates. If you pass an empty string, the UndoItemCreator uses a default description.
  //
  // Engine_NewUndoItemCreatorResponse - The response message from the server. It provides the return value.
  //    - returnValue: UndoItemCreatorInstance - The return type of the UndoItemCreator object.
  //
  rpc NewUndoItemCreator(Engine_NewUndoItemCreatorRequest) returns (Engine_NewUndoItemCreatorResponse);
  
  
  // Method: GetOutputMessages
  //
  // Note: This method is obsolete. Use the OutputMessages.CopyMessagesToCollection method instead.
  // Returns a reference to the OutputMessages object TestStand maintains. This object is a collection that contains a list of the most recent output messages the OutputMessage.Post method or OutputMessage expression function posts.
  //
  // In TestStand 4.0 and 4.0.1, an application could access this collection in response to the UIMsg_OutputMessages event to obtain new output messages. The application was expected to clear the collection in the handler for this event. If the application did not handle the event or did not clear the collection, the collection could grow without bounds. In TestStand 4.1 or later this method is deprecated, and this collection clears automatically if the application fails to clear it in response to the UIMsg_OutputMessages event. In addition, TestStand adds a warning output message to the collection to notify users about automatically discarded output messages and that the application incorrectly accessed GetOutputMessages without clearing the collection. Although existing applications can handle the UIMsg_OutputMessages event by calling GetOutputMessages and clearing the collection, ensure that new application code obtains the OutputMessages collection that contains the most recent output messages from the ActiveXData member of the user interface message for the UIMsg_OutputMessages event.
  //
  // Engine_GetOutputMessagesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_GetOutputMessagesResponse - The response message from the server. It provides the return value.
  //    - returnValue: OutputMessagesInstance - The return type of the OutputMessages object.
  //
  rpc GetOutputMessages(Engine_GetOutputMessagesRequest) returns (Engine_GetOutputMessagesResponse);
  
  
  // Method: NewOutputMessage
  //
  // Creates and returns a new OutputMessage object.
  //
  // When creating a new object, TestStand initializes the OutputMessage.TimeStamp property to the current time, sets the OutputMessage.TextColor property to black, and sets the OutputMessage.IconName property based on the severity.
  // You must call the OutputMessage.Post method to copy the message to the collection the Engine.GetOutputMessages method returns.
  //
  // Engine_NewOutputMessageRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - messageText: string - Specifies the message text.
  //    - categoryText: string - Specifies the category of the message. Applications typically use the category to filter or sort messages. If you do not specify a category, the output message is considered uncategorized. You can specify any value for this parameter.
  //
  // Engine_NewOutputMessageResponse - The response message from the server. It provides the return value.
  //    - returnValue: OutputMessageInstance - The return type of the OutputMessage object.
  //
  rpc NewOutputMessage(Engine_NewOutputMessageRequest) returns (Engine_NewOutputMessageResponse);
  
  
  // Method: NewOutputMessages
  //
  // Returns a reference to a new OutputMessages object. This collection is initially empty.
  //
  // An application typically creates a new OutputMessages object to collect the output messages the application must process or display. The application receives output messages by handling the UIMsg_OutputMessages event and copying the output messages from the collection stored in the UIMessage.ActiveXData property into a private collection.
  //
  // Engine_NewOutputMessagesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_NewOutputMessagesResponse - The response message from the server. It provides the return value.
  //    - returnValue: OutputMessagesInstance - The return type of the OutputMessages object.
  //
  rpc NewOutputMessages(Engine_NewOutputMessagesRequest) returns (Engine_NewOutputMessagesResponse);
  
  
  // Method: NewUndoStack
  //
  // Creates and returns a new UndoStack object.
  //
  // You must call the UndoStack.Clear method on the UndoStack before you release the last reference to it.
  //
  // Engine_NewUndoStackRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_NewUndoStackResponse - The response message from the server. It provides the return value.
  //    - returnValue: UndoStackInstance - The return type of the UndoStack object.
  //
  rpc NewUndoStack(Engine_NewUndoStackRequest) returns (Engine_NewUndoStackResponse);
  
  
  // Method: ParseLookupString
  //
  // Converts a lookup string into a String Array of the property names in the lookup string.
  //
  // Engine_ParseLookupStringRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - lookupString: string - Specifies the lookup string to parse.
  //    - options: int32 - Specify any combination of ParseLookupStringOptions.
  //
  // Engine_ParseLookupStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated string - The return type of the String[] object.
  //
  rpc ParseLookupString(Engine_ParseLookupStringRequest) returns (Engine_ParseLookupStringResponse);
  
  
  // Method: DisplaySaveOverOldFormatDialog
  //
  rpc DisplaySaveOverOldFormatDialog(Engine_DisplaySaveOverOldFormatDialogRequest) returns (Engine_DisplaySaveOverOldFormatDialogResponse);
  
  
  // Method: DisplayPreconditionBuilderDialog
  //
  // Launches the Preconditions dialog box, in which you construct the precondition expression of a step.
  //
  // Engine_DisplayPreconditionBuilderDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - dlgOptions: int32 - Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWind. By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. Pass CommonDlgOption_ModalToAppMainWind if you want the dialog box to be modal with respect to the window handle of the AppMainHwnd property. Typically, you do not need to set this option.
  //
  // Engine_DisplayPreconditionBuilderDialogResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if you click OK in the dialog box. Returns False if you click Cancel. 
  //    - preconditionExpr: strin - The new value of preconditionExpr if the method modifies it.
  //
  rpc DisplayPreconditionBuilderDialog(Engine_DisplayPreconditionBuilderDialogRequest) returns (Engine_DisplayPreconditionBuilderDialogResponse);
  
  
  // Method: DisplayConfigureTypePalettesDialog
  //
  // Launches a dialog box in which you can edit the order of the type palettes and add or remove type palettes for the engine to load.
  //
  // Engine_DisplayConfigureTypePalettesDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - dlgOptions: int32 - Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWind. By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from the Engine.AppMainHwnd property. Pass CommonDlgOption_ModalToAppMainWind if you want a modal dialog box with respect to the window handle of the AppMainHwnd property. Typically, you do not need to set this option.
  //
  // Engine_DisplayConfigureTypePalettesDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if you click OK in the dialog box. Returns False if you click Cancel. Note: Even if this method returns False, modifications made to sequence files and type palettes might have been saved because some operations in the dialog box prompt you to save a type palette. Saving a type palette prompts you to increment a version number, which is an edit of the file for all files that reference the type. 
  //
  rpc DisplayConfigureTypePalettesDialog(Engine_DisplayConfigureTypePalettesDialogRequest) returns (Engine_DisplayConfigureTypePalettesDialogResponse);
  
  
  // Method: NewEvaluationTypes
  //
  // Creates and returns a new EvaluationTypes object.
  //
  // Engine_NewEvaluationTypesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - initialPropertyValueTypes: int32 - Specifies the value for the EvaluationTypes.PropertyValueTypeFlags property on the object this method returns.
  //
  // Engine_NewEvaluationTypesResponse - The response message from the server. It provides the return value.
  //    - returnValue: EvaluationTypesInstance - The return type of the EvaluationTypes object.
  //
  rpc NewEvaluationTypes(Engine_NewEvaluationTypesRequest) returns (Engine_NewEvaluationTypesResponse);
  
  
  // Method: DisplayEditNumericFormatDialogEx
  //
  // Note: This method is obsolete. Use the PropertyObject.DisplayEditNumericFormatDialog method instead.
  //
  // Launches a dialog box in which you can edit a numeric format string used to display numbers.
  //
  // Engine_DisplayEditNumericFormatDialogExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - dlgOptions: int32 - Specifies any combination of the EditNumericFormatOptions constants.
  //    - sampleNumber: double - Specifies a number to format initially in the dialog box.
  //
  // Engine_DisplayEditNumericFormatDialogExResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if you click OK in the dialog box. Returns False if you click Cancel. 
  //    - validFormat: boo - Returns True if the returned format is valid, otherwise returns False.
  //
  rpc DisplayEditNumericFormatDialogEx(Engine_DisplayEditNumericFormatDialogExRequest) returns (Engine_DisplayEditNumericFormatDialogExResponse);
  
  
  // Method: GetFileInformation
  //
  // Creates and returns a reference to a new FileInformation object you use to retrieve information about a specified file, such as file version, file format version and whether it is a Sequence File or a custom format file.
  //
  // TestStand does not access the file you specify when it calls this method. TestStand accesses the file when you call the properties and methods on the FileInformation object. Thus, TestStand returns a new FileInformation object when the file does not exist at the specified path. Calling methods or properties on a FileInformation object might throw an exception if the file cannot be located. To verify that the file exists on disk and is accessible at the given path, use the FileInformation.FileExists property.
  //
  // Engine_GetFileInformationRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_GetFileInformationResponse - The response message from the server. It provides the return value.
  //    - returnValue: FileInformationInstance - Returns a new FileInformation object. 
  //
  rpc GetFileInformation(Engine_GetFileInformationRequest) returns (Engine_GetFileInformationResponse);
  
  
  // Method: DisplaySaveAsPreviousOverExistingFileDialog
  //
  rpc DisplaySaveAsPreviousOverExistingFileDialog(Engine_DisplaySaveAsPreviousOverExistingFileDialogRequest) returns (Engine_DisplaySaveAsPreviousOverExistingFileDialogResponse);
  
  
  // Method: GetTemplatesFile
  //
  // Returns the PropertyObjectFile that contains templates for variables, steps, and sequences you can insert while editing.
  //
  // Engine_GetTemplatesFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - options: int32 - Specifies any combination of GetTemplatesFileOptions.
  //
  // Engine_GetTemplatesFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectFileInstance - The file that contains the editing templates. 
  //
  rpc GetTemplatesFile(Engine_GetTemplatesFileRequest) returns (Engine_GetTemplatesFileResponse);
  
  
  // Method: AcquireLicense
  //
  // Instructs TestStand to acquire a type of license for the application. When the license is no longer required, call the Engine.ReleaseLicense method using the handle this method returns. An application requires a type of license until you release all license handles for the license type.
  //
  // If TestStand cannot acquire the license and you do not pass AcquireLicenseOption_SuppressStartupDialog to the options parameter, TestStand launches a dialog box that prompts you to evaluate, activate, or purchase TestStand. This method returns an error if TestStand cannot acquire the required license.
  // The Application Manager control automatically calls this method when you call the ApplicationMgr.Start method. When using an Application Manager control to start the engine, set the ApplicationMgr.IsEditor property before calling ApplicationMgr.Start.
  //
  // Engine_AcquireLicenseRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - license: ApplicationLicenses - Specifies the type of license to acquire.
  //    - options: int32 - Specifies one or more AcquireLicenseOptions options.
  //
  // Engine_AcquireLicenseResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - A handle to the acquired license. 
  //
  rpc AcquireLicense(Engine_AcquireLicenseRequest) returns (Engine_AcquireLicenseResponse);
  
  
  // Method: ReleaseLicense
  //
  // Informs TestStand that a previously acquired license is no longer needed. An application requires a type of license until you release all license handles for the license type.
  //
  // Engine_ReleaseLicenseRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - licenseHandle: int32 - Specifies the license handle to release. Pass a handle the Engine.AcquireLicense method returned.
  //    - reserved: int32 - Reserved for future use.
  //
  // Engine_ReleaseLicenseResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ReleaseLicense(Engine_ReleaseLicenseRequest) returns (Engine_ReleaseLicenseResponse);
  
  
  // Method: GetTestStandPath
  //
  // Returns the pathname of the TestStand directory the testStandPath parameter specifies.
  //
  // The pathname does not contain a trailing backslash.
  //
  // Engine_GetTestStandPathRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - testStandPath: TestStandPaths - Specifies the TestStand directory to return.
  //
  // Engine_GetTestStandPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetTestStandPath(Engine_GetTestStandPathRequest) returns (Engine_GetTestStandPathResponse);
  
  
  // Method: ReadPropertyObjectFile
  //
  // Creates a new PropertyObjectFile object, determines the file type, and reads the object as that file type.
  //
  // Use this method to examine the internal structure, data, and types contained in a PropertyObjectFile, even if the file type is unknown. Calling this method produces the same result as calling the FileInformation.PropertyObjectFileType property, the
  // Engine.NewPropertyObjectFile method, and the PropertyObjectFile.ReadFile method.
  // You cannot read a users file, a configuration file, or a station globals file using this method. This method returns an error if the file is not a PropertyObjectFile. Use FileInformation.IsPropertyObjectFile property to determine if the file is a PropertyObjectFile.
  // Note: Use the Engine.GetSequenceFileEx method if you intend to open and run a sequence file. Unlike the Engine.GetSequenceFileEx method, this method does not load the sequence file into the internal cache of the engine, which might result in unexpected behavior.
  //
  // Engine_ReadPropertyObjectFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - handlerType: TypeConflictHandlerTypes - Specifies how to handle type conflicts.
  //    - options: int32 - Pass 0 to specify the default behavior or pass one or more ReadPropertyObjectFileOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // Engine_ReadPropertyObjectFileResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: PropertyObjectFileInstance - The newly created PropertyObjectFile object. 
  //    - userCancelled: boo - Returns True if the file has type conflicts and the user cancelled the operation.
  //
  rpc ReadPropertyObjectFile(Engine_ReadPropertyObjectFileRequest) returns (Engine_ReadPropertyObjectFileResponse);
  
  
  // Method: GetTypes
  //
  // Returns a TypeUsageList that contains all the types currently in memory.
  //
  // Engine_GetTypesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - reserved: int32 - Reserved for future use.
  //
  // Engine_GetTypesResponse - The response message from the server. It provides the return value.
  //    - returnValue: TypeUsageListInstance - The return type of the TypeUsageList object.
  //
  rpc GetTypes(Engine_GetTypesRequest) returns (Engine_GetTypesResponse);
  
  
  // Method: NewPropertyObjectType
  //
  // Creates and returns a new PropertyObjectType object.
  //
  // You can use this method to create an object to assign to the AdditionalResult.Type property.
  //
  // Engine_NewPropertyObjectTypeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - ValueType: PropertyValueTypes - Specifies the value of the PropertyObjectType.ValueType property of the object this method creates. If you pass PropValType_NamedType, this method uses the type you specify with the TypeName parameter to determine the values of the properties of the PropertyObjectType object this method creates.
  //    - TypeName: string - Specifies the value of the PropertyObjectType.TypeName property of the object this method creates. If you pass PropValType_NamedType for the ValueType parameter, pass the name of a currently loaded type. Otherwise, pass an empty string. If you specify a type name, this method uses the type you specify to determine the values of the properties of the PropertyObjectType object this method creates instead of the other parameters you pass to this method.
  //    - ElementType: PropertyObjectTypeInstance - Specifies the value of the PropertyObjectType.ElementType property of the object this method creates. Pass a  PropertyObjectType object if you pass PropValType_Array for the ValueType parameter. Otherwise, pass NULL. Typically, you make another call to this method to create an object to pass for this parameter.
  //    - IsObject: bool - Specifies the value of the PropertyObjectType.IsObject property of the object this method creates. Pass False for this parameter only to create an object for the type of an element of an array of numbers, Boolean values, strings, or references.
  //
  // Engine_NewPropertyObjectTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectTypeInstance - The return type of the PropertyObjectType object.
  //
  rpc NewPropertyObjectType(Engine_NewPropertyObjectTypeRequest) returns (Engine_NewPropertyObjectTypeResponse);
  
  
  // Method: ClearFilePasswordCache
  //
  // Use this method to remove all the passwords the Remember Password option in the Unlock File dialog box and the Unlock Type Definitions dialog box specifies to store in the file password cache.
  //
  // Engine_ClearFilePasswordCacheRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_ClearFilePasswordCacheResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ClearFilePasswordCache(Engine_ClearFilePasswordCacheRequest) returns (Engine_ClearFilePasswordCacheResponse);
  
  
  // Method: NewResultLogger
  //
  // Creates and returns a new ResultLogger object.
  //
  // Engine_NewResultLoggerRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_NewResultLoggerResponse - The response message from the server. It provides the return value.
  //    - returnValue: ResultLoggerInstance - The return type of the ResultLogger object.
  //
  rpc NewResultLogger(Engine_NewResultLoggerRequest) returns (Engine_NewResultLoggerResponse);
  
  
  // Method: NewResultLog
  //
  // Creates and returns a new ResultLog object.
  //
  // Engine_NewResultLogRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_NewResultLogResponse - The response message from the server. It provides the return value.
  //    - returnValue: ResultLogInstance - The return type of the ResultLog object.
  //
  rpc NewResultLog(Engine_NewResultLogRequest) returns (Engine_NewResultLogResponse);
  
  
  // Method: DoDotNetGarbageCollection
  //
  // Forces .NET garbage collection and waits for pending finalizers to ensure that all unreferenced COM objects that have ever been referenced in .NET in the TestStand process are synchronously freed.
  // For example, if you are handling events from any of the TestStand User Interface (UI) controls in a .NET user interface, .NET references all the parameters to all the events for the TestStand UI Control. The lifetimes of these parameters are extended until garbage collection occurs. When you use .NET to handle any event on an ActiveX control, such as a TestStand UI Control, the .NET Framework handles all events for that control even if you do not handle the events directly in code.
  // In addition, if sequences pass TestStand interface objects as parameters to .NET code modules, .NET references those parameters, which extends the lifetimes of those parameters until garbage collection occurs.
  //
  // You typically do not need to call this method because TestStand automatically calls this method at various critical points, such as when an execution completes or when a sequence file or execution closes.
  // Note: The garbage collection this method performs applies only to the version of the .NET CLR the TestStand Engine uses directly. To ensure objects from another .NET CLR version are destroyed, such as when you implement a user interface in a different version of the .NET CLR, call the System.GC.Collect and System.GC.WaitForPendingFinalizers .NET Framework methods in that version of the .NET CLR.
  //
  // Engine_DoDotNetGarbageCollectionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - reserved: int32 - Reserved for future use. You must always pass 0 for this parameter.
  //
  // Engine_DoDotNetGarbageCollectionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc DoDotNetGarbageCollection(Engine_DoDotNetGarbageCollectionRequest) returns (Engine_DoDotNetGarbageCollectionResponse);
  
  
  // Method: DisplayPasswordProtectTypeDefinitionsDialog
  //
  // Displays the Password Protect Type Definitions dialog box, in which you can edit the password protection settings of the types you specify.
  //
  // Note: TestStand supports password-protecting type definitions to deter unauthorized users from editing the types in the sequence editor. However, any TestStand user can continue to programmatically edit a locked type by using the TestStand PropertyObject API. National Instruments does not recommend password-protecting types as the only way of protecting intellectual property.
  //
  // Engine_DisplayPasswordProtectTypeDefinitionsDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - typeDefinitions: repeated PropertyObjectInstance - Specifies an array of type definitions for which you want to edit the password protection information.
  //    - dlgOptions: int32 - Specifies the CommonDialogOptions option you want to use. Use the bitwise-OR operator to specify more than one option.
  //
  // Engine_DisplayPasswordProtectTypeDefinitionsDialogResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if the user clicked OK in the dialog box and False if the user clicked Cancel. When this method returns True, use the modifiedTypeDefinitions parameter to determine which types, if any, were modified. 
  //    - modifiedTypeDefinitions: repeated PropertyObjectInstanc - Returns the subset of types you passed to the typeDefinitions parameter the user modified in the dialog box. The dialog box might modify only a subset of the types because some of the types might already use the settings the user specified. 
  //
  rpc DisplayPasswordProtectTypeDefinitionsDialog(Engine_DisplayPasswordProtectTypeDefinitionsDialogRequest) returns (Engine_DisplayPasswordProtectTypeDefinitionsDialogResponse);
  
  
  // Method: DisplayUnlockTypeDefinitionsDialog
  //
  // Displays the Unlock Type Definitions dialog box, in which you can unlock the specified types.
  //
  // Note: TestStand supports password-protecting type definitions to deter unauthorized users from editing the types in the sequence editor. However, any TestStand user can continue to programmatically edit a locked type by using the TestStand PropertyObject API. National Instruments does not recommend password-protecting types as the only way of protecting intellectual property.
  //
  // Engine_DisplayUnlockTypeDefinitionsDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - typeDefinitions: repeated PropertyObjectInstance - Specifies an array of type definitions you want to unlock.
  //    - dlgOptions: int32 - Specifies any combination of the LockUnlockDialogOptions constants. 
  //
  // Engine_DisplayUnlockTypeDefinitionsDialogResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if any types were unlocked in the Unlock Type Definitions dialog box, even if not all types were successfully unlocked or if the user clicked OK and no types needed to be unlocked because all the types were already unlocked or were not password-protected. 
  //    - allTypesUnlocked: boo - Returns True if all the types you passed to the typeDefinitions parameter were successfully unlocked, already unlocked, or not password-protected.
  //
  rpc DisplayUnlockTypeDefinitionsDialog(Engine_DisplayUnlockTypeDefinitionsDialogRequest) returns (Engine_DisplayUnlockTypeDefinitionsDialogResponse);
  
  
  // Method: RegisterUIMessageCallbackEx
  //
  // Registers a C function as the user interface message event callback.
  // Note: National Instruments recommends using the Application Manager control with the ApplicationMgr.AfterUIMessageEvent and ApplicationMgr.UIMessageEvent events as needed. Refer to the example user interface applications TestStand provides, located in the <TestStand>\UserInterfaces directory.
  //
  // You can use a C function as the Event callback, instead of using ActiveX events or polling. Ensure the Engine.UIMessagePollingEnabled property is False or TestStand does not call the callback.
  // The callback function must use the following C function prototype:
  // void __cdecl UIMessageCallback(struct IDispatch *UIMessageDisp);
  // The UIMessageDisp parameter is the IDispatch pointer to a UIMessage object. Because this pointer is passed to the callback as a parameter, do not release it when you finish using it.
  // Note: Use this method only inside of the sequence editor or user interface.
  //
  // Engine_RegisterUIMessageCallbackExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - callbackFuncAddr: ObjectInstance - Specifies the address of the callback function. The type of the variant must match the pointer size for the current platform, for example VT_UI4 for 32-bit TestStand and VT_UI8 for 64-bit TestStand.
  //
  // Engine_RegisterUIMessageCallbackExResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc RegisterUIMessageCallbackEx(Engine_RegisterUIMessageCallbackExRequest) returns (Engine_RegisterUIMessageCallbackExResponse);
  
  
  // Method: ExpandPathMacros
  //
  // Expands all supported macros in the path string.
  //
  // 32-bit TestStand replaces the $(Platform) path macro with win32, and 64-bit TestStand replaces the macro with x64.  For example, 32-bit TestStand replaces C:\bin\$(Platform)\module.dll with C:\bin\win32\module.dll, and 64-bit TestStand replaces the same macro with C:\bin\x64\module.dll. TestStand does not change paths that do not contain macros.
  // Using a second $ character escapes the macro to form a literal part of a path. For example, TestStand expands C:\bin\$$(Platform)\module.dll to C:\bin\$(Platform)\module.dll. This method returns False if TestStand escapes but does not expand a macro.
  //
  // Engine_ExpandPathMacrosRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_ExpandPathMacrosResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if at least one macro was found and expanded. Returns False if no macros were expanded. 
  //    - pathString: strin - The new value of pathString if the method modifies it.
  //
  rpc ExpandPathMacros(Engine_ExpandPathMacrosRequest) returns (Engine_ExpandPathMacrosResponse);
  
  
  // Method: HasAddonLicense
  //
  // Provides a way for addon products to check the licensing status of a specified feature.
  //
  // TestStand acquires licenses for associated addon products when you call the Engine.AcquireLicense method.
  //
  // Engine_HasAddonLicenseRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - addonFeatureName: string - Specifies the name of the feature to check the status of.
  //
  // Engine_HasAddonLicenseResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if TestStand was able to successfully check out the specified addon license. 
  //
  rpc HasAddonLicense(Engine_HasAddonLicenseRequest) returns (Engine_HasAddonLicenseResponse);
  
  
  // Method: BeginProfiling
  //
  // Enables profiling. Profiling remains enabled until every call to BeginProfiling is balanced by a call to Engine.EndProfiling.
  //
  // Engine_BeginProfilingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_BeginProfilingResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc BeginProfiling(Engine_BeginProfilingRequest) returns (Engine_BeginProfilingResponse);
  
  
  // Method: EndProfiling
  //
  // Balances one call to Engine.BeginProfiling. If all calls to BeginProfiling are balanced, profiling is disabled.
  //
  // Engine_EndProfilingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_EndProfilingResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc EndProfiling(Engine_EndProfilingRequest) returns (Engine_EndProfilingResponse);
  
  
  // Method: SetModuleProfiling
  //
  // Specifies whether the profiler collects timing information about code modules the specified adapter loads and executes.
  //
  // Engine_SetModuleProfilingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_SetModuleProfilingResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetModuleProfiling(Engine_SetModuleProfilingRequest) returns (Engine_SetModuleProfilingResponse);
  
  
  // Method: GetModuleProfiling
  //
  // Indicates whether the profiler collects timing information for code modules the specified adapter loads and executes.
  //
  // Engine_GetModuleProfilingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_GetModuleProfilingResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns whether the profiler collects timing information for code modules that the specified adapter loads and executes. 
  //
  rpc GetModuleProfiling(Engine_GetModuleProfilingRequest) returns (Engine_GetModuleProfilingResponse);
  
  
  // Method: LogProfilerAction
  //
  // Logs the beginning, end, or a change in the state of an operation so that the information can be collected and displayed by a profiler. The method performs no action if Engine.ProfilingEnabled is not true.
  //
  // This method creates an OutputMessage that stores the profiler information. The built-in properties of the OutputMessage store some information, such as the source location of the event being logged and the time that it occurred. This methods adds custom sub-properties to the OutputMessage to store the remaining information. The ProfilerOutputMessageSubProperties constants define the names of these sub-properties.
  //
  // Engine_LogProfilerActionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - profilerMechanism: string - Pass a ProfilerMechanisms constant, or a string that indicates the mechanism the profiler event is recording.
  //    - sequenceContextParam: SequenceContextInstance - Pass the current SequenceContext, if applicable. Otherwise pass null or Nothing. This method uses the sequence context to determine location and test socket information for the source of profiler event.
  //    - synchronizationState: ProfilerStates - Pass an element of the ProfilerStates enumeration that describes the transition that the profiler event records. This method stores the profilerState as a numeric sub-property of the OutputMessage with a name defined by ProfilerOutputMessageSubProperty_State.
  //    - operation: string - Pass a string that describes the operation that the profiler event is recording a transition for. If applicable, pass an element of the ProfilerOperations module. This method stores the operation as a sub-property of the OutputMessage with a name defined by ProfilerOutputMessageSubProperty_Operation.
  //    - timeout: double - If you pass the value of ProfilerState_Blocked to profilerState, this method stores the value you pass to timeout as a numeric sub-property of the OutputMessage with a name defined by ProfilerOutputMessageSubProperty_TimeoutPeriod.
  //    - postMessage: bool - Specifies whether this method calls the Post method on the OutputMessage it creates. If you pass false, you must later call the Post method on the OutputMessage the method returns. Pass false if you need to add additional data to the OutputMessage before posting it.
  //    - reserved: ObjectInstance - Pass Null or Nothing to this reserved parameter.
  //
  // Engine_LogProfilerActionResponse - The response message from the server. It provides the return value.
  //    - returnValue: OutputMessageInstance - Returns the OutputMessage this method creates that stores the profiler information.  If you pass True to postMessage, you do not need to operate on the returned OutputMessage. The OutputMessage.Category property has a value of Engine.ProfilerOutputMessageCategoryName to indicate that it contains profiler information and should not be displayed in an output messages window. A TestStand profiler window functions by collecting OutputMessages that have this category name and inspecting their contents. 
  //
  rpc LogProfilerAction(Engine_LogProfilerActionRequest) returns (Engine_LogProfilerActionResponse);
  
  
  // Method: GetEngineConfigFile
  //
  // Returns the PropertyObjectFile that contains settings, such as station options or search directories.
  //
  // Engine.GetEngineConfigFile provides direct access to TestStand Engine configuration files.  Use this API with caution, particularly when changing settings. It is possible to put the configuration into an invalid state using this API. In most cases, there is a more appropriate, higher-level API that should be preferred. For example, prefer Engine.StationOptions when working with station options, or Engine.SearchDirectories when working with search directories.
  //
  // Engine_GetEngineConfigFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - configFileType: PropertyObjectFileTypes - Specifies the engine configuration file to return. Supported options are FileType_GeneralEngineConfigFile, FileType_SearchDirectoriesConfigFile, FileType_AdaptersConfigFile, FileType_TypePalettesConfigFile, FileType_CustomConfigFile, FileType_UsersFile, and FileType_StationGlobalsFile. Passing any other value results in a run time error.
  //
  // Engine_GetEngineConfigFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectFileInstance - The return type of the PropertyObjectFile object.
  //
  rpc GetEngineConfigFile(Engine_GetEngineConfigFileRequest) returns (Engine_GetEngineConfigFileResponse);
  
  
  // Method: LoadEnvironment
  //
  rpc LoadEnvironment(Engine_LoadEnvironmentRequest) returns (Engine_LoadEnvironmentResponse);
  
  
  // Method: GetEnvironmentPath
  //
  // Get the path of the environment configuration (.tsenv) file that defines the environment in which the engine is running. If the engine is running in the global environment, an empty string is returned.
  //
  // Engine_GetEnvironmentPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_GetEnvironmentPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The path of the environment configuration (.tsenv) file that defines the environment in which the engine is running. If the engine is running in the global environment, an empty string is returned. 
  //
  rpc GetEnvironmentPath(Engine_GetEnvironmentPathRequest) returns (Engine_GetEnvironmentPathResponse);
  
  
  // Method: DisplayEnvironmentConfigurationDialog
  //
  // 
  //
  // Engine_DisplayEnvironmentConfigurationDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgOptions: int32 - 
  //
  // Engine_DisplayEnvironmentConfigurationDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc DisplayEnvironmentConfigurationDialog(Engine_DisplayEnvironmentConfigurationDialogRequest) returns (Engine_DisplayEnvironmentConfigurationDialogResponse);
  
  
  // Method: LaunchNewApplicationWhenShutdownCompletes
  //
  rpc LaunchNewApplicationWhenShutdownCompletes(Engine_LaunchNewApplicationWhenShutdownCompletesRequest) returns (Engine_LaunchNewApplicationWhenShutdownCompletesResponse);
  
  
  // Method: CancelLaunchNewApplicationWhenShutdownCompletes
  //
  rpc CancelLaunchNewApplicationWhenShutdownCompletes(Engine_CancelLaunchNewApplicationWhenShutdownCompletesRequest) returns (Engine_CancelLaunchNewApplicationWhenShutdownCompletesResponse);
  
  
  // Method: FindFileEx
  //
  // Searches for a file in the TestStand search directories using a simple filename or relative pathname.
  //
  // Engine_FindFileExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - fileToFind: string - Specifies a string that contains the simple filename or relative pathname of the file to search for. TestStand expands macros in the path as specified by the Engine.ExpandPathMacros method before searching.
  //    - promptOption: FindFilePromptOptions - Specifies whether to prompt the user if the file is not initially found.
  //    - srchListOption: FindFileSearchListOptions - Specifies file search options.
  //    - isCommand: bool - If this flag is True and fileToFind has no file extension, then the FindFile method searches for files with the same basename that end in the common command extensions: .exe, .com, and .bat.
  //    - searchContext: ObjectInstance - Contains the directory of the sequence file, which may also be searched for relative paths. This argument may be empty.
  //    - reserved: ObjectInstance - Reserved for future use.
  //
  // Engine_FindFileExResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if the file is found. 
  //    - absolutePath: strin - Returns the absolute pathname of the file if the file is found.
  //    - srchDirType: SearchDirectoryType - Returns the SearchDirectoryType in which the specified fileToFind was found. This can be any of the types located in SearchDirectoryTypes.
  //    - searchDirectoryIndex: int3 - Returns the index of the TestStand search directory used to find the fileToFind specified. The list of search directories can be obtained by using the TestStand API SearchDirectories. You can retrieve any search directory from there using this searchDirectoryIndex.
  //    - userCancelled: boo - Returns True if the method prompts the user and the user cancels the find operation.
  //
  rpc FindFileEx(Engine_FindFileExRequest) returns (Engine_FindFileExResponse);
  
  
  // Method: GetRelativePathFromAbsolutePath
  //
  // Searches for a file in the TestStand search directories using an absolute path and returns the relative path with respect to the search directory.
  //
  // Engine_GetRelativePathFromAbsolutePathRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - absolutePath: string - An absolute or relative path for the file to find.
  //    - searchContext: ObjectInstance - Contains the directory of the sequence file, which may also be searched for relative paths.
  //
  // Engine_GetRelativePathFromAbsolutePathResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if the file is found. 
  //    - relativePath: strin - Returns the relative path if the file exists on disk and a relative path is found. Otherwise, returns the absolute path.
  //    - searchDirectoryPath: strin - Returns the related search directory if the relative path is found.
  //
  rpc GetRelativePathFromAbsolutePath(Engine_GetRelativePathFromAbsolutePathRequest) returns (Engine_GetRelativePathFromAbsolutePathResponse);
  
  
  // Method: NewEditContext
  //
  // Returns a SequenceContext object that approximates the sequence context TestStand creates when you run a sequence.
  //
  // You can pass the object this method returns as a parameter to the Engine.DisplayBrowseExprDialogEx and Engine.DisplayBrowsePropertyObjectDialog methods.
  // When you pass an array of step references, this method returns a context with a Step property that represents multiple steps, where the subproperties of Step contain only properties common to all steps in the array. Use the context with SequenceContext.GetMultipleValues to determine whether an element of the property, such as the value, comment, format, or flags, represents the shared element value for all the steps in the array. If at least one step has a different value for an element, the property element in the context contains a default value.
  //
  // Engine_NewEditContextRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - obj: PropertyObjectInstance - Specifies the object to initialize the sequence context. You can pass a sequence file, sequence, step, variable, or array of object references to steps.  This method sets the sequence context properties that correspond to the object you pass.
  //    - editArgsParam: ObjectInstance - Specifies an EditArgs object that indicates which items are currently selected in the user interface.
  //
  // Engine_NewEditContextResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: SequenceContextInstance - A reference to a SequenceContext object. Release this reference when you are finished using it. 
  //    - locationString: ObjectInstanc - Returns the lookupString for the object passed in. Use this lookupString to access the object from the sequence context.  
  //
  rpc NewEditContext(Engine_NewEditContextRequest) returns (Engine_NewEditContextResponse);
  
  
  // Method: GetImageName
  //
  // Returns the name of the image at the specified index. Typically, the name includes a filename and the extension.
  //
  // Engine_GetImageNameRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - imageIndex: int32 - Specifies the image index. The image index must be less than the number of images in the image lists.
  //
  // Engine_GetImageNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The name of the image at the index. 
  //
  rpc GetImageName(Engine_GetImageNameRequest) returns (Engine_GetImageNameResponse);
  
  
  // Method: GetImageIndex
  //
  // Returns the index of the image with the specified name, which you can use to access the list of images returned from the Engine.LargeImageListEx and Engine.SmallImageListEx properties.
  //
  // Engine_GetImageIndexRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - imageName: string - Specifies the name of the image. Typically, the name includes a filename and the extension.
  //
  // Engine_GetImageIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - The index of the image in both of the engine image lists. Returns -1 if the image name is not found. 
  //
  rpc GetImageIndex(Engine_GetImageIndexRequest) returns (Engine_GetImageIndexResponse);
  
  
  // Method: CopyPropertyObject
  //
  // Use this function to copy a PropertyObject object you receive from a remote execution to the local computer.
  //
  // Some API functions, such as the PropertyObject.SetPropertyObject method, work only with objects created on the local computer.
  //
  // Engine_CopyPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - srcObj: PropertyObjectInstance - Specifies the property object from an external instance of the TestStand Engine (that is, another process or computer) you want to copy.
  //
  // Engine_CopyPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - New copy of the PropertyObject object created in the process space of the engine on which the method is called. 
  //
  rpc CopyPropertyObject(Engine_CopyPropertyObjectRequest) returns (Engine_CopyPropertyObjectResponse);
  
  
  // Method: GetSyncManager
  //
  // Returns a top-level API for synchronizing with TestStand Synchronization objects.
  //
  // The TestStand Synchronization Manager is the API the Synchronization step types use. The name of the Synchronization object passed to this function determines which Synchronization Manager to use—in process, out of process (used to share Synchronization objects between processes), or remote machine (used to share Synchronization objects across machines). Refer to the NI TestStand Synchronization type library for more information.
  //
  // Engine_GetSyncManagerRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - syncObjectName: string - Specifies the name of the Synchronization object for which the Synchronization Manager is needed. When the Synchronization object begins with an '*' (for example, *syncobjectname) or a computer name such as \\machinename\syncobjectname, a Synchronization Manager object corresponding to the computer in question is returned.
  //      When the Synchronization object name begins with an asterisk or computer name, you can use a 32 or 64 prefix to specify using 32- or 64-bit TestStand to host the out-of-process Synchronization object. For example, the name 64*syncobj specifies a Synchronization object called *syncobj in the 64-bit TestStand host process, even when used from 32-bit TestStand. Use the prefix to share Synchronization objects between 32-bit TestStand and 64-bit TestStand in the same host process. If you do not use the prefix, 32-bit TestStand hosts out-of-process Synchronization objects in a 32-bit process, and 64-bit TestStand hosts out-of-process Synchronization objects in a 64-bit process.
  //
  // Engine_GetSyncManagerResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - A pointer to the TestStand Synchronization Manager the Synchronization object name describes. 
  //
  rpc GetSyncManager(Engine_GetSyncManagerRequest) returns (Engine_GetSyncManagerResponse);
  
  
  // Method: NewHierarchicalExecution
  //
  // Creates and returns a new Execution object.
  //
  // Use a hierarchical execution to specify a call stack of Sequence Call steps that only execute the setup and Cleanup steps of sequences in the call stack while continuing normal execution in the sequence that the last Sequence Call step specifies.
  // To specify the call stack to create, pass an array of Sequence Call steps to the sequenceCallSteps parameter. When the hierarchical execution starts, TestStand executes the sequence the sequenceName parameter specifies, just as TestStand does when you call the Engine.NewExecution method. When the execution reaches the sequence that contains the first Sequence Call step the sequenceCallSteps parameter specifies, the execution follows the execution path the array of Sequence Call steps defines. The execution does not execute any of the Main steps in the sequences of the call stack, but the hierarchicalExecutionFlags parameter specifies whether the execution executes the setup and Cleanup steps in the sequences of the call stack. Execution resumes normally in the sequence that the last Sequence Call step in the array calls. Even though the steps in the Main step group of the sequences that contain the Sequence Call steps do not execute, local variables propagate normally according to their propagation settings.
  //
  // Engine_NewHierarchicalExecutionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - sequenceCallSteps: repeated StepInstance - Specifies an array of Sequence Call steps. The array represents a call stack to recreate. The execution does not execute any of the main steps in the sequences of the call stack, but the hierarchicalExecutionFlags parameter specifies whether the execution executes the setup and cleanup steps in the sequences of the call stack. Except for the first step, each step in the array is a step that resides in the sequence the previous step in the array calls.
  //    - sequenceFileParam: SequenceFileInstance - Specifies the SequenceFile object that contains the sequence to execute. If the execution uses a process model, pass the client SequenceFile object.
  //    - sequenceNameParam: string - Specifies the name of the sequence or Process Model entry point to execute.
  //    - processModelParam: SequenceFileInstance - Pass the process model SequenceFile object if you want to execute a Process Model entry point. Otherwise, a NULL object reference in LabVIEW, 0 in LabWindows/CVI, or the Nothing keyword in Visual Basic, pass a NULL dispatch pointer in Microsoft Foundation Classes.
  //    - breakAtFirstStep: bool - Pass True to suspend execution before executing the first step.
  //    - executionTypeMaskParam: int32 - Pass 0 for the default behavior or pass one or more ExecutionTypeMask constants. Use the bitwise-OR operator to pass multiple constants.
  //    - sequenceArgsParam: ObjectInstance - Specifies a PropertyObject object that contains the arguments to the sequence you want to execute. Each subproperty of the PropertyObject object represents a parameter to the sequence. The subproperties must appear in the same order as the sequence parameters.
  //    - editArgsParam: ObjectInstance - Specifies an EditArgs object that indicates which items are currently selected in the user interface. This is required only for Process Model entry points.
  //    - InteractiveArgsParam: ObjectInstance - Specifies an InteractiveArgs object that indicates which steps are currently selected in the user interface and contains looping information necessary for an interactive execution. Pass this parameter for interactive executions only.
  //
  // Engine_NewHierarchicalExecutionResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionInstance - The return type of the Execution object.
  //
  rpc NewHierarchicalExecution(Engine_NewHierarchicalExecutionRequest) returns (Engine_NewHierarchicalExecutionResponse);
  
  
  // Method: DisplayEditNumericFormatDialog
  //
  // Note: This method is obsolete. Use the PropertyObject.DisplayEditNumericFormatDialog method instead.
  //
  // Launches a dialog box in which you can edit a numeric format string used to display numbers.
  //
  // Engine_DisplayEditNumericFormatDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - dlgOptions: int32 - Specifies any combination of the EditNumericFormatOptions constants.
  //    - sampleNumber: double - Specifies a number to format initially in the dialog box. 
  //
  // Engine_DisplayEditNumericFormatDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if you click OK in the dialog box. Returns False if you click Cancel. 
  //
  rpc DisplayEditNumericFormatDialog(Engine_DisplayEditNumericFormatDialogRequest) returns (Engine_DisplayEditNumericFormatDialogResponse);
  
  
  // Method: GetInsertVariableMenuStructure
  //
  // Creates a PropertyObject object that specifies the structure of the menu used to insert named data type variables in the sequence editor.
  //
  // The sequence editor uses this method to create the Types submenu that appears when you select Insert Local, Insert Global, or Insert Parameter from the context menu. Refer to MenuItemProperties for a description of this property object.
  //
  // Engine_GetInsertVariableMenuStructureRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - hiddenFlags: int32 - Pass a set of PropertyFlags that specify which step types are not included in the menu. For example, pass PropFlags_Hidden to exclude the hidden step types.
  //
  // Engine_GetInsertVariableMenuStructureResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The object that specifies the menu structure. 
  //
  rpc GetInsertVariableMenuStructure(Engine_GetInsertVariableMenuStructureRequest) returns (Engine_GetInsertVariableMenuStructureResponse);
  
  
  // Method: IsCurrentSequenceFileVersion
  //
  // Determines whether the TestStand Engine that saved the specified sequence file is the current version, an older version, or a newer version.
  //
  // The method returns one of the following values:
  // * -1 if an older version of the TestStand Engine created the sequence file.    * 0 if the currently active version of the TestStand Engine created the sequence file.    * 1 if a newer version of the TestStand Engine created the sequence file.
  // You can use this method in a sequence editor application that prompts the user before overwriting a sequence file saved in an older format.
  //
  // Engine_IsCurrentSequenceFileVersionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - FilePath: string - Specifies the absolute pathname of the file.
  //
  // Engine_IsCurrentSequenceFileVersionResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - The return type of the Int32 object.
  //
  rpc IsCurrentSequenceFileVersion(Engine_IsCurrentSequenceFileVersionRequest) returns (Engine_IsCurrentSequenceFileVersionResponse);
  
  
  // Method: NotifyStartOfModalDialogEx
  //
  // Notifies TestStand that you are about to launch a modal dialog box.
  // Note: If you call the Engine.NotifyStartOfModalDialogEx method, you must also call the Engine.NotifyEndOfModalDialog method when the dialog box closes or subsequent calls to the Engine.NotifyStartOfModalDialogEx method will block, potentially hanging TestStand.
  //
  // This method returns a modalID, which you pass to the Engine.NotifyEndOfModalDialog method when the dialog box is closed. TestStand uses this notification to determine when to disable the main window of the application and to enforce the modality of the dialog box.
  // (Platform: LabVIEW modal dialog box)
  // Call Start Modal Dialog.vi and End Modal Dialog.vi in TestStand.llb instead of the Engine.NotifyStartOfModalDialogEx and Engine.NotifyEndOfModalDialog methods.
  // (Platform: LabWindows/CVI modal dialog box)
  // Call TS_EndModalDialog or TS_StartModalDialogEx in <TestStand>\API\CVI\tsutil.fp instead of the Engine.NotifyStartOfModalDialogEx and Engine.NotifyEndOfModalDialog methods.
  // Note: Do not call this method when launching a dialog box that the TestStand API implements.Note: This method differs from the Engine.NotifyStartOfModalDialog method in that if multiple threads call into this method at the same time, only the first thread proceeds. The rest block until the first thread calls the  Engine.NotifyEndOfModalDialog method, at which point the next thread proceeds. Thus, TestStand launches modal dialog boxes one at a time using this method. To use this method, you must launch the dialog box within the step of an execution and you must pass the sequence context of the step to this method.In certain environments, dialog boxes might take a parameter that is a parent window handle. For this situation, call this method before creating the dialog box, treat the return value as a window handle, and pass the return value as the handle for the parent window. For environments such as Microsoft Visual Basic, in which setting the parent window handle of dialog boxes is difficult, use the Engine.RegisterModalWindow method instead.
  //
  // Engine_NotifyStartOfModalDialogExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - sequenceContextParam: SequenceContextInstance - Specifies the sequence context of the step launching the modal dialog box. You can also pass a NULL reference but doing so loses the added functionality of this method.
  //
  // Engine_NotifyStartOfModalDialogExResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: int32 - Returns the modalID to pass to the Engine.NotifyEndOfModalDialog method when the dialog box no longer appears onscreen. 
  //    - shouldAbort: boo - Returns True when the user terminates or aborts the corresponding execution for the sequence context parameter you passed while you were blocked inside this method call. The step skips launching the dialog box and returns as soon as possible. You can call the Engine.NotifyEndOfModalDialog method in this case, though it is not necessary. If you are using the CVI TS_StartModalDialogEx function, always call the corresponding TS_EndModalDialog function. Similarly, if you are using Start Modal Dialog.vi in LabVIEW, always call End Modal Dialog.vi.
  //
  rpc NotifyStartOfModalDialogEx(Engine_NotifyStartOfModalDialogExRequest) returns (Engine_NotifyStartOfModalDialogExResponse);
  
  
  // Method: GetInternalOption
  //
  // Returns the value for the internal option the option parameter specifies.
  //
  // Engine_GetInternalOptionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - option: InternalOptions - Specifies the internal option the method returns.
  //
  // Engine_GetInternalOptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - The value of the internal option the option parameter specifies. 
  //
  rpc GetInternalOption(Engine_GetInternalOptionRequest) returns (Engine_GetInternalOptionResponse);
  
  
  // Method: SetInternalOption
  //
  // Specifies the value for the internal option the option parameter specifies.
  //
  // TestStand does not persist internal options between instances of the engine.
  //
  // Engine_SetInternalOptionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - option: InternalOptions - Specifies the internal option the method sets.
  //    - newValue: ObjectInstance - Specifies the value of the internal option the option parameter specifies.
  //
  // Engine_SetInternalOptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetInternalOption(Engine_SetInternalOptionRequest) returns (Engine_SetInternalOptionResponse);
  
  
  // Method: DisplayHelpTopic
  //
  // Opens to a topic in a HTML Help file using a help ID.
  //
  // Uses the assigned help ID to open the compiled help file (.chm) to a particular topic. If any of the following parameters are specified—tableOfContentsFile, indexFile, or homeFile—then all three are used to build the HTML Help window. If none of these parameters are specified, the information stored in the help file is used to build the HTML Help window.
  // To ensure proper navigation within the opened help file, National Instruments recommends that all three parameters—tableOfContentsFile, indexFile, and homeFile—be specified together.
  // To specify that a file is within a CHM, use the following syntax:
  // CHMFileName.chm::\\FileName.xxx
  //
  // Engine_DisplayHelpTopicRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - tagID: int32 - Specifies the help ID of the help topic within the compiled help file to open. The help file author associates help IDs with topic files.
  //      Pass 0 to open the help file to the default topic.
  //    - helpFile: string - Specifies the name of the HTML help file to open. Include the absolute path of the help file and the extension. If you do not specify a help file, TestStand uses the NI TestStand Help.
  //    - tableOfContentsFile: string - Specifies the name of the table of contents file to use with the help file. Include the absolute path of the table of contents file along with the extension.
  //    - indexFile: string - Specifies the name of the index file to use with the help file. Include the absolute path of the index file along with the extension.
  //    - homeFile: string - Specifies the name of the default topic to display for the help file. Include the absolute path of the default topic along with the extension.
  //    - windowCaption: string - Specifies the help window caption to display. This parameter is ignored unless a table of contents file, an index file, or a default topic file is specified. If none of these files are specified, the help window caption is the caption the author of the help file specifies. If you specify a contents file or an index file but do not specify this parameter, the window caption defaults to NI TestStand Help.
  //
  // Engine_DisplayHelpTopicResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the window handle of the created help window. 
  //
  rpc DisplayHelpTopic(Engine_DisplayHelpTopicRequest) returns (Engine_DisplayHelpTopicResponse);
  
  
  // Method: DisplayBreakpointDialog
  //
  // Launches the Breakpoint Settings dialog box, in which you edit the breakpoint settings of a step or the End marker after the last step in a step group.
  //
  // Breakpoint settings for a particular execution apply only to that execution. Editing a breakpoint for a step in a sequence file overrides and breakpoint setting on the corresponding step in a running execution.
  //
  // Engine_DisplayBreakpointDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - sequenceContextParam: SequenceContextInstance - Specifies the sequence context the dialog box uses to evaluate expressions specified for a conditional breakpoint. You can use the Engine.NewEditContext method to obtain an edit-time sequence context for the step or sequence file you are editing.
  //    - executionParam: ExecutionInstance - If you want to set the breakpoint state for a particular execution only, specify a reference to an Execution object. Breakpoints set for a particular execution only apply to that execution and are lost when the Execution object is destroyed, or when you set the breakpoint state for the step by calling this method without passing an execution.
  //    - selectedStep: StepInstance - Specifies a reference to a Step object to specify which breakpoint to configure. Pass NULL to configure a breakpoint on the End marker after the last step in a step group. If you pass NULL, you must specify a value for the whichSteps parameter.
  //    - stepGroupParam: StepGroups - When the selectedStep parameter is NULL, whichSteps specifies a particular step group that specifies the End marker.
  //    - dlgOptions: int32 - Specifies any combination of the CommonDialogOptions constants. 
  //
  // Engine_DisplayBreakpointDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if you click OK. Otherwise, returns False. 
  //
  rpc DisplayBreakpointDialog(Engine_DisplayBreakpointDialogRequest) returns (Engine_DisplayBreakpointDialogResponse);
  
  
  // Method: SearchFiles
  //
  // Begin a new find in files search.
  //
  // Returns a SearchResults object that is a handle to the asynchronous search already in progress. To wait for the search to complete, call the SearchResults.IsComplete method.
  //
  // Engine_SearchFilesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - searchString: string - Pass the string or regular expression for which to search. To use regular expressions, you must specify SearchOptions_RegExpr for the searchOptions parameter.
  //    - filterOptions: int32 - Pass one or more SearchFilterOptions constants. Use the bitwise-OR operator to specify multiple search filter options.
  //    - elementsToSearch: int32 - Pass one or more SearchElements constants. Use the bitwise-OR operator to specify multiple elements to search.
  //    - limitToAdapters: repeated string - Pass an array of AdapterKeyNames constants to indicate the steps of which adapters to search. Pass an empty array or NULL to search steps that use any adapter.
  //    - limitToNamedProps: repeated string - Pass an array of property names under which to limit the search. Pass an empty array or NULL to search all properties. If you specify names of properties to which to limit the search, TestStand searches only those properties with the names you specify and all their subproperties.
  //    - limitToPropsOfNamedTypes: repeated string - Pass an array of type names to which to limit the search. Pass an empty array or NULL to search instances of all types. Use this parameter to limit the search instances of all types. Use this parameter to limit the search to instances of the types you specify.
  //    - openFilesToSearch: repeated PropertyObjectFileInstance - Pass an array of PropertyObjectFile references to specify already open files in which to search. You can pass an empty array or NULL for this parameter.
  //    - directoriesAndFilePaths: repeated string - Pass an array of directories and/or file paths to indicate which files to load and search. All paths must be absolute paths. If you specify a directory, TestStand searches all sequence files under the directory and any of the subdirectories. You can pass an empty array or NULL for this parameter.
  //
  // Engine_SearchFilesResponse - The response message from the server. It provides the return value.
  //    - returnValue: SearchResultsInstance - A SearchResults object. 
  //
  rpc SearchFiles(Engine_SearchFilesRequest) returns (Engine_SearchFilesResponse);
  
  
  // Method: GetWatchExpressionsChangeCount
  //
  // Returns the number of modifications made to the watch expression list the engine maintains or to the watch expressions in the list.
  //
  // When you insert or remove a WatchExpression object from the watch expression list the engine maintains or when you modify a watch expression in the list, the engine increments the change count. The sequence editor and user interfaces can use this count to determine when to refresh the Watch View pane.
  //
  // Engine_GetWatchExpressionsChangeCountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_GetWatchExpressionsChangeCountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - The return type of the Int32 object.
  //
  rpc GetWatchExpressionsChangeCount(Engine_GetWatchExpressionsChangeCountRequest) returns (Engine_GetWatchExpressionsChangeCountResponse);
  
  
  // Method: GetWatchExpressions
  //
  // Returns the number of modifications made to the watch expression list the engine maintains or to the watch expressions in the list.
  //
  // When you insert or remove a WatchExpression object from the watch expression list the engine maintains or when you modify a watch expression in the list, the engine increments the change count. The sequence editor and user interfaces can use this count to determine when to refresh the Watch View pane.
  //
  // Engine_GetWatchExpressionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_GetWatchExpressionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: WatchExpressionsInstance - The return type of the WatchExpressions object.
  //
  rpc GetWatchExpressions(Engine_GetWatchExpressionsRequest) returns (Engine_GetWatchExpressionsResponse);
  
  
  // Method: SetLocationForNextDialog
  //
  // Sets the location of the control in a dialog box that edits the property you specify. When you launch the dialog box again, the control associated with the location is selected and highlighted. The following methods launch dialog boxes that support this feature: PropertyObject.DisplayAttributesDialog, PropertyObject.DisplayPropertiesDialog, Step.SpecifyModule, StepType.SpecifyModule, Engine.DisplayEditUserDialog, Engine.DisplayStepPropDialog, Engine.DisplaySequencePropDialog, Engine.DisplaySeqFilePropDialog, Engine.DisplayPreconditionDialog.
  //
  // Engine_SetLocationForNextDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - locationLookupString: string - Specifies the subproperty of the object that specifies the corresponding control that is highlighted in the dialog box the next time it is launched.
  //    - elementAtLocation: int32 - Pass one of the following SearchElements constants to indicate which part of the property you want to highlight in the dialog box while editing: SearchElement_Name, SearchElement_Comment, SearchElement_StringValue, SearchElement_NumericValue, or SearchElement_BooleanValue. For example, to highlight a portion of a local variable comment, pass an empty string for the locationLookupString parameter and SearchElement_Comment for this parameter, then call PropertyObject.DisplayPropertiesDialog on the variable property. 
  //    - selectionStart: int32 - If the control the locationLookupString and elementAtLocation parameters indicate is an Edit control, you can use this parameter to select a particular section of the text within the control when TestStand launches the dialog box. Pass the index of the character within the string where you want the selection to start.
  //    - selectionLength: int32 - If the control the locationLookupString and elementAtLocation parameters specify is an Edit control, you can use this parameter to select a particular section of the text within the control when TestStand launches the dialog box. Starting from the selStartIndex character, pass the numbers of characters you want the dialog box to select in the Edit control.
  //
  // Engine_SetLocationForNextDialogResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetLocationForNextDialog(Engine_SetLocationForNextDialogRequest) returns (Engine_SetLocationForNextDialogResponse);
  
  
  // Method: DisplayHelpFile
  //
  // Opens to a topic in a HTML Help file using the topic filename, such as Engine.htm.
  //
  // Opens the HTML Help window to a given topic within the compiled help file (.chm) using the filename of the help topic. If any of the following parameters are specified—tableOfContentsFile, indexFile, or homeFile—all three are used to build the HTML Help window. If none of these parameters are specified, the information stored in the help file is used to build the HTML Help window.
  // To ensure proper navigation within the opened help file, National Instruments recommends that all three parameters—tableOfContentsFile, indexFile, and homeFile—be specified together.
  // To specify that a file is within a CHM, use the following syntax:
  // CHMFileName.chm::\\FileName.xxx
  //
  // Engine_DisplayHelpFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - htmlFile: string - Specifies the name of the HTML help topic within the help file to which the help window is opened. Include the file extension (.htm, .html) of the page. Specify the entire path of the page within the help file.
  //      Pass "" to open the help file to the default topic.
  //    - helpFile: string - Specifies the name of the HTML help file to open. Include the absolute path of the help file and the extension. If you do not specify a help file, TestStand uses the NI TestStand Help.
  //    - tableOfContentsFile: string - Specifies the name of the table of contents file to use with the help file. Include the absolute path of the table of contents file along with the extension.
  //    - indexFile: string - Specifies the name of the index file to use with the help file. Include the absolute path of the index file along with the extension.
  //    - homeFile: string - Specifies the name of the default topic to display for the help file. Include the absolute path of the default topic along with the extension.
  //    - windowCaption: string - Specifies the help window caption to display. This parameter is ignored unless a table of contents file, an index file, or a default topic file is specified. If none of these files are specified, the help window caption is the caption the author of the help file specifies. If you specify a contents file or an index file but do not specify this parameter, the window caption defaults to NI TestStand Help.
  //
  // Engine_DisplayHelpFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the window handle of the created help window. 
  //
  rpc DisplayHelpFile(Engine_DisplayHelpFileRequest) returns (Engine_DisplayHelpFileResponse);
  
  
  // Method: DisplayEditBreakAndWatchDialog
  //
  // Launches the Edit Breakpoints/Watch Expressions dialog box, in which you can edit the breakpoints and watch expressions defined for the current workspace.
  //
  // Engine_DisplayEditBreakAndWatchDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - dlgOptions: int32 - Specifies any combination of the EditBreakAndWatchOptions constants. 
  //
  // Engine_DisplayEditBreakAndWatchDialogResponse - The response message from the server. It provides the output parameters.
  //    - selectedItemParam: ObjectInstanc - If the user clicked the Goto button, this parameter returns information about the last selected item on the Breakpoints tab of the Edit Breakpoints/Watch Expressions dialog box. Pass a SelectedBreakpointItem object to access the last selected item.
  //
  rpc DisplayEditBreakAndWatchDialog(Engine_DisplayEditBreakAndWatchDialogRequest) returns (Engine_DisplayEditBreakAndWatchDialogResponse);
  
  
  // Method: DisplayExpressionEditOptionsDialog
  //
  // Launches the Expression Editing Options dialog box, in which you can edit the options for displaying expressions.
  //
  // Engine_DisplayExpressionEditOptionsDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - dlgOptions: int32 - Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWnd. By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from the Engine.AppMainHwnd property. Pass  CommonDlgOption_ModalToAppMainWnd if you want the dialog box to be modal with respect to the window handle of the AppMainHwnd property. Typically, you do not need to set this option.
  //
  // Engine_DisplayExpressionEditOptionsDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if you click OK in the dialog box. Returns False if you click Cancel. 
  //
  rpc DisplayExpressionEditOptionsDialog(Engine_DisplayExpressionEditOptionsDialogRequest) returns (Engine_DisplayExpressionEditOptionsDialogResponse);
  
  
  // Method: LoadTypePaletteFilesEx
  //
  // Loads the list of type palette files found in the TestStand Engine.
  //
  // Type palette files contain step type and data type definitions. LoadTypePaletteFilesEx is the method the sequence editor and user interfaces call on the TestStand Engine to load these files when they start up. You can call this method outside of the sequence editor or a user interface if an instance of the TestStand Engine has been created and the type palette files need to be loaded.
  // Note: National Instruments recommends that you call this method when you create the TestStand Engine to ensure that the application loads the correct versions of step types and data types. If you do not load the type palettes and load a sequence file with other versions of NI types, the sequence file might not execute correctly.
  //
  // Engine_LoadTypePaletteFilesExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - handlerType: TypeConflictHandlerTypes - Specifies how to handle type conflicts.
  //    - options: int32 - This parameter is reserved.
  //
  // Engine_LoadTypePaletteFilesExResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc LoadTypePaletteFilesEx(Engine_LoadTypePaletteFilesExRequest) returns (Engine_LoadTypePaletteFilesExResponse);
  
  
  // Method: RegisterUIMessage
  //
  // Note: This method is obsolete. Use the Engine.RegisterUIMessageCallbackEx method instead. Calling this method on a 64-bit instance of the TestStand Engine results in an error.
  //
  // Registers a C function as the user interface message event callback.
  // Note: National Instruments recommends using the Application Manager control with the ApplicationMgr.AfterUIMessageEvent and ApplicationMgr.UIMessageEvent events as needed. Refer to the example user interface applications TestStand provides, located in the <TestStand>\UserInterfaces directory.
  // You can use a C function as the Event callback, instead of using ActiveX events or polling. Ensure the Engine.UIMessagePollingEnabled property is False or TestStand does not call the callback.
  // The callback function must use the following C function prototype:
  // void __cdecl UIMessageCallback(struct IDispatch *UIMessageDisp);
  // The UIMessageDisp parameter is the IDispatch pointer to a UIMessage object. Because this pointer is passed to the callback as a parameter, do not release it when you finish using it.
  // Note: Use this method only inside of the sequence editor or user interface.
  //
  // Engine_RegisterUIMessageRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_RegisterUIMessageResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - The return type of the Int32 object.
  //
  rpc RegisterUIMessage(Engine_RegisterUIMessageRequest) returns (Engine_RegisterUIMessageResponse);
  
  
  // Method: NewWorkspaceFile
  //
  // Creates and returns a new WorkspaceFile object.
  //
  // Engine_NewWorkspaceFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_NewWorkspaceFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: WorkspaceFileInstance - The return type of the WorkspaceFile object.
  //
  rpc NewWorkspaceFile(Engine_NewWorkspaceFileRequest) returns (Engine_NewWorkspaceFileResponse);
  
  
  // Method: OpenWorkspaceFile
  //
  // Returns the WorkspaceFile object for the workspace file the workspaceFilePath parameter specifies.
  //
  // Reads the workspace file from disk. The path must be an absolute path. If the path is not absolute, TestStand raises an exception when trying to read the workspace file.
  //
  // Engine_OpenWorkspaceFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - workspaceFilePath: string - Specifies the absolute pathname of the workspace file.
  //    - options: int32 - Specify one or more OpenWorkspaceFileOptions constants. Use the bitwise-OR operator to specify more than one option.
  //    - handlerType: TypeConflictHandlerTypes - Specifies how to handle type conflicts.
  //
  // Engine_OpenWorkspaceFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: WorkspaceFileInstance - The return type of the WorkspaceFile object.
  //
  rpc OpenWorkspaceFile(Engine_OpenWorkspaceFileRequest) returns (Engine_OpenWorkspaceFileResponse);
  
  
  // Method: ReloadStringResourceFiles
  //
  // Refreshes the TestStand Engine string table, affecting future calls to the Engine.GetResourceString method.
  //
  // TestStand does not unload the strings but overwrites existing ones. Components that have already cached resource strings might not update with new values.
  // The string table is updated with the files corresponding to the last language selected.
  //
  // Engine_ReloadStringResourceFilesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_ReloadStringResourceFilesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ReloadStringResourceFiles(Engine_ReloadStringResourceFilesRequest) returns (Engine_ReloadStringResourceFilesResponse);
  
  
  // Method: GetAdapterByKeyName
  //
  // Returns an Adapter object from the list of module adapters.
  //
  // To access the properties and methods of a specific adapter, call GetAdapterByKeyName and then query the returned Adapter object for the interface of the desired adapter.
  //
  // Engine_GetAdapterByKeyNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_GetAdapterByKeyNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdapterInstance - The adapter that has the specified key name. 
  //
  rpc GetAdapterByKeyName(Engine_GetAdapterByKeyNameRequest) returns (Engine_GetAdapterByKeyNameResponse);
  
  
  // Method: PostUIMessage
  //
  // Posts a user interface message to the current sequence editor or user interface.
  //
  // You can post the following messages from a step: UIMsg_ProgressPercent and UIMsg_ProgressText. These messages tell the user interface to display a progress indicator or text message for the execution.
  //
  // Engine_PostUIMessageRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - executionParam: ExecutionInstance - Specifies the execution to pass with the message.
  //    - threadParam: ThreadInstance - Specifies the thread to pass with the message.
  //    - eventCode: UIMessageCodes - Specifies the type of UIMessage.
  //    - numericDataParam: double - Specifies numeric data to pass with the message. When you post a UIMsg_ProgressPercent event, this parameter specifies the percent done.
  //    - stringDataParam: string - Specifies string data to pass with the message. When you post a UIMsg_ProgressText event, this parameter specifies the text to display.
  //    - activeXDataParam: ObjectInstance - Specifies an ActiveX reference to pass with the message.
  //    - synchronous: bool - Typically, you pass True for this parameter to direct the method to wait until the user interface processes the message. If you pass False, the method returns immediately without waiting for the user interface to handle the message. If you pass False and post messages faster than the user interface processes messages, the number of messages in the queue the user interface must handle grows unbounded and floods the user interface with messages, which causes the user interface to become unresponsive.
  //
  // Engine_PostUIMessageResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc PostUIMessage(Engine_PostUIMessageRequest) returns (Engine_PostUIMessageResponse);
  
  
  // Method: DisplayBrowseExprDialogFromControl
  //
  rpc DisplayBrowseExprDialogFromControl(Engine_DisplayBrowseExprDialogFromControlRequest) returns (Engine_DisplayBrowseExprDialogFromControlResponse);
  
  
  // Method: NewExpression
  //
  // Creates and returns an Expression object.
  //
  // Engine_NewExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_NewExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExpressionInstance - The return type of the Expression object.
  //
  rpc NewExpression(Engine_NewExpressionRequest) returns (Engine_NewExpressionResponse);
  
  
  // Method: DisplayStepTypeMenuEditorEx
  //
  // Launches a dialog box in which you can edit the order in which step types appear in the Insert Step submenu.
  //
  // Engine_DisplayStepTypeMenuEditorExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - forSubsteps: bool - Pass True when editing the menu information for substeps.
  //    - dlgOptions: int32 - Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWnd.
  //
  // Engine_DisplayStepTypeMenuEditorExResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if you make modifications and click OK in the dialog box. Returns False if you click Cancel or make no modifications. 
  //
  rpc DisplayStepTypeMenuEditorEx(Engine_DisplayStepTypeMenuEditorExRequest) returns (Engine_DisplayStepTypeMenuEditorExResponse);
  
  
  // Method: NewTypeUsageList
  //
  // Creates and returns a new TypeUsageList.
  //
  // Engine_NewTypeUsageListRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - reservedParam: int32 - Pass 0.
  //
  // Engine_NewTypeUsageListResponse - The response message from the server. It provides the return value.
  //    - returnValue: TypeUsageListInstance - The return type of the TypeUsageList object.
  //
  rpc NewTypeUsageList(Engine_NewTypeUsageListRequest) returns (Engine_NewTypeUsageListResponse);
  
  
  // Method: UnserializeObjectsAndTypes
  //
  // Converts a string of serialized objects into an array of property objects and a TypeUsageList that contains types the PropertyObjects use.
  //
  // Call this method to convert the return value of the Engine.SerializeObjects method into an array of property objects and a list of types. Typically, you use the Engine.SerializeObjects and Engine.UnserializeObjects methods to put TestStand data on the Microsoft Windows clipboard and to obtain data from it.
  // If you insert the array of property objects this method returns into a property object file, add the types it uses to the file. You can also add the types to the file by calling the TypeUsageList.Union method on the object the PropertyObjectFile.TypeUsageList property returns. Pass the typesUsed output value as the unionTypeUsageList parameter to TypeUsageList.Union.
  // When you unserialize a step or a sequence, call the Step.CreateNewUniqueStepId, Sequence.CreateNewUniqueStepIds, or Engine.CreateNewUniqueStepIds method to replace the unique step ID with a new unique ID.
  //
  // Engine_UnserializeObjectsAndTypesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - stream: string - Specifies the serialized objects the Engine.SerializeObjects method creates.
  //    - reservedParam: int32 - Pass 0.
  //    - handlerType: TypeConflictHandlerTypes - Specifies how to handle type conflicts in the stream.
  //
  // Engine_UnserializeObjectsAndTypesResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: repeated PropertyObjectInstance - Returns the array of unserialized property objects. 
  //    - typesUsed: TypeUsageListInstanc - Returns the list of types the serialized objects use.
  //
  rpc UnserializeObjectsAndTypes(Engine_UnserializeObjectsAndTypesRequest) returns (Engine_UnserializeObjectsAndTypesResponse);
  
  
  // Method: GetEditTimeToolMenuItems
  //
  // Returns a reference to a EditTimeMenuItems object.
  //
  // TestStand maintains a collection of tools menu items. Use this collection to customize the tools menu items the sequence editor and user interface display. Each menu item in the collection specifies the menu item type and expressions which determine menu item text, hidden state, and enabled state. A menu item can specify a collection of submenu items.
  // You can use the Engine.GetRunTimeToolMenuItems method to obtain a reference to a run-time instance of the Tools menu. TestStand evaluates edit-time menu item expressions to determine the value of run-time properties. The run-time properties specify the menu item text and whether a menu item is enabled. TestStand excludes any menu items with hidden expressions that evaluate to False from the run-time copy of the Tools menu. The run-time copy of the Tools menu also contains expanded submenus for menu items using the ToolMenuType_SequenceFile type, where each submenu item is a menu item using the ToolMenuType_Sequence type.
  //
  // Engine_GetEditTimeToolMenuItemsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - reserved: int32 - Pass 0 for this parameter.
  //
  // Engine_GetEditTimeToolMenuItemsResponse - The response message from the server. It provides the return value.
  //    - returnValue: EditTimeMenuItemsInstance - The return type of the EditTimeMenuItems object.
  //
  rpc GetEditTimeToolMenuItems(Engine_GetEditTimeToolMenuItemsRequest) returns (Engine_GetEditTimeToolMenuItemsResponse);
  
  
  // Method: GetRunTimeToolMenuItems
  //
  // Returns a reference to a RunTimeMenuItems object. Use this method to determine the run-time text and dimmed state of menu items defined in the collection the Engine.GetEditTimeToolMenuItems method returns.
  //
  // TestStand maintains a collection of Tools menu items. You can obtain a reference to the collection using the Engine.GetEditTimeToolMenuItems method. You can also customize the contents of the Tools menu.
  // TestStand uses the menu items in the edit-time collection to generate a run-time version of the menu items. TestStand evaluates edit-time menu item expressions to determine the value of run-time properties, such as menu item text and whether menu items are enabled. TestStand excludes any edit-time menu items with hidden expressions that evaluate to False from the run-time collection. The run-time collection also contains expanded submenus for menu items using the ToolMenuType_SequenceFile type.
  //
  // Engine_GetRunTimeToolMenuItemsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - editArgsParam: ObjectInstance - Specifies the currently selected items in the user interface. The menu item expressions can use this information to determine item text, hidden state, and enabled state.
  //    - reserved: int32 - Pass 0 for this parameter.
  //
  // Engine_GetRunTimeToolMenuItemsResponse - The response message from the server. It provides the return value.
  //    - returnValue: RunTimeMenuItemsInstance - The return type of the RunTimeMenuItems object.
  //
  rpc GetRunTimeToolMenuItems(Engine_GetRunTimeToolMenuItemsRequest) returns (Engine_GetRunTimeToolMenuItemsResponse);
  
  
  // Method: WriteToolMenuToDisk
  //
  // Updates the Tools menu configuration file, <TestStand Application Data>\Cfg\ToolMenu.ini, with the latest changes.
  //
  // If you make changes to the contents of the current Tools menu using the TestStand API, those changes are not saved automatically to the Tools menu configuration file. Call this method to save those changes to disk. Otherwise, the configuration file is automatically saved when the engine shuts down.
  //
  // Engine_WriteToolMenuToDiskRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - reserved: int32 - Pass 0 for this parameter.
  //
  // Engine_WriteToolMenuToDiskResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc WriteToolMenuToDisk(Engine_WriteToolMenuToDiskRequest) returns (Engine_WriteToolMenuToDiskResponse);
  
  
  // Method: CreateNewUniqueStepIds
  //
  // Creates new unique step IDs for a set of steps.
  //
  // Call this method after cloning or copying a group of steps to ensure that the steps in the copy contain unique IDs. This method also modifies certain steps, such as Goto steps, that refer to unique IDs so they refer to the newly generated IDs.
  //
  // Engine_CreateNewUniqueStepIdsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - steps: repeated StepInstance - Specifies an array of steps for which new unique step IDs are created.
  //
  // Engine_CreateNewUniqueStepIdsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc CreateNewUniqueStepIds(Engine_CreateNewUniqueStepIdsRequest) returns (Engine_CreateNewUniqueStepIdsResponse);
  
  
  // Method: GetLicenseDescription
  //
  // Returns the current license description.
  //
  // Engine_GetLicenseDescriptionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - reserved: int32 - Pass 0 for this parameter.
  //
  // Engine_GetLicenseDescriptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetLicenseDescription(Engine_GetLicenseDescriptionRequest) returns (Engine_GetLicenseDescriptionResponse);
  
  
  // Method: GetLocationForNextDialog
  //
  // This method is typically used by a dialog box to obtain the information needed to select and highlight the control associated with the location the Engine.SetLocationForNextDialog method previously specified.
  //
  // Engine_GetLocationForNextDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - clearLoc: bool - Typically, calling this method clears the internal data in the engine for the location of the dialog box so the next time this method is called, no location information is returned. To override this behavior, pass False for this parameter.
  //
  // Engine_GetLocationForNextDialogResponse - The response message from the server. It provides the output parameters.
  //    - locationLookupString: strin - Returns a lookup string that indicates the subproperty of the object that contains the corresponding control you want to highlight in the dialog box.
  //    - elementAtLocation: int3 - Returns one of the following SearchElements constants to indicate which part of the property to highlight in the dialog box: SearchElement_Name, SearchElement_Comment, SearchElement_StringValue, SearchElement_NumericValue, or SearchElement_BooleanValue.
  //    - selectionStart: int3 - If the control the locationLookupString and elementAtLocation parameters indicate is an Edit control, use this parameter to determine a particular section of the text within the control for the dialog box to select. Returns the index of the character within the string for the start of the selection.
  //    - selectionLength: int3 - If the control the locationLookupString and elementAtLocation parameters indicate is an Edit control, use this parameter to determine a particular section of the text within the control for the dialog box to select. Returns the number of characters, starting from the selStartIndex character, for the dialog box to select in the Edit control.
  //
  rpc GetLocationForNextDialog(Engine_GetLocationForNextDialogRequest) returns (Engine_GetLocationForNextDialogResponse);
  
  
  // Method: SetConfigDirectory
  //
  // Specifies the pathname of the TestStand configuration directory.
  //
  // Changes to the TestStand configuration directory do not take effect until you have shut down the TestStand Engine.
  // The configuration directory contains engine and sequence editor option files, the users file, the globals file, and the tools menu file.
  //
  // Engine_SetConfigDirectoryRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - Path: string - Specifies the new pathname where TestStand stores configuration files. You can pass an empty string to instruct TestStand to use the <TestStand Application Data>\Cfg directory.
  //    - CopyFilesOnEngineShutdown: bool - Specifies whether TestStand copies all files located in the current TestStand configuration directory to the new location upon shutdown.
  //
  // Engine_SetConfigDirectoryResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetConfigDirectory(Engine_SetConfigDirectoryRequest) returns (Engine_SetConfigDirectoryResponse);
  
  
  // Method: DisplayLockUnlockDialog
  //
  // Launches a dialog box in which you can lock or unlock a PropertyObjectFile, or prompt for a password to perform a lock or unlock operation.
  //
  // Engine_DisplayLockUnlockDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box. 
  //    - dlgMsg: string - Specifies the message in the dialog box. Pass an empty string to use the default message for the dialog box. 
  //    - propObject: PropertyObjectInstance - Specifies an object to lock or unlock. The object lock state determines whether the dialog box performs a lock or unlock operation by calling the PropertyObjectFile.Lock and PropertyObjectFile.Unlock methods respectively.
  //      When you pass NULL, the dialog box does not operate on any object. The options parameter specifies whether the dialog box performs a lock or unlock operation. If you pass NULL and perform an unlock operation, you must specify the required password using the passwordString parameter.
  //    - options: int32 - Specifies any combination of the LockUnlockDialogOptions constants.
  //
  // Engine_DisplayLockUnlockDialogResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if you click OK in the dialog box. Returns False if you click Cancel. 
  //    - passwordString: ObjectInstanc - The new value of passwordString if the method modifies it.
  //
  rpc DisplayLockUnlockDialog(Engine_DisplayLockUnlockDialogRequest) returns (Engine_DisplayLockUnlockDialogResponse);
  
  
  // Method: GetUserGroup
  //
  // Obtains the User" object that represents a specific user group.
  // 
  //
  // Returns NULL if the user group does not exist.
  // The user group specifies the list of user names that are members of the group and the shared privileges granted to the members. Use the User.Members property to edit the list of user names.
  //
  // Engine_GetUserGroupRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - userGroupName: string - Specifies the name of the user group to return.
  //
  // Engine_GetUserGroupResponse - The response message from the server. It provides the return value.
  //    - returnValue: UserInstance - The return type of the User object.
  //
  rpc GetUserGroup(Engine_GetUserGroupRequest) returns (Engine_GetUserGroupResponse);
  
  
  // Method: ShouldAutoLaunchExternalReportViewer
  //
  // Returns a value that indicates whether the user interface automatically launches an external report viewer when an execution finishes.
  //
  // This method uses the report file extension and the external viewer configuration options to determine whether the user interface automatically launches the report viewer.
  //
  // Engine_ShouldAutoLaunchExternalReportViewerRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - FilePath: string - Specifies the report file path. This method uses only the file extension of the parameter.
  //
  // Engine_ShouldAutoLaunchExternalReportViewerResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the user interface launches the external viewer. 
  //
  rpc ShouldAutoLaunchExternalReportViewer(Engine_ShouldAutoLaunchExternalReportViewerRequest) returns (Engine_ShouldAutoLaunchExternalReportViewerResponse);
  
  
  // Method: CanCreateStep
  //
  // Determines whether you can create a new step of the specified type.
  //
  // The Engine.NewStep method reports an error if this method returns False.
  //
  // Engine_CanCreateStepRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - adapterKeyNameVal: string - Specifies the key name of the module Adapter object to use to create the step. Pass an empty string to use the adapter the step type designates or to use the adapter the Engine.DefaultAdapter property specifies if the step has no designated adapter.
  //    - stepTypeName: string - Specifies the name of the step type with which to create the step. The step type must already be in memory. Refer to Engine.GetTypeNames for a list of names for the built-in step types and other types.
  //
  // Engine_CanCreateStepResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc CanCreateStep(Engine_CanCreateStepRequest) returns (Engine_CanCreateStepResponse);
  
  
  // Method: DisplayEditPathsInFilesDialog
  //
  // Launches a dialog box in which you can edit the properties stored in TestStand files that contain pathnames.
  //
  // This method first launches a dialog box in which you can select which files to edit. After you select those files, this method launches a dialog box that shows all the path properties within those files. You can use this dialog box to change the paths stored in any TestStand file, including sequence files, workspace files, project files, engine configuration files, the station globals file, and the user file.
  //
  // Engine_DisplayEditPathsInFilesDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - dlgOptions: int32 - Specifies any combination of the EditPathsDialogOptions constants.
  //    - initialFile: ObjectInstance - Specifies an optional PropertyObjectFile object the dialog box initially selects in the list control. 
  //
  // Engine_DisplayEditPathsInFilesDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if you modify one or more files from the dialog box. 
  //
  rpc DisplayEditPathsInFilesDialog(Engine_DisplayEditPathsInFilesDialogRequest) returns (Engine_DisplayEditPathsInFilesDialogResponse);
  
  
  // Method: DisplayRunTimeErrorDialogEx
  //
  // Launches the Run-Time Error dialog box to display error information for the specified sequence context.
  //
  // The sequence editor and user interfaces typically call this function in response to a UIMsg_BreakOnRunTimeError event. The dialog box allows the user to specify how the execution is to proceed.
  // If you use this method within an Engine callback, use the ThisContext.Caller property to pass the sequence context of the sequence that generated the error.
  //
  // Engine_DisplayRunTimeErrorDialogExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - sequenceContextParam: SequenceContextInstance - Specifies the sequence context from the thread that caused the run-time error.
  //    - dlgOptions: int32 - Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWnd.
  //
  // Engine_DisplayRunTimeErrorDialogExResponse - The response message from the server. It provides the output parameters.
  //    - suspendExecution: boo - Returns a value that indicates whether the user wants the current execution to suspend at the location of the run-time error.
  //    - dontShowAgainForExecution: boo - Returns a value that indicates whether the user wants this dialog box to launch again if another run-time error occurs in the current execution. If this value is True, set the Execution.RTEOptionForThisExecution property to specify what to do on a run-time error for this execution.
  //    - dontShowAgainForBatch: boo - Returns a value that indicates whether the user wants this dialog box to launch again if another run-time error occurs in any execution that has a thread from the same batch as the thread in the sequence context you specify. If this value is True, call the Thread.SetBatchRTEOption method to set what to do on a run-time error for these executions.
  //    - runTimeErrorAction: RTEOption - Returns the option the user selects in the dialog box to specify how the execution is to proceed.
  //
  rpc DisplayRunTimeErrorDialogEx(Engine_DisplayRunTimeErrorDialogExRequest) returns (Engine_DisplayRunTimeErrorDialogExResponse);
  
  
  // Method: DisplayBrowseExprDialogEx
  //
  // Launches a dialog box in which you can construct an expression string using variables, properties, constants, operators, and functions.
  //
  // Engine_DisplayBrowseExprDialogExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - objectToBrowse: PropertyObjectInstance - Specifies the object into which to browse. This is usually a SequenceContext object. You can use the SequenceFile.NewEditContext or Engine.NewEditContext methods to create a sequence context.
  //    - expressionIn: string - Specifies the initial expression string for the dialog box. You can pass an empty string for this parameter. This string must be a localized expression.
  //    - selectionStartIn: int32 - Specifies the zero-based index of the location in the initial expression where the selected text begins. If you want a cursor instead of selected text, pass the same index for selectionEndIn.
  //    - selectionEndIn: int32 - Specifies the index of the location in the initial expression of the first character beyond the selected text. If you want a cursor instead of selected text, pass the same index for selectionStartIn. Pass -1 to select to the end of the text.
  //    - initialVariableName: string - Specifies the name of the initial variable or property to show as selected in the dialog box. You can pass an empty string for the parameter to select the first item.
  //    - dlgOptions: int32 - Specifies any combination of the BrowseExprDialogOptions constants.
  //
  // Engine_DisplayBrowseExprDialogExResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if you click OK in the dialog box. Returns False if you click Cancel. 
  //    - expressionOut: strin - Returns the resulting expression from the dialog box when the user clicks OK. This expression string is a localized expression. You can convert a localized expression string to a standard form suitable for evaluation.
  //    - selectionStartOut: int3 - Returns the index of the start of the selected text in the resulting expression when the user clicks OK.
  //    - selectionEndOut: int3 - Returns the index of the first character beyond the selected text in the resulting expression when the user clicks OK.
  //
  rpc DisplayBrowseExprDialogEx(Engine_DisplayBrowseExprDialogExRequest) returns (Engine_DisplayBrowseExprDialogExResponse);
  
  
  // Method: DisplayBrowsePropertyObjectDialog
  //
  // Launches a dialog box in which you can see the structure of a PropertyObject object.
  //
  // Engine_DisplayBrowsePropertyObjectDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - objectToBrowse: PropertyObjectInstance - Specifies the object into which to browse.
  //    - initialLocation: string - Specifies a lookup string for the subproperty of the object to select initially.
  //    - dlgOptions: int32 - Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWind.
  //
  // Engine_DisplayBrowsePropertyObjectDialogResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc DisplayBrowsePropertyObjectDialog(Engine_DisplayBrowsePropertyObjectDialogRequest) returns (Engine_DisplayBrowsePropertyObjectDialogResponse);
  
  
  // Method: SaveAllModifiedSeqFiles
  //
  // Saves all modified sequence files in the engine internal cache.
  //
  // If this method prompts the user to save a file and the user selects No, subsequent calls to this method do not prompt the user to save the file unless the file is modified further.
  //
  // Engine_SaveAllModifiedSeqFilesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - options: int32 - Specify one or more SaveAllSeqFileOptions constants. Use the bitwise-OR operator to specify multiple sequence file flags.
  //
  // Engine_SaveAllModifiedSeqFilesResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if all modified files were saved successfully. Returns False if one or more files could not be saved or if the user cancels the operation. 
  //
  rpc SaveAllModifiedSeqFiles(Engine_SaveAllModifiedSeqFilesRequest) returns (Engine_SaveAllModifiedSeqFilesResponse);
  
  
  // Method: CallFrontEndCallbackEx
  //
  // Calls the Front-End callback sequence the sequenceNameParam parameter specifies.
  //
  // Front-End callbacks, which are callbacks the TestStand Sequence Editor or a TestStand User Interface call, allow you to customize the sequence editors and user interfaces on the system. Each sequence editor or user interface chooses which Front-End callbacks it calls. The FrontEndCallbacks.seq file in the <TestStand>\Components\Callbacks\FrontEnd directory contains the Front-End callbacks National Instruments defines. Currently, National Instruments defines only the LoginLogout Front-End callback. You can override the National Instruments version of LoginLogout or add custom Front-End callbacks in the FrontEndCallbacks.seq file, which is located in the <TestStand Public>\Components\Callbacks\FrontEnd directory.
  //
  // Engine_CallFrontEndCallbackExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - sequenceNameParam: string - Specifies the name of the Front-End callback sequence to call.
  //    - argumentList: PropertyObjectInstance - Specifies a PropertyObject that contains the parameters to pass to the sequence. Each subproperty of the PropertyObject represents a parameter to the sequence. The subproperties must appear in the same order as the sequence parameters.
  //    - handlerType: TypeConflictHandlerTypes - Specifies how to handle type conflicts.
  //    - reservedParam: int32 - Note: This parameter is reserved.
  //
  // Engine_CallFrontEndCallbackExResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionInstance - The Execution object of the newly created execution. 
  //
  rpc CallFrontEndCallbackEx(Engine_CallFrontEndCallbackExRequest) returns (Engine_CallFrontEndCallbackExResponse);
  
  
  // Method: DisplaySequenceFileCallbacksDialog
  //
  // Launches a dialog box in which you can show, add, and remove Sequence File callbacks.
  //
  // Engine_DisplaySequenceFileCallbacksDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - sequenceFileParam: SequenceFileInstance - Pass a SequenceFile object to specify which sequence file you want to edit.
  //    - dlgOptions: int32 - Specifies any combination of the CommonDialogOptions constants.
  //
  // Engine_DisplaySequenceFileCallbacksDialogResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if you make modifications and click OK in the dialog box. Returns False if you click Cancel or make no modifications. 
  //    - sequenceToEdit: strin - Returns to the dialog box the name of the callback sequence the user chose to edit. An empty string indicates the user did not select a callback to edit.
  //    - numCallbacksAdded: int3 - Returns the number of callbacks the dialog box added to the sequence file. Callbacks are added to the end of the list of sequences.
  //    - numCallbacksDeleted: int3 - Returns the number of callbacks that the dialog box deleted from the sequence file.
  //
  rpc DisplaySequenceFileCallbacksDialog(Engine_DisplaySequenceFileCallbacksDialogRequest) returns (Engine_DisplaySequenceFileCallbacksDialogResponse);
  
  
  // Method: GetProductRegistrationInfo
  //
  // Returns the product registration information for this installation of TestStand.
  //
  // This method returns the information you entered at install time or from the National Instruments License Manager when activating the license for TestStand.
  //
  // Engine_GetProductRegistrationInfoRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_GetProductRegistrationInfoResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if this is a registered installation of TestStand. 
  //    - userName: strin - Returns the name of the user currently logged into the National Instruments License Manager.
  //    - companyName: strin - Returns the company name of the user currently logged into the National Instruments License Manager.
  //    - serialNumber: strin - Returns the serial number for this installation of TestStand.
  //
  rpc GetProductRegistrationInfo(Engine_GetProductRegistrationInfoRequest) returns (Engine_GetProductRegistrationInfoResponse);
  
  
  // Method: SetProductRegistrationInfo
  //
  // Note: This method is obsolete. The National Instruments License Manager sets user registration information when you activate TestStand.
  //
  // Sets the product registration information for this installation of TestStand.
  // This method sets the information that you entered in the TestStand Product Registration dialog box, which launches the first time you launch the sequence editor after installation.
  //
  // Engine_SetProductRegistrationInfoRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - userName: string - This parameter is obsolete and no longer supported.
  //    - companyName: string - This parameter is obsolete and no longer supported.
  //    - serialNumber: string - This parameter is obsolete and no longer supported.
  //
  // Engine_SetProductRegistrationInfoResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns False 
  //
  rpc SetProductRegistrationInfo(Engine_SetProductRegistrationInfoRequest) returns (Engine_SetProductRegistrationInfoResponse);
  
  
  // Method: ReleaseSequenceFileEx
  //
  // Releases the SequenceFile object from the internal cache of the engine.
  //
  // Call this method to release the sequence file you obtained from the Engine.NewSequenceFile or Engine.GetSequenceFileEx methods.
  // This method removes a load reference from the sequence file. TestStand uses the load reference count to determine when to unload the sequence file from the internal cache of the engine.
  // When you release the last load reference, TestStand unloads the file from the internal cache of the engine. While unloading the file from the internal cache of the engine, TestStand executes the SequenceFileUnload callback, if applicable.
  // If this method generates an error, TestStand does not release the object from the internal cache of the engine. If your development environment requires you to explicitly release COM references, only release the COM reference to a SequenceFile object if this method succeeds.
  // Use the ReleaseSeqFile_DoNotRunUnloadCallback option to prevent the SequenceFileUnload callback from running if the callback exists and the load reference being released is the last load reference. TestStand executes the SequenceFileUnloadCallback after this method returns.
  // Note: Calling this method does not release the ActiveX reference to the sequence file.
  //
  // Engine_ReleaseSequenceFileExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - sequenceFileToRelease: SequenceFileInstance - Specifies a reference to the sequence file to release.
  //    - options: int32 - Specify one or more ReleaseSeqFileOptions constants. Use the bitwise-OR operator to specify multiple sequence file flags.
  //
  // Engine_ReleaseSequenceFileExResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the file was removed from the TestStand internal cache. Returns False if the file remained in the cache because it has multiple load references or if TestStand initiates the execution of the SequenceFileUnload callback sequence for the SequenceFile object. Refer to SequenceFile.CanUnload for more information about loading and unloading files in the cache. 
  //
  rpc ReleaseSequenceFileEx(Engine_ReleaseSequenceFileExRequest) returns (Engine_ReleaseSequenceFileExResponse);
  
  
  // Method: RegisterModalWindow
  //
  // Notifies TestStand that the specified window is a modal dialog box.
  //
  // Call this method after you create a modal dialog box. TestStand disables the main application window and forwards any activation requests to the specified window. Call the Engine.UnregisterModalWindow method when the dialog box closes.
  // You must call this method after you have created the dialog box window. An alternative to using this method is to call the Engine.NotifyStartOfModalDialogEx method, which you must call before creating the dialog box window.
  // For a Microsoft Visual Basic modal dialog box, if you display the dialog box from multiple threads at the same time, you must use an executable ActiveX Automation server project and set the project settings to Thread Per Object.
  //
  // Engine_RegisterModalWindowRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - sequenceContextParam: SequenceContextInstance - If you display the dialog box from the step of an execution, pass the sequence context of the step; otherwise, pass a NULL reference. If you pass a sequence context, this method serializes calls from multiple threads the same way the Engine.NotifyStartOfModalDialogEx method serializes calls.
  //    - modalHWND: int32 - Specifies the window handle of the modal dialog box.
  //
  // Engine_RegisterModalWindowResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: int32 - Returns the modalID to pass to the Engine.UnregisterModalWindow method when the dialog box no longer appears on screen. 
  //    - shouldAbort: boo - Returns True when the user terminates or aborts the corresponding execution for the sequence context parameter you passed while you were blocked inside this method call. The step skips launching the dialog box and returns as soon as possible. You can call Engine.UnregisterModalWindow in this case, though it is not necessary.
  //
  rpc RegisterModalWindow(Engine_RegisterModalWindowRequest) returns (Engine_RegisterModalWindowResponse);
  
  
  // Method: UnregisterModalWindow
  //
  // Notifies TestStand that the specified window is no longer a modal dialog box.
  //
  // Call this method when a dialog box you registered with the Engine.RegisterModalWindow method closes.
  //
  // Engine_UnregisterModalWindowRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - modalID: int32 - Pass the modalID you receive as a return value from the  Engine.RegisterModalWindow.
  //
  // Engine_UnregisterModalWindowResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc UnregisterModalWindow(Engine_UnregisterModalWindowRequest) returns (Engine_UnregisterModalWindowResponse);
  
  
  // Method: DisplayFileDialog
  //
  // Launches a dialog box in which the user can select files or directories to open or to save.
  //
  // This method launches the TestStand File dialog box. Depending on the options you pass, TestStand selects a single file, multiple files, a single directory, or multiple directories. Additional options specify whether TestStand returns absolute or relative pathnames for the selected files. TestStand can return a relative pathname only when the file is located under one of the TestStand search directories. If the file is not located under any of the TestStand search directories and the user requests that TestStand return a relative pathname, the dialog box prompts the user to add the name of the directory that contains the file to the list of TestStand search directories. You can pass a SequenceFile object, WorkspaceFile object, or a project file object to include its directory among the list of search directories that are valid for a relative pathname.
  //
  // Engine_DisplayFileDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - okButtonText: string - Specifies a string to display on the OK button. Pass an empty string to use the default.
  //    - initialPath: string - For a file selection dialog box, specify the path of the file you want the dialog box to display initially. If you specify the path of a directory, the filename control in the dialog box remains empty. For a directory selection dialog box, specify the path of the directory you want the user to browse initially. Pass an empty string to specify the current directory. The path must specify an existing file or directory.
  //    - openFileDialogFlags: int32 - Pass 0 for the default behavior, or pass one or more OpenFileDialogOptions constants. Use the bitwise-OR operator to specify multiple flags.
  //    - defaultExtension: string - Specifies the extension to append to the pathname if the user specifies no extension. Do not include the period in the extension.
  //    - win32Flags: int32 - Specifies the Microsoft Windows file dialog flags.
  //    - fileFilter: string - Specifies the extensions files must have  to appear in the dialog box. Each filter the string contains has two parts. The first part is a descriptive name for the filter and the second part lists the extensions the file can have. Specify multiple extensions using a semi-colon (;) as a delimiter, and end each section with a vertical bar (|). End the string with a final vertical bar (|). The following example illustrates this format:
  //      "Sequence Files (*.seq)|*.seq|Report Files (*.txt;*.htm;*.html)|*.txt;*.htm;*.html||"
  //    - currentFile: ObjectInstance - Pass a PropertyObjectFile object for a sequence file, workspace file, or project file if you want to include the directory of the file in the list of search directories that are valid for a relative pathname. The search directory "current sequence file" refers to the object passed as this parameter. If you pass a workspace file or project file, TestStand searches the directory of the file before searching the other search directories for the relative pathname.
  //
  // Engine_DisplayFileDialogResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if you click OK in the dialog box. Returns False if you click Cancel. 
  //    - selectedPaths: repeated strin - Returns the array of pathnames of the files or directories the user selected. The pathnames can be relative or absolute depending on the dialog box settings.
  //    - absolutePaths: repeated strin - Returns the array of absolute pathnames of the files or directories the user selected.
  //    - fileFilterIndex: ObjectInstanc - The new value of fileFilterIndex if the method modifies it.
  //    - dirHistoryList: ObjectInstanc - The new value of dirHistoryList if the method modifies it.
  //
  rpc DisplayFileDialog(Engine_DisplayFileDialogRequest) returns (Engine_DisplayFileDialogResponse);
  
  
  // Method: SerializeObjects
  //
  // Serializes PropertyObject objects into a string.
  //
  // This method converts one or more objects into a string that can be unserialized using the Engine.UnserializeObjects method. Typically, you use the SerializeObjects and Engine.UnserializeObjects methods to put TestStand data on the Microsoft Windows clipboard and to obtain data from it.
  // If you call this method on an alias object, TestStand generates the stream using the object to which the alias refers. This method does not include alias subproperty objects in the stream. Refer to PropertyObject.IsAliasObject for more information about alias objects.
  // Use the Engine.UnserializeObjectsAndTypes method instead of Engine.UnserializeObjects if you intend to insert the array of property objects generated from the stream into a property object file. Also add the types the Engine.UnserializeObjectsAndTypes method returns to the file by calling the TypeUsageList.Union method on the object the PropertyObjectFile.TypeUsageList property returns. Pass the typesUsed output value as the unionTypeUsageList parameter to TypeUsageList.Union.
  // When you unserialize a step or a sequence, call the Step.CreateNewUniqueStepId, Sequence.CreateNewUniqueStepIds, or Engine.CreateNewUniqueStepIds methods to replace the unique step ID with a new unique ID.
  //
  // Engine_SerializeObjectsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - objects: repeated PropertyObjectInstance - Pass the array of property objects to serialize.
  //    - options: int32 - Specify one or more SerializationOptions using a bitwise combination. This parameter specifies options for how you want to serialize the data. National Instruments recommends using the SerializationOption_UseBinary option for best performance and memory usage, unless you need to parse or read the data more easily. The Engine.UnserializeObjects and Engine.UnserializeObjectsAndTypes methods always autodetect and unserialize the data appropriately.
  //
  // Engine_SerializeObjectsResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the string that contains the serialized objects. 
  //
  rpc SerializeObjects(Engine_SerializeObjectsRequest) returns (Engine_SerializeObjectsResponse);
  
  
  // Method: UnserializeObjects
  //
  // Converts a string of serialized objects into an array of property objects and a TypeUsageList that contains types the PropertyObjects use.
  //
  // Call this method to convert the return value of the Engine.SerializeObjects method into an array of property objects and a list of types. Typically, you use the Engine.SerializeObjects and Engine.UnserializeObjects methods to put TestStand data on the Microsoft Windows clipboard and to obtain data from it.
  // If you insert the array of property objects this method returns into a property object file, add the types it uses to the file. You can also add the types to the file by calling the TypeUsageList.Union method on the object the PropertyObjectFile.TypeUsageList property returns. Pass the typesUsed output value as the unionTypeUsageList parameter to TypeUsageList.Union.
  // When you unserialize a step or a sequence, call the Step.CreateNewUniqueStepId, Sequence.CreateNewUniqueStepIds, or Engine.CreateNewUniqueStepIds method to replace the unique step ID with a new unique ID.
  //
  // Engine_UnserializeObjectsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - stream: string - Specifies the serialized objects the Engine.SerializeObjects method creates.
  //    - reservedParam: int32 - Pass 0.
  //    - handlerType: TypeConflictHandlerTypes - Specifies how to handle type conflicts in the stream.
  //
  // Engine_UnserializeObjectsResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated PropertyObjectInstance - Returns the array of unserialized property objects. 
  //
  rpc UnserializeObjects(Engine_UnserializeObjectsRequest) returns (Engine_UnserializeObjectsResponse);
  
  
  // Method: DisplayWorkspaceBrowserDialog
  //
  // Launches a dialog box in which you select and edit a workspace file.
  //
  // User interfaces use this method to allow users to select a workspace file, load and unload a workspace file, edit the files in the workspace file and project files, and perform SCC operations.
  //
  // Engine_DisplayWorkspaceBrowserDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - dlgOptions: int32 - Specifies any combination of the WorkspaceBrowserDialogOptions constants. Pass WorkspaceBrowserDlgOption_Editable to enable editing of the workspace. Use the bitwise-OR operator to specify more than one option.
  //
  // Engine_DisplayWorkspaceBrowserDialogResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc DisplayWorkspaceBrowserDialog(Engine_DisplayWorkspaceBrowserDialogRequest) returns (Engine_DisplayWorkspaceBrowserDialogResponse);
  
  
  // Method: GetTypeUsageLocations
  //
  // Returns an array of PropertyObjectFile objects that use the specified type name.
  //
  // A PropertyObjectFile object uses a type if it has an instance of the type or if the type is stored in the TypeUsageList for that file.
  //
  // Engine_GetTypeUsageLocationsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - typeNameParam: string - Specifies the name of the type.
  //
  // Engine_GetTypeUsageLocationsResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated PropertyObjectFileInstance - An array of PropertyObjectFile objects that use the type that the type name specifies. 
  //
  rpc GetTypeUsageLocations(Engine_GetTypeUsageLocationsRequest) returns (Engine_GetTypeUsageLocationsResponse);
  
  
  // Method: ResetTypeInstances
  //
  // Searches for all instances of the specified type definition in the TestStand Engine and sets the values and flags of each type definition instance to the default value and flags for the type.
  //
  // Use this method to apply the value of a type definition property to all instances of the type. Normally, when you change the value of a type definition property, the values in the instances of the type do not change.
  // Note: Calling this method does not affect instances in unopened files on disk. In addition, this method ignores the subproperties of typeParam unless you pass the ResetTypeInst_RecurseSubProperties constant as an option.
  //
  // Engine_ResetTypeInstancesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - typeParam: PropertyObjectInstance - Specifies a type definition or a subproperty of a type definition.
  //    - resetTypeInstancesOptions: int32 - Pass one or more ResetTypeInstancesOptions constants to specify different options. Use the bitwise-OR operator to specify more than one option.  If you want to reset the values/flags of all the subproperties in all instances of a type, pass ResetTypeInst_RecurseSubProperties using the bitwise-OR operator with ResetTypeInst_ResetFlags or ResetTypeInst_ResetValues.Note: Avoid using the ResetTypeInst_ResetFlags flag because it might result in unexpected behavior. In most cases, you should not reset certain flags on type instances. For example, the PropFlags_PassByReference flag is set on parameters of Sequence Call steps. Calling the Engine.ResetTypeInstances method on a type can change whether TestStand passes a sequence parameter that is an instance of the type by reference.
  //
  // Engine_ResetTypeInstancesResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if this method finds any type instances or returns False if it finds none. 
  //
  rpc ResetTypeInstances(Engine_ResetTypeInstancesRequest) returns (Engine_ResetTypeInstancesResponse);
  
  
  // Method: GetTypeDefinition
  //
  // Returns the PropertyObject object for the specified type name.
  //
  // The returned PropertyObject object is the type definition for the specified type name.
  //
  // Engine_GetTypeDefinitionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - typeNameParam: string - Specifies the name of the type to obtain.
  //
  // Engine_GetTypeDefinitionResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The type definition PropertyObject. Returns NULL or 0 if the type definition does not exist. 
  //
  rpc GetTypeDefinition(Engine_GetTypeDefinitionRequest) returns (Engine_GetTypeDefinitionResponse);
  
  
  // Method: GetTypeNames
  //
  // Returns an array of all currently loaded type names.
  //
  // Engine_GetTypeNamesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_GetTypeNamesResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated string - An array of strings that contains the names of all currently loaded types. 
  //
  rpc GetTypeNames(Engine_GetTypeNamesRequest) returns (Engine_GetTypeNamesResponse);
  
  
  // Method: NewDataType
  //
  // Creates and returns a new TestStand data type.
  //
  // This method creates a PropertyObject object that is a data type. Once you create a data type, you can use the Engine.NewPropertyObject method to create an instance of the type. You can add the type to a TypeUsageList to associate the type with a particular PropertyObjectFile.
  // Note: TestStand does not validate data type names you create programmatically for invalid characters, such as spaces, which can result in errors when you use the data type. Use the TypeUsageList.ValidateNewTypeName method to validate type names. TestStand requires data type names to be strings that contain only letters, numbers, and underscores. Type names cannot duplicate type names already in memory.
  //
  // Engine_NewDataTypeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - ValueType: PropertyValueTypes - Specifies the type of value you want instances of the type to contain.
  //    - asArray: bool - Pass True if you want the type to be an array.
  //    - typeNameParam: string - If you pass PropValType_NamedType for the ValueType, pass the name of the type for this parameter. Otherwise, pass an empty string. If you pass a type name, the type must not already be in memory.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // Engine_NewDataTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The newly created data type. 
  //
  rpc NewDataType(Engine_NewDataTypeRequest) returns (Engine_NewDataTypeResponse);
  
  
  // Method: GetInsertStepMenuStructure
  //
  // Creates a PropertyObject object that specifies the structure of the menu used to insert steps in the sequence editor.
  //
  // The sequence editor uses this method to create the submenu that appears when you select Insert Step from the Steps pane context menu. The structure of this menu depends upon the types in the type palettes, the types in the sequence file, the default adapter, and the step type menu configuration. This method constructs a PropertyObject object that contains properties that specify the submenu structure.
  //
  // Engine_GetInsertStepMenuStructureRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - hiddenFlags: int32 - Pass a set of PropertyFlags that specify which step types are not included in the menu. For example, pass PropFlags_Hidden to exclude the hidden step types.
  //
  // Engine_GetInsertStepMenuStructureResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The object that specifies the menu structure. 
  //
  rpc GetInsertStepMenuStructure(Engine_GetInsertStepMenuStructureRequest) returns (Engine_GetInsertStepMenuStructureResponse);
  
  
  // Method: DisplayStepTypeMenuEditor
  //
  // Note: This method is obsolete. Use the Engine.DisplayStepTypeMenuEditorEx method instead.
  //
  // Launches a dialog box in which you can edit the order in which step types appear in the Insert Step submenu.
  //
  // Engine_DisplayStepTypeMenuEditorRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - forSubsteps: bool - Pass True when editing the menu information for substeps.
  //    - dlgOptions: int32 - Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWnd.
  //
  // Engine_DisplayStepTypeMenuEditorResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if you make modifications and click OK in the dialog box. Returns False if you click Cancel or make no modifications. 
  //
  rpc DisplayStepTypeMenuEditor(Engine_DisplayStepTypeMenuEditorRequest) returns (Engine_DisplayStepTypeMenuEditorResponse);
  
  
  // Method: LoadTypePaletteFiles
  //
  // Note: This method is obsolete. Use the Engine.LoadTypePaletteFilesEx method instead.
  //
  // Loads the TestStand Engine list of type palette files. Type palette files contain step type and data type definitions. LoadTypePaletteFiles is the method the sequence editor and user interfaces call on the TestStand Engine to load these files when they launch. You can call this method outside of the sequence editor or a user interface if an instance of the TestStand Engine has been created and the type palette files need to be loaded.
  //
  // Engine_LoadTypePaletteFilesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_LoadTypePaletteFilesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc LoadTypePaletteFiles(Engine_LoadTypePaletteFilesRequest) returns (Engine_LoadTypePaletteFilesResponse);
  
  
  // Method: UnloadTypePaletteFiles
  //
  // Unloads the TestStand Engine list of type palette files.
  //
  // Type palette files contain step type and data type definitions. UnloadTypePaletteFiles is the method the sequence editor and user interfaces call on the TestStand Engine to unload these files when they exit. If the Engine.LoadTypePaletteFilesEx method was previously called, call this method to unload the type palette files.
  //
  // Engine_UnloadTypePaletteFilesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_UnloadTypePaletteFilesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc UnloadTypePaletteFiles(Engine_UnloadTypePaletteFilesRequest) returns (Engine_UnloadTypePaletteFilesResponse);
  
  
  // Method: GetTypePaletteFileList
  //
  // Returns the list of currently loaded type palette files in the TestStand Engine.
  //
  // Type palette files contain step type and data type definitions. The TestStand Engine loads these files when the sequence editor and user interfaces launch.  Call this method to obtain the list of loaded type palettes.
  //
  // Engine_GetTypePaletteFileListRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_GetTypePaletteFileListResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated PropertyObjectFileInstance - An array of pointers to the PropertyObjectFile interfaces of the loaded type palette files. 
  //
  rpc GetTypePaletteFileList(Engine_GetTypePaletteFileListRequest) returns (Engine_GetTypePaletteFileListResponse);
  
  
  // Method: SetTypePaletteFileList
  //
  // Sets the list of currently loaded type palette files in the TestStand Engine.
  //
  // Type palette files contain step type and data type definitions. The TestStand Engine loads these files when the sequence editor and user interfaces launch. Call this method to change the list of loaded type palettes. If the TestStand Engine already has type palette files loaded and they are not in the new list, TestStand unloads the files.
  //
  // Engine_SetTypePaletteFileListRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - typePaletteFiles: repeated PropertyObjectFileInstance - Specifies an array of pointers to the PropertyObjectFile interfaces of the type palette files. Build the array by calling the Engine.NewPropertyObjectFile and PropertyObjectFile.ReadFile methods for each type palette.
  //
  // Engine_SetTypePaletteFileListResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetTypePaletteFileList(Engine_SetTypePaletteFileListRequest) returns (Engine_SetTypePaletteFileListResponse);
  
  
  // Method: GetToolMenuStructure
  //
  // Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.
  //
  // Obtains a PropertyObject object that specifies the structure of the Tools menu. Note: You must call the Engine.ConstructToolMenus method before calling this function.
  // You can use this method to obtain information about the Tools menu items instead of using the Engine.GetNumToolMenus, Engine.GetNumToolMenuItems, Engine.GetToolMenuItemInfoEx, and Engine.GetToolMenuItemInfoWithIDEx methods.
  //
  // Engine_GetToolMenuStructureRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_GetToolMenuStructureResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The object that specifies the menu structure. See MenuItemProperties for a description of this property object. 
  //
  rpc GetToolMenuStructure(Engine_GetToolMenuStructureRequest) returns (Engine_GetToolMenuStructureResponse);
  
  
  // Method: GetResourceSymbols
  //
  // Returns a list of symbols from the TestStand string resource file for the current language.
  //
  // You specify the categories,  which are the sections in the string resource file.
  // The string resource files are located in the <TestStand>\Components\Language and "<TestStand Public>\Components\Language directories. You can customize the strings in the resource files in the <TestStand>\Components\Language directory by adding a section and item with the same name to the corresponding file in the <TestStand Public>\Components\Language directory.
  //
  // Engine_GetResourceSymbolsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - section: string - Specifies the category or section label.
  //
  // Engine_GetResourceSymbolsResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated string - An array of strings that contains the names of all the symbols under the given category. 
  //
  rpc GetResourceSymbols(Engine_GetResourceSymbolsRequest) returns (Engine_GetResourceSymbolsResponse);
  
  
  // Method: CheckExpression
  //
  // Checks the validity of the expression parameter and returns error information.
  //
  // This method is similar to the Engine.CheckExprSyntax method, except it checks the validity of variables in the expression.
  //
  // Engine_CheckExpressionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - evaluationContext: PropertyObjectInstance - Specifies the context in which to evaluate the expression. This method uses this object to determine whether variables in the expression are valid. If you pass a NULL reference, this method checks only the expression syntax.
  //    - expressionStr: string - Specifies the expression to check.
  //
  // Engine_CheckExpressionResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if the expression is correct. Returns False if the expression contains an error. If it returns False, check the errorDescription, startErrPos, and endErrPos parameters for more information. 
  //    - errorDescription: strin - When an error exists, this parameter returns an error message describing the type of error.
  //    - startErrPos: int3 - When an error exists, this parameter returns the index of the location in the string where the error begins.
  //    - endErrPos: int3 - When an error exists, this parameter returns the index of the location in the string of the first character beyond the error.
  //
  rpc CheckExpression(Engine_CheckExpressionRequest) returns (Engine_CheckExpressionResponse);
  
  
  // Method: LocalizeExpression
  //
  // Converts an expression string to conform to the localization settings for the computer.
  //
  // Call this method to localize an expression before you display it. The method replaces the periods that represent decimal points in the expression with the localized decimal point character. If the localized decimal point character is the comma character, the method also replaces commas that represent argument or expression separators with semicolons. The method does not change periods used as property field separators or any characters inside string constants.
  //
  // Engine_LocalizeExpressionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - expressionString: string - Specifies an unlocalized expression string to convert.
  //    - decimalPointOption: DecimalPointLocalizationOptions - Constant that specifies how the method determines which character is the localized decimal point that it uses to localize the expression.
  //
  // Engine_LocalizeExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - String containing the localized expression. 
  //
  rpc LocalizeExpression(Engine_LocalizeExpressionRequest) returns (Engine_LocalizeExpressionResponse);
  
  
  // Method: DelocalizeExpression
  //
  // Converts a localized expression string to a standard form suitable for evaluation.
  //
  // TestStand requires expressions it evaluates through the expression function Evaluate or the PropertyObject.EvaluateEx method to be in a standard, non-localized form so the result of the evaluation does not depend on the localization settings of the computer.
  // Call this method to delocalize expressions you obtain from user input. The method replaces the localized decimal point characters that represent decimal points in the expression with the period character. If the localized decimal point character is the comma character, the method also replaces semicolons that represent argument separators or expression separators with commas. The method does not change characters inside string constants.
  //
  // Engine_DelocalizeExpressionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - localizedExpressionString: string - Specifies the localized expression string to convert.
  //    - decimalPointOption: DecimalPointLocalizationOptions - Pass a constant that specifies how the method determines which character the localized expression uses for the localized decimal point.
  //
  // Engine_DelocalizeExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - A string containing the delocalized expression. 
  //
  rpc DelocalizeExpression(Engine_DelocalizeExpressionRequest) returns (Engine_DelocalizeExpressionResponse);
  
  
  // Method: GetLocalizedDecimalPoint
  //
  // Returns the localized decimal point character.
  //
  // Engine_GetLocalizedDecimalPointRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - decimalPointOption: DecimalPointLocalizationOptions - A constant that specifies how the method determines which character is the localized decimal point character.
  //
  // Engine_GetLocalizedDecimalPointResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - A string that contains the localized decimal point character. 
  //
  rpc GetLocalizedDecimalPoint(Engine_GetLocalizedDecimalPointRequest) returns (Engine_GetLocalizedDecimalPointResponse);
  
  
  // Method: DisplayMessageBox
  //
  // Launches a message dialog box.
  //
  // Calling this method on a remote instance of the engine displays the message on the local computer.
  //
  // Engine_DisplayMessageBoxRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - messageText: string - Specifies the text to display in the message box.
  //    - msgBoxType: MsgBoxTypes - Specifies the type of message box. This tells the message box which icon to display.
  //    - dlgOptions: int32 - Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWnd.
  //    - win32Flags: int32 - Specifies any additional flags the Windows SDK MessageBox function allows.
  //
  // Engine_DisplayMessageBoxResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the user response. This is the same as the return value from the Microsoft Windows Software Development Kit MessageBox function. The following are typical values: IDOK (1), IDCANCEL (2), IDYES (6), IDNO (7). 
  //
  rpc DisplayMessageBox(Engine_DisplayMessageBoxRequest) returns (Engine_DisplayMessageBoxResponse);
  
  
  // Method: GetToolMenuItemInfoEx
  //
  // Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.
  //
  // Returns information about a Tools menu item, which you specify with a menu index and an item index.
  // Use this information when constructing a Tools menu in a user interface. You must call the Engine.ConstructToolMenus method before calling this function.
  //
  // Engine_GetToolMenuItemInfoExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - menuIndex: int32 - Specifies a zero-based index for a Tools menu or submenu.
  //    - itemIndex: int32 - Specifies a zero-based index for an item within the menu or submenu.
  //
  // Engine_GetToolMenuItemInfoExResponse - The response message from the server. It provides the output parameters.
  //    - itemText: strin - Returns the text to display in the menu item.
  //    - subMenuIndex: int3 - If the item is a submenu, this parameter returns the zero-based menu index of the Tools menu for the item. Otherwise, it returns -1.
  //    - itemAttributes: int3 - The bitwise-OR combination of one or more ToolMenuItemAttributes constants. Use the bitwise-AND operator to determine whether an item has a specific attribute.
  //    - uniqueItemID: int3 - Returns a unique ID to identify the menu item. Use this ID to invoke the Tools menu item or to obtain the menu item information again at a later time.
  //
  rpc GetToolMenuItemInfoEx(Engine_GetToolMenuItemInfoExRequest) returns (Engine_GetToolMenuItemInfoExResponse);
  
  
  // Method: GetToolMenuItemInfoWithIDEx
  //
  // Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.
  //
  // Returns information about a Tools menu item, which you specify with a unique Tools menu item ID.
  // The information returned is useful for constructing a Tools menu in a user interface. You must call the Engine.ConstructToolMenus method before calling this function.
  //
  // Engine_GetToolMenuItemInfoWithIDExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - uniqueItemID: int32 - Specifies the Tools menu item ID you obtain from the Engine.GetToolMenuItemInfoEx method or the Menu_ToolIDProp property on the object the  Engine.GetToolMenuStructure method returns.
  //
  // Engine_GetToolMenuItemInfoWithIDExResponse - The response message from the server. It provides the output parameters.
  //    - itemText: strin - Returns the text to display in the menu item.
  //    - subMenuIndex: int3 - If the item is a submenu, this parameter returns the zero-based menu index of the Tools menu for the item. Otherwise, it returns -1.
  //    - itemAttributes: int3 - The bitwise-OR combination of one or more ToolMenuItemAttributes constants. Use the bitwise-AND operator to determine whether an item has a specific attribute.
  //
  rpc GetToolMenuItemInfoWithIDEx(Engine_GetToolMenuItemInfoWithIDExRequest) returns (Engine_GetToolMenuItemInfoWithIDExResponse);
  
  
  // Method: NewPropertyObjectFile
  //
  // Creates and returns a new PropertyObjectFile object.
  //
  // Use this method to create type palette files, workspace files, project files, sequence files, and generic property object files. You cannot create a users file, configuration file, or a station globals file using this method.
  //
  // Engine_NewPropertyObjectFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_NewPropertyObjectFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectFileInstance - The return type of the PropertyObjectFile object.
  //
  rpc NewPropertyObjectFile(Engine_NewPropertyObjectFileRequest) returns (Engine_NewPropertyObjectFileResponse);
  
  
  // Method: NewStepType
  //
  // Creates and returns a new StepType object.
  //
  // You must specify the name of the new step type by setting the StepType.Name property. You can add the type to a TypeUsageList object to associate the type with a particular PropertyObjectFile object. Once you create the step type, you can use the Engine.NewStep method to create an instance of the type.
  // Note: TestStand does not validate step type names you create programmatically for invalid characters, such as spaces, which can result in errors when you use the data type. Use the TypeUsageList.ValidateNewTypeName method to validate step type names. TestStand requires step type names to be strings that contain only letters, numbers, and underscores. Step type names cannot contain spaces, start with a number, or be empty. Additionally, You cannot duplicate step type names already in memory.
  //
  // Engine_NewStepTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_NewStepTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepTypeInstance - The return type of the StepType object.
  //
  rpc NewStepType(Engine_NewStepTypeRequest) returns (Engine_NewStepTypeResponse);
  
  
  // Method: AddImage
  //
  // Adds an image to the list of images the engine maintains.
  //
  // The engine maintains lists of images for all the icons from the <TestStand>\Components\Icons and <TestStand Public>\Components\Icons directories and images you add using this method. This method adds an image to the engine image lists and the Images collection.
  //
  // Engine_AddImageRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - image: IPictureDispInstance - Must specify an icon image.
  //    - imageName: string - Specifies the name to associate with the image. The name must be unique among all images.
  //
  // Engine_AddImageResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - The index of the added image. 
  //
  rpc AddImage(Engine_AddImageRequest) returns (Engine_AddImageResponse);
  
  
  // Method: GetSequenceFileEx
  //
  // Returns the SequenceFile object for the sequence file the sequenceFilePath parameter specifies.
  //
  // Loads the sequence file from disk, if necessary. Call the Engine.ReleaseSequenceFileEx method on this object before releasing it.
  // This method loads the sequence file into the internal cache of the engine and adds a load reference to the sequence file. TestStand uses the load reference count to determine when to unload the sequence file from the internal cache of the engine. In addition to this method, the SequenceFile.AddLoadReference and Engine.NewSequenceFile methods add a load reference to the sequence file. The Engine.ReleaseSequenceFileEx method removes a load reference.
  // You must call the Engine.ReleaseSequenceFileEx method for each load reference you add to the sequence file. When you release the last load reference, TestStand unloads the file from the internal cache of the engine. While unloading the file from the cache, TestStand executes the SequenceFileUnload callback sequence, if applicable.
  // You can use the SequenceAdapter.GetSequenceFile method to examine the contents of a sequence file without running load and unload callbacks, without preloading modules, and without merging types.
  // You can use the GetSeqFile_GetFileOnlyIfInCache option with this method to determine whether a sequence file is already loaded in the engine internal cache.
  //
  // Engine_GetSequenceFileExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - seqFilePath: string - Specifies the pathname of the sequence file. If the pathname is relative, this method tries to find it in the current directory, unless you specify the GetSeqFile_FindFile option.
  //    - getSeqFileFlags: int32 - Specifies one or more GetSeqFileOptions constants. Use the bitwise-OR operator to specify multiple sequence file flags.
  //    - handlerType: TypeConflictHandlerTypes - Specifies how to handle type conflicts.
  //
  // Engine_GetSequenceFileExResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFileInstance - A SequenceFile object. 
  //
  rpc GetSequenceFileEx(Engine_GetSequenceFileExRequest) returns (Engine_GetSequenceFileExResponse);
  
  
  // Method: ShutDown
  //
  // Attempts to close all open sequence files and terminate all executions.
  //
  // If you are writing a user interface that does not use the TestStand User Interface (UI) Controls, call this function before exiting the application.
  // TestStand sends a UIMsg_ShutDownComplete message to notify you when the shut down is complete.
  //
  // Engine_ShutDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - final: bool - Pass True when performing the final shutdown before exiting the application. Passing False permits the user to cancel shutdown when executions are running.
  //
  // Engine_ShutDownResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ShutDown(Engine_ShutDownRequest) returns (Engine_ShutDownResponse);
  
  
  // Method: GetSequenceFile
  //
  // Note: This method is obsolete. Use the Engine.GetSequenceFileEx method instead.
  //
  // Returns the SequenceFile object for the sequence file the sequenceFilePath parameter specifies.
  //
  // Engine_GetSequenceFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - seqFilePath: string - Specifies the pathname of the sequence file.
  //    - getSeqFileFlags: int32 - Specifies one or more GetSeqFileOptions constants. Use the bitwise-OR operator to specify multiple sequence file flags.
  //
  // Engine_GetSequenceFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFileInstance - A SequenceFile object. 
  //
  rpc GetSequenceFile(Engine_GetSequenceFileRequest) returns (Engine_GetSequenceFileResponse);
  
  
  // Method: NewSequenceFile
  //
  // Creates and returns a new SequenceFile object.
  //
  // Call the Engine.ReleaseSequenceFileEx method on this object before you release it.
  // This method stores the new sequence file in the internal cache of the engine and adds a load reference to the sequence file. TestStand uses the load reference count to determine when to unload the sequence file from the internal cache of the engine. In addition to this method, the SequenceFile.AddLoadReference and Engine.GetSequenceFileEx methods add a load reference to the sequence file. The Engine.ReleaseSequenceFileEx method removes a load reference.
  // You must call Engine.ReleaseSequenceFileEx for each load reference you add to the sequence file. When you release the last load reference, TestStand unloads the file from the internal cache of the engine. While unloading the file from the internal cache of the engine, TestStand executes the SequenceFileUnload callback sequence, if applicable.
  //
  // Engine_NewSequenceFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_NewSequenceFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFileInstance - The return type of the SequenceFile object.
  //
  rpc NewSequenceFile(Engine_NewSequenceFileRequest) returns (Engine_NewSequenceFileResponse);
  
  
  // Method: ReleaseSequenceFile
  //
  // Note: This method is obsolete. Use the Engine.ReleaseSequenceFileEx method instead.
  //
  // Releases the SequenceFile object from the Engine internal cache.
  // Note: Calling this method does not release the ActiveX reference to the sequence file.
  //
  // Engine_ReleaseSequenceFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - sequenceFileToRelease: SequenceFileInstance - Pass a reference to the sequence file to release.
  //
  // Engine_ReleaseSequenceFileResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ReleaseSequenceFile(Engine_ReleaseSequenceFileRequest) returns (Engine_ReleaseSequenceFileResponse);
  
  
  // Method: NewSequence
  //
  // Creates and returns a new Sequence object.
  //
  // Pass the new Sequence object to the SequenceFile.InsertSequenceEx method to add a sequence to a sequence file.
  // Note: TestStand does not validate sequence names you create programmatically for invalid characters, such as spaces, which can result in errors when you use expressions. Use the PropertyObject.ValidateNewElementName method to validate sequence names. Names of sequences in a PropertyObject array can contain any character. However, sequence names cannot be empty or contain control characters. You cannot have duplicate sequence names.
  //
  // Engine_NewSequenceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_NewSequenceResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceInstance - The return type of the Sequence object.
  //
  rpc NewSequence(Engine_NewSequenceRequest) returns (Engine_NewSequenceResponse);
  
  
  // Method: NewStep
  //
  // Creates and returns a new Step object.
  //
  // Pass the new Step object to the Sequence.InsertStep method to add a step to a sequence.
  // When you use this method to create a new Step object, the step name is empty. You can use the following code snippet to set the default name of the new step:
  // Step.Name = Step.StepType.AsPropertyObject.EvaluateEx(Step.StepType.DefaultNameExpr, EvalOption_DoNotAlterValues).GetValString("", 0)Note: TestStand does not validate step names you create programmatically for invalid characters. Use the PropertyObject.ValidateNewElementName method to validate step names. Step names in a sequence can contain any character.
  //
  // Engine_NewStepRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - adapterKeyNameVal: string - Specifies the key name of the module Adapter object to use to create the step. Pass an empty string to use the adapter the step type designates or, if the step has no designated adapter, to use the adapter the Engine.DefaultAdapter property specifies.
  //    - stepTypeName: string - Specifies the name of the step type with which to create the step. The step type must already be in memory. The sequence editor and custom user interfaces load step types into memory when calling the Engine.LoadTypePaletteFilesEx method or when loading a sequence file from disk. To create a new step type, use the Engine.NewStepType method.
  //
  // Engine_NewStepResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepInstance - The return type of the Step object.
  //
  rpc NewStep(Engine_NewStepRequest) returns (Engine_NewStepResponse);
  
  
  // Method: NewUser
  //
  // Creates and returns a new User object.
  //
  // Typically, only the sequence editor uses this method.
  //
  // Engine_NewUserRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - userProfile: UserInstance - Specifies a User object with which to create the new user. The new user inherits the privileges from the User object the userProfile parameter specifies. The new user is not added as a member of any user groups of which the User object is a member.
  //      Pass a NULL reference if you want to create a NewUser object without using a user profile. The new user inherits the default values as specified by the User standard data type.
  //      You can obtain user groups using the Engine.GetUserGroup method.
  //
  // Engine_NewUserResponse - The response message from the server. It provides the return value.
  //    - returnValue: UserInstance - The return type of the User object.
  //
  rpc NewUser(Engine_NewUserRequest) returns (Engine_NewUserResponse);
  
  
  // Method: UserNameExists
  //
  // Returns True if a user with a specific login name exists.
  //
  // Engine_UserNameExistsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_UserNameExistsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc UserNameExists(Engine_UserNameExistsRequest) returns (Engine_UserNameExistsResponse);
  
  
  // Method: GetUser
  //
  // Obtains the User" object that contains a specific login name.
  //
  // Returns NULL if no User object has the specified login name.
  //
  // Engine_GetUserRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_GetUserResponse - The response message from the server. It provides the return value.
  //    - returnValue: UserInstance - The return type of the User object.
  //
  rpc GetUser(Engine_GetUserRequest) returns (Engine_GetUserResponse);
  
  
  // Method: CurrentUserHasPrivilege
  //
  // Confirms whether the current user or any user group of which the user is a member has a specific privilege.
  //
  // Returns True when the privilege property is True, when the privilege property of any group that contains the privilege is True, or when privilege checking is disabled, the StationOptions.EnableUserPrivilegeChecking property is False. If privilege checking is disabled but the StationOptions.RequireUserLogin property is True, this function returns True only if a user is currently logged on.
  //
  // Engine_CurrentUserHasPrivilegeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - privilegeName: string - Specifies the name of the privilege to check. You can specify the name of any privilege property. You can specify the full privilege path in the user privileges property view, such as Debug.RunSelectedTests, or you can specify the base privilege name, such as RunSelectedTests. If you specify only the base privilege name and more than one instance of the base privilege name exists, the method returns the value of the first base privilege it finds with that name. You can pass "*" as the string argument to determine whether a user is currently logged in.
  //
  // Engine_CurrentUserHasPrivilegeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the current user has the privilege. 
  //
  rpc CurrentUserHasPrivilege(Engine_CurrentUserHasPrivilegeRequest) returns (Engine_CurrentUserHasPrivilegeResponse);
  
  
  // Method: GetUserProfile
  //
  // Note: This method is obsolete. Use Engine.GetUserGroup method instead.
  //
  // Obtains the User" object that contains a specific user profile. Returns NULL if the user profile does not exist.
  // The user profile is a template for an actual user. Pass the user profile object to the Engine.NewUser method to create a new user.
  //
  // Engine_GetUserProfileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - userProfileName: string - Specifies the name of the user profile to return.
  //
  // Engine_GetUserProfileResponse - The response message from the server. It provides the return value.
  //    - returnValue: UserInstance - The return type of the User object.
  //
  rpc GetUserProfile(Engine_GetUserProfileRequest) returns (Engine_GetUserProfileResponse);
  
  
  // Method: GetAdapter
  //
  // Returns a module Adapter object from the list of module adapters.
  //
  // Each adapter defines a module-specific adapter interface. You must obtain the module-specific adapter interface for an Adapter class object to configure the adapter.
  //
  // Engine_GetAdapterRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - adapterIndex: int32 - Specifies a zero-based index for the Adapter object to return. You can obtain the number of Adapter objects from the Engine.NumAdapters property. To obtain a reference to a specific adapter, or to iterate through the adapters in a specific order, use the Engine.GetAdapterByKeyName method instead.
  //
  // Engine_GetAdapterResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdapterInstance - The return type of the Adapter object.
  //
  rpc GetAdapter(Engine_GetAdapterRequest) returns (Engine_GetAdapterResponse);
  
  
  // Method: NewExecution
  //
  // Creates and returns a new Execution object.
  //
  // When you call this method, the execution begins immediately.
  // Sequence editor and user interface programs use this method to run sequences.
  // You can  pass parameters as arguments to this method when executing an entry point or sequence.
  //
  // Engine_NewExecutionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - sequenceFileParam: SequenceFileInstance - Specifies the SequenceFile object that contains the sequence to execute. If the execution uses a process model, pass the client SequenceFile object.
  //    - sequenceNameParam: string - Specifies the name of the sequence or Process Model entry point to execute.
  //    - processModelParam: SequenceFileInstance - Pass the process model SequenceFile object if you want to execute a Process Model entry point. Otherwise, a NULL object reference in LabVIEW, 0 in LabWindows/CVI, or the Nothing keyword in Visual Basic, pass a NULL dispatch pointer in Microsoft Foundation Classes.
  //    - breakAtFirstStep: bool - Pass True to suspend execution before executing the first step.
  //    - executionTypeMaskParam: int32 - Pass 0 for the default behavior or pass one or more ExecutionTypeMask constants. Use the bitwise-OR operator to pass multiple constants.
  //    - sequenceArgsParam: ObjectInstance - Specifies a PropertyObject object that contains the arguments to the sequence you want to execute. Each subproperty of the PropertyObject object represents a parameter to the sequence. The subproperties must appear in the same order as the sequence parameters.
  //    - editArgsParam: ObjectInstance - Specifies an EditArgs object that indicates which items are currently selected in the user interface. This is required only for Process Model entry points.
  //    - InteractiveArgsParam: ObjectInstance - Specifies an InteractiveArgs object that indicates which steps are currently selected in the user interface and contains looping information necessary for an interactive execution. Pass this parameter only for interactive executions.
  //
  // Engine_NewExecutionResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionInstance - The return type of the Execution object.
  //
  rpc NewExecution(Engine_NewExecutionRequest) returns (Engine_NewExecutionResponse);
  
  
  // Method: CallFrontEndCallback
  //
  // Note: This method is obsolete. Use the Engine.CallFrontEndCallbackEx method instead.
  //
  // Calls the Front-End callback sequence specified by sequenceName.
  //
  // Engine_CallFrontEndCallbackRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - sequenceNameParam: string - Specifies the name of the Front-End callback sequence to call.
  //    - argumentList: PropertyObjectInstance - Specifies a PropertyObject object that contains the parameters to pass to the sequence. Each subproperty of the PropertyObject object represents a parameter to the sequence. The subproperties must appear in the same order as the sequence parameters.
  //
  // Engine_CallFrontEndCallbackResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionInstance - The Execution object of the newly created execution. 
  //
  rpc CallFrontEndCallback(Engine_CallFrontEndCallbackRequest) returns (Engine_CallFrontEndCallbackResponse);
  
  
  // Method: AbortAll
  //
  // Aborts all existing executions.
  //
  // Engine_AbortAllRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_AbortAllResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc AbortAll(Engine_AbortAllRequest) returns (Engine_AbortAllResponse);
  
  
  // Method: BreakAll
  //
  // Suspends all existing executions.
  //
  // Engine_BreakAllRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_BreakAllResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc BreakAll(Engine_BreakAllRequest) returns (Engine_BreakAllResponse);
  
  
  // Method: TerminateAll
  //
  // Terminates all existing executions.
  //
  // Engine_TerminateAllRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_TerminateAllResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc TerminateAll(Engine_TerminateAllRequest) returns (Engine_TerminateAllResponse);
  
  
  // Method: GetRemoteExecutorInterface
  //
  // 
  //
  // Engine_GetRemoteExecutorInterfaceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_GetRemoteExecutorInterfaceResponse - The response message from the server. It provides the return value.
  //    - returnValue: RExecutorInstance - Specifies 
  //
  rpc GetRemoteExecutorInterface(Engine_GetRemoteExecutorInterfaceRequest) returns (Engine_GetRemoteExecutorInterfaceResponse);
  
  
  // Method: NewInteractiveArgs
  //
  // Creates and returns an InteractiveArgs object.
  //
  // You can pass the object this method returns as a parameter to one of the following methods: Engine.NewExecution, Engine.NewHierarchicalExecution, or Thread.DoInteractiveExecution.
  //
  // Engine_NewInteractiveArgsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_NewInteractiveArgsResponse - The response message from the server. It provides the return value.
  //    - returnValue: InteractiveArgsInstance - The return type of the InteractiveArgs object.
  //
  rpc NewInteractiveArgs(Engine_NewInteractiveArgsRequest) returns (Engine_NewInteractiveArgsResponse);
  
  
  // Method: NewEditArgs
  //
  // Creates and returns an EditArgs object.
  //
  // You can pass the object this method returns as a parameter to one of the following methods: Engine.NewExecution, Engine.NewHierarchicalExecution, Engine.GetEditTimeToolMenuItems, Engine.GetRunTimeToolMenuItems, Engine.NewEditContext, Sequence.EvalEntryPointNameExpressionEx, Sequence.EvalEntryPointEnabledExpressionEx, and RunTimeMenuItem.InvokeItem.
  //
  // Engine_NewEditArgsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_NewEditArgsResponse - The response message from the server. It provides the return value.
  //    - returnValue: EditArgsInstance - The return type of the EditArgs object.
  //
  rpc NewEditArgs(Engine_NewEditArgsRequest) returns (Engine_NewEditArgsResponse);
  
  
  // Method: NewPropertyObject
  //
  // Creates and returns a new PropertyObject object.
  //
  // TestStand does not validate property names you create programmatically for invalid characters, such as spaces, which can result in errors when you use expressions. Use the PropertyObject.ValidateNewName, PropertyObject.ValidateNewSubPropertyName, or PropertyObject.ValidateNewElementName methods to validate property names. TestStand expressions require PropertyObject names to be strings that contain only letters, numbers, and underscores. PropertyObject names cannot contain spaces, start with a number, or be empty.
  // Additionally, the PropertyObject name cannot be Value, and you cannot have duplicate subproperty names.
  // For example, MyVariableName_2000 is a valid PropertyObject name.
  // Names of elements in a PropertyObject array can contain any character. Both sequence names and step names are examples of such named array elements. However, sequence names cannot be empty or contain control characters. You cannot have duplicate sequence names. The name NI is reserved at the root level for attributes.
  //
  // Engine_NewPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - ValueType: PropertyValueTypes - Specifies the type of value you want the property to contain.
  //    - asArray: bool - Pass True if you want the property value to be an array.
  //    - typeNameParam: string - If you pass PropValType_NamedType for the ValueType parameter, pass the name of the type for this parameter. Otherwise, pass an empty string. If you pass a type name, the type must already be in memory. Refer to NamedPropertyTypes for a list of built-in name types.
  //    - options: int32 - Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  //
  // Engine_NewPropertyObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The return type of the PropertyObject object.
  //
  rpc NewPropertyObject(Engine_NewPropertyObjectRequest) returns (Engine_NewPropertyObjectResponse);
  
  
  // Method: RegisterUIMessageCallback
  //
  // Note: This method is obsolete. Use the Engine.RegisterUIMessageCallbackEx method instead. Calling this method on a 64-bit instance of the TestStand Engine results in an error.
  //
  // Registers a C function as the user interface message event callback.
  // Note: National Instruments recommends using the Application Manager control with the ApplicationMgr.AfterUIMessageEvent and ApplicationMgr.UIMessageEvent events as needed. Refer to the example user interface applications TestStand provides, located in the <TestStand>\UserInterfaces directory.
  // You can use a C function as the Event callback, instead of using ActiveX events or polling. Ensure the Engine.UIMessagePollingEnabled property is False or TestStand does not call the callback.
  // The callback function must use the following C function prototype:
  // void __cdecl UIMessageCallback(struct IDispatch *UIMessageDisp);
  // The UIMessageDisp parameter is the IDispatch pointer to a UIMessage object. Because this pointer is passed to the callback as a parameter, do not release it when you finish using it.
  // Note: Use this method only inside of the sequence editor or user interface.
  //
  // Engine_RegisterUIMessageCallbackRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - callbackFuncAddr: int32 - Specifies the address of the callback function.
  //
  // Engine_RegisterUIMessageCallbackResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc RegisterUIMessageCallback(Engine_RegisterUIMessageCallbackRequest) returns (Engine_RegisterUIMessageCallbackResponse);
  
  
  // Method: GetUIMessage
  //
  // Obtains the next available message from the queue.
  //
  // Use this method to poll for UIMessages.
  //
  // Engine_GetUIMessageRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_GetUIMessageResponse - The response message from the server. It provides the return value.
  //    - returnValue: UIMessageInstance - The return type of the UIMessage object.
  //
  rpc GetUIMessage(Engine_GetUIMessageRequest) returns (Engine_GetUIMessageResponse);
  
  
  // Method: DisplayLoginDialog
  //
  // Launches a login dialog box.
  //
  // A drop-down list box in the dialog box contains the login names of all current TestStand users.
  // The LoginLogout Front-End callback calls this method.
  //
  // Engine_DisplayLoginDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - initialLoginName: string - Specifies the initial login name you want displayed in the dialog box. If you pass an empty string, the first login name in the ring control is selected.
  //    - initialPassword: string - Specifies the initial password you want displayed in the dialog box. It appears on screen as all asterisks (*).
  //    - modalToAppMainWind: bool - By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  //
  // Engine_DisplayLoginDialogResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if you click OK in the dialog box. Returns False if you click Cancel. 
  //    - userObject: UserInstanc - Returns the User object that represents the user who logged in.
  //
  rpc DisplayLoginDialog(Engine_DisplayLoginDialogRequest) returns (Engine_DisplayLoginDialogResponse);
  
  
  // Method: DisplayEditUserDialog
  //
  // Launches a dialog box in which you can edit user information for a specific user. You can edit the name, comment, and password.
  //
  // Calling the PropertyObject.DisplayPropertiesDialog method on a User object and passing default dialog options is equivalent to calling this method.
  //
  // Engine_DisplayEditUserDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - userObject: UserInstance - Specifies the User object you want to edit.
  //    - modalToAppMainWind: bool - By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle the Engine.AppMainHwnd property returns. Typically, you do not need to set this option.
  //
  // Engine_DisplayEditUserDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if you click OK in the dialog box. Returns False if you click Cancel. 
  //
  rpc DisplayEditUserDialog(Engine_DisplayEditUserDialogRequest) returns (Engine_DisplayEditUserDialogResponse);
  
  
  // Method: DisplayNewUserDialog
  //
  // Launches a dialog box for creating a new user.
  //
  // Engine_DisplayNewUserDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - modalToAppMainWind: bool - By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  //
  // Engine_DisplayNewUserDialogResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if you click OK in the dialog box. Returns False if you click Cancel. 
  //    - userObject: UserInstanc - Returns the User object that represents the newly created user.
  //
  rpc DisplayNewUserDialog(Engine_DisplayNewUserDialogRequest) returns (Engine_DisplayNewUserDialogResponse);
  
  
  // Method: DisplaySearchDirDialog
  //
  // Launches a dialog box in which you can edit the list of TestStand search directories.
  //
  // Engine_DisplaySearchDirDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - readOnly: bool - Pass True if you want a read-only version of the dialog box.
  //    - modalToAppMainWind: bool - By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  //
  // Engine_DisplaySearchDirDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if you make modifications and click OK in the dialog box. Returns False if you click Cancel or make no modifications. 
  //
  rpc DisplaySearchDirDialog(Engine_DisplaySearchDirDialogRequest) returns (Engine_DisplaySearchDirDialogResponse);
  
  
  // Method: DisplayOptionsDialog
  //
  // Launches the Station Options dialog box.
  //
  // The Station Options dialog box contains numerous settings that affect execution, user privileges, and process models. Click OK in the dialog box to save these options in the engine configuration file Engine.ConfigFile property.
  //
  // Engine_DisplayOptionsDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - readOnly: bool - Pass True if you want a read-only version of the dialog box.
  //    - modalToAppMainWind: bool - By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle the Engine.AppMainHwnd property returns. Typically, you do not need to set this option.
  //
  // Engine_DisplayOptionsDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if you click OK in the dialog box. Returns False if you click Cancel. 
  //
  rpc DisplayOptionsDialog(Engine_DisplayOptionsDialogRequest) returns (Engine_DisplayOptionsDialogResponse);
  
  
  // Method: DisplayRunTimeErrorDialog
  //
  // Note: This method is obsolete. Use the Engine.DisplayRunTimeErrorDialogEx method instead.
  //
  // Launches the Run-Time Error dialog box. The sequence editor and user interface typically call this function in response to a UIMsg_BreakOnRunTimeError event. The Run-Time Error dialog box allows the user to specify how the execution is to proceed.
  //
  // Engine_DisplayRunTimeErrorDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - errorMessage: string - Specifies the error message to display in the dialog box.
  //    - inCleanupStepGroup: bool - Pass True if the run-time error occurred in the Cleanup step group of the sequence. This information affects the list of options the dialog box displays to the user.
  //    - modalToAppMainWind: bool - By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  //
  // Engine_DisplayRunTimeErrorDialogResponse - The response message from the server. It provides the output parameters.
  //    - displayOnNextError: boo - Returns a value that indicates whether the user wants this dialog box to launch again if another run-time error occurs in the current execution.
  //    - suspendExecution: boo - Returns a value that indicates whether the user wants the current execution to suspend at the location of the run-time error.
  //    - runTimeErrorAction: RTEOption - Returns the option the user selects in the dialog box to specify how the execution should proceed.
  //
  rpc DisplayRunTimeErrorDialog(Engine_DisplayRunTimeErrorDialogRequest) returns (Engine_DisplayRunTimeErrorDialogResponse);
  
  
  // Method: DisplayOpenFileDialog
  //
  // Note: This method is obsolete. Use the Engine.DisplayFileDialog method instead.
  //
  // Launches a dialog box in which the user can select a file. The user can choose whether the dialog box returns an absolute or relative pathname for the file. The dialog box can only return a relative pathname when the file is located under one of the TestStand search directories. If the file is not located under any of the TestStand search directories and the user requests that the dialog box return a relative pathname, the dialog box prompts the user to add the name of the directory that contains the file to the list of TestStand search directories. You can pass a sequence file object to include the directory among the list of valid search directories for a relative pathname.
  //
  // Engine_DisplayOpenFileDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - okButtonText: string - Specifies a string to display on the OK button. Pass an empty string to use the default.
  //    - initialPath: string - Specifies the path of the directory you want the user to browse initially. Pass an empty string to specify the current directory.
  //    - modalToAppMainWind: bool - By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle that the Engine.AppMainHwnd property returns. Typically, you do not need to set this option.
  //    - openFileDialogFlags: int32 - Pass 0 for the default behavior, or pass one or more OpenFileDialogOptions constants. Use the bitwise-OR operator to specify multiple flags.
  //    - defaultExtension: string - Specifies the extension to append to the pathname if the user specifies no extension. Do not include the period in the extension.
  //    - win32Flags: int32 - Specifies the WindowsFileDialogFlags.
  //    - fileFilter: string - Specifies the extensions files must have to appear in the dialog box. Each filter the string contains has two parts. The first part is a descriptive name for the filter and the second part lists the extensions the file can have. Specify multiple extensions using a semi-colon (;) as a delimiter, and end each section with a vertical bar (|). End the string with a final vertical bar (|). The following example illustrates this format:
  //      "Sequence Files (*.seq)|*.seq|Report Files (*.txt;*.htm;*.html)|*.txt;*.htm;*.html||"
  //    - currentSequenceFile: ObjectInstance - Specifies a SequenceFile object if you want to include the directory of the sequence file in the list of valid search directories for a relative pathname.
  //
  // Engine_DisplayOpenFileDialogResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if you click OK in the dialog box. Returns False if you click Cancel. 
  //    - selectedPath: strin - Returns the pathname the user specifies in the dialog box. The path can be relative.
  //    - absolutePath: strin - Returns the absolute pathname of the file the user selects.
  //
  rpc DisplayOpenFileDialog(Engine_DisplayOpenFileDialogRequest) returns (Engine_DisplayOpenFileDialogResponse);
  
  
  // Method: DisplayStepPropDialog
  //
  // Launches a dialog box in which you can edit the properties of a step.
  //
  // Calling the PropertyObject.DisplayPropertiesDialog method on a Step object is equivalent to calling this method.
  //
  // Engine_DisplayStepPropDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - readOnly: bool - Pass True to launch a read-only version of the dialog box.
  //    - modalToAppMainWind: bool - By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  //    - showViewContentsBtn: bool - Pass True to show a View Contents button in the dialog box. If you pass True, the viewContents parameter of this method returns True when a user clicks the View Contents button.
  //
  // Engine_DisplayStepPropDialogResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if you click OK in the dialog box. Returns False if you click Cancel. 
  //    - viewContents: boo - Returns True if the user clicks the View Contents button in the dialog box.
  //    - modifiedStep: boo - Returns True if the step was modified.
  //
  rpc DisplayStepPropDialog(Engine_DisplayStepPropDialogRequest) returns (Engine_DisplayStepPropDialogResponse);
  
  
  // Method: DisplaySequencePropDialog
  //
  // Launches a dialog box in which you can edit the properties of a sequence.
  //
  // Calling this method is equivalent to calling the PropertyObject.DisplayPropertiesDialog method on a Sequence object. Locking and unlocking a file on the Advanced tab immediately apply to the file. To determine whether the lock state changes, even when the return value from the method is False, you can use the PropertyObjectFile.Locked property to acquire the lock state before and after calling this method and compare the values.
  //
  // Engine_DisplaySequencePropDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - readOnly: bool - Pass True if you want a read-only version of the dialog box.
  //    - modalToAppMainWind: bool - By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  //    - showViewContentsBtn: bool - Pass True to show a View Contents button in the dialog box. If you pass True, the viewContents parameter of this method returns True if the user clicks the View Contents button in the dialog box.
  //
  // Engine_DisplaySequencePropDialogResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if you make modifications and click OK in the dialog box. Returns False if you click Cancel or make no modifications. 
  //    - viewContents: boo - Returns True if the user clicks the View Contents button in the dialog box.
  //
  rpc DisplaySequencePropDialog(Engine_DisplaySequencePropDialogRequest) returns (Engine_DisplaySequencePropDialogResponse);
  
  
  // Method: DisplaySeqFilePropDialog
  //
  // Launches a dialog box in which you can edit the properties of a sequence file.
  //
  // You can edit the load/unload options, model options, and other options. Calling the PropertyObject.DisplayPropertiesDialog method on a SequenceFile object is equivalent to calling this method. Locking and unlocking a file on the Advanced tab of the Sequence File Properties dialog box immediately changes the lock state of the file. To determine whether the lock state changes, even when the return value from the method is False, you can use the PropertyObjectFile.Locked property to acquire the lock state before and after calling this method and compare the values.
  //
  // Engine_DisplaySeqFilePropDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - sequenceFileParam: SequenceFileInstance - Pass a SequenceFile object to specify which sequence file you want to edit.
  //    - readOnly: bool - Pass True if you want a read-only version of the dialog box.
  //    - modalToAppMainWind: bool - By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  //    - showViewContentsBtn: bool - Pass True to show a View Contents button in the dialog box. If you pass True, the viewContents parameter of this method returns True when a user clicks the View Contents button.
  //
  // Engine_DisplaySeqFilePropDialogResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if you make modifications and click OK in the dialog box. Returns False if you click Cancel or make no modifications. 
  //    - viewContents: boo - Returns True if a user clicks the View Contents button in the dialog box.
  //
  rpc DisplaySeqFilePropDialog(Engine_DisplaySeqFilePropDialogRequest) returns (Engine_DisplaySeqFilePropDialogResponse);
  
  
  // Method: DisplayPreconditionDialog
  //
  // Launches a dialog box in which you can edit the preconditions for a step or for all steps in a sequence.
  //
  // Engine_DisplayPreconditionDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - readOnly: bool - Pass True if you want a read-only version of the dialog box.
  //    - modalToAppMainWind: bool - By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  //    - initialStep: ObjectInstance - Specifies a Step object if you want the dialog box to display only the preconditions for a particular step.
  //
  // Engine_DisplayPreconditionDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if you make modifications and click OK in the dialog box. Returns False if you click Cancel or make no modifications. 
  //
  rpc DisplayPreconditionDialog(Engine_DisplayPreconditionDialogRequest) returns (Engine_DisplayPreconditionDialogResponse);
  
  
  // Method: DisplayBrowseExprDialog
  //
  // Note: This method is obsolete. Use the Engine.DisplayBrowseExprDialogEx method instead.
  //
  // Launches a dialog box in which you can construct an expression string using variables, properties, constants, operators, and functions.
  //
  // Engine_DisplayBrowseExprDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - sequenceContextParam: SequenceContextInstance - Specifies the sequence context into which to browse. You can use the SequenceFile.NewEditContext method to obtain an edit time sequence context from a sequence file.
  //    - expressionIn: string - Specifies the initial expression string for the dialog box. This string must be a localized expression.
  //    - selectionStartIn: int32 - Specifies the zero-based index of the location in the initial expression where the selected text begins. If you want a cursor instead of selected text, pass the same index for selectionEndIn.
  //    - selectionEndIn: int32 - Specifies the index of the location in the initial expression of the first character beyond the selected text. If you want a cursor instead of selected text, pass the same index for selectionStartIn.
  //    - initialVariableName: string - Specifies the name of the initial variable or property to show as selected in the dialog box.
  //    - usesCRLF: bool - If the initial expression string uses a carriage return/linefeed combination ("\r\n") to indicate the end of a line of text, pass True for this parameter. If the string uses only a linefeed ("\n"), pass False. This parameter also determines if the carriage return/linefeed is inserted in the output expression for new lines.
  //      
  //    - modalToAppMainWind: bool - By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  //
  // Engine_DisplayBrowseExprDialogResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if you click OK in the dialog box. Returns False if you click Cancel. 
  //    - expressionOut: strin - Returns the resulting expression from the dialog box when the user clicks OK. This expression string is a localized expression. Refer to Engine.DelocalizeExpression for more information about converting a localized expression string to a standard form suitable for evaluation.
  //    - selectionStartOut: int3 - Returns the index of the start of the selected text in the resulting expression when the user clicks OK.
  //    - selectionEndOut: int3 - Returns the index of the first character beyond the selected text in the resulting expression when the user clicks OK.
  //
  rpc DisplayBrowseExprDialog(Engine_DisplayBrowseExprDialogRequest) returns (Engine_DisplayBrowseExprDialogResponse);
  
  
  // Method: DisplayToolMenuDialog
  //
  // Launches a dialog box in which you can edit the Tools menu items.
  //
  // Engine_DisplayToolMenuDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - readOnly: bool - Pass True if you want a read-only version of the dialog box.
  //    - modalToAppMainWind: bool - By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  //
  // Engine_DisplayToolMenuDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if you make modifications and click OK in the dialog box. Returns False if you click Cancel or make no modifications. 
  //
  rpc DisplayToolMenuDialog(Engine_DisplayToolMenuDialogRequest) returns (Engine_DisplayToolMenuDialogResponse);
  
  
  // Method: DisplayExternalViewerDialog
  //
  // Launches a dialog box in which you can edit the external file viewer settings.
  //
  // The external viewer settings specify the external viewer applications you use to view report files of various formats. Formats include text (.txt) and HTML (.html) files.
  //
  // Engine_DisplayExternalViewerDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - readOnly: bool - Pass True if you want a read-only version of the dialog box.
  //    - modalToAppMainWind: bool - By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  //
  // Engine_DisplayExternalViewerDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if you make modifications and click OK in the dialog box. Returns False if you click Cancel or make no modifications. 
  //
  rpc DisplayExternalViewerDialog(Engine_DisplayExternalViewerDialogRequest) returns (Engine_DisplayExternalViewerDialogResponse);
  
  
  // Method: DisplayAdapterConfigDialog
  //
  // Launches the Adapter Configuration dialog box, in which you can edit adapter-specific settings and select the default adapter.
  //
  // Engine_DisplayAdapterConfigDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - adapterSelectorReadOnly: bool - Pass True if you want a read-only version of the Selected column in the dialog box.
  //    - adapterCfgReadOnly: bool - Pass True if you want read-only versions of the Adapter Configuration controls in the dialog box.
  //    - hideAdapterSelector: bool - Pass True to hide the Selected and Hidden columns in the dialog box. This is useful for user interfaces that do not require the ability to select a default adapter.
  //    - modalToAppMainWind: bool - By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  //
  // Engine_DisplayAdapterConfigDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the dialog box modifies adapter settings. 
  //
  rpc DisplayAdapterConfigDialog(Engine_DisplayAdapterConfigDialogRequest) returns (Engine_DisplayAdapterConfigDialogResponse);
  
  
  // Method: DisplayLoopOnStepsDialog
  //
  // Launches a dialog box that prompts the user to provide interactive execution information required for the Loop On Selected Steps command.
  //
  // Engine_DisplayLoopOnStepsDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - dlgTitle: string - Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  //    - selectedStep: StepInstance - Specifies a reference to the first currently selected step. The dialog box uses this step to display property information if the user browses to create the 'stop on' expression.
  //    - modalToAppMainWnd: bool - By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle the Engine.AppMainHwnd property returns. Typically, you do not need to set this option.
  //
  // Engine_DisplayLoopOnStepsDialogResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if you click OK in the dialog box. Returns False if you click Cancel. 
  //    - loopCountValue: int3 - Returns the value of the loop count the user specifies in the dialog box. A value of -1 indicates an infinite loop.
  //    - stopExpressionValue: strin - Returns the value of the stop expression the user specifies in the dialog box. An empty string indicates that the stop expression is not used.
  //
  rpc DisplayLoopOnStepsDialog(Engine_DisplayLoopOnStepsDialogRequest) returns (Engine_DisplayLoopOnStepsDialogResponse);
  
  
  // Method: ConstructToolMenus
  //
  // Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.
  //
  // Creates the internal data for the Tools menu that is visible in user interfaces and sequence editors.
  // Call this function to initialize the Tools menu and submenus for the first time or whenever the Engine.DisplayToolMenuDialog method modifies the Tools menu or submenus. This method also evaluates the hidden expressions to determine which items to include in the Tools menu. The number of Tools menu items and submenus remains fixed until the next time you call this function.
  //
  // Engine_ConstructToolMenusRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - editArgsParam: ObjectInstance - Specifies which items in the user interface are currently selected. The method uses this information to calculate the item text, hidden, and enabled states of each menu item by evaluating its item text, hidden, and enabled expressions.
  //
  // Engine_ConstructToolMenusResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - The number of Tools menus that exist. This number includes the Tools menu and submenus. 
  //
  rpc ConstructToolMenus(Engine_ConstructToolMenusRequest) returns (Engine_ConstructToolMenusResponse);
  
  
  // Method: GetNumToolMenus
  //
  // Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.
  //
  // Returns the number of Tools menus.
  // Call the Engine.ConstructToolMenus method before calling this function. The first Tools menu is the top-level menu. The rest of the menus are submenus.
  //
  // Engine_GetNumToolMenusRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_GetNumToolMenusResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - The number of Tools menus. 
  //
  rpc GetNumToolMenus(Engine_GetNumToolMenusRequest) returns (Engine_GetNumToolMenusResponse);
  
  
  // Method: GetNumToolMenuItems
  //
  // Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.
  //
  // Returns the number of menu items a specific Tools menu contains.
  // Call the Engine.ConstructToolMenus method before calling this function.
  //
  // Engine_GetNumToolMenuItemsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - menuIndex: int32 - Specifies the zero-based index of the Tools menu from which to obtain the number of Tools menu items.
  //
  // Engine_GetNumToolMenuItemsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - The number of Tools menu items. 
  //
  rpc GetNumToolMenuItems(Engine_GetNumToolMenuItemsRequest) returns (Engine_GetNumToolMenuItemsResponse);
  
  
  // Method: GetToolMenuItemInfo
  //
  // Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.
  //
  // Returns information about a Tools menu item.
  //
  // Engine_GetToolMenuItemInfoRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - menuIndex: int32 - Specifies a zero-based index for a Tools menu or submenu.
  //    - itemIndex: int32 - Specifies a zero-based index for an item within the menu or submenu.
  //
  // Engine_GetToolMenuItemInfoResponse - The response message from the server. It provides the output parameters.
  //    - itemText: strin - Returns the text to display in the menu item.
  //    - subMenuIndex: int3 - If the item is a submenu, this parameter returns the zero-based menu index of the Tools menu for the item. Otherwise, it returns -1.
  //    - enabled: boo - If this parameter is True, enable the menu item. If this parameter is False, disable it.
  //    - uniqueItemID: int3 - Returns a unique ID to identify the menu item. Use this ID to invoke the Tools menu item or to obtain the menu item information again at a later time.
  //
  rpc GetToolMenuItemInfo(Engine_GetToolMenuItemInfoRequest) returns (Engine_GetToolMenuItemInfoResponse);
  
  
  // Method: GetToolMenuItemInfoWithID
  //
  // Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.
  //
  // Returns information about a Tools menu item.
  //
  // Engine_GetToolMenuItemInfoWithIDRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - uniqueItemID: int32 - Specifies a Tools menu item ID you obtain from the Engine.GetToolMenuItemInfoEx method.
  //
  // Engine_GetToolMenuItemInfoWithIDResponse - The response message from the server. It provides the output parameters.
  //    - itemText: strin - Returns the text to display in the menu item.
  //    - subMenuIndex: int3 - If the item is a submenu, this parameter returns the zero-based menu index of the Tools menu for the item. Otherwise, it returns -1.
  //    - enabled: boo - If this parameter is True, enable the menu item. If this parameter is False, disable it.
  //
  rpc GetToolMenuItemInfoWithID(Engine_GetToolMenuItemInfoWithIDRequest) returns (Engine_GetToolMenuItemInfoWithIDResponse);
  
  
  // Method: InvokeToolMenuItem
  //
  // Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.
  //
  // Executes the action associated with a Tools menu item, which you specify with a menu index and an item index.
  // Note: You must call the Engine.ConstructToolMenus method before calling this function.
  //
  // Engine_InvokeToolMenuItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - menuIndex: int32 - Specifies a zero-based index for a Tools menu or submenu.
  //    - itemIndex: int32 - Specifies a zero-based index for an item within a Tools menu or submenu.
  //
  // Engine_InvokeToolMenuItemResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc InvokeToolMenuItem(Engine_InvokeToolMenuItemRequest) returns (Engine_InvokeToolMenuItemResponse);
  
  
  // Method: InvokeToolMenuItemWithID
  //
  // Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.
  //
  // Executes the action associated with a Tools menu item, which you specify with a unique Tools menu item ID.
  // Note: You must call the Engine.ConstructToolMenus method before calling this function.
  //
  // Engine_InvokeToolMenuItemWithIDRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - uniqueItemID: int32 - Specifies the Tools menu item ID you obtain from the Engine.GetToolMenuItemInfoEx method or the Menu_ToolIDProp property on the object the Engine.GetToolMenuStructure method returns.
  //
  // Engine_InvokeToolMenuItemWithIDResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc InvokeToolMenuItemWithID(Engine_InvokeToolMenuItemWithIDRequest) returns (Engine_InvokeToolMenuItemWithIDResponse);
  
  
  // Method: EvalToolMenuItemExprs
  //
  // Note: This method is obsolete. Use the Engine.GetEditTimeToolMenuItems and Engine.GetRunTimeToolMenuItems methods instead.
  //
  // Reevaluates the Enable Expression and Item Text Expression of all the items in the Tools menu.
  // You can extract the new Enabled Expression and Item Text Expression values for a particular Tools menu item by calling the Engine.GetToolMenuItemInfoEx or Engine.GetToolMenuItemInfoWithIDEx methods.
  // Note: This method does not evaluate hidden expressions and does not change the number of menu items or submenus.
  //
  // Engine_EvalToolMenuItemExprsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - editArgsParam: ObjectInstance - Specifies the currently selected items in the user interface.
  //
  // Engine_EvalToolMenuItemExprsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc EvalToolMenuItemExprs(Engine_EvalToolMenuItemExprsRequest) returns (Engine_EvalToolMenuItemExprsResponse);
  
  
  // Method: FindFile
  //
  // Note: This method is obsolete. Use the Engine.FindFileEx method intead.
  //
  // Engine_FindFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - fileToFind: string - Specifies a string that contains the simple filename or relative pathname of the file to search for. TestStand expands macros in the path as specified by the Engine.ExpandPathMacros method before searching.
  //    - promptOption: FindFilePromptOptions - Specifies whether to prompt the user if the file is not initially found.
  //    - srchListOption: FindFileSearchListOptions - Specifies file search options.
  //    - isCommand: bool - If this flag is True and fileToFind has no file extension, then the FindFile method searches for files with the same basename that end in the common command extensions: .exe, .com, and .bat.
  //    - currentSequenceFile: ObjectInstance - If you pass a SequenceFile object for this parameter, the FindFile method initially searches the directory where the sequence file is stored if the Current Sequence File Directory option is enabled. Enable the current sequence file directory in the sequence editor by selecting Configure»Search Directories and enabling the Current Sequence File Directory option.
  //
  // Engine_FindFileResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if the file is found. 
  //    - absolutePath: strin - Returns the absolute pathname of the file if the file is found.
  //    - userCancelled: boo - Returns True if the method prompts the user and the user cancels the find operation.
  //
  rpc FindFile(Engine_FindFileRequest) returns (Engine_FindFileResponse);
  
  
  // Method: FindPath
  //
  // Searches for a file or directory under the TestStand search directories using a simple file or directory name or relative pathname.
  //
  // Engine_FindPathRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - pathToFind: string - Specifies a string that contains the simple file or directory name or relative pathname of the file or directory to search for. TestStand expands macros in the path as specified by the Engine.ExpandPathMacros method before searching.
  //    - currentSequenceFile: ObjectInstance - If you pass a SequenceFile object for this parameter, the Engine.FindPath method initially searches the directory where the sequence file is stored if the Current Sequence File Directory option is enabled. Select Configure»Search Directories to launch the Edit Search Directories dialog box and enable the Current Sequence File Directory option.
  //
  // Engine_FindPathResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if the file or directory is found. 
  //    - absolutePath: strin - Returns the absolute pathname of the file or directory if it is found.
  //    - statusFlag: FindPathStatusValue - Returns more information about the file or directory.
  //
  rpc FindPath(Engine_FindPathRequest) returns (Engine_FindPathResponse);
  
  
  // Method: CreateTempFile
  //
  // Creates a unique temporary file with a specific basename and extension.
  //
  // When TestStand shuts down, it automatically deletes the temporary file.
  //
  // Engine_CreateTempFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - baseName: string - Specifies the base name of the temporary file. If necessary, TestStand adds other characters to the name to make it unique.
  //    - extension: string - Specifies the file extension for the temporary file.
  //    - directory: string - Specifies the directory in which to store the temporary file. You can include a trailing backslash, but it is not required. Pass an empty string to use the TestStand subdirectory in the directory the TEMP environment variable specifies, which by default is %USERPROFILE%\AppData\Local\Temp on Windows 8.1/8/7/Vista and %USERPROFILE%\Local Settings\Temp on Microsoft Windows XP.
  //
  // Engine_CreateTempFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The pathname of the temporary file. 
  //
  rpc CreateTempFile(Engine_CreateTempFileRequest) returns (Engine_CreateTempFileResponse);
  
  
  // Method: CheckExprSyntax
  //
  // Checks the syntax of the expression parameter and returns error information.
  //
  // Calling this method is equivalent to calling the Engine.CheckExpression method and passing a NULL reference to the evaluationContext parameter and passing EvalOption_NoOptions to the evaluationOptions parameter.
  //
  // Engine_CheckExprSyntaxRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - expressionStr: string - Specifies the expression for which to check the syntax.
  //
  // Engine_CheckExprSyntaxResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True if the syntax is correct. Returns False if the expression contains a syntax error. If this method returns False, check the errorDescription, startErrPos, and endErrPos parameters for more information. 
  //    - errorDescription: strin - When a syntax error exists, this parameter returns an error message describing the type of error.
  //    - startErrPos: int3 - When a syntax error exists, this parameter returns the index of the location in the string where the error begins.
  //    - endErrPos: int3 - When a syntax error exists, this parameter returns the index of the location in the string of the first character beyond the syntax error.
  //
  rpc CheckExprSyntax(Engine_CheckExprSyntaxRequest) returns (Engine_CheckExprSyntaxResponse);
  
  
  // Method: GetErrorString
  //
  // Returns an error description string that corresponds to a specific TSError code.
  //
  // Engine_GetErrorStringRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - errorCode: TSError - Specifies the error code to describe.
  //
  // Engine_GetErrorStringResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns False when the errorCode is not a TSError. 
  //    - errorString: strin - Returns a description of the errorCode. If the error code is not a TSError, the parameter returns the string "User defined error code."
  //
  rpc GetErrorString(Engine_GetErrorStringRequest) returns (Engine_GetErrorStringResponse);
  
  
  // Method: GetResourceString
  //
  // Returns a string from the TestStand string resource file for the current language. You specify the string by category and symbol, which are the section and item labels for the string in the string resource file.
  //
  // The string resource files are located in the <TestStand>\Components\Language and <TestStand Public>\Components\Language directories. Typically, you customize the strings in the resource files in the <TestStand>\Components\Language directory by adding a section and item with the same name to the corresponding file in the <TestStand Public>\Components\Language directory.
  // Use the ResStr expression function to retrieve a TestStand resource string from within an expression.
  //
  // Engine_GetResourceStringRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - section: string - Specifies the category or section label.
  //    - symbol: string - Specifies the symbol or item label.
  //    - defaultString: ObjectInstance - Specifies a default string to return when the string resource file does not contain an entry with the category and symbol you specify. If you do not specify this parameter and the string resource file does not contain the entry, this function returns the string, String not found in table.
  //
  // Engine_GetResourceStringResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: string - The resource string. 
  //    - found: ObjectInstanc - Returns True if the string is found in the resource file and False if the string is not found in the resource file.
  //
  rpc GetResourceString(Engine_GetResourceStringRequest) returns (Engine_GetResourceStringResponse);
  
  
  // Method: LaunchExternalViewer
  //
  // Launches an external file viewer.
  //
  // Typically, you use this method to display test reports.
  // This method specifies the external viewer based on settings you can edit when you call the Engine.DisplayExternalViewerDialog method. If the dialog box contains no settings that apply to the file, TestStand launches a viewer based on the file extension association defined for the operating system.
  //
  // Engine_LaunchExternalViewerRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - FilePath: string - Specifies the pathname of the file to view.
  //
  // Engine_LaunchExternalViewerResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc LaunchExternalViewer(Engine_LaunchExternalViewerRequest) returns (Engine_LaunchExternalViewerResponse);
  
  
  // Method: NotifyStartOfModalDialog
  //
  // Note: This method is obsolete. Use the Engine.NotifyStartOfModalDialogEx method instead.
  //
  // Notifies TestStand that you are about to launch a modal dialog box.
  //
  // Engine_NotifyStartOfModalDialogRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_NotifyStartOfModalDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the modalID to pass to the Engine.NotifyEndOfModalDialog method when the dialog box no longer appears onscreen. 
  //
  rpc NotifyStartOfModalDialog(Engine_NotifyStartOfModalDialogRequest) returns (Engine_NotifyStartOfModalDialogResponse);
  
  
  // Method: NotifyEndOfModalDialog
  //
  // Notifies TestStand that you are no longer displaying the modal dialog box the modalID parameter specifies.
  //
  // TestStand uses this notification to determine when to re-enable the main window of the application.
  // Note: Do not call this method when displaying a dialog box the TestStand API implements.
  //
  // Engine_NotifyEndOfModalDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - modalID: int32 - Specifies the modalID you receive as a return value from the Engine.NotifyStartOfModalDialogEx method.
  //
  // Engine_NotifyEndOfModalDialogResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc NotifyEndOfModalDialog(Engine_NotifyEndOfModalDialogRequest) returns (Engine_NotifyEndOfModalDialogResponse);
  
  
  // Method: CommitGlobalsToDisk
  //
  // Saves the current state of the station globals to disk.
  //
  // Calling this method with an argument of True is equivalent to calling the PropertyObjectFile.WriteFile method on the object the Engine.GlobalsFile property returns.
  //
  // Engine_CommitGlobalsToDiskRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - promptOnSaveConflicts: bool - TestStand writes the station globals to disk only if they change after TestStand has loaded or saved them. If another application changes the station globals on disk after TestStand has loaded or saved them, the action TestStand takes depends on the value you pass in this parameter. If you pass True, TestStand gives users the option to overwrite the changes the other application made. If you pass False, TestStand saves the station globals without prompting the user to resolve any conflicts between the changes in memory and the changes on disk.
  //
  // Engine_CommitGlobalsToDiskResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc CommitGlobalsToDisk(Engine_CommitGlobalsToDiskRequest) returns (Engine_CommitGlobalsToDiskResponse);
  
  
  // Method: UnloadAllModules
  //
  // Unloads all code modules associated with steps, step types, and substeps.
  //
  // Call this method to force all modules to be unloaded and then reloaded when they are next called so you can rebuild DLLs and other code modules. This method also unloads the station model sequence file. Typically, you only call this method when no executions are running.
  //
  // Engine_UnloadAllModulesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_UnloadAllModulesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc UnloadAllModules(Engine_UnloadAllModulesRequest) returns (Engine_UnloadAllModulesResponse);
  
  
  // Method: GetStationModelSequenceFile
  //
  // Returns a reference to the process model sequence file TestStand associates with the test station.
  //
  // Release this reference when you are done using it.
  // This method returns an error if the sequence file exists but TestStand cannot load it for some reason. For example, TestStand might be unable to load the sequence file if there are type conflicts that cannot be automatically resolved.
  //
  // Engine_GetStationModelSequenceFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_GetStationModelSequenceFileResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: SequenceFileInstance - The return type of the SequenceFile object.
  //    - modelDescriptionString: strin - Returns a string that describes the process model file.
  //
  rpc GetStationModelSequenceFile(Engine_GetStationModelSequenceFileRequest) returns (Engine_GetStationModelSequenceFileResponse);
  
  
  // Method: ReloadGlobals
  //
  // Reloads global variables from disk. All global reference variables and properties that exist after you call this method retain the reference values they had before the call to ReloadGlobals. To clear reference values, explicitly set the references to nothing or delete the global reference variables and properties before you call this method.
  //
  // Engine_ReloadGlobalsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_ReloadGlobalsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ReloadGlobals(Engine_ReloadGlobalsRequest) returns (Engine_ReloadGlobalsResponse);
  
  

  // Property: Globals
  //
  // Returns the PropertyObject that contains the global variables for the test station.
  //
  // When you are writing a GUI, use this property to display or edit global variables from the sequence editor or user interface.
  //
  // Engine_Get_GlobalsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_GlobalsResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Returns the PropertyObject that contains the global variables for the test station. 
  //
  rpc Get_Globals(Engine_Get_GlobalsRequest) returns (Engine_Get_GlobalsResponse);
  
  
  // Property: CurrentUser
  //
  // Specifies the user who is currently logged in.
  //
  // Use this property to obtain or set the User object for the user who is currently logged in. If no one is currently logged in, this property returns a NULL dispatch pointer or object reference. After you obtain the User object, call the User.HasPrivilege method to determine whether the user or a user group of which the user is a member has a specific privilege. If you set the property to 0 or NULL, you log out the current user.
  // If you are developing an application that uses the TestStand User Interface (UI) Controls, use the ApplicationMgr.Login method to change the current user to ensure that the Application Manager control properly sends an event to a user interface.
  //
  // Engine_Set_CurrentUserRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - val: UserInstance - Specifies the user who is currently logged in. 
  //
  // Engine_Set_CurrentUserResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_CurrentUserRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_CurrentUserResponse - The response message from the server. It provides the return value.
  //    - returnValue: UserInstance - Specifies the user who is currently logged in. 
  //
  rpc Set_CurrentUser(Engine_Set_CurrentUserRequest) returns (Engine_Set_CurrentUserResponse);
  rpc Get_CurrentUser(Engine_Get_CurrentUserRequest) returns (Engine_Get_CurrentUserResponse);
  
  
  // Property: ApplicationIsEditor
  //
  // Specifies whether the application is a sequence editor.
  //
  // The default setting is False. Set this property to True if you are using the TestStand API to write a sequence editor. If you are writing a user interface, use the default setting.
  //
  // Engine_Set_ApplicationIsEditorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - isEditor: bool - Specifies whether the application is a sequence editor. 
  //
  // Engine_Set_ApplicationIsEditorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_ApplicationIsEditorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_ApplicationIsEditorResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the application is a sequence editor. 
  //
  rpc Set_ApplicationIsEditor(Engine_Set_ApplicationIsEditorRequest) returns (Engine_Set_ApplicationIsEditorResponse);
  rpc Get_ApplicationIsEditor(Engine_Get_ApplicationIsEditorRequest) returns (Engine_Get_ApplicationIsEditorResponse);
  
  
  // Property: AppMainHwnd
  //
  // Specifies the Window handle of the owner of modal dialog boxes.
  // 
  //
  // TestStand uses this property to make dialog boxes modal to the application. Do not set this property because TestStand sets it automatically when the application creates the TestStand Engine. Setting this property can cause dialog boxes to be modal to the wrong window. This property usually refers to the main window of the application but refers to the window of the dialog box when the application displays a modal dialog box.
  //
  // Engine_Set_AppMainHwndRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - hwnd: int32 - Specifies the Window handle of the owner of modal dialog boxes.  
  //
  // Engine_Set_AppMainHwndResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_AppMainHwndRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_AppMainHwndResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the Window handle of the owner of modal dialog boxes.  
  //
  rpc Set_AppMainHwnd(Engine_Set_AppMainHwndRequest) returns (Engine_Set_AppMainHwndResponse);
  rpc Get_AppMainHwnd(Engine_Get_AppMainHwndRequest) returns (Engine_Get_AppMainHwndResponse);
  
  
  // Property: NumAdapters
  //
  // Returns the number of module adapters available for use with TestStand.
  //
  // TestStand maintains a list of available module adapters. Use the Engine.GetAdapter method to obtain a module adapter object by index.
  //
  // Engine_Get_NumAdaptersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_NumAdaptersResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of module adapters available for use with TestStand. 
  //
  rpc Get_NumAdapters(Engine_Get_NumAdaptersRequest) returns (Engine_Get_NumAdaptersResponse);
  
  
  // Property: DefaultAdapter
  //
  // Specifies the key name of the default adapter TestStand uses to create steps.
  //
  // TestStand maintains a list of available module adapters. The adapter this property specifies is designated as the default adapter. This property contains the key name of the default module adapter. The Engine.DefaultAdapterIndex property indicates the index of the default module adapter.
  //
  // Engine_Set_DefaultAdapterRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - adapterKeyNameVal: string - Specifies the key name of the default adapter TestStand uses to create steps. 
  //
  // Engine_Set_DefaultAdapterResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_DefaultAdapterRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_DefaultAdapterResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the key name of the default adapter TestStand uses to create steps. 
  //
  rpc Set_DefaultAdapter(Engine_Set_DefaultAdapterRequest) returns (Engine_Set_DefaultAdapterResponse);
  rpc Get_DefaultAdapter(Engine_Get_DefaultAdapterRequest) returns (Engine_Get_DefaultAdapterResponse);
  
  
  // Property: EnableUserPrivilegeChecking
  //
  // Note: This property is obsolete. Use the StationOptions.EnableUserPrivilegeChecking property instead.
  //
  // Specifies whether the sequence editor or user interface verifies user privileges.
  // When this property is False, the sequence editor or user interface does not verify that the user has the privileges necessary for performing specific operations. Instead, all operations that depend on user privileges are always available.
  //
  // Engine_Set_EnableUserPrivilegeCheckingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - enabled: bool - Note: This property is obsolete. Use the StationOptions.EnableUserPrivilegeChecking property instead. 
  //
  // Engine_Set_EnableUserPrivilegeCheckingResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_EnableUserPrivilegeCheckingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_EnableUserPrivilegeCheckingResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the StationOptions.EnableUserPrivilegeChecking property instead. 
  //
  rpc Set_EnableUserPrivilegeChecking(Engine_Set_EnableUserPrivilegeCheckingRequest) returns (Engine_Set_EnableUserPrivilegeCheckingResponse);
  rpc Get_EnableUserPrivilegeChecking(Engine_Get_EnableUserPrivilegeCheckingRequest) returns (Engine_Get_EnableUserPrivilegeCheckingResponse);
  
  
  // Property: AutoLoginSystemUser
  //
  // Note: This property is obsolete. Use the StationOptions.AutoLoginSystemUser property instead.
  //
  // Specifies if the LoginLogout callback sequence uses the current user login for the operating system as the login for TestStand when first launching a user interface or sequence editor.
  // If the user login for the operating system does not exist in TestStand, the Login dialog box launches. If the user login for the operating system exists in TestStand, TestStand automatically logs the user in using the operating system login.
  // Note: TestStand does not perform password authentication for an automatic login.
  //
  // Engine_Set_AutoLoginSystemUserRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - enabled: bool - Note: This property is obsolete. Use the StationOptions.AutoLoginSystemUser property instead. 
  //
  // Engine_Set_AutoLoginSystemUserResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_AutoLoginSystemUserRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_AutoLoginSystemUserResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the StationOptions.AutoLoginSystemUser property instead. 
  //
  rpc Set_AutoLoginSystemUser(Engine_Set_AutoLoginSystemUserRequest) returns (Engine_Set_AutoLoginSystemUserResponse);
  rpc Get_AutoLoginSystemUser(Engine_Get_AutoLoginSystemUserRequest) returns (Engine_Get_AutoLoginSystemUserResponse);
  
  
  // Property: MajorVersion
  //
  // Returns the major version number for the current version of TestStand.
  //
  // The version number usually appears in the MajorVersion.MinorVersion.RevisionVersion format, such as 1.0.2.
  //
  // Engine_Get_MajorVersionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_MajorVersionResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the major version number for the current version of TestStand. 
  //
  rpc Get_MajorVersion(Engine_Get_MajorVersionRequest) returns (Engine_Get_MajorVersionResponse);
  
  
  // Property: MinorVersion
  //
  // Returns the minor version number for the current version of TestStand.
  //
  // The version number usually appears in the MajorVersion.MinorVersion.RevisionVersion format, such as 1.0.2.
  // Note: Prior to TestStand 2016, the revision version sometimes indicated the service pack level.  Starting with TestStand 2016, all service packs are reflected in Engine.MinorVersion and Engine.RevisionVersion is always 0.
  //
  // Engine_Get_MinorVersionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_MinorVersionResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the minor version number for the current version of TestStand. 
  //
  rpc Get_MinorVersion(Engine_Get_MinorVersionRequest) returns (Engine_Get_MinorVersionResponse);
  
  
  // Property: RevisionVersion
  //
  // Returns the revision version number for the current version of TestStand.
  //
  // The version number usually appears in the MajorVersion.MinorVersion.RevisionVersion format, such as 1.0.2.
  // Note: Prior to TestStand 2016, the revision version sometimes indicated the service pack level. Starting with TestStand 2016, all service packs are reflected in Engine.MinorVersion and Engine.RevisionVersion is always 0.
  //
  // Engine_Get_RevisionVersionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_RevisionVersionResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the revision version number for the current version of TestStand. 
  //
  rpc Get_RevisionVersion(Engine_Get_RevisionVersionRequest) returns (Engine_Get_RevisionVersionResponse);
  
  
  // Property: VersionString
  //
  // Returns the full version of the TestStand Engine as a string.
  //
  // Use this string for display purposes. Use the other version properties for conditional code.
  //
  // Engine_Get_VersionStringRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_VersionStringResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the full version of the TestStand Engine as a string. 
  //
  rpc Get_VersionString(Engine_Get_VersionStringRequest) returns (Engine_Get_VersionStringResponse);
  
  
  // Property: EnableRemote
  //
  // Note: This property is obsolete. Use the StationOptions.AllowSequenceCallsFromRemoteMachine property instead.
  //
  // Specifies if remote TestStand installations can execute sequences on the local computer.
  // When this property is True, TestStand allows instances of the TestStand Engine on remote computers to connect to the local computer to execute sequences. When this property is False, only instances of TestStand on the local computer can execute sequences on the local computer.
  //
  // Engine_Set_EnableRemoteRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - enabled: bool - Note: This property is obsolete. Use the StationOptions.AllowSequenceCallsFromRemoteMachine property instead. 
  //
  // Engine_Set_EnableRemoteResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_EnableRemoteRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_EnableRemoteResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the StationOptions.AllowSequenceCallsFromRemoteMachine property instead. 
  //
  rpc Set_EnableRemote(Engine_Set_EnableRemoteRequest) returns (Engine_Set_EnableRemoteResponse);
  rpc Get_EnableRemote(Engine_Get_EnableRemoteRequest) returns (Engine_Get_EnableRemoteResponse);
  
  
  // Property: ConfigDirectory
  //
  // Note: This property is obsolete. Use the Engine.GetTestStandPath method instead.
  //
  // Returns the pathname of the TestStand configuration directory. The pathname does not contain a trailing backslash.
  // The configuration directory contains engine and sequence editor option files, the users file, the globals file, and the tools menu file.
  //
  // Engine_Get_ConfigDirectoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_ConfigDirectoryResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Note: This property is obsolete. Use the Engine.GetTestStandPath method instead. 
  //
  rpc Get_ConfigDirectory(Engine_Get_ConfigDirectoryRequest) returns (Engine_Get_ConfigDirectoryResponse);
  
  
  // Property: BinDirectory
  //
  // Note: This property is obsolete. Use the Engine.GetTestStandPath method instead.
  //
  // Returns the pathname of the <TestStand>\Bin directory. The pathname does not contain a trailing backslash.
  //
  // Engine_Get_BinDirectoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_BinDirectoryResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Note: This property is obsolete. Use the Engine.GetTestStandPath method instead. 
  //
  rpc Get_BinDirectory(Engine_Get_BinDirectoryRequest) returns (Engine_Get_BinDirectoryResponse);
  
  
  // Property: TestStandDirectory
  //
  // Note: This property is obsolete. Use the Engine.GetTestStandPath method instead.
  //
  // Returns the pathname of the directory in which you installed TestStand. The pathname does not contain a trailing backslash.
  //
  // Engine_Get_TestStandDirectoryRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_TestStandDirectoryResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Note: This property is obsolete. Use the Engine.GetTestStandPath method instead. 
  //
  rpc Get_TestStandDirectory(Engine_Get_TestStandDirectoryRequest) returns (Engine_Get_TestStandDirectoryResponse);
  
  
  // Property: StepTypes
  //
  // Note: This property is obsolete. Use the Engine.GetTypeNames and Engine.GetTypeDefinition properties instead.
  //
  // If you attempt to read this property, TestStand returns an error.
  //
  // Engine_Get_StepTypesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_StepTypesResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Note: This property is obsolete. Use the Engine.GetTypeNames and Engine.GetTypeDefinition properties instead. 
  //
  rpc Get_StepTypes(Engine_Get_StepTypesRequest) returns (Engine_Get_StepTypesResponse);
  
  
  // Property: CustomDataTypes
  //
  // Note: This property is obsolete. Use the Engine.GetTypeNames and Engine.GetTypeDefinition methods instead.
  //
  // If you attempt to read this property, TestStand returns an error.
  //
  // Engine_Get_CustomDataTypesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_CustomDataTypesResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Note: This property is obsolete. Use the Engine.GetTypeNames and Engine.GetTypeDefinition methods instead. 
  //
  rpc Get_CustomDataTypes(Engine_Get_CustomDataTypesRequest) returns (Engine_Get_CustomDataTypesResponse);
  
  
  // Property: BuiltinDataTypes
  //
  // Note: This property is obsolete. Use the Engine.GetTypeNames and Engine.GetTypeDefinition methods instead.
  //
  // If you attempt to read this property, TestStand returns an error.
  //
  // Engine_Get_BuiltinDataTypesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_BuiltinDataTypesResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Note: This property is obsolete. Use the Engine.GetTypeNames and Engine.GetTypeDefinition methods instead. 
  //
  rpc Get_BuiltinDataTypes(Engine_Get_BuiltinDataTypesRequest) returns (Engine_Get_BuiltinDataTypesResponse);
  
  
  // Property: TracingEnabled
  //
  // Note: This property is obsolete. Use the StationOptions.TracingEnabled property instead.
  //
  // Specifies if tracing is enabled for sequence editors and user interfaces.
  //
  // Engine_Set_TracingEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - isEnabled: bool - Note: This property is obsolete. Use the StationOptions.TracingEnabled property instead. 
  //
  // Engine_Set_TracingEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_TracingEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_TracingEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the StationOptions.TracingEnabled property instead. 
  //
  rpc Set_TracingEnabled(Engine_Set_TracingEnabledRequest) returns (Engine_Set_TracingEnabledResponse);
  rpc Get_TracingEnabled(Engine_Get_TracingEnabledRequest) returns (Engine_Get_TracingEnabledResponse);
  
  
  // Property: BreakpointsEnabled
  //
  // Note: This property is obsolete. Use the StationOptions.BreakpointsEnabled property instead.
  //
  // Specifies whether to stop on breakpoints. Set this property to True to stop on breakpoints. Set this property to False to ignore breakpoints.
  //
  // Engine_Set_BreakpointsEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - isEnabled: bool - Note: This property is obsolete. Use the StationOptions.BreakpointsEnabled property instead. 
  //
  // Engine_Set_BreakpointsEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_BreakpointsEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_BreakpointsEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the StationOptions.BreakpointsEnabled property instead. 
  //
  rpc Set_BreakpointsEnabled(Engine_Set_BreakpointsEnabledRequest) returns (Engine_Set_BreakpointsEnabledResponse);
  rpc Get_BreakpointsEnabled(Engine_Get_BreakpointsEnabledRequest) returns (Engine_Get_BreakpointsEnabledResponse);
  
  
  // Property: DisableResults
  //
  // Note: This property is obsolete. Use the StationOptions.DisableResults property instead.
  //
  // Disables recording of results for all steps.
  // When this property is True, TestStand does not record results for steps. When this property is False, TestStand records results based on the setting of the Step.RecordResult property of each individual step or based on the Sequence.DisableResults property and Execution.DisableResults property.
  // Note: TestStand might not honor changes to this property in a running sequence until the sequence completes the current step group.
  //
  // Engine_Set_DisableResultsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - isDisabled: bool - Note: This property is obsolete. Use the StationOptions.DisableResults property instead. 
  //
  // Engine_Set_DisableResultsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_DisableResultsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_DisableResultsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the StationOptions.DisableResults property instead. 
  //
  rpc Set_DisableResults(Engine_Set_DisableResultsRequest) returns (Engine_Set_DisableResultsResponse);
  rpc Get_DisableResults(Engine_Get_DisableResultsRequest) returns (Engine_Get_DisableResultsResponse);
  
  
  // Property: AlwaysGotoCleanupOnFailure
  //
  // Note: This property is obsolete. Use the StationOptions.AlwaysGotoCleanupOnFailure property instead.
  //
  // Overrides the Sequence.GotoCleanupOnFailure property setting when this property is True.
  //
  // Engine_Set_AlwaysGotoCleanupOnFailureRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - isEnabled: bool - Note: This property is obsolete. Use the StationOptions.AlwaysGotoCleanupOnFailure property instead. 
  //
  // Engine_Set_AlwaysGotoCleanupOnFailureResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_AlwaysGotoCleanupOnFailureRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_AlwaysGotoCleanupOnFailureResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the StationOptions.AlwaysGotoCleanupOnFailure property instead. 
  //
  rpc Set_AlwaysGotoCleanupOnFailure(Engine_Set_AlwaysGotoCleanupOnFailureRequest) returns (Engine_Set_AlwaysGotoCleanupOnFailureResponse);
  rpc Get_AlwaysGotoCleanupOnFailure(Engine_Get_AlwaysGotoCleanupOnFailureRequest) returns (Engine_Get_AlwaysGotoCleanupOnFailureResponse);
  
  
  // Property: BreakOnRTE
  //
  // Note: This property is obsolete. Use the StationOptions.RTEOption property instead.
  //
  // Specifies whether the sequence editor or user interface breaks on run-time errors. In most sequence editors and user interfaces, breaking on a run-time error launches a dialog box in which you can choose how to proceed.
  //
  // Engine_Set_BreakOnRTERequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - isEnabled: bool - Note: This property is obsolete. Use the StationOptions.RTEOption property instead. 
  //
  // Engine_Set_BreakOnRTEResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_BreakOnRTERequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_BreakOnRTEResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the StationOptions.RTEOption property instead. 
  //
  rpc Set_BreakOnRTE(Engine_Set_BreakOnRTERequest) returns (Engine_Set_BreakOnRTEResponse);
  rpc Get_BreakOnRTE(Engine_Get_BreakOnRTERequest) returns (Engine_Get_BreakOnRTEResponse);
  
  
  // Property: ExecutionMask
  //
  // Note: This property is obsolete. Use the StationOptions.ExecutionMask property instead.
  //
  // Sets or gets execution options.
  // Specifies the execution options using ExecutionMask constants. To specify multiple execution options, use the bitwise-OR operator.
  //
  // Engine_Set_ExecutionMaskRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - val: int32 - Note: This property is obsolete. Use the StationOptions.ExecutionMask property instead. 
  //
  // Engine_Set_ExecutionMaskResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_ExecutionMaskRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_ExecutionMaskResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Note: This property is obsolete. Use the StationOptions.ExecutionMask property instead. 
  //
  rpc Set_ExecutionMask(Engine_Set_ExecutionMaskRequest) returns (Engine_Set_ExecutionMaskResponse);
  rpc Get_ExecutionMask(Engine_Get_ExecutionMaskRequest) returns (Engine_Get_ExecutionMaskResponse);
  
  
  // Property: UIMessagePollingEnabled
  //
  // Specifies if user interface message polling is enabled.
  //
  // Default value is False.
  // Set this property to True when writing a user interface which uses polling rather than events to obtain UIMessages from TestStand.
  // To poll, call the Engine.IsUIMessageQueueEmpty property. If IsUIMessageQueueEmpty returns False, call the Engine.GetUIMessage method to retrieve the next UIMessage. If your development environment requires you to explicitly release COM references, release the COM reference to the previous user interface message before obtaining the next one.
  // Note: Do not set this property to True if you created the TestStand Engine as an ActiveX control or if you are using the TestStand User Interface (UI) Controls.
  //
  // Engine_Set_UIMessagePollingEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - isEnabled: bool - Specifies if user interface message polling is enabled. 
  //
  // Engine_Set_UIMessagePollingEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_UIMessagePollingEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_UIMessagePollingEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if user interface message polling is enabled. 
  //
  rpc Set_UIMessagePollingEnabled(Engine_Set_UIMessagePollingEnabledRequest) returns (Engine_Set_UIMessagePollingEnabledResponse);
  rpc Get_UIMessagePollingEnabled(Engine_Get_UIMessagePollingEnabledRequest) returns (Engine_Get_UIMessagePollingEnabledResponse);
  
  
  // Property: IsUIMessageQueueEmpty
  //
  // Returns a value that indicates whether the user interface message queue is empty.
  //
  // If you are writing a sequence editor or user interface, use this property when polling for UIMessages to determine whether a message in the queue is pending. You must set the Engine.UIMessagePollingEnabled property to True to poll for UIMessages.
  //
  // Engine_Get_IsUIMessageQueueEmptyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_IsUIMessageQueueEmptyResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the user interface message queue is empty. 
  //
  rpc Get_IsUIMessageQueueEmpty(Engine_Get_IsUIMessageQueueEmptyRequest) returns (Engine_Get_IsUIMessageQueueEmptyResponse);
  
  
  // Property: UIMessageDelay
  //
  // Note: This property is obsolete. Use the StationOptions.UIMessageDelay property instead.
  //
  // Specifies how many milliseconds must pass between postings of UIMsg_Trace events.
  // Set this property to specify how many milliseconds must pass before you receive the next UIMsg_Trace event. Use this property to slow down the posting of trace messages to the sequence editor or user interface to allow time for processing mouse events and/or to display the trace of an execution more slowly.
  // Note: The value of this property can never be less than the value of the Engine.UIMessageMinDelay property. If set to a lesser value, TestStand automatically resets this property to the value of the UIMessageMinDelay property.
  //
  // Engine_Set_UIMessageDelayRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - millisecDelay: int32 - Note: This property is obsolete. Use the StationOptions.UIMessageDelay property instead. 
  //
  // Engine_Set_UIMessageDelayResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_UIMessageDelayRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_UIMessageDelayResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Note: This property is obsolete. Use the StationOptions.UIMessageDelay property instead. 
  //
  rpc Set_UIMessageDelay(Engine_Set_UIMessageDelayRequest) returns (Engine_Set_UIMessageDelayResponse);
  rpc Get_UIMessageDelay(Engine_Get_UIMessageDelayRequest) returns (Engine_Get_UIMessageDelayResponse);
  
  
  // Property: UIMessageMinDelay
  //
  // Note: This property is obsolete. Use the StationOptions.UIMessageMinDelay property instead.
  //
  // Specifies the minimum value allowed for the Engine.UIMessageDelay property.
  // Use this property to specify the minimum value allowed for the UIMessageDelay property for the sequence editor or user interface.
  //
  // Engine_Set_UIMessageMinDelayRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - millisecDelay: int32 - Note: This property is obsolete. Use the StationOptions.UIMessageMinDelay property instead. 
  //
  // Engine_Set_UIMessageMinDelayResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_UIMessageMinDelayRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_UIMessageMinDelayResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Note: This property is obsolete. Use the StationOptions.UIMessageMinDelay property instead. 
  //
  rpc Set_UIMessageMinDelay(Engine_Set_UIMessageMinDelayRequest) returns (Engine_Set_UIMessageMinDelayResponse);
  rpc Get_UIMessageMinDelay(Engine_Get_UIMessageMinDelayRequest) returns (Engine_Get_UIMessageMinDelayResponse);
  
  
  // Property: IsRemote
  //
  // Specifies whether the engine was created to execute sequences on a remote computer.
  //
  // Note: A TestStand Engine must set this property. National Instruments recommends not setting this property manually.
  // When TestStand executes sequences on a remote computer, the software creates an instance of the TestStand Engine on the remote computer and sets this property on the remote engine to True. To determine whether the engine was created for remote execution, obtain the value of this property.
  // Note: TestStand does not support remotely executing a sequence across different TestStand versions, for example, remotely executing a TestStand 2013 sequence from a computer running TestStand 2010.
  //
  // Engine_Set_IsRemoteRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - isRemoteParam: bool - Specifies whether the engine was created to execute sequences on a remote computer. 
  //
  // Engine_Set_IsRemoteResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_IsRemoteRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_IsRemoteResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the engine was created to execute sequences on a remote computer. 
  //
  rpc Set_IsRemote(Engine_Set_IsRemoteRequest) returns (Engine_Set_IsRemoteResponse);
  rpc Get_IsRemote(Engine_Get_IsRemoteRequest) returns (Engine_Get_IsRemoteResponse);
  
  
  // Property: MasterEngine
  //
  // Specifies the controlling engine for remote engines.
  //
  // Note: A TestStand Engine must set this property. National Instruments recommends not setting this property manually.
  // When TestStand executes sequences on a remote computer, it creates an instance of the TestStand Engine on the remote computer and sets this property on the remote engine to refer back to the controlling engine. If this engine is a remote engine, you can use this property to access the engine on the other computer.
  //
  // Engine_Set_MasterEngineRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - MasterEngine: ObjectInstance - Specifies the controlling engine for remote engines. 
  //
  // Engine_Set_MasterEngineResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_MasterEngineRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_MasterEngineResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - Specifies the controlling engine for remote engines. 
  //
  rpc Set_MasterEngine(Engine_Set_MasterEngineRequest) returns (Engine_Set_MasterEngineResponse);
  rpc Get_MasterEngine(Engine_Get_MasterEngineRequest) returns (Engine_Get_MasterEngineResponse);
  
  
  // Property: UseLocalizedDecimalPoint
  //
  // Note: This property is obsolete. Use the StationOptions.UseLocalizedDecimalPoint property instead.
  //
  // Specifies whether to use the operating system setting to determine the character used as a decimal point.
  // When this property is True, TestStand uses the operating system setting to determine the character it uses as the localized decimal point. When this property is False, TestStand uses the period character to represent decimal points.
  //
  // Engine_Set_UseLocalizedDecimalPointRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - enabled: bool - Note: This property is obsolete. Use the StationOptions.UseLocalizedDecimalPoint property instead. 
  //
  // Engine_Set_UseLocalizedDecimalPointResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_UseLocalizedDecimalPointRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_UseLocalizedDecimalPointResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the StationOptions.UseLocalizedDecimalPoint property instead. 
  //
  rpc Set_UseLocalizedDecimalPoint(Engine_Set_UseLocalizedDecimalPointRequest) returns (Engine_Set_UseLocalizedDecimalPointResponse);
  rpc Get_UseLocalizedDecimalPoint(Engine_Get_UseLocalizedDecimalPointRequest) returns (Engine_Get_UseLocalizedDecimalPointResponse);
  
  
  // Property: GlobalsFile
  //
  // Returns the PropertyObjectFile that contains the test station global variables.
  //
  // Engine_Get_GlobalsFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_GlobalsFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectFileInstance - Returns the PropertyObjectFile that contains the test station global variables. 
  //
  rpc Get_GlobalsFile(Engine_Get_GlobalsFileRequest) returns (Engine_Get_GlobalsFileResponse);
  
  
  // Property: UsersFile
  //
  // Returns the PropertyObjectFile that contains the list of TestStand users and user groups.
  //
  // Sequence editors and user interfaces typically use this object to display users and user groups or to edit lists of users and user groups, their properties and privileges, and save those lists to disk.
  //
  // Engine_Get_UsersFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_UsersFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: UsersFileInstance - Returns the PropertyObjectFile that contains the list of TestStand users and user groups. 
  //
  rpc Get_UsersFile(Engine_Get_UsersFileRequest) returns (Engine_Get_UsersFileResponse);
  
  
  // Property: ConfigFile
  //
  // Note: This property is obsolete. Use the Engine.GetEngineConfigFile property instead.
  //
  // You can set the station options using the Station Options dialog box and the Search Directories dialog box.
  //
  // Engine_Get_ConfigFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_ConfigFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectFileInstance - Note: This property is obsolete. Use the Engine.GetEngineConfigFile property instead. 
  //
  rpc Get_ConfigFile(Engine_Get_ConfigFileRequest) returns (Engine_Get_ConfigFileResponse);
  
  
  // Property: SmallImageList
  //
  // Note: This property is obsolete. Use the Engine.SmallImageListEx property instead. Calling this property on a 64-bit instance of the TestStand Engine results in an error.
  //
  // Returns the Microsoft Windows handle for the TestStand list of small images.
  // The TestStand Engine maintains lists of images for all the icons from the <TestStand>\Components\Icons and "<TestStand Public>\Components\Icons directories and images you add using the Engine.AddImage method. TestStand separates the images according to size and places each image in the list of large images or in the list of small images.
  // This method returns a Windows handle, HIMAGELIST, for the list of small images. You can use the image list functions in the Microsoft Windows Platform Software Development Kit to access the images in the list. Use this property as an alternative to using the Images collection.
  // Note: You can access this image list only from the process that created it, which is the process that created the engine.
  //
  // Engine_Get_SmallImageListRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_SmallImageListResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Note: This property is obsolete. Use the Engine.SmallImageListEx property instead. Calling this property on a 64-bit instance of the TestStand Engine results in an error. 
  //
  rpc Get_SmallImageList(Engine_Get_SmallImageListRequest) returns (Engine_Get_SmallImageListResponse);
  
  
  // Property: LargeImageList
  //
  // Note: This property is obsolete. Use the Engine.LargeImageListEx property instead. Calling this property on a 64-bit instance of the TestStand Engine results in an error.
  //
  // Returns the Microsoft Windows handle for the TestStand list of large images.
  // The TestStand Engine maintains lists of images for all the icons from the <TestStand>\Components\Icons and <TestStand Public>\Components\Icons directories and images you add using the Engine.AddImage method. TestStand separates the images according to size and places each image in the list of large images or in the list of small images.
  // This method returns a Windows handle, HIMAGELIST, for the list of large images. You can use the image list functions in the Microsoft Windows Platform Software Development Kit to access the images in the list. Use this property as an alternative to using the Images collection.
  // Note: You can access this image list only from the process that created it, which is the process that created the engine.
  //
  // Engine_Get_LargeImageListRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_LargeImageListResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Note: This property is obsolete. Use the Engine.LargeImageListEx property instead. Calling this property on a 64-bit instance of the TestStand Engine results in an error. 
  //
  rpc Get_LargeImageList(Engine_Get_LargeImageListRequest) returns (Engine_Get_LargeImageListResponse);
  
  
  // Property: DefaultAdapterIndex
  //
  // Specifies the index of the default module adapter TestStand uses to create steps.
  //
  // TestStand maintains a list of available module adapters. The adapter this property specifies is designated as the default adapter. This property contains the list index of the default module adapter. Use the Engine.GetAdapter method to obtain a module adapter object by index. The Engine.DefaultAdapter property indicates the key name of the default modules adapter.
  //
  // Engine_Set_DefaultAdapterIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - index: int32 - Specifies the index of the default module adapter TestStand uses to create steps. 
  //
  // Engine_Set_DefaultAdapterIndexResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_DefaultAdapterIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_DefaultAdapterIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the index of the default module adapter TestStand uses to create steps. 
  //
  rpc Set_DefaultAdapterIndex(Engine_Set_DefaultAdapterIndexRequest) returns (Engine_Set_DefaultAdapterIndexResponse);
  rpc Get_DefaultAdapterIndex(Engine_Get_DefaultAdapterIndexRequest) returns (Engine_Get_DefaultAdapterIndexResponse);
  
  
  // Property: CurrentWorkspaceFile
  //
  // Specifies the current workspace file.
  //
  // Use this property to establish a connection to the source code control provider specified in the workspace file. If no current workspace file exists, this property is a NULL dispatch pointer or object reference. To disconnect the current source code control provider, set this property to NULL.
  //
  // Engine_Set_CurrentWorkspaceFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - val: WorkspaceFileInstance - Specifies the current workspace file. 
  //
  // Engine_Set_CurrentWorkspaceFileResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_CurrentWorkspaceFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_CurrentWorkspaceFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: WorkspaceFileInstance - Specifies the current workspace file. 
  //
  rpc Set_CurrentWorkspaceFile(Engine_Set_CurrentWorkspaceFileRequest) returns (Engine_Set_CurrentWorkspaceFileResponse);
  rpc Get_CurrentWorkspaceFile(Engine_Get_CurrentWorkspaceFileRequest) returns (Engine_Get_CurrentWorkspaceFileResponse);
  
  
  // Property: SecondsSinceStart
  //
  // Returns the number of seconds since you created the engine.
  //
  // Engine_Get_SecondsSinceStartRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_SecondsSinceStartResponse - The response message from the server. It provides the return value.
  //    - returnValue: double - Returns the number of seconds since you created the engine. 
  //
  rpc Get_SecondsSinceStart(Engine_Get_SecondsSinceStartRequest) returns (Engine_Get_SecondsSinceStartResponse);
  
  
  // Property: CheckOutFilesWhenEdited
  //
  // Note: This property is obsolete. Use the StationOptions.CheckOutFilesWhenEdited property instead.
  //
  // Specifies if the sequence editor checks a file out from source code control when you attempt to modify the file in the sequence editor.
  // The default value is True. When this property is True while a current workspace is specified, attempts to edit a file that is checked in the sequence editor launch a prompt to check the file out from source code control. If this property is False, the sequence editor edits the file without checking the file out.
  //
  // Engine_Set_CheckOutFilesWhenEditedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - checkOutFiles: bool - Note: This property is obsolete. Use the StationOptions.CheckOutFilesWhenEdited property instead. 
  //
  // Engine_Set_CheckOutFilesWhenEditedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_CheckOutFilesWhenEditedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_CheckOutFilesWhenEditedResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the StationOptions.CheckOutFilesWhenEdited property instead. 
  //
  rpc Set_CheckOutFilesWhenEdited(Engine_Set_CheckOutFilesWhenEditedRequest) returns (Engine_Set_CheckOutFilesWhenEditedResponse);
  rpc Get_CheckOutFilesWhenEdited(Engine_Get_CheckOutFilesWhenEditedRequest) returns (Engine_Get_CheckOutFilesWhenEditedResponse);
  
  
  // Property: CheckOutOnlySelectedFiles
  //
  // Note: This property is obsolete. Use the StationOptions.CheckOutOnlySelectedFiles property instead.
  //
  // A workspace file contains a list of project files, each project file contains a lists of sequence files, and a sequence file can contain lists of code modules and other files. When you set this option to True, the sequence editor displays only the selected file, such as a project file, in the Source Code Control Operations dialog box. When this option is False, the sequence editor displays the selected item and all the items it contains in the Source Code Control Operations dialog box.
  //
  // Engine_Set_CheckOutOnlySelectedFilesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - onlySelectedFiles: bool - Note: This property is obsolete. Use the StationOptions.CheckOutOnlySelectedFiles property instead. 
  //
  // Engine_Set_CheckOutOnlySelectedFilesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_CheckOutOnlySelectedFilesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_CheckOutOnlySelectedFilesResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the StationOptions.CheckOutOnlySelectedFiles property instead. 
  //
  rpc Set_CheckOutOnlySelectedFiles(Engine_Set_CheckOutOnlySelectedFilesRequest) returns (Engine_Set_CheckOutOnlySelectedFilesResponse);
  rpc Get_CheckOutOnlySelectedFiles(Engine_Get_CheckOutOnlySelectedFilesRequest) returns (Engine_Get_CheckOutOnlySelectedFilesResponse);
  
  
  // Property: LastWorkspacePath
  //
  // Specifies the pathname of the workspace file that was open when the sequence editor last shut down.
  //
  // When the sequence editor shuts down, it sets this property to the pathname of the current workspace file. If no workspace file is currently open, the sequence editor sets this property to an empty string. If the StationOptions.ReloadWorkspaceAtStartup property is True, the sequence editor loads the workspace file that the last workspace pathname specifies.
  //
  // Engine_Set_LastWorkspacePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - pathString: string - Specifies the pathname of the workspace file that was open when the sequence editor last shut down. 
  //
  // Engine_Set_LastWorkspacePathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_LastWorkspacePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_LastWorkspacePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the pathname of the workspace file that was open when the sequence editor last shut down. 
  //
  rpc Set_LastWorkspacePath(Engine_Set_LastWorkspacePathRequest) returns (Engine_Set_LastWorkspacePathResponse);
  rpc Get_LastWorkspacePath(Engine_Get_LastWorkspacePathRequest) returns (Engine_Get_LastWorkspacePathResponse);
  
  
  // Property: PromptWhenAddingFilesToSC
  //
  // Note: This property is obsolete. Use the StationOptions.PromptWhenAddingFilesToSC property instead.
  //
  // Specifies if the sequence editor prompts you to add files to source code control when you add files to a workspace.
  // When this option is True, the sequence editor launches a dialog box in which you can add files to source code control whenever you add them to a workspace file. When this option is False, the sequence editor does not launch a dialog box.
  //
  // Engine_Set_PromptWhenAddingFilesToSCRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - promptAddFile: bool - Note: This property is obsolete. Use the StationOptions.PromptWhenAddingFilesToSC property instead. 
  //
  // Engine_Set_PromptWhenAddingFilesToSCResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_PromptWhenAddingFilesToSCRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_PromptWhenAddingFilesToSCResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the StationOptions.PromptWhenAddingFilesToSC property instead. 
  //
  rpc Set_PromptWhenAddingFilesToSC(Engine_Set_PromptWhenAddingFilesToSCRequest) returns (Engine_Set_PromptWhenAddingFilesToSCResponse);
  rpc Get_PromptWhenAddingFilesToSC(Engine_Get_PromptWhenAddingFilesToSCRequest) returns (Engine_Get_PromptWhenAddingFilesToSCResponse);
  
  
  // Property: ReloadDocsWhenOpeningWorkspace
  //
  // Note: This property is obsolete. Use the StationOptions.ReloadDocsWhenOpeningWorkspace property instead.
  //
  // Specifies if the sequence editor opens the documents that were open when the workspace was unloaded.
  // If this property is True and you open a workspace file, the sequence editor opens the documents that were open when the workspace file was last closed.
  //
  // Engine_Set_ReloadDocsWhenOpeningWorkspaceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - reloadDocs: bool - Note: This property is obsolete. Use the StationOptions.ReloadDocsWhenOpeningWorkspace property instead. 
  //
  // Engine_Set_ReloadDocsWhenOpeningWorkspaceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_ReloadDocsWhenOpeningWorkspaceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_ReloadDocsWhenOpeningWorkspaceResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the StationOptions.ReloadDocsWhenOpeningWorkspace property instead. 
  //
  rpc Set_ReloadDocsWhenOpeningWorkspace(Engine_Set_ReloadDocsWhenOpeningWorkspaceRequest) returns (Engine_Set_ReloadDocsWhenOpeningWorkspaceResponse);
  rpc Get_ReloadDocsWhenOpeningWorkspace(Engine_Get_ReloadDocsWhenOpeningWorkspaceRequest) returns (Engine_Get_ReloadDocsWhenOpeningWorkspaceResponse);
  
  
  // Property: ReloadWorkspaceAtStartup
  //
  // Note: This property is obsolete. Use the StationOptions.ReloadWorkspaceAtStartup property instead.
  //
  // Specifies if the sequence editor opens the last workspace file when it launches.
  // If this option is True when the sequence editor launches, the sequence editor loads the workspace file the Engine.LastWorkspacePath property specifies.
  //
  // Engine_Set_ReloadWorkspaceAtStartupRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - reloadWorkspace: bool - Note: This property is obsolete. Use the StationOptions.ReloadWorkspaceAtStartup property instead. 
  //
  // Engine_Set_ReloadWorkspaceAtStartupResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_ReloadWorkspaceAtStartupRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_ReloadWorkspaceAtStartupResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the StationOptions.ReloadWorkspaceAtStartup property instead. 
  //
  rpc Set_ReloadWorkspaceAtStartup(Engine_Set_ReloadWorkspaceAtStartupRequest) returns (Engine_Set_ReloadWorkspaceAtStartupResponse);
  rpc Get_ReloadWorkspaceAtStartup(Engine_Get_ReloadWorkspaceAtStartupRequest) returns (Engine_Get_ReloadWorkspaceAtStartupResponse);
  
  
  // Property: UseDialogForCheckOut
  //
  // Note: This property is obsolete. Use the StationOptions.UseDialogForCheckOut property instead.
  //
  // Specifies if the sequence editor launches a dialog box to check out files from source code control.
  // When this property is True, the sequence editor always launches a dialog box when you check out files from source code control. When this property is False, the sequence editor checks out the files without launching a dialog box.
  //
  // Engine_Set_UseDialogForCheckOutRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - useDialog: bool - Note: This property is obsolete. Use the StationOptions.UseDialogForCheckOut property instead. 
  //
  // Engine_Set_UseDialogForCheckOutResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_UseDialogForCheckOutRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_UseDialogForCheckOutResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the StationOptions.UseDialogForCheckOut property instead. 
  //
  rpc Set_UseDialogForCheckOut(Engine_Set_UseDialogForCheckOutRequest) returns (Engine_Set_UseDialogForCheckOutResponse);
  rpc Get_UseDialogForCheckOut(Engine_Get_UseDialogForCheckOutRequest) returns (Engine_Get_UseDialogForCheckOutResponse);
  
  
  // Property: ShowHiddenProperties
  //
  // Note: This property is obsolete. Use the StationOptions.ShowHiddenProperties property instead.
  //
  // Specifies whether to display in user interfaces properties marked as hidden.
  // When this property is True, the sequence editor and user interfaces display all subproperties of property objects in dialog boxes and variables views. When this property is False, the sequence editor does not show subproperties marked with the PropFlags_Hidden flag.
  //
  // Engine_Set_ShowHiddenPropertiesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - show: bool - Note: This property is obsolete. Use the StationOptions.ShowHiddenProperties property instead. 
  //
  // Engine_Set_ShowHiddenPropertiesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_ShowHiddenPropertiesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_ShowHiddenPropertiesResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the StationOptions.ShowHiddenProperties property instead. 
  //
  rpc Set_ShowHiddenProperties(Engine_Set_ShowHiddenPropertiesRequest) returns (Engine_Set_ShowHiddenPropertiesResponse);
  rpc Get_ShowHiddenProperties(Engine_Get_ShowHiddenPropertiesRequest) returns (Engine_Get_ShowHiddenPropertiesResponse);
  
  
  // Property: ComputerName
  //
  // Returns the name of the computer on which the TestStand Engine was created.
  //
  // Engine_Get_ComputerNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_ComputerNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the computer on which the TestStand Engine was created. 
  //
  rpc Get_ComputerName(Engine_Get_ComputerNameRequest) returns (Engine_Get_ComputerNameResponse);
  
  
  // Property: UniqueEngineId
  //
  // Returns an identification string that is unique among all instances of the TestStand Engine.
  //
  // Use this string to uniquely identify a particular instance of an engine. The returned string is a representation of a UUID or GUID, such as "6B29FC40-CA47-1067-B31D-00DD010662DA."
  //
  // Engine_Get_UniqueEngineIdRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_UniqueEngineIdResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns an identification string that is unique among all instances of the TestStand Engine. 
  //
  rpc Get_UniqueEngineId(Engine_Get_UniqueEngineIdRequest) returns (Engine_Get_UniqueEngineIdResponse);
  
  
  // Property: CVIAdapter_ExternalCVIPrj
  //
  // Note: This property is obsolete. Use the CVIAdapter.ExecutionServerProjectPathName property instead.
  //
  // Changes the project in which LabWindows/CVI Adapter steps are executed when the CVIAdapter.ExecuteStepsInCVI property is True.
  // The value of this property can be a relative or absolute path. If you specify a relative path, TestStand looks in the search directories for the file.
  // Note: The CVIAdapter_ExecuteStepsInCVI property is obsolete. Use the CVIAdapter.ExecuteStepsInExternalInstance property instead.
  //
  // Engine_Set_CVIAdapter_ExternalCVIPrjRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - val: string - Note: This property is obsolete. Use the CVIAdapter.ExecutionServerProjectPathName property instead. 
  //
  // Engine_Set_CVIAdapter_ExternalCVIPrjResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_CVIAdapter_ExternalCVIPrjRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_CVIAdapter_ExternalCVIPrjResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Note: This property is obsolete. Use the CVIAdapter.ExecutionServerProjectPathName property instead. 
  //
  rpc Set_CVIAdapter_ExternalCVIPrj(Engine_Set_CVIAdapter_ExternalCVIPrjRequest) returns (Engine_Set_CVIAdapter_ExternalCVIPrjResponse);
  rpc Get_CVIAdapter_ExternalCVIPrj(Engine_Get_CVIAdapter_ExternalCVIPrjRequest) returns (Engine_Get_CVIAdapter_ExternalCVIPrjResponse);
  
  
  // Property: CVIAdapter_ExecuteStepsInCVI
  //
  // Note: This property is obsolete. Use the CVIAdapter.ExecuteStepsInExternalInstance property instead.
  //
  // Indicates whether the LabWindows/CVI Adapter executes steps in an external LabWindows/CVI process rather than internally.
  // While running steps in an external LabWindows/CVI process is slower, you can use this property to debug steps more easily. Changing this setting causes all modules to be unloaded.
  //
  // Engine_Set_CVIAdapter_ExecuteStepsInCVIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - val: bool - Note: This property is obsolete. Use the CVIAdapter.ExecuteStepsInExternalInstance property instead. 
  //
  // Engine_Set_CVIAdapter_ExecuteStepsInCVIResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_CVIAdapter_ExecuteStepsInCVIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_CVIAdapter_ExecuteStepsInCVIResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the CVIAdapter.ExecuteStepsInExternalInstance property instead. 
  //
  rpc Set_CVIAdapter_ExecuteStepsInCVI(Engine_Set_CVIAdapter_ExecuteStepsInCVIRequest) returns (Engine_Set_CVIAdapter_ExecuteStepsInCVIResponse);
  rpc Get_CVIAdapter_ExecuteStepsInCVI(Engine_Get_CVIAdapter_ExecuteStepsInCVIRequest) returns (Engine_Get_CVIAdapter_ExecuteStepsInCVIResponse);
  
  
  // Property: RequireUserLogin
  //
  // Note: This property is obsolete. Use the StationOptions.RequireUserLogin property instead.
  //
  // Specifies if the sequence editor or user interfaces require that a user be logged in.
  // TestStand uses this property only when Engine.EnableUserPrivilegeChecking is True. When this property is True, TestStand disables the user interfaces until a user successfully logs in.
  // Note: The Engine.EnableUserPrivilegeChecking property is obsolete. Use the StationOptions.EnableUserPrivilegeChecking property instead.
  //
  // Engine_Set_RequireUserLoginRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - requireUser: bool - Note: This property is obsolete. Use the StationOptions.RequireUserLogin property instead. 
  //
  // Engine_Set_RequireUserLoginResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_RequireUserLoginRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_RequireUserLoginResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use the StationOptions.RequireUserLogin property instead. 
  //
  rpc Set_RequireUserLogin(Engine_Set_RequireUserLoginRequest) returns (Engine_Set_RequireUserLoginResponse);
  rpc Get_RequireUserLogin(Engine_Get_RequireUserLoginRequest) returns (Engine_Get_RequireUserLoginResponse);
  
  
  // Property: FileDialogDirHistoryList
  //
  // Specifies the list of directories to display in the directory history list in the File dialog box.
  //
  // The dialog box the Engine.DisplayFileDialog method launches has a directory history control that lists the directories that the user most recently visited.  Use this property to customize the contents of that control. When the dialog box opens, it initializes the control with the values specified by this property. When the dialog box closes, it updates this property to contain the current contents of the control.
  //
  // Engine_Set_FileDialogDirHistoryListRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - directories: repeated string - Specifies the list of directories to display in the directory history list in the File dialog box. 
  //
  // Engine_Set_FileDialogDirHistoryListResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_FileDialogDirHistoryListRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_FileDialogDirHistoryListResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated string - Specifies the list of directories to display in the directory history list in the File dialog box. 
  //
  rpc Set_FileDialogDirHistoryList(Engine_Set_FileDialogDirHistoryListRequest) returns (Engine_Set_FileDialogDirHistoryListResponse);
  rpc Get_FileDialogDirHistoryList(Engine_Get_FileDialogDirHistoryListRequest) returns (Engine_Get_FileDialogDirHistoryListResponse);
  
  
  // Property: StationID
  //
  // Note: This property is obsolete. Use the StationOptions.StationID property instead.
  //
  // Specifies a test station identification string for this instance of the TestStand Engine.
  // Note: This property never returns an empty string. If you set this property to an empty string, the property returns the same value as the Engine.ComputerName property.
  //
  // Engine_Set_StationIDRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - val: string - Note: This property is obsolete. Use the StationOptions.StationID property instead. 
  //
  // Engine_Set_StationIDResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_StationIDRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_StationIDResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Note: This property is obsolete. Use the StationOptions.StationID property instead. 
  //
  rpc Set_StationID(Engine_Set_StationIDRequest) returns (Engine_Set_StationIDResponse);
  rpc Get_StationID(Engine_Get_StationIDRequest) returns (Engine_Get_StationIDResponse);
  
  
  // Property: NumImages
  //
  // Returns the number of images in the large and small image lists.
  //
  // Engine_Get_NumImagesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_NumImagesResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of images in the large and small image lists. 
  //
  rpc Get_NumImages(Engine_Get_NumImagesRequest) returns (Engine_Get_NumImagesResponse);
  
  
  // Property: SeqFileVersionAutoIncrementOpt
  //
  // Note: This property is obsolete. Use the StationOptions.SeqFileVersionAutoIncrementOpt property instead.
  //
  // Specifies if sequence file versions are automatically incremented when the file is saved.
  //
  // Engine_Set_SeqFileVersionAutoIncrementOptRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - option: FileVersionAutoIncrement - Note: This property is obsolete. Use the StationOptions.SeqFileVersionAutoIncrementOpt property instead. 
  //
  // Engine_Set_SeqFileVersionAutoIncrementOptResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_SeqFileVersionAutoIncrementOptRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_SeqFileVersionAutoIncrementOptResponse - The response message from the server. It provides the return value.
  //    - returnValue: FileVersionAutoIncrement - Note: This property is obsolete. Use the StationOptions.SeqFileVersionAutoIncrementOpt property instead. 
  //
  rpc Set_SeqFileVersionAutoIncrementOpt(Engine_Set_SeqFileVersionAutoIncrementOptRequest) returns (Engine_Set_SeqFileVersionAutoIncrementOptResponse);
  rpc Get_SeqFileVersionAutoIncrementOpt(Engine_Get_SeqFileVersionAutoIncrementOptRequest) returns (Engine_Get_SeqFileVersionAutoIncrementOptResponse);
  
  
  // Property: TemporaryGlobals
  //
  // Creates and accesses global variables that you want to exist only for the current run of the TestStand Engine.
  //
  // These globals differ from those you access with the Engine.Globals property in that TestStand never writes these globals to disk.
  //
  // Engine_Get_TemporaryGlobalsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_TemporaryGlobalsResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Creates and accesses global variables that you want to exist only for the current run of the TestStand Engine. 
  //
  rpc Get_TemporaryGlobals(Engine_Get_TemporaryGlobalsRequest) returns (Engine_Get_TemporaryGlobalsResponse);
  
  
  // Property: RTEOption
  //
  // Note: This property is obsolete. Use the StationOptions.RTEOption property instead.
  //
  // Specifies the default behavior of TestStand when a run-time error occurs in an execution.
  // Note: This property replaces the more limited BreakOnRTE property and offers a superset of the functionality.
  //
  // Engine_Set_RTEOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - option: RTEOptions - Note: This property is obsolete. Use the StationOptions.RTEOption property instead. 
  //
  // Engine_Set_RTEOptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_RTEOptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_RTEOptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: RTEOptions - Note: This property is obsolete. Use the StationOptions.RTEOption property instead. 
  //
  rpc Set_RTEOption(Engine_Set_RTEOptionRequest) returns (Engine_Set_RTEOptionResponse);
  rpc Get_RTEOption(Engine_Get_RTEOptionRequest) returns (Engine_Get_RTEOptionResponse);
  
  
  // Property: SecondsSince1970UniversalCoordinatedTime
  //
  // Returns the time in seconds since midnight (00:00:00), January 1, 1970, coordinated universal time (UTC). UTC is also known as Greenwich mean time.
  // 
  // 
  //
  // Engine_Get_SecondsSince1970UniversalCoordinatedTimeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_SecondsSince1970UniversalCoordinatedTimeResponse - The response message from the server. It provides the return value.
  //    - returnValue: double - Returns the time in seconds since midnight (00:00:00), January 1, 1970, coordinated universal time (UTC). UTC is also known as Greenwich mean time.   
  //
  rpc Get_SecondsSince1970UniversalCoordinatedTime(Engine_Get_SecondsSince1970UniversalCoordinatedTimeRequest) returns (Engine_Get_SecondsSince1970UniversalCoordinatedTimeResponse);
  
  
  // Property: StationModelSequenceFilePath
  //
  // Note: This property is obsolete. Use the StationOptions.StationModelSequenceFilePath property instead.
  //
  // Specifies the pathname of the station model sequence file.
  // Note: This property is a relative pathname. TestStand uses the Engine.FindFileEx method to determine the absolute pathname of the station model sequence file.
  //
  // Engine_Set_StationModelSequenceFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - ModelPath: string - Note: This property is obsolete. Use the StationOptions.StationModelSequenceFilePath property instead. 
  //
  // Engine_Set_StationModelSequenceFilePathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_StationModelSequenceFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_StationModelSequenceFilePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Note: This property is obsolete. Use the StationOptions.StationModelSequenceFilePath property instead. 
  //
  rpc Set_StationModelSequenceFilePath(Engine_Set_StationModelSequenceFilePathRequest) returns (Engine_Set_StationModelSequenceFilePathResponse);
  rpc Get_StationModelSequenceFilePath(Engine_Get_StationModelSequenceFilePathRequest) returns (Engine_Get_StationModelSequenceFilePathResponse);
  
  
  // Property: SearchDirectories
  //
  // Returns a reference to the SearchDirectories object. This object is a collection that contains a list of the current search directories.
  //
  // You must obtain the search directory collection before adding or modifying a search directory.
  //
  // Engine_Get_SearchDirectoriesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_SearchDirectoriesResponse - The response message from the server. It provides the return value.
  //    - returnValue: SearchDirectoriesInstance - Returns a reference to the SearchDirectories object. This object is a collection that contains a list of the current search directories. 
  //
  rpc Get_SearchDirectories(Engine_Get_SearchDirectoriesRequest) returns (Engine_Get_SearchDirectoriesResponse);
  
  
  // Property: ExternalReportViewers
  //
  // Returns a reference to the ExternalReportViewers object, which is a collection that contains a list of the current external report viewers.
  //
  // You must obtain the external report viewer collection before adding or modifying an external report viewer.
  //
  // Engine_Get_ExternalReportViewersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_ExternalReportViewersResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExternalReportViewersInstance - Returns a reference to the ExternalReportViewers object, which is a collection that contains a list of the current external report viewers. 
  //
  rpc Get_ExternalReportViewers(Engine_Get_ExternalReportViewersRequest) returns (Engine_Get_ExternalReportViewersResponse);
  
  
  // Property: StationOptions
  //
  // Returns a reference to the StationOptions object.
  //
  // Use the StationOptions object to set preferences for the TestStand station. Station option settings affect all sequence editor and user interface sessions you run on the computer.
  //
  // Engine_Get_StationOptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_StationOptionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: StationOptionsInstance - Returns a reference to the StationOptions object. 
  //
  rpc Get_StationOptions(Engine_Get_StationOptionsRequest) returns (Engine_Get_StationOptionsResponse);
  
  
  // Property: Images
  //
  // Returns a reference to an Images object, which is a collection that contains a list of images. The collection specifies the images that TestStand loads from the <TestStand>\Components\Icons and <TestStand Public>\Components\Icons directories, as well as images you add using the Engine.AddImage method. Use the Images.FindImage method to find an image using an image name.
  //
  // You must obtain the Images collection before accessing an image. Use the Images collection as an alternative to the Engine.LargeImageListEx and Engine.SmallImageListEx properties.
  //
  // Engine_Get_ImagesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_ImagesResponse - The response message from the server. It provides the return value.
  //    - returnValue: ImagesInstance - Returns a reference to an Images object, which is a collection that contains a list of images. The collection specifies the images that TestStand loads from the <TestStand>\Components\Icons and <TestStand Public>\Components\Icons directories, as well as images you add using the Engine.AddImage method. Use the Images.FindImage method to find an image using an image name. 
  //
  rpc Get_Images(Engine_Get_ImagesRequest) returns (Engine_Get_ImagesResponse);
  
  
  // Property: WatchExpressionsEnabled
  //
  // Specifies if the TestStand Engine evaluates watch expressions after each step executes in an execution. Applications that support watch expressions, such as the sequence editor, set this property to True. This property is not persisted and defaults to False for each instance of the engine.
  //
  // Engine_Set_WatchExpressionsEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - enable: bool - Specifies if the TestStand Engine evaluates watch expressions after each step executes in an execution. Applications that support watch expressions, such as the sequence editor, set this property to True. This property is not persisted and defaults to False for each instance of the engine. 
  //
  // Engine_Set_WatchExpressionsEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_WatchExpressionsEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_WatchExpressionsEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies if the TestStand Engine evaluates watch expressions after each step executes in an execution. Applications that support watch expressions, such as the sequence editor, set this property to True. This property is not persisted and defaults to False for each instance of the engine. 
  //
  rpc Set_WatchExpressionsEnabled(Engine_Set_WatchExpressionsEnabledRequest) returns (Engine_Set_WatchExpressionsEnabledResponse);
  rpc Get_WatchExpressionsEnabled(Engine_Get_WatchExpressionsEnabledRequest) returns (Engine_Get_WatchExpressionsEnabledResponse);
  
  
  // Property: LicenseType
  //
  // Returns the type of the license the TestStand Engine is using.
  //
  // Engine_Get_LicenseTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_LicenseTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: LicenseTypes - Returns the type of the license the TestStand Engine is using. 
  //
  rpc Get_LicenseType(Engine_Get_LicenseTypeRequest) returns (Engine_Get_LicenseTypeResponse);
  
  
  // Property: PersistBreakpoints
  //
  // Specifies whether the engine associates the list of breakpoints with the current workspace and automatically saves and reloads breakpoint lists when the current workspace changes. This property defaults to False for each instance of the engine. Applications that support breakpoint persistence, such as the sequence editor, should set this property to True. TestStand reads into memory the persisted breakpoint list when you change the option to True.
  //
  // When the engine unloads a workspace and this setting is True, the engine saves the current breakpoint list in an options file with the same name as the workspace and in the same directory as the workspace file. The engine also saves the current breakpoint list when you save the current workspace or any sequence file in the workspace or when you close any sequence file.
  // When the engine loads a new workspace and this setting is True, the engine automatically loads the breakpoint list previously saved in the options file. Otherwise, the engine keeps the current breakpoint list.
  // If no current workspace is loaded, the engine persists the breakpoint list to a default options file.
  // TestStand persists only breakpoints that apply to sequence files. TestStand does not persist breakpoints associated with executions.
  //
  // Engine_Set_PersistBreakpointsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - returnVal: bool - Specifies whether the engine associates the list of breakpoints with the current workspace and automatically saves and reloads breakpoint lists when the current workspace changes. This property defaults to False for each instance of the engine. Applications that support breakpoint persistence, such as the sequence editor, should set this property to True. TestStand reads into memory the persisted breakpoint list when you change the option to True. 
  //
  // Engine_Set_PersistBreakpointsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_PersistBreakpointsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_PersistBreakpointsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the engine associates the list of breakpoints with the current workspace and automatically saves and reloads breakpoint lists when the current workspace changes. This property defaults to False for each instance of the engine. Applications that support breakpoint persistence, such as the sequence editor, should set this property to True. TestStand reads into memory the persisted breakpoint list when you change the option to True. 
  //
  rpc Set_PersistBreakpoints(Engine_Set_PersistBreakpointsRequest) returns (Engine_Set_PersistBreakpointsResponse);
  rpc Get_PersistBreakpoints(Engine_Get_PersistBreakpointsRequest) returns (Engine_Get_PersistBreakpointsResponse);
  
  
  // Property: PersistWatchExpressions
  //
  // Specifies whether the engine associates the list of watch expressions with the current workspace, and automatically saves and reloads the watch expression list when the current workspace changes. This property defaults to False for each instance of the engine. For applications that support watch expression persistence, such as the sequence editor, set this property to True. TestStand reads into memory the persisted watch expression when you change the option to True.
  //
  // When the engine unloads a workspace and this setting is True, the engine saves the current watch expression list in an options file with the same name as the workspace and in the same directory as the workspace file. The engine also saves the current watch expression list when you save the current workspace or any sequence file in the workspace or when you close any sequence file.
  // When the engine loads a new workspace and this setting is True, the engine automatically loads the watch expression list previously saved in the options file. Otherwise, the engine keeps the current watch expression list.
  // If no current workspace is loaded, the engine persists the watch expression list to a default options file.
  // TestStand persists only watch expressions that are not associated with a particular execution, such as when WatchExpression.ExecutionScope is NULL.
  //
  // Engine_Set_PersistWatchExpressionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - returnVal: bool - Specifies whether the engine associates the list of watch expressions with the current workspace, and automatically saves and reloads the watch expression list when the current workspace changes. This property defaults to False for each instance of the engine. For applications that support watch expression persistence, such as the sequence editor, set this property to True. TestStand reads into memory the persisted watch expression when you change the option to True. 
  //
  // Engine_Set_PersistWatchExpressionsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_PersistWatchExpressionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_PersistWatchExpressionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the engine associates the list of watch expressions with the current workspace, and automatically saves and reloads the watch expression list when the current workspace changes. This property defaults to False for each instance of the engine. For applications that support watch expression persistence, such as the sequence editor, set this property to True. TestStand reads into memory the persisted watch expression when you change the option to True. 
  //
  rpc Set_PersistWatchExpressions(Engine_Set_PersistWatchExpressionsRequest) returns (Engine_Set_PersistWatchExpressionsResponse);
  rpc Get_PersistWatchExpressions(Engine_Get_PersistWatchExpressionsRequest) returns (Engine_Get_PersistWatchExpressionsResponse);
  
  
  // Property: PersistConfigFile
  //
  // Specifies whether the engine automatically saves its configuration files:  StarupCfg.ini, GeneralEngine.cfg, Adapters.cfg, SearchDirectories.cfg, TypePalettes.cfg, and Custom.cfg. This property defaults to TrueTrue for each instance of the engine. Applications can set this property to False to prevent changes to configuration information from affecting future instances of the engine.
  //
  // Engine_Set_PersistConfigFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - returnVal: bool - Specifies whether the engine automatically saves its configuration files:  StarupCfg.ini, GeneralEngine.cfg, Adapters.cfg, SearchDirectories.cfg, TypePalettes.cfg, and Custom.cfg. This property defaults to TrueTrue for each instance of the engine. Applications can set this property to False to prevent changes to configuration information from affecting future instances of the engine. 
  //
  // Engine_Set_PersistConfigFileResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_PersistConfigFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_PersistConfigFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the engine automatically saves its configuration files:  StarupCfg.ini, GeneralEngine.cfg, Adapters.cfg, SearchDirectories.cfg, TypePalettes.cfg, and Custom.cfg. This property defaults to TrueTrue for each instance of the engine. Applications can set this property to False to prevent changes to configuration information from affecting future instances of the engine. 
  //
  rpc Set_PersistConfigFile(Engine_Set_PersistConfigFileRequest) returns (Engine_Set_PersistConfigFileResponse);
  rpc Get_PersistConfigFile(Engine_Get_PersistConfigFileRequest) returns (Engine_Get_PersistConfigFileResponse);
  
  
  // Property: OutputMessagesEnabled
  //
  // Specifies whether TestStand sends UIMsg_OutputMessages messages to the user interface. The default value is True.
  //
  // Independent of this property, TestStand always sends output messages to a debugger if you enable the DebugOptions_SendOutputMessagesToDebugger option of the StationOptions.DebugOptions property.
  //
  // Engine_Set_OutputMessagesEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - enable: bool - Specifies whether TestStand sends UIMsg_OutputMessages messages to the user interface. The default value is True. 
  //
  // Engine_Set_OutputMessagesEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_OutputMessagesEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_OutputMessagesEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether TestStand sends UIMsg_OutputMessages messages to the user interface. The default value is True. 
  //
  rpc Set_OutputMessagesEnabled(Engine_Set_OutputMessagesEnabledRequest) returns (Engine_Set_OutputMessagesEnabledResponse);
  rpc Get_OutputMessagesEnabled(Engine_Get_OutputMessagesEnabledRequest) returns (Engine_Get_OutputMessagesEnabledResponse);
  
  
  // Property: ApplicationLicense
  //
  // Returns the type of license the application is using. Use the Engine.AcquireLicense method to instruct TestStand to acquire a type of license for the application, and use the Engine.ReleaseLicense method to inform TestStand when an acquired license is no longer needed.
  //
  // Engine_Get_ApplicationLicenseRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_ApplicationLicenseResponse - The response message from the server. It provides the return value.
  //    - returnValue: ApplicationLicenses - Returns the type of license the application is using. Use the Engine.AcquireLicense method to instruct TestStand to acquire a type of license for the application, and use the Engine.ReleaseLicense method to inform TestStand when an acquired license is no longer needed. 
  //
  rpc Get_ApplicationLicense(Engine_Get_ApplicationLicenseRequest) returns (Engine_Get_ApplicationLicenseResponse);
  
  
  // Property: UndoLimit
  //
  // Specifies the maximum number of undo items an UndoStack can contain. The default value is -1, which means no limit exists to the number of undo items an UndoStack can contain.
  //
  // Setting this property does not remove undo items from UndoStacks. When you push an undo item onto an UndoStack, the UndoStack removes the oldest undo items from the UndoStack so that the number of items on the UndoStack does not exceed the UndoLimit.
  // The Engine initializes this property to -1. The Engine does not persist the value of this property.
  //
  // Engine_Set_UndoLimitRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - val: int32 - Specifies the maximum number of undo items an UndoStack can contain. The default value is -1, which means no limit exists to the number of undo items an UndoStack can contain. 
  //
  // Engine_Set_UndoLimitResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_UndoLimitRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_UndoLimitResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the maximum number of undo items an UndoStack can contain. The default value is -1, which means no limit exists to the number of undo items an UndoStack can contain. 
  //
  rpc Set_UndoLimit(Engine_Set_UndoLimitRequest) returns (Engine_Set_UndoLimitResponse);
  rpc Get_UndoLimit(Engine_Get_UndoLimitRequest) returns (Engine_Get_UndoLimitResponse);
  
  
  // Property: Utility
  //
  // Returns a reference to the Utility object, which you can use to access utility functions.
  //
  // Engine_Get_UtilityRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_UtilityResponse - The response message from the server. It provides the return value.
  //    - returnValue: UtilityInstance - Returns a reference to the Utility object, which you can use to access utility functions. 
  //
  rpc Get_Utility(Engine_Get_UtilityRequest) returns (Engine_Get_UtilityResponse);
  
  
  // Property: DotNetGarbageCollectionInterval
  //
  // Specifies the interval, in milliseconds, at which TestStand forces .NET garbage collection. Set this property to a value less than or equal to 0 to disable automatic garbage collection by the TestStand Engine. By default, in applications that use the TestStand ApplicationMgr control, this value is set to 3000 (3-second interval). In applications that do not use the ApplicationMgr control, this property is set to -1. Forcing garbage collection at regular intervals reduces memory usage and improves performance by ensuring that TestStand objects that have previously been referenced in .NET code are promptly freed or marked for reuse.
  //
  // If you use the default interval setting and notice constant CPU usage for the garbage collection the garbage collection timer performs, the following issues are the most likely causes:    * A significant number of managed objects (on the order of tens of millions or more)–If you have too many managed objects, increase the garbage collection interval.    * Leaking managed objects–Managed objects can leak as a result of unexpected unreleased references, such as references incurred when you add an event handler with an instance method. Use .NET leak detection tools to identify unreleased references.Note: The garbage collection this property handles applies only to the version of the .NET Common Language Runtime (CLR) the TestStand Engine uses directly. If you are using a different version of the .NET CLR for a user interface, implement a timer for garbage collection in which you call the .NET Framework    GC.Collect method to collect objects from that version of the .NET CLR.
  //
  // Engine_Set_DotNetGarbageCollectionIntervalRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - val: int32 - Specifies the interval, in milliseconds, at which TestStand forces .NET garbage collection. Set this property to a value less than or equal to 0 to disable automatic garbage collection by the TestStand Engine. By default, in applications that use the TestStand ApplicationMgr control, this value is set to 3000 (3-second interval). In applications that do not use the ApplicationMgr control, this property is set to -1. Forcing garbage collection at regular intervals reduces memory usage and improves performance by ensuring that TestStand objects that have previously been referenced in .NET code are promptly freed or marked for reuse. 
  //
  // Engine_Set_DotNetGarbageCollectionIntervalResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_DotNetGarbageCollectionIntervalRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_DotNetGarbageCollectionIntervalResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the interval, in milliseconds, at which TestStand forces .NET garbage collection. Set this property to a value less than or equal to 0 to disable automatic garbage collection by the TestStand Engine. By default, in applications that use the TestStand ApplicationMgr control, this value is set to 3000 (3-second interval). In applications that do not use the ApplicationMgr control, this property is set to -1. Forcing garbage collection at regular intervals reduces memory usage and improves performance by ensuring that TestStand objects that have previously been referenced in .NET code are promptly freed or marked for reuse. 
  //
  rpc Set_DotNetGarbageCollectionInterval(Engine_Set_DotNetGarbageCollectionIntervalRequest) returns (Engine_Set_DotNetGarbageCollectionIntervalResponse);
  rpc Get_DotNetGarbageCollectionInterval(Engine_Get_DotNetGarbageCollectionIntervalRequest) returns (Engine_Get_DotNetGarbageCollectionIntervalResponse);
  
  
  // Property: SecondsAtStartIn1970UniversalCoordinatedTime
  //
  // Returns the time in seconds at which the engine started since midnight (00:00:00), January 1, 1970, coordinated universal time (UTC). UTC is also known as Greenwich mean time.
  //
  // Some time values in TestStand, such as the TS.StartTime property of a step result, are in terms of seconds since the engine started. You can add the value of the Engine.SecondsAtStartIn1970UniversalCoordinatedTime property to these times to convert to a universal time base.
  //
  // Engine_Get_SecondsAtStartIn1970UniversalCoordinatedTimeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_SecondsAtStartIn1970UniversalCoordinatedTimeResponse - The response message from the server. It provides the return value.
  //    - returnValue: double - Returns the time in seconds at which the engine started since midnight (00:00:00), January 1, 1970, coordinated universal time (UTC). UTC is also known as Greenwich mean time. 
  //
  rpc Get_SecondsAtStartIn1970UniversalCoordinatedTime(Engine_Get_SecondsAtStartIn1970UniversalCoordinatedTimeRequest) returns (Engine_Get_SecondsAtStartIn1970UniversalCoordinatedTimeResponse);
  
  
  // Property: DotNetCLRVersion
  //
  // Returns the .NET Common Language Runtime version the TestStand Engine and the .NET Adapter use.
  //
  // Engine_Get_DotNetCLRVersionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_DotNetCLRVersionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the .NET Common Language Runtime version the TestStand Engine and the .NET Adapter use. 
  //
  rpc Get_DotNetCLRVersion(Engine_Get_DotNetCLRVersionRequest) returns (Engine_Get_DotNetCLRVersionResponse);
  
  
  // Property: BuildVersion
  //
  // Returns the build version number for the current version of TestStand.
  //
  // The full version number format is MajorVersion.MinorVersion.RevisionVersion.BuildVersion.
  //
  // Engine_Get_BuildVersionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_BuildVersionResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the build version number for the current version of TestStand. 
  //
  rpc Get_BuildVersion(Engine_Get_BuildVersionRequest) returns (Engine_Get_BuildVersionResponse);
  
  
  // Property: SmallImageListEx
  //
  // Returns the Microsoft Windows handle for the TestStand list of small images.
  //
  // The TestStand Engine maintains lists of images for all the icons from the <TestStand>\Components\Icons and "<TestStand Public>\Components\Icons directories and images you add using the Engine.AddImage method. TestStand separates the images according to size and places each image in the list of large images or in the list of small images.
  // This method returns a Windows handle, HIMAGELIST, for the list of small images. The type of the variant matches the architecture of the TestStand Engine, for example, VT_UI4 for 32-bit TestStand and VT_UI8 for 64-bit TestStand. You can use the image list functions in the Microsoft Windows Platform Software Development Kit to access the images in the list. Use this property as an alternative to using the Images collection.
  // Note: You can access this image list only from the process that created it, which is the process that created the engine.
  //
  // Engine_Get_SmallImageListExRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_SmallImageListExResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - Returns the Microsoft Windows handle for the TestStand list of small images. 
  //
  rpc Get_SmallImageListEx(Engine_Get_SmallImageListExRequest) returns (Engine_Get_SmallImageListExResponse);
  
  
  // Property: LargeImageListEx
  //
  // Returns the Microsoft Windows handle for the TestStand list of large images.
  //
  // The TestStand Engine maintains lists of images for all the icons from the <TestStand>\Components\Icons and <TestStand Public>\Components\Icons directories and images you add using the Engine.AddImage method. TestStand separates the images according to size and places each image in the list of large images or in the list of small images.
  // This method returns a Windows handle, HIMAGELIST, for the list of large images. The type of the variant matches the architecture of the TestStand Engine, for example, VT_UI4 for 32-bit TestStand and VT_UI8 for 64-bit TestStand. You can use the image list functions in the Microsoft Windows Platform Software Development Kit to access the images in the list. Use this property as an alternative to using the Images collection.
  // Note: You can access this image list only from the process that created it, which is the process that created the engine.
  //
  // Engine_Get_LargeImageListExRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_LargeImageListExResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - Returns the Microsoft Windows handle for the TestStand list of large images. 
  //
  rpc Get_LargeImageListEx(Engine_Get_LargeImageListExRequest) returns (Engine_Get_LargeImageListExResponse);
  
  
  // Property: Is64Bit
  //
  // Indicates whether this instance of the TestStand Engine is 64-bit.
  //
  // Engine_Get_Is64BitRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_Is64BitResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Indicates whether this instance of the TestStand Engine is 64-bit. 
  //
  rpc Get_Is64Bit(Engine_Get_Is64BitRequest) returns (Engine_Get_Is64BitResponse);
  
  
  // Property: ProfilingEnabled
  //
  // This property indicates whether profiling is enabled. Profiling is enabled when a call to Engine.BeginProfiling has not been balanced by a call to Engine.EndProfiling. If profiling is not enabled, calls to Engine.LogProfilerAction do nothing.
  //
  // Engine_Get_ProfilingEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_ProfilingEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - This property indicates whether profiling is enabled. Profiling is enabled when a call to Engine.BeginProfiling has not been balanced by a call to Engine.EndProfiling. If profiling is not enabled, calls to Engine.LogProfilerAction do nothing. 
  //
  rpc Get_ProfilingEnabled(Engine_Get_ProfilingEnabledRequest) returns (Engine_Get_ProfilingEnabledResponse);
  
  
  // Property: ProfilerOptions
  //
  // Specifies options that determine the types of data that profiling collects.
  //
  // Refer to ProfilerOptions. for a list of options. You can limit the types of data that profiling collects in order to reduce profiling overhead.
  //
  // Engine_Set_ProfilerOptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - val: int32 - Specifies options that determine the types of data that profiling collects. 
  //
  // Engine_Set_ProfilerOptionsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_ProfilerOptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_ProfilerOptionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies options that determine the types of data that profiling collects. 
  //
  rpc Set_ProfilerOptions(Engine_Set_ProfilerOptionsRequest) returns (Engine_Set_ProfilerOptionsResponse);
  rpc Get_ProfilerOptions(Engine_Get_ProfilerOptionsRequest) returns (Engine_Get_ProfilerOptionsResponse);
  
  
  // Property: ProfilerOutputMessageCategoryName
  //
  // Indicates the category name the TestStand engine assigns to the OutputMessages the Engine.LogProfilerAction method creates.
  //
  // Engine_Get_ProfilerOutputMessageCategoryNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_ProfilerOutputMessageCategoryNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Indicates the category name the TestStand engine assigns to the OutputMessages the Engine.LogProfilerAction method creates. 
  //
  rpc Get_ProfilerOutputMessageCategoryName(Engine_Get_ProfilerOutputMessageCategoryNameRequest) returns (Engine_Get_ProfilerOutputMessageCategoryNameResponse);
  
  
  // Property: ProfilerInputOutputCaptureMaximumTextLength
  //
  // Specifies the maximum text size per row of the Module Inputs and Outputs column on the Operations table.
  //
  // This property is the programmatic interface to the Limit Module Input/Output Text Length numeric control on the Configure Data Collection dialog box. A value of -1 indicates no limit.
  //
  // Engine_Set_ProfilerInputOutputCaptureMaximumTextLengthRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //    - val: int32 - Specifies the maximum text size per row of the Module Inputs and Outputs column on the Operations table. 
  //
  // Engine_Set_ProfilerInputOutputCaptureMaximumTextLengthResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Engine_Get_ProfilerInputOutputCaptureMaximumTextLengthRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_ProfilerInputOutputCaptureMaximumTextLengthResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the maximum text size per row of the Module Inputs and Outputs column on the Operations table. 
  //
  rpc Set_ProfilerInputOutputCaptureMaximumTextLength(Engine_Set_ProfilerInputOutputCaptureMaximumTextLengthRequest) returns (Engine_Set_ProfilerInputOutputCaptureMaximumTextLengthResponse);
  rpc Get_ProfilerInputOutputCaptureMaximumTextLength(Engine_Get_ProfilerInputOutputCaptureMaximumTextLengthRequest) returns (Engine_Get_ProfilerInputOutputCaptureMaximumTextLengthResponse);
  
  
  // Property: PatchVersion
  //
  // Returns the patch version number for the current version of TestStand.
  //
  // The version number is separate from the MajorVersion.MinorVersion.RevisionVersion format, such as 1.0.2. Instead, it appears as the 'f' number in patch releases, such as TestStand 2020 f1.
  // Note: Engine.PatchVersion does not correspond to Engine.RevisionVersion. Prior to TestStand 2016, the revision version sometimes indicated the service pack level. Starting with TestStand 2016, all service packs are reflected in Engine.MinorVersion and Engine.RevisionVersion is always 0.
  //
  // Engine_Get_PatchVersionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInstance - The id of the Engine object.
  //
  // Engine_Get_PatchVersionResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the patch version number for the current version of TestStand. 
  //
  rpc Get_PatchVersion(Engine_Get_PatchVersionRequest) returns (Engine_Get_PatchVersionResponse);
  
  

  // Event: UIMessageEvent
  //
  // Handles user interface message events as ActiveX events.
  //
  // You must implement this method if you are writing a user interface and you want to receive UIMessages as ActiveX events. If you are using the TestStand ActiveX control in Microsoft Visual Basic, double-click the TestStand control icon on the form to implement the ActiveX event callback.
  //
  // The event has a registration method and a reply method.
  // GetEvents_UIMessageEvent - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_UIMessageEvent - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // Engine_GetEvents_UIMessageEventRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: EngineInstance - The id of the Engine object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // Engine_GetEvents_UIMessageEventResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - msg: UIMessageInstance - The user interface message that TestStand passes to the event.
  //
  // Engine_ReplyToEvent_UIMessageEventRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // Engine_ReplyToEvent_UIMessageEventResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_UIMessageEvent(Engine_GetEvents_UIMessageEventRequest) returns (stream Engine_GetEvents_UIMessageEventResponse);
  rpc ReplyToEvent_UIMessageEvent(Engine_ReplyToEvent_UIMessageEventRequest) returns (Engine_ReplyToEvent_UIMessageEventResponse); 
  
  
}
message EngineInstance {
  // Specifies the handle of the Engine instance in the server.
  string id = 1;
}
message Engine_EngineRequest {
}

message Engine_EngineResponse {
  // The return type of the Engine object.
  EngineInstance returnValue = 1;
}

message Engine_NewCsvFileInputRecordStreamRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the absolute path to the CSV file.
  string absolutePath = 2;
}

message Engine_NewCsvFileInputRecordStreamResponse {
  // The return type of the CsvFileInputRecordStream object.
  CsvFileInputRecordStreamInstance returnValue = 1;
}

message Engine_NewCsvFileOutputRecordStreamRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the absolute path to the CSV file.
  string absolutePath = 2;
  // Specifies how to open the CSV file. Supported options include:FileOpenMode_NoOptions - Create the file if it does not exist.  Fail with a run-time error if the file exists.
  // FileOpenMode_Truncate - If the file exists, overwrite it deleting the previous contents.  Create a new file if it does not exist.
  // FileOpenMode_Append - If the file exists, append to the end of it, preserving the existing contents.  Create a new file if it does not exist.
  // FileOpenMode_Uniquify - Create a new file if it does not exist.  If a file with the specified path exists, attempt to make the file name unique by appending "_" (underscore) plus a numeric suffix to the file name.  For example, if AlreadyExists.csv already exists, AlreadyExists_2.csv is tried, then AlreadyExists_3.csv, etc. until a unique name has been found.  If a unique name is not found after 10000 attempts, the method fails and throws a runtime error.
  int32 openMode = 3;
}

message Engine_NewCsvFileOutputRecordStreamResponse {
  // The return type of the CsvFileOutputRecordStream object.
  CsvFileOutputRecordStreamInstance returnValue = 1;
}

message Engine_RegisterSequenceToExecuteOnCrashRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the pathname of the sequence file. If the pathname is relative, this method tries to find it using Engine.FindFileEx method.
  string seqFilePath = 2;
  // Specifies the name of the sequence to execute on TestStand application crash.
  string seqName = 3;
  // Specifies whether to load the sequence file in the external application after TestStand application crash or when sequence is registered. Pass 0 to specify the default behavior, or pass one or more CrashCallbackOptions. Use the bitwise-OR operator to specify multiple options.
  // 
  CrashCallbackOptions options = 4;
  // This parameter is reserved.
  optional int32 reserved = 5;
}

message Engine_RegisterSequenceToExecuteOnCrashResponse {
  // Returns the registration id for Engine.UnregisterSequenceToExecuteOnCrash.
  int32 returnValue = 1;
}

message Engine_UnregisterSequenceToExecuteOnCrashRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Pass the registrationId you receive as the return value from Engine.RegisterSequenceToExecuteOnCrash method.
  int32 registrationId = 2;
}

message Engine_UnregisterSequenceToExecuteOnCrashResponse {
}

message Engine_DisplayIOConfigurationOptionsDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_DisplayIOConfigurationOptionsDialogResponse {
  // Returns True if you click OK in the dialog box. Returns False if you click Cancel.
  bool returnValue = 1;
}

message Engine_DisplayErrorDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies the error message text to display in the dialog box.
  string errorMessage = 3;
  // Specifies the error code to display in the dialog box. If the error code is a TestStand error code and the errorMessage does not already contain the description of the error code, the dialog also displays the error code description.
  int32 errorCode = 4;
  // Specifies CommonDlgOption_NoOptions or CommonDlgOption_DisableGotoLocation.
  int32 dlgOptions = 5;
}

message Engine_DisplayErrorDialogResponse {
}

message Engine_DiffSequenceFilesRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies
  SequenceFileInstance sequenceFile1Param = 2;
  // Specifies
  SequenceFileInstance sequenceFile2Param = 3;
  // Specifies
  int32 options = 4;
}

message Engine_DiffSequenceFilesResponse {
  // The return type of the SequenceFileDiffer object.
  SequenceFileDifferInstance returnValue = 1;
}

message Engine_NewLocationsRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_NewLocationsResponse {
  // The return type of the Locations object.
  LocationsInstance returnValue = 1;
}

message Engine_NewUndoItemCreatorRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the kind of edit for which the UndoItemCreator creates an undo item.
  EditKinds kindParam = 2;
  // Specifies the file you are editing.
  PropertyObjectFileInstance editedFileParam = 3;
  // Specifies a string to use as the UndoDescription and RedoDescription of the undo item the UndoItemCreator creates. If you pass an empty string, the UndoItemCreator uses a default description.
  string editDescription = 4;
}

message Engine_NewUndoItemCreatorResponse {
  // The return type of the UndoItemCreator object.
  UndoItemCreatorInstance returnValue = 1;
}

message Engine_GetOutputMessagesRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_GetOutputMessagesResponse {
  // The return type of the OutputMessages object.
  OutputMessagesInstance returnValue = 1;
}

message Engine_NewOutputMessageRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the message text.
  string messageText = 2;
  // Specifies the category of the message. Applications typically use the category to filter or sort messages. If you do not specify a category, the output message is considered uncategorized. You can specify any value for this parameter.
  string categoryText = 3;
  // Specifies the severity of the output message.
  OutputMessageSeverityTypes Severity = 4;
  // Specifies the sequence context of the current execution, if available. TestStand extracts information from the sequence context to construct the OutputMessage.FileLocations and OutputMessage.ExecutionLocations properties for the new object.
  SequenceContextInstance SequenceContext = 5;
}

message Engine_NewOutputMessageResponse {
  // The return type of the OutputMessage object.
  OutputMessageInstance returnValue = 1;
}

message Engine_NewOutputMessagesRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_NewOutputMessagesResponse {
  // The return type of the OutputMessages object.
  OutputMessagesInstance returnValue = 1;
}

message Engine_NewUndoStackRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_NewUndoStackResponse {
  // The return type of the UndoStack object.
  UndoStackInstance returnValue = 1;
}

message Engine_ParseLookupStringRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the lookup string to parse.
  string lookupString = 2;
  // Specify any combination of ParseLookupStringOptions.
  ParseLookupStringOptions options = 3;
}

message Engine_ParseLookupStringResponse {
  // The return type of the String[] object.
  repeated string returnValue = 1;
}

message Engine_DisplaySaveOverOldFormatDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  string Path = 2;
  PerformActionOptions promptForOverwriteOption = 3;
  string dlgTitle = 4;
  int32 dlgOptions = 5;
}

message Engine_DisplaySaveOverOldFormatDialogResponse {
  PromptResults returnValue = 1;
  PerformActionOptions promptForOverwriteOption = 2;
}

message Engine_DisplayPreconditionBuilderDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies the initial precondition expression string for the dialog box. You can pass an empty string for this parameter. This string must be a localized expression.
  string preconditionExpr = 3;
  // Specifies the sequence the dialog box displays for building the precondition expression.
  SequenceInstance Sequence = 4;
  // Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWind. By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. Pass CommonDlgOption_ModalToAppMainWind if you want the dialog box to be modal with respect to the window handle of the AppMainHwnd property. Typically, you do not need to set this option.
  int32 dlgOptions = 5;
  // Specifies the context to use for browsing expressions.
  SequenceContextInstance SequenceContext = 6;
}

message Engine_DisplayPreconditionBuilderDialogResponse {
  // Returns True if you click OK in the dialog box. Returns False if you click Cancel.
  bool returnValue = 1;
  // Specifies the initial precondition expression string for the dialog box. You can pass an empty string for this parameter. This string must be a localized expression.
  string preconditionExpr = 2;
}

message Engine_DisplayConfigureTypePalettesDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWind. By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from the Engine.AppMainHwnd property. Pass CommonDlgOption_ModalToAppMainWind if you want a modal dialog box with respect to the window handle of the AppMainHwnd property. Typically, you do not need to set this option.
  int32 dlgOptions = 3;
}

message Engine_DisplayConfigureTypePalettesDialogResponse {
  // Returns True if you click OK in the dialog box. Returns False if you click Cancel.
  // Note: Even if this method returns False, modifications made to sequence files and type palettes might have been saved because some operations in the dialog box prompt you to save a type palette. Saving a type palette prompts you to increment a version number, which is an edit of the file for all files that reference the type.
  bool returnValue = 1;
}

message Engine_NewEvaluationTypesRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the value for the EvaluationTypes.PropertyValueTypeFlags property on the object this method returns.
  int32 initialPropertyValueTypes = 2;
}

message Engine_NewEvaluationTypesResponse {
  // The return type of the EvaluationTypes object.
  EvaluationTypesInstance returnValue = 1;
}

message Engine_DisplayEditNumericFormatDialogExRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // The numeric format string to edit. Enable EditNumFormat_AllowDefaultFormat if you want to pass an empty string.
  string NumericFormat = 3;
  // Specifies any combination of the EditNumericFormatOptions constants.
  EditNumericFormatOptions dlgOptions = 4;
  // Specifies a number to format initially in the dialog box.
  double sampleNumber = 5;
}

message Engine_DisplayEditNumericFormatDialogExResponse {
  // Returns True if you click OK in the dialog box. Returns False if you click Cancel.
  bool returnValue = 1;
  // The numeric format string to edit. Enable EditNumFormat_AllowDefaultFormat if you want to pass an empty string.
  string NumericFormat = 2;
  // Returns True if the returned format is valid, otherwise returns False.
  bool validFormat = 3;
}

message Engine_GetFileInformationRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the absolute pathname of the file.
  string Path = 2;
}

message Engine_GetFileInformationResponse {
  // Returns a new FileInformation object.
  FileInformationInstance returnValue = 1;
}

message Engine_DisplaySaveAsPreviousOverExistingFileDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  string Path = 2;
  string dlgTitle = 3;
}

message Engine_DisplaySaveAsPreviousOverExistingFileDialogResponse {
  PromptResults returnValue = 1;
}

message Engine_GetTemplatesFileRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies any combination of GetTemplatesFileOptions.
  GetTemplatesFileOptions options = 2;
}

message Engine_GetTemplatesFileResponse {
  // The file that contains the editing templates.
  PropertyObjectFileInstance returnValue = 1;
}

message Engine_AcquireLicenseRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the type of license to acquire.
  ApplicationLicenses license = 2;
  // Specifies one or more AcquireLicenseOptions options.
  AcquireLicenseOptions options = 3;
}

message Engine_AcquireLicenseResponse {
  // A handle to the acquired license.
  int32 returnValue = 1;
}

message Engine_ReleaseLicenseRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the license handle to release. Pass a handle the Engine.AcquireLicense method returned.
  int32 licenseHandle = 2;
  // Reserved for future use.
  int32 reserved = 3;
}

message Engine_ReleaseLicenseResponse {
}

message Engine_GetTestStandPathRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the TestStand directory to return.
  TestStandPaths testStandPath = 2;
}

message Engine_GetTestStandPathResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message Engine_ReadPropertyObjectFileRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the pathname of the file.
  string Path = 2;
  // Specifies how to handle type conflicts.
  TypeConflictHandlerTypes handlerType = 3;
  // Pass 0 to specify the default behavior or pass one or more ReadPropertyObjectFileOptions constants. Use the bitwise-OR operator to specify multiple options.
  ReadPropertyObjectFileOptions options = 4;
}

message Engine_ReadPropertyObjectFileResponse {
  // The newly created PropertyObjectFile object.
  PropertyObjectFileInstance returnValue = 1;
  // Returns True if the file has type conflicts and the user cancelled the operation.
  bool userCancelled = 2;
}

message Engine_GetTypesRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Reserved for future use.
  int32 reserved = 2;
}

message Engine_GetTypesResponse {
  // The return type of the TypeUsageList object.
  TypeUsageListInstance returnValue = 1;
}

message Engine_NewPropertyObjectTypeRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the value of the PropertyObjectType.ValueType property of the object this method creates. If you pass PropValType_NamedType, this method uses the type you specify with the TypeName parameter to determine the values of the properties of the PropertyObjectType object this method creates.
  PropertyValueTypes ValueType = 2;
  // Specifies the value of the PropertyObjectType.TypeName property of the object this method creates. If you pass PropValType_NamedType for the ValueType parameter, pass the name of a currently loaded type. Otherwise, pass an empty string. If you specify a type name, this method uses the type you specify to determine the values of the properties of the PropertyObjectType object this method creates instead of the other parameters you pass to this method.
  string TypeName = 3;
  // Specifies the value of the PropertyObjectType.ElementType property of the object this method creates. Pass a  PropertyObjectType object if you pass PropValType_Array for the ValueType parameter. Otherwise, pass NULL. Typically, you make another call to this method to create an object to pass for this parameter.
  PropertyObjectTypeInstance ElementType = 4;
  // Specifies the value of the PropertyObjectType.IsObject property of the object this method creates. Pass False for this parameter only to create an object for the type of an element of an array of numbers, Boolean values, strings, or references.
  bool IsObject = 5;
}

message Engine_NewPropertyObjectTypeResponse {
  // The return type of the PropertyObjectType object.
  PropertyObjectTypeInstance returnValue = 1;
}

message Engine_ClearFilePasswordCacheRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_ClearFilePasswordCacheResponse {
}

message Engine_NewResultLoggerRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_NewResultLoggerResponse {
  // The return type of the ResultLogger object.
  ResultLoggerInstance returnValue = 1;
}

message Engine_NewResultLogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_NewResultLogResponse {
  // The return type of the ResultLog object.
  ResultLogInstance returnValue = 1;
}

message Engine_DoDotNetGarbageCollectionRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Reserved for future use. You must always pass 0 for this parameter.
  int32 reserved = 2;
}

message Engine_DoDotNetGarbageCollectionResponse {
}

message Engine_DisplayPasswordProtectTypeDefinitionsDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies an array of type definitions for which you want to edit the password protection information.
  repeated PropertyObjectInstance typeDefinitions = 2;
  // Specifies the CommonDialogOptions option you want to use. Use the bitwise-OR operator to specify more than one option.
  CommonDialogOptions dlgOptions = 3;
}

message Engine_DisplayPasswordProtectTypeDefinitionsDialogResponse {
  // Returns True if the user clicked OK in the dialog box and False if the user clicked Cancel. When this method returns True, use the modifiedTypeDefinitions parameter to determine which types, if any, were modified.
  bool returnValue = 1;
  // Returns the subset of types you passed to the typeDefinitions parameter the user modified in the dialog box. The dialog box might modify only a subset of the types because some of the types might already use the settings the user specified.
  repeated PropertyObjectInstance modifiedTypeDefinitions = 2;
}

message Engine_DisplayUnlockTypeDefinitionsDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies an array of type definitions you want to unlock.
  repeated PropertyObjectInstance typeDefinitions = 2;
  // Specifies any combination of the LockUnlockDialogOptions constants.
  LockUnlockDialogOptions dlgOptions = 3;
}

message Engine_DisplayUnlockTypeDefinitionsDialogResponse {
  // Returns True if any types were unlocked in the Unlock Type Definitions dialog box, even if not all types were successfully unlocked or if the user clicked OK and no types needed to be unlocked because all the types were already unlocked or were not password-protected.
  bool returnValue = 1;
  // Returns True if all the types you passed to the typeDefinitions parameter were successfully unlocked, already unlocked, or not password-protected.
  bool allTypesUnlocked = 2;
}

message Engine_RegisterUIMessageCallbackExRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the address of the callback function. The type of the variant must match the pointer size for the current platform, for example VT_UI4 for 32-bit TestStand and VT_UI8 for 64-bit TestStand.
  optional int64 callbackFuncAddr = 2;
}

message Engine_RegisterUIMessageCallbackExResponse {
}

message Engine_ExpandPathMacrosRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // The path string in which to expand path macros. If TestStand expands the macros, it modifies this string.
  string pathString = 2;
}

message Engine_ExpandPathMacrosResponse {
  // Returns True if at least one macro was found and expanded. Returns False if no macros were expanded.
  bool returnValue = 1;
  // The path string in which to expand path macros. If TestStand expands the macros, it modifies this string.
  string pathString = 2;
}

message Engine_HasAddonLicenseRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the name of the feature to check the status of.
  string addonFeatureName = 2;
}

message Engine_HasAddonLicenseResponse {
  // Returns True if TestStand was able to successfully check out the specified addon license.
  bool returnValue = 1;
}

message Engine_BeginProfilingRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_BeginProfilingResponse {
}

message Engine_EndProfilingRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_EndProfilingResponse {
}

message Engine_SetModuleProfilingRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies which adapter for which to enable or disable profiler data collection. Pass an empty string to enable or disable profiling for all adapters.
  string AdapterKeyName = 2;
  // Specifies whether to enable or disable profiler data collection.
  bool enabled = 3;
}

message Engine_SetModuleProfilingResponse {
}

message Engine_GetModuleProfilingRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the adapter.
  string AdapterKeyName = 2;
}

message Engine_GetModuleProfilingResponse {
  // Returns whether the profiler collects timing information for code modules that the specified adapter loads and executes.
  bool returnValue = 1;
}

message Engine_LogProfilerActionRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Pass a ProfilerMechanisms constant, or a string that indicates the mechanism the profiler event is recording.
  string profilerMechanism = 2;
  // Pass an adapter key name, if applicable. If this value is not null or an empty string, the method stores it as a sub-property of the OutputMessage with a name defined by ProfilerOutputMessageSubProperty_AdapterKeyName.
  string AdapterKeyName = 3;
  // Pass the current SequenceContext, if applicable. Otherwise pass null or Nothing. This method uses the sequence context to determine location and test socket information for the source of profiler event.
  SequenceContextInstance sequenceContextParam = 4;
  // Pass the UniqueThreadId property of the current TestStand thread as a string. If the current thread is not a TestStand execution thread, pass the decimal formatted result of the Win32 GetCurrentThreadId function as a string with the following string appended: "|"
  string ThreadId = 5;
  // Pass the DisplayName property of the current TestStand thread. If the current thread is not a TestStand execution thread, pass the result of Engine.GetResourceString("PROFILER", "NON_EXECUTION_THREAD").
  string ThreadDisplayName = 6;
  // Pass the name of the item that generated the profiler event. This method stores the name as a sub-property of the OutputMessage with a name defined by ProfilerOutputMessageSubProperty_Name.
  string Name = 7;
  // Pass an element of the ProfilerStates enumeration that describes the transition that the profiler event records. This method stores the profilerState as a numeric sub-property of the OutputMessage with a name defined by ProfilerOutputMessageSubProperty_State.
  ProfilerStates synchronizationState = 8;
  // Pass a string that describes the operation that the profiler event is recording a transition for. If applicable, pass an element of the ProfilerOperations module. This method stores the operation as a sub-property of the OutputMessage with a name defined by ProfilerOutputMessageSubProperty_Operation.
  string operation = 9;
  // If you pass the value of ProfilerState_Blocked to profilerState, this method stores the value you pass to timeout as a numeric sub-property of the OutputMessage with a name defined by ProfilerOutputMessageSubProperty_TimeoutPeriod.
  double timeout = 10;
  // Specifies whether this method calls the Post method on the OutputMessage it creates. If you pass false, you must later call the Post method on the OutputMessage the method returns. Pass false if you need to add additional data to the OutputMessage before posting it.
  bool postMessage = 11;
  // Pass Null or Nothing to this reserved parameter.
  ObjectInstance reserved = 12;
}

message Engine_LogProfilerActionResponse {
  // Returns the OutputMessage this method creates that stores the profiler information.  If you pass True to postMessage, you do not need to operate on the returned OutputMessage. The OutputMessage.Category property has a value of Engine.ProfilerOutputMessageCategoryName to indicate that it contains profiler information and should not be displayed in an output messages window.
  // A TestStand profiler window functions by collecting OutputMessages that have this category name and inspecting their contents.
  OutputMessageInstance returnValue = 1;
}

message Engine_GetEngineConfigFileRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the engine configuration file to return. Supported options are FileType_GeneralEngineConfigFile, FileType_SearchDirectoriesConfigFile, FileType_AdaptersConfigFile, FileType_TypePalettesConfigFile, FileType_CustomConfigFile, FileType_UsersFile, and FileType_StationGlobalsFile. Passing any other value results in a run time error.
  PropertyObjectFileTypes configFileType = 2;
}

message Engine_GetEngineConfigFileResponse {
  // The return type of the PropertyObjectFile object.
  PropertyObjectFileInstance returnValue = 1;
}

message Engine_LoadEnvironmentRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  string Path = 2;
}

message Engine_LoadEnvironmentResponse {
}

message Engine_GetEnvironmentPathRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_GetEnvironmentPathResponse {
  // The path of the environment configuration (.tsenv) file that defines the environment in which the engine is running. If the engine is running in the global environment, an empty string is returned.
  string returnValue = 1;
}

message Engine_DisplayEnvironmentConfigurationDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // 
  int32 dlgOptions = 2;
  // 
  string Path = 3;
}

message Engine_DisplayEnvironmentConfigurationDialogResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
  // 
  string Path = 2;
}

message Engine_LaunchNewApplicationWhenShutdownCompletesRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  string appPath = 2;
  string environment = 3;
  string additionalArgs = 4;
}

message Engine_LaunchNewApplicationWhenShutdownCompletesResponse {
}

message Engine_CancelLaunchNewApplicationWhenShutdownCompletesRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_CancelLaunchNewApplicationWhenShutdownCompletesResponse {
}

message Engine_FindFileExRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies a string that contains the simple filename or relative pathname of the file to search for. TestStand expands macros in the path as specified by the Engine.ExpandPathMacros method before searching.
  string fileToFind = 2;
  // Specifies whether to prompt the user if the file is not initially found.
  FindFilePromptOptions promptOption = 3;
  // Specifies file search options.
  FindFileSearchListOptions srchListOption = 4;
  // If this flag is True and fileToFind has no file extension, then the FindFile method searches for files with the same basename that end in the common command extensions: .exe, .com, and .bat.
  bool isCommand = 5;
  // Contains the directory of the sequence file, which may also be searched for relative paths. This argument may be empty.
  PropertyObjectInstance searchContext = 6;
  // Reserved for future use.
  optional int32 reserved = 7;
}

message Engine_FindFileExResponse {
  // Returns True if the file is found.
  bool returnValue = 1;
  // Returns the absolute pathname of the file if the file is found.
  string absolutePath = 2;
  // Returns the SearchDirectoryType in which the specified fileToFind was found. This can be any of the types located in SearchDirectoryTypes.
  SearchDirectoryTypes srchDirType = 3;
  // Returns the index of the TestStand search directory used to find the fileToFind specified. The list of search directories can be obtained by using the TestStand API SearchDirectories. You can retrieve any search directory from there using this searchDirectoryIndex.
  int32 searchDirectoryIndex = 4;
  // Returns True if the method prompts the user and the user cancels the find operation.
  bool userCancelled = 5;
}

message Engine_GetRelativePathFromAbsolutePathRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // An absolute or relative path for the file to find.
  string absolutePath = 2;
  // Contains the directory of the sequence file, which may also be searched for relative paths.
  PropertyObjectInstance searchContext = 3;
}

message Engine_GetRelativePathFromAbsolutePathResponse {
  // Returns True if the file is found.
  bool returnValue = 1;
  // Returns the relative path if the file exists on disk and a relative path is found. Otherwise, returns the absolute path.
  string relativePath = 2;
  // Returns the related search directory if the relative path is found.
  string searchDirectoryPath = 3;
}

message Engine_NewEditContextRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the object to initialize the sequence context. You can pass a sequence file, sequence, step, variable, or array of object references to steps.  This method sets the sequence context properties that correspond to the object you pass.
  PropertyObjectInstance obj = 2;
  // Specifies an EditArgs object that indicates which items are currently selected in the user interface.
  PropertyObjectInstance editArgsParam = 3;
}

message Engine_NewEditContextResponse {
  // A reference to a SequenceContext object. Release this reference when you are finished using it.
  SequenceContextInstance returnValue = 1;
  // Returns the lookupString for the object passed in. Use this lookupString to access the object from the sequence context.
  optional string locationString = 2;
}

message Engine_GetImageNameRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the image index. The image index must be less than the number of images in the image lists.
  int32 imageIndex = 2;
}

message Engine_GetImageNameResponse {
  // The name of the image at the index.
  string returnValue = 1;
}

message Engine_GetImageIndexRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the name of the image. Typically, the name includes a filename and the extension.
  string imageName = 2;
}

message Engine_GetImageIndexResponse {
  // The index of the image in both of the engine image lists. Returns -1 if the image name is not found.
  int32 returnValue = 1;
}

message Engine_CopyPropertyObjectRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the property object from an external instance of the TestStand Engine (that is, another process or computer) you want to copy.
  PropertyObjectInstance srcObj = 2;
}

message Engine_CopyPropertyObjectResponse {
  // New copy of the PropertyObject object created in the process space of the engine on which the method is called.
  PropertyObjectInstance returnValue = 1;
}

message Engine_GetSyncManagerRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the name of the Synchronization object for which the Synchronization Manager is needed. When the Synchronization object begins with an '*' (for example, *syncobjectname) or a computer name such as \\machinename\syncobjectname, a Synchronization Manager object corresponding to the computer in question is returned.
  // When the Synchronization object name begins with an asterisk or computer name, you can use a 32 or 64 prefix to specify using 32- or 64-bit TestStand to host the out-of-process Synchronization object. For example, the name 64*syncobj specifies a Synchronization object called *syncobj in the 64-bit TestStand host process, even when used from 32-bit TestStand. Use the prefix to share Synchronization objects between 32-bit TestStand and 64-bit TestStand in the same host process. If you do not use the prefix, 32-bit TestStand hosts out-of-process Synchronization objects in a 32-bit process, and 64-bit TestStand hosts out-of-process Synchronization objects in a 64-bit process.
  string syncObjectName = 2;
}

message Engine_GetSyncManagerResponse {
  // A pointer to the TestStand Synchronization Manager the Synchronization object name describes.
  ObjectInstance returnValue = 1;
}

message Engine_NewHierarchicalExecutionRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies an array of Sequence Call steps. The array represents a call stack to recreate. The execution does not execute any of the main steps in the sequences of the call stack, but the hierarchicalExecutionFlags parameter specifies whether the execution executes the setup and cleanup steps in the sequences of the call stack. Except for the first step, each step in the array is a step that resides in the sequence the previous step in the array calls.
  repeated StepInstance sequenceCallSteps = 2;
  // Pass 0 for the default behavior or pass one or more HierarchicalExecutionFlags constants. Use the bitwise-OR operator to pass multiple constants.
  HierarchicalExecutionFlags HierarchicalExecutionFlags = 3;
  // Specifies the SequenceFile object that contains the sequence to execute. If the execution uses a process model, pass the client SequenceFile object.
  SequenceFileInstance sequenceFileParam = 4;
  // Specifies the name of the sequence or Process Model entry point to execute.
  string sequenceNameParam = 5;
  // Pass the process model SequenceFile object if you want to execute a Process Model entry point. Otherwise, a NULL object reference in LabVIEW, 0 in LabWindows/CVI, or the Nothing keyword in Visual Basic, pass a NULL dispatch pointer in Microsoft Foundation Classes.
  SequenceFileInstance processModelParam = 6;
  // Pass True to suspend execution before executing the first step.
  bool breakAtFirstStep = 7;
  // Pass 0 for the default behavior or pass one or more ExecutionTypeMask constants. Use the bitwise-OR operator to pass multiple constants.
  ExecutionTypeMask executionTypeMaskParam = 8;
  // Specifies a PropertyObject object that contains the arguments to the sequence you want to execute. Each subproperty of the PropertyObject object represents a parameter to the sequence. The subproperties must appear in the same order as the sequence parameters.
  PropertyObjectInstance sequenceArgsParam = 9;
  // Specifies an EditArgs object that indicates which items are currently selected in the user interface. This is required only for Process Model entry points.
  PropertyObjectInstance editArgsParam = 10;
  // Specifies an InteractiveArgs object that indicates which steps are currently selected in the user interface and contains looping information necessary for an interactive execution. Pass this parameter for interactive executions only.
  PropertyObjectInstance InteractiveArgsParam = 11;
}

message Engine_NewHierarchicalExecutionResponse {
  // The return type of the Execution object.
  ExecutionInstance returnValue = 1;
}

message Engine_DisplayEditNumericFormatDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // The numeric format string to edit. Enable EditNumFormat_AllowDefaultFormat if you want to pass an empty string.
  string NumericFormat = 3;
  // Specifies any combination of the EditNumericFormatOptions constants.
  EditNumericFormatOptions dlgOptions = 4;
  // Specifies a number to format initially in the dialog box.
  double sampleNumber = 5;
}

message Engine_DisplayEditNumericFormatDialogResponse {
  // Returns True if you click OK in the dialog box. Returns False if you click Cancel.
  bool returnValue = 1;
  // The numeric format string to edit. Enable EditNumFormat_AllowDefaultFormat if you want to pass an empty string.
  string NumericFormat = 2;
}

message Engine_GetInsertVariableMenuStructureRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the currently selected file. The method includes the step types defined in this file as well as the step types located in the type palette. Pass 0 or NULL if there is no selected file.
  PropertyObjectFileInstance SelectedFile = 2;
  // Pass a set of PropertyFlags that specify which step types are not included in the menu. For example, pass PropFlags_Hidden to exclude the hidden step types.
  PropertyFlags hiddenFlags = 3;
}

message Engine_GetInsertVariableMenuStructureResponse {
  // The object that specifies the menu structure.
  PropertyObjectInstance returnValue = 1;
}

message Engine_IsCurrentSequenceFileVersionRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the absolute pathname of the file.
  string FilePath = 2;
}

message Engine_IsCurrentSequenceFileVersionResponse {
  // The return type of the Int32 object.
  int32 returnValue = 1;
}

message Engine_NotifyStartOfModalDialogExRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the sequence context of the step launching the modal dialog box. You can also pass a NULL reference but doing so loses the added functionality of this method.
  SequenceContextInstance sequenceContextParam = 2;
}

message Engine_NotifyStartOfModalDialogExResponse {
  // Returns the modalID to pass to the Engine.NotifyEndOfModalDialog method when the dialog box no longer appears onscreen.
  int32 returnValue = 1;
  // Returns True when the user terminates or aborts the corresponding execution for the sequence context parameter you passed while you were blocked inside this method call. The step skips launching the dialog box and returns as soon as possible. You can call the Engine.NotifyEndOfModalDialog method in this case, though it is not necessary. If you are using the CVI TS_StartModalDialogEx function, always call the corresponding TS_EndModalDialog function. Similarly, if you are using Start Modal Dialog.vi in LabVIEW, always call End Modal Dialog.vi.
  bool shouldAbort = 2;
}

message Engine_GetInternalOptionRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the internal option the method returns.
  InternalOptions option = 2;
}

message Engine_GetInternalOptionResponse {
  // The value of the internal option the option parameter specifies.
  oneof value { bool boolean = 2; int32 integer = 3; double double = 4; string string = 5; ObjectInstance reference = 6; }
}

message Engine_SetInternalOptionRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the internal option the method sets.
  InternalOptions option = 2;
  // Specifies the value of the internal option the option parameter specifies.
  oneof value { bool boolean = 3; int32 integer = 4; double double = 5; string string = 6; ObjectInstance reference = 7; }
}

message Engine_SetInternalOptionResponse {
}

message Engine_DisplayHelpTopicRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the help ID of the help topic within the compiled help file to open. The help file author associates help IDs with topic files.
  // Pass 0 to open the help file to the default topic.
  int32 tagID = 2;
  // Specifies the name of the HTML help file to open. Include the absolute path of the help file and the extension. If you do not specify a help file, TestStand uses the NI TestStand Help.
  string helpFile = 3;
  // Specifies the name of the table of contents file to use with the help file. Include the absolute path of the table of contents file along with the extension.
  string tableOfContentsFile = 4;
  // Specifies the name of the index file to use with the help file. Include the absolute path of the index file along with the extension.
  string indexFile = 5;
  // Specifies the name of the default topic to display for the help file. Include the absolute path of the default topic along with the extension.
  string homeFile = 6;
  // Specifies the help window caption to display. This parameter is ignored unless a table of contents file, an index file, or a default topic file is specified. If none of these files are specified, the help window caption is the caption the author of the help file specifies. If you specify a contents file or an index file but do not specify this parameter, the window caption defaults to NI TestStand Help.
  string windowCaption = 7;
}

message Engine_DisplayHelpTopicResponse {
  // Returns the window handle of the created help window.
  int32 returnValue = 1;
}

message Engine_DisplayBreakpointDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies the sequence context the dialog box uses to evaluate expressions specified for a conditional breakpoint. You can use the Engine.NewEditContext method to obtain an edit-time sequence context for the step or sequence file you are editing.
  SequenceContextInstance sequenceContextParam = 3;
  // If you want to set the breakpoint state for a particular execution only, specify a reference to an Execution object. Breakpoints set for a particular execution only apply to that execution and are lost when the Execution object is destroyed, or when you set the breakpoint state for the step by calling this method without passing an execution.
  ExecutionInstance executionParam = 4;
  // Specifies a reference to a Step object to specify which breakpoint to configure. Pass NULL to configure a breakpoint on the End marker after the last step in a step group. If you pass NULL, you must specify a value for the whichSteps parameter.
  StepInstance selectedStep = 5;
  // When the selectedStep parameter is NULL, whichSteps specifies a particular step group that specifies the End marker.
  StepGroups stepGroupParam = 6;
  // Specifies any combination of the CommonDialogOptions constants.
  CommonDialogOptions dlgOptions = 7;
}

message Engine_DisplayBreakpointDialogResponse {
  // Returns True if you click OK. Otherwise, returns False.
  bool returnValue = 1;
}

message Engine_SearchFilesRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Pass the string or regular expression for which to search. To use regular expressions, you must specify SearchOptions_RegExpr for the searchOptions parameter.
  string searchString = 2;
  // Pass one or more SearchOptions constants. Use the bitwise-OR operator to specify multiple search options.
  SearchOptions SearchOptions = 3;
  // Pass one or more SearchFilterOptions constants. Use the bitwise-OR operator to specify multiple search filter options.
  SearchFilterOptions filterOptions = 4;
  // Pass one or more SearchElements constants. Use the bitwise-OR operator to specify multiple elements to search.
  SearchElements elementsToSearch = 5;
  // Pass an array of AdapterKeyNames constants to indicate the steps of which adapters to search. Pass an empty array or NULL to search steps that use any adapter.
  repeated string limitToAdapters = 6;
  // Pass an array of property names under which to limit the search. Pass an empty array or NULL to search all properties. If you specify names of properties to which to limit the search, TestStand searches only those properties with the names you specify and all their subproperties.
  repeated string limitToNamedProps = 7;
  // Pass an array of type names to which to limit the search. Pass an empty array or NULL to search instances of all types. Use this parameter to limit the search instances of all types. Use this parameter to limit the search to instances of the types you specify.
  repeated string limitToPropsOfNamedTypes = 8;
  // Pass an array of PropertyObjectFile references to specify already open files in which to search. You can pass an empty array or NULL for this parameter.
  repeated PropertyObjectFileInstance openFilesToSearch = 9;
  // Pass an array of directories and/or file paths to indicate which files to load and search. All paths must be absolute paths. If you specify a directory, TestStand searches all sequence files under the directory and any of the subdirectories. You can pass an empty array or NULL for this parameter.
  repeated string directoriesAndFilePaths = 10;
}

message Engine_SearchFilesResponse {
  // A SearchResults object.
  SearchResultsInstance returnValue = 1;
}

message Engine_GetWatchExpressionsChangeCountRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_GetWatchExpressionsChangeCountResponse {
  // The return type of the Int32 object.
  int32 returnValue = 1;
}

message Engine_GetWatchExpressionsRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  SequenceFileInstance clientSequenceFileParam = 2;
  SequenceContextInstance scopingSeqContext = 3;
  WatchExpressionFilterOptions filterOptions = 4;
}

message Engine_GetWatchExpressionsResponse {
  // The return type of the WatchExpressions object.
  WatchExpressionsInstance returnValue = 1;
}

message Engine_SetLocationForNextDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the subproperty of the object that specifies the corresponding control that is highlighted in the dialog box the next time it is launched.
  string locationLookupString = 2;
  // Pass one of the following SearchElements constants to indicate which part of the property you want to highlight in the dialog box while editing: SearchElement_Name, SearchElement_Comment, SearchElement_StringValue, SearchElement_NumericValue, or SearchElement_BooleanValue. For example, to highlight a portion of a local variable comment, pass an empty string for the locationLookupString parameter and SearchElement_Comment for this parameter, then call PropertyObject.DisplayPropertiesDialog on the variable property.
  SearchElements elementAtLocation = 3;
  // If the control the locationLookupString and elementAtLocation parameters indicate is an Edit control, you can use this parameter to select a particular section of the text within the control when TestStand launches the dialog box. Pass the index of the character within the string where you want the selection to start.
  int32 selectionStart = 4;
  // If the control the locationLookupString and elementAtLocation parameters specify is an Edit control, you can use this parameter to select a particular section of the text within the control when TestStand launches the dialog box. Starting from the selStartIndex character, pass the numbers of characters you want the dialog box to select in the Edit control.
  int32 selectionLength = 5;
}

message Engine_SetLocationForNextDialogResponse {
}

message Engine_DisplayHelpFileRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the name of the HTML help topic within the help file to which the help window is opened. Include the file extension (.htm, .html) of the page. Specify the entire path of the page within the help file.
  // Pass "" to open the help file to the default topic.
  string htmlFile = 2;
  // Specifies the name of the HTML help file to open. Include the absolute path of the help file and the extension. If you do not specify a help file, TestStand uses the NI TestStand Help.
  string helpFile = 3;
  // Specifies the name of the table of contents file to use with the help file. Include the absolute path of the table of contents file along with the extension.
  string tableOfContentsFile = 4;
  // Specifies the name of the index file to use with the help file. Include the absolute path of the index file along with the extension.
  string indexFile = 5;
  // Specifies the name of the default topic to display for the help file. Include the absolute path of the default topic along with the extension.
  string homeFile = 6;
  // Specifies the help window caption to display. This parameter is ignored unless a table of contents file, an index file, or a default topic file is specified. If none of these files are specified, the help window caption is the caption the author of the help file specifies. If you specify a contents file or an index file but do not specify this parameter, the window caption defaults to NI TestStand Help.
  string windowCaption = 7;
}

message Engine_DisplayHelpFileResponse {
  // Returns the window handle of the created help window.
  int32 returnValue = 1;
}

message Engine_DisplayEditBreakAndWatchDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies any combination of the EditBreakAndWatchOptions constants.
  EditBreakAndWatchOptions dlgOptions = 3;
}

message Engine_DisplayEditBreakAndWatchDialogResponse {
  // If the user clicked the Goto button, this parameter returns information about the last selected item on the Breakpoints tab of the Edit Breakpoints/Watch Expressions dialog box. Pass a SelectedBreakpointItem object to access the last selected item.
  PropertyObjectInstance selectedItemParam = 1;
}

message Engine_DisplayExpressionEditOptionsDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWnd. By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from the Engine.AppMainHwnd property. Pass  CommonDlgOption_ModalToAppMainWnd if you want the dialog box to be modal with respect to the window handle of the AppMainHwnd property. Typically, you do not need to set this option.
  int32 dlgOptions = 3;
}

message Engine_DisplayExpressionEditOptionsDialogResponse {
  // Returns True if you click OK in the dialog box. Returns False if you click Cancel.
  bool returnValue = 1;
}

message Engine_LoadTypePaletteFilesExRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies how to handle type conflicts.
  TypeConflictHandlerTypes handlerType = 2;
  // This parameter is reserved.
  LoadTypePaletteFilesOptions options = 3;
}

message Engine_LoadTypePaletteFilesExResponse {
}

message Engine_RegisterUIMessageRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  string messageName = 2;
}

message Engine_RegisterUIMessageResponse {
  // The return type of the Int32 object.
  int32 returnValue = 1;
}

message Engine_NewWorkspaceFileRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_NewWorkspaceFileResponse {
  // The return type of the WorkspaceFile object.
  WorkspaceFileInstance returnValue = 1;
}

message Engine_OpenWorkspaceFileRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the absolute pathname of the workspace file.
  string workspaceFilePath = 2;
  // Specify one or more OpenWorkspaceFileOptions constants. Use the bitwise-OR operator to specify more than one option.
  OpenWorkspaceFileOptions options = 3;
  // Specifies how to handle type conflicts.
  TypeConflictHandlerTypes handlerType = 4;
}

message Engine_OpenWorkspaceFileResponse {
  // The return type of the WorkspaceFile object.
  WorkspaceFileInstance returnValue = 1;
}

message Engine_ReloadStringResourceFilesRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_ReloadStringResourceFilesResponse {
}

message Engine_GetAdapterByKeyNameRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the name to use as a key to find the adapter in the list. Pass one of the AdapterKeyNames constants.
  string AdapterKeyName = 2;
}

message Engine_GetAdapterByKeyNameResponse {
  // The adapter that has the specified key name.
  AdapterInstance returnValue = 1;
}

message Engine_PostUIMessageRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the execution to pass with the message.
  ExecutionInstance executionParam = 2;
  // Specifies the thread to pass with the message.
  ThreadInstance threadParam = 3;
  // Specifies the type of UIMessage.
  UIMessageCodes eventCode = 4;
  // Specifies numeric data to pass with the message. When you post a UIMsg_ProgressPercent event, this parameter specifies the percent done.
  double numericDataParam = 5;
  // Specifies string data to pass with the message. When you post a UIMsg_ProgressText event, this parameter specifies the text to display.
  string stringDataParam = 6;
  // Specifies an ActiveX reference to pass with the message.
  ObjectInstance activeXDataParam = 7;
  // Typically, you pass True for this parameter to direct the method to wait until the user interface processes the message. If you pass False, the method returns immediately without waiting for the user interface to handle the message. If you pass False and post messages faster than the user interface processes messages, the number of messages in the queue the user interface must handle grows unbounded and floods the user interface with messages, which causes the user interface to become unresponsive.
  bool synchronous = 8;
}

message Engine_PostUIMessageResponse {
}

message Engine_DisplayBrowseExprDialogFromControlRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  ObjectInstance expressionEdit = 2;
  string dlgTitle = 3;
  int32 selectionStart = 4;
  int32 selectionEnd = 5;
  string initVarName = 6;
  int32 dlgOptions = 7;
}

message Engine_DisplayBrowseExprDialogFromControlResponse {
  bool returnValue = 1;
  bool contextChanged = 2;
}

message Engine_NewExpressionRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_NewExpressionResponse {
  // The return type of the Expression object.
  ExpressionInstance returnValue = 1;
}

message Engine_DisplayStepTypeMenuEditorExRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies the PropertyObjectFile that represents the type palette file to edit.
  PropertyObjectFileInstance SelectedFile = 3;
  // Pass True when editing the menu information for substeps.
  bool forSubsteps = 4;
  // Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWnd.
  int32 dlgOptions = 5;
}

message Engine_DisplayStepTypeMenuEditorExResponse {
  // Returns True if you make modifications and click OK in the dialog box. Returns False if you click Cancel or make no modifications.
  bool returnValue = 1;
}

message Engine_NewTypeUsageListRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Pass 0.
  int32 reservedParam = 2;
}

message Engine_NewTypeUsageListResponse {
  // The return type of the TypeUsageList object.
  TypeUsageListInstance returnValue = 1;
}

message Engine_UnserializeObjectsAndTypesRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the serialized objects the Engine.SerializeObjects method creates.
  string stream = 2;
  // Pass 0.
  int32 reservedParam = 3;
  // Specifies how to handle type conflicts in the stream.
  TypeConflictHandlerTypes handlerType = 4;
}

message Engine_UnserializeObjectsAndTypesResponse {
  // Returns the array of unserialized property objects.
  repeated PropertyObjectInstance returnValue = 1;
  // Returns the list of types the serialized objects use.
  TypeUsageListInstance typesUsed = 2;
}

message Engine_GetEditTimeToolMenuItemsRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Pass 0 for this parameter.
  int32 reserved = 2;
}

message Engine_GetEditTimeToolMenuItemsResponse {
  // The return type of the EditTimeMenuItems object.
  EditTimeMenuItemsInstance returnValue = 1;
}

message Engine_GetRunTimeToolMenuItemsRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the currently selected items in the user interface. The menu item expressions can use this information to determine item text, hidden state, and enabled state.
  PropertyObjectInstance editArgsParam = 2;
  // Pass 0 for this parameter.
  int32 reserved = 3;
}

message Engine_GetRunTimeToolMenuItemsResponse {
  // The return type of the RunTimeMenuItems object.
  RunTimeMenuItemsInstance returnValue = 1;
}

message Engine_WriteToolMenuToDiskRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Pass 0 for this parameter.
  int32 reserved = 2;
}

message Engine_WriteToolMenuToDiskResponse {
}

message Engine_CreateNewUniqueStepIdsRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies an array of steps for which new unique step IDs are created.
  repeated StepInstance steps = 2;
}

message Engine_CreateNewUniqueStepIdsResponse {
}

message Engine_GetLicenseDescriptionRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Pass 0 for this parameter.
  int32 reserved = 2;
}

message Engine_GetLicenseDescriptionResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message Engine_GetLocationForNextDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Typically, calling this method clears the internal data in the engine for the location of the dialog box so the next time this method is called, no location information is returned. To override this behavior, pass False for this parameter.
  bool clearLoc = 2;
}

message Engine_GetLocationForNextDialogResponse {
  // Returns a lookup string that indicates the subproperty of the object that contains the corresponding control you want to highlight in the dialog box.
  string locationLookupString = 1;
  // Returns one of the following SearchElements constants to indicate which part of the property to highlight in the dialog box: SearchElement_Name, SearchElement_Comment, SearchElement_StringValue, SearchElement_NumericValue, or SearchElement_BooleanValue.
  SearchElements elementAtLocation = 2;
  // If the control the locationLookupString and elementAtLocation parameters indicate is an Edit control, use this parameter to determine a particular section of the text within the control for the dialog box to select. Returns the index of the character within the string for the start of the selection.
  int32 selectionStart = 3;
  // If the control the locationLookupString and elementAtLocation parameters indicate is an Edit control, use this parameter to determine a particular section of the text within the control for the dialog box to select. Returns the number of characters, starting from the selStartIndex character, for the dialog box to select in the Edit control.
  int32 selectionLength = 4;
}

message Engine_SetConfigDirectoryRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the new pathname where TestStand stores configuration files. You can pass an empty string to instruct TestStand to use the <TestStand Application Data>\Cfg directory.
  string Path = 2;
  // Specifies whether TestStand copies all files located in the current TestStand configuration directory to the new location upon shutdown.
  bool CopyFilesOnEngineShutdown = 3;
}

message Engine_SetConfigDirectoryResponse {
}

message Engine_DisplayLockUnlockDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies the message in the dialog box. Pass an empty string to use the default message for the dialog box.
  string dlgMsg = 3;
  // Specifies an object to lock or unlock. The object lock state determines whether the dialog box performs a lock or unlock operation by calling the PropertyObjectFile.Lock and PropertyObjectFile.Unlock methods respectively.
  // When you pass NULL, the dialog box does not operate on any object. The options parameter specifies whether the dialog box performs a lock or unlock operation. If you pass NULL and perform an unlock operation, you must specify the required password using the passwordString parameter.
  PropertyObjectInstance propObject = 4;
  // Specifies any combination of the LockUnlockDialogOptions constants.
  LockUnlockDialogOptions options = 5;
  // Specifies the password the dialog box expects when you specify LockUnlockDialogOption_Unlock in the options parameter, and returns the entered password from the dialog box when you specify LockUnlockDialogOption_Lock in the options parameter.
  optional string passwordString = 6;
}

message Engine_DisplayLockUnlockDialogResponse {
  // Returns True if you click OK in the dialog box. Returns False if you click Cancel.
  bool returnValue = 1;
  // Specifies the password the dialog box expects when you specify LockUnlockDialogOption_Unlock in the options parameter, and returns the entered password from the dialog box when you specify LockUnlockDialogOption_Lock in the options parameter.
  optional string passwordString = 2;
}

message Engine_GetUserGroupRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the name of the user group to return.
  string userGroupName = 2;
}

message Engine_GetUserGroupResponse {
  // The return type of the User object.
  UserInstance returnValue = 1;
}

message Engine_ShouldAutoLaunchExternalReportViewerRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the report file path. This method uses only the file extension of the parameter.
  string FilePath = 2;
}

message Engine_ShouldAutoLaunchExternalReportViewerResponse {
  // Returns True if the user interface launches the external viewer.
  bool returnValue = 1;
}

message Engine_CanCreateStepRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the key name of the module Adapter object to use to create the step. Pass an empty string to use the adapter the step type designates or to use the adapter the Engine.DefaultAdapter property specifies if the step has no designated adapter.
  string adapterKeyNameVal = 2;
  // Specifies the name of the step type with which to create the step. The step type must already be in memory. Refer to Engine.GetTypeNames for a list of names for the built-in step types and other types.
  string stepTypeName = 3;
}

message Engine_CanCreateStepResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message Engine_DisplayEditPathsInFilesDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies any combination of the EditPathsDialogOptions constants.
  EditPathsDialogOptions dlgOptions = 3;
  // Specifies an optional PropertyObjectFile object the dialog box initially selects in the list control.
  PropertyObjectInstance initialFile = 4;
}

message Engine_DisplayEditPathsInFilesDialogResponse {
  // Returns True if you modify one or more files from the dialog box.
  bool returnValue = 1;
}

message Engine_DisplayRunTimeErrorDialogExRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies the sequence context from the thread that caused the run-time error.
  SequenceContextInstance sequenceContextParam = 3;
  // Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWnd.
  int32 dlgOptions = 4;
}

message Engine_DisplayRunTimeErrorDialogExResponse {
  // Returns a value that indicates whether the user wants the current execution to suspend at the location of the run-time error.
  bool suspendExecution = 1;
  // Returns a value that indicates whether the user wants this dialog box to launch again if another run-time error occurs in the current execution. If this value is True, set the Execution.RTEOptionForThisExecution property to specify what to do on a run-time error for this execution.
  bool dontShowAgainForExecution = 2;
  // Returns a value that indicates whether the user wants this dialog box to launch again if another run-time error occurs in any execution that has a thread from the same batch as the thread in the sequence context you specify. If this value is True, call the Thread.SetBatchRTEOption method to set what to do on a run-time error for these executions.
  bool dontShowAgainForBatch = 3;
  // Returns the option the user selects in the dialog box to specify how the execution is to proceed.
  RTEOptions runTimeErrorAction = 4;
}

message Engine_DisplayBrowseExprDialogExRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies the object into which to browse. This is usually a SequenceContext object. You can use the SequenceFile.NewEditContext or Engine.NewEditContext methods to create a sequence context.
  PropertyObjectInstance objectToBrowse = 3;
  // Specifies the initial expression string for the dialog box. You can pass an empty string for this parameter. This string must be a localized expression.
  string expressionIn = 4;
  // Specifies the zero-based index of the location in the initial expression where the selected text begins. If you want a cursor instead of selected text, pass the same index for selectionEndIn.
  int32 selectionStartIn = 5;
  // Specifies the index of the location in the initial expression of the first character beyond the selected text. If you want a cursor instead of selected text, pass the same index for selectionStartIn. Pass -1 to select to the end of the text.
  int32 selectionEndIn = 6;
  // Specifies the name of the initial variable or property to show as selected in the dialog box. You can pass an empty string for the parameter to select the first item.
  string initialVariableName = 7;
  // Specifies any combination of the BrowseExprDialogOptions constants.
  BrowseExprDialogOptions dlgOptions = 8;
}

message Engine_DisplayBrowseExprDialogExResponse {
  // Returns True if you click OK in the dialog box. Returns False if you click Cancel.
  bool returnValue = 1;
  // Returns the resulting expression from the dialog box when the user clicks OK. This expression string is a localized expression. You can convert a localized expression string to a standard form suitable for evaluation.
  string expressionOut = 2;
  // Returns the index of the start of the selected text in the resulting expression when the user clicks OK.
  int32 selectionStartOut = 3;
  // Returns the index of the first character beyond the selected text in the resulting expression when the user clicks OK.
  int32 selectionEndOut = 4;
}

message Engine_DisplayBrowsePropertyObjectDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies the object into which to browse.
  PropertyObjectInstance objectToBrowse = 3;
  // Specifies a lookup string for the subproperty of the object to select initially.
  string initialLocation = 4;
  // Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWind.
  int32 dlgOptions = 5;
}

message Engine_DisplayBrowsePropertyObjectDialogResponse {
}

message Engine_SaveAllModifiedSeqFilesRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specify one or more SaveAllSeqFileOptions constants. Use the bitwise-OR operator to specify multiple sequence file flags.
  SaveAllSeqFileOptions options = 2;
}

message Engine_SaveAllModifiedSeqFilesResponse {
  // Returns True if all modified files were saved successfully. Returns False if one or more files could not be saved or if the user cancels the operation.
  bool returnValue = 1;
}

message Engine_CallFrontEndCallbackExRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the name of the Front-End callback sequence to call.
  string sequenceNameParam = 2;
  // Specifies a PropertyObject that contains the parameters to pass to the sequence. Each subproperty of the PropertyObject represents a parameter to the sequence. The subproperties must appear in the same order as the sequence parameters.
  PropertyObjectInstance argumentList = 3;
  // Specifies how to handle type conflicts.
  TypeConflictHandlerTypes handlerType = 4;
  // Note: This parameter is reserved.
  int32 reservedParam = 5;
}

message Engine_CallFrontEndCallbackExResponse {
  // The Execution object of the newly created execution.
  ExecutionInstance returnValue = 1;
}

message Engine_DisplaySequenceFileCallbacksDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Pass a SequenceFile object to specify which sequence file you want to edit.
  SequenceFileInstance sequenceFileParam = 3;
  // Specifies any combination of the CommonDialogOptions constants.
  CommonDialogOptions dlgOptions = 4;
}

message Engine_DisplaySequenceFileCallbacksDialogResponse {
  // Returns True if you make modifications and click OK in the dialog box. Returns False if you click Cancel or make no modifications.
  bool returnValue = 1;
  // Returns to the dialog box the name of the callback sequence the user chose to edit. An empty string indicates the user did not select a callback to edit.
  string sequenceToEdit = 2;
  // Returns the number of callbacks the dialog box added to the sequence file. Callbacks are added to the end of the list of sequences.
  int32 numCallbacksAdded = 3;
  // Returns the number of callbacks that the dialog box deleted from the sequence file.
  int32 numCallbacksDeleted = 4;
}

message Engine_GetProductRegistrationInfoRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_GetProductRegistrationInfoResponse {
  // Returns True if this is a registered installation of TestStand.
  bool returnValue = 1;
  // Returns the name of the user currently logged into the National Instruments License Manager.
  string userName = 2;
  // Returns the company name of the user currently logged into the National Instruments License Manager.
  string companyName = 3;
  // Returns the serial number for this installation of TestStand.
  string serialNumber = 4;
}

message Engine_SetProductRegistrationInfoRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // This parameter is obsolete and no longer supported.
  string userName = 2;
  // This parameter is obsolete and no longer supported.
  string companyName = 3;
  // This parameter is obsolete and no longer supported.
  string serialNumber = 4;
}

message Engine_SetProductRegistrationInfoResponse {
  // Returns False
  bool returnValue = 1;
}

message Engine_ReleaseSequenceFileExRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies a reference to the sequence file to release.
  SequenceFileInstance sequenceFileToRelease = 2;
  // Specify one or more ReleaseSeqFileOptions constants. Use the bitwise-OR operator to specify multiple sequence file flags.
  ReleaseSeqFileOptions options = 3;
}

message Engine_ReleaseSequenceFileExResponse {
  // Returns True if the file was removed from the TestStand internal cache. Returns False if the file remained in the cache because it has multiple load references or if TestStand initiates the execution of the SequenceFileUnload callback sequence for the SequenceFile object.
  // Refer to SequenceFile.CanUnload for more information about loading and unloading files in the cache.
  bool returnValue = 1;
}

message Engine_RegisterModalWindowRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // If you display the dialog box from the step of an execution, pass the sequence context of the step; otherwise, pass a NULL reference. If you pass a sequence context, this method serializes calls from multiple threads the same way the Engine.NotifyStartOfModalDialogEx method serializes calls.
  SequenceContextInstance sequenceContextParam = 2;
  // Specifies the window handle of the modal dialog box.
  int32 modalHWND = 3;
}

message Engine_RegisterModalWindowResponse {
  // Returns the modalID to pass to the Engine.UnregisterModalWindow method when the dialog box no longer appears on screen.
  int32 returnValue = 1;
  // Returns True when the user terminates or aborts the corresponding execution for the sequence context parameter you passed while you were blocked inside this method call. The step skips launching the dialog box and returns as soon as possible. You can call Engine.UnregisterModalWindow in this case, though it is not necessary.
  bool shouldAbort = 2;
}

message Engine_UnregisterModalWindowRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Pass the modalID you receive as a return value from the  Engine.RegisterModalWindow.
  int32 modalID = 2;
}

message Engine_UnregisterModalWindowResponse {
}

message Engine_DisplayFileDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies a string to display on the OK button. Pass an empty string to use the default.
  string okButtonText = 3;
  // For a file selection dialog box, specify the path of the file you want the dialog box to display initially. If you specify the path of a directory, the filename control in the dialog box remains empty. For a directory selection dialog box, specify the path of the directory you want the user to browse initially. Pass an empty string to specify the current directory. The path must specify an existing file or directory.
  string initialPath = 4;
  // Pass 0 for the default behavior, or pass one or more OpenFileDialogOptions constants. Use the bitwise-OR operator to specify multiple flags.
  OpenFileDialogOptions openFileDialogFlags = 5;
  // Specifies the extension to append to the pathname if the user specifies no extension. Do not include the period in the extension.
  string defaultExtension = 6;
  // Specifies the Microsoft Windows file dialog flags.
  int32 win32Flags = 7;
  // Specifies the extensions files must have  to appear in the dialog box. Each filter the string contains has two parts. The first part is a descriptive name for the filter and the second part lists the extensions the file can have. Specify multiple extensions using a semi-colon (;) as a delimiter, and end each section with a vertical bar (|). End the string with a final vertical bar (|). The following example illustrates this format:
  // "Sequence Files (*.seq)|*.seq|Report Files (*.txt;*.htm;*.html)|*.txt;*.htm;*.html||"
  string fileFilter = 8;
  // Pass a PropertyObjectFile object for a sequence file, workspace file, or project file if you want to include the directory of the file in the list of search directories that are valid for a relative pathname. The search directory "current sequence file" refers to the object passed as this parameter. If you pass a workspace file or project file, TestStand searches the directory of the file before searching the other search directories for the relative pathname.
  PropertyObjectInstance currentFile = 9;
  // When passed as an input parameter, the parameter specifies the file type to be initially selected in the File Type ring control.
  // The index corresponding to the selected file type within the list control is returned as an output parameter.
  optional int32 fileFilterIndex = 10;
  // Pass an array of strings if you want to set the contents of the directory history combo box in the dialog box. If you omit this parameter, TestStand sets the contents of the combo box with a default history list.
  repeated string dirHistoryList = 11;
}

message Engine_DisplayFileDialogResponse {
  // Returns True if you click OK in the dialog box. Returns False if you click Cancel.
  bool returnValue = 1;
  // Returns the array of pathnames of the files or directories the user selected. The pathnames can be relative or absolute depending on the dialog box settings.
  repeated string selectedPaths = 2;
  // Returns the array of absolute pathnames of the files or directories the user selected.
  repeated string absolutePaths = 3;
  // When passed as an input parameter, the parameter specifies the file type to be initially selected in the File Type ring control.
  // The index corresponding to the selected file type within the list control is returned as an output parameter.
  optional int32 fileFilterIndex = 4;
  // Pass an array of strings if you want to set the contents of the directory history combo box in the dialog box. If you omit this parameter, TestStand sets the contents of the combo box with a default history list.
  repeated string dirHistoryList = 5;
}

message Engine_SerializeObjectsRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Pass the array of property objects to serialize.
  repeated PropertyObjectInstance objects = 2;
  // Specify one or more SerializationOptions using a bitwise combination. This parameter specifies options for how you want to serialize the data. National Instruments recommends using the SerializationOption_UseBinary option for best performance and memory usage, unless you need to parse or read the data more easily. The Engine.UnserializeObjects and Engine.UnserializeObjectsAndTypes methods always autodetect and unserialize the data appropriately.
  SerializationOptions options = 3;
}

message Engine_SerializeObjectsResponse {
  // Returns the string that contains the serialized objects.
  string returnValue = 1;
}

message Engine_UnserializeObjectsRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the serialized objects the Engine.SerializeObjects method creates.
  string stream = 2;
  // Pass 0.
  int32 reservedParam = 3;
  // Specifies how to handle type conflicts in the stream.
  TypeConflictHandlerTypes handlerType = 4;
}

message Engine_UnserializeObjectsResponse {
  // Returns the array of unserialized property objects.
  repeated PropertyObjectInstance returnValue = 1;
}

message Engine_DisplayWorkspaceBrowserDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies any combination of the WorkspaceBrowserDialogOptions constants. Pass WorkspaceBrowserDlgOption_Editable to enable editing of the workspace. Use the bitwise-OR operator to specify more than one option.
  WorkspaceBrowserDialogOptions dlgOptions = 3;
}

message Engine_DisplayWorkspaceBrowserDialogResponse {
}

message Engine_GetTypeUsageLocationsRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the name of the type.
  string typeNameParam = 2;
}

message Engine_GetTypeUsageLocationsResponse {
  // An array of PropertyObjectFile objects that use the type that the type name specifies.
  repeated PropertyObjectFileInstance returnValue = 1;
}

message Engine_ResetTypeInstancesRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies a type definition or a subproperty of a type definition.
  PropertyObjectInstance typeParam = 2;
  // Pass one or more ResetTypeInstancesOptions constants to specify different options. Use the bitwise-OR operator to specify more than one option.  If you want to reset the values/flags of all the subproperties in all instances of a type, pass ResetTypeInst_RecurseSubProperties using the bitwise-OR operator with ResetTypeInst_ResetFlags or ResetTypeInst_ResetValues.Note: Avoid using the ResetTypeInst_ResetFlags flag because it might result in unexpected behavior. In most cases, you should not reset certain flags on type instances. For example, the PropFlags_PassByReference flag is set on parameters of Sequence Call steps. Calling the Engine.ResetTypeInstances method on a type can change whether TestStand passes a sequence parameter that is an instance of the type by reference.
  ResetTypeInstanceOptions resetTypeInstancesOptions = 3;
}

message Engine_ResetTypeInstancesResponse {
  // Returns True if this method finds any type instances or returns False if it finds none.
  bool returnValue = 1;
}

message Engine_GetTypeDefinitionRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the name of the type to obtain.
  string typeNameParam = 2;
}

message Engine_GetTypeDefinitionResponse {
  // The type definition PropertyObject. Returns NULL or 0 if the type definition does not exist.
  PropertyObjectInstance returnValue = 1;
}

message Engine_GetTypeNamesRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_GetTypeNamesResponse {
  // An array of strings that contains the names of all currently loaded types.
  repeated string returnValue = 1;
}

message Engine_NewDataTypeRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the type of value you want instances of the type to contain.
  PropertyValueTypes ValueType = 2;
  // Pass True if you want the type to be an array.
  bool asArray = 3;
  // If you pass PropValType_NamedType for the ValueType, pass the name of the type for this parameter. Otherwise, pass an empty string. If you pass a type name, the type must not already be in memory.
  string typeNameParam = 4;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 5;
}

message Engine_NewDataTypeResponse {
  // The newly created data type.
  PropertyObjectInstance returnValue = 1;
}

message Engine_GetInsertStepMenuStructureRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the currently selected file. The method includes the step types defined in this file as well as the step types located in the type palette. Pass 0 or NULL if there is no selected file.
  PropertyObjectFileInstance SelectedFile = 2;
  // Pass a set of PropertyFlags that specify which step types are not included in the menu. For example, pass PropFlags_Hidden to exclude the hidden step types.
  PropertyFlags hiddenFlags = 3;
}

message Engine_GetInsertStepMenuStructureResponse {
  // The object that specifies the menu structure.
  PropertyObjectInstance returnValue = 1;
}

message Engine_DisplayStepTypeMenuEditorRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Pass True when editing the menu information for substeps.
  bool forSubsteps = 3;
  // Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWnd.
  int32 dlgOptions = 4;
}

message Engine_DisplayStepTypeMenuEditorResponse {
  // Returns True if you make modifications and click OK in the dialog box. Returns False if you click Cancel or make no modifications.
  bool returnValue = 1;
}

message Engine_LoadTypePaletteFilesRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_LoadTypePaletteFilesResponse {
}

message Engine_UnloadTypePaletteFilesRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_UnloadTypePaletteFilesResponse {
}

message Engine_GetTypePaletteFileListRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_GetTypePaletteFileListResponse {
  // An array of pointers to the PropertyObjectFile interfaces of the loaded type palette files.
  repeated PropertyObjectFileInstance returnValue = 1;
}

message Engine_SetTypePaletteFileListRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies an array of pointers to the PropertyObjectFile interfaces of the type palette files. Build the array by calling the Engine.NewPropertyObjectFile and PropertyObjectFile.ReadFile methods for each type palette.
  repeated PropertyObjectFileInstance typePaletteFiles = 2;
}

message Engine_SetTypePaletteFileListResponse {
}

message Engine_GetToolMenuStructureRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_GetToolMenuStructureResponse {
  // The object that specifies the menu structure. See MenuItemProperties for a description of this property object.
  PropertyObjectInstance returnValue = 1;
}

message Engine_GetResourceSymbolsRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the category or section label.
  string section = 2;
}

message Engine_GetResourceSymbolsResponse {
  // An array of strings that contains the names of all the symbols under the given category.
  repeated string returnValue = 1;
}

message Engine_CheckExpressionRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the context in which to evaluate the expression. This method uses this object to determine whether variables in the expression are valid. If you pass a NULL reference, this method checks only the expression syntax.
  PropertyObjectInstance evaluationContext = 2;
  // Specifies the expression to check.
  string expressionStr = 3;
  // Pass 0 to specify the default behavior, or pass one or more EvaluationOptions constants. Use the bitwise-OR operator to specify multiple options.
  EvaluationOptions EvaluationOptions = 4;
}

message Engine_CheckExpressionResponse {
  // Returns True if the expression is correct. Returns False if the expression contains an error. If it returns False, check the errorDescription, startErrPos, and endErrPos parameters for more information.
  bool returnValue = 1;
  // When an error exists, this parameter returns an error message describing the type of error.
  string errorDescription = 2;
  // When an error exists, this parameter returns the index of the location in the string where the error begins.
  int32 startErrPos = 3;
  // When an error exists, this parameter returns the index of the location in the string of the first character beyond the error.
  int32 endErrPos = 4;
}

message Engine_LocalizeExpressionRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies an unlocalized expression string to convert.
  string expressionString = 2;
  // Constant that specifies how the method determines which character is the localized decimal point that it uses to localize the expression.
  DecimalPointLocalizationOptions decimalPointOption = 3;
}

message Engine_LocalizeExpressionResponse {
  // String containing the localized expression.
  string returnValue = 1;
}

message Engine_DelocalizeExpressionRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the localized expression string to convert.
  string localizedExpressionString = 2;
  // Pass a constant that specifies how the method determines which character the localized expression uses for the localized decimal point.
  DecimalPointLocalizationOptions decimalPointOption = 3;
}

message Engine_DelocalizeExpressionResponse {
  // A string containing the delocalized expression.
  string returnValue = 1;
}

message Engine_GetLocalizedDecimalPointRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // A constant that specifies how the method determines which character is the localized decimal point character.
  DecimalPointLocalizationOptions decimalPointOption = 2;
}

message Engine_GetLocalizedDecimalPointResponse {
  // A string that contains the localized decimal point character.
  string returnValue = 1;
}

message Engine_DisplayMessageBoxRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies the text to display in the message box.
  string messageText = 3;
  // Specifies the type of message box. This tells the message box which icon to display.
  MsgBoxTypes msgBoxType = 4;
  // Specify CommonDlgOption_NoOptions or CommonDlgOption_ModalToAppMainWnd.
  int32 dlgOptions = 5;
  // Specifies any additional flags the Windows SDK MessageBox function allows.
  int32 win32Flags = 6;
}

message Engine_DisplayMessageBoxResponse {
  // Returns the user response. This is the same as the return value from the Microsoft Windows Software Development Kit MessageBox function. The following are typical values: IDOK (1), IDCANCEL (2), IDYES (6), IDNO (7).
  int32 returnValue = 1;
}

message Engine_GetToolMenuItemInfoExRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies a zero-based index for a Tools menu or submenu.
  int32 menuIndex = 2;
  // Specifies a zero-based index for an item within the menu or submenu.
  int32 itemIndex = 3;
}

message Engine_GetToolMenuItemInfoExResponse {
  // Returns the text to display in the menu item.
  string itemText = 1;
  // If the item is a submenu, this parameter returns the zero-based menu index of the Tools menu for the item. Otherwise, it returns -1.
  int32 subMenuIndex = 2;
  // The bitwise-OR combination of one or more ToolMenuItemAttributes constants. Use the bitwise-AND operator to determine whether an item has a specific attribute.
  ToolMenuItemAttributes itemAttributes = 3;
  // Returns a unique ID to identify the menu item. Use this ID to invoke the Tools menu item or to obtain the menu item information again at a later time.
  int32 uniqueItemID = 4;
}

message Engine_GetToolMenuItemInfoWithIDExRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the Tools menu item ID you obtain from the Engine.GetToolMenuItemInfoEx method or the Menu_ToolIDProp property on the object the  Engine.GetToolMenuStructure method returns.
  int32 uniqueItemID = 2;
}

message Engine_GetToolMenuItemInfoWithIDExResponse {
  // Returns the text to display in the menu item.
  string itemText = 1;
  // If the item is a submenu, this parameter returns the zero-based menu index of the Tools menu for the item. Otherwise, it returns -1.
  int32 subMenuIndex = 2;
  // The bitwise-OR combination of one or more ToolMenuItemAttributes constants. Use the bitwise-AND operator to determine whether an item has a specific attribute.
  ToolMenuItemAttributes itemAttributes = 3;
}

message Engine_NewPropertyObjectFileRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the type of file to create.
  PropertyObjectFileTypes FileType = 2;
}

message Engine_NewPropertyObjectFileResponse {
  // The return type of the PropertyObjectFile object.
  PropertyObjectFileInstance returnValue = 1;
}

message Engine_NewStepTypeRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_NewStepTypeResponse {
  // The return type of the StepType object.
  StepTypeInstance returnValue = 1;
}

message Engine_AddImageRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Must specify an icon image.
  IPictureDispInstance image = 2;
  // Specifies the name to associate with the image. The name must be unique among all images.
  string imageName = 3;
}

message Engine_AddImageResponse {
  // The index of the added image.
  int32 returnValue = 1;
}

message Engine_GetSequenceFileExRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the pathname of the sequence file. If the pathname is relative, this method tries to find it in the current directory, unless you specify the GetSeqFile_FindFile option.
  string seqFilePath = 2;
  // Specifies one or more GetSeqFileOptions constants. Use the bitwise-OR operator to specify multiple sequence file flags.
  GetSeqFileOptions getSeqFileFlags = 3;
  // Specifies how to handle type conflicts.
  TypeConflictHandlerTypes handlerType = 4;
}

message Engine_GetSequenceFileExResponse {
  // A SequenceFile object.
  SequenceFileInstance returnValue = 1;
}

message Engine_ShutDownRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Pass True when performing the final shutdown before exiting the application. Passing False permits the user to cancel shutdown when executions are running.
  bool final = 2;
}

message Engine_ShutDownResponse {
}

message Engine_GetSequenceFileRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the pathname of the sequence file.
  string seqFilePath = 2;
  // Specifies one or more GetSeqFileOptions constants. Use the bitwise-OR operator to specify multiple sequence file flags.
  GetSeqFileOptions getSeqFileFlags = 3;
}

message Engine_GetSequenceFileResponse {
  // A SequenceFile object.
  SequenceFileInstance returnValue = 1;
}

message Engine_NewSequenceFileRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_NewSequenceFileResponse {
  // The return type of the SequenceFile object.
  SequenceFileInstance returnValue = 1;
}

message Engine_ReleaseSequenceFileRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Pass a reference to the sequence file to release.
  SequenceFileInstance sequenceFileToRelease = 2;
}

message Engine_ReleaseSequenceFileResponse {
}

message Engine_NewSequenceRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_NewSequenceResponse {
  // The return type of the Sequence object.
  SequenceInstance returnValue = 1;
}

message Engine_NewStepRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the key name of the module Adapter object to use to create the step. Pass an empty string to use the adapter the step type designates or, if the step has no designated adapter, to use the adapter the Engine.DefaultAdapter property specifies.
  string adapterKeyNameVal = 2;
  // Specifies the name of the step type with which to create the step. The step type must already be in memory. The sequence editor and custom user interfaces load step types into memory when calling the Engine.LoadTypePaletteFilesEx method or when loading a sequence file from disk. To create a new step type, use the Engine.NewStepType method.
  string stepTypeName = 3;
}

message Engine_NewStepResponse {
  // The return type of the Step object.
  StepInstance returnValue = 1;
}

message Engine_NewUserRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies a User object with which to create the new user. The new user inherits the privileges from the User object the userProfile parameter specifies. The new user is not added as a member of any user groups of which the User object is a member.
  // Pass a NULL reference if you want to create a NewUser object without using a user profile. The new user inherits the default values as specified by the User standard data type.
  // You can obtain user groups using the Engine.GetUserGroup method.
  UserInstance userProfile = 2;
}

message Engine_NewUserResponse {
  // The return type of the User object.
  UserInstance returnValue = 1;
}

message Engine_UserNameExistsRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the login name to find.
  string LoginName = 2;
}

message Engine_UserNameExistsResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message Engine_GetUserRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the login name to find.
  string LoginName = 2;
}

message Engine_GetUserResponse {
  // The return type of the User object.
  UserInstance returnValue = 1;
}

message Engine_CurrentUserHasPrivilegeRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the name of the privilege to check. You can specify the name of any privilege property. You can specify the full privilege path in the user privileges property view, such as Debug.RunSelectedTests, or you can specify the base privilege name, such as RunSelectedTests. If you specify only the base privilege name and more than one instance of the base privilege name exists, the method returns the value of the first base privilege it finds with that name. You can pass "*" as the string argument to determine whether a user is currently logged in.
  string privilegeName = 2;
}

message Engine_CurrentUserHasPrivilegeResponse {
  // Returns True if the current user has the privilege.
  bool returnValue = 1;
}

message Engine_GetUserProfileRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the name of the user profile to return.
  string userProfileName = 2;
}

message Engine_GetUserProfileResponse {
  // The return type of the User object.
  UserInstance returnValue = 1;
}

message Engine_GetAdapterRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies a zero-based index for the Adapter object to return. You can obtain the number of Adapter objects from the Engine.NumAdapters property. To obtain a reference to a specific adapter, or to iterate through the adapters in a specific order, use the Engine.GetAdapterByKeyName method instead.
  int32 adapterIndex = 2;
}

message Engine_GetAdapterResponse {
  // The return type of the Adapter object.
  AdapterInstance returnValue = 1;
}

message Engine_NewExecutionRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the SequenceFile object that contains the sequence to execute. If the execution uses a process model, pass the client SequenceFile object.
  SequenceFileInstance sequenceFileParam = 2;
  // Specifies the name of the sequence or Process Model entry point to execute.
  string sequenceNameParam = 3;
  // Pass the process model SequenceFile object if you want to execute a Process Model entry point. Otherwise, a NULL object reference in LabVIEW, 0 in LabWindows/CVI, or the Nothing keyword in Visual Basic, pass a NULL dispatch pointer in Microsoft Foundation Classes.
  SequenceFileInstance processModelParam = 4;
  // Pass True to suspend execution before executing the first step.
  bool breakAtFirstStep = 5;
  // Pass 0 for the default behavior or pass one or more ExecutionTypeMask constants. Use the bitwise-OR operator to pass multiple constants.
  ExecutionTypeMask executionTypeMaskParam = 6;
  // Specifies a PropertyObject object that contains the arguments to the sequence you want to execute. Each subproperty of the PropertyObject object represents a parameter to the sequence. The subproperties must appear in the same order as the sequence parameters.
  PropertyObjectInstance sequenceArgsParam = 7;
  // Specifies an EditArgs object that indicates which items are currently selected in the user interface. This is required only for Process Model entry points.
  PropertyObjectInstance editArgsParam = 8;
  // Specifies an InteractiveArgs object that indicates which steps are currently selected in the user interface and contains looping information necessary for an interactive execution. Pass this parameter only for interactive executions.
  PropertyObjectInstance InteractiveArgsParam = 9;
}

message Engine_NewExecutionResponse {
  // The return type of the Execution object.
  ExecutionInstance returnValue = 1;
}

message Engine_CallFrontEndCallbackRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the name of the Front-End callback sequence to call.
  string sequenceNameParam = 2;
  // Specifies a PropertyObject object that contains the parameters to pass to the sequence. Each subproperty of the PropertyObject object represents a parameter to the sequence. The subproperties must appear in the same order as the sequence parameters.
  PropertyObjectInstance argumentList = 3;
}

message Engine_CallFrontEndCallbackResponse {
  // The Execution object of the newly created execution.
  ExecutionInstance returnValue = 1;
}

message Engine_AbortAllRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_AbortAllResponse {
}

message Engine_BreakAllRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_BreakAllResponse {
}

message Engine_TerminateAllRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_TerminateAllResponse {
}

message Engine_GetRemoteExecutorInterfaceRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Returns
  int32 adapterIndex = 2;
}

message Engine_GetRemoteExecutorInterfaceResponse {
  // Specifies
  RExecutorInstance returnValue = 1;
}

message Engine_NewInteractiveArgsRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_NewInteractiveArgsResponse {
  // The return type of the InteractiveArgs object.
  InteractiveArgsInstance returnValue = 1;
}

message Engine_NewEditArgsRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_NewEditArgsResponse {
  // The return type of the EditArgs object.
  EditArgsInstance returnValue = 1;
}

message Engine_NewPropertyObjectRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the type of value you want the property to contain.
  PropertyValueTypes ValueType = 2;
  // Pass True if you want the property value to be an array.
  bool asArray = 3;
  // If you pass PropValType_NamedType for the ValueType parameter, pass the name of the type for this parameter. Otherwise, pass an empty string. If you pass a type name, the type must already be in memory. Refer to NamedPropertyTypes for a list of built-in name types.
  string typeNameParam = 4;
  // Pass 0 to specify the default behavior, or pass one or more PropertyOptions constants. Use the bitwise-OR operator to specify multiple options.
  PropertyOptions options = 5;
}

message Engine_NewPropertyObjectResponse {
  // The return type of the PropertyObject object.
  PropertyObjectInstance returnValue = 1;
}

message Engine_RegisterUIMessageCallbackRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the address of the callback function.
  int32 callbackFuncAddr = 2;
}

message Engine_RegisterUIMessageCallbackResponse {
}

message Engine_GetUIMessageRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_GetUIMessageResponse {
  // The return type of the UIMessage object.
  UIMessageInstance returnValue = 1;
}

message Engine_DisplayLoginDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies the initial login name you want displayed in the dialog box. If you pass an empty string, the first login name in the ring control is selected.
  string initialLoginName = 3;
  // Specifies the initial password you want displayed in the dialog box. It appears on screen as all asterisks (*).
  string initialPassword = 4;
  // By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  bool modalToAppMainWind = 5;
}

message Engine_DisplayLoginDialogResponse {
  // Returns True if you click OK in the dialog box. Returns False if you click Cancel.
  bool returnValue = 1;
  // Returns the User object that represents the user who logged in.
  UserInstance userObject = 2;
}

message Engine_DisplayEditUserDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies the User object you want to edit.
  UserInstance userObject = 3;
  // By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle the Engine.AppMainHwnd property returns. Typically, you do not need to set this option.
  bool modalToAppMainWind = 4;
}

message Engine_DisplayEditUserDialogResponse {
  // Returns True if you click OK in the dialog box. Returns False if you click Cancel.
  bool returnValue = 1;
}

message Engine_DisplayNewUserDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  bool modalToAppMainWind = 3;
}

message Engine_DisplayNewUserDialogResponse {
  // Returns True if you click OK in the dialog box. Returns False if you click Cancel.
  bool returnValue = 1;
  // Returns the User object that represents the newly created user.
  UserInstance userObject = 2;
}

message Engine_DisplaySearchDirDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Pass True if you want a read-only version of the dialog box.
  bool readOnly = 3;
  // By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  bool modalToAppMainWind = 4;
}

message Engine_DisplaySearchDirDialogResponse {
  // Returns True if you make modifications and click OK in the dialog box. Returns False if you click Cancel or make no modifications.
  bool returnValue = 1;
}

message Engine_DisplayOptionsDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Pass True if you want a read-only version of the dialog box.
  bool readOnly = 3;
  // By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle the Engine.AppMainHwnd property returns. Typically, you do not need to set this option.
  bool modalToAppMainWind = 4;
}

message Engine_DisplayOptionsDialogResponse {
  // Returns True if you click OK in the dialog box. Returns False if you click Cancel.
  bool returnValue = 1;
}

message Engine_DisplayRunTimeErrorDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies the error message to display in the dialog box.
  string errorMessage = 3;
  // Pass True if the run-time error occurred in the Cleanup step group of the sequence. This information affects the list of options the dialog box displays to the user.
  bool inCleanupStepGroup = 4;
  // By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  bool modalToAppMainWind = 5;
}

message Engine_DisplayRunTimeErrorDialogResponse {
  // Returns a value that indicates whether the user wants this dialog box to launch again if another run-time error occurs in the current execution.
  bool displayOnNextError = 1;
  // Returns a value that indicates whether the user wants the current execution to suspend at the location of the run-time error.
  bool suspendExecution = 2;
  // Returns the option the user selects in the dialog box to specify how the execution should proceed.
  RTEOptions runTimeErrorAction = 3;
}

message Engine_DisplayOpenFileDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies a string to display on the OK button. Pass an empty string to use the default.
  string okButtonText = 3;
  // Specifies the path of the directory you want the user to browse initially. Pass an empty string to specify the current directory.
  string initialPath = 4;
  // By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle that the Engine.AppMainHwnd property returns. Typically, you do not need to set this option.
  bool modalToAppMainWind = 5;
  // Pass 0 for the default behavior, or pass one or more OpenFileDialogOptions constants. Use the bitwise-OR operator to specify multiple flags.
  OpenFileDialogOptions openFileDialogFlags = 6;
  // Specifies the extension to append to the pathname if the user specifies no extension. Do not include the period in the extension.
  string defaultExtension = 7;
  // Specifies the WindowsFileDialogFlags.
  WindowsFileDialogFlags win32Flags = 8;
  // Specifies the extensions files must have to appear in the dialog box. Each filter the string contains has two parts. The first part is a descriptive name for the filter and the second part lists the extensions the file can have. Specify multiple extensions using a semi-colon (;) as a delimiter, and end each section with a vertical bar (|). End the string with a final vertical bar (|). The following example illustrates this format:
  // "Sequence Files (*.seq)|*.seq|Report Files (*.txt;*.htm;*.html)|*.txt;*.htm;*.html||"
  string fileFilter = 9;
  // Specifies a SequenceFile object if you want to include the directory of the sequence file in the list of valid search directories for a relative pathname.
  PropertyObjectInstance currentSequenceFile = 10;
}

message Engine_DisplayOpenFileDialogResponse {
  // Returns True if you click OK in the dialog box. Returns False if you click Cancel.
  bool returnValue = 1;
  // Returns the pathname the user specifies in the dialog box. The path can be relative.
  string selectedPath = 2;
  // Returns the absolute pathname of the file the user selects.
  string absolutePath = 3;
}

message Engine_DisplayStepPropDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies the Step object that contains the properties you want to edit.
  StepInstance Step = 3;
  // Pass True to launch a read-only version of the dialog box.
  bool readOnly = 4;
  // By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  bool modalToAppMainWind = 5;
  // Pass True to show a View Contents button in the dialog box. If you pass True, the viewContents parameter of this method returns True when a user clicks the View Contents button.
  bool showViewContentsBtn = 6;
}

message Engine_DisplayStepPropDialogResponse {
  // Returns True if you click OK in the dialog box. Returns False if you click Cancel.
  bool returnValue = 1;
  // Returns True if the user clicks the View Contents button in the dialog box.
  bool viewContents = 2;
  // Returns True if the step was modified.
  bool modifiedStep = 3;
}

message Engine_DisplaySequencePropDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies the Sequence object that contains the properties you want to edit.
  SequenceInstance Sequence = 3;
  // Pass True if you want a read-only version of the dialog box.
  bool readOnly = 4;
  // By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  bool modalToAppMainWind = 5;
  // Pass True to show a View Contents button in the dialog box. If you pass True, the viewContents parameter of this method returns True if the user clicks the View Contents button in the dialog box.
  bool showViewContentsBtn = 6;
}

message Engine_DisplaySequencePropDialogResponse {
  // Returns True if you make modifications and click OK in the dialog box. Returns False if you click Cancel or make no modifications.
  bool returnValue = 1;
  // Returns True if the user clicks the View Contents button in the dialog box.
  bool viewContents = 2;
}

message Engine_DisplaySeqFilePropDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Pass a SequenceFile object to specify which sequence file you want to edit.
  SequenceFileInstance sequenceFileParam = 3;
  // Pass True if you want a read-only version of the dialog box.
  bool readOnly = 4;
  // By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  bool modalToAppMainWind = 5;
  // Pass True to show a View Contents button in the dialog box. If you pass True, the viewContents parameter of this method returns True when a user clicks the View Contents button.
  bool showViewContentsBtn = 6;
}

message Engine_DisplaySeqFilePropDialogResponse {
  // Returns True if you make modifications and click OK in the dialog box. Returns False if you click Cancel or make no modifications.
  bool returnValue = 1;
  // Returns True if a user clicks the View Contents button in the dialog box.
  bool viewContents = 2;
}

message Engine_DisplayPreconditionDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies the sequence in which to edit preconditions.
  SequenceInstance Sequence = 3;
  // Pass True if you want a read-only version of the dialog box.
  bool readOnly = 4;
  // By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  bool modalToAppMainWind = 5;
  // Specifies a Step object if you want the dialog box to display only the preconditions for a particular step.
  PropertyObjectInstance initialStep = 6;
}

message Engine_DisplayPreconditionDialogResponse {
  // Returns True if you make modifications and click OK in the dialog box. Returns False if you click Cancel or make no modifications.
  bool returnValue = 1;
}

message Engine_DisplayBrowseExprDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies the sequence context into which to browse. You can use the SequenceFile.NewEditContext method to obtain an edit time sequence context from a sequence file.
  SequenceContextInstance sequenceContextParam = 3;
  // Specifies the initial expression string for the dialog box. This string must be a localized expression.
  string expressionIn = 4;
  // Specifies the zero-based index of the location in the initial expression where the selected text begins. If you want a cursor instead of selected text, pass the same index for selectionEndIn.
  int32 selectionStartIn = 5;
  // Specifies the index of the location in the initial expression of the first character beyond the selected text. If you want a cursor instead of selected text, pass the same index for selectionStartIn.
  int32 selectionEndIn = 6;
  // Specifies the name of the initial variable or property to show as selected in the dialog box.
  string initialVariableName = 7;
  // If the initial expression string uses a carriage return/linefeed combination ("\r\n") to indicate the end of a line of text, pass True for this parameter. If the string uses only a linefeed ("\n"), pass False. This parameter also determines if the carriage return/linefeed is inserted in the output expression for new lines.
  // 
  bool usesCRLF = 8;
  // By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  bool modalToAppMainWind = 9;
}

message Engine_DisplayBrowseExprDialogResponse {
  // Returns True if you click OK in the dialog box. Returns False if you click Cancel.
  bool returnValue = 1;
  // Returns the resulting expression from the dialog box when the user clicks OK. This expression string is a localized expression. Refer to Engine.DelocalizeExpression for more information about converting a localized expression string to a standard form suitable for evaluation.
  string expressionOut = 2;
  // Returns the index of the start of the selected text in the resulting expression when the user clicks OK.
  int32 selectionStartOut = 3;
  // Returns the index of the first character beyond the selected text in the resulting expression when the user clicks OK.
  int32 selectionEndOut = 4;
}

message Engine_DisplayToolMenuDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Pass True if you want a read-only version of the dialog box.
  bool readOnly = 3;
  // By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  bool modalToAppMainWind = 4;
}

message Engine_DisplayToolMenuDialogResponse {
  // Returns True if you make modifications and click OK in the dialog box. Returns False if you click Cancel or make no modifications.
  bool returnValue = 1;
}

message Engine_DisplayExternalViewerDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Pass True if you want a read-only version of the dialog box.
  bool readOnly = 3;
  // By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  bool modalToAppMainWind = 4;
}

message Engine_DisplayExternalViewerDialogResponse {
  // Returns True if you make modifications and click OK in the dialog box. Returns False if you click Cancel or make no modifications.
  bool returnValue = 1;
}

message Engine_DisplayAdapterConfigDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Pass True if you want a read-only version of the Selected column in the dialog box.
  bool adapterSelectorReadOnly = 3;
  // Pass True if you want read-only versions of the Adapter Configuration controls in the dialog box.
  bool adapterCfgReadOnly = 4;
  // Pass True to hide the Selected and Hidden columns in the dialog box. This is useful for user interfaces that do not require the ability to select a default adapter.
  bool hideAdapterSelector = 5;
  // By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle of the Engine.AppMainHwnd property. Typically, you do not need to set this option.
  bool modalToAppMainWind = 6;
}

message Engine_DisplayAdapterConfigDialogResponse {
  // Returns True if the dialog box modifies adapter settings.
  bool returnValue = 1;
}

message Engine_DisplayLoopOnStepsDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the title of the dialog box. Pass an empty string to use the default title for the dialog box.
  string dlgTitle = 2;
  // Specifies a reference to the first currently selected step. The dialog box uses this step to display property information if the user browses to create the 'stop on' expression.
  StepInstance selectedStep = 3;
  // By default, the dialog box is modal to the last active window of the calling thread, or if there is none, to the last active window from AppMainHwnd. If you set this option, the dialog box is modal with respect to the window handle the Engine.AppMainHwnd property returns. Typically, you do not need to set this option.
  bool modalToAppMainWnd = 4;
}

message Engine_DisplayLoopOnStepsDialogResponse {
  // Returns True if you click OK in the dialog box. Returns False if you click Cancel.
  bool returnValue = 1;
  // Returns the value of the loop count the user specifies in the dialog box. A value of -1 indicates an infinite loop.
  int32 loopCountValue = 2;
  // Returns the value of the stop expression the user specifies in the dialog box. An empty string indicates that the stop expression is not used.
  string stopExpressionValue = 3;
}

message Engine_ConstructToolMenusRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies which items in the user interface are currently selected. The method uses this information to calculate the item text, hidden, and enabled states of each menu item by evaluating its item text, hidden, and enabled expressions.
  PropertyObjectInstance editArgsParam = 2;
}

message Engine_ConstructToolMenusResponse {
  // The number of Tools menus that exist. This number includes the Tools menu and submenus.
  int32 returnValue = 1;
}

message Engine_GetNumToolMenusRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_GetNumToolMenusResponse {
  // The number of Tools menus.
  int32 returnValue = 1;
}

message Engine_GetNumToolMenuItemsRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the zero-based index of the Tools menu from which to obtain the number of Tools menu items.
  int32 menuIndex = 2;
}

message Engine_GetNumToolMenuItemsResponse {
  // The number of Tools menu items.
  int32 returnValue = 1;
}

message Engine_GetToolMenuItemInfoRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies a zero-based index for a Tools menu or submenu.
  int32 menuIndex = 2;
  // Specifies a zero-based index for an item within the menu or submenu.
  int32 itemIndex = 3;
}

message Engine_GetToolMenuItemInfoResponse {
  // Returns the text to display in the menu item.
  string itemText = 1;
  // If the item is a submenu, this parameter returns the zero-based menu index of the Tools menu for the item. Otherwise, it returns -1.
  int32 subMenuIndex = 2;
  // If this parameter is True, enable the menu item. If this parameter is False, disable it.
  bool enabled = 3;
  // Returns a unique ID to identify the menu item. Use this ID to invoke the Tools menu item or to obtain the menu item information again at a later time.
  int32 uniqueItemID = 4;
}

message Engine_GetToolMenuItemInfoWithIDRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies a Tools menu item ID you obtain from the Engine.GetToolMenuItemInfoEx method.
  int32 uniqueItemID = 2;
}

message Engine_GetToolMenuItemInfoWithIDResponse {
  // Returns the text to display in the menu item.
  string itemText = 1;
  // If the item is a submenu, this parameter returns the zero-based menu index of the Tools menu for the item. Otherwise, it returns -1.
  int32 subMenuIndex = 2;
  // If this parameter is True, enable the menu item. If this parameter is False, disable it.
  bool enabled = 3;
}

message Engine_InvokeToolMenuItemRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies a zero-based index for a Tools menu or submenu.
  int32 menuIndex = 2;
  // Specifies a zero-based index for an item within a Tools menu or submenu.
  int32 itemIndex = 3;
}

message Engine_InvokeToolMenuItemResponse {
}

message Engine_InvokeToolMenuItemWithIDRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the Tools menu item ID you obtain from the Engine.GetToolMenuItemInfoEx method or the Menu_ToolIDProp property on the object the Engine.GetToolMenuStructure method returns.
  int32 uniqueItemID = 2;
}

message Engine_InvokeToolMenuItemWithIDResponse {
}

message Engine_EvalToolMenuItemExprsRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the currently selected items in the user interface.
  PropertyObjectInstance editArgsParam = 2;
}

message Engine_EvalToolMenuItemExprsResponse {
}

message Engine_FindFileRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies a string that contains the simple filename or relative pathname of the file to search for. TestStand expands macros in the path as specified by the Engine.ExpandPathMacros method before searching.
  string fileToFind = 2;
  // Specifies whether to prompt the user if the file is not initially found.
  FindFilePromptOptions promptOption = 3;
  // Specifies file search options.
  FindFileSearchListOptions srchListOption = 4;
  // If this flag is True and fileToFind has no file extension, then the FindFile method searches for files with the same basename that end in the common command extensions: .exe, .com, and .bat.
  bool isCommand = 5;
  // If you pass a SequenceFile object for this parameter, the FindFile method initially searches the directory where the sequence file is stored if the Current Sequence File Directory option is enabled. Enable the current sequence file directory in the sequence editor by selecting Configure»Search Directories and enabling the Current Sequence File Directory option.
  PropertyObjectInstance currentSequenceFile = 6;
}

message Engine_FindFileResponse {
  // Returns True if the file is found.
  bool returnValue = 1;
  // Returns the absolute pathname of the file if the file is found.
  string absolutePath = 2;
  // Returns True if the method prompts the user and the user cancels the find operation.
  bool userCancelled = 3;
}

message Engine_FindPathRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies a string that contains the simple file or directory name or relative pathname of the file or directory to search for. TestStand expands macros in the path as specified by the Engine.ExpandPathMacros method before searching.
  string pathToFind = 2;
  // If you pass a SequenceFile object for this parameter, the Engine.FindPath method initially searches the directory where the sequence file is stored if the Current Sequence File Directory option is enabled. Select Configure»Search Directories to launch the Edit Search Directories dialog box and enable the Current Sequence File Directory option.
  PropertyObjectInstance currentSequenceFile = 3;
}

message Engine_FindPathResponse {
  // Returns True if the file or directory is found.
  bool returnValue = 1;
  // Returns the absolute pathname of the file or directory if it is found.
  string absolutePath = 2;
  // Returns more information about the file or directory.
  FindPathStatusValues statusFlag = 3;
}

message Engine_CreateTempFileRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the base name of the temporary file. If necessary, TestStand adds other characters to the name to make it unique.
  string baseName = 2;
  // Specifies the file extension for the temporary file.
  string extension = 3;
  // Specifies the directory in which to store the temporary file. You can include a trailing backslash, but it is not required. Pass an empty string to use the TestStand subdirectory in the directory the TEMP environment variable specifies, which by default is %USERPROFILE%\AppData\Local\Temp on Windows 8.1/8/7/Vista and %USERPROFILE%\Local Settings\Temp on Microsoft Windows XP.
  string directory = 4;
}

message Engine_CreateTempFileResponse {
  // The pathname of the temporary file.
  string returnValue = 1;
}

message Engine_CheckExprSyntaxRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the expression for which to check the syntax.
  string expressionStr = 2;
}

message Engine_CheckExprSyntaxResponse {
  // Returns True if the syntax is correct. Returns False if the expression contains a syntax error. If this method returns False, check the errorDescription, startErrPos, and endErrPos parameters for more information.
  bool returnValue = 1;
  // When a syntax error exists, this parameter returns an error message describing the type of error.
  string errorDescription = 2;
  // When a syntax error exists, this parameter returns the index of the location in the string where the error begins.
  int32 startErrPos = 3;
  // When a syntax error exists, this parameter returns the index of the location in the string of the first character beyond the syntax error.
  int32 endErrPos = 4;
}

message Engine_GetErrorStringRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the error code to describe.
  TSError errorCode = 2;
}

message Engine_GetErrorStringResponse {
  // Returns False when the errorCode is not a TSError.
  bool returnValue = 1;
  // Returns a description of the errorCode. If the error code is not a TSError, the parameter returns the string "User defined error code."
  string errorString = 2;
}

message Engine_GetResourceStringRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the category or section label.
  string section = 2;
  // Specifies the symbol or item label.
  string symbol = 3;
  // Specifies a default string to return when the string resource file does not contain an entry with the category and symbol you specify. If you do not specify this parameter and the string resource file does not contain the entry, this function returns the string, String not found in table.
  optional string defaultString = 4;
}

message Engine_GetResourceStringResponse {
  // The resource string.
  string returnValue = 1;
  // Returns True if the string is found in the resource file and False if the string is not found in the resource file.
  optional bool found = 2;
}

message Engine_LaunchExternalViewerRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the pathname of the file to view.
  string FilePath = 2;
}

message Engine_LaunchExternalViewerResponse {
}

message Engine_NotifyStartOfModalDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_NotifyStartOfModalDialogResponse {
  // Returns the modalID to pass to the Engine.NotifyEndOfModalDialog method when the dialog box no longer appears onscreen.
  int32 returnValue = 1;
}

message Engine_NotifyEndOfModalDialogRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the modalID you receive as a return value from the Engine.NotifyStartOfModalDialogEx method.
  int32 modalID = 2;
}

message Engine_NotifyEndOfModalDialogResponse {
}

message Engine_CommitGlobalsToDiskRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // TestStand writes the station globals to disk only if they change after TestStand has loaded or saved them. If another application changes the station globals on disk after TestStand has loaded or saved them, the action TestStand takes depends on the value you pass in this parameter. If you pass True, TestStand gives users the option to overwrite the changes the other application made. If you pass False, TestStand saves the station globals without prompting the user to resolve any conflicts between the changes in memory and the changes on disk.
  bool promptOnSaveConflicts = 2;
}

message Engine_CommitGlobalsToDiskResponse {
}

message Engine_UnloadAllModulesRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_UnloadAllModulesResponse {
}

message Engine_GetStationModelSequenceFileRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_GetStationModelSequenceFileResponse {
  // The return type of the SequenceFile object.
  SequenceFileInstance returnValue = 1;
  // Returns a string that describes the process model file.
  string modelDescriptionString = 2;
}

message Engine_ReloadGlobalsRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_ReloadGlobalsResponse {
}

message Engine_Get_GlobalsRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_GlobalsResponse {
  // Returns the PropertyObject that contains the global variables for the test station.
  PropertyObjectInstance returnValue = 1;
}

message Engine_Set_CurrentUserRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the user who is currently logged in.
  UserInstance val = 2;
}

message Engine_Set_CurrentUserResponse {
}

message Engine_Get_CurrentUserRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_CurrentUserResponse {
  // Specifies the user who is currently logged in.
  UserInstance returnValue = 1;
}

message Engine_Set_ApplicationIsEditorRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies whether the application is a sequence editor.
  bool isEditor = 2;
}

message Engine_Set_ApplicationIsEditorResponse {
}

message Engine_Get_ApplicationIsEditorRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_ApplicationIsEditorResponse {
  // Specifies whether the application is a sequence editor.
  bool returnValue = 1;
}

message Engine_Set_AppMainHwndRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the Window handle of the owner of modal dialog boxes.
  // 
  int32 hwnd = 2;
}

message Engine_Set_AppMainHwndResponse {
}

message Engine_Get_AppMainHwndRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_AppMainHwndResponse {
  // Specifies the Window handle of the owner of modal dialog boxes.
  // 
  int32 returnValue = 1;
}

message Engine_Get_NumAdaptersRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_NumAdaptersResponse {
  // Returns the number of module adapters available for use with TestStand.
  int32 returnValue = 1;
}

message Engine_Set_DefaultAdapterRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the key name of the default adapter TestStand uses to create steps.
  string adapterKeyNameVal = 2;
}

message Engine_Set_DefaultAdapterResponse {
}

message Engine_Get_DefaultAdapterRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_DefaultAdapterResponse {
  // Specifies the key name of the default adapter TestStand uses to create steps.
  string returnValue = 1;
}

message Engine_Set_EnableUserPrivilegeCheckingRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Note: This property is obsolete. Use the StationOptions.EnableUserPrivilegeChecking property instead.
  bool enabled = 2;
}

message Engine_Set_EnableUserPrivilegeCheckingResponse {
}

message Engine_Get_EnableUserPrivilegeCheckingRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_EnableUserPrivilegeCheckingResponse {
  // Note: This property is obsolete. Use the StationOptions.EnableUserPrivilegeChecking property instead.
  bool returnValue = 1;
}

message Engine_Set_AutoLoginSystemUserRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Note: This property is obsolete. Use the StationOptions.AutoLoginSystemUser property instead.
  bool enabled = 2;
}

message Engine_Set_AutoLoginSystemUserResponse {
}

message Engine_Get_AutoLoginSystemUserRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_AutoLoginSystemUserResponse {
  // Note: This property is obsolete. Use the StationOptions.AutoLoginSystemUser property instead.
  bool returnValue = 1;
}

message Engine_Get_MajorVersionRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_MajorVersionResponse {
  // Returns the major version number for the current version of TestStand.
  int32 returnValue = 1;
}

message Engine_Get_MinorVersionRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_MinorVersionResponse {
  // Returns the minor version number for the current version of TestStand.
  int32 returnValue = 1;
}

message Engine_Get_RevisionVersionRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_RevisionVersionResponse {
  // Returns the revision version number for the current version of TestStand.
  int32 returnValue = 1;
}

message Engine_Get_VersionStringRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_VersionStringResponse {
  // Returns the full version of the TestStand Engine as a string.
  string returnValue = 1;
}

message Engine_Set_EnableRemoteRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Note: This property is obsolete. Use the StationOptions.AllowSequenceCallsFromRemoteMachine property instead.
  bool enabled = 2;
}

message Engine_Set_EnableRemoteResponse {
}

message Engine_Get_EnableRemoteRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_EnableRemoteResponse {
  // Note: This property is obsolete. Use the StationOptions.AllowSequenceCallsFromRemoteMachine property instead.
  bool returnValue = 1;
}

message Engine_Get_ConfigDirectoryRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_ConfigDirectoryResponse {
  // Note: This property is obsolete. Use the Engine.GetTestStandPath method instead.
  string returnValue = 1;
}

message Engine_Get_BinDirectoryRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_BinDirectoryResponse {
  // Note: This property is obsolete. Use the Engine.GetTestStandPath method instead.
  string returnValue = 1;
}

message Engine_Get_TestStandDirectoryRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_TestStandDirectoryResponse {
  // Note: This property is obsolete. Use the Engine.GetTestStandPath method instead.
  string returnValue = 1;
}

message Engine_Get_StepTypesRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_StepTypesResponse {
  // Note: This property is obsolete. Use the Engine.GetTypeNames and Engine.GetTypeDefinition properties instead.
  PropertyObjectInstance returnValue = 1;
}

message Engine_Get_CustomDataTypesRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_CustomDataTypesResponse {
  // Note: This property is obsolete. Use the Engine.GetTypeNames and Engine.GetTypeDefinition methods instead.
  PropertyObjectInstance returnValue = 1;
}

message Engine_Get_BuiltinDataTypesRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_BuiltinDataTypesResponse {
  // Note: This property is obsolete. Use the Engine.GetTypeNames and Engine.GetTypeDefinition methods instead.
  PropertyObjectInstance returnValue = 1;
}

message Engine_Set_TracingEnabledRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Note: This property is obsolete. Use the StationOptions.TracingEnabled property instead.
  bool isEnabled = 2;
}

message Engine_Set_TracingEnabledResponse {
}

message Engine_Get_TracingEnabledRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_TracingEnabledResponse {
  // Note: This property is obsolete. Use the StationOptions.TracingEnabled property instead.
  bool returnValue = 1;
}

message Engine_Set_BreakpointsEnabledRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Note: This property is obsolete. Use the StationOptions.BreakpointsEnabled property instead.
  bool isEnabled = 2;
}

message Engine_Set_BreakpointsEnabledResponse {
}

message Engine_Get_BreakpointsEnabledRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_BreakpointsEnabledResponse {
  // Note: This property is obsolete. Use the StationOptions.BreakpointsEnabled property instead.
  bool returnValue = 1;
}

message Engine_Set_DisableResultsRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Note: This property is obsolete. Use the StationOptions.DisableResults property instead.
  bool isDisabled = 2;
}

message Engine_Set_DisableResultsResponse {
}

message Engine_Get_DisableResultsRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_DisableResultsResponse {
  // Note: This property is obsolete. Use the StationOptions.DisableResults property instead.
  bool returnValue = 1;
}

message Engine_Set_AlwaysGotoCleanupOnFailureRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Note: This property is obsolete. Use the StationOptions.AlwaysGotoCleanupOnFailure property instead.
  bool isEnabled = 2;
}

message Engine_Set_AlwaysGotoCleanupOnFailureResponse {
}

message Engine_Get_AlwaysGotoCleanupOnFailureRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_AlwaysGotoCleanupOnFailureResponse {
  // Note: This property is obsolete. Use the StationOptions.AlwaysGotoCleanupOnFailure property instead.
  bool returnValue = 1;
}

message Engine_Set_BreakOnRTERequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Note: This property is obsolete. Use the StationOptions.RTEOption property instead.
  bool isEnabled = 2;
}

message Engine_Set_BreakOnRTEResponse {
}

message Engine_Get_BreakOnRTERequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_BreakOnRTEResponse {
  // Note: This property is obsolete. Use the StationOptions.RTEOption property instead.
  bool returnValue = 1;
}

message Engine_Set_ExecutionMaskRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Note: This property is obsolete. Use the StationOptions.ExecutionMask property instead.
  ExecutionMask val = 2;
}

message Engine_Set_ExecutionMaskResponse {
}

message Engine_Get_ExecutionMaskRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_ExecutionMaskResponse {
  // Note: This property is obsolete. Use the StationOptions.ExecutionMask property instead.
  ExecutionMask returnValue = 1;
}

message Engine_Set_UIMessagePollingEnabledRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies if user interface message polling is enabled.
  bool isEnabled = 2;
}

message Engine_Set_UIMessagePollingEnabledResponse {
}

message Engine_Get_UIMessagePollingEnabledRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_UIMessagePollingEnabledResponse {
  // Specifies if user interface message polling is enabled.
  bool returnValue = 1;
}

message Engine_Get_IsUIMessageQueueEmptyRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_IsUIMessageQueueEmptyResponse {
  // Returns a value that indicates whether the user interface message queue is empty.
  bool returnValue = 1;
}

message Engine_Set_UIMessageDelayRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Note: This property is obsolete. Use the StationOptions.UIMessageDelay property instead.
  int32 millisecDelay = 2;
}

message Engine_Set_UIMessageDelayResponse {
}

message Engine_Get_UIMessageDelayRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_UIMessageDelayResponse {
  // Note: This property is obsolete. Use the StationOptions.UIMessageDelay property instead.
  int32 returnValue = 1;
}

message Engine_Set_UIMessageMinDelayRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Note: This property is obsolete. Use the StationOptions.UIMessageMinDelay property instead.
  int32 millisecDelay = 2;
}

message Engine_Set_UIMessageMinDelayResponse {
}

message Engine_Get_UIMessageMinDelayRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_UIMessageMinDelayResponse {
  // Note: This property is obsolete. Use the StationOptions.UIMessageMinDelay property instead.
  int32 returnValue = 1;
}

message Engine_Set_IsRemoteRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies whether the engine was created to execute sequences on a remote computer.
  bool isRemoteParam = 2;
}

message Engine_Set_IsRemoteResponse {
}

message Engine_Get_IsRemoteRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_IsRemoteResponse {
  // Specifies whether the engine was created to execute sequences on a remote computer.
  bool returnValue = 1;
}

message Engine_Set_MasterEngineRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the controlling engine for remote engines.
  ObjectInstance MasterEngine = 2;
}

message Engine_Set_MasterEngineResponse {
}

message Engine_Get_MasterEngineRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_MasterEngineResponse {
  // Specifies the controlling engine for remote engines.
  ObjectInstance returnValue = 1;
}

message Engine_Set_UseLocalizedDecimalPointRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Note: This property is obsolete. Use the StationOptions.UseLocalizedDecimalPoint property instead.
  bool enabled = 2;
}

message Engine_Set_UseLocalizedDecimalPointResponse {
}

message Engine_Get_UseLocalizedDecimalPointRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_UseLocalizedDecimalPointResponse {
  // Note: This property is obsolete. Use the StationOptions.UseLocalizedDecimalPoint property instead.
  bool returnValue = 1;
}

message Engine_Get_GlobalsFileRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_GlobalsFileResponse {
  // Returns the PropertyObjectFile that contains the test station global variables.
  PropertyObjectFileInstance returnValue = 1;
}

message Engine_Get_UsersFileRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_UsersFileResponse {
  // Returns the PropertyObjectFile that contains the list of TestStand users and user groups.
  UsersFileInstance returnValue = 1;
}

message Engine_Get_ConfigFileRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_ConfigFileResponse {
  // Note: This property is obsolete. Use the Engine.GetEngineConfigFile property instead.
  PropertyObjectFileInstance returnValue = 1;
}

message Engine_Get_SmallImageListRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_SmallImageListResponse {
  // Note: This property is obsolete. Use the Engine.SmallImageListEx property instead. Calling this property on a 64-bit instance of the TestStand Engine results in an error.
  int32 returnValue = 1;
}

message Engine_Get_LargeImageListRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_LargeImageListResponse {
  // Note: This property is obsolete. Use the Engine.LargeImageListEx property instead. Calling this property on a 64-bit instance of the TestStand Engine results in an error.
  int32 returnValue = 1;
}

message Engine_Set_DefaultAdapterIndexRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the index of the default module adapter TestStand uses to create steps.
  int32 index = 2;
}

message Engine_Set_DefaultAdapterIndexResponse {
}

message Engine_Get_DefaultAdapterIndexRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_DefaultAdapterIndexResponse {
  // Specifies the index of the default module adapter TestStand uses to create steps.
  int32 returnValue = 1;
}

message Engine_Set_CurrentWorkspaceFileRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the current workspace file.
  WorkspaceFileInstance val = 2;
}

message Engine_Set_CurrentWorkspaceFileResponse {
}

message Engine_Get_CurrentWorkspaceFileRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_CurrentWorkspaceFileResponse {
  // Specifies the current workspace file.
  WorkspaceFileInstance returnValue = 1;
}

message Engine_Get_SecondsSinceStartRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_SecondsSinceStartResponse {
  // Returns the number of seconds since you created the engine.
  double returnValue = 1;
}

message Engine_Set_CheckOutFilesWhenEditedRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Note: This property is obsolete. Use the StationOptions.CheckOutFilesWhenEdited property instead.
  bool checkOutFiles = 2;
}

message Engine_Set_CheckOutFilesWhenEditedResponse {
}

message Engine_Get_CheckOutFilesWhenEditedRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_CheckOutFilesWhenEditedResponse {
  // Note: This property is obsolete. Use the StationOptions.CheckOutFilesWhenEdited property instead.
  bool returnValue = 1;
}

message Engine_Set_CheckOutOnlySelectedFilesRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Note: This property is obsolete. Use the StationOptions.CheckOutOnlySelectedFiles property instead.
  bool onlySelectedFiles = 2;
}

message Engine_Set_CheckOutOnlySelectedFilesResponse {
}

message Engine_Get_CheckOutOnlySelectedFilesRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_CheckOutOnlySelectedFilesResponse {
  // Note: This property is obsolete. Use the StationOptions.CheckOutOnlySelectedFiles property instead.
  bool returnValue = 1;
}

message Engine_Set_LastWorkspacePathRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the pathname of the workspace file that was open when the sequence editor last shut down.
  string pathString = 2;
}

message Engine_Set_LastWorkspacePathResponse {
}

message Engine_Get_LastWorkspacePathRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_LastWorkspacePathResponse {
  // Specifies the pathname of the workspace file that was open when the sequence editor last shut down.
  string returnValue = 1;
}

message Engine_Set_PromptWhenAddingFilesToSCRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Note: This property is obsolete. Use the StationOptions.PromptWhenAddingFilesToSC property instead.
  bool promptAddFile = 2;
}

message Engine_Set_PromptWhenAddingFilesToSCResponse {
}

message Engine_Get_PromptWhenAddingFilesToSCRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_PromptWhenAddingFilesToSCResponse {
  // Note: This property is obsolete. Use the StationOptions.PromptWhenAddingFilesToSC property instead.
  bool returnValue = 1;
}

message Engine_Set_ReloadDocsWhenOpeningWorkspaceRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Note: This property is obsolete. Use the StationOptions.ReloadDocsWhenOpeningWorkspace property instead.
  bool reloadDocs = 2;
}

message Engine_Set_ReloadDocsWhenOpeningWorkspaceResponse {
}

message Engine_Get_ReloadDocsWhenOpeningWorkspaceRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_ReloadDocsWhenOpeningWorkspaceResponse {
  // Note: This property is obsolete. Use the StationOptions.ReloadDocsWhenOpeningWorkspace property instead.
  bool returnValue = 1;
}

message Engine_Set_ReloadWorkspaceAtStartupRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Note: This property is obsolete. Use the StationOptions.ReloadWorkspaceAtStartup property instead.
  bool reloadWorkspace = 2;
}

message Engine_Set_ReloadWorkspaceAtStartupResponse {
}

message Engine_Get_ReloadWorkspaceAtStartupRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_ReloadWorkspaceAtStartupResponse {
  // Note: This property is obsolete. Use the StationOptions.ReloadWorkspaceAtStartup property instead.
  bool returnValue = 1;
}

message Engine_Set_UseDialogForCheckOutRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Note: This property is obsolete. Use the StationOptions.UseDialogForCheckOut property instead.
  bool useDialog = 2;
}

message Engine_Set_UseDialogForCheckOutResponse {
}

message Engine_Get_UseDialogForCheckOutRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_UseDialogForCheckOutResponse {
  // Note: This property is obsolete. Use the StationOptions.UseDialogForCheckOut property instead.
  bool returnValue = 1;
}

message Engine_Set_ShowHiddenPropertiesRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Note: This property is obsolete. Use the StationOptions.ShowHiddenProperties property instead.
  bool show = 2;
}

message Engine_Set_ShowHiddenPropertiesResponse {
}

message Engine_Get_ShowHiddenPropertiesRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_ShowHiddenPropertiesResponse {
  // Note: This property is obsolete. Use the StationOptions.ShowHiddenProperties property instead.
  bool returnValue = 1;
}

message Engine_Get_ComputerNameRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_ComputerNameResponse {
  // Returns the name of the computer on which the TestStand Engine was created.
  string returnValue = 1;
}

message Engine_Get_UniqueEngineIdRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_UniqueEngineIdResponse {
  // Returns an identification string that is unique among all instances of the TestStand Engine.
  string returnValue = 1;
}

message Engine_Set_CVIAdapter_ExternalCVIPrjRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Note: This property is obsolete. Use the CVIAdapter.ExecutionServerProjectPathName property instead.
  string val = 2;
}

message Engine_Set_CVIAdapter_ExternalCVIPrjResponse {
}

message Engine_Get_CVIAdapter_ExternalCVIPrjRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_CVIAdapter_ExternalCVIPrjResponse {
  // Note: This property is obsolete. Use the CVIAdapter.ExecutionServerProjectPathName property instead.
  string returnValue = 1;
}

message Engine_Set_CVIAdapter_ExecuteStepsInCVIRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Note: This property is obsolete. Use the CVIAdapter.ExecuteStepsInExternalInstance property instead.
  bool val = 2;
}

message Engine_Set_CVIAdapter_ExecuteStepsInCVIResponse {
}

message Engine_Get_CVIAdapter_ExecuteStepsInCVIRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_CVIAdapter_ExecuteStepsInCVIResponse {
  // Note: This property is obsolete. Use the CVIAdapter.ExecuteStepsInExternalInstance property instead.
  bool returnValue = 1;
}

message Engine_Set_RequireUserLoginRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Note: This property is obsolete. Use the StationOptions.RequireUserLogin property instead.
  bool requireUser = 2;
}

message Engine_Set_RequireUserLoginResponse {
}

message Engine_Get_RequireUserLoginRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_RequireUserLoginResponse {
  // Note: This property is obsolete. Use the StationOptions.RequireUserLogin property instead.
  bool returnValue = 1;
}

message Engine_Set_FileDialogDirHistoryListRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the list of directories to display in the directory history list in the File dialog box.
  repeated string directories = 2;
}

message Engine_Set_FileDialogDirHistoryListResponse {
}

message Engine_Get_FileDialogDirHistoryListRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_FileDialogDirHistoryListResponse {
  // An array of strings that specify the paths to be inserted in the directory history list control in the File dialog box.
  repeated string returnValue = 1;
}

message Engine_Set_StationIDRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Note: This property is obsolete. Use the StationOptions.StationID property instead.
  string val = 2;
}

message Engine_Set_StationIDResponse {
}

message Engine_Get_StationIDRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_StationIDResponse {
  // Note: This property is obsolete. Use the StationOptions.StationID property instead.
  string returnValue = 1;
}

message Engine_Get_NumImagesRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_NumImagesResponse {
  // Returns the number of images in the large and small image lists.
  int32 returnValue = 1;
}

message Engine_Set_SeqFileVersionAutoIncrementOptRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Note: This property is obsolete. Use the StationOptions.SeqFileVersionAutoIncrementOpt property instead.
  FileVersionAutoIncrement option = 2;
}

message Engine_Set_SeqFileVersionAutoIncrementOptResponse {
}

message Engine_Get_SeqFileVersionAutoIncrementOptRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_SeqFileVersionAutoIncrementOptResponse {
  // Note: This property is obsolete. Use the StationOptions.SeqFileVersionAutoIncrementOpt property instead.
  FileVersionAutoIncrement returnValue = 1;
}

message Engine_Get_TemporaryGlobalsRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_TemporaryGlobalsResponse {
  // Creates and accesses global variables that you want to exist only for the current run of the TestStand Engine.
  PropertyObjectInstance returnValue = 1;
}

message Engine_Set_RTEOptionRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Note: This property is obsolete. Use the StationOptions.RTEOption property instead.
  RTEOptions option = 2;
}

message Engine_Set_RTEOptionResponse {
}

message Engine_Get_RTEOptionRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_RTEOptionResponse {
  // Note: This property is obsolete. Use the StationOptions.RTEOption property instead.
  RTEOptions returnValue = 1;
}

message Engine_Get_SecondsSince1970UniversalCoordinatedTimeRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_SecondsSince1970UniversalCoordinatedTimeResponse {
  // Returns the time in seconds since midnight (00:00:00), January 1, 1970, coordinated universal time (UTC). UTC is also known as Greenwich mean time.
  // 
  // 
  double returnValue = 1;
}

message Engine_Set_StationModelSequenceFilePathRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Note: This property is obsolete. Use the StationOptions.StationModelSequenceFilePath property instead.
  string ModelPath = 2;
}

message Engine_Set_StationModelSequenceFilePathResponse {
}

message Engine_Get_StationModelSequenceFilePathRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_StationModelSequenceFilePathResponse {
  // Note: This property is obsolete. Use the StationOptions.StationModelSequenceFilePath property instead.
  string returnValue = 1;
}

message Engine_Get_SearchDirectoriesRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_SearchDirectoriesResponse {
  // Returns a reference to the SearchDirectories object. This object is a collection that contains a list of the current search directories.
  SearchDirectoriesInstance returnValue = 1;
}

message Engine_Get_ExternalReportViewersRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_ExternalReportViewersResponse {
  // Returns a reference to the ExternalReportViewers object, which is a collection that contains a list of the current external report viewers.
  ExternalReportViewersInstance returnValue = 1;
}

message Engine_Get_StationOptionsRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_StationOptionsResponse {
  // Returns a reference to the StationOptions object.
  StationOptionsInstance returnValue = 1;
}

message Engine_Get_ImagesRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_ImagesResponse {
  // Returns a reference to an Images object, which is a collection that contains a list of images. The collection specifies the images that TestStand loads from the <TestStand>\Components\Icons and <TestStand Public>\Components\Icons directories, as well as images you add using the Engine.AddImage method. Use the Images.FindImage method to find an image using an image name.
  ImagesInstance returnValue = 1;
}

message Engine_Set_WatchExpressionsEnabledRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies if the TestStand Engine evaluates watch expressions after each step executes in an execution. Applications that support watch expressions, such as the sequence editor, set this property to True. This property is not persisted and defaults to False for each instance of the engine.
  bool enable = 2;
}

message Engine_Set_WatchExpressionsEnabledResponse {
}

message Engine_Get_WatchExpressionsEnabledRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_WatchExpressionsEnabledResponse {
  // The default return value is False. Applications that support watch expressions, such as the sequence editor, set this property to True.
  bool returnValue = 1;
}

message Engine_Get_LicenseTypeRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_LicenseTypeResponse {
  // Returns the type of the license the TestStand Engine is using.
  LicenseTypes returnValue = 1;
}

message Engine_Set_PersistBreakpointsRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies whether the engine associates the list of breakpoints with the current workspace and automatically saves and reloads breakpoint lists when the current workspace changes. This property defaults to False for each instance of the engine. Applications that support breakpoint persistence, such as the sequence editor, should set this property to True. TestStand reads into memory the persisted breakpoint list when you change the option to True.
  bool returnVal = 2;
}

message Engine_Set_PersistBreakpointsResponse {
}

message Engine_Get_PersistBreakpointsRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_PersistBreakpointsResponse {
  // The default return value is False. For applications that support breakpoint persistence, such as the sequence editor, set this property to True.
  bool returnValue = 1;
}

message Engine_Set_PersistWatchExpressionsRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies whether the engine associates the list of watch expressions with the current workspace, and automatically saves and reloads the watch expression list when the current workspace changes. This property defaults to False for each instance of the engine. For applications that support watch expression persistence, such as the sequence editor, set this property to True. TestStand reads into memory the persisted watch expression when you change the option to True.
  bool returnVal = 2;
}

message Engine_Set_PersistWatchExpressionsResponse {
}

message Engine_Get_PersistWatchExpressionsRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_PersistWatchExpressionsResponse {
  // The default return value is False. For applications that support watch expression persistence, such as the sequence editor, set this property to True.
  bool returnValue = 1;
}

message Engine_Set_PersistConfigFileRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies whether the engine automatically saves its configuration files:  StarupCfg.ini, GeneralEngine.cfg, Adapters.cfg, SearchDirectories.cfg, TypePalettes.cfg, and Custom.cfg. This property defaults to TrueTrue for each instance of the engine. Applications can set this property to False to prevent changes to configuration information from affecting future instances of the engine.
  bool returnVal = 2;
}

message Engine_Set_PersistConfigFileResponse {
}

message Engine_Get_PersistConfigFileRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_PersistConfigFileResponse {
  // The default return value is True.
  bool returnValue = 1;
}

message Engine_Set_OutputMessagesEnabledRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies whether TestStand sends UIMsg_OutputMessages messages to the user interface. The default value is True.
  bool enable = 2;
}

message Engine_Set_OutputMessagesEnabledResponse {
}

message Engine_Get_OutputMessagesEnabledRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_OutputMessagesEnabledResponse {
  // Specifies whether TestStand sends UIMsg_OutputMessages messages to the user interface. The default value is True.
  bool returnValue = 1;
}

message Engine_Get_ApplicationLicenseRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_ApplicationLicenseResponse {
  // Returns the type of license the application is using. Use the Engine.AcquireLicense method to instruct TestStand to acquire a type of license for the application, and use the Engine.ReleaseLicense method to inform TestStand when an acquired license is no longer needed.
  ApplicationLicenses returnValue = 1;
}

message Engine_Set_UndoLimitRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the maximum number of undo items an UndoStack can contain. The default value is -1, which means no limit exists to the number of undo items an UndoStack can contain.
  int32 val = 2;
}

message Engine_Set_UndoLimitResponse {
}

message Engine_Get_UndoLimitRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_UndoLimitResponse {
  // Specifies the maximum number of undo items an UndoStack can contain. The default value is -1, which means no limit exists to the number of undo items an UndoStack can contain.
  int32 returnValue = 1;
}

message Engine_Get_UtilityRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_UtilityResponse {
  // Returns a reference to the Utility object, which you can use to access utility functions.
  UtilityInstance returnValue = 1;
}

message Engine_Set_DotNetGarbageCollectionIntervalRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the interval, in milliseconds, at which TestStand forces .NET garbage collection. Set this property to a value less than or equal to 0 to disable automatic garbage collection by the TestStand Engine. By default, in applications that use the TestStand ApplicationMgr control, this value is set to 3000 (3-second interval). In applications that do not use the ApplicationMgr control, this property is set to -1. Forcing garbage collection at regular intervals reduces memory usage and improves performance by ensuring that TestStand objects that have previously been referenced in .NET code are promptly freed or marked for reuse.
  int32 val = 2;
}

message Engine_Set_DotNetGarbageCollectionIntervalResponse {
}

message Engine_Get_DotNetGarbageCollectionIntervalRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_DotNetGarbageCollectionIntervalResponse {
  // Specifies the interval, in milliseconds, at which TestStand forces .NET garbage collection. Set this property to a value less than or equal to 0 to disable automatic garbage collection by the TestStand Engine. By default, in applications that use the TestStand ApplicationMgr control, this value is set to 3000 (3-second interval). In applications that do not use the ApplicationMgr control, this property is set to -1. Forcing garbage collection at regular intervals reduces memory usage and improves performance by ensuring that TestStand objects that have previously been referenced in .NET code are promptly freed or marked for reuse.
  int32 returnValue = 1;
}

message Engine_Get_SecondsAtStartIn1970UniversalCoordinatedTimeRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_SecondsAtStartIn1970UniversalCoordinatedTimeResponse {
  // Returns the time in seconds at which the engine started since midnight (00:00:00), January 1, 1970, coordinated universal time (UTC). UTC is also known as Greenwich mean time.
  double returnValue = 1;
}

message Engine_Get_DotNetCLRVersionRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_DotNetCLRVersionResponse {
  // Returns the .NET Common Language Runtime version the TestStand Engine and the .NET Adapter use.
  string returnValue = 1;
}

message Engine_Get_BuildVersionRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_BuildVersionResponse {
  // Returns the build version number for the current version of TestStand.
  int32 returnValue = 1;
}

message Engine_Get_SmallImageListExRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_SmallImageListExResponse {
  // Returns the Microsoft Windows handle for the TestStand list of small images.
  optional int64 returnValue = 1;
}

message Engine_Get_LargeImageListExRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_LargeImageListExResponse {
  // Returns the Microsoft Windows handle for the TestStand list of large images.
  ObjectInstance returnValue = 1;
}

message Engine_Get_Is64BitRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_Is64BitResponse {
  // Returns True if this instance of the TestStand Engine is 64-bit.
  bool returnValue = 1;
}

message Engine_Get_ProfilingEnabledRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_ProfilingEnabledResponse {
  // This property indicates whether profiling is enabled. Profiling is enabled when a call to Engine.BeginProfiling has not been balanced by a call to Engine.EndProfiling. If profiling is not enabled, calls to Engine.LogProfilerAction do nothing.
  bool returnValue = 1;
}

message Engine_Set_ProfilerOptionsRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies options that determine the types of data that profiling collects.
  ProfilerOptions val = 2;
}

message Engine_Set_ProfilerOptionsResponse {
}

message Engine_Get_ProfilerOptionsRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_ProfilerOptionsResponse {
  // Specifies options that determine the types of data that profiling collects.
  ProfilerOptions returnValue = 1;
}

message Engine_Get_ProfilerOutputMessageCategoryNameRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_ProfilerOutputMessageCategoryNameResponse {
  // Indicates the category name the TestStand engine assigns to the OutputMessages the Engine.LogProfilerAction method creates.
  string returnValue = 1;
}

message Engine_Set_ProfilerInputOutputCaptureMaximumTextLengthRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Specifies the maximum text size per row of the Module Inputs and Outputs column on the Operations table.
  int32 val = 2;
}

message Engine_Set_ProfilerInputOutputCaptureMaximumTextLengthResponse {
}

message Engine_Get_ProfilerInputOutputCaptureMaximumTextLengthRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_ProfilerInputOutputCaptureMaximumTextLengthResponse {
  // Specifies the maximum text size per row of the Module Inputs and Outputs column on the Operations table.
  int32 returnValue = 1;
}

message Engine_Get_PatchVersionRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
}

message Engine_Get_PatchVersionResponse {
  // Returns the patch version number for the current version of TestStand.
  int32 returnValue = 1;
}

message Engine_GetEvents_UIMessageEventRequest {
  // The id of the Engine object.
  EngineInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message Engine_GetEvents_UIMessageEventResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // The user interface message that TestStand passes to the event.
  UIMessageInstance msg = 2;
}

message Engine_ReplyToEvent_UIMessageEventRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message Engine_ReplyToEvent_UIMessageEventResponse {
}

// EngineInitializationSettings
//
// Use the EngineInitializationSettings class to configure options that must be set prior to Engine construction.
//
service EngineInitializationSettings {
  // Service: EngineInitializationSettings
  //
  // Creates a new EngineInitializationSettings instance
  //
  // EngineInitializationSettingsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInitializationSettingsInstance - The id of the EngineInitializationSettings object.
  //
  // EngineInitializationSettingsResponse - The response message from the server. It provides the return value.
  //    - returnValue: EngineInitializationSettingsInstance - The return type of the EngineInitializationSettings object.
  //
  rpc EngineInitializationSettings(EngineInitializationSettings_EngineInitializationSettingsRequest) returns (EngineInitializationSettings_EngineInitializationSettingsResponse);

  // Method: SetEnvironmentPath
  //
  // Specify the environment configuration (.tsenv) file to use to initialize the TestStand engine.  Pass an empty string to specify the global environment.
  //
  // Calling SetEnvironmentPath is unnecessary if you wish to run in the global environment. If no call to SetEnvironmentPath has been made prior to startup, the engine defaults to the global environment. You may call SetEnvironmentPath multiple times before creating the TestStand engine. Each call supersedes the prior calls.
  // SetEnvironmentPath throws an exception if you call it after the engine has already been created.
  //
  // EngineInitializationSettings_SetEnvironmentPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInitializationSettingsInstance - The id of the EngineInitializationSettings object.
  //
  // EngineInitializationSettings_SetEnvironmentPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetEnvironmentPath(EngineInitializationSettings_SetEnvironmentPathRequest) returns (EngineInitializationSettings_SetEnvironmentPathResponse);
  
  
  // Method: CanInitializeEngine
  //
  // Check whether it is possible to initialize the TestStand Engine.
  //
  // It is not possible to initialize the TestStand engine after it has been constructed.
  //
  // EngineInitializationSettings_CanInitializeEngineRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineInitializationSettingsInstance - The id of the EngineInitializationSettings object.
  //
  // EngineInitializationSettings_CanInitializeEngineResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if it is still possible to initialize the TestStand engine, False otherwise. 
  //
  rpc CanInitializeEngine(EngineInitializationSettings_CanInitializeEngineRequest) returns (EngineInitializationSettings_CanInitializeEngineResponse);
  
  
  // Method: SetInternalStartupOption
  //
  // Specifies the value for the internal startup option the option parameter specifies.
  //
  // EngineInitializationSettings_SetInternalStartupOptionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineInitializationSettingsInstance - The id of the EngineInitializationSettings object.
  //    - option: InternalStartupOptions - Specifies the internal startup option the method sets.
  //    - newValue: ObjectInstance - Specifies the value of the internal startup option the option parameter specifies.
  //
  // EngineInitializationSettings_SetInternalStartupOptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetInternalStartupOption(EngineInitializationSettings_SetInternalStartupOptionRequest) returns (EngineInitializationSettings_SetInternalStartupOptionResponse);
  
  
}
message EngineInitializationSettingsInstance {
  // Specifies the handle of the EngineInitializationSettings instance in the server.
  string id = 1;
}
message EngineInitializationSettings_EngineInitializationSettingsRequest {
}

message EngineInitializationSettings_EngineInitializationSettingsResponse {
  // The return type of the EngineInitializationSettings object.
  EngineInitializationSettingsInstance returnValue = 1;
}

message EngineInitializationSettings_SetEnvironmentPathRequest {
  // The id of the EngineInitializationSettings object.
  EngineInitializationSettingsInstance instance = 1;
  // Specifies the absolute path of environment configuration (.tsenv) file from which to initialize the TestStand engine.
  string Path = 2;
}

message EngineInitializationSettings_SetEnvironmentPathResponse {
}

message EngineInitializationSettings_CanInitializeEngineRequest {
  // The id of the EngineInitializationSettings object.
  EngineInitializationSettingsInstance instance = 1;
}

message EngineInitializationSettings_CanInitializeEngineResponse {
  // Returns True if it is still possible to initialize the TestStand engine, False otherwise.
  bool returnValue = 1;
}

message EngineInitializationSettings_SetInternalStartupOptionRequest {
  // The id of the EngineInitializationSettings object.
  EngineInitializationSettingsInstance instance = 1;
  // Specifies the internal startup option the method sets.
  InternalStartupOptions option = 2;
  // Specifies the value of the internal startup option the option parameter specifies.
  ObjectInstance newValue = 3;
}

message EngineInitializationSettings_SetInternalStartupOptionResponse {
}

// EngineEnvironment
//
// 
//
service EngineEnvironment {
  // Service: EngineEnvironment
  //
  // Creates a new EngineEnvironment instance
  //
  // EngineEnvironmentRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineEnvironmentInstance - The id of the EngineEnvironment object.
  //
  // EngineEnvironmentResponse - The response message from the server. It provides the return value.
  //    - returnValue: EngineEnvironmentInstance - The return type of the EngineEnvironment object.
  //
  rpc EngineEnvironment(EngineEnvironment_EngineEnvironmentRequest) returns (EngineEnvironment_EngineEnvironmentResponse);

  // Method: ReadFile
  //
  // 
  //
  // EngineEnvironment_ReadFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineEnvironmentInstance - The id of the EngineEnvironment object.
  //
  // EngineEnvironment_ReadFileResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ReadFile(EngineEnvironment_ReadFileRequest) returns (EngineEnvironment_ReadFileResponse);
  
  
  // Method: WriteFile
  //
  // 
  //
  // EngineEnvironment_WriteFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineEnvironmentInstance - The id of the EngineEnvironment object.
  //
  // EngineEnvironment_WriteFileResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc WriteFile(EngineEnvironment_WriteFileRequest) returns (EngineEnvironment_WriteFileResponse);
  
  
  // Method: GetTestStandPath
  //
  // 
  //
  // EngineEnvironment_GetTestStandPathRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineEnvironmentInstance - The id of the EngineEnvironment object.
  //    - testStandPath: TestStandPaths - 
  //    - resolveAbsolutePath: bool - 
  //
  // EngineEnvironment_GetTestStandPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetTestStandPath(EngineEnvironment_GetTestStandPathRequest) returns (EngineEnvironment_GetTestStandPathResponse);
  
  
  // Method: SetTestStandPath
  //
  // 
  //
  // EngineEnvironment_SetTestStandPathRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EngineEnvironmentInstance - The id of the EngineEnvironment object.
  //    - testStandPath: TestStandPaths - 
  //
  // EngineEnvironment_SetTestStandPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetTestStandPath(EngineEnvironment_SetTestStandPathRequest) returns (EngineEnvironment_SetTestStandPathResponse);
  
  

  // Property: EnvironmentPath
  //
  // 
  //
  // EngineEnvironment_Set_EnvironmentPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineEnvironmentInstance - The id of the EngineEnvironment object.
  //    - val: string -  
  //
  // EngineEnvironment_Set_EnvironmentPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // EngineEnvironment_Get_EnvironmentPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EngineEnvironmentInstance - The id of the EngineEnvironment object.
  //
  // EngineEnvironment_Get_EnvironmentPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string -  
  //
  rpc Set_EnvironmentPath(EngineEnvironment_Set_EnvironmentPathRequest) returns (EngineEnvironment_Set_EnvironmentPathResponse);
  rpc Get_EnvironmentPath(EngineEnvironment_Get_EnvironmentPathRequest) returns (EngineEnvironment_Get_EnvironmentPathResponse);
  
  
}
message EngineEnvironmentInstance {
  // Specifies the handle of the EngineEnvironment instance in the server.
  string id = 1;
}
message EngineEnvironment_EngineEnvironmentRequest {
}

message EngineEnvironment_EngineEnvironmentResponse {
  // The return type of the EngineEnvironment object.
  EngineEnvironmentInstance returnValue = 1;
}

message EngineEnvironment_ReadFileRequest {
  // The id of the EngineEnvironment object.
  EngineEnvironmentInstance instance = 1;
  // 
  string Path = 2;
}

message EngineEnvironment_ReadFileResponse {
}

message EngineEnvironment_WriteFileRequest {
  // The id of the EngineEnvironment object.
  EngineEnvironmentInstance instance = 1;
}

message EngineEnvironment_WriteFileResponse {
}

message EngineEnvironment_GetTestStandPathRequest {
  // The id of the EngineEnvironment object.
  EngineEnvironmentInstance instance = 1;
  // 
  TestStandPaths testStandPath = 2;
  // 
  bool resolveAbsolutePath = 3;
}

message EngineEnvironment_GetTestStandPathResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message EngineEnvironment_SetTestStandPathRequest {
  // The id of the EngineEnvironment object.
  EngineEnvironmentInstance instance = 1;
  // 
  TestStandPaths testStandPath = 2;
  // 
  string Path = 3;
}

message EngineEnvironment_SetTestStandPathResponse {
}

message EngineEnvironment_Set_EnvironmentPathRequest {
  // The id of the EngineEnvironment object.
  EngineEnvironmentInstance instance = 1;
  // 
  string val = 2;
}

message EngineEnvironment_Set_EnvironmentPathResponse {
}

message EngineEnvironment_Get_EnvironmentPathRequest {
  // The id of the EngineEnvironment object.
  EngineEnvironmentInstance instance = 1;
}

message EngineEnvironment_Get_EnvironmentPathResponse {
  // 
  string returnValue = 1;
}

// UIStyle
//
// Use the UIStyle class to configure style settings for dialogs and controls TestStand displays.
//
service UIStyle {
  // Service: UIStyle
  //
  // Creates a new UIStyle instance
  //
  // UIStyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UIStyleInstance - The id of the UIStyle object.
  //
  // UIStyleResponse - The response message from the server. It provides the return value.
  //    - returnValue: UIStyleInstance - The return type of the UIStyle object.
  //
  rpc UIStyle(UIStyle_UIStyleRequest) returns (UIStyle_UIStyleResponse);

  // Method: SetStyle
  //
  // 
  //
  // UIStyle_SetStyleRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: UIStyleInstance - The id of the UIStyle object.
  //    - styleString: string - 
  //
  // UIStyle_SetStyleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetStyle(UIStyle_SetStyleRequest) returns (UIStyle_SetStyleResponse);
  
  

  // Property: FontName
  //
  // Returns the name of the font.
  //
  // UIStyle_Get_FontNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UIStyleInstance - The id of the UIStyle object.
  //
  // UIStyle_Get_FontNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the font. 
  //
  rpc Get_FontName(UIStyle_Get_FontNameRequest) returns (UIStyle_Get_FontNameResponse);
  
  
  // Property: FontSize
  //
  // Returns the size of the font.
  //
  // UIStyle_Get_FontSizeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UIStyleInstance - The id of the UIStyle object.
  //
  // UIStyle_Get_FontSizeResponse - The response message from the server. It provides the return value.
  //    - returnValue: double - Returns the size of the font. 
  //
  rpc Get_FontSize(UIStyle_Get_FontSizeRequest) returns (UIStyle_Get_FontSizeResponse);
  
  
  // Property: BackgroundColor
  //
  // Returns the background color.
  //
  // UIStyle_Get_BackgroundColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UIStyleInstance - The id of the UIStyle object.
  //
  // UIStyle_Get_BackgroundColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the background color. 
  //
  rpc Get_BackgroundColor(UIStyle_Get_BackgroundColorRequest) returns (UIStyle_Get_BackgroundColorResponse);
  
  
  // Property: ForegroundColor
  //
  // Returns the foreground color.
  //
  // UIStyle_Get_ForegroundColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UIStyleInstance - The id of the UIStyle object.
  //
  // UIStyle_Get_ForegroundColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the foreground color. 
  //
  rpc Get_ForegroundColor(UIStyle_Get_ForegroundColorRequest) returns (UIStyle_Get_ForegroundColorResponse);
  
  
  // Property: SelectedBackgroundColor
  //
  // Returns the background color for an item you select in the TestStand Sequence Editor or a TestStand User Interface.
  //
  // UIStyle_Get_SelectedBackgroundColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UIStyleInstance - The id of the UIStyle object.
  //
  // UIStyle_Get_SelectedBackgroundColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the background color for an item you select in the TestStand Sequence Editor or a TestStand User Interface. 
  //
  rpc Get_SelectedBackgroundColor(UIStyle_Get_SelectedBackgroundColorRequest) returns (UIStyle_Get_SelectedBackgroundColorResponse);
  
  
  // Property: SelectedForegroundColor
  //
  // Returns the foreground color for an item you select in the TestStand Sequence Editor or a TestStand User Interface.
  //
  // UIStyle_Get_SelectedForegroundColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UIStyleInstance - The id of the UIStyle object.
  //
  // UIStyle_Get_SelectedForegroundColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the foreground color for an item you select in the TestStand Sequence Editor or a TestStand User Interface. 
  //
  rpc Get_SelectedForegroundColor(UIStyle_Get_SelectedForegroundColorRequest) returns (UIStyle_Get_SelectedForegroundColorResponse);
  
  
  // Property: HeaderForegroundColor
  //
  // Returns the text color for table headers.
  //
  // UIStyle_Get_HeaderForegroundColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UIStyleInstance - The id of the UIStyle object.
  //
  // UIStyle_Get_HeaderForegroundColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the text color for table headers. 
  //
  rpc Get_HeaderForegroundColor(UIStyle_Get_HeaderForegroundColorRequest) returns (UIStyle_Get_HeaderForegroundColorResponse);
  
  
  // Property: GridLineColor
  //
  // Returns the color of the grid lines in tables.
  //
  // UIStyle_Get_GridLineColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UIStyleInstance - The id of the UIStyle object.
  //
  // UIStyle_Get_GridLineColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the color of the grid lines in tables. 
  //
  rpc Get_GridLineColor(UIStyle_Get_GridLineColorRequest) returns (UIStyle_Get_GridLineColorResponse);
  
  
  // Property: SectionHeaderFontName
  //
  // Returns the name of the section header font.
  //
  // UIStyle_Get_SectionHeaderFontNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UIStyleInstance - The id of the UIStyle object.
  //
  // UIStyle_Get_SectionHeaderFontNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the name of the section header font. 
  //
  rpc Get_SectionHeaderFontName(UIStyle_Get_SectionHeaderFontNameRequest) returns (UIStyle_Get_SectionHeaderFontNameResponse);
  
  
  // Property: SectionHeaderFontSize
  //
  // Returns the size of the section header font.
  //
  // UIStyle_Get_SectionHeaderFontSizeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: UIStyleInstance - The id of the UIStyle object.
  //
  // UIStyle_Get_SectionHeaderFontSizeResponse - The response message from the server. It provides the return value.
  //    - returnValue: double - Returns the size of the section header font. 
  //
  rpc Get_SectionHeaderFontSize(UIStyle_Get_SectionHeaderFontSizeRequest) returns (UIStyle_Get_SectionHeaderFontSizeResponse);
  
  
}
message UIStyleInstance {
  // Specifies the handle of the UIStyle instance in the server.
  string id = 1;
}
message UIStyle_UIStyleRequest {
}

message UIStyle_UIStyleResponse {
  // The return type of the UIStyle object.
  UIStyleInstance returnValue = 1;
}

message UIStyle_SetStyleRequest {
  // The id of the UIStyle object.
  UIStyleInstance instance = 1;
  // 
  string styleString = 2;
}

message UIStyle_SetStyleResponse {
}

message UIStyle_Get_FontNameRequest {
  // The id of the UIStyle object.
  UIStyleInstance instance = 1;
}

message UIStyle_Get_FontNameResponse {
  // Returns the name of the font.
  string returnValue = 1;
}

message UIStyle_Get_FontSizeRequest {
  // The id of the UIStyle object.
  UIStyleInstance instance = 1;
}

message UIStyle_Get_FontSizeResponse {
  // Returns the size of the font.
  double returnValue = 1;
}

message UIStyle_Get_BackgroundColorRequest {
  // The id of the UIStyle object.
  UIStyleInstance instance = 1;
}

message UIStyle_Get_BackgroundColorResponse {
  // Returns the background color.
  int32 returnValue = 1;
}

message UIStyle_Get_ForegroundColorRequest {
  // The id of the UIStyle object.
  UIStyleInstance instance = 1;
}

message UIStyle_Get_ForegroundColorResponse {
  // Returns the foreground color.
  int32 returnValue = 1;
}

message UIStyle_Get_SelectedBackgroundColorRequest {
  // The id of the UIStyle object.
  UIStyleInstance instance = 1;
}

message UIStyle_Get_SelectedBackgroundColorResponse {
  // Returns the background color for an item you select in the TestStand Sequence Editor or a TestStand User Interface.
  int32 returnValue = 1;
}

message UIStyle_Get_SelectedForegroundColorRequest {
  // The id of the UIStyle object.
  UIStyleInstance instance = 1;
}

message UIStyle_Get_SelectedForegroundColorResponse {
  // Returns the foreground color for an item you select in the TestStand Sequence Editor or a TestStand User Interface.
  int32 returnValue = 1;
}

message UIStyle_Get_HeaderForegroundColorRequest {
  // The id of the UIStyle object.
  UIStyleInstance instance = 1;
}

message UIStyle_Get_HeaderForegroundColorResponse {
  // Returns the text color for table headers.
  int32 returnValue = 1;
}

message UIStyle_Get_GridLineColorRequest {
  // The id of the UIStyle object.
  UIStyleInstance instance = 1;
}

message UIStyle_Get_GridLineColorResponse {
  // Returns the color of the grid lines in tables.
  int32 returnValue = 1;
}

message UIStyle_Get_SectionHeaderFontNameRequest {
  // The id of the UIStyle object.
  UIStyleInstance instance = 1;
}

message UIStyle_Get_SectionHeaderFontNameResponse {
  // Returns the name of the section header font.
  string returnValue = 1;
}

message UIStyle_Get_SectionHeaderFontSizeRequest {
  // The id of the UIStyle object.
  UIStyleInstance instance = 1;
}

message UIStyle_Get_SectionHeaderFontSizeResponse {
  // Returns the size of the section header font.
  double returnValue = 1;
}

// FeatureToggle
//
// 
//
service FeatureToggle {
  // Service: FeatureToggle
  //
  // Creates a new FeatureToggle instance
  //
  // FeatureToggleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: FeatureToggleInstance - The id of the FeatureToggle object.
  //
  // FeatureToggleResponse - The response message from the server. It provides the return value.
  //    - returnValue: FeatureToggleInstance - The return type of the FeatureToggle object.
  //
  rpc FeatureToggle(FeatureToggle_FeatureToggleRequest) returns (FeatureToggle_FeatureToggleResponse);

  // Method: IsFeatureEnabled
  //
  rpc IsFeatureEnabled(FeatureToggle_IsFeatureEnabledRequest) returns (FeatureToggle_IsFeatureEnabledResponse);
  
  
  // Method: EnableFeature
  //
  rpc EnableFeature(FeatureToggle_EnableFeatureRequest) returns (FeatureToggle_EnableFeatureResponse);
  
  
  // Method: EnableFeaturesForCodeReadiness
  //
  rpc EnableFeaturesForCodeReadiness(FeatureToggle_EnableFeaturesForCodeReadinessRequest) returns (FeatureToggle_EnableFeaturesForCodeReadinessResponse);
  
  

  // Property: HasDefaultFeatureToggles
  //
  rpc Get_HasDefaultFeatureToggles(FeatureToggle_Get_HasDefaultFeatureTogglesRequest) returns (FeatureToggle_Get_HasDefaultFeatureTogglesResponse);
  
  
}
message FeatureToggleInstance {
  // Specifies the handle of the FeatureToggle instance in the server.
  string id = 1;
}
message FeatureToggle_FeatureToggleRequest {
}

message FeatureToggle_FeatureToggleResponse {
  // The return type of the FeatureToggle object.
  FeatureToggleInstance returnValue = 1;
}

message FeatureToggle_IsFeatureEnabledRequest {
  // The id of the FeatureToggle object.
  FeatureToggleInstance instance = 1;
  string featureName = 2;
}

message FeatureToggle_IsFeatureEnabledResponse {
  bool returnValue = 1;
}

message FeatureToggle_EnableFeatureRequest {
  // The id of the FeatureToggle object.
  FeatureToggleInstance instance = 1;
  string featureName = 2;
  bool enabled = 3;
}

message FeatureToggle_EnableFeatureResponse {
}

message FeatureToggle_EnableFeaturesForCodeReadinessRequest {
  // The id of the FeatureToggle object.
  FeatureToggleInstance instance = 1;
  CodeReadinessLevels codeReadiness = 2;
}

message FeatureToggle_EnableFeaturesForCodeReadinessResponse {
}

message FeatureToggle_Get_HasDefaultFeatureTogglesRequest {
  // The id of the FeatureToggle object.
  FeatureToggleInstance instance = 1;
}

message FeatureToggle_Get_HasDefaultFeatureTogglesResponse {
  bool returnValue = 1;
}

///////////////////////// Referenced Types /////////////////////

// Generation of referenced types is disabled.

