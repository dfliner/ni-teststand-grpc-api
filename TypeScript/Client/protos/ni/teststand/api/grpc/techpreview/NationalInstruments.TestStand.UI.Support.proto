///// THIS FILE WAS AUTO GENERATED ON 03/07/2023 10:04:46 /////

syntax = "proto3";
package ni.teststand.api.grpc.techpreview;
option csharp_namespace = "NationalInstruments.TestStand.UI.Support.Grpc";
option go_package = "tsgrpc";
option java_multiple_files = true;
option java_outer_classname = "TestStandUISupportProto";
option java_package = "com.ni.teststand.api.grpc.techpreview";
option objc_class_prefix = "NITUSG";
option php_namespace = "NI\\TestStand\\UI\\Support\\Grpc";
option ruby_package = "NI::TestStand::UI::Support::Grpc";

import "ni/teststand/api/grpc/techpreview/common_types_api.proto";
import "ni/teststand/api/grpc/techpreview/NationalInstruments.TestStand.API.proto";

// CommandKinds
//
enum CommandKinds {
  // Field: CommandKind_NotACommand
  //
  CommandKind_NotACommand = 0;
  // Field: CommandKind_Container
  //
  CommandKind_Container = 1;
  // Field: CommandKind_Separator
  //
  CommandKind_Separator = 2;
  // Field: CommandKind_Custom
  //
  CommandKind_Custom = 3;
  // Field: CommandKind_OpenSequenceFile
  //
  CommandKind_OpenSequenceFile = 20;
  // Field: CommandKind_Close
  //
  CommandKind_Close = 21;
  // Field: CommandKind_CloseAll
  //
  CommandKind_CloseAll = 22;
  // Field: CommandKind_CloseCompletedExecutions
  //
  CommandKind_CloseCompletedExecutions = 23;
  // Field: CommandKind_OpenWorkspaceBrowser
  //
  CommandKind_OpenWorkspaceBrowser = 24;
  // Field: CommandKind_Login
  //
  CommandKind_Login = 25;
  // Field: CommandKind_Logout
  //
  CommandKind_Logout = 26;
  // Field: CommandKind_LoginLogout
  //
  CommandKind_LoginLogout = 27;
  // Field: CommandKind_UnloadAllModules
  //
  CommandKind_UnloadAllModules = 28;
  // Field: CommandKind_MRUFile
  //
  CommandKind_MRUFile = 29;
  // Field: CommandKind_Exit
  //
  CommandKind_Exit = 30;
  // Field: CommandKind_Restart
  //
  CommandKind_Restart = 40;
  // Field: CommandKind_RunEntryPoint
  //
  CommandKind_RunEntryPoint = 41;
  // Field: CommandKind_RunEntryPointOnSelectedSteps
  //
  CommandKind_RunEntryPointOnSelectedSteps = 42;
  // Field: CommandKind_LoopEntryPointOnSelectedSteps
  //
  CommandKind_LoopEntryPointOnSelectedSteps = 43;
  // Field: CommandKind_RunCurrentSequence
  //
  CommandKind_RunCurrentSequence = 44;
  // Field: CommandKind_RunSpecificSequence
  //
  CommandKind_RunSpecificSequence = 45;
  // Field: CommandKind_RunSelectedSteps
  //
  CommandKind_RunSelectedSteps = 46;
  // Field: CommandKind_RunSelectedStepsUsingEntryPointsSubmenu
  //
  CommandKind_RunSelectedStepsUsingEntryPointsSubmenu = 47;
  // Field: CommandKind_LoopOnSelectedSteps
  //
  CommandKind_LoopOnSelectedSteps = 48;
  // Field: CommandKind_LoopOnSelectedStepsUsingEntryPointsSubmenu
  //
  CommandKind_LoopOnSelectedStepsUsingEntryPointsSubmenu = 49;
  // Field: CommandKind_BreakOnFirstStep
  //
  CommandKind_BreakOnFirstStep = 50;
  // Field: CommandKind_BreakOnStepFailure
  //
  CommandKind_BreakOnStepFailure = 51;
  // Field: CommandKind_BreakOnSequenceFailure
  //
  CommandKind_BreakOnSequenceFailure = 52;
  // Field: CommandKind_TracingEnabled
  //
  CommandKind_TracingEnabled = 53;
  // Field: CommandKind_ToggleBreakpoint
  //
  CommandKind_ToggleBreakpoint = 60;
  // Field: CommandKind_SetRunModeSubmenu
  //
  CommandKind_SetRunModeSubmenu = 61;
  // Field: CommandKind_RunModeForcePass
  //
  CommandKind_RunModeForcePass = 62;
  // Field: CommandKind_RunModeForceFail
  //
  CommandKind_RunModeForceFail = 63;
  // Field: CommandKind_RunModeSkip
  //
  CommandKind_RunModeSkip = 64;
  // Field: CommandKind_RunModeNormal
  //
  CommandKind_RunModeNormal = 65;
  // Field: CommandKind_Resume
  //
  CommandKind_Resume = 66;
  // Field: CommandKind_StepInto
  //
  CommandKind_StepInto = 67;
  // Field: CommandKind_StepOver
  //
  CommandKind_StepOver = 68;
  // Field: CommandKind_StepOut
  //
  CommandKind_StepOut = 69;
  // Field: CommandKind_SetNextStep
  //
  CommandKind_SetNextStep = 70;
  // Field: CommandKind_Break
  //
  CommandKind_Break = 71;
  // Field: CommandKind_BreakResume
  //
  CommandKind_BreakResume = 72;
  // Field: CommandKind_Terminate
  //
  CommandKind_Terminate = 73;
  // Field: CommandKind_TerminateRestart
  //
  CommandKind_TerminateRestart = 74;
  // Field: CommandKind_Abort
  //
  CommandKind_Abort = 75;
  // Field: CommandKind_BreakAll
  //
  CommandKind_BreakAll = 76;
  // Field: CommandKind_TerminateAll
  //
  CommandKind_TerminateAll = 77;
  // Field: CommandKind_AbortAll
  //
  CommandKind_AbortAll = 78;
  // Field: CommandKind_ResumeAll
  //
  CommandKind_ResumeAll = 79;
  // Field: CommandKind_DisplayBreakpointsAndWatchExpressions
  //
  CommandKind_DisplayBreakpointsAndWatchExpressions = 80;
  // Field: CommandKind_DisplayBreakpointSettings
  //
  CommandKind_DisplayBreakpointSettings = 81;
  // Field: CommandKind_BreakpointSubmenu
  //
  CommandKind_BreakpointSubmenu = 85;
  // Field: CommandKind_ConfigureAdapters
  //
  CommandKind_ConfigureAdapters = 90;
  // Field: CommandKind_ConfigureStationOptions
  //
  CommandKind_ConfigureStationOptions = 91;
  // Field: CommandKind_ConfigureSearchDirectories
  //
  CommandKind_ConfigureSearchDirectories = 92;
  // Field: CommandKind_ConfigureExternalViewers
  //
  CommandKind_ConfigureExternalViewers = 93;
  // Field: CommandKind_ConfigureEngineEnvironment
  //
  CommandKind_ConfigureEngineEnvironment = 94;
  // Field: CommandKind_ConfigureIOConfigurationOptions
  //
  CommandKind_ConfigureIOConfigurationOptions = 95;
  // Field: CommandKind_ToolItem
  //
  CommandKind_ToolItem = 100;
  // Field: CommandKind_CustomizeTools
  //
  CommandKind_CustomizeTools = 101;
  // Field: CommandKind_ExecutionEntryPointInsertionMarker
  //
  CommandKind_ExecutionEntryPointInsertionMarker = 110;
  // Field: CommandKind_ExecutionEntryPointDefaultMenuInsertionMarker
  //
  CommandKind_ExecutionEntryPointDefaultMenuInsertionMarker = 111;
  // Field: CommandKind_ConfigurationEntryPointInsertionMarker
  //
  CommandKind_ConfigurationEntryPointInsertionMarker = 112;
  // Field: CommandKind_ConfigurationEntryPointDefaultMenuInsertionMarker
  //
  CommandKind_ConfigurationEntryPointDefaultMenuInsertionMarker = 113;
  // Field: CommandKind_SequenceViewConfiguration
  //
  CommandKind_SequenceViewConfiguration = 116;
  // Field: CommandKind_SequenceViewConfigurationsSubmenu
  //
  CommandKind_SequenceViewConfigurationsSubmenu = 118;
  // Field: CommandKind_DefaultFileMenu_Set
  //
  CommandKind_DefaultFileMenu_Set = 120;
  // Field: CommandKind_DefaultExecuteMenu_Set
  //
  CommandKind_DefaultExecuteMenu_Set = 121;
  // Field: CommandKind_DefaultDebugMenu_Set
  //
  CommandKind_DefaultDebugMenu_Set = 123;
  // Field: CommandKind_DefaultConfigureMenu_Set
  //
  CommandKind_DefaultConfigureMenu_Set = 124;
  // Field: CommandKind_DefaultToolsMenu_Set
  //
  CommandKind_DefaultToolsMenu_Set = 125;
  // Field: CommandKind_DefaultSequenceViewContextMenu_Set
  //
  CommandKind_DefaultSequenceViewContextMenu_Set = 126;
  // Field: CommandKind_DefaultListBarContextMenu_Set
  //
  CommandKind_DefaultListBarContextMenu_Set = 127;
  // Field: CommandKind_DefaultEditMenu_Set
  //
  CommandKind_DefaultEditMenu_Set = 128;
  // Field: CommandKind_DefaultSequenceListContextMenu_Set
  //
  CommandKind_DefaultSequenceListContextMenu_Set = 129;
  // Field: CommandKind_SequenceViewConfigurations_Set
  //
  CommandKind_SequenceViewConfigurations_Set = 139;
  // Field: CommandKind_MRUFiles_Set
  //
  CommandKind_MRUFiles_Set = 140;
  // Field: CommandKind_ExecutionEntryPoints_Set
  //
  CommandKind_ExecutionEntryPoints_Set = 141;
  // Field: CommandKind_RunSequences_Set
  //
  CommandKind_RunSequences_Set = 142;
  // Field: CommandKind_RunSelectedStepsUsingEntryPoints_Set
  //
  CommandKind_RunSelectedStepsUsingEntryPoints_Set = 143;
  // Field: CommandKind_LoopOnSelectedStepsUsingEntryPoints_Set
  //
  CommandKind_LoopOnSelectedStepsUsingEntryPoints_Set = 144;
  // Field: CommandKind_ConfigurationEntryPoints_Set
  //
  CommandKind_ConfigurationEntryPoints_Set = 145;
  // Field: CommandKind_Tools_Set
  //
  CommandKind_Tools_Set = 146;
  // Field: CommandKind_OpenSequenceFiles
  //
  CommandKind_OpenSequenceFiles = 147;
  // Field: CommandKind_LockUnlock
  //
  CommandKind_LockUnlock = 148;
  // Field: CommandKind_ConfigureSequenceViews
  //
  CommandKind_ConfigureSequenceViews = 149;
  // Field: CommandKind_Edit_Undo
  //
  CommandKind_Edit_Undo = 200;
  // Field: CommandKind_Edit_Redo
  //
  CommandKind_Edit_Redo = 201;
  // Field: CommandKind_Edit_Rename
  //
  CommandKind_Edit_Rename = 202;
  // Field: CommandKind_Edit_Cut
  //
  CommandKind_Edit_Cut = 203;
  // Field: CommandKind_Edit_Copy
  //
  CommandKind_Edit_Copy = 204;
  // Field: CommandKind_Edit_Paste
  //
  CommandKind_Edit_Paste = 205;
  // Field: CommandKind_Edit_Delete
  //
  CommandKind_Edit_Delete = 206;
  // Field: CommandKind_Edit_InsertStep
  //
  CommandKind_Edit_InsertStep = 207;
  // Field: CommandKind_Edit_Save
  //
  CommandKind_Edit_Save = 208;
  // Field: CommandKind_Edit_SaveAs
  //
  CommandKind_Edit_SaveAs = 209;
  // Field: CommandKind_Edit_SaveAll
  //
  CommandKind_Edit_SaveAll = 210;
  // Field: CommandKind_Edit_NewSequenceFile
  //
  CommandKind_Edit_NewSequenceFile = 211;
  // Field: CommandKind_Edit_StepProperties
  //
  CommandKind_Edit_StepProperties = 212;
  // Field: CommandKind_Edit_SequenceProperties
  //
  CommandKind_Edit_SequenceProperties = 213;
  // Field: CommandKind_Edit_SequenceFileProperties
  //
  CommandKind_Edit_SequenceFileProperties = 214;
  // Field: CommandKind_Edit_SpecifyModule
  //
  CommandKind_Edit_SpecifyModule = 215;
  // Field: CommandKind_Edit_EditCode
  //
  CommandKind_Edit_EditCode = 216;
  // Field: CommandKind_Edit_EditStep
  //
  CommandKind_Edit_EditStep = 217;
  // Field: CommandKind_Edit_Preconditions
  //
  CommandKind_Edit_Preconditions = 218;
  // Field: CommandKind_SelectAll
  //
  CommandKind_SelectAll = 219;
  // Field: CommandKind_Edit_SelectDefaultAdapter
  //
  CommandKind_Edit_SelectDefaultAdapter = 220;
  // Field: CommandKind_Edit_InsertSequence
  //
  CommandKind_Edit_InsertSequence = 221;
  // Field: CommandKind_Edit_SequenceFileCallbacks
  //
  CommandKind_Edit_SequenceFileCallbacks = 222;
  // Field: CommandKind_Edit_EditPaths
  //
  CommandKind_Edit_EditPaths = 223;
  // Field: CommandKind_Edit_EncapsulateSelectedSteps
  //
  CommandKind_Edit_EncapsulateSelectedSteps = 224;
  // Field: CommandKind_Edit_InsertStepsSubmenu
  //
  CommandKind_Edit_InsertStepsSubmenu = 300;
  // Field: CommandKind_Edit_EditStepsSubmenu
  //
  CommandKind_Edit_EditStepsSubmenu = 301;
  // Field: CommandKind_Edit_SelectDefaultAdaptersSubmenu
  //
  CommandKind_Edit_SelectDefaultAdaptersSubmenu = 302;
  // Field: CommandKind_Edit_EncapsulateSelectedStepsSubmenu
  //
  CommandKind_Edit_EncapsulateSelectedStepsSubmenu = 303;
  // Field: CommandKind_Edit_InsertSteps_Set
  //
  CommandKind_Edit_InsertSteps_Set = 340;
  // Field: CommandKind_Edit_EditSteps_Set
  //
  CommandKind_Edit_EditSteps_Set = 341;
  // Field: CommandKind_Edit_SelectDefaultAdapters_Set
  //
  CommandKind_Edit_SelectDefaultAdapters_Set = 342;
  // Field: CommandKind_Edit_EncapsulateSelectedSteps_Set
  //
  CommandKind_Edit_EncapsulateSelectedSteps_Set = 343;
  // Field: CommandKind_ShowInList
  //
  CommandKind_ShowInList = 400;
  // Field: CommandKind_ShowInVariables
  //
  CommandKind_ShowInVariables = 401;
  // Field: CommandKind_ShowTestStandHelp
  //
  CommandKind_ShowTestStandHelp = 420;
  // Field: CommandKind_ShowGuideToDocumentation
  //
  CommandKind_ShowGuideToDocumentation = 421;
  // Field: CommandKind_ShowHelpTopic
  //
  CommandKind_ShowHelpTopic = 422;
  // Field: CommandKind_ShowTestStandWebResources
  //
  CommandKind_ShowTestStandWebResources = 423;
  // Field: CommandKind_ShowTestStandDiscussionForum
  //
  CommandKind_ShowTestStandDiscussionForum = 424;
  // Field: CommandKind_ShowPatents
  //
  CommandKind_ShowPatents = 425;
  // Field: CommandKind_DefaultHelpMenu_Set
  //
  CommandKind_DefaultHelpMenu_Set = 440;
  // Field: CommandKind_Edit_Attributes
  //
  CommandKind_Edit_Attributes = 450;
  // Field: CommandKind_Edit_AdvancedSequenceListSubmenu
  //
  CommandKind_Edit_AdvancedSequenceListSubmenu = 451;
  // Field: CommandKind_ShowUpdateService
  //
  CommandKind_ShowUpdateService = 452;
  // Field: CommandKind_ShowExamples
  //
  CommandKind_ShowExamples = 453;
  // Field: CommandKind_ShowGettingStarted
  //
  CommandKind_ShowGettingStarted = 454;
  // Field: CommandKind_UnloadStepModule
  //
  CommandKind_UnloadStepModule = 455;
}

// CaptionSources
//
enum CaptionSources {
  // Field: CaptionSource_NotASource
  //
  CaptionSource_NotASource = 0;
  // Field: CaptionSource_MacroExpression
  //
  CaptionSource_MacroExpression = 1;
  // Field: CaptionSource_UUTSerialNumber
  //
  CaptionSource_UUTSerialNumber = 2;
  // Field: CaptionSource_UUTStatus
  //
  CaptionSource_UUTStatus = 3;
  // Field: CaptionSource_BatchSerialNumber
  //
  CaptionSource_BatchSerialNumber = 4;
  // Field: CaptionSource_BatchStatus
  //
  CaptionSource_BatchStatus = 5;
  // Field: CaptionSource_BatchState
  //
  CaptionSource_BatchState = 6;
  // Field: CaptionSource_ModelState
  //
  CaptionSource_ModelState = 7;
  // Field: CaptionSource_UserName
  //
  CaptionSource_UserName = 8;
  // Field: CaptionSource_ProgressText
  //
  CaptionSource_ProgressText = 9;
  // Field: CaptionSource_ProgressPercent
  //
  CaptionSource_ProgressPercent = 10;
  // Field: CaptionSource_CurrentSequenceFile
  //
  CaptionSource_CurrentSequenceFile = 11;
  // Field: CaptionSource_CurrentSequenceFileComment
  //
  CaptionSource_CurrentSequenceFileComment = 12;
  // Field: CaptionSource_CurrentSequence
  //
  CaptionSource_CurrentSequence = 13;
  // Field: CaptionSource_CurrentSequenceComment
  //
  CaptionSource_CurrentSequenceComment = 14;
  // Field: CaptionSource_CurrentStepGroup
  //
  CaptionSource_CurrentStepGroup = 15;
  // Field: CaptionSource_CurrentStep
  //
  CaptionSource_CurrentStep = 16;
  // Field: CaptionSource_CurrentStepComment
  //
  CaptionSource_CurrentStepComment = 17;
  // Field: CaptionSource_CurrentStepIndex_ZeroBased
  //
  CaptionSource_CurrentStepIndex_ZeroBased = 18;
  // Field: CaptionSource_CurrentTestIndex_OneBased
  //
  CaptionSource_CurrentTestIndex_OneBased = 19;
  // Field: CaptionSource_SelectedSteps_ZeroBased
  //
  CaptionSource_SelectedSteps_ZeroBased = 20;
  // Field: CaptionSource_SelectedTests_OneBased
  //
  CaptionSource_SelectedTests_OneBased = 21;
  // Field: CaptionSource_NumberOfSteps
  //
  CaptionSource_NumberOfSteps = 22;
  // Field: CaptionSource_NumberOfTests
  //
  CaptionSource_NumberOfTests = 23;
  // Field: CaptionSource_CurrentExecution
  //
  CaptionSource_CurrentExecution = 24;
  // Field: CaptionSource_CurrentThread
  //
  CaptionSource_CurrentThread = 25;
  // Field: CaptionSource_CurrentCallStackEntry
  //
  CaptionSource_CurrentCallStackEntry = 26;
  // Field: CaptionSource_CurrentProcessModelFile
  //
  CaptionSource_CurrentProcessModelFile = 27;
  // Field: CaptionSource_ReportLocation
  //
  CaptionSource_ReportLocation = 28;
  // Field: CaptionSource_TestSocketIndex
  //
  CaptionSource_TestSocketIndex = 29;
  // Field: CaptionSource_Time
  //
  CaptionSource_Time = 30;
  // Field: CaptionSource_Date
  //
  CaptionSource_Date = 31;
  // Field: CaptionSource_CurrentSequenceFile_WithoutFileState
  //
  CaptionSource_CurrentSequenceFile_WithoutFileState = 32;
  // Field: CaptionSource_CurrentSequenceFile_FileStateOnly
  //
  CaptionSource_CurrentSequenceFile_FileStateOnly = 33;
  // Field: CaptionSource_EngineEnvironment
  //
  CaptionSource_EngineEnvironment = 34;
}

// ImageSources
//
enum ImageSources {
  // Field: ImageSource_NotASource
  //
  ImageSource_NotASource = 0;
  // Field: ImageSource_UUTStatus
  //
  ImageSource_UUTStatus = 3;
  // Field: ImageSource_BatchStatus
  //
  ImageSource_BatchStatus = 5;
  // Field: ImageSource_BatchState
  //
  ImageSource_BatchState = 6;
  // Field: ImageSource_ModelState
  //
  ImageSource_ModelState = 7;
  // Field: ImageSource_CurrentSequenceFile
  //
  ImageSource_CurrentSequenceFile = 11;
  // Field: ImageSource_CurrentSequence
  //
  ImageSource_CurrentSequence = 12;
  // Field: ImageSource_CurrentStepGroup
  //
  ImageSource_CurrentStepGroup = 13;
  // Field: ImageSource_CurrentStep
  //
  ImageSource_CurrentStep = 14;
  // Field: ImageSource_CurrentExecution
  //
  ImageSource_CurrentExecution = 21;
  // Field: ImageSource_CurrentThread
  //
  ImageSource_CurrentThread = 22;
  // Field: ImageSource_CurrentCallStackEntry
  //
  ImageSource_CurrentCallStackEntry = 23;
  // Field: ImageSource_CurrentProcessModelFile
  //
  ImageSource_CurrentProcessModelFile = 24;
  // Field: ImageSource_CurrentAdapter
  //
  ImageSource_CurrentAdapter = 25;
}

// NumericSources
//
enum NumericSources {
  // Field: NumericSource_NotASource
  //
  NumericSource_NotASource = 0;
  // Field: NumericSource_ProgressPercent
  //
  NumericSource_ProgressPercent = 10;
}

// module 

// SelectionFlags
//
// Use these constants to select step group start or end markers and to expand or collapse step groups. These constants apply only when the application displays more than one step group at a time.
// You cannot select step group start and end markers when steps are selected. You cannot select steps and step group end markers in collapsed step groups.
// 
//
enum SelectionFlags {
  // Field: SelectionFlag_NoFlags
  //
  // (Value: 0) No collapsed step group and no selected step group markers.
  //
  SelectionFlag_NoFlags = 0;
  // Field: SelectionFlag_SetupStartSelected
  //
  // (Value: 1) Selects the start marker for the Setup step group.
  //
  SelectionFlag_SetupStartSelected = 1;
  // Field: SelectionFlag_MainStartSelected
  //
  // (Value: 2) Selects the start marker for the Main step group.
  //
  SelectionFlag_MainStartSelected = 2;
  // Field: SelectionFlag_CleanupStartSelected
  //
  // (Value: 4) Selects the start marker for the Cleanup step group.
  //
  SelectionFlag_CleanupStartSelected = 4;
  // Field: SelectionFlag_SetupEndSelected
  //
  // (Value: 8) Selects the end marker for the Setup step group.
  //
  SelectionFlag_SetupEndSelected = 8;
  // Field: SelectionFlag_MainEndSelected
  //
  // (Value: 16) Selects the end marker for the Main step group.
  //
  SelectionFlag_MainEndSelected = 16;
  // Field: SelectionFlag_CleanupEndSelected
  //
  // (Value: 32) Selects the end marker for the Cleanup step group.
  //
  SelectionFlag_CleanupEndSelected = 32;
  // Field: SelectionFlag_SetupCollapsed
  //
  // (Value: 64) Collapses the Setup step group.
  //
  SelectionFlag_SetupCollapsed = 64;
  // Field: SelectionFlag_MainCollapsed
  //
  // (Value: 128) Collapses the Main step group.
  //
  SelectionFlag_MainCollapsed = 128;
  // Field: SelectionFlag_CleanupCollapsed
  //
  // (Value: 256) Collapses the Cleanup step group.
  //
  SelectionFlag_CleanupCollapsed = 256;
}

// SeqListConnectionColumns
//
// These constants represent the column type you can use with the column parameter of the  SequenceListConnection.SetColumnVisible and SequenceListConnection.GetColumnVisible methods.
//
enum SeqListConnectionColumns {
  // Field: SeqListConnectionColumn_Label
  //
  // (Value: 0) Specifies the column that contains the name of the sequence.
  //
  SeqListConnectionColumn_Label = 0;
  // Field: SeqListConnectionColumn_Comments
  //
  // (Value: 1) Specifies the column that contains the comment of the sequence.
  //
  SeqListConnectionColumn_Comments = 1;
  // Field: SeqListConnectionColumn_Requirements
  //
  // (Value: 2) Specifies the column that contains the requirements of the sequence.
  //
  SeqListConnectionColumn_Requirements = 2;
}

// MRUFiles
//
// A collection of the most recently used (MRU) files. Each item in the collection is a filename.
//
service MRUFiles {
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // MRUFiles_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: MRUFilesInstance - The id of the MRUFiles object.
  //
  // MRUFiles_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(MRUFiles_ClearRequest) returns (MRUFiles_ClearResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // MRUFiles_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: MRUFilesInstance - The id of the MRUFiles object.
  //    - fileNameVal: string - Specifies the filename to remove from the collection.
  //
  // MRUFiles_RemoveResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when the item is removed from the collection. Returns False when the item is not found. 
  //
  rpc Remove(MRUFiles_RemoveRequest) returns (MRUFiles_RemoveResponse);
  
  
  // Method: GetDisplayName
  //
  // Returns a string that you can display in a menu used for opening the most recently used files.
  //
  // MRUFiles_GetDisplayNameRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: MRUFilesInstance - The id of the MRUFiles object.
  //    - itemIndex: int32 - Specifies the index of an item.
  //    - maxWidth: int32 - Specifies the maximum width, in pixels, of the display name string. The width of the string is measured using the system menu font.
  //
  // MRUFiles_GetDisplayNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The display name of the filename at the index. 
  //
  rpc GetDisplayName(MRUFiles_GetDisplayNameRequest) returns (MRUFiles_GetDisplayNameResponse);
  
  
  // Method: Add
  //
  // Adds a filename to the beginning of the collection.
  //
  // MRUFiles_AddRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: MRUFilesInstance - The id of the MRUFiles object.
  //    - fileNameVal: string - Specifies the filename to add to the collection.
  //
  // MRUFiles_AddResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Add(MRUFiles_AddRequest) returns (MRUFiles_AddResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // MRUFiles_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: MRUFilesInstance - The id of the MRUFiles object.
  //    - itemIndex: int32 - Specifies the index of the item to retrieve.
  //
  // MRUFiles_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(MRUFiles_Get_ItemRequest) returns (MRUFiles_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // MRUFiles_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: MRUFilesInstance - The id of the MRUFiles object.
  //
  // MRUFiles_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(MRUFiles_Get_CountRequest) returns (MRUFiles_Get_CountResponse);
  
  
  // Property: Max
  //
  // Specifies the maximum size of the collection.
  //
  // The MRUFiles collection cannot become larger than the size this property specifies. When the collection reaches the maximum size, new items you add to the beginning of the collection replace the oldest items at the end of the collection. The Application Manager control persists the value this property specifies.
  //
  // MRUFiles_Set_MaxRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: MRUFilesInstance - The id of the MRUFiles object.
  //    - val: int32 - Specifies the maximum size of the collection. 
  //
  // MRUFiles_Set_MaxResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // MRUFiles_Get_MaxRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: MRUFilesInstance - The id of the MRUFiles object.
  //
  // MRUFiles_Get_MaxResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the maximum size of the collection. 
  //
  rpc Set_Max(MRUFiles_Set_MaxRequest) returns (MRUFiles_Set_MaxResponse);
  rpc Get_Max(MRUFiles_Get_MaxRequest) returns (MRUFiles_Get_MaxResponse);
  
  
}
message MRUFilesInstance {
  // Specifies the handle of the MRUFiles instance in the server.
  string id = 1;
}
message MRUFiles_ClearRequest {
  // The id of the MRUFiles object.
  MRUFilesInstance instance = 1;
}

message MRUFiles_ClearResponse {
}

message MRUFiles_RemoveRequest {
  // The id of the MRUFiles object.
  MRUFilesInstance instance = 1;
  // Specifies the filename to remove from the collection.
  string fileNameVal = 2;
}

message MRUFiles_RemoveResponse {
  // Returns True when the item is removed from the collection. Returns False when the item is not found.
  bool returnValue = 1;
}

message MRUFiles_GetDisplayNameRequest {
  // The id of the MRUFiles object.
  MRUFilesInstance instance = 1;
  // Specifies the index of an item.
  int32 itemIndex = 2;
  // Specifies the maximum width, in pixels, of the display name string. The width of the string is measured using the system menu font.
  int32 maxWidth = 3;
}

message MRUFiles_GetDisplayNameResponse {
  // The display name of the filename at the index.
  string returnValue = 1;
}

message MRUFiles_AddRequest {
  // The id of the MRUFiles object.
  MRUFilesInstance instance = 1;
  // Specifies the filename to add to the collection.
  string fileNameVal = 2;
}

message MRUFiles_AddResponse {
}

message MRUFiles_Get_ItemRequest {
  // The id of the MRUFiles object.
  MRUFilesInstance instance = 1;
  // Specifies the index of the item to retrieve.
  int32 itemIndex = 2;
}

message MRUFiles_Get_ItemResponse {
  // Filename of the most recently used file at the specified index.
  string returnValue = 1;
}

message MRUFiles_Get_CountRequest {
  // The id of the MRUFiles object.
  MRUFilesInstance instance = 1;
}

message MRUFiles_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

message MRUFiles_Set_MaxRequest {
  // The id of the MRUFiles object.
  MRUFilesInstance instance = 1;
  // Specifies the maximum size of the collection.
  int32 val = 2;
}

message MRUFiles_Set_MaxResponse {
}

message MRUFiles_Get_MaxRequest {
  // The id of the MRUFiles object.
  MRUFilesInstance instance = 1;
}

message MRUFiles_Get_MaxResponse {
  // Specifies the maximum size of the collection.
  int32 returnValue = 1;
}

// SelectedSteps
//
// A collection of selected steps. You can obtain a reference to the collection from the SequenceFileViewMgr.SelectedSteps and ExecutionViewMgr.SelectedSteps properties.
//
service SelectedSteps {
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // SelectedSteps_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SelectedStepsInstance - The id of the SelectedSteps object.
  //
  // SelectedSteps_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(SelectedSteps_ClearRequest) returns (SelectedSteps_ClearResponse);
  
  
  // Method: AddStepIndex
  //
  // Adds a step to the collection.
  //
  // When the SequenceFileViewMgr.StepGroupMode property is StepGroupMode_AllGroups, call the SelectedSteps.AddStep method instead of this method.
  //
  // SelectedSteps_AddStepIndexRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SelectedStepsInstance - The id of the SelectedSteps object.
  //    - stepIndex: int32 - Specifies the index in the current step group of the step to add.
  //
  // SelectedSteps_AddStepIndexResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc AddStepIndex(SelectedSteps_AddStepIndexRequest) returns (SelectedSteps_AddStepIndexResponse);
  
  
  // Method: GetStepIndex
  //
  // Retrieves the step index within a step group of a selected step.
  //
  // SelectedSteps_GetStepIndexRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SelectedStepsInstance - The id of the SelectedSteps object.
  //    - nthSelectedStep: int32 - Specifies the index of a step in the collection.
  //
  // SelectedSteps_GetStepIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - The step index of the step in the collection. 
  //
  rpc GetStepIndex(SelectedSteps_GetStepIndexRequest) returns (SelectedSteps_GetStepIndexResponse);
  
  
  // Method: GetStepGroup
  //
  // Returns the step group of the specified step in the collection.
  //
  // SelectedSteps_GetStepGroupRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SelectedStepsInstance - The id of the SelectedSteps object.
  //    - nthSelectedStep: int32 - Specifies the index of a step in the collection.
  //
  // SelectedSteps_GetStepGroupResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepGroups - The return type of the StepGroups object.
  //
  rpc GetStepGroup(SelectedSteps_GetStepGroupRequest) returns (SelectedSteps_GetStepGroupResponse);
  
  
  // Method: AddStep
  //
  // Adds a step to the collection.
  //
  // When the SequenceFileViewMgr.StepGroupMode property is StepGroupMode_AllGroups, call the SelectedSteps.AddStep method instead of this method.
  //
  // SelectedSteps_AddStepRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SelectedStepsInstance - The id of the SelectedSteps object.
  //
  // SelectedSteps_AddStepResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc AddStep(SelectedSteps_AddStepRequest) returns (SelectedSteps_AddStepResponse);
  
  
  // Method: AddSteps
  //
  // Adds an array of steps to the collection.
  //
  // SelectedSteps_AddStepsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SelectedStepsInstance - The id of the SelectedSteps object.
  //    - val: repeated StepInstance - Specifies the steps to add.
  //
  // SelectedSteps_AddStepsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc AddSteps(SelectedSteps_AddStepsRequest) returns (SelectedSteps_AddStepsResponse);
  
  
  // Method: BeginUpdate
  //
  // Call this method before making multiple changes to the SelectedSteps collection. When you finish changing the collection, call the SelectedSteps.EndUpdate method to update the TestStand User Interface (UI) Controls according to the changes.
  //
  // Use this method to minimize redrawing in the TestStand UI Controls when you programmatically change the selection.
  //
  // SelectedSteps_BeginUpdateRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SelectedStepsInstance - The id of the SelectedSteps object.
  //
  // SelectedSteps_BeginUpdateResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc BeginUpdate(SelectedSteps_BeginUpdateRequest) returns (SelectedSteps_BeginUpdateResponse);
  
  
  // Method: EndUpdate
  //
  // Updates the user interface according to all changes to the SelectedSteps collection you made after the previous call to the SelectedSteps.BeginUpdate method.
  //
  // SelectedSteps_EndUpdateRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SelectedStepsInstance - The id of the SelectedSteps object.
  //
  // SelectedSteps_EndUpdateResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc EndUpdate(SelectedSteps_EndUpdateRequest) returns (SelectedSteps_EndUpdateResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // SelectedSteps_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SelectedStepsInstance - The id of the SelectedSteps object.
  //    - itemIndex: int32 - Specifies the index of the item to retrieve.
  //
  // SelectedSteps_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(SelectedSteps_Get_ItemRequest) returns (SelectedSteps_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // SelectedSteps_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SelectedStepsInstance - The id of the SelectedSteps object.
  //
  // SelectedSteps_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(SelectedSteps_Get_CountRequest) returns (SelectedSteps_Get_CountResponse);
  
  
  // Property: EndSelected
  //
  // Specifies whether the End step is selected.
  //
  // SelectedSteps_Set_EndSelectedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SelectedStepsInstance - The id of the SelectedSteps object.
  //    - val: bool - Specifies whether the End step is selected. 
  //
  // SelectedSteps_Set_EndSelectedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SelectedSteps_Get_EndSelectedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SelectedStepsInstance - The id of the SelectedSteps object.
  //
  // SelectedSteps_Get_EndSelectedResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the End step is selected. 
  //
  rpc Set_EndSelected(SelectedSteps_Set_EndSelectedRequest) returns (SelectedSteps_Set_EndSelectedResponse);
  rpc Get_EndSelected(SelectedSteps_Get_EndSelectedRequest) returns (SelectedSteps_Get_EndSelectedResponse);
  
  
  // Property: SelectionFlags
  //
  // When the SequenceFileViewMgr.StepGroupMode property is StepGroupMode_AllGroups, this property indicates whether the selection includes the step group start and end markers. The property also indicates whether each step group is expanded or collapsed. The value of this property is a bitwise-OR combination of the SelectionFlags constants.
  //
  // SelectedSteps_Set_SelectionFlagsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SelectedStepsInstance - The id of the SelectedSteps object.
  //    - val: int32 - When the SequenceFileViewMgr.StepGroupMode property is StepGroupMode_AllGroups, this property indicates whether the selection includes the step group start and end markers. The property also indicates whether each step group is expanded or collapsed. The value of this property is a bitwise-OR combination of the SelectionFlags constants. 
  //
  // SelectedSteps_Set_SelectionFlagsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SelectedSteps_Get_SelectionFlagsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SelectedStepsInstance - The id of the SelectedSteps object.
  //
  // SelectedSteps_Get_SelectionFlagsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - When the SequenceFileViewMgr.StepGroupMode property is StepGroupMode_AllGroups, this property indicates whether the selection includes the step group start and end markers. The property also indicates whether each step group is expanded or collapsed. The value of this property is a bitwise-OR combination of the SelectionFlags constants. 
  //
  rpc Set_SelectionFlags(SelectedSteps_Set_SelectionFlagsRequest) returns (SelectedSteps_Set_SelectionFlagsResponse);
  rpc Get_SelectionFlags(SelectedSteps_Get_SelectionFlagsRequest) returns (SelectedSteps_Get_SelectionFlagsResponse);
  
  
}
message SelectedStepsInstance {
  // Specifies the handle of the SelectedSteps instance in the server.
  string id = 1;
}
message SelectedSteps_ClearRequest {
  // The id of the SelectedSteps object.
  SelectedStepsInstance instance = 1;
}

message SelectedSteps_ClearResponse {
}

message SelectedSteps_AddStepIndexRequest {
  // The id of the SelectedSteps object.
  SelectedStepsInstance instance = 1;
  // Specifies the index in the current step group of the step to add.
  int32 stepIndex = 2;
}

message SelectedSteps_AddStepIndexResponse {
}

message SelectedSteps_GetStepIndexRequest {
  // The id of the SelectedSteps object.
  SelectedStepsInstance instance = 1;
  // Specifies the index of a step in the collection.
  int32 nthSelectedStep = 2;
}

message SelectedSteps_GetStepIndexResponse {
  // The step index of the step in the collection.
  int32 returnValue = 1;
}

message SelectedSteps_GetStepGroupRequest {
  // The id of the SelectedSteps object.
  SelectedStepsInstance instance = 1;
  // Specifies the index of a step in the collection.
  int32 nthSelectedStep = 2;
}

message SelectedSteps_GetStepGroupResponse {
  // The return type of the StepGroups object.
  StepGroups returnValue = 1;
}

message SelectedSteps_AddStepRequest {
  // The id of the SelectedSteps object.
  SelectedStepsInstance instance = 1;
  StepInstance val = 2;
}

message SelectedSteps_AddStepResponse {
}

message SelectedSteps_AddStepsRequest {
  // The id of the SelectedSteps object.
  SelectedStepsInstance instance = 1;
  // Specifies the steps to add.
  repeated StepInstance val = 2;
}

message SelectedSteps_AddStepsResponse {
}

message SelectedSteps_BeginUpdateRequest {
  // The id of the SelectedSteps object.
  SelectedStepsInstance instance = 1;
}

message SelectedSteps_BeginUpdateResponse {
}

message SelectedSteps_EndUpdateRequest {
  // The id of the SelectedSteps object.
  SelectedStepsInstance instance = 1;
}

message SelectedSteps_EndUpdateResponse {
}

message SelectedSteps_Get_ItemRequest {
  // The id of the SelectedSteps object.
  SelectedStepsInstance instance = 1;
  // Specifies the index of the item to retrieve.
  int32 itemIndex = 2;
}

message SelectedSteps_Get_ItemResponse {
  // The step at the specified index in the collection.
  StepInstance returnValue = 1;
}

message SelectedSteps_Get_CountRequest {
  // The id of the SelectedSteps object.
  SelectedStepsInstance instance = 1;
}

message SelectedSteps_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

message SelectedSteps_Set_EndSelectedRequest {
  // The id of the SelectedSteps object.
  SelectedStepsInstance instance = 1;
  // Specifies whether the End step is selected.
  bool val = 2;
}

message SelectedSteps_Set_EndSelectedResponse {
}

message SelectedSteps_Get_EndSelectedRequest {
  // The id of the SelectedSteps object.
  SelectedStepsInstance instance = 1;
}

message SelectedSteps_Get_EndSelectedResponse {
  // Specifies whether the End step is selected.
  bool returnValue = 1;
}

message SelectedSteps_Set_SelectionFlagsRequest {
  // The id of the SelectedSteps object.
  SelectedStepsInstance instance = 1;
  // When the SequenceFileViewMgr.StepGroupMode property is StepGroupMode_AllGroups, this property indicates whether the selection includes the step group start and end markers. The property also indicates whether each step group is expanded or collapsed. The value of this property is a bitwise-OR combination of the SelectionFlags constants.
  SelectionFlags val = 2;
}

message SelectedSteps_Set_SelectionFlagsResponse {
}

message SelectedSteps_Get_SelectionFlagsRequest {
  // The id of the SelectedSteps object.
  SelectedStepsInstance instance = 1;
}

message SelectedSteps_Get_SelectionFlagsResponse {
  // When the SequenceFileViewMgr.StepGroupMode property is StepGroupMode_AllGroups, this property indicates whether the selection includes the step group start and end markers. The property also indicates whether each step group is expanded or collapsed. The value of this property is a bitwise-OR combination of the SelectionFlags constants.
  SelectionFlags returnValue = 1;
}

// Strings
//
// A collection of strings. You can obtain a reference to the collection from the ApplicationMgr.CommandLineArguments property, the ExpressionEdit.GetValidEvaluationTypes, and ExpressionEdit.SetValidEvaluationTypes methods, and the ApplicationMgr.ProcessUserCommandLineArguments event.
//
service Strings {
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // Strings_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StringsInstance - The id of the Strings object.
  //
  // Strings_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(Strings_ClearRequest) returns (Strings_ClearResponse);
  
  
  // Method: Add
  //
  // Adds a string to the end of the collection.
  //
  // Strings_AddRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StringsInstance - The id of the Strings object.
  //    - val: string - Specifies the string to be added.
  //
  // Strings_AddResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Add(Strings_AddRequest) returns (Strings_AddResponse);
  
  
  // Method: Insert
  //
  // Adds a new item to the collection at the specified index.
  //
  // Strings_InsertRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StringsInstance - The id of the Strings object.
  //    - itemIndex: int32 - Specifies the index of the item to insert.
  //    - val: string - Specifies the string to be added.
  //
  // Strings_InsertResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Insert(Strings_InsertRequest) returns (Strings_InsertResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // Strings_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StringsInstance - The id of the Strings object.
  //    - itemIndex: int32 - Specifies the index of the item to remove.
  //
  // Strings_RemoveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Remove(Strings_RemoveRequest) returns (Strings_RemoveResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // Strings_Set_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StringsInstance - The id of the Strings object.
  //    - itemIndex: int32 - Specifies the index of the item to retrieve.
  //
  // Strings_Set_ItemResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Strings_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StringsInstance - The id of the Strings object.
  //    - itemIndex: int32 - Specifies the index of the item to retrieve.
  //
  // Strings_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Set_Item(Strings_Set_ItemRequest) returns (Strings_Set_ItemResponse);
  rpc Get_Item(Strings_Get_ItemRequest) returns (Strings_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // Strings_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StringsInstance - The id of the Strings object.
  //
  // Strings_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(Strings_Get_CountRequest) returns (Strings_Get_CountResponse);
  
  
}
message StringsInstance {
  // Specifies the handle of the Strings instance in the server.
  string id = 1;
}
message Strings_ClearRequest {
  // The id of the Strings object.
  StringsInstance instance = 1;
}

message Strings_ClearResponse {
}

message Strings_AddRequest {
  // The id of the Strings object.
  StringsInstance instance = 1;
  // Specifies the string to be added.
  string val = 2;
}

message Strings_AddResponse {
}

message Strings_InsertRequest {
  // The id of the Strings object.
  StringsInstance instance = 1;
  // Specifies the index of the item to insert.
  int32 itemIndex = 2;
  // Specifies the string to be added.
  string val = 3;
}

message Strings_InsertResponse {
}

message Strings_RemoveRequest {
  // The id of the Strings object.
  StringsInstance instance = 1;
  // Specifies the index of the item to remove.
  int32 itemIndex = 2;
}

message Strings_RemoveResponse {
}

message Strings_Set_ItemRequest {
  // The id of the Strings object.
  StringsInstance instance = 1;
  // Specifies the index of the item to retrieve.
  int32 itemIndex = 2;
  string val = 3;
}

message Strings_Set_ItemResponse {
}

message Strings_Get_ItemRequest {
  // The id of the Strings object.
  StringsInstance instance = 1;
  // Specifies the index of the item to retrieve.
  int32 itemIndex = 2;
}

message Strings_Get_ItemResponse {
  // The item at the specified index.
  string returnValue = 1;
}

message Strings_Get_CountRequest {
  // The id of the Strings object.
  StringsInstance instance = 1;
}

message Strings_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// NumericConnection
//
// Represents a connection to a numeric source.
//
service NumericConnection {
  // Method: Refresh
  //
  // Refreshes the connected control with the current value of the NumericSource.
  //
  // NumericConnection_RefreshRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: NumericConnectionInstance - The id of the NumericConnection object.
  //
  // NumericConnection_RefreshResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Refresh(NumericConnection_RefreshRequest) returns (NumericConnection_RefreshResponse);
  
  

  // Property: Source
  //
  // NumericSource of the connection.
  //
  // NumericConnection_Set_SourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: NumericConnectionInstance - The id of the NumericConnection object.
  //    - val: NumericSources - NumericSource of the connection. 
  //
  // NumericConnection_Set_SourceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // NumericConnection_Get_SourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: NumericConnectionInstance - The id of the NumericConnection object.
  //
  // NumericConnection_Get_SourceResponse - The response message from the server. It provides the return value.
  //    - returnValue: NumericSources - NumericSource of the connection. 
  //
  rpc Set_Source(NumericConnection_Set_SourceRequest) returns (NumericConnection_Set_SourceResponse);
  rpc Get_Source(NumericConnection_Get_SourceRequest) returns (NumericConnection_Get_SourceResponse);
  
  
}
message NumericConnectionInstance {
  // Specifies the handle of the NumericConnection instance in the server.
  string id = 1;
}
message NumericConnection_RefreshRequest {
  // The id of the NumericConnection object.
  NumericConnectionInstance instance = 1;
}

message NumericConnection_RefreshResponse {
}

message NumericConnection_Set_SourceRequest {
  // The id of the NumericConnection object.
  NumericConnectionInstance instance = 1;
  // NumericSource of the connection.
  NumericSources val = 2;
}

message NumericConnection_Set_SourceResponse {
}

message NumericConnection_Get_SourceRequest {
  // The id of the NumericConnection object.
  NumericConnectionInstance instance = 1;
}

message NumericConnection_Get_SourceResponse {
  // NumericSource of the connection.
  NumericSources returnValue = 1;
}

// NumericConnections
//
// A collection of NumericConnection objects.
//
service NumericConnections {
  // Method: Add
  //
  // Creates and adds a new NumericConnection to the collection.
  //
  // NumericConnections_AddRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: NumericConnectionsInstance - The id of the NumericConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to connect.
  //
  // NumericConnections_AddResponse - The response message from the server. It provides the return value.
  //    - returnValue: NumericConnectionInstance - New NumericConnection. 
  //
  rpc Add(NumericConnections_AddRequest) returns (NumericConnections_AddResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // NumericConnections_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: NumericConnectionsInstance - The id of the NumericConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to disconnect.
  //
  // NumericConnections_RemoveResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when the NumericConnection is removed. Returns False when the NumericConnection is not found. 
  //
  rpc Remove(NumericConnections_RemoveRequest) returns (NumericConnections_RemoveResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // NumericConnections_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: NumericConnectionsInstance - The id of the NumericConnections object.
  //
  // NumericConnections_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(NumericConnections_ClearRequest) returns (NumericConnections_ClearResponse);
  
  
  // Method: FromControl
  //
  // Returns the NumericConnection connected to the uiObj parameter.
  //
  // NumericConnections_FromControlRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: NumericConnectionsInstance - The id of the NumericConnections object.
  //    - uiObj: ObjectInstance - Specifies the connected user interface object.
  //
  // NumericConnections_FromControlResponse - The response message from the server. It provides the return value.
  //    - returnValue: NumericConnectionInstance - NumericConnection connected to the uiObj parameter. When no NumericConnection exists for this control, this method returns NULL. 
  //
  rpc FromControl(NumericConnections_FromControlRequest) returns (NumericConnections_FromControlResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // NumericConnections_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: NumericConnectionsInstance - The id of the NumericConnections object.
  //    - itemIndex: int32 - Specifies the index of the item to retrieve.
  //
  // NumericConnections_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: NumericConnectionInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(NumericConnections_Get_ItemRequest) returns (NumericConnections_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // NumericConnections_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: NumericConnectionsInstance - The id of the NumericConnections object.
  //
  // NumericConnections_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(NumericConnections_Get_CountRequest) returns (NumericConnections_Get_CountResponse);
  
  
}
message NumericConnectionsInstance {
  // Specifies the handle of the NumericConnections instance in the server.
  string id = 1;
}
message NumericConnections_AddRequest {
  // The id of the NumericConnections object.
  NumericConnectionsInstance instance = 1;
  // Specifies the user interface object to connect.
  ObjectInstance uiObj = 2;
}

message NumericConnections_AddResponse {
  // New NumericConnection.
  NumericConnectionInstance returnValue = 1;
}

message NumericConnections_RemoveRequest {
  // The id of the NumericConnections object.
  NumericConnectionsInstance instance = 1;
  // Specifies the user interface object to disconnect.
  ObjectInstance uiObj = 2;
}

message NumericConnections_RemoveResponse {
  // Returns True when the NumericConnection is removed. Returns False when the NumericConnection is not found.
  bool returnValue = 1;
}

message NumericConnections_ClearRequest {
  // The id of the NumericConnections object.
  NumericConnectionsInstance instance = 1;
}

message NumericConnections_ClearResponse {
}

message NumericConnections_FromControlRequest {
  // The id of the NumericConnections object.
  NumericConnectionsInstance instance = 1;
  // Specifies the connected user interface object.
  ObjectInstance uiObj = 2;
}

message NumericConnections_FromControlResponse {
  // NumericConnection connected to the uiObj parameter. When no NumericConnection exists for this control, this method returns NULL.
  NumericConnectionInstance returnValue = 1;
}

message NumericConnections_Get_ItemRequest {
  // The id of the NumericConnections object.
  NumericConnectionsInstance instance = 1;
  // Specifies the index of the item to retrieve.
  int32 itemIndex = 2;
}

message NumericConnections_Get_ItemResponse {
  // Item located at the specified index.
  NumericConnectionInstance returnValue = 1;
}

message NumericConnections_Get_CountRequest {
  // The id of the NumericConnections object.
  NumericConnectionsInstance instance = 1;
}

message NumericConnections_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// ImageConnection
//
// Represents a connection to an image source.
//
service ImageConnection {
  // Property: Source
  //
  // Specifies the type of ImageConnection to obtain an image from.
  //
  // ImageConnection_Set_SourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ImageConnectionInstance - The id of the ImageConnection object.
  //    - val: ImageSources - Specifies the type of ImageConnection to obtain an image from. 
  //
  // ImageConnection_Set_SourceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ImageConnection_Get_SourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ImageConnectionInstance - The id of the ImageConnection object.
  //
  // ImageConnection_Get_SourceResponse - The response message from the server. It provides the return value.
  //    - returnValue: ImageSources - Specifies the type of ImageConnection to obtain an image from. 
  //
  rpc Set_Source(ImageConnection_Set_SourceRequest) returns (ImageConnection_Set_SourceResponse);
  rpc Get_Source(ImageConnection_Get_SourceRequest) returns (ImageConnection_Get_SourceResponse);
  
  
}
message ImageConnectionInstance {
  // Specifies the handle of the ImageConnection instance in the server.
  string id = 1;
}
message ImageConnection_Set_SourceRequest {
  // The id of the ImageConnection object.
  ImageConnectionInstance instance = 1;
  // Specifies the type of ImageConnection to obtain an image from.
  ImageSources val = 2;
}

message ImageConnection_Set_SourceResponse {
}

message ImageConnection_Get_SourceRequest {
  // The id of the ImageConnection object.
  ImageConnectionInstance instance = 1;
}

message ImageConnection_Get_SourceResponse {
  // Specifies the type of ImageConnection to obtain an image from.
  ImageSources returnValue = 1;
}

// ImageConnections
//
// A collection of ImageConnection objects.
//
service ImageConnections {
  // Method: Add
  //
  // Creates and adds a new ImageConnection to the collection.
  //
  // ImageConnections_AddRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ImageConnectionsInstance - The id of the ImageConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to connect.
  //
  // ImageConnections_AddResponse - The response message from the server. It provides the return value.
  //    - returnValue: ImageConnectionInstance - New ImageConnection. 
  //
  rpc Add(ImageConnections_AddRequest) returns (ImageConnections_AddResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // ImageConnections_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ImageConnectionsInstance - The id of the ImageConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to disconnect.
  //
  // ImageConnections_RemoveResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when the ImageConnection is removed. Returns False when the ImageConnection is not found. 
  //
  rpc Remove(ImageConnections_RemoveRequest) returns (ImageConnections_RemoveResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // ImageConnections_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ImageConnectionsInstance - The id of the ImageConnections object.
  //
  // ImageConnections_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(ImageConnections_ClearRequest) returns (ImageConnections_ClearResponse);
  
  
  // Method: FromControl
  //
  // Returns the ImageConnection connected to the uiObj parameter.
  //
  // ImageConnections_FromControlRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ImageConnectionsInstance - The id of the ImageConnections object.
  //    - uiObj: ObjectInstance - Specifies the connected user interface object.
  //
  // ImageConnections_FromControlResponse - The response message from the server. It provides the return value.
  //    - returnValue: ImageConnectionInstance - ImageConnection connected to the uiObj parameter. When no ImageConnection exists for this control, this method returns NULL. 
  //
  rpc FromControl(ImageConnections_FromControlRequest) returns (ImageConnections_FromControlResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // ImageConnections_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ImageConnectionsInstance - The id of the ImageConnections object.
  //    - itemIndex: int32 - Specifies the index of the item to retrieve.
  //
  // ImageConnections_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: ImageConnectionInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(ImageConnections_Get_ItemRequest) returns (ImageConnections_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // ImageConnections_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ImageConnectionsInstance - The id of the ImageConnections object.
  //
  // ImageConnections_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(ImageConnections_Get_CountRequest) returns (ImageConnections_Get_CountResponse);
  
  
}
message ImageConnectionsInstance {
  // Specifies the handle of the ImageConnections instance in the server.
  string id = 1;
}
message ImageConnections_AddRequest {
  // The id of the ImageConnections object.
  ImageConnectionsInstance instance = 1;
  // Specifies the user interface object to connect.
  ObjectInstance uiObj = 2;
}

message ImageConnections_AddResponse {
  // New ImageConnection.
  ImageConnectionInstance returnValue = 1;
}

message ImageConnections_RemoveRequest {
  // The id of the ImageConnections object.
  ImageConnectionsInstance instance = 1;
  // Specifies the user interface object to disconnect.
  ObjectInstance uiObj = 2;
}

message ImageConnections_RemoveResponse {
  // Returns True when the ImageConnection is removed. Returns False when the ImageConnection is not found.
  bool returnValue = 1;
}

message ImageConnections_ClearRequest {
  // The id of the ImageConnections object.
  ImageConnectionsInstance instance = 1;
}

message ImageConnections_ClearResponse {
}

message ImageConnections_FromControlRequest {
  // The id of the ImageConnections object.
  ImageConnectionsInstance instance = 1;
  // Specifies the connected user interface object.
  ObjectInstance uiObj = 2;
}

message ImageConnections_FromControlResponse {
  // ImageConnection connected to the uiObj parameter. When no ImageConnection exists for this control, this method returns NULL.
  ImageConnectionInstance returnValue = 1;
}

message ImageConnections_Get_ItemRequest {
  // The id of the ImageConnections object.
  ImageConnectionsInstance instance = 1;
  // Specifies the index of the item to retrieve.
  int32 itemIndex = 2;
}

message ImageConnections_Get_ItemResponse {
  // Item located at the specified index.
  ImageConnectionInstance returnValue = 1;
}

message ImageConnections_Get_CountRequest {
  // The id of the ImageConnections object.
  ImageConnectionsInstance instance = 1;
}

message ImageConnections_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// CaptionConnection
//
// Represents a connection to a caption source.
//
service CaptionConnection {
  // Method: Refresh
  //
  // Refreshes the user interface control connected to this CaptionConnection with the most recent text from the CaptionSource.
  //
  // CaptionConnection_RefreshRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CaptionConnectionInstance - The id of the CaptionConnection object.
  //
  // CaptionConnection_RefreshResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Refresh(CaptionConnection_RefreshRequest) returns (CaptionConnection_RefreshResponse);
  
  

  // Property: Source
  //
  // Specifies the type of caption source to obtain the text from.
  //
  // CaptionConnection_Set_SourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CaptionConnectionInstance - The id of the CaptionConnection object.
  //    - val: CaptionSources - Specifies the type of caption source to obtain the text from. 
  //
  // CaptionConnection_Set_SourceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CaptionConnection_Get_SourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CaptionConnectionInstance - The id of the CaptionConnection object.
  //
  // CaptionConnection_Get_SourceResponse - The response message from the server. It provides the return value.
  //    - returnValue: CaptionSources - Specifies the type of caption source to obtain the text from. 
  //
  rpc Set_Source(CaptionConnection_Set_SourceRequest) returns (CaptionConnection_Set_SourceResponse);
  rpc Get_Source(CaptionConnection_Get_SourceRequest) returns (CaptionConnection_Get_SourceResponse);
  
  
  // Property: LongName
  //
  // For certain caption sources, this property specifies whether to return a long or short version of the caption text. Refer to the CaptionSources enumeration for more information about determining when this option affects the text and for more information about the long and short versions of the text.
  //
  // CaptionConnection_Set_LongNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CaptionConnectionInstance - The id of the CaptionConnection object.
  //    - val: bool - For certain caption sources, this property specifies whether to return a long or short version of the caption text. Refer to the CaptionSources enumeration for more information about determining when this option affects the text and for more information about the long and short versions of the text. 
  //
  // CaptionConnection_Set_LongNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CaptionConnection_Get_LongNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CaptionConnectionInstance - The id of the CaptionConnection object.
  //
  // CaptionConnection_Get_LongNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - For certain caption sources, this property specifies whether to return a long or short version of the caption text. Refer to the CaptionSources enumeration for more information about determining when this option affects the text and for more information about the long and short versions of the text. 
  //
  rpc Set_LongName(CaptionConnection_Set_LongNameRequest) returns (CaptionConnection_Set_LongNameResponse);
  rpc Get_LongName(CaptionConnection_Get_LongNameRequest) returns (CaptionConnection_Get_LongNameResponse);
  
  
  // Property: FormatExpression
  //
  // Specifies a format expression to evaluate when generating the caption text.
  //
  // For CaptionSource_MacroExpression, specify a format expression that evaluates to a string value that contains macros that specify other caption sources. For all other caption sources, specify a format expression that evaluates to a string value that contains the characters %1. This method replaces the %1 characters with the text from the caption source. Pass an empty string to use the default format for the caption source.
  //
  // CaptionConnection_Set_FormatExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CaptionConnectionInstance - The id of the CaptionConnection object.
  //    - val: string - Specifies a format expression to evaluate when generating the caption text. 
  //
  // CaptionConnection_Set_FormatExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CaptionConnection_Get_FormatExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CaptionConnectionInstance - The id of the CaptionConnection object.
  //
  // CaptionConnection_Get_FormatExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies a format expression to evaluate when generating the caption text. 
  //
  rpc Set_FormatExpression(CaptionConnection_Set_FormatExpressionRequest) returns (CaptionConnection_Set_FormatExpressionResponse);
  rpc Get_FormatExpression(CaptionConnection_Get_FormatExpressionRequest) returns (CaptionConnection_Get_FormatExpressionResponse);
  
  
}
message CaptionConnectionInstance {
  // Specifies the handle of the CaptionConnection instance in the server.
  string id = 1;
}
message CaptionConnection_RefreshRequest {
  // The id of the CaptionConnection object.
  CaptionConnectionInstance instance = 1;
}

message CaptionConnection_RefreshResponse {
}

message CaptionConnection_Set_SourceRequest {
  // The id of the CaptionConnection object.
  CaptionConnectionInstance instance = 1;
  // Specifies the type of caption source to obtain the text from.
  CaptionSources val = 2;
}

message CaptionConnection_Set_SourceResponse {
}

message CaptionConnection_Get_SourceRequest {
  // The id of the CaptionConnection object.
  CaptionConnectionInstance instance = 1;
}

message CaptionConnection_Get_SourceResponse {
  // Specifies the type of caption source to obtain the text from.
  CaptionSources returnValue = 1;
}

message CaptionConnection_Set_LongNameRequest {
  // The id of the CaptionConnection object.
  CaptionConnectionInstance instance = 1;
  // For certain caption sources, this property specifies whether to return a long or short version of the caption text. Refer to the CaptionSources enumeration for more information about determining when this option affects the text and for more information about the long and short versions of the text.
  bool val = 2;
}

message CaptionConnection_Set_LongNameResponse {
}

message CaptionConnection_Get_LongNameRequest {
  // The id of the CaptionConnection object.
  CaptionConnectionInstance instance = 1;
}

message CaptionConnection_Get_LongNameResponse {
  // For certain caption sources, this property specifies whether to return a long or short version of the caption text. Refer to the CaptionSources enumeration for more information about determining when this option affects the text and for more information about the long and short versions of the text.
  bool returnValue = 1;
}

message CaptionConnection_Set_FormatExpressionRequest {
  // The id of the CaptionConnection object.
  CaptionConnectionInstance instance = 1;
  // Specifies a format expression to evaluate when generating the caption text.
  string val = 2;
}

message CaptionConnection_Set_FormatExpressionResponse {
}

message CaptionConnection_Get_FormatExpressionRequest {
  // The id of the CaptionConnection object.
  CaptionConnectionInstance instance = 1;
}

message CaptionConnection_Get_FormatExpressionResponse {
  // Specifies a format expression to evaluate when generating the caption text.
  string returnValue = 1;
}

// CaptionConnections
//
// A collection of CaptionConnection objects.
//
service CaptionConnections {
  // Method: Add
  //
  // Creates and adds a new CaptionConnection to the collection.
  //
  // CaptionConnections_AddRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CaptionConnectionsInstance - The id of the CaptionConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to connect.
  //
  // CaptionConnections_AddResponse - The response message from the server. It provides the return value.
  //    - returnValue: CaptionConnectionInstance - New CaptionConnection. 
  //
  rpc Add(CaptionConnections_AddRequest) returns (CaptionConnections_AddResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // CaptionConnections_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CaptionConnectionsInstance - The id of the CaptionConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to disconnect.
  //
  // CaptionConnections_RemoveResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when the CaptionConnection is removed. Returns False when the CaptionConnection is not found. 
  //
  rpc Remove(CaptionConnections_RemoveRequest) returns (CaptionConnections_RemoveResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // CaptionConnections_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CaptionConnectionsInstance - The id of the CaptionConnections object.
  //
  // CaptionConnections_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(CaptionConnections_ClearRequest) returns (CaptionConnections_ClearResponse);
  
  
  // Method: FromControl
  //
  // Returns the CaptionConnection connected to the uiObj parameter.
  //
  // CaptionConnections_FromControlRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CaptionConnectionsInstance - The id of the CaptionConnections object.
  //    - uiObj: ObjectInstance - Specifies the connected user interface object.
  //
  // CaptionConnections_FromControlResponse - The response message from the server. It provides the return value.
  //    - returnValue: CaptionConnectionInstance - CaptionConnection connected to the uiObj parameter. When no CaptionConnection exists for this control, this method returns NULL. 
  //
  rpc FromControl(CaptionConnections_FromControlRequest) returns (CaptionConnections_FromControlResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // CaptionConnections_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CaptionConnectionsInstance - The id of the CaptionConnections object.
  //    - itemIndex: int32 - Specifies the index of the item to retrieve.
  //
  // CaptionConnections_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: CaptionConnectionInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(CaptionConnections_Get_ItemRequest) returns (CaptionConnections_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // CaptionConnections_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CaptionConnectionsInstance - The id of the CaptionConnections object.
  //
  // CaptionConnections_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(CaptionConnections_Get_CountRequest) returns (CaptionConnections_Get_CountResponse);
  
  
}
message CaptionConnectionsInstance {
  // Specifies the handle of the CaptionConnections instance in the server.
  string id = 1;
}
message CaptionConnections_AddRequest {
  // The id of the CaptionConnections object.
  CaptionConnectionsInstance instance = 1;
  // Specifies the user interface object to connect.
  ObjectInstance uiObj = 2;
}

message CaptionConnections_AddResponse {
  // New CaptionConnection.
  CaptionConnectionInstance returnValue = 1;
}

message CaptionConnections_RemoveRequest {
  // The id of the CaptionConnections object.
  CaptionConnectionsInstance instance = 1;
  // Specifies the user interface object to disconnect.
  ObjectInstance uiObj = 2;
}

message CaptionConnections_RemoveResponse {
  // Returns True when the CaptionConnection is removed. Returns False when the CaptionConnection is not found.
  bool returnValue = 1;
}

message CaptionConnections_ClearRequest {
  // The id of the CaptionConnections object.
  CaptionConnectionsInstance instance = 1;
}

message CaptionConnections_ClearResponse {
}

message CaptionConnections_FromControlRequest {
  // The id of the CaptionConnections object.
  CaptionConnectionsInstance instance = 1;
  // Specifies the connected user interface object.
  ObjectInstance uiObj = 2;
}

message CaptionConnections_FromControlResponse {
  // CaptionConnection connected to the uiObj parameter. When no CaptionConnection exists for this control, this method returns NULL.
  CaptionConnectionInstance returnValue = 1;
}

message CaptionConnections_Get_ItemRequest {
  // The id of the CaptionConnections object.
  CaptionConnectionsInstance instance = 1;
  // Specifies the index of the item to retrieve.
  int32 itemIndex = 2;
}

message CaptionConnections_Get_ItemResponse {
  // Item located at the specified index.
  CaptionConnectionInstance returnValue = 1;
}

message CaptionConnections_Get_CountRequest {
  // The id of the CaptionConnections object.
  CaptionConnectionsInstance instance = 1;
}

message CaptionConnections_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// CommandConnection
//
// Represents a connection to a CommandKind.
//
service CommandConnection {
  // Method: Refresh
  //
  // Refreshes the state of the user interface control connected to the CommandConnection.
  //
  // CommandConnection_RefreshRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandConnectionInstance - The id of the CommandConnection object.
  //
  // CommandConnection_RefreshResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Refresh(CommandConnection_RefreshRequest) returns (CommandConnection_RefreshResponse);
  
  
  // Method: FreezeRefresh
  //
  // Specifies to freeze the CommandConnection when setting the properties to avoid flicker on the connected control.
  //
  // FreezeRefresh calls must be balanced. For example, each time you call this method with a value of True, you must also call it with a value of False.
  //
  // CommandConnection_FreezeRefreshRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommandConnectionInstance - The id of the CommandConnection object.
  //    - frz: bool - When this parameter is True, the CommandConnection does not refresh the control. When this parameter is False, the CommandConnection refreshes the control.
  //
  // CommandConnection_FreezeRefreshResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc FreezeRefresh(CommandConnection_FreezeRefreshRequest) returns (CommandConnection_FreezeRefreshResponse);
  
  

  // Property: Kind
  //
  // Specifies the type of Command to which this CommandConnection connects.
  //
  // CommandConnection_Set_KindRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandConnectionInstance - The id of the CommandConnection object.
  //    - val: CommandKinds - Specifies the type of Command to which this CommandConnection connects. 
  //
  // CommandConnection_Set_KindResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CommandConnection_Get_KindRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandConnectionInstance - The id of the CommandConnection object.
  //
  // CommandConnection_Get_KindResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommandKinds - Specifies the type of Command to which this CommandConnection connects. 
  //
  rpc Set_Kind(CommandConnection_Set_KindRequest) returns (CommandConnection_Set_KindResponse);
  rpc Get_Kind(CommandConnection_Get_KindRequest) returns (CommandConnection_Get_KindResponse);
  
  
  // Property: Index
  //
  // Specifies which command in the set of commands to use.
  //
  // Note: Use this on sets of commands. Refer to the CommandKinds enumeration for more information about supported command sets.
  //
  // CommandConnection_Set_IndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandConnectionInstance - The id of the CommandConnection object.
  //    - val: int32 - Specifies which command in the set of commands to use. 
  //
  // CommandConnection_Set_IndexResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CommandConnection_Get_IndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandConnectionInstance - The id of the CommandConnection object.
  //
  // CommandConnection_Get_IndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies which command in the set of commands to use. 
  //
  rpc Set_Index(CommandConnection_Set_IndexRequest) returns (CommandConnection_Set_IndexResponse);
  rpc Get_Index(CommandConnection_Get_IndexRequest) returns (CommandConnection_Get_IndexResponse);
  
  
  // Property: Options
  //
  // Specifies the behavior of the CommandConnection.
  //
  // The value of this property is a bitwise-OR combination of the CommandConnectionOptions constants.
  //
  // CommandConnection_Set_OptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandConnectionInstance - The id of the CommandConnection object.
  //    - val: int32 - Specifies the behavior of the CommandConnection. 
  //
  // CommandConnection_Set_OptionsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CommandConnection_Get_OptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandConnectionInstance - The id of the CommandConnection object.
  //
  // CommandConnection_Get_OptionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the behavior of the CommandConnection. 
  //
  rpc Set_Options(CommandConnection_Set_OptionsRequest) returns (CommandConnection_Set_OptionsResponse);
  rpc Get_Options(CommandConnection_Get_OptionsRequest) returns (CommandConnection_Get_OptionsResponse);
  
  
}
message CommandConnectionInstance {
  // Specifies the handle of the CommandConnection instance in the server.
  string id = 1;
}
message CommandConnection_RefreshRequest {
  // The id of the CommandConnection object.
  CommandConnectionInstance instance = 1;
}

message CommandConnection_RefreshResponse {
}

message CommandConnection_FreezeRefreshRequest {
  // The id of the CommandConnection object.
  CommandConnectionInstance instance = 1;
  // When this parameter is True, the CommandConnection does not refresh the control. When this parameter is False, the CommandConnection refreshes the control.
  bool frz = 2;
}

message CommandConnection_FreezeRefreshResponse {
}

message CommandConnection_Set_KindRequest {
  // The id of the CommandConnection object.
  CommandConnectionInstance instance = 1;
  // Specifies the type of Command to which this CommandConnection connects.
  CommandKinds val = 2;
}

message CommandConnection_Set_KindResponse {
}

message CommandConnection_Get_KindRequest {
  // The id of the CommandConnection object.
  CommandConnectionInstance instance = 1;
}

message CommandConnection_Get_KindResponse {
  // Specifies the type of Command to which this CommandConnection connects.
  CommandKinds returnValue = 1;
}

message CommandConnection_Set_IndexRequest {
  // The id of the CommandConnection object.
  CommandConnectionInstance instance = 1;
  // Specifies which command in the set of commands to use.
  int32 val = 2;
}

message CommandConnection_Set_IndexResponse {
}

message CommandConnection_Get_IndexRequest {
  // The id of the CommandConnection object.
  CommandConnectionInstance instance = 1;
}

message CommandConnection_Get_IndexResponse {
  // Specifies which command in the set of commands to use.
  int32 returnValue = 1;
}

message CommandConnection_Set_OptionsRequest {
  // The id of the CommandConnection object.
  CommandConnectionInstance instance = 1;
  // Specifies the behavior of the CommandConnection.
  int32 val = 2;
}

message CommandConnection_Set_OptionsResponse {
}

message CommandConnection_Get_OptionsRequest {
  // The id of the CommandConnection object.
  CommandConnectionInstance instance = 1;
}

message CommandConnection_Get_OptionsResponse {
  // Specifies the behavior of the CommandConnection.
  int32 returnValue = 1;
}

// CommandConnections
//
// A collection of CommandConnection objects.
//
service CommandConnections {
  // Method: Add
  //
  // Creates and adds a new CommandConnection to the collection.
  //
  // CommandConnections_AddRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommandConnectionsInstance - The id of the CommandConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to connect.
  //
  // CommandConnections_AddResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommandConnectionInstance - New CommandConnection. 
  //
  rpc Add(CommandConnections_AddRequest) returns (CommandConnections_AddResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // CommandConnections_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommandConnectionsInstance - The id of the CommandConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to disconnect.
  //
  // CommandConnections_RemoveResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when the CommandConnection is removed. Returns False when the CommandConnection is not found. 
  //
  rpc Remove(CommandConnections_RemoveRequest) returns (CommandConnections_RemoveResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // CommandConnections_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandConnectionsInstance - The id of the CommandConnections object.
  //
  // CommandConnections_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(CommandConnections_ClearRequest) returns (CommandConnections_ClearResponse);
  
  
  // Method: FromControl
  //
  // Returns the CommandConnection connected to the uiObj parameter.
  //
  // CommandConnections_FromControlRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommandConnectionsInstance - The id of the CommandConnections object.
  //    - uiObj: ObjectInstance - Specifies the connected user interface object.
  //
  // CommandConnections_FromControlResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommandConnectionInstance - CommandConnection connected to the uiObj parameter. When no CommandConnection exists for this control, this method returns NULL. 
  //
  rpc FromControl(CommandConnections_FromControlRequest) returns (CommandConnections_FromControlResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // CommandConnections_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommandConnectionsInstance - The id of the CommandConnections object.
  //    - itemIndex: int32 - Specifies the index of the item to retrieve.
  //
  // CommandConnections_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommandConnectionInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(CommandConnections_Get_ItemRequest) returns (CommandConnections_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // CommandConnections_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandConnectionsInstance - The id of the CommandConnections object.
  //
  // CommandConnections_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(CommandConnections_Get_CountRequest) returns (CommandConnections_Get_CountResponse);
  
  
}
message CommandConnectionsInstance {
  // Specifies the handle of the CommandConnections instance in the server.
  string id = 1;
}
message CommandConnections_AddRequest {
  // The id of the CommandConnections object.
  CommandConnectionsInstance instance = 1;
  // Specifies the user interface object to connect.
  ObjectInstance uiObj = 2;
}

message CommandConnections_AddResponse {
  // New CommandConnection.
  CommandConnectionInstance returnValue = 1;
}

message CommandConnections_RemoveRequest {
  // The id of the CommandConnections object.
  CommandConnectionsInstance instance = 1;
  // Specifies the user interface object to disconnect.
  ObjectInstance uiObj = 2;
}

message CommandConnections_RemoveResponse {
  // Returns True when the CommandConnection is removed. Returns False when the CommandConnection is not found.
  bool returnValue = 1;
}

message CommandConnections_ClearRequest {
  // The id of the CommandConnections object.
  CommandConnectionsInstance instance = 1;
}

message CommandConnections_ClearResponse {
}

message CommandConnections_FromControlRequest {
  // The id of the CommandConnections object.
  CommandConnectionsInstance instance = 1;
  // Specifies the connected user interface object.
  ObjectInstance uiObj = 2;
}

message CommandConnections_FromControlResponse {
  // CommandConnection connected to the uiObj parameter. When no CommandConnection exists for this control, this method returns NULL.
  CommandConnectionInstance returnValue = 1;
}

message CommandConnections_Get_ItemRequest {
  // The id of the CommandConnections object.
  CommandConnectionsInstance instance = 1;
  // Specifies the index of the item to retrieve.
  int32 itemIndex = 2;
}

message CommandConnections_Get_ItemResponse {
  // Item located at the specified index.
  CommandConnectionInstance returnValue = 1;
}

message CommandConnections_Get_CountRequest {
  // The id of the CommandConnections object.
  CommandConnectionsInstance instance = 1;
}

message CommandConnections_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// SequenceViewConnection
//
// Represents a connection from a SequenceFileView Manager control to a SequenceView control. The SequenceView control shows the contents of the current sequence in the SequenceFileView Manager control. Use the SequenceFileViewMgr.Connections property to obtain a collection of SequenceViewConnection objects.
//
service SequenceViewConnection {
  // Property: UIControl
  //
  // Returns the user interface control the connection connects to a SequenceFileView Manager control.
  //
  // SequenceViewConnection_Get_UIControlRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewConnectionInstance - The id of the SequenceViewConnection object.
  //
  // SequenceViewConnection_Get_UIControlResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - Returns the user interface control the connection connects to a SequenceFileView Manager control. 
  //
  rpc Get_UIControl(SequenceViewConnection_Get_UIControlRequest) returns (SequenceViewConnection_Get_UIControlResponse);
  
  
  // Property: DoubleClickEditsStepProperties
  //
  // Specifies whether the connected SequenceView control displays the Step Properties dialog box when editing is enabled and the user double-clicks a step. This property defaults to True. Set the property to False if you implement an alternate behavior for double-clicking a step in a sequence file.
  //
  // SequenceViewConnection_Set_DoubleClickEditsStepPropertiesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewConnectionInstance - The id of the SequenceViewConnection object.
  //    - val: bool - Specifies whether the connected SequenceView control displays the Step Properties dialog box when editing is enabled and the user double-clicks a step. This property defaults to True. Set the property to False if you implement an alternate behavior for double-clicking a step in a sequence file. 
  //
  // SequenceViewConnection_Set_DoubleClickEditsStepPropertiesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceViewConnection_Get_DoubleClickEditsStepPropertiesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewConnectionInstance - The id of the SequenceViewConnection object.
  //
  // SequenceViewConnection_Get_DoubleClickEditsStepPropertiesResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the connected SequenceView control displays the Step Properties dialog box when editing is enabled and the user double-clicks a step. This property defaults to True. Set the property to False if you implement an alternate behavior for double-clicking a step in a sequence file. 
  //
  rpc Set_DoubleClickEditsStepProperties(SequenceViewConnection_Set_DoubleClickEditsStepPropertiesRequest) returns (SequenceViewConnection_Set_DoubleClickEditsStepPropertiesResponse);
  rpc Get_DoubleClickEditsStepProperties(SequenceViewConnection_Get_DoubleClickEditsStepPropertiesRequest) returns (SequenceViewConnection_Get_DoubleClickEditsStepPropertiesResponse);
  
  
}
message SequenceViewConnectionInstance {
  // Specifies the handle of the SequenceViewConnection instance in the server.
  string id = 1;
}
message SequenceViewConnection_Get_UIControlRequest {
  // The id of the SequenceViewConnection object.
  SequenceViewConnectionInstance instance = 1;
}

message SequenceViewConnection_Get_UIControlResponse {
  // Returns the user interface control the connection connects to a SequenceFileView Manager control.
  ObjectInstance returnValue = 1;
}

message SequenceViewConnection_Set_DoubleClickEditsStepPropertiesRequest {
  // The id of the SequenceViewConnection object.
  SequenceViewConnectionInstance instance = 1;
  // Specifies whether the connected SequenceView control displays the Step Properties dialog box when editing is enabled and the user double-clicks a step. This property defaults to True. Set the property to False if you implement an alternate behavior for double-clicking a step in a sequence file.
  bool val = 2;
}

message SequenceViewConnection_Set_DoubleClickEditsStepPropertiesResponse {
}

message SequenceViewConnection_Get_DoubleClickEditsStepPropertiesRequest {
  // The id of the SequenceViewConnection object.
  SequenceViewConnectionInstance instance = 1;
}

message SequenceViewConnection_Get_DoubleClickEditsStepPropertiesResponse {
  // Specifies whether the connected SequenceView control displays the Step Properties dialog box when editing is enabled and the user double-clicks a step. This property defaults to True. Set the property to False if you implement an alternate behavior for double-clicking a step in a sequence file.
  bool returnValue = 1;
}

// SequenceViewConnections
//
// A collection of SequenceViewConnection objects you obtain by calling  the SequenceFileViewMgr.Connections property.
//
service SequenceViewConnections {
  // Method: Add
  //
  // Creates and adds a new SequenceViewConnection to the collection.
  //
  // SequenceViewConnections_AddRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceViewConnectionsInstance - The id of the SequenceViewConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to connect.
  //
  // SequenceViewConnections_AddResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceViewConnectionInstance - New SequenceViewConnection. 
  //
  rpc Add(SequenceViewConnections_AddRequest) returns (SequenceViewConnections_AddResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // SequenceViewConnections_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceViewConnectionsInstance - The id of the SequenceViewConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to disconnect.
  //
  // SequenceViewConnections_RemoveResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when the SequenceViewConnection is removed. Returns False when the SequenceViewConnection is not found. 
  //
  rpc Remove(SequenceViewConnections_RemoveRequest) returns (SequenceViewConnections_RemoveResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // SequenceViewConnections_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewConnectionsInstance - The id of the SequenceViewConnections object.
  //
  // SequenceViewConnections_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(SequenceViewConnections_ClearRequest) returns (SequenceViewConnections_ClearResponse);
  
  
  // Method: FromControl
  //
  // Returns the SequenceViewConnection connected to the uiObj parameter.
  //
  // SequenceViewConnections_FromControlRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceViewConnectionsInstance - The id of the SequenceViewConnections object.
  //    - uiObj: ObjectInstance - Specifies the connected user interface object.
  //
  // SequenceViewConnections_FromControlResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceViewConnectionInstance - SequenceViewConnection connected to the uiObj parameter. When no SequenceViewConnection exists for this control, this method returns NULL. 
  //
  rpc FromControl(SequenceViewConnections_FromControlRequest) returns (SequenceViewConnections_FromControlResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // SequenceViewConnections_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceViewConnectionsInstance - The id of the SequenceViewConnections object.
  //    - itemIndex: int32 - Specifies the index of the item to retrieve.
  //
  // SequenceViewConnections_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceViewConnectionInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(SequenceViewConnections_Get_ItemRequest) returns (SequenceViewConnections_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // SequenceViewConnections_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewConnectionsInstance - The id of the SequenceViewConnections object.
  //
  // SequenceViewConnections_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(SequenceViewConnections_Get_CountRequest) returns (SequenceViewConnections_Get_CountResponse);
  
  
}
message SequenceViewConnectionsInstance {
  // Specifies the handle of the SequenceViewConnections instance in the server.
  string id = 1;
}
message SequenceViewConnections_AddRequest {
  // The id of the SequenceViewConnections object.
  SequenceViewConnectionsInstance instance = 1;
  // Specifies the user interface object to connect.
  ObjectInstance uiObj = 2;
}

message SequenceViewConnections_AddResponse {
  // New SequenceViewConnection.
  SequenceViewConnectionInstance returnValue = 1;
}

message SequenceViewConnections_RemoveRequest {
  // The id of the SequenceViewConnections object.
  SequenceViewConnectionsInstance instance = 1;
  // Specifies the user interface object to disconnect.
  ObjectInstance uiObj = 2;
}

message SequenceViewConnections_RemoveResponse {
  // Returns True when the SequenceViewConnection is removed. Returns False when the SequenceViewConnection is not found.
  bool returnValue = 1;
}

message SequenceViewConnections_ClearRequest {
  // The id of the SequenceViewConnections object.
  SequenceViewConnectionsInstance instance = 1;
}

message SequenceViewConnections_ClearResponse {
}

message SequenceViewConnections_FromControlRequest {
  // The id of the SequenceViewConnections object.
  SequenceViewConnectionsInstance instance = 1;
  // Specifies the connected user interface object.
  ObjectInstance uiObj = 2;
}

message SequenceViewConnections_FromControlResponse {
  // SequenceViewConnection connected to the uiObj parameter. When no SequenceViewConnection exists for this control, this method returns NULL.
  SequenceViewConnectionInstance returnValue = 1;
}

message SequenceViewConnections_Get_ItemRequest {
  // The id of the SequenceViewConnections object.
  SequenceViewConnectionsInstance instance = 1;
  // Specifies the index of the item to retrieve.
  int32 itemIndex = 2;
}

message SequenceViewConnections_Get_ItemResponse {
  // Item located at the specified index.
  SequenceViewConnectionInstance returnValue = 1;
}

message SequenceViewConnections_Get_CountRequest {
  // The id of the SequenceViewConnections object.
  SequenceViewConnectionsInstance instance = 1;
}

message SequenceViewConnections_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// SequenceFileListConnection
//
// Represents a connection from a SequenceFileView Manager control to a control that displays a list of open sequence files. Use the connected control to select a sequence file to open in the SequenceFileView Manager control from the list of sequence files.
//
service SequenceFileListConnection {
  // Property: ShowFullPath
  //
  // When this property is True, the connected control displays the full path for all sequence files. Otherwise, the connected control displays only filenames.
  //
  // SequenceFileListConnection_Set_ShowFullPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileListConnectionInstance - The id of the SequenceFileListConnection object.
  //    - val: bool - When this property is True, the connected control displays the full path for all sequence files. Otherwise, the connected control displays only filenames. 
  //
  // SequenceFileListConnection_Set_ShowFullPathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceFileListConnection_Get_ShowFullPathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileListConnectionInstance - The id of the SequenceFileListConnection object.
  //
  // SequenceFileListConnection_Get_ShowFullPathResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When this property is True, the connected control displays the full path for all sequence files. Otherwise, the connected control displays only filenames. 
  //
  rpc Set_ShowFullPath(SequenceFileListConnection_Set_ShowFullPathRequest) returns (SequenceFileListConnection_Set_ShowFullPathResponse);
  rpc Get_ShowFullPath(SequenceFileListConnection_Get_ShowFullPathRequest) returns (SequenceFileListConnection_Get_ShowFullPathResponse);
  
  
  // Property: ShowCommentInTip
  //
  // Specifies whether the item tooltip includes the sequence file comment in controls you connect to display the list of loaded sequence files.
  //
  // SequenceFileListConnection_Set_ShowCommentInTipRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileListConnectionInstance - The id of the SequenceFileListConnection object.
  //    - val: bool - Specifies whether the item tooltip includes the sequence file comment in controls you connect to display the list of loaded sequence files. 
  //
  // SequenceFileListConnection_Set_ShowCommentInTipResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceFileListConnection_Get_ShowCommentInTipRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileListConnectionInstance - The id of the SequenceFileListConnection object.
  //
  // SequenceFileListConnection_Get_ShowCommentInTipResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the item tooltip includes the sequence file comment in controls you connect to display the list of loaded sequence files. 
  //
  rpc Set_ShowCommentInTip(SequenceFileListConnection_Set_ShowCommentInTipRequest) returns (SequenceFileListConnection_Set_ShowCommentInTipResponse);
  rpc Get_ShowCommentInTip(SequenceFileListConnection_Get_ShowCommentInTipRequest) returns (SequenceFileListConnection_Get_ShowCommentInTipResponse);
  
  
}
message SequenceFileListConnectionInstance {
  // Specifies the handle of the SequenceFileListConnection instance in the server.
  string id = 1;
}
message SequenceFileListConnection_Set_ShowFullPathRequest {
  // The id of the SequenceFileListConnection object.
  SequenceFileListConnectionInstance instance = 1;
  // When this property is True, the connected control displays the full path for all sequence files. Otherwise, the connected control displays only filenames.
  bool val = 2;
}

message SequenceFileListConnection_Set_ShowFullPathResponse {
}

message SequenceFileListConnection_Get_ShowFullPathRequest {
  // The id of the SequenceFileListConnection object.
  SequenceFileListConnectionInstance instance = 1;
}

message SequenceFileListConnection_Get_ShowFullPathResponse {
  // When this property is True, the connected control displays the full path for all sequence files. Otherwise, the connected control displays only filenames.
  bool returnValue = 1;
}

message SequenceFileListConnection_Set_ShowCommentInTipRequest {
  // The id of the SequenceFileListConnection object.
  SequenceFileListConnectionInstance instance = 1;
  // Specifies whether the item tooltip includes the sequence file comment in controls you connect to display the list of loaded sequence files.
  bool val = 2;
}

message SequenceFileListConnection_Set_ShowCommentInTipResponse {
}

message SequenceFileListConnection_Get_ShowCommentInTipRequest {
  // The id of the SequenceFileListConnection object.
  SequenceFileListConnectionInstance instance = 1;
}

message SequenceFileListConnection_Get_ShowCommentInTipResponse {
  // Specifies whether the item tooltip includes the sequence file comment in controls you connect to display the list of loaded sequence files.
  bool returnValue = 1;
}

// SequenceFileListConnections
//
// A collection of SequenceFileListConnection objects.
//
service SequenceFileListConnections {
  // Method: Add
  //
  // Creates and adds a new SequenceFileListConnection to the collection.
  //
  // SequenceFileListConnections_AddRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileListConnectionsInstance - The id of the SequenceFileListConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to connect.
  //
  // SequenceFileListConnections_AddResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFileListConnectionInstance - New SequenceFileListConnection. 
  //
  rpc Add(SequenceFileListConnections_AddRequest) returns (SequenceFileListConnections_AddResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // SequenceFileListConnections_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileListConnectionsInstance - The id of the SequenceFileListConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to disconnect.
  //
  // SequenceFileListConnections_RemoveResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when the SequenceFileListConnection is removed. Returns False when the SequenceFileListConnection is not found. 
  //
  rpc Remove(SequenceFileListConnections_RemoveRequest) returns (SequenceFileListConnections_RemoveResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // SequenceFileListConnections_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileListConnectionsInstance - The id of the SequenceFileListConnections object.
  //
  // SequenceFileListConnections_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(SequenceFileListConnections_ClearRequest) returns (SequenceFileListConnections_ClearResponse);
  
  
  // Method: FromControl
  //
  // Returns the SequenceFileListConnection connected to the uiObj parameter.
  //
  // SequenceFileListConnections_FromControlRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileListConnectionsInstance - The id of the SequenceFileListConnections object.
  //    - uiObj: ObjectInstance - Specifies the connected user interface object.
  //
  // SequenceFileListConnections_FromControlResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFileListConnectionInstance - SequenceFileListConnection connected to the uiObj parameter. When no SequenceFileListConnection exists for this control, this method returns NULL. 
  //
  rpc FromControl(SequenceFileListConnections_FromControlRequest) returns (SequenceFileListConnections_FromControlResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // SequenceFileListConnections_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileListConnectionsInstance - The id of the SequenceFileListConnections object.
  //    - itemIndex: int32 - Specifies the index of the item to retrieve.
  //
  // SequenceFileListConnections_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFileListConnectionInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(SequenceFileListConnections_Get_ItemRequest) returns (SequenceFileListConnections_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // SequenceFileListConnections_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileListConnectionsInstance - The id of the SequenceFileListConnections object.
  //
  // SequenceFileListConnections_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(SequenceFileListConnections_Get_CountRequest) returns (SequenceFileListConnections_Get_CountResponse);
  
  
}
message SequenceFileListConnectionsInstance {
  // Specifies the handle of the SequenceFileListConnections instance in the server.
  string id = 1;
}
message SequenceFileListConnections_AddRequest {
  // The id of the SequenceFileListConnections object.
  SequenceFileListConnectionsInstance instance = 1;
  // Specifies the user interface object to connect.
  ObjectInstance uiObj = 2;
}

message SequenceFileListConnections_AddResponse {
  // New SequenceFileListConnection.
  SequenceFileListConnectionInstance returnValue = 1;
}

message SequenceFileListConnections_RemoveRequest {
  // The id of the SequenceFileListConnections object.
  SequenceFileListConnectionsInstance instance = 1;
  // Specifies the user interface object to disconnect.
  ObjectInstance uiObj = 2;
}

message SequenceFileListConnections_RemoveResponse {
  // Returns True when the SequenceFileListConnection is removed. Returns False when the SequenceFileListConnection is not found.
  bool returnValue = 1;
}

message SequenceFileListConnections_ClearRequest {
  // The id of the SequenceFileListConnections object.
  SequenceFileListConnectionsInstance instance = 1;
}

message SequenceFileListConnections_ClearResponse {
}

message SequenceFileListConnections_FromControlRequest {
  // The id of the SequenceFileListConnections object.
  SequenceFileListConnectionsInstance instance = 1;
  // Specifies the connected user interface object.
  ObjectInstance uiObj = 2;
}

message SequenceFileListConnections_FromControlResponse {
  // SequenceFileListConnection connected to the uiObj parameter. When no SequenceFileListConnection exists for this control, this method returns NULL.
  SequenceFileListConnectionInstance returnValue = 1;
}

message SequenceFileListConnections_Get_ItemRequest {
  // The id of the SequenceFileListConnections object.
  SequenceFileListConnectionsInstance instance = 1;
  // Specifies the index of the item to retrieve.
  int32 itemIndex = 2;
}

message SequenceFileListConnections_Get_ItemResponse {
  // Item located at the specified index.
  SequenceFileListConnectionInstance returnValue = 1;
}

message SequenceFileListConnections_Get_CountRequest {
  // The id of the SequenceFileListConnections object.
  SequenceFileListConnectionsInstance instance = 1;
}

message SequenceFileListConnections_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// SequenceListConnection
//
// Represents a connection from a SequenceFileView Manager control to a control that displays a list of sequences for the current sequence file. Use the connected control to select the sequence to display.
//
service SequenceListConnection {
  // Method: GetColumnVisible
  //
  // Returns a Boolean value that indicates whether the column is visible.
  //
  // SequenceListConnection_GetColumnVisibleRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceListConnectionInstance - The id of the SequenceListConnection object.
  //    - column: SeqListConnectionColumns - Specifies the column to select.
  //
  // SequenceListConnection_GetColumnVisibleResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc GetColumnVisible(SequenceListConnection_GetColumnVisibleRequest) returns (SequenceListConnection_GetColumnVisibleResponse);
  
  
  // Method: SetColumnVisible
  //
  // Specifies whether the column is visible.
  //
  // You cannot hide the SeqListConnectionColumn_Label column.
  //
  // SequenceListConnection_SetColumnVisibleRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceListConnectionInstance - The id of the SequenceListConnection object.
  //    - column: SeqListConnectionColumns - Specifies the column to select.
  //    - val: bool - Pass False to hide the column. Otherwise, the column is visible. 
  //
  // SequenceListConnection_SetColumnVisibleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetColumnVisible(SequenceListConnection_SetColumnVisibleRequest) returns (SequenceListConnection_SetColumnVisibleResponse);
  
  
  // Method: GetColumnIndex
  //
  // When the specified column is visible, this method returns the index of the column within the ListBoxColumns collection. Otherwise, this method returns -1.
  //
  // Use this index in the ListBoxColumns.Item property to return the ListBoxColumn for a specific column.
  //
  // SequenceListConnection_GetColumnIndexRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceListConnectionInstance - The id of the SequenceListConnection object.
  //    - column: SeqListConnectionColumns - Specifies the column to select.
  //
  // SequenceListConnection_GetColumnIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - The return type of the Int32 object.
  //
  rpc GetColumnIndex(SequenceListConnection_GetColumnIndexRequest) returns (SequenceListConnection_GetColumnIndexResponse);
  
  

  // Property: UIControl
  //
  // Returns the user interface control the connection connects to a SequenceFileView Manager control.
  //
  // SequenceListConnection_Get_UIControlRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceListConnectionInstance - The id of the SequenceListConnection object.
  //
  // SequenceListConnection_Get_UIControlResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - Returns the user interface control the connection connects to a SequenceFileView Manager control. 
  //
  rpc Get_UIControl(SequenceListConnection_Get_UIControlRequest) returns (SequenceListConnection_Get_UIControlResponse);
  
  
}
message SequenceListConnectionInstance {
  // Specifies the handle of the SequenceListConnection instance in the server.
  string id = 1;
}
message SequenceListConnection_GetColumnVisibleRequest {
  // The id of the SequenceListConnection object.
  SequenceListConnectionInstance instance = 1;
  // Specifies the column to select.
  SeqListConnectionColumns column = 2;
}

message SequenceListConnection_GetColumnVisibleResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message SequenceListConnection_SetColumnVisibleRequest {
  // The id of the SequenceListConnection object.
  SequenceListConnectionInstance instance = 1;
  // Specifies the column to select.
  SeqListConnectionColumns column = 2;
  // Pass False to hide the column. Otherwise, the column is visible.
  bool val = 3;
}

message SequenceListConnection_SetColumnVisibleResponse {
}

message SequenceListConnection_GetColumnIndexRequest {
  // The id of the SequenceListConnection object.
  SequenceListConnectionInstance instance = 1;
  // Specifies the column to select.
  SeqListConnectionColumns column = 2;
}

message SequenceListConnection_GetColumnIndexResponse {
  // The return type of the Int32 object.
  int32 returnValue = 1;
}

message SequenceListConnection_Get_UIControlRequest {
  // The id of the SequenceListConnection object.
  SequenceListConnectionInstance instance = 1;
}

message SequenceListConnection_Get_UIControlResponse {
  // Returns the user interface control the connection connects to a SequenceFileView Manager control.
  ObjectInstance returnValue = 1;
}

// SequenceListConnections
//
// A collection of SequenceListConnection objects.
//
service SequenceListConnections {
  // Method: Add
  //
  // Creates and adds a new SequenceListConnection to the collection.
  //
  // SequenceListConnections_AddRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceListConnectionsInstance - The id of the SequenceListConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to connect.
  //
  // SequenceListConnections_AddResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceListConnectionInstance - New SequenceListConnection. 
  //
  rpc Add(SequenceListConnections_AddRequest) returns (SequenceListConnections_AddResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // SequenceListConnections_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceListConnectionsInstance - The id of the SequenceListConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to disconnect.
  //
  // SequenceListConnections_RemoveResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when the SequenceListConnection is removed. Returns False when the SequenceListConnection is not found. 
  //
  rpc Remove(SequenceListConnections_RemoveRequest) returns (SequenceListConnections_RemoveResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // SequenceListConnections_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceListConnectionsInstance - The id of the SequenceListConnections object.
  //
  // SequenceListConnections_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(SequenceListConnections_ClearRequest) returns (SequenceListConnections_ClearResponse);
  
  
  // Method: FromControl
  //
  // Returns the SequenceListConnection connected to the uiObj parameter.
  //
  // SequenceListConnections_FromControlRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceListConnectionsInstance - The id of the SequenceListConnections object.
  //    - uiObj: ObjectInstance - Specifies the connected user interface object.
  //
  // SequenceListConnections_FromControlResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceListConnectionInstance - SequenceListConnection connected to the uiObj parameter. When no SequenceListConnection exists for this control, this method returns NULL. 
  //
  rpc FromControl(SequenceListConnections_FromControlRequest) returns (SequenceListConnections_FromControlResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // SequenceListConnections_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceListConnectionsInstance - The id of the SequenceListConnections object.
  //    - itemIndex: int32 - Specifies the index of the item to retrieve.
  //
  // SequenceListConnections_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceListConnectionInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(SequenceListConnections_Get_ItemRequest) returns (SequenceListConnections_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // SequenceListConnections_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceListConnectionsInstance - The id of the SequenceListConnections object.
  //
  // SequenceListConnections_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(SequenceListConnections_Get_CountRequest) returns (SequenceListConnections_Get_CountResponse);
  
  
}
message SequenceListConnectionsInstance {
  // Specifies the handle of the SequenceListConnections instance in the server.
  string id = 1;
}
message SequenceListConnections_AddRequest {
  // The id of the SequenceListConnections object.
  SequenceListConnectionsInstance instance = 1;
  // Specifies the user interface object to connect.
  ObjectInstance uiObj = 2;
}

message SequenceListConnections_AddResponse {
  // New SequenceListConnection.
  SequenceListConnectionInstance returnValue = 1;
}

message SequenceListConnections_RemoveRequest {
  // The id of the SequenceListConnections object.
  SequenceListConnectionsInstance instance = 1;
  // Specifies the user interface object to disconnect.
  ObjectInstance uiObj = 2;
}

message SequenceListConnections_RemoveResponse {
  // Returns True when the SequenceListConnection is removed. Returns False when the SequenceListConnection is not found.
  bool returnValue = 1;
}

message SequenceListConnections_ClearRequest {
  // The id of the SequenceListConnections object.
  SequenceListConnectionsInstance instance = 1;
}

message SequenceListConnections_ClearResponse {
}

message SequenceListConnections_FromControlRequest {
  // The id of the SequenceListConnections object.
  SequenceListConnectionsInstance instance = 1;
  // Specifies the connected user interface object.
  ObjectInstance uiObj = 2;
}

message SequenceListConnections_FromControlResponse {
  // SequenceListConnection connected to the uiObj parameter. When no SequenceListConnection exists for this control, this method returns NULL.
  SequenceListConnectionInstance returnValue = 1;
}

message SequenceListConnections_Get_ItemRequest {
  // The id of the SequenceListConnections object.
  SequenceListConnectionsInstance instance = 1;
  // Specifies the index of the item to retrieve.
  int32 itemIndex = 2;
}

message SequenceListConnections_Get_ItemResponse {
  // Item located at the specified index.
  SequenceListConnectionInstance returnValue = 1;
}

message SequenceListConnections_Get_CountRequest {
  // The id of the SequenceListConnections object.
  SequenceListConnectionsInstance instance = 1;
}

message SequenceListConnections_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// StepGroupListConnection
//
// Represents a connection from a SequenceFileView Manager control to a control that displays the list of step groups. Use the connected control to select the step group for the current sequence.
// Note: This class currently contains no properties or methods. Properties or methods might be added to this class in future versions of TestStand.
//
service StepGroupListConnection {
}
message StepGroupListConnectionInstance {
  // Specifies the handle of the StepGroupListConnection instance in the server.
  string id = 1;
}

// StepGroupListConnections
//
// A collection of StepGroupListConnection objects.
//
service StepGroupListConnections {
  // Method: Add
  //
  // Creates and adds a new StepGroupListConnection to the collection.
  //
  // StepGroupListConnections_AddRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepGroupListConnectionsInstance - The id of the StepGroupListConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to connect.
  //
  // StepGroupListConnections_AddResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepGroupListConnectionInstance - New StepGroupListConnection. 
  //
  rpc Add(StepGroupListConnections_AddRequest) returns (StepGroupListConnections_AddResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // StepGroupListConnections_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepGroupListConnectionsInstance - The id of the StepGroupListConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to disconnect.
  //
  // StepGroupListConnections_RemoveResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when the StepGroupListConnection is removed. Returns False when the StepGroupListConnection is not found. 
  //
  rpc Remove(StepGroupListConnections_RemoveRequest) returns (StepGroupListConnections_RemoveResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // StepGroupListConnections_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepGroupListConnectionsInstance - The id of the StepGroupListConnections object.
  //
  // StepGroupListConnections_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(StepGroupListConnections_ClearRequest) returns (StepGroupListConnections_ClearResponse);
  
  
  // Method: FromControl
  //
  // Returns the StepGroupListConnection connected to the uiObj parameter.
  //
  // StepGroupListConnections_FromControlRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepGroupListConnectionsInstance - The id of the StepGroupListConnections object.
  //    - uiObj: ObjectInstance - Specifies the connected user interface object.
  //
  // StepGroupListConnections_FromControlResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepGroupListConnectionInstance - StepGroupListConnection connected to the uiObj parameter. When no StepGroupListConnection exists for this control, this method returns NULL. 
  //
  rpc FromControl(StepGroupListConnections_FromControlRequest) returns (StepGroupListConnections_FromControlResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // StepGroupListConnections_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StepGroupListConnectionsInstance - The id of the StepGroupListConnections object.
  //    - itemIndex: int32 - Specifies the index of the item to retrieve.
  //
  // StepGroupListConnections_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepGroupListConnectionInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(StepGroupListConnections_Get_ItemRequest) returns (StepGroupListConnections_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // StepGroupListConnections_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StepGroupListConnectionsInstance - The id of the StepGroupListConnections object.
  //
  // StepGroupListConnections_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(StepGroupListConnections_Get_CountRequest) returns (StepGroupListConnections_Get_CountResponse);
  
  
}
message StepGroupListConnectionsInstance {
  // Specifies the handle of the StepGroupListConnections instance in the server.
  string id = 1;
}
message StepGroupListConnections_AddRequest {
  // The id of the StepGroupListConnections object.
  StepGroupListConnectionsInstance instance = 1;
  // Specifies the user interface object to connect.
  ObjectInstance uiObj = 2;
}

message StepGroupListConnections_AddResponse {
  // New StepGroupListConnection.
  StepGroupListConnectionInstance returnValue = 1;
}

message StepGroupListConnections_RemoveRequest {
  // The id of the StepGroupListConnections object.
  StepGroupListConnectionsInstance instance = 1;
  // Specifies the user interface object to disconnect.
  ObjectInstance uiObj = 2;
}

message StepGroupListConnections_RemoveResponse {
  // Returns True when the StepGroupListConnection is removed. Returns False when the StepGroupListConnection is not found.
  bool returnValue = 1;
}

message StepGroupListConnections_ClearRequest {
  // The id of the StepGroupListConnections object.
  StepGroupListConnectionsInstance instance = 1;
}

message StepGroupListConnections_ClearResponse {
}

message StepGroupListConnections_FromControlRequest {
  // The id of the StepGroupListConnections object.
  StepGroupListConnectionsInstance instance = 1;
  // Specifies the connected user interface object.
  ObjectInstance uiObj = 2;
}

message StepGroupListConnections_FromControlResponse {
  // StepGroupListConnection connected to the uiObj parameter. When no StepGroupListConnection exists for this control, this method returns NULL.
  StepGroupListConnectionInstance returnValue = 1;
}

message StepGroupListConnections_Get_ItemRequest {
  // The id of the StepGroupListConnections object.
  StepGroupListConnectionsInstance instance = 1;
  // Specifies the index of the item to retrieve.
  int32 itemIndex = 2;
}

message StepGroupListConnections_Get_ItemResponse {
  // Item located at the specified index.
  StepGroupListConnectionInstance returnValue = 1;
}

message StepGroupListConnections_Get_CountRequest {
  // The id of the StepGroupListConnections object.
  StepGroupListConnectionsInstance instance = 1;
}

message StepGroupListConnections_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// SequenceFileViewMgrConnections
//
// Contains the connections for the SequenceFileView Manager control.
//
service SequenceFileViewMgrConnections {
  // Property: SequenceFileList
  //
  // Collection of SequenceFileListConnection objects.
  //
  // SequenceFileViewMgrConnections_Get_SequenceFileListRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrConnectionsInstance - The id of the SequenceFileViewMgrConnections object.
  //
  // SequenceFileViewMgrConnections_Get_SequenceFileListResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFileListConnectionsInstance - Collection of SequenceFileListConnection objects. 
  //
  rpc Get_SequenceFileList(SequenceFileViewMgrConnections_Get_SequenceFileListRequest) returns (SequenceFileViewMgrConnections_Get_SequenceFileListResponse);
  
  
  // Property: SequenceList
  //
  // Collection of SequenceListConnection objects.
  //
  // SequenceFileViewMgrConnections_Get_SequenceListRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrConnectionsInstance - The id of the SequenceFileViewMgrConnections object.
  //
  // SequenceFileViewMgrConnections_Get_SequenceListResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceListConnectionsInstance - Collection of SequenceListConnection objects. 
  //
  rpc Get_SequenceList(SequenceFileViewMgrConnections_Get_SequenceListRequest) returns (SequenceFileViewMgrConnections_Get_SequenceListResponse);
  
  
  // Property: StepGroupList
  //
  // Collection of StepGroupListConnection objects.
  //
  // SequenceFileViewMgrConnections_Get_StepGroupListRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrConnectionsInstance - The id of the SequenceFileViewMgrConnections object.
  //
  // SequenceFileViewMgrConnections_Get_StepGroupListResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepGroupListConnectionsInstance - Collection of StepGroupListConnection objects. 
  //
  rpc Get_StepGroupList(SequenceFileViewMgrConnections_Get_StepGroupListRequest) returns (SequenceFileViewMgrConnections_Get_StepGroupListResponse);
  
  
  // Property: SequenceView
  //
  // Collection of SequenceViewConnection objects.
  //
  // SequenceFileViewMgrConnections_Get_SequenceViewRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrConnectionsInstance - The id of the SequenceFileViewMgrConnections object.
  //
  // SequenceFileViewMgrConnections_Get_SequenceViewResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceViewConnectionsInstance - Collection of SequenceViewConnection objects. 
  //
  rpc Get_SequenceView(SequenceFileViewMgrConnections_Get_SequenceViewRequest) returns (SequenceFileViewMgrConnections_Get_SequenceViewResponse);
  
  
  // Property: Command
  //
  // Collection of CommandConnection objects.
  //
  // SequenceFileViewMgrConnections_Get_CommandRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrConnectionsInstance - The id of the SequenceFileViewMgrConnections object.
  //
  // SequenceFileViewMgrConnections_Get_CommandResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommandConnectionsInstance - Collection of CommandConnection objects. 
  //
  rpc Get_Command(SequenceFileViewMgrConnections_Get_CommandRequest) returns (SequenceFileViewMgrConnections_Get_CommandResponse);
  
  
  // Property: Caption
  //
  // Collection of CaptionConnection objects.
  //
  // SequenceFileViewMgrConnections_Get_CaptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrConnectionsInstance - The id of the SequenceFileViewMgrConnections object.
  //
  // SequenceFileViewMgrConnections_Get_CaptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: CaptionConnectionsInstance - Collection of CaptionConnection objects. 
  //
  rpc Get_Caption(SequenceFileViewMgrConnections_Get_CaptionRequest) returns (SequenceFileViewMgrConnections_Get_CaptionResponse);
  
  
  // Property: Image
  //
  // Collection of ImageConnection objects.
  //
  // SequenceFileViewMgrConnections_Get_ImageRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrConnectionsInstance - The id of the SequenceFileViewMgrConnections object.
  //
  // SequenceFileViewMgrConnections_Get_ImageResponse - The response message from the server. It provides the return value.
  //    - returnValue: ImageConnectionsInstance - Collection of ImageConnection objects. 
  //
  rpc Get_Image(SequenceFileViewMgrConnections_Get_ImageRequest) returns (SequenceFileViewMgrConnections_Get_ImageResponse);
  
  
  // Property: Variables
  //
  // Collection of VariablesConnection objects.
  //
  // SequenceFileViewMgrConnections_Get_VariablesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrConnectionsInstance - The id of the SequenceFileViewMgrConnections object.
  //
  // SequenceFileViewMgrConnections_Get_VariablesResponse - The response message from the server. It provides the return value.
  //    - returnValue: VariablesConnectionsInstance - Collection of VariablesConnection objects. 
  //
  rpc Get_Variables(SequenceFileViewMgrConnections_Get_VariablesRequest) returns (SequenceFileViewMgrConnections_Get_VariablesResponse);
  
  
  // Property: InsertionPalettes
  //
  // Collection of InsertionPaletteConnection objects.
  //
  // SequenceFileViewMgrConnections_Get_InsertionPalettesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrConnectionsInstance - The id of the SequenceFileViewMgrConnections object.
  //
  // SequenceFileViewMgrConnections_Get_InsertionPalettesResponse - The response message from the server. It provides the return value.
  //    - returnValue: InsertionPaletteConnectionsInstance - Collection of InsertionPaletteConnection objects. 
  //
  rpc Get_InsertionPalettes(SequenceFileViewMgrConnections_Get_InsertionPalettesRequest) returns (SequenceFileViewMgrConnections_Get_InsertionPalettesResponse);
  
  
}
message SequenceFileViewMgrConnectionsInstance {
  // Specifies the handle of the SequenceFileViewMgrConnections instance in the server.
  string id = 1;
}

message VariablesConnectionsInstance {
  // Specifies the handle of the VariablesConnections instance in the server.
  string id = 1;
}

message InsertionPaletteConnectionsInstance {
  // Specifies the handle of the InsertionPaletteConnections instance in the server.
  string id = 1;
}
message SequenceFileViewMgrConnections_Get_SequenceFileListRequest {
  // The id of the SequenceFileViewMgrConnections object.
  SequenceFileViewMgrConnectionsInstance instance = 1;
}

message SequenceFileViewMgrConnections_Get_SequenceFileListResponse {
  // Collection of SequenceFileListConnection objects.
  SequenceFileListConnectionsInstance returnValue = 1;
}

message SequenceFileViewMgrConnections_Get_SequenceListRequest {
  // The id of the SequenceFileViewMgrConnections object.
  SequenceFileViewMgrConnectionsInstance instance = 1;
}

message SequenceFileViewMgrConnections_Get_SequenceListResponse {
  // Collection of SequenceListConnection objects.
  SequenceListConnectionsInstance returnValue = 1;
}

message SequenceFileViewMgrConnections_Get_StepGroupListRequest {
  // The id of the SequenceFileViewMgrConnections object.
  SequenceFileViewMgrConnectionsInstance instance = 1;
}

message SequenceFileViewMgrConnections_Get_StepGroupListResponse {
  // Collection of StepGroupListConnection objects.
  StepGroupListConnectionsInstance returnValue = 1;
}

message SequenceFileViewMgrConnections_Get_SequenceViewRequest {
  // The id of the SequenceFileViewMgrConnections object.
  SequenceFileViewMgrConnectionsInstance instance = 1;
}

message SequenceFileViewMgrConnections_Get_SequenceViewResponse {
  // Collection of SequenceViewConnection objects.
  SequenceViewConnectionsInstance returnValue = 1;
}

message SequenceFileViewMgrConnections_Get_CommandRequest {
  // The id of the SequenceFileViewMgrConnections object.
  SequenceFileViewMgrConnectionsInstance instance = 1;
}

message SequenceFileViewMgrConnections_Get_CommandResponse {
  // Collection of CommandConnection objects.
  CommandConnectionsInstance returnValue = 1;
}

message SequenceFileViewMgrConnections_Get_CaptionRequest {
  // The id of the SequenceFileViewMgrConnections object.
  SequenceFileViewMgrConnectionsInstance instance = 1;
}

message SequenceFileViewMgrConnections_Get_CaptionResponse {
  // Collection of CaptionConnection objects.
  CaptionConnectionsInstance returnValue = 1;
}

message SequenceFileViewMgrConnections_Get_ImageRequest {
  // The id of the SequenceFileViewMgrConnections object.
  SequenceFileViewMgrConnectionsInstance instance = 1;
}

message SequenceFileViewMgrConnections_Get_ImageResponse {
  // Collection of ImageConnection objects.
  ImageConnectionsInstance returnValue = 1;
}

message SequenceFileViewMgrConnections_Get_VariablesRequest {
  // The id of the SequenceFileViewMgrConnections object.
  SequenceFileViewMgrConnectionsInstance instance = 1;
}

message SequenceFileViewMgrConnections_Get_VariablesResponse {
  // Collection of VariablesConnection objects.
  VariablesConnectionsInstance returnValue = 1;
}

message SequenceFileViewMgrConnections_Get_InsertionPalettesRequest {
  // The id of the SequenceFileViewMgrConnections object.
  SequenceFileViewMgrConnectionsInstance instance = 1;
}

message SequenceFileViewMgrConnections_Get_InsertionPalettesResponse {
  // Collection of InsertionPaletteConnection objects.
  InsertionPaletteConnectionsInstance returnValue = 1;
}

// VariablesConnections
//
// A collection of VariablesConnection objects.
//
service VariablesConnections {
  // Method: Add
  //
  // Creates and adds a new VariablesConnection to the collection.
  //
  // VariablesConnections_AddRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: VariablesConnectionsInstance - The id of the VariablesConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to connect.
  //
  // VariablesConnections_AddResponse - The response message from the server. It provides the return value.
  //    - returnValue: VariablesConnectionInstance - New VariablesConnection object. 
  //
  rpc Add(VariablesConnections_AddRequest) returns (VariablesConnections_AddResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // VariablesConnections_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: VariablesConnectionsInstance - The id of the VariablesConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to disconnect.
  //
  // VariablesConnections_RemoveResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when the VariablesConnection is removed. Returns False when the VariablesConnection is not found. 
  //
  rpc Remove(VariablesConnections_RemoveRequest) returns (VariablesConnections_RemoveResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // VariablesConnections_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: VariablesConnectionsInstance - The id of the VariablesConnections object.
  //
  // VariablesConnections_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(VariablesConnections_ClearRequest) returns (VariablesConnections_ClearResponse);
  
  
  // Method: FromControl
  //
  // Returns the VariablesConnection connected to the uiObj parameter.
  //
  // VariablesConnections_FromControlRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: VariablesConnectionsInstance - The id of the VariablesConnections object.
  //    - uiObj: ObjectInstance - Specifies the connected user interface object.
  //
  // VariablesConnections_FromControlResponse - The response message from the server. It provides the return value.
  //    - returnValue: VariablesConnectionInstance - VariablesConnection connected to the uiObj parameter. When no VariablesConnection exists for this control, this method returns NULL. 
  //
  rpc FromControl(VariablesConnections_FromControlRequest) returns (VariablesConnections_FromControlResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // VariablesConnections_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: VariablesConnectionsInstance - The id of the VariablesConnections object.
  //    - itemIndex: int32 - Specifies a zero-based index of the item to retrieve.
  //
  // VariablesConnections_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: VariablesConnectionInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(VariablesConnections_Get_ItemRequest) returns (VariablesConnections_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // VariablesConnections_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: VariablesConnectionsInstance - The id of the VariablesConnections object.
  //
  // VariablesConnections_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(VariablesConnections_Get_CountRequest) returns (VariablesConnections_Get_CountResponse);
  
  
}
message VariablesConnectionInstance {
  // Specifies the handle of the VariablesConnection instance in the server.
  string id = 1;
}
message VariablesConnections_AddRequest {
  // The id of the VariablesConnections object.
  VariablesConnectionsInstance instance = 1;
  // Specifies the user interface object to connect.
  ObjectInstance uiObj = 2;
}

message VariablesConnections_AddResponse {
  // New VariablesConnection object.
  VariablesConnectionInstance returnValue = 1;
}

message VariablesConnections_RemoveRequest {
  // The id of the VariablesConnections object.
  VariablesConnectionsInstance instance = 1;
  // Specifies the user interface object to disconnect.
  ObjectInstance uiObj = 2;
}

message VariablesConnections_RemoveResponse {
  // Returns True when the VariablesConnection is removed. Returns False when the VariablesConnection is not found.
  bool returnValue = 1;
}

message VariablesConnections_ClearRequest {
  // The id of the VariablesConnections object.
  VariablesConnectionsInstance instance = 1;
}

message VariablesConnections_ClearResponse {
}

message VariablesConnections_FromControlRequest {
  // The id of the VariablesConnections object.
  VariablesConnectionsInstance instance = 1;
  // Specifies the connected user interface object.
  ObjectInstance uiObj = 2;
}

message VariablesConnections_FromControlResponse {
  // VariablesConnection connected to the uiObj parameter. When no VariablesConnection exists for this control, this method returns NULL.
  VariablesConnectionInstance returnValue = 1;
}

message VariablesConnections_Get_ItemRequest {
  // The id of the VariablesConnections object.
  VariablesConnectionsInstance instance = 1;
  // Specifies a zero-based index of the item to retrieve.
  int32 itemIndex = 2;
}

message VariablesConnections_Get_ItemResponse {
  // Item located at the specified index.
  VariablesConnectionInstance returnValue = 1;
}

message VariablesConnections_Get_CountRequest {
  // The id of the VariablesConnections object.
  VariablesConnectionsInstance instance = 1;
}

message VariablesConnections_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// VariablesConnection
//
// Represents a connection from a SequenceFileView Manager or ExecutionView Manager control to a VariablesView control.
//
service VariablesConnection {
  // Property: UIControl
  //
  // Returns the user interface control that the connection connects to a SequenceFileView Manager or ExecutionView Manager control.
  //
  // VariablesConnection_Get_UIControlRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: VariablesConnectionInstance - The id of the VariablesConnection object.
  //
  // VariablesConnection_Get_UIControlResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - Returns the user interface control that the connection connects to a SequenceFileView Manager or ExecutionView Manager control. 
  //
  rpc Get_UIControl(VariablesConnection_Get_UIControlRequest) returns (VariablesConnection_Get_UIControlResponse);
  
  
}
message VariablesConnection_Get_UIControlRequest {
  // The id of the VariablesConnection object.
  VariablesConnectionInstance instance = 1;
}

message VariablesConnection_Get_UIControlResponse {
  // Returns the user interface control that the connection connects to a SequenceFileView Manager or ExecutionView Manager control.
  ObjectInstance returnValue = 1;
}

// InsertionPaletteConnections
//
// A collection of InsertionPaletteConnection objects.
//
service InsertionPaletteConnections {
  // Method: Add
  //
  // Creates and adds a new InsertionPaletteConnection to the collection.
  //
  // InsertionPaletteConnections_AddRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: InsertionPaletteConnectionsInstance - The id of the InsertionPaletteConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to connect.
  //
  // InsertionPaletteConnections_AddResponse - The response message from the server. It provides the return value.
  //    - returnValue: InsertionPaletteConnectionInstance - New InsertionPaletteConnection object. 
  //
  rpc Add(InsertionPaletteConnections_AddRequest) returns (InsertionPaletteConnections_AddResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // InsertionPaletteConnections_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: InsertionPaletteConnectionsInstance - The id of the InsertionPaletteConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to disconnect.
  //
  // InsertionPaletteConnections_RemoveResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when the InsertionPaletteConnection is removed. Returns False when the InsertionPaletteConnection is not found. 
  //
  rpc Remove(InsertionPaletteConnections_RemoveRequest) returns (InsertionPaletteConnections_RemoveResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // InsertionPaletteConnections_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InsertionPaletteConnectionsInstance - The id of the InsertionPaletteConnections object.
  //
  // InsertionPaletteConnections_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(InsertionPaletteConnections_ClearRequest) returns (InsertionPaletteConnections_ClearResponse);
  
  
  // Method: FromControl
  //
  // Returns the InsertionPaletteConnection connected to the uiObj parameter.
  //
  // InsertionPaletteConnections_FromControlRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: InsertionPaletteConnectionsInstance - The id of the InsertionPaletteConnections object.
  //    - uiObj: ObjectInstance - Specifies the connected user interface object.
  //
  // InsertionPaletteConnections_FromControlResponse - The response message from the server. It provides the return value.
  //    - returnValue: InsertionPaletteConnectionInstance - InsertionPaletteConnection connected to this user interface object. When no InsertionPaletteConnection exists for this control, this method returns NULL. 
  //
  rpc FromControl(InsertionPaletteConnections_FromControlRequest) returns (InsertionPaletteConnections_FromControlResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // InsertionPaletteConnections_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: InsertionPaletteConnectionsInstance - The id of the InsertionPaletteConnections object.
  //    - itemIndex: int32 - Specifies the zero-based index of the item to retrieve.
  //
  // InsertionPaletteConnections_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: InsertionPaletteConnectionInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(InsertionPaletteConnections_Get_ItemRequest) returns (InsertionPaletteConnections_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // InsertionPaletteConnections_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InsertionPaletteConnectionsInstance - The id of the InsertionPaletteConnections object.
  //
  // InsertionPaletteConnections_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(InsertionPaletteConnections_Get_CountRequest) returns (InsertionPaletteConnections_Get_CountResponse);
  
  
}
message InsertionPaletteConnectionInstance {
  // Specifies the handle of the InsertionPaletteConnection instance in the server.
  string id = 1;
}
message InsertionPaletteConnections_AddRequest {
  // The id of the InsertionPaletteConnections object.
  InsertionPaletteConnectionsInstance instance = 1;
  // Specifies the user interface object to connect.
  ObjectInstance uiObj = 2;
}

message InsertionPaletteConnections_AddResponse {
  // New InsertionPaletteConnection object.
  InsertionPaletteConnectionInstance returnValue = 1;
}

message InsertionPaletteConnections_RemoveRequest {
  // The id of the InsertionPaletteConnections object.
  InsertionPaletteConnectionsInstance instance = 1;
  // Specifies the user interface object to disconnect.
  ObjectInstance uiObj = 2;
}

message InsertionPaletteConnections_RemoveResponse {
  // Returns True when the InsertionPaletteConnection is removed. Returns False when the InsertionPaletteConnection is not found.
  bool returnValue = 1;
}

message InsertionPaletteConnections_ClearRequest {
  // The id of the InsertionPaletteConnections object.
  InsertionPaletteConnectionsInstance instance = 1;
}

message InsertionPaletteConnections_ClearResponse {
}

message InsertionPaletteConnections_FromControlRequest {
  // The id of the InsertionPaletteConnections object.
  InsertionPaletteConnectionsInstance instance = 1;
  // Specifies the connected user interface object.
  ObjectInstance uiObj = 2;
}

message InsertionPaletteConnections_FromControlResponse {
  // InsertionPaletteConnection connected to this user interface object. When no InsertionPaletteConnection exists for this control, this method returns NULL.
  InsertionPaletteConnectionInstance returnValue = 1;
}

message InsertionPaletteConnections_Get_ItemRequest {
  // The id of the InsertionPaletteConnections object.
  InsertionPaletteConnectionsInstance instance = 1;
  // Specifies the zero-based index of the item to retrieve.
  int32 itemIndex = 2;
}

message InsertionPaletteConnections_Get_ItemResponse {
  // Item located at the specified index.
  InsertionPaletteConnectionInstance returnValue = 1;
}

message InsertionPaletteConnections_Get_CountRequest {
  // The id of the InsertionPaletteConnections object.
  InsertionPaletteConnectionsInstance instance = 1;
}

message InsertionPaletteConnections_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// InsertionPaletteConnection
//
// Represents a connection from a SequenceFileView Manager control to an InsertionPalette control. The InsertionPalette control displays a list of step types and a list of user defined template steps, sequences, and variables. Use the connected control to insert a step, sequence, or variable into a sequence file.
//
service InsertionPaletteConnection {
  // Property: UIControl
  //
  // Returns the user interface control the connection connects to a SequenceFileView Manager control.
  //
  // InsertionPaletteConnection_Get_UIControlRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InsertionPaletteConnectionInstance - The id of the InsertionPaletteConnection object.
  //
  // InsertionPaletteConnection_Get_UIControlResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - Returns the user interface control the connection connects to a SequenceFileView Manager control. 
  //
  rpc Get_UIControl(InsertionPaletteConnection_Get_UIControlRequest) returns (InsertionPaletteConnection_Get_UIControlResponse);
  
  
  // Property: StepTypesPage
  //
  // Specifies the index of the Step Types page in the InsertionPalettePages collection.
  //
  // InsertionPaletteConnection_Get_StepTypesPageRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InsertionPaletteConnectionInstance - The id of the InsertionPaletteConnection object.
  //
  // InsertionPaletteConnection_Get_StepTypesPageResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the index of the Step Types page in the InsertionPalettePages collection. 
  //
  rpc Get_StepTypesPage(InsertionPaletteConnection_Get_StepTypesPageRequest) returns (InsertionPaletteConnection_Get_StepTypesPageResponse);
  
  
  // Property: TemplatesPage
  //
  // Specifies the index of the Templates page in the InsertionPalettePages collection.
  //
  // InsertionPaletteConnection_Get_TemplatesPageRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InsertionPaletteConnectionInstance - The id of the InsertionPaletteConnection object.
  //
  // InsertionPaletteConnection_Get_TemplatesPageResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the index of the Templates page in the InsertionPalettePages collection. 
  //
  rpc Get_TemplatesPage(InsertionPaletteConnection_Get_TemplatesPageRequest) returns (InsertionPaletteConnection_Get_TemplatesPageResponse);
  
  
}
message InsertionPaletteConnection_Get_UIControlRequest {
  // The id of the InsertionPaletteConnection object.
  InsertionPaletteConnectionInstance instance = 1;
}

message InsertionPaletteConnection_Get_UIControlResponse {
  // Returns the user interface control the connection connects to a SequenceFileView Manager control.
  ObjectInstance returnValue = 1;
}

message InsertionPaletteConnection_Get_StepTypesPageRequest {
  // The id of the InsertionPaletteConnection object.
  InsertionPaletteConnectionInstance instance = 1;
}

message InsertionPaletteConnection_Get_StepTypesPageResponse {
  // Specifies the index of the Step Types page in the InsertionPalettePages collection.
  int32 returnValue = 1;
}

message InsertionPaletteConnection_Get_TemplatesPageRequest {
  // The id of the InsertionPaletteConnection object.
  InsertionPaletteConnectionInstance instance = 1;
}

message InsertionPaletteConnection_Get_TemplatesPageResponse {
  // Specifies the index of the Templates page in the InsertionPalettePages collection.
  int32 returnValue = 1;
}

// ExecutionViewConnection
//
// Represents a connection from an ExecutionView Manager control to an ExecutionViewMgrConnections.ExecutionView property. When tracing is enabled, the connected control shows the steps of the execution as they are executing. Use the ExecutionViewMgr.Connections property to obtain a collection of ExecutionViewConnection objects.
//
service ExecutionViewConnection {
  // Property: ColorRunning
  //
  // Specifies the background color of the control when the execution in the ExecutionView Manager control is running. This setting is ignored when the value of the ExecutionViewConnection.Options property is ExecutionViewConnection_IgnoreColors.
  //
  // ExecutionViewConnection_Set_ColorRunningRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewConnectionInstance - The id of the ExecutionViewConnection object.
  //    - val: uint32 - Specifies the background color of the control when the execution in the ExecutionView Manager control is running. This setting is ignored when the value of the ExecutionViewConnection.Options property is ExecutionViewConnection_IgnoreColors. 
  //
  // ExecutionViewConnection_Set_ColorRunningResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExecutionViewConnection_Get_ColorRunningRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewConnectionInstance - The id of the ExecutionViewConnection object.
  //
  // ExecutionViewConnection_Get_ColorRunningResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Specifies the background color of the control when the execution in the ExecutionView Manager control is running. This setting is ignored when the value of the ExecutionViewConnection.Options property is ExecutionViewConnection_IgnoreColors. 
  //
  rpc Set_ColorRunning(ExecutionViewConnection_Set_ColorRunningRequest) returns (ExecutionViewConnection_Set_ColorRunningResponse);
  rpc Get_ColorRunning(ExecutionViewConnection_Get_ColorRunningRequest) returns (ExecutionViewConnection_Get_ColorRunningResponse);
  
  
  // Property: ColorPaused
  //
  // Specifies the background color of the control when the execution in the ExecutionView Manager control is paused. This setting is ignored when the value of the ExecutionViewConnection.Options property is ExecutionViewConnection_IgnoreColors.
  //
  // ExecutionViewConnection_Set_ColorPausedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewConnectionInstance - The id of the ExecutionViewConnection object.
  //    - val: uint32 - Specifies the background color of the control when the execution in the ExecutionView Manager control is paused. This setting is ignored when the value of the ExecutionViewConnection.Options property is ExecutionViewConnection_IgnoreColors. 
  //
  // ExecutionViewConnection_Set_ColorPausedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExecutionViewConnection_Get_ColorPausedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewConnectionInstance - The id of the ExecutionViewConnection object.
  //
  // ExecutionViewConnection_Get_ColorPausedResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Specifies the background color of the control when the execution in the ExecutionView Manager control is paused. This setting is ignored when the value of the ExecutionViewConnection.Options property is ExecutionViewConnection_IgnoreColors. 
  //
  rpc Set_ColorPaused(ExecutionViewConnection_Set_ColorPausedRequest) returns (ExecutionViewConnection_Set_ColorPausedResponse);
  rpc Get_ColorPaused(ExecutionViewConnection_Get_ColorPausedRequest) returns (ExecutionViewConnection_Get_ColorPausedResponse);
  
  
  // Property: ColorStopped
  //
  // Specifies the background color of the control when the execution in the ExecutionView Manager control is stopped. This setting is ignored when the value of the ExecutionViewConnection.Options property is ExecutionViewConnection_IgnoreColors.
  //
  // ExecutionViewConnection_Set_ColorStoppedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewConnectionInstance - The id of the ExecutionViewConnection object.
  //    - val: uint32 - Specifies the background color of the control when the execution in the ExecutionView Manager control is stopped. This setting is ignored when the value of the ExecutionViewConnection.Options property is ExecutionViewConnection_IgnoreColors. 
  //
  // ExecutionViewConnection_Set_ColorStoppedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExecutionViewConnection_Get_ColorStoppedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewConnectionInstance - The id of the ExecutionViewConnection object.
  //
  // ExecutionViewConnection_Get_ColorStoppedResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Specifies the background color of the control when the execution in the ExecutionView Manager control is stopped. This setting is ignored when the value of the ExecutionViewConnection.Options property is ExecutionViewConnection_IgnoreColors. 
  //
  rpc Set_ColorStopped(ExecutionViewConnection_Set_ColorStoppedRequest) returns (ExecutionViewConnection_Set_ColorStoppedResponse);
  rpc Get_ColorStopped(ExecutionViewConnection_Get_ColorStoppedRequest) returns (ExecutionViewConnection_Get_ColorStoppedResponse);
  
  
  // Property: Options
  //
  // Specifies the behavior of the ExecutionViewConnection. The value of this property is a bitwise-OR combination of the ExecutionViewOptions constants.
  //
  // ExecutionViewConnection_Set_OptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewConnectionInstance - The id of the ExecutionViewConnection object.
  //    - val: int32 - Specifies the behavior of the ExecutionViewConnection. The value of this property is a bitwise-OR combination of the ExecutionViewOptions constants. 
  //
  // ExecutionViewConnection_Set_OptionsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExecutionViewConnection_Get_OptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewConnectionInstance - The id of the ExecutionViewConnection object.
  //
  // ExecutionViewConnection_Get_OptionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the behavior of the ExecutionViewConnection. The value of this property is a bitwise-OR combination of the ExecutionViewOptions constants. 
  //
  rpc Set_Options(ExecutionViewConnection_Set_OptionsRequest) returns (ExecutionViewConnection_Set_OptionsResponse);
  rpc Get_Options(ExecutionViewConnection_Get_OptionsRequest) returns (ExecutionViewConnection_Get_OptionsResponse);
  
  
  // Property: UIControl
  //
  // Returns the user interface control the connection connects to an ExecutionView Manager control.
  //
  // ExecutionViewConnection_Get_UIControlRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewConnectionInstance - The id of the ExecutionViewConnection object.
  //
  // ExecutionViewConnection_Get_UIControlResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - Returns the user interface control the connection connects to an ExecutionView Manager control. 
  //
  rpc Get_UIControl(ExecutionViewConnection_Get_UIControlRequest) returns (ExecutionViewConnection_Get_UIControlResponse);
  
  
}
message ExecutionViewConnectionInstance {
  // Specifies the handle of the ExecutionViewConnection instance in the server.
  string id = 1;
}
message ExecutionViewConnection_Set_ColorRunningRequest {
  // The id of the ExecutionViewConnection object.
  ExecutionViewConnectionInstance instance = 1;
  // Specifies the background color of the control when the execution in the ExecutionView Manager control is running. This setting is ignored when the value of the ExecutionViewConnection.Options property is ExecutionViewConnection_IgnoreColors.
  uint32 val = 2;
}

message ExecutionViewConnection_Set_ColorRunningResponse {
}

message ExecutionViewConnection_Get_ColorRunningRequest {
  // The id of the ExecutionViewConnection object.
  ExecutionViewConnectionInstance instance = 1;
}

message ExecutionViewConnection_Get_ColorRunningResponse {
  // Specifies the background color of the control when the execution in the ExecutionView Manager control is running. This setting is ignored when the value of the ExecutionViewConnection.Options property is ExecutionViewConnection_IgnoreColors.
  uint32 returnValue = 1;
}

message ExecutionViewConnection_Set_ColorPausedRequest {
  // The id of the ExecutionViewConnection object.
  ExecutionViewConnectionInstance instance = 1;
  // Specifies the background color of the control when the execution in the ExecutionView Manager control is paused. This setting is ignored when the value of the ExecutionViewConnection.Options property is ExecutionViewConnection_IgnoreColors.
  uint32 val = 2;
}

message ExecutionViewConnection_Set_ColorPausedResponse {
}

message ExecutionViewConnection_Get_ColorPausedRequest {
  // The id of the ExecutionViewConnection object.
  ExecutionViewConnectionInstance instance = 1;
}

message ExecutionViewConnection_Get_ColorPausedResponse {
  // Specifies the background color of the control when the execution in the ExecutionView Manager control is paused. This setting is ignored when the value of the ExecutionViewConnection.Options property is ExecutionViewConnection_IgnoreColors.
  uint32 returnValue = 1;
}

message ExecutionViewConnection_Set_ColorStoppedRequest {
  // The id of the ExecutionViewConnection object.
  ExecutionViewConnectionInstance instance = 1;
  // Specifies the background color of the control when the execution in the ExecutionView Manager control is stopped. This setting is ignored when the value of the ExecutionViewConnection.Options property is ExecutionViewConnection_IgnoreColors.
  uint32 val = 2;
}

message ExecutionViewConnection_Set_ColorStoppedResponse {
}

message ExecutionViewConnection_Get_ColorStoppedRequest {
  // The id of the ExecutionViewConnection object.
  ExecutionViewConnectionInstance instance = 1;
}

message ExecutionViewConnection_Get_ColorStoppedResponse {
  // Specifies the background color of the control when the execution in the ExecutionView Manager control is stopped. This setting is ignored when the value of the ExecutionViewConnection.Options property is ExecutionViewConnection_IgnoreColors.
  uint32 returnValue = 1;
}

message ExecutionViewConnection_Set_OptionsRequest {
  // The id of the ExecutionViewConnection object.
  ExecutionViewConnectionInstance instance = 1;
  // Specifies the behavior of the ExecutionViewConnection. The value of this property is a bitwise-OR combination of the ExecutionViewOptions constants.
  int32 val = 2;
}

message ExecutionViewConnection_Set_OptionsResponse {
}

message ExecutionViewConnection_Get_OptionsRequest {
  // The id of the ExecutionViewConnection object.
  ExecutionViewConnectionInstance instance = 1;
}

message ExecutionViewConnection_Get_OptionsResponse {
  // Specifies the behavior of the ExecutionViewConnection. The value of this property is a bitwise-OR combination of the ExecutionViewOptions constants.
  int32 returnValue = 1;
}

message ExecutionViewConnection_Get_UIControlRequest {
  // The id of the ExecutionViewConnection object.
  ExecutionViewConnectionInstance instance = 1;
}

message ExecutionViewConnection_Get_UIControlResponse {
  // Returns the user interface control the connection connects to an ExecutionView Manager control.
  ObjectInstance returnValue = 1;
}

// ExecutionViewConnections
//
// A collection of ExecutionViewConnection objects you obtain by calling the ExecutionViewMgr.Connections property.
//
service ExecutionViewConnections {
  // Method: Add
  //
  // Creates and adds a new ExecutionViewConnection to the collection.
  //
  // ExecutionViewConnections_AddRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionViewConnectionsInstance - The id of the ExecutionViewConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to connect.
  //
  // ExecutionViewConnections_AddResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionViewConnectionInstance - New ExecutionViewConnection. 
  //
  rpc Add(ExecutionViewConnections_AddRequest) returns (ExecutionViewConnections_AddResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // ExecutionViewConnections_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionViewConnectionsInstance - The id of the ExecutionViewConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to disconnect.
  //
  // ExecutionViewConnections_RemoveResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when the ExecutionViewConnection is removed. Returns False when the ExecutionViewConnection is not found. 
  //
  rpc Remove(ExecutionViewConnections_RemoveRequest) returns (ExecutionViewConnections_RemoveResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // ExecutionViewConnections_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewConnectionsInstance - The id of the ExecutionViewConnections object.
  //
  // ExecutionViewConnections_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(ExecutionViewConnections_ClearRequest) returns (ExecutionViewConnections_ClearResponse);
  
  
  // Method: FromControl
  //
  // Returns the ExecutionViewConnection that is connected to the uiObj parameter.
  //
  // ExecutionViewConnections_FromControlRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionViewConnectionsInstance - The id of the ExecutionViewConnections object.
  //    - uiObj: ObjectInstance - Specifies the connected user interface object.
  //
  // ExecutionViewConnections_FromControlResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionViewConnectionInstance - ExecutionViewConnection connected to the uiObj parameter. When no ExecutionViewConnection exists for this control, this method returns NULL. 
  //
  rpc FromControl(ExecutionViewConnections_FromControlRequest) returns (ExecutionViewConnections_FromControlResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // ExecutionViewConnections_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionViewConnectionsInstance - The id of the ExecutionViewConnections object.
  //    - itemIndex: int32 - Specifies the index of the item to retrieve.
  //
  // ExecutionViewConnections_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionViewConnectionInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(ExecutionViewConnections_Get_ItemRequest) returns (ExecutionViewConnections_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // ExecutionViewConnections_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewConnectionsInstance - The id of the ExecutionViewConnections object.
  //
  // ExecutionViewConnections_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(ExecutionViewConnections_Get_CountRequest) returns (ExecutionViewConnections_Get_CountResponse);
  
  
}
message ExecutionViewConnectionsInstance {
  // Specifies the handle of the ExecutionViewConnections instance in the server.
  string id = 1;
}
message ExecutionViewConnections_AddRequest {
  // The id of the ExecutionViewConnections object.
  ExecutionViewConnectionsInstance instance = 1;
  // Specifies the user interface object to connect.
  ObjectInstance uiObj = 2;
}

message ExecutionViewConnections_AddResponse {
  // New ExecutionViewConnection.
  ExecutionViewConnectionInstance returnValue = 1;
}

message ExecutionViewConnections_RemoveRequest {
  // The id of the ExecutionViewConnections object.
  ExecutionViewConnectionsInstance instance = 1;
  // Specifies the user interface object to disconnect.
  ObjectInstance uiObj = 2;
}

message ExecutionViewConnections_RemoveResponse {
  // Returns True when the ExecutionViewConnection is removed. Returns False when the ExecutionViewConnection is not found.
  bool returnValue = 1;
}

message ExecutionViewConnections_ClearRequest {
  // The id of the ExecutionViewConnections object.
  ExecutionViewConnectionsInstance instance = 1;
}

message ExecutionViewConnections_ClearResponse {
}

message ExecutionViewConnections_FromControlRequest {
  // The id of the ExecutionViewConnections object.
  ExecutionViewConnectionsInstance instance = 1;
  // Specifies the connected user interface object.
  ObjectInstance uiObj = 2;
}

message ExecutionViewConnections_FromControlResponse {
  // ExecutionViewConnection connected to the uiObj parameter. When no ExecutionViewConnection exists for this control, this method returns NULL.
  ExecutionViewConnectionInstance returnValue = 1;
}

message ExecutionViewConnections_Get_ItemRequest {
  // The id of the ExecutionViewConnections object.
  ExecutionViewConnectionsInstance instance = 1;
  // Specifies the index of the item to retrieve.
  int32 itemIndex = 2;
}

message ExecutionViewConnections_Get_ItemResponse {
  // Item located at the specified index.
  ExecutionViewConnectionInstance returnValue = 1;
}

message ExecutionViewConnections_Get_CountRequest {
  // The id of the ExecutionViewConnections object.
  ExecutionViewConnectionsInstance instance = 1;
}

message ExecutionViewConnections_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// CallStackConnection
//
// Represents a connection from the ExecutionView Manager control to a control that displays the callstack. You can use the connected control to change the selected sequence context when the execution is paused.
// Note: This class currently contains no properties or methods. Properties or methods might be added to this class in future versions of TestStand.
//
service CallStackConnection {
}
message CallStackConnectionInstance {
  // Specifies the handle of the CallStackConnection instance in the server.
  string id = 1;
}

// CallStackConnections
//
// A collection of CallStackConnection objects.
//
service CallStackConnections {
  // Method: Add
  //
  // Creates and adds a new CallStackConnection to the collection.
  //
  // CallStackConnections_AddRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CallStackConnectionsInstance - The id of the CallStackConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to connect.
  //
  // CallStackConnections_AddResponse - The response message from the server. It provides the return value.
  //    - returnValue: CallStackConnectionInstance - New CallStackConnection. 
  //
  rpc Add(CallStackConnections_AddRequest) returns (CallStackConnections_AddResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // CallStackConnections_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CallStackConnectionsInstance - The id of the CallStackConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to disconnect.
  //
  // CallStackConnections_RemoveResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when the CallStackConnection is removed. Returns False when the CallStackConnection is not found. 
  //
  rpc Remove(CallStackConnections_RemoveRequest) returns (CallStackConnections_RemoveResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // CallStackConnections_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CallStackConnectionsInstance - The id of the CallStackConnections object.
  //
  // CallStackConnections_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(CallStackConnections_ClearRequest) returns (CallStackConnections_ClearResponse);
  
  
  // Method: FromControl
  //
  // Returns the CallStackConnection connected to the UI object.
  //
  // CallStackConnections_FromControlRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CallStackConnectionsInstance - The id of the CallStackConnections object.
  //    - uiObj: ObjectInstance - Specifies the connected user interface object.
  //
  // CallStackConnections_FromControlResponse - The response message from the server. It provides the return value.
  //    - returnValue: CallStackConnectionInstance - CallStackConnection connected to this user interface object. When no CallStackConnection exists for this control, this method returns NULL. 
  //
  rpc FromControl(CallStackConnections_FromControlRequest) returns (CallStackConnections_FromControlResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // CallStackConnections_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CallStackConnectionsInstance - The id of the CallStackConnections object.
  //    - itemIndex: int32 - Specifies the index of the item to retrieve.
  //
  // CallStackConnections_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: CallStackConnectionInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(CallStackConnections_Get_ItemRequest) returns (CallStackConnections_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // CallStackConnections_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CallStackConnectionsInstance - The id of the CallStackConnections object.
  //
  // CallStackConnections_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(CallStackConnections_Get_CountRequest) returns (CallStackConnections_Get_CountResponse);
  
  
}
message CallStackConnectionsInstance {
  // Specifies the handle of the CallStackConnections instance in the server.
  string id = 1;
}
message CallStackConnections_AddRequest {
  // The id of the CallStackConnections object.
  CallStackConnectionsInstance instance = 1;
  // Specifies the user interface object to connect.
  ObjectInstance uiObj = 2;
}

message CallStackConnections_AddResponse {
  // New CallStackConnection.
  CallStackConnectionInstance returnValue = 1;
}

message CallStackConnections_RemoveRequest {
  // The id of the CallStackConnections object.
  CallStackConnectionsInstance instance = 1;
  // Specifies the user interface object to disconnect.
  ObjectInstance uiObj = 2;
}

message CallStackConnections_RemoveResponse {
  // Returns True when the CallStackConnection is removed. Returns False when the CallStackConnection is not found.
  bool returnValue = 1;
}

message CallStackConnections_ClearRequest {
  // The id of the CallStackConnections object.
  CallStackConnectionsInstance instance = 1;
}

message CallStackConnections_ClearResponse {
}

message CallStackConnections_FromControlRequest {
  // The id of the CallStackConnections object.
  CallStackConnectionsInstance instance = 1;
  // Specifies the connected user interface object.
  ObjectInstance uiObj = 2;
}

message CallStackConnections_FromControlResponse {
  // CallStackConnection connected to this user interface object. When no CallStackConnection exists for this control, this method returns NULL.
  CallStackConnectionInstance returnValue = 1;
}

message CallStackConnections_Get_ItemRequest {
  // The id of the CallStackConnections object.
  CallStackConnectionsInstance instance = 1;
  // Specifies the index of the item to retrieve.
  int32 itemIndex = 2;
}

message CallStackConnections_Get_ItemResponse {
  // Item located at the specified index.
  CallStackConnectionInstance returnValue = 1;
}

message CallStackConnections_Get_CountRequest {
  // The id of the CallStackConnections object.
  CallStackConnectionsInstance instance = 1;
}

message CallStackConnections_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// ThreadListConnection
//
// Represents a connection from the ExecutionView Manager control to a control that displays the list of threads in the execution. You can use the connected control to display the foreground thread and to change the foreground thread when the execution is paused.
// Note: This class currently contains no properties or methods. Properties or methods might be added to this class in future versions of TestStand.
//
service ThreadListConnection {
}
message ThreadListConnectionInstance {
  // Specifies the handle of the ThreadListConnection instance in the server.
  string id = 1;
}

// ThreadListConnections
//
// A collection of ThreadListConnection objects.
//
service ThreadListConnections {
  // Method: Add
  //
  // Creates and adds a new ThreadListConnection to the collection.
  //
  // ThreadListConnections_AddRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ThreadListConnectionsInstance - The id of the ThreadListConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to connect.
  //
  // ThreadListConnections_AddResponse - The response message from the server. It provides the return value.
  //    - returnValue: ThreadListConnectionInstance - New ThreadListConnection. 
  //
  rpc Add(ThreadListConnections_AddRequest) returns (ThreadListConnections_AddResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // ThreadListConnections_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ThreadListConnectionsInstance - The id of the ThreadListConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to disconnect.
  //
  // ThreadListConnections_RemoveResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when the ThreadListConnection is removed. Returns False when the ThreadListConnection is not found. 
  //
  rpc Remove(ThreadListConnections_RemoveRequest) returns (ThreadListConnections_RemoveResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // ThreadListConnections_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ThreadListConnectionsInstance - The id of the ThreadListConnections object.
  //
  // ThreadListConnections_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(ThreadListConnections_ClearRequest) returns (ThreadListConnections_ClearResponse);
  
  
  // Method: FromControl
  //
  // Returns the ThreadListConnection connected to the uiObj parameter.
  //
  // ThreadListConnections_FromControlRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ThreadListConnectionsInstance - The id of the ThreadListConnections object.
  //    - uiObj: ObjectInstance - Specifies the connected user interface object.
  //
  // ThreadListConnections_FromControlResponse - The response message from the server. It provides the return value.
  //    - returnValue: ThreadListConnectionInstance - ThreadListConnection connected to the uiObj parameter. When no ThreadListConnection exists for this control, this method returns NULL. 
  //
  rpc FromControl(ThreadListConnections_FromControlRequest) returns (ThreadListConnections_FromControlResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // ThreadListConnections_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ThreadListConnectionsInstance - The id of the ThreadListConnections object.
  //    - itemIndex: int32 - Specifies the index of the item to retrieve.
  //
  // ThreadListConnections_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: ThreadListConnectionInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(ThreadListConnections_Get_ItemRequest) returns (ThreadListConnections_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // ThreadListConnections_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ThreadListConnectionsInstance - The id of the ThreadListConnections object.
  //
  // ThreadListConnections_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(ThreadListConnections_Get_CountRequest) returns (ThreadListConnections_Get_CountResponse);
  
  
}
message ThreadListConnectionsInstance {
  // Specifies the handle of the ThreadListConnections instance in the server.
  string id = 1;
}
message ThreadListConnections_AddRequest {
  // The id of the ThreadListConnections object.
  ThreadListConnectionsInstance instance = 1;
  // Specifies the user interface object to connect.
  ObjectInstance uiObj = 2;
}

message ThreadListConnections_AddResponse {
  // New ThreadListConnection.
  ThreadListConnectionInstance returnValue = 1;
}

message ThreadListConnections_RemoveRequest {
  // The id of the ThreadListConnections object.
  ThreadListConnectionsInstance instance = 1;
  // Specifies the user interface object to disconnect.
  ObjectInstance uiObj = 2;
}

message ThreadListConnections_RemoveResponse {
  // Returns True when the ThreadListConnection is removed. Returns False when the ThreadListConnection is not found.
  bool returnValue = 1;
}

message ThreadListConnections_ClearRequest {
  // The id of the ThreadListConnections object.
  ThreadListConnectionsInstance instance = 1;
}

message ThreadListConnections_ClearResponse {
}

message ThreadListConnections_FromControlRequest {
  // The id of the ThreadListConnections object.
  ThreadListConnectionsInstance instance = 1;
  // Specifies the connected user interface object.
  ObjectInstance uiObj = 2;
}

message ThreadListConnections_FromControlResponse {
  // ThreadListConnection connected to the uiObj parameter. When no ThreadListConnection exists for this control, this method returns NULL.
  ThreadListConnectionInstance returnValue = 1;
}

message ThreadListConnections_Get_ItemRequest {
  // The id of the ThreadListConnections object.
  ThreadListConnectionsInstance instance = 1;
  // Specifies the index of the item to retrieve.
  int32 itemIndex = 2;
}

message ThreadListConnections_Get_ItemResponse {
  // Item located at the specified index.
  ThreadListConnectionInstance returnValue = 1;
}

message ThreadListConnections_Get_CountRequest {
  // The id of the ThreadListConnections object.
  ThreadListConnectionsInstance instance = 1;
}

message ThreadListConnections_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// ExecutionListConnection
//
// Represents a connection from the ExecutionView Manager control to a control that displays the list of currently running executions. You can use the connected control to select an execution from the list of executions.
//
service ExecutionListConnection {
  // Property: ShowHiddenExecutions
  //
  // When this property is True, the execution list shows executions created with the ExecTypeMask_InitiallyHidden flag.
  //
  // ExecutionListConnection_Set_ShowHiddenExecutionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionListConnectionInstance - The id of the ExecutionListConnection object.
  //    - val: bool - When this property is True, the execution list shows executions created with the ExecTypeMask_InitiallyHidden flag. 
  //
  // ExecutionListConnection_Set_ShowHiddenExecutionsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExecutionListConnection_Get_ShowHiddenExecutionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionListConnectionInstance - The id of the ExecutionListConnection object.
  //
  // ExecutionListConnection_Get_ShowHiddenExecutionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When this property is True, the execution list shows executions created with the ExecTypeMask_InitiallyHidden flag. 
  //
  rpc Set_ShowHiddenExecutions(ExecutionListConnection_Set_ShowHiddenExecutionsRequest) returns (ExecutionListConnection_Set_ShowHiddenExecutionsResponse);
  rpc Get_ShowHiddenExecutions(ExecutionListConnection_Get_ShowHiddenExecutionsRequest) returns (ExecutionListConnection_Get_ShowHiddenExecutionsResponse);
  
  
  // Property: DisplayExpression
  //
  // Specifies how to display executions in the execution list using a format expression. By default, the value of this property is "%CurrentExecution%". Refer to the CaptionSource_MacroExpression enumeration value for more information about types of caption sources.
  //
  // ExecutionListConnection_Set_DisplayExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionListConnectionInstance - The id of the ExecutionListConnection object.
  //    - val: string - Specifies how to display executions in the execution list using a format expression. By default, the value of this property is "%CurrentExecution%". Refer to the CaptionSource_MacroExpression enumeration value for more information about types of caption sources. 
  //
  // ExecutionListConnection_Set_DisplayExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExecutionListConnection_Get_DisplayExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionListConnectionInstance - The id of the ExecutionListConnection object.
  //
  // ExecutionListConnection_Get_DisplayExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies how to display executions in the execution list using a format expression. By default, the value of this property is "%CurrentExecution%". Refer to the CaptionSource_MacroExpression enumeration value for more information about types of caption sources. 
  //
  rpc Set_DisplayExpression(ExecutionListConnection_Set_DisplayExpressionRequest) returns (ExecutionListConnection_Set_DisplayExpressionResponse);
  rpc Get_DisplayExpression(ExecutionListConnection_Get_DisplayExpressionRequest) returns (ExecutionListConnection_Get_DisplayExpressionResponse);
  
  
}
message ExecutionListConnectionInstance {
  // Specifies the handle of the ExecutionListConnection instance in the server.
  string id = 1;
}
message ExecutionListConnection_Set_ShowHiddenExecutionsRequest {
  // The id of the ExecutionListConnection object.
  ExecutionListConnectionInstance instance = 1;
  // When this property is True, the execution list shows executions created with the ExecTypeMask_InitiallyHidden flag.
  bool val = 2;
}

message ExecutionListConnection_Set_ShowHiddenExecutionsResponse {
}

message ExecutionListConnection_Get_ShowHiddenExecutionsRequest {
  // The id of the ExecutionListConnection object.
  ExecutionListConnectionInstance instance = 1;
}

message ExecutionListConnection_Get_ShowHiddenExecutionsResponse {
  // When this property is True, the execution list shows executions created with the ExecTypeMask_InitiallyHidden flag.
  bool returnValue = 1;
}

message ExecutionListConnection_Set_DisplayExpressionRequest {
  // The id of the ExecutionListConnection object.
  ExecutionListConnectionInstance instance = 1;
  // Specifies how to display executions in the execution list using a format expression. By default, the value of this property is "%CurrentExecution%". Refer to the CaptionSource_MacroExpression enumeration value for more information about types of caption sources.
  string val = 2;
}

message ExecutionListConnection_Set_DisplayExpressionResponse {
}

message ExecutionListConnection_Get_DisplayExpressionRequest {
  // The id of the ExecutionListConnection object.
  ExecutionListConnectionInstance instance = 1;
}

message ExecutionListConnection_Get_DisplayExpressionResponse {
  // Specifies how to display executions in the execution list using a format expression. By default, the value of this property is "%CurrentExecution%". Refer to the CaptionSource_MacroExpression enumeration value for more information about types of caption sources.
  string returnValue = 1;
}

// ExecutionListConnections
//
// A collection of ExecutionListConnection objects.
//
service ExecutionListConnections {
  // Method: Add
  //
  // Creates and adds a new ExecutionListConnection to the collection.
  //
  // ExecutionListConnections_AddRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionListConnectionsInstance - The id of the ExecutionListConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to connect.
  //
  // ExecutionListConnections_AddResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionListConnectionInstance - New ExecutionListConnection. 
  //
  rpc Add(ExecutionListConnections_AddRequest) returns (ExecutionListConnections_AddResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // ExecutionListConnections_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionListConnectionsInstance - The id of the ExecutionListConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to disconnect.
  //
  // ExecutionListConnections_RemoveResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when the ExecutionListConnection is removed. Returns False when the ExecutionListConnection is not found. 
  //
  rpc Remove(ExecutionListConnections_RemoveRequest) returns (ExecutionListConnections_RemoveResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // ExecutionListConnections_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionListConnectionsInstance - The id of the ExecutionListConnections object.
  //
  // ExecutionListConnections_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(ExecutionListConnections_ClearRequest) returns (ExecutionListConnections_ClearResponse);
  
  
  // Method: FromControl
  //
  // Returns the ExecutionListConnection connected to the uiObj parameter.
  //
  // ExecutionListConnections_FromControlRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionListConnectionsInstance - The id of the ExecutionListConnections object.
  //    - uiObj: ObjectInstance - Specifies the connected user interface object.
  //
  // ExecutionListConnections_FromControlResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionListConnectionInstance - ExecutionListConnection connected to the uiObj parameter. When no ExecutionListConnection exists for this control, this method returns NULL. 
  //
  rpc FromControl(ExecutionListConnections_FromControlRequest) returns (ExecutionListConnections_FromControlResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // ExecutionListConnections_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionListConnectionsInstance - The id of the ExecutionListConnections object.
  //    - itemIndex: int32 - Specifies the index of the item to retrieve.
  //
  // ExecutionListConnections_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionListConnectionInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(ExecutionListConnections_Get_ItemRequest) returns (ExecutionListConnections_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // ExecutionListConnections_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionListConnectionsInstance - The id of the ExecutionListConnections object.
  //
  // ExecutionListConnections_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(ExecutionListConnections_Get_CountRequest) returns (ExecutionListConnections_Get_CountResponse);
  
  
}
message ExecutionListConnectionsInstance {
  // Specifies the handle of the ExecutionListConnections instance in the server.
  string id = 1;
}
message ExecutionListConnections_AddRequest {
  // The id of the ExecutionListConnections object.
  ExecutionListConnectionsInstance instance = 1;
  // Specifies the user interface object to connect.
  ObjectInstance uiObj = 2;
}

message ExecutionListConnections_AddResponse {
  // New ExecutionListConnection.
  ExecutionListConnectionInstance returnValue = 1;
}

message ExecutionListConnections_RemoveRequest {
  // The id of the ExecutionListConnections object.
  ExecutionListConnectionsInstance instance = 1;
  // Specifies the user interface object to disconnect.
  ObjectInstance uiObj = 2;
}

message ExecutionListConnections_RemoveResponse {
  // Returns True when the ExecutionListConnection is removed. Returns False when the ExecutionListConnection is not found.
  bool returnValue = 1;
}

message ExecutionListConnections_ClearRequest {
  // The id of the ExecutionListConnections object.
  ExecutionListConnectionsInstance instance = 1;
}

message ExecutionListConnections_ClearResponse {
}

message ExecutionListConnections_FromControlRequest {
  // The id of the ExecutionListConnections object.
  ExecutionListConnectionsInstance instance = 1;
  // Specifies the connected user interface object.
  ObjectInstance uiObj = 2;
}

message ExecutionListConnections_FromControlResponse {
  // ExecutionListConnection connected to the uiObj parameter. When no ExecutionListConnection exists for this control, this method returns NULL.
  ExecutionListConnectionInstance returnValue = 1;
}

message ExecutionListConnections_Get_ItemRequest {
  // The id of the ExecutionListConnections object.
  ExecutionListConnectionsInstance instance = 1;
  // Specifies the index of the item to retrieve.
  int32 itemIndex = 2;
}

message ExecutionListConnections_Get_ItemResponse {
  // Item located at the specified index.
  ExecutionListConnectionInstance returnValue = 1;
}

message ExecutionListConnections_Get_CountRequest {
  // The id of the ExecutionListConnections object.
  ExecutionListConnectionsInstance instance = 1;
}

message ExecutionListConnections_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// ReportViewConnection
//
// Represents a connection from the ExecutionView Manager control to a control that displays a report associated with an execution.
// Note: This class currently contains no properties or methods. Properties or methods might be added to this class in future versions of TestStand.
//
service ReportViewConnection {
}
message ReportViewConnectionInstance {
  // Specifies the handle of the ReportViewConnection instance in the server.
  string id = 1;
}

// ReportViewConnections
//
// A collection of ReportViewConnection objects.
//
service ReportViewConnections {
  // Method: Add
  //
  // Creates and adds a new ReportViewConnection to the collection.
  //
  // ReportViewConnections_AddRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ReportViewConnectionsInstance - The id of the ReportViewConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to connect.
  //
  // ReportViewConnections_AddResponse - The response message from the server. It provides the return value.
  //    - returnValue: ReportViewConnectionInstance - New ReportViewConnection. 
  //
  rpc Add(ReportViewConnections_AddRequest) returns (ReportViewConnections_AddResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // ReportViewConnections_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ReportViewConnectionsInstance - The id of the ReportViewConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to disconnect.
  //
  // ReportViewConnections_RemoveResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when the ReportViewConnection is removed. Returns False when the ReportViewConnection is not found. 
  //
  rpc Remove(ReportViewConnections_RemoveRequest) returns (ReportViewConnections_RemoveResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // ReportViewConnections_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportViewConnectionsInstance - The id of the ReportViewConnections object.
  //
  // ReportViewConnections_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(ReportViewConnections_ClearRequest) returns (ReportViewConnections_ClearResponse);
  
  
  // Method: FromControl
  //
  // Returns the ReportViewConnection connected to the uiObj parameter.
  //
  // ReportViewConnections_FromControlRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ReportViewConnectionsInstance - The id of the ReportViewConnections object.
  //    - uiObj: ObjectInstance - Specifies the connected user interface object.
  //
  // ReportViewConnections_FromControlResponse - The response message from the server. It provides the return value.
  //    - returnValue: ReportViewConnectionInstance - ReportViewConnection connected to the uiObj parameter. When no ReportViewConnection exists for this control, this method returns NULL. 
  //
  rpc FromControl(ReportViewConnections_FromControlRequest) returns (ReportViewConnections_FromControlResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // ReportViewConnections_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ReportViewConnectionsInstance - The id of the ReportViewConnections object.
  //    - itemIndex: int32 - Specifies the index of the item to retrieve.
  //
  // ReportViewConnections_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: ReportViewConnectionInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(ReportViewConnections_Get_ItemRequest) returns (ReportViewConnections_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // ReportViewConnections_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportViewConnectionsInstance - The id of the ReportViewConnections object.
  //
  // ReportViewConnections_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(ReportViewConnections_Get_CountRequest) returns (ReportViewConnections_Get_CountResponse);
  
  
}
message ReportViewConnectionsInstance {
  // Specifies the handle of the ReportViewConnections instance in the server.
  string id = 1;
}
message ReportViewConnections_AddRequest {
  // The id of the ReportViewConnections object.
  ReportViewConnectionsInstance instance = 1;
  // Specifies the user interface object to connect.
  ObjectInstance uiObj = 2;
}

message ReportViewConnections_AddResponse {
  // New ReportViewConnection.
  ReportViewConnectionInstance returnValue = 1;
}

message ReportViewConnections_RemoveRequest {
  // The id of the ReportViewConnections object.
  ReportViewConnectionsInstance instance = 1;
  // Specifies the user interface object to disconnect.
  ObjectInstance uiObj = 2;
}

message ReportViewConnections_RemoveResponse {
  // Returns True when the ReportViewConnection is removed. Returns False when the ReportViewConnection is not found.
  bool returnValue = 1;
}

message ReportViewConnections_ClearRequest {
  // The id of the ReportViewConnections object.
  ReportViewConnectionsInstance instance = 1;
}

message ReportViewConnections_ClearResponse {
}

message ReportViewConnections_FromControlRequest {
  // The id of the ReportViewConnections object.
  ReportViewConnectionsInstance instance = 1;
  // Specifies the connected user interface object.
  ObjectInstance uiObj = 2;
}

message ReportViewConnections_FromControlResponse {
  // ReportViewConnection connected to the uiObj parameter. When no ReportViewConnection exists for this control, this method returns NULL.
  ReportViewConnectionInstance returnValue = 1;
}

message ReportViewConnections_Get_ItemRequest {
  // The id of the ReportViewConnections object.
  ReportViewConnectionsInstance instance = 1;
  // Specifies the index of the item to retrieve.
  int32 itemIndex = 2;
}

message ReportViewConnections_Get_ItemResponse {
  // Item located at the specified index.
  ReportViewConnectionInstance returnValue = 1;
}

message ReportViewConnections_Get_CountRequest {
  // The id of the ReportViewConnections object.
  ReportViewConnectionsInstance instance = 1;
}

message ReportViewConnections_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// ExecutionViewMgrConnections
//
// Contains the connections for an ExecutionView Manager control.
//
service ExecutionViewMgrConnections {
  // Property: ExecutionView
  //
  // Collection of ExecutionViewConnection objects.
  //
  // ExecutionViewMgrConnections_Get_ExecutionViewRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrConnectionsInstance - The id of the ExecutionViewMgrConnections object.
  //
  // ExecutionViewMgrConnections_Get_ExecutionViewResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionViewConnectionsInstance - Collection of ExecutionViewConnection objects. 
  //
  rpc Get_ExecutionView(ExecutionViewMgrConnections_Get_ExecutionViewRequest) returns (ExecutionViewMgrConnections_Get_ExecutionViewResponse);
  
  
  // Property: ReportView
  //
  // Collection of ReportViewConnection objects.
  //
  // ExecutionViewMgrConnections_Get_ReportViewRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrConnectionsInstance - The id of the ExecutionViewMgrConnections object.
  //
  // ExecutionViewMgrConnections_Get_ReportViewResponse - The response message from the server. It provides the return value.
  //    - returnValue: ReportViewConnectionsInstance - Collection of ReportViewConnection objects. 
  //
  rpc Get_ReportView(ExecutionViewMgrConnections_Get_ReportViewRequest) returns (ExecutionViewMgrConnections_Get_ReportViewResponse);
  
  
  // Property: ExecutionList
  //
  // Collection of ExecutionListConnection objects.
  //
  // ExecutionViewMgrConnections_Get_ExecutionListRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrConnectionsInstance - The id of the ExecutionViewMgrConnections object.
  //
  // ExecutionViewMgrConnections_Get_ExecutionListResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionListConnectionsInstance - Collection of ExecutionListConnection objects. 
  //
  rpc Get_ExecutionList(ExecutionViewMgrConnections_Get_ExecutionListRequest) returns (ExecutionViewMgrConnections_Get_ExecutionListResponse);
  
  
  // Property: Command
  //
  // Collection of CommandConnection objects.
  //
  // ExecutionViewMgrConnections_Get_CommandRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrConnectionsInstance - The id of the ExecutionViewMgrConnections object.
  //
  // ExecutionViewMgrConnections_Get_CommandResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommandConnectionsInstance - Collection of CommandConnection objects. 
  //
  rpc Get_Command(ExecutionViewMgrConnections_Get_CommandRequest) returns (ExecutionViewMgrConnections_Get_CommandResponse);
  
  
  // Property: Caption
  //
  // Collection of CaptionConnection objects.
  //
  // ExecutionViewMgrConnections_Get_CaptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrConnectionsInstance - The id of the ExecutionViewMgrConnections object.
  //
  // ExecutionViewMgrConnections_Get_CaptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: CaptionConnectionsInstance - Collection of CaptionConnection objects. 
  //
  rpc Get_Caption(ExecutionViewMgrConnections_Get_CaptionRequest) returns (ExecutionViewMgrConnections_Get_CaptionResponse);
  
  
  // Property: CallStack
  //
  // Collection of CallStackConnection objects.
  //
  // ExecutionViewMgrConnections_Get_CallStackRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrConnectionsInstance - The id of the ExecutionViewMgrConnections object.
  //
  // ExecutionViewMgrConnections_Get_CallStackResponse - The response message from the server. It provides the return value.
  //    - returnValue: CallStackConnectionsInstance - Collection of CallStackConnection objects. 
  //
  rpc Get_CallStack(ExecutionViewMgrConnections_Get_CallStackRequest) returns (ExecutionViewMgrConnections_Get_CallStackResponse);
  
  
  // Property: ThreadList
  //
  // Collection of ThreadListConnection objects.
  //
  // ExecutionViewMgrConnections_Get_ThreadListRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrConnectionsInstance - The id of the ExecutionViewMgrConnections object.
  //
  // ExecutionViewMgrConnections_Get_ThreadListResponse - The response message from the server. It provides the return value.
  //    - returnValue: ThreadListConnectionsInstance - Collection of ThreadListConnection objects. 
  //
  rpc Get_ThreadList(ExecutionViewMgrConnections_Get_ThreadListRequest) returns (ExecutionViewMgrConnections_Get_ThreadListResponse);
  
  
  // Property: Image
  //
  // Collection of ImageConnection objects.
  //
  // ExecutionViewMgrConnections_Get_ImageRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrConnectionsInstance - The id of the ExecutionViewMgrConnections object.
  //
  // ExecutionViewMgrConnections_Get_ImageResponse - The response message from the server. It provides the return value.
  //    - returnValue: ImageConnectionsInstance - Collection of ImageConnection objects. 
  //
  rpc Get_Image(ExecutionViewMgrConnections_Get_ImageRequest) returns (ExecutionViewMgrConnections_Get_ImageResponse);
  
  
  // Property: Numeric
  //
  // Collection of NumericConnection objects.
  //
  // ExecutionViewMgrConnections_Get_NumericRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrConnectionsInstance - The id of the ExecutionViewMgrConnections object.
  //
  // ExecutionViewMgrConnections_Get_NumericResponse - The response message from the server. It provides the return value.
  //    - returnValue: NumericConnectionsInstance - Collection of NumericConnection objects. 
  //
  rpc Get_Numeric(ExecutionViewMgrConnections_Get_NumericRequest) returns (ExecutionViewMgrConnections_Get_NumericResponse);
  
  
  // Property: Variables
  //
  // Collection of VariablesConnection objects.
  //
  // ExecutionViewMgrConnections_Get_VariablesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrConnectionsInstance - The id of the ExecutionViewMgrConnections object.
  //
  // ExecutionViewMgrConnections_Get_VariablesResponse - The response message from the server. It provides the return value.
  //    - returnValue: VariablesConnectionsInstance - Collection of VariablesConnection objects. 
  //
  rpc Get_Variables(ExecutionViewMgrConnections_Get_VariablesRequest) returns (ExecutionViewMgrConnections_Get_VariablesResponse);
  
  
}
message ExecutionViewMgrConnectionsInstance {
  // Specifies the handle of the ExecutionViewMgrConnections instance in the server.
  string id = 1;
}
message ExecutionViewMgrConnections_Get_ExecutionViewRequest {
  // The id of the ExecutionViewMgrConnections object.
  ExecutionViewMgrConnectionsInstance instance = 1;
}

message ExecutionViewMgrConnections_Get_ExecutionViewResponse {
  // Collection of ExecutionViewConnection objects.
  ExecutionViewConnectionsInstance returnValue = 1;
}

message ExecutionViewMgrConnections_Get_ReportViewRequest {
  // The id of the ExecutionViewMgrConnections object.
  ExecutionViewMgrConnectionsInstance instance = 1;
}

message ExecutionViewMgrConnections_Get_ReportViewResponse {
  // Collection of ReportViewConnection objects.
  ReportViewConnectionsInstance returnValue = 1;
}

message ExecutionViewMgrConnections_Get_ExecutionListRequest {
  // The id of the ExecutionViewMgrConnections object.
  ExecutionViewMgrConnectionsInstance instance = 1;
}

message ExecutionViewMgrConnections_Get_ExecutionListResponse {
  // Collection of ExecutionListConnection objects.
  ExecutionListConnectionsInstance returnValue = 1;
}

message ExecutionViewMgrConnections_Get_CommandRequest {
  // The id of the ExecutionViewMgrConnections object.
  ExecutionViewMgrConnectionsInstance instance = 1;
}

message ExecutionViewMgrConnections_Get_CommandResponse {
  // Collection of CommandConnection objects.
  CommandConnectionsInstance returnValue = 1;
}

message ExecutionViewMgrConnections_Get_CaptionRequest {
  // The id of the ExecutionViewMgrConnections object.
  ExecutionViewMgrConnectionsInstance instance = 1;
}

message ExecutionViewMgrConnections_Get_CaptionResponse {
  // Collection of CaptionConnection objects.
  CaptionConnectionsInstance returnValue = 1;
}

message ExecutionViewMgrConnections_Get_CallStackRequest {
  // The id of the ExecutionViewMgrConnections object.
  ExecutionViewMgrConnectionsInstance instance = 1;
}

message ExecutionViewMgrConnections_Get_CallStackResponse {
  // Collection of CallStackConnection objects.
  CallStackConnectionsInstance returnValue = 1;
}

message ExecutionViewMgrConnections_Get_ThreadListRequest {
  // The id of the ExecutionViewMgrConnections object.
  ExecutionViewMgrConnectionsInstance instance = 1;
}

message ExecutionViewMgrConnections_Get_ThreadListResponse {
  // Collection of ThreadListConnection objects.
  ThreadListConnectionsInstance returnValue = 1;
}

message ExecutionViewMgrConnections_Get_ImageRequest {
  // The id of the ExecutionViewMgrConnections object.
  ExecutionViewMgrConnectionsInstance instance = 1;
}

message ExecutionViewMgrConnections_Get_ImageResponse {
  // Collection of ImageConnection objects.
  ImageConnectionsInstance returnValue = 1;
}

message ExecutionViewMgrConnections_Get_NumericRequest {
  // The id of the ExecutionViewMgrConnections object.
  ExecutionViewMgrConnectionsInstance instance = 1;
}

message ExecutionViewMgrConnections_Get_NumericResponse {
  // Collection of NumericConnection objects.
  NumericConnectionsInstance returnValue = 1;
}

message ExecutionViewMgrConnections_Get_VariablesRequest {
  // The id of the ExecutionViewMgrConnections object.
  ExecutionViewMgrConnectionsInstance instance = 1;
}

message ExecutionViewMgrConnections_Get_VariablesResponse {
  // Collection of VariablesConnection objects.
  VariablesConnectionsInstance returnValue = 1;
}

// ApplicationMgrConnections
//
// Contains the connections for an Application Manager control. Use the ApplicationMgr.Connections property to obtain a collection of ApplicationMgrConnections objects.
//
service ApplicationMgrConnections {
  // Property: Command
  //
  // Collection of CommandConnection objects.
  //
  // ApplicationMgrConnections_Get_CommandRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrConnectionsInstance - The id of the ApplicationMgrConnections object.
  //
  // ApplicationMgrConnections_Get_CommandResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommandConnectionsInstance - Collection of CommandConnection objects. 
  //
  rpc Get_Command(ApplicationMgrConnections_Get_CommandRequest) returns (ApplicationMgrConnections_Get_CommandResponse);
  
  
  // Property: Caption
  //
  // Collection of CaptionConnection objects.
  //
  // ApplicationMgrConnections_Get_CaptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrConnectionsInstance - The id of the ApplicationMgrConnections object.
  //
  // ApplicationMgrConnections_Get_CaptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: CaptionConnectionsInstance - Collection of CaptionConnection objects. 
  //
  rpc Get_Caption(ApplicationMgrConnections_Get_CaptionRequest) returns (ApplicationMgrConnections_Get_CaptionResponse);
  
  
  // Property: AdapterList
  //
  // Collection of AdapterListConnection objects.
  //
  // ApplicationMgrConnections_Get_AdapterListRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrConnectionsInstance - The id of the ApplicationMgrConnections object.
  //
  // ApplicationMgrConnections_Get_AdapterListResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdapterListConnectionsInstance - Collection of AdapterListConnection objects. 
  //
  rpc Get_AdapterList(ApplicationMgrConnections_Get_AdapterListRequest) returns (ApplicationMgrConnections_Get_AdapterListResponse);
  
  
}
message ApplicationMgrConnectionsInstance {
  // Specifies the handle of the ApplicationMgrConnections instance in the server.
  string id = 1;
}

message AdapterListConnectionsInstance {
  // Specifies the handle of the AdapterListConnections instance in the server.
  string id = 1;
}
message ApplicationMgrConnections_Get_CommandRequest {
  // The id of the ApplicationMgrConnections object.
  ApplicationMgrConnectionsInstance instance = 1;
}

message ApplicationMgrConnections_Get_CommandResponse {
  // Collection of CommandConnection objects.
  CommandConnectionsInstance returnValue = 1;
}

message ApplicationMgrConnections_Get_CaptionRequest {
  // The id of the ApplicationMgrConnections object.
  ApplicationMgrConnectionsInstance instance = 1;
}

message ApplicationMgrConnections_Get_CaptionResponse {
  // Collection of CaptionConnection objects.
  CaptionConnectionsInstance returnValue = 1;
}

message ApplicationMgrConnections_Get_AdapterListRequest {
  // The id of the ApplicationMgrConnections object.
  ApplicationMgrConnectionsInstance instance = 1;
}

message ApplicationMgrConnections_Get_AdapterListResponse {
  // Collection of AdapterListConnection objects.
  AdapterListConnectionsInstance returnValue = 1;
}

// AdapterListConnections
//
// A collection of AdapterListConnection objects.
//
service AdapterListConnections {
  // Method: Add
  //
  // Creates and adds a new AdapterListConnection to the collection.
  //
  // AdapterListConnections_AddRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: AdapterListConnectionsInstance - The id of the AdapterListConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to connect.
  //
  // AdapterListConnections_AddResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdapterListConnectionInstance - The AdapterListConnection this method creates. 
  //
  rpc Add(AdapterListConnections_AddRequest) returns (AdapterListConnections_AddResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // AdapterListConnections_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: AdapterListConnectionsInstance - The id of the AdapterListConnections object.
  //    - uiObj: ObjectInstance - Specifies the user interface object to disconnect.
  //
  // AdapterListConnections_RemoveResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when the AdapterListConnection is removed. Returns False when the AdapterListConnection is not found. 
  //
  rpc Remove(AdapterListConnections_RemoveRequest) returns (AdapterListConnections_RemoveResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // AdapterListConnections_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdapterListConnectionsInstance - The id of the AdapterListConnections object.
  //
  // AdapterListConnections_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(AdapterListConnections_ClearRequest) returns (AdapterListConnections_ClearResponse);
  
  
  // Method: FromControl
  //
  // Returns the AdapterListConnection connected to the uiObj parameter. When no AdapterListConnection is connected to the user interface object the parameter specifies, this method returns NULL.
  //
  // AdapterListConnections_FromControlRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: AdapterListConnectionsInstance - The id of the AdapterListConnections object.
  //    - uiObj: ObjectInstance - Specifies a connected user interface object.
  //
  // AdapterListConnections_FromControlResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdapterListConnectionInstance - The return type of the AdapterListConnection object.
  //
  rpc FromControl(AdapterListConnections_FromControlRequest) returns (AdapterListConnections_FromControlResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // AdapterListConnections_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: AdapterListConnectionsInstance - The id of the AdapterListConnections object.
  //    - itemIndex: int32 - Specifies the zero-based index of the item to retrieve.
  //
  // AdapterListConnections_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdapterListConnectionInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(AdapterListConnections_Get_ItemRequest) returns (AdapterListConnections_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // AdapterListConnections_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: AdapterListConnectionsInstance - The id of the AdapterListConnections object.
  //
  // AdapterListConnections_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(AdapterListConnections_Get_CountRequest) returns (AdapterListConnections_Get_CountResponse);
  
  
}
message AdapterListConnectionInstance {
  // Specifies the handle of the AdapterListConnection instance in the server.
  string id = 1;
}
message AdapterListConnections_AddRequest {
  // The id of the AdapterListConnections object.
  AdapterListConnectionsInstance instance = 1;
  // Specifies the user interface object to connect.
  ObjectInstance uiObj = 2;
}

message AdapterListConnections_AddResponse {
  // The AdapterListConnection this method creates.
  AdapterListConnectionInstance returnValue = 1;
}

message AdapterListConnections_RemoveRequest {
  // The id of the AdapterListConnections object.
  AdapterListConnectionsInstance instance = 1;
  // Specifies the user interface object to disconnect.
  ObjectInstance uiObj = 2;
}

message AdapterListConnections_RemoveResponse {
  // Returns True when the AdapterListConnection is removed. Returns False when the AdapterListConnection is not found.
  bool returnValue = 1;
}

message AdapterListConnections_ClearRequest {
  // The id of the AdapterListConnections object.
  AdapterListConnectionsInstance instance = 1;
}

message AdapterListConnections_ClearResponse {
}

message AdapterListConnections_FromControlRequest {
  // The id of the AdapterListConnections object.
  AdapterListConnectionsInstance instance = 1;
  // Specifies a connected user interface object.
  ObjectInstance uiObj = 2;
}

message AdapterListConnections_FromControlResponse {
  // The return type of the AdapterListConnection object.
  AdapterListConnectionInstance returnValue = 1;
}

message AdapterListConnections_Get_ItemRequest {
  // The id of the AdapterListConnections object.
  AdapterListConnectionsInstance instance = 1;
  // Specifies the zero-based index of the item to retrieve.
  int32 itemIndex = 2;
}

message AdapterListConnections_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  AdapterListConnectionInstance returnValue = 1;
}

message AdapterListConnections_Get_CountRequest {
  // The id of the AdapterListConnections object.
  AdapterListConnectionsInstance instance = 1;
}

message AdapterListConnections_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// AdapterListConnection
//
// Represents a connection from an Application Manager control to a control that displays the list of adapters. Use the connected control to select an adapter to which to set the Engine.DefaultAdapter property.
// Note: This class currently contains no properties or methods. Properties or methods might be added to this class in future versions of TestStand.
//
service AdapterListConnection {
}

// SelectedSequences
//
// A collection of selected sequences. You can obtain a reference to the collection from the SequenceFileViewMgr.SelectedSequences property.
//
service SelectedSequences {
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // SelectedSequences_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SelectedSequencesInstance - The id of the SelectedSequences object.
  //
  // SelectedSequences_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(SelectedSequences_ClearRequest) returns (SelectedSequences_ClearResponse);
  
  
  // Method: AddSequence
  //
  // Adds a sequence to the SelectedSequences collection.
  //
  // SelectedSequences_AddSequenceRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SelectedSequencesInstance - The id of the SelectedSequences object.
  //    - val: SequenceInstance - Specifies the sequence to add.
  //
  // SelectedSequences_AddSequenceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc AddSequence(SelectedSequences_AddSequenceRequest) returns (SelectedSequences_AddSequenceResponse);
  
  
  // Method: AddSequences
  //
  // Adds an array of sequences to the SelectedSequences collection.
  //
  // SelectedSequences_AddSequencesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SelectedSequencesInstance - The id of the SelectedSequences object.
  //    - val: repeated SequenceInstance - Specifies the array of sequences to add.
  //
  // SelectedSequences_AddSequencesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc AddSequences(SelectedSequences_AddSequencesRequest) returns (SelectedSequences_AddSequencesResponse);
  
  
  // Method: BeginUpdate
  //
  // Call this method before making multiple changes to the SelectedSequences collection. When you finish changing the collection, call the SelectedSequences.EndUpdate method to update the TestStand User Interface (UI) Controls according to the changes.
  //
  // Use this method to minimize redrawing in the TestStand UI Controls when you programmatically change the selection.
  //
  // SelectedSequences_BeginUpdateRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SelectedSequencesInstance - The id of the SelectedSequences object.
  //
  // SelectedSequences_BeginUpdateResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc BeginUpdate(SelectedSequences_BeginUpdateRequest) returns (SelectedSequences_BeginUpdateResponse);
  
  
  // Method: EndUpdate
  //
  // Updates the user interface according to all changes to the SelectedSequences collection you make after a previous call to the SelectedSequences.BeginUpdate method.
  //
  // SelectedSequences_EndUpdateRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SelectedSequencesInstance - The id of the SelectedSequences object.
  //
  // SelectedSequences_EndUpdateResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc EndUpdate(SelectedSequences_EndUpdateRequest) returns (SelectedSequences_EndUpdateResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // SelectedSequences_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SelectedSequencesInstance - The id of the SelectedSequences object.
  //    - itemIndex: int32 - Specifies the index of the item to retrieve.
  //
  // SelectedSequences_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(SelectedSequences_Get_ItemRequest) returns (SelectedSequences_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // SelectedSequences_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SelectedSequencesInstance - The id of the SelectedSequences object.
  //
  // SelectedSequences_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(SelectedSequences_Get_CountRequest) returns (SelectedSequences_Get_CountResponse);
  
  
}
message SelectedSequencesInstance {
  // Specifies the handle of the SelectedSequences instance in the server.
  string id = 1;
}
message SelectedSequences_ClearRequest {
  // The id of the SelectedSequences object.
  SelectedSequencesInstance instance = 1;
}

message SelectedSequences_ClearResponse {
}

message SelectedSequences_AddSequenceRequest {
  // The id of the SelectedSequences object.
  SelectedSequencesInstance instance = 1;
  // Specifies the sequence to add.
  SequenceInstance val = 2;
}

message SelectedSequences_AddSequenceResponse {
}

message SelectedSequences_AddSequencesRequest {
  // The id of the SelectedSequences object.
  SelectedSequencesInstance instance = 1;
  // Specifies the array of sequences to add.
  repeated SequenceInstance val = 2;
}

message SelectedSequences_AddSequencesResponse {
}

message SelectedSequences_BeginUpdateRequest {
  // The id of the SelectedSequences object.
  SelectedSequencesInstance instance = 1;
}

message SelectedSequences_BeginUpdateResponse {
}

message SelectedSequences_EndUpdateRequest {
  // The id of the SelectedSequences object.
  SelectedSequencesInstance instance = 1;
}

message SelectedSequences_EndUpdateResponse {
}

message SelectedSequences_Get_ItemRequest {
  // The id of the SelectedSequences object.
  SelectedSequencesInstance instance = 1;
  // Specifies the index of the item to retrieve.
  int32 itemIndex = 2;
}

message SelectedSequences_Get_ItemResponse {
  // The sequence at the specified index in the collection.
  SequenceInstance returnValue = 1;
}

message SelectedSequences_Get_CountRequest {
  // The id of the SelectedSequences object.
  SelectedSequencesInstance instance = 1;
}

message SelectedSequences_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// SelectedPropertyObjects
//
// A collection of selected property objects. Controls connected to the SequenceFileView Manager and ExecutionView Manager controls, such as the VariablesView, automatically update the collection while active. You can obtain a reference to the collection from the SequenceFileViewMgr.SelectedPropertyObjects and ExecutionViewMgr.SelectedPropertyObjects properties.
//
service SelectedPropertyObjects {
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // SelectedPropertyObjects_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SelectedPropertyObjectsInstance - The id of the SelectedPropertyObjects object.
  //
  // SelectedPropertyObjects_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(SelectedPropertyObjects_ClearRequest) returns (SelectedPropertyObjects_ClearResponse);
  
  
  // Method: AddPropertyObject
  //
  // Adds a property object to the collection.
  //
  // SelectedPropertyObjects_AddPropertyObjectRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SelectedPropertyObjectsInstance - The id of the SelectedPropertyObjects object.
  //    - val: PropertyObjectInstance - Specifies the property object to add.
  //
  // SelectedPropertyObjects_AddPropertyObjectResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc AddPropertyObject(SelectedPropertyObjects_AddPropertyObjectRequest) returns (SelectedPropertyObjects_AddPropertyObjectResponse);
  
  
  // Method: AddPropertyObjects
  //
  // Adds an array of property objects to the collection.
  //
  // SelectedPropertyObjects_AddPropertyObjectsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SelectedPropertyObjectsInstance - The id of the SelectedPropertyObjects object.
  //    - val: repeated PropertyObjectInstance - Specifies the property objects to add.
  //
  // SelectedPropertyObjects_AddPropertyObjectsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc AddPropertyObjects(SelectedPropertyObjects_AddPropertyObjectsRequest) returns (SelectedPropertyObjects_AddPropertyObjectsResponse);
  
  
  // Method: BeginUpdate
  //
  // Call this method before you make multiple changes to the SelectedPropertyObjects collection. When you finish changing the collection, call the SelectedPropertyObjects.EndUpdate method to update the TestStand User Interface (UI) Controls according to the changes.
  //
  // Use this method to minimize redrawing in the TestStand UI Controls when you programmatically change the selection.
  //
  // SelectedPropertyObjects_BeginUpdateRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SelectedPropertyObjectsInstance - The id of the SelectedPropertyObjects object.
  //
  // SelectedPropertyObjects_BeginUpdateResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc BeginUpdate(SelectedPropertyObjects_BeginUpdateRequest) returns (SelectedPropertyObjects_BeginUpdateResponse);
  
  
  // Method: EndUpdate
  //
  // Updates the TestStand User Interface Controls according to the SelectedPropertyObjects collection changes you make after you call the SelectedPropertyObjects.BeginUpdate method.
  //
  // SelectedPropertyObjects_EndUpdateRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SelectedPropertyObjectsInstance - The id of the SelectedPropertyObjects object.
  //
  // SelectedPropertyObjects_EndUpdateResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc EndUpdate(SelectedPropertyObjects_EndUpdateRequest) returns (SelectedPropertyObjects_EndUpdateResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // SelectedPropertyObjects_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SelectedPropertyObjectsInstance - The id of the SelectedPropertyObjects object.
  //    - itemIndex: int32 - Specifies a zero-based index of the item to retrieve.
  //
  // SelectedPropertyObjects_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(SelectedPropertyObjects_Get_ItemRequest) returns (SelectedPropertyObjects_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // SelectedPropertyObjects_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SelectedPropertyObjectsInstance - The id of the SelectedPropertyObjects object.
  //
  // SelectedPropertyObjects_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(SelectedPropertyObjects_Get_CountRequest) returns (SelectedPropertyObjects_Get_CountResponse);
  
  
}
message SelectedPropertyObjectsInstance {
  // Specifies the handle of the SelectedPropertyObjects instance in the server.
  string id = 1;
}
message SelectedPropertyObjects_ClearRequest {
  // The id of the SelectedPropertyObjects object.
  SelectedPropertyObjectsInstance instance = 1;
}

message SelectedPropertyObjects_ClearResponse {
}

message SelectedPropertyObjects_AddPropertyObjectRequest {
  // The id of the SelectedPropertyObjects object.
  SelectedPropertyObjectsInstance instance = 1;
  // Specifies the property object to add.
  PropertyObjectInstance val = 2;
}

message SelectedPropertyObjects_AddPropertyObjectResponse {
}

message SelectedPropertyObjects_AddPropertyObjectsRequest {
  // The id of the SelectedPropertyObjects object.
  SelectedPropertyObjectsInstance instance = 1;
  // Specifies the property objects to add.
  repeated PropertyObjectInstance val = 2;
}

message SelectedPropertyObjects_AddPropertyObjectsResponse {
}

message SelectedPropertyObjects_BeginUpdateRequest {
  // The id of the SelectedPropertyObjects object.
  SelectedPropertyObjectsInstance instance = 1;
}

message SelectedPropertyObjects_BeginUpdateResponse {
}

message SelectedPropertyObjects_EndUpdateRequest {
  // The id of the SelectedPropertyObjects object.
  SelectedPropertyObjectsInstance instance = 1;
}

message SelectedPropertyObjects_EndUpdateResponse {
}

message SelectedPropertyObjects_Get_ItemRequest {
  // The id of the SelectedPropertyObjects object.
  SelectedPropertyObjectsInstance instance = 1;
  // Specifies a zero-based index of the item to retrieve.
  int32 itemIndex = 2;
}

message SelectedPropertyObjects_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  PropertyObjectInstance returnValue = 1;
}

message SelectedPropertyObjects_Get_CountRequest {
  // The id of the SelectedPropertyObjects object.
  SelectedPropertyObjectsInstance instance = 1;
}

message SelectedPropertyObjects_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

///////////////////////// Referenced Types /////////////////////

// Generation of referenced types is disabled.

