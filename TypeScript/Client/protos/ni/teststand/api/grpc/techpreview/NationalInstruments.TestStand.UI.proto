///// THIS FILE WAS AUTO GENERATED ON 03/07/2023 10:04:46 /////

syntax = "proto3";
package ni.teststand.api.grpc.techpreview;
option csharp_namespace = "NationalInstruments.TestStand.UI.Grpc";
option go_package = "tsgrpc";
option java_multiple_files = true;
option java_outer_classname = "TestStandUIProto";
option java_package = "com.ni.teststand.api.grpc.techpreview";
option objc_class_prefix = "NITUG";
option php_namespace = "NI\\TestStand\\UI\\Grpc";
option ruby_package = "NI::TestStand::UI::Grpc";

import "ni/teststand/api/grpc/techpreview/common_types_api.proto";
import "ni/teststand/api/grpc/techpreview/NationalInstruments.TestStand.API.proto";
import "ni/teststand/api/grpc/techpreview/NationalInstruments.TestStand.UI.Support.proto";

// ListBarButtonStyles
//
enum ListBarButtonStyles {
  ListBarButtonStyles_reservedZero = 0;
  // Field: ListBarButtonStyle_3D
  //
  ListBarButtonStyle_3D = 1;
  // Field: ListBarButtonStyle_Flat
  //
  ListBarButtonStyle_Flat = 2;
}

// module 

// ListBarPageStyles
//
// Use these constants with the ListBar.PageStyle property. Use the bitwise-OR operator to specify more than one option.
//
enum ListBarPageStyles {
  ListBarPageStyles_reservedZero = 0;
  // Field: ListBarPageStyle_FrameSelectedItem
  //
  // (Value: 0x1) When set, a frame surrounds the selected item. When not set, the control highlights the text of the selected item.
  //
  ListBarPageStyle_FrameSelectedItem = 1;
  // Field: ListBarPageStyle_Tracking
  //
  // (Value: 0x2) Items on the ListBar page that the mouse hovers over are highlighted.
  //
  ListBarPageStyle_Tracking = 2;
  // Field: ListBarPageStyle_IconsOnTop
  //
  // (Value: 0x4) Items on the ListBar page draw icons above the text.
  //
  ListBarPageStyle_IconsOnTop = 4;
}

// SeqViewColumnTypes
//
// Use these constants with the SeqViewColumn.Type property to define what type of information is displayed for each step in the column.
//
enum SeqViewColumnTypes {
  SeqViewColumnTypes_reservedZero = 0;
  // Field: SeqViewColumnType_Name
  //
  // (Value: 1) Name of the step.
  //
  SeqViewColumnType_Name = 1;
  // Field: SeqViewColumnType_StepIndex
  //
  // (Value: 2) Index of the step.
  //
  SeqViewColumnType_StepIndex = 2;
  // Field: SeqViewColumnType_Description
  //
  // (Value: 3) Description of the step.
  //
  SeqViewColumnType_Description = 3;
  // Field: SeqViewColumnType_ExecutionFlow
  //
  // (Value: 4) Execution flow of the step.
  //
  SeqViewColumnType_ExecutionFlow = 4;
  // Field: SeqViewColumnType_StepSettings
  //
  // (Value: 4) A summary of the settings for the step.
  //
  SeqViewColumnType_StepSettings = 4;
  // Field: SeqViewColumnType_Status
  //
  // (Value: 5) Status of the step.
  //
  SeqViewColumnType_Status = 5;
  // Field: SeqViewColumnType_Expression
  //
  // (Value: 6) Custom Expression. Use the SeqViewColumn.Expression property to specify an expression for the column.
  //
  SeqViewColumnType_Expression = 6;
  // Field: SeqViewColumnType_Comment
  //
  // (Value: 7) Comment for the step.
  //
  SeqViewColumnType_Comment = 7;
  // Field: SeqViewColumnType_Requirements
  //
  // (Value: 8) Requirements of the step.
  //
  SeqViewColumnType_Requirements = 8;
  option allow_alias = true;
}

// ToolBarTextStyles
//
// Use these constants with the ReportView.ToolBarTextStyle property.
//
enum ToolBarTextStyles {
  // Field: ToolBarTextStyle_TextBelow
  //
  // (Value: 0) Text for toolbar buttons displays below button icons.
  //
  ToolBarTextStyle_TextBelow = 0;
  // Field: ToolBarTextStyle_TextRight
  //
  // (Value: 1) Text for the toolbar buttons displays to the right of button icons.
  //
  ToolBarTextStyle_TextRight = 1;
  // Field: ToolBarTextStyle_TextInvisible
  //
  // (Value: 2) Toolbar buttons do not have text.
  //
  ToolBarTextStyle_TextInvisible = 2;
}

// module 

// ReportViewButtons
//
// Use these constants with the ReportView.ButtonsVisible property.
//
enum ReportViewButtons {
  ReportViewButtons_reservedZero = 0;
  // Field: ReportViewButton_Back
  //
  // (Value: 0x1) Use this button to navigate to previously viewed reports.
  //
  ReportViewButton_Back = 1;
  // Field: ReportViewButton_Forward
  //
  // (Value: 0x2) Use this button to navigate to previously viewed reports.
  //
  ReportViewButton_Forward = 2;
  // Field: ReportViewButton_Stop
  //
  // (Value: 0x4) Use this button to stop the ReportView control from displaying the current report.
  //
  ReportViewButton_Stop = 4;
  // Field: ReportViewButton_Refresh
  //
  // (Value: 0x8) Use this button to refresh the currently displayed report.
  //
  ReportViewButton_Refresh = 8;
  // Field: ReportViewButton_Home
  //
  // (Value: 0x10) Use this button to navigate to the first report opened in the ReportView control.
  //
  ReportViewButton_Home = 16;
  // Field: ReportViewButton_ExternalViewer
  //
  // (Value: 0x20) Use this button to open an external viewer for this kind of report.
  //
  ReportViewButton_ExternalViewer = 32;
  // Field: ReportViewButton_Print
  //
  // (Value: 0x40) Use this button to print the currently displayed report. You can configure the Print button to launch the Print dialog box before printing on the General property page of the ReportView control.
  //
  ReportViewButton_Print = 64;
  // Field: ReportViewButton_FontSize
  //
  // (Value: 0x80) This constant is obsolete. Use this button to change the size of the HTML text displayed.
  // Note: This size is a global setting for the computer and affects the size of text in the web browser when you are using Microsoft Internet Explorer.
  //
  ReportViewButton_FontSize = 128;
  // Field: ReportViewButton_SelectActiveReport
  //
  // (Value: 256) Use this button to change the active report in the Reports collection of an execution. The ReportView control displays the current active report. This button is disabled if the Reports collection is empty.
  //
  ReportViewButton_SelectActiveReport = 256;
  // Field: ReportViewButton_OpenReportLocation
  //
  // (Value: 0x200) Use this button to open File Explorer in the location where the currently displayed report is saved.
  //
  ReportViewButton_OpenReportLocation = 512;
}

// StatusBarPaneStyles
//
// Use these constants with the StatusBarPane.Style property.
//
enum StatusBarPaneStyles {
  StatusBarPaneStyles_reservedZero = 0;
  // Field: StatusBarPaneStyle_Etched
  //
  // (Value: 1) The pane has an etched border, with a sunken outer edge and a raised inner edge.
  //
  StatusBarPaneStyle_Etched = 1;
  // Field: StatusBarPaneStyle_Flat
  //
  // (Value: 2) The pane is flat and has no border.
  //
  StatusBarPaneStyle_Flat = 2;
  // Field: StatusBarPaneStyle_Raised
  //
  // (Value: 3) The pane has a raised border.
  //
  StatusBarPaneStyle_Raised = 3;
}

// ComboBoxStyles
//
// Use these constants with the ComboBox.Style property.
//
enum ComboBoxStyles {
  // Field: ComboBoxStyle_DropDownCombo
  //
  // (Value: 0) Includes a drop-down list and an edit box. You can select from the list or type in the edit box.
  //
  ComboBoxStyle_DropDownCombo = 0;
  // Field: ComboBoxStyle_DropDownList
  //
  // (Value: 2) Allows selection only from the drop-down list.
  //
  ComboBoxStyle_DropDownList = 2;
}

// AlignmentStyles
//
// Use these constants to specify the text alignment of the Label and StatusBarPane controls.
//
enum AlignmentStyles {
  // Field: AlignmentStyle_LeftJustify
  //
  // (Value: 0) Text is left-aligned.
  //
  AlignmentStyle_LeftJustify = 0;
  // Field: AlignmentStyle_RightJustify
  //
  // (Value: 1) Text is right-aligned.
  //
  AlignmentStyle_RightJustify = 1;
  // Field: AlignmentStyle_Center
  //
  // (Value: 2) Text is centered.
  //
  AlignmentStyle_Center = 2;
}

// BorderStyles
//
// Use these constants with Label.BorderStyle to specify the border style of the control.
//
enum BorderStyles {
  // Field: BorderStyle_NoBorder
  //
  // (Value: 0) Specifies that the control does not draw a border.
  //
  BorderStyle_NoBorder = 0;
  // Field: BorderStyle_Fixed3D
  //
  // (Value: 1) Specifies that the control draws a three-dimensional border.
  //
  BorderStyle_Fixed3D = 1;
  // Field: BorderStyle_FixedSingle
  //
  // (Value: 2) Specifies that the control draws a single-line border.
  //
  BorderStyle_FixedSingle = 2;
}

// EdgeStyles
//
// The following constants specify the appearance of the edge of a control or a control element:
//
enum EdgeStyles {
  EdgeStyles_reservedZero = 0;
  // Field: EdgeStyle_Flat
  //
  // (Value: 1) The edge appears flat.
  //
  EdgeStyle_Flat = 1;
  // Field: EdgeStyle_FixedSingle
  //
  // (Value: 2) The edge is a black line, one pixel thick.
  //
  EdgeStyle_FixedSingle = 2;
  // Field: EdgeStyle_ControlEdge
  //
  // (Value: 3) The edge has the appearance of a control edge. The appearance can vary depending on the Microsoft Windows appearance settings and on the specific property to which you apply this value.
  //
  EdgeStyle_ControlEdge = 3;
  // Field: EdgeStyle_Raised
  //
  // (Value: 4) The edge has a raised three-dimensional appearance.
  //
  EdgeStyle_Raised = 4;
  // Field: EdgeStyle_Inset
  //
  // (Value: 5) The edge has a sunken three-dimensional appearance.
  //
  EdgeStyle_Inset = 5;
  // Field: EdgeStyle_UI
  //
  // (Value: 6) The edge uses the color from the property Borders.FrameEdgeUIStyleColor.
  //
  EdgeStyle_UI = 6;
}

// module 

// WhichBorders
//
// These constants specify the draggable borders of a control. The control can have borders on any combination of edges or it can have no borders at all. To specify multiple borders, combine these constants with a bitwise-OR operator.
//
enum WhichBorders {
  // Field: WhichBorder_None
  //
  // (Value: 0x0) Specifies no borders.
  //
  WhichBorder_None = 0;
  // Field: WhichBorder_Top
  //
  // (Value: 0x1) Specifies a border at the top edge of the control.
  //
  WhichBorder_Top = 1;
  // Field: WhichBorder_Bottom
  //
  // (Value: 0x2) Specifies a border at the bottom edge of the control.
  //
  WhichBorder_Bottom = 2;
  // Field: WhichBorder_Left
  //
  // (Value: 0x4) Specifies a border at the left edge of the control.
  //
  WhichBorder_Left = 4;
  // Field: WhichBorder_Right
  //
  // (Value: 0x8) Specifies a border at the right edge of the control.
  //
  WhichBorder_Right = 8;
}

// MousePointerStyles
//
// Use these constants with the Button.MousePointer, ComboBox.MousePointer, ExpressionEdit.MousePointer, Label.MousePointer, and ListBox.MousePointer properties.
//
enum MousePointerStyles {
  // Field: MousePointer_Default
  //
  // (Value: 0)
  //
  MousePointer_Default = 0;
  // Field: MousePointer_Arrow
  //
  // (Value: 1)
  //
  MousePointer_Arrow = 1;
  // Field: MousePointer_Crosshair
  //
  // (Value: 2)
  //
  MousePointer_Crosshair = 2;
  // Field: MousePointer_Ibeam
  //
  // (Value: 3)
  //
  MousePointer_Ibeam = 3;
  // Field: MousePointer_SizeNESW
  //
  // (Value: 4)
  //
  MousePointer_SizeNESW = 4;
  // Field: MousePointer_SizeNS
  //
  // (Value: 5)
  //
  MousePointer_SizeNS = 5;
  // Field: MousePointer_SizeNWSE
  //
  // (Value: 6)
  //
  MousePointer_SizeNWSE = 6;
  // Field: MousePointer_SizeWE
  //
  // (Value: 7)
  //
  MousePointer_SizeWE = 7;
  // Field: MousePointer_UpArrow
  //
  // (Value: 8)
  //
  MousePointer_UpArrow = 8;
  // Field: MousePointer_Hourglass
  //
  MousePointer_Hourglass = 9;
  // Field: MousePointer_NoDrop
  //
  // (Value: 10)
  //
  MousePointer_NoDrop = 10;
  // Field: MousePointer_ArrowHourglass
  //
  MousePointer_ArrowHourglass = 11;
  // Field: MousePointer_ArrowQuestion
  //
  // (Value: 12)
  //
  MousePointer_ArrowQuestion = 12;
  // Field: MousePointer_SizeAll
  //
  // (Value: 13)
  //
  MousePointer_SizeAll = 13;
  // Field: MousePointer_Custom
  //
  // (Value: 99)
  //
  MousePointer_Custom = 99;
}

// module 

// ShortcutModifiers
//
// Use these constants with the Command.ShortcutModifier, ExpressionEditButton.ShortcutModifier, and ApplicationMgr.EditModeShortcutModifier properties.
//
enum ShortcutModifiers {
  // Field: ShortcutModifier_NotAModifier
  //
  // (Value: 0x0) No modifier keys are available.
  //
  ShortcutModifier_NotAModifier = 0;
  // Field: ShortcutModifier_Shift
  //
  // (Value: 0x1) The <Shift> key.
  //
  ShortcutModifier_Shift = 1;
  // Field: ShortcutModifier_Control
  //
  // (Value: 0x2) The <Ctrl> key.
  //
  ShortcutModifier_Control = 2;
  // Field: ShortcutModifier_Alt
  //
  // (Value: 0x4) The <Alt> key.
  //
  ShortcutModifier_Alt = 4;
}

// ShortcutKeys
//
// Use these constants with the Command.ShortcutKey, ExpressionEditButton.ShortcutKey, and ApplicationMgr.EditModeShortcutKey properties.
//
enum ShortcutKeys {
  // Field: ShortcutKey_VK_NOT_A_KEY
  //
  // (Value: 0x00)
  //
  ShortcutKey_VK_NOT_A_KEY = 0;
  // Field: ShortcutKey_VK_BACK
  //
  // (Value: 0x08) The Backspace key.
  //
  ShortcutKey_VK_BACK = 8;
  // Field: ShortcutKey_VK_TAB
  //
  // (Value: 0x09) The <Tab> key.
  //
  ShortcutKey_VK_TAB = 9;
  // Field: ShortcutKey_VK_RETURN
  //
  // (Value: 0x0D) The Enter key.
  //
  ShortcutKey_VK_RETURN = 13;
  // Field: ShortcutKey_VK_ESCAPE
  //
  // (Value: 0x1B) The Escape key.
  //
  ShortcutKey_VK_ESCAPE = 27;
  // Field: ShortcutKey_VK_SPACE
  //
  // (Value: 0x20) The Space key.
  //
  ShortcutKey_VK_SPACE = 32;
  // Field: ShortcutKey_VK_END
  //
  // (Value: 0x23) The End key.
  //
  ShortcutKey_VK_END = 35;
  // Field: ShortcutKey_VK_HOME
  //
  // (Value: 0x24) The Home key.
  //
  ShortcutKey_VK_HOME = 36;
  // Field: ShortcutKey_VK_LEFT
  //
  // (Value: 0x25) The Left Arrow key.
  //
  ShortcutKey_VK_LEFT = 37;
  // Field: ShortcutKey_VK_UP
  //
  // (Value: 0x26) The Up Arrow key.
  //
  ShortcutKey_VK_UP = 38;
  // Field: ShortcutKey_VK_RIGHT
  //
  // (Value: 0x27) The Right Arrow key.
  //
  ShortcutKey_VK_RIGHT = 39;
  // Field: ShortcutKey_VK_DOWN
  //
  // (Value: 0x28) The Down Arrow key.
  //
  ShortcutKey_VK_DOWN = 40;
  // Field: ShortcutKey_VK_INSERT
  //
  // (Value: 0x2D) The Insert key.
  //
  ShortcutKey_VK_INSERT = 45;
  // Field: ShortcutKey_VK_DELETE
  //
  // (Value: 0x2E) The Delete key.
  //
  ShortcutKey_VK_DELETE = 46;
  // Field: ShortcutKey_VK_0
  //
  // (Value: 0x30) The 0 key.
  //
  ShortcutKey_VK_0 = 48;
  // Field: ShortcutKey_VK_1
  //
  // (Value: 0x31) The 1 key.
  //
  ShortcutKey_VK_1 = 49;
  // Field: ShortcutKey_VK_2
  //
  // (Value: 0x32) The 2 key.
  //
  ShortcutKey_VK_2 = 50;
  // Field: ShortcutKey_VK_3
  //
  // (Value: 0x33) The 3 key.
  //
  ShortcutKey_VK_3 = 51;
  // Field: ShortcutKey_VK_4
  //
  // (Value: 0x34) The 4 key.
  //
  ShortcutKey_VK_4 = 52;
  // Field: ShortcutKey_VK_5
  //
  // (Value: 0x35) The 5 key.
  //
  ShortcutKey_VK_5 = 53;
  // Field: ShortcutKey_VK_6
  //
  // (Value: 0x36) The 6 key.
  //
  ShortcutKey_VK_6 = 54;
  // Field: ShortcutKey_VK_7
  //
  // (Value: 0x37) The 7 key.
  //
  ShortcutKey_VK_7 = 55;
  // Field: ShortcutKey_VK_8
  //
  // (Value: 0x38) The 8 key.
  //
  ShortcutKey_VK_8 = 56;
  // Field: ShortcutKey_VK_9
  //
  // (Value: 0x39) The 9 key.
  //
  ShortcutKey_VK_9 = 57;
  // Field: ShortcutKey_VK_A
  //
  // (Value: 0x41) The A key.
  //
  ShortcutKey_VK_A = 65;
  // Field: ShortcutKey_VK_B
  //
  // (Value: 0x42) The B key.
  //
  ShortcutKey_VK_B = 66;
  // Field: ShortcutKey_VK_C
  //
  // (Value: 0x43) The C key.
  //
  ShortcutKey_VK_C = 67;
  // Field: ShortcutKey_VK_D
  //
  // (Value: 0x44) The D key.
  //
  ShortcutKey_VK_D = 68;
  // Field: ShortcutKey_VK_E
  //
  // (Value: 0x45) The E key.
  //
  ShortcutKey_VK_E = 69;
  // Field: ShortcutKey_VK_F
  //
  // (Value: 0x46) The F key.
  //
  ShortcutKey_VK_F = 70;
  // Field: ShortcutKey_VK_G
  //
  // (Value: 0x47) The G key.
  //
  ShortcutKey_VK_G = 71;
  // Field: ShortcutKey_VK_H
  //
  // (Value: 0x48) The H key.
  //
  ShortcutKey_VK_H = 72;
  // Field: ShortcutKey_VK_I
  //
  // (Value: 0x49) The I key.
  //
  ShortcutKey_VK_I = 73;
  // Field: ShortcutKey_VK_J
  //
  // (Value: 0x4A) The J key.
  //
  ShortcutKey_VK_J = 74;
  // Field: ShortcutKey_VK_K
  //
  // (Value: 0x4B) The K key.
  //
  ShortcutKey_VK_K = 75;
  // Field: ShortcutKey_VK_L
  //
  // (Value: 0x4C) The L key.
  //
  ShortcutKey_VK_L = 76;
  // Field: ShortcutKey_VK_M
  //
  // (Value: 0x4D) The M key.
  //
  ShortcutKey_VK_M = 77;
  // Field: ShortcutKey_VK_N
  //
  // (Value: 0x4E) The N key.
  //
  ShortcutKey_VK_N = 78;
  // Field: ShortcutKey_VK_O
  //
  // (Value: 0x4F) The O key.
  //
  ShortcutKey_VK_O = 79;
  // Field: ShortcutKey_VK_P
  //
  // (Value: 0x50) The P key.
  //
  ShortcutKey_VK_P = 80;
  // Field: ShortcutKey_VK_Q
  //
  // (Value: 0x51) The Q key.
  //
  ShortcutKey_VK_Q = 81;
  // Field: ShortcutKey_VK_R
  //
  // (Value: 0x52) The R key.
  //
  ShortcutKey_VK_R = 82;
  // Field: ShortcutKey_VK_S
  //
  // (Value: 0x53) The S key.
  //
  ShortcutKey_VK_S = 83;
  // Field: ShortcutKey_VK_T
  //
  // (Value: 0x54) The T key.
  //
  ShortcutKey_VK_T = 84;
  // Field: ShortcutKey_VK_U
  //
  // (Value: 0x55) The U key.
  //
  ShortcutKey_VK_U = 85;
  // Field: ShortcutKey_VK_V
  //
  // (Value: 0x56) The V key.
  //
  ShortcutKey_VK_V = 86;
  // Field: ShortcutKey_VK_W
  //
  // (Value: 0x57) The W key.
  //
  ShortcutKey_VK_W = 87;
  // Field: ShortcutKey_VK_X
  //
  // (Value: 0x58) The X key.
  //
  ShortcutKey_VK_X = 88;
  // Field: ShortcutKey_VK_Y
  //
  // (Value: 0x59) The Y key.
  //
  ShortcutKey_VK_Y = 89;
  // Field: ShortcutKey_VK_Z
  //
  // (Value: 0x5A) The Z key.
  //
  ShortcutKey_VK_Z = 90;
  // Field: ShortcutKey_VK_NUMPAD0
  //
  // (Value: 0x60) The numeric keypad 0 key.
  //
  ShortcutKey_VK_NUMPAD0 = 96;
  // Field: ShortcutKey_VK_NUMPAD1
  //
  // (Value: 0x61) The numeric keypad 1 key.
  //
  ShortcutKey_VK_NUMPAD1 = 97;
  // Field: ShortcutKey_VK_NUMPAD2
  //
  // (Value: 0x62) The numeric keypad 2 key.
  //
  ShortcutKey_VK_NUMPAD2 = 98;
  // Field: ShortcutKey_VK_NUMPAD3
  //
  // (Value: 0x63) The numeric keypad 3 key.
  //
  ShortcutKey_VK_NUMPAD3 = 99;
  // Field: ShortcutKey_VK_NUMPAD4
  //
  // (Value: 0x64) The numeric keypad 4 key.
  //
  ShortcutKey_VK_NUMPAD4 = 100;
  // Field: ShortcutKey_VK_NUMPAD5
  //
  // (Value: 0x65) The numeric keypad 5 key.
  //
  ShortcutKey_VK_NUMPAD5 = 101;
  // Field: ShortcutKey_VK_NUMPAD6
  //
  // (Value: 0x66) The numeric keypad 6 key.
  //
  ShortcutKey_VK_NUMPAD6 = 102;
  // Field: ShortcutKey_VK_NUMPAD7
  //
  // (Value: 0x67) The numeric keypad 7 key.
  //
  ShortcutKey_VK_NUMPAD7 = 103;
  // Field: ShortcutKey_VK_NUMPAD8
  //
  // (Value: 0x68) The numeric keypad 8 key.
  //
  ShortcutKey_VK_NUMPAD8 = 104;
  // Field: ShortcutKey_VK_NUMPAD9
  //
  // (Value: 0x69) The numeric keypad 9 key.
  //
  ShortcutKey_VK_NUMPAD9 = 105;
  // Field: ShortcutKey_VK_MULTIPLY
  //
  // (Value: 0x6A) The Multiply key.
  //
  ShortcutKey_VK_MULTIPLY = 106;
  // Field: ShortcutKey_VK_ADD
  //
  // (Value: 0x6B) The Add key.
  //
  ShortcutKey_VK_ADD = 107;
  // Field: ShortcutKey_VK_SEPARATOR
  //
  // (Value: 0x6C) The Separator key.
  //
  ShortcutKey_VK_SEPARATOR = 108;
  // Field: ShortcutKey_VK_SUBTRACT
  //
  // (Value: 0x6D) The Subtract key.
  //
  ShortcutKey_VK_SUBTRACT = 109;
  // Field: ShortcutKey_VK_DECIMAL
  //
  // (Value: 0x6E) The Decimal key.
  //
  ShortcutKey_VK_DECIMAL = 110;
  // Field: ShortcutKey_VK_DIVIDE
  //
  // (Value: 0x6F) The Divide key.
  //
  ShortcutKey_VK_DIVIDE = 111;
  // Field: ShortcutKey_VK_F1
  //
  // (Value: 0x70) The F1 key.
  //
  ShortcutKey_VK_F1 = 112;
  // Field: ShortcutKey_VK_F2
  //
  // (Value: 0x71) The F2 key.
  //
  ShortcutKey_VK_F2 = 113;
  // Field: ShortcutKey_VK_F3
  //
  // (Value: 0x72) The F3 key.
  //
  ShortcutKey_VK_F3 = 114;
  // Field: ShortcutKey_VK_F4
  //
  // (Value: 0x73) The F4 key.
  //
  ShortcutKey_VK_F4 = 115;
  // Field: ShortcutKey_VK_F5
  //
  // (Value: 0x74) The F5 key.
  //
  ShortcutKey_VK_F5 = 116;
  // Field: ShortcutKey_VK_F6
  //
  // (Value: 10x75) The F6 key.
  //
  ShortcutKey_VK_F6 = 117;
  // Field: ShortcutKey_VK_F7
  //
  // (Value: 0x76)The F7 key.
  //
  ShortcutKey_VK_F7 = 118;
  // Field: ShortcutKey_VK_F8
  //
  // (Value: 0x77) The F8 key.
  //
  ShortcutKey_VK_F8 = 119;
  // Field: ShortcutKey_VK_F9
  //
  // (Value: 0x78) The F9 key.
  //
  ShortcutKey_VK_F9 = 120;
  // Field: ShortcutKey_VK_F10
  //
  // (Value: 0x79) The F10 key.
  //
  ShortcutKey_VK_F10 = 121;
  // Field: ShortcutKey_VK_F11
  //
  // (Value: 0x7A) The F11 key.
  //
  ShortcutKey_VK_F11 = 122;
  // Field: ShortcutKey_VK_F12
  //
  // (Value: 0x7B) The F12 key.
  //
  ShortcutKey_VK_F12 = 123;
  // Field: ShortcutKey_VK_F13
  //
  // (Value: 0x7C) The F13 key.
  //
  ShortcutKey_VK_F13 = 124;
  // Field: ShortcutKey_VK_F14
  //
  // (Value: 0x7D) The F14 key.
  //
  ShortcutKey_VK_F14 = 125;
  // Field: ShortcutKey_VK_F15
  //
  // (Value: 0x7E) The F15 key.
  //
  ShortcutKey_VK_F15 = 126;
  // Field: ShortcutKey_VK_F16
  //
  // (Value: 0x7F) The F16 key.
  //
  ShortcutKey_VK_F16 = 127;
  // Field: ShortcutKey_VK_F17
  //
  // (Value: 0x80) The F17 key.
  //
  ShortcutKey_VK_F17 = 128;
  // Field: ShortcutKey_VK_F18
  //
  // (Value: 0x81) The F18 key.
  //
  ShortcutKey_VK_F18 = 129;
  // Field: ShortcutKey_VK_F19
  //
  // (Value: 0x82) The F19 key.
  //
  ShortcutKey_VK_F19 = 130;
  // Field: ShortcutKey_VK_F20
  //
  // (Value: 0x83) The F20 key.
  //
  ShortcutKey_VK_F20 = 131;
  // Field: ShortcutKey_VK_F21
  //
  // (Value: 0x84) The F21 key.
  //
  ShortcutKey_VK_F21 = 132;
  // Field: ShortcutKey_VK_F22
  //
  // (Value: 0x85) The F22 key.
  //
  ShortcutKey_VK_F22 = 133;
  // Field: ShortcutKey_VK_F23
  //
  // (Value: 0x86) The F23 key.
  //
  ShortcutKey_VK_F23 = 134;
  // Field: ShortcutKey_VK_F24
  //
  // (Value: 0x87) The F24 key.
  //
  ShortcutKey_VK_F24 = 135;
}

// BooleanOrPreference
//
// Use these constants with the ExpressionEdit.WantReturn and ExpressionEdit.WordWrap properties.
//
enum BooleanOrPreference {
  // Field: BooleanOrPreference_False
  //
  // (Value: 0) Specifies a value of False.
  //
  BooleanOrPreference_False = 0;
  // Field: BooleanOrPreference_True
  //
  // (Value: 1) Specifies a value of True.
  //
  BooleanOrPreference_True = 1;
  // Field: BooleanOrPreference_UsePreference
  //
  // (Value: 3) Use the corresponding preference option in the Expression Editing Options dialog box.
  //
  BooleanOrPreference_UsePreference = 2;
}

// ScrollBars
//
// Use these constants with the ExpressionEdit.ScrollBars property.
//
enum ScrollBars {
  // Field: ScrollBar_None
  //
  // (Value: 0) Does not show the horizontal or vertical scrollbars.
  //
  ScrollBar_None = 0;
  // Field: ScrollBar_Both
  //
  // (Value: 1) Shows the horizontal and vertical scrollbars.
  //
  ScrollBar_Both = 1;
  // Field: ScrollBar_Horizontal
  //
  // (Value: 2) Shows only the horizontal scrollbar.
  //
  ScrollBar_Horizontal = 2;
  // Field: ScrollBar_Vertical
  //
  // (Value: 3) Shows only the vertical scrollbar.
  //
  ScrollBar_Vertical = 3;
}

// TextTypes
//
// Use these constants with the ExpressionEdit.TextType property.
//
enum TextTypes {
  // Field: TextType_PlainText
  //
  // (Value: 0) Indicates the text in an ExpressionEdit control is not an expression. The value of the ExpressionEdit.Text property is equivalent to the value of the ExpressionEdit.DisplayText property. This value makes an ExpressionEdit control behave like an edit or text box control. The ExpressionEdit control does not use syntax highlighting, perform error checking, perform autocompletion, or display function tips. The ExpressionEdit control context menu contains only menu items for text editing.
  //
  TextType_PlainText = 0;
  // Field: TextType_Expression
  //
  // (Value: 1) Indicates the text in an ExpressionEdit control is an expression.
  //
  TextType_Expression = 1;
  // Field: TextType_ExpressionWithCppIdentifiers
  //
  // (Value: 2) Indicates the text in an ExpressionEdit control is an expression that might contain C++ scope resolution and template operators.
  //
  TextType_ExpressionWithCppIdentifiers = 2;
}

// ErrorCheck
//
// Use these constants with the ExpressionEdit.ErrorCheck property.
//
enum ErrorCheck {
  // Field: ErrorCheck_None
  //
  // (Value: 0) No error checking.
  //
  ErrorCheck_None = 0;
  // Field: ErrorCheck_Syntax
  //
  // (Value: 1) Checks only for syntax errors.
  //
  ErrorCheck_Syntax = 1;
  // Field: ErrorCheck_SyntaxAndEvaluation
  //
  // (Value: 2) Checks for syntax and evaluation errors.
  //
  ErrorCheck_SyntaxAndEvaluation = 2;
}

// module 

// ValidExpressionTypes
//
// Use these constants with the ExpressionEdit.GetValidEvaluationTypes, and ExpressionEdit.SetValidEvaluationTypes methods. Use the bitwise-OR operator to specify more than one option.
//
enum ValidExpressionTypes {
  ValidExpressionTypes_reservedZero = 0;
  // Field: ValidExpressionType_Boolean
  //
  // (Value: 0x1) Only Boolean expression types are valid.
  //
  ValidExpressionType_Boolean = 1;
  // Field: ValidExpressionType_Number
  //
  // (Value: 0x2) Only number expression types are valid.
  //
  ValidExpressionType_Number = 2;
  // Field: ValidExpressionType_String
  //
  // (Value: 0x4) Only string expression types are valid.
  //
  ValidExpressionType_String = 4;
  // Field: ValidExpressionType_Reference
  //
  // (Value: 0x8) Only reference expression types are valid.
  //
  ValidExpressionType_Reference = 8;
  // Field: ValidExpressionType_Container
  //
  // (Value: 0x10) Only container expression types are valid.
  //
  ValidExpressionType_Container = 16;
  // Field: ValidExpressionType_NamedType
  //
  // (Value: 0x20) Only named type expression types are valid.
  //
  ValidExpressionType_NamedType = 32;
  // Field: ValidExpressionType_BooleanArray
  //
  // (Value: 0x40) Only Boolean array expression types are valid.
  //
  ValidExpressionType_BooleanArray = 64;
  // Field: ValidExpressionType_NumberArray
  //
  // (Value: 0x80) Only number array expression types are valid.
  //
  ValidExpressionType_NumberArray = 128;
  // Field: ValidExpressionType_StringArray
  //
  // (Value: 0x100) Only string array expression types are valid.
  //
  ValidExpressionType_StringArray = 256;
  // Field: ValidExpressionType_ReferenceArray
  //
  // (Value: 0x200) Only reference array expression types are valid.
  //
  ValidExpressionType_ReferenceArray = 512;
  // Field: ValidExpressionType_ContainerArray
  //
  // (Value: 0x400) Only container array expression types are valid.
  //
  ValidExpressionType_ContainerArray = 1024;
  // Field: ValidExpressionType_NamedTypeArray
  //
  // (Value: 0x800) Only named type array expression types are valid.
  //
  ValidExpressionType_NamedTypeArray = 2048;
  // Field: ValidExpressionType_Object
  //
  // (Value: 0x4000) Any expression type that is not an element of an array of a basic type is valid.
  //
  ValidExpressionType_Object = 16384;
  // Field: ValidExpressionType_PlainReference
  //
  // (Value: 0x8000) Only the reference expression type when it is not a named type is valid.
  //
  ValidExpressionType_PlainReference = 32768;
  // Field: ValidExpressionType_PlainContainer
  //
  // (Value: 0x10000) Only the container expression type when it is not a named type is valid.
  //
  ValidExpressionType_PlainContainer = 65536;
  // Field: ValidExpressionType_Enum
  //
  // (0x20000) Only enum expression types are valid.
  //
  ValidExpressionType_Enum = 131072;
  // Field: ValidExpressionType_Any
  //
  // (Value: -1) All expression types are valid.
  //
  ValidExpressionType_Any = -1;
}

// module 

// DisplayErrorOptions
//
// Use these constants with the ExpressionEdit.DisplayError method.
//
enum DisplayErrorOptions {
  // Field: DisplayError_NoOptions
  //
  // (Value: 0x0) No options.
  //
  DisplayError_NoOptions = 0;
  // Field: DisplayError_ForAll
  //
  // (Value: 0x1) Use this option to show or hide the error for all ExpressionEdit controls. This is useful when you modify a PropertyObject used as the context for several ExpressionEdit controls and you want those ExpressionEdit controls to re-evaluate their expressions for errors.
  //
  DisplayError_ForAll = 1;
}

// ButtonSizing
//
// Use these constants with the Button.AutoSizing property.
//
enum ButtonSizing {
  // Field: ButtonSizing_AlwaysAutoSize
  //
  // (Value: 0) Always resize the Button control to fit the text.
  //
  ButtonSizing_AlwaysAutoSize = 0;
  // Field: ButtonSizing_GrowOnly
  //
  // (Value: 1) Resize the Button control only when the text does not fit in the control.
  //
  ButtonSizing_GrowOnly = 1;
  // Field: ButtonSizing_ShrinkOnly
  //
  // (Value: 2) Resize the Button control only when the text is smaller than the button.
  //
  ButtonSizing_ShrinkOnly = 2;
  // Field: ButtonSizing_NeverAutoSize
  //
  // (Value: 3) Never resize the Button control.
  //
  ButtonSizing_NeverAutoSize = 3;
}

// ReloadFiles
//
// Use these constants with the ApplicationMgr.ReloadSequenceFilesOnStart property.
//
enum ReloadFiles {
  // Field: ReloadFile_None
  //
  // (Value: 0) Does not reload any files.
  //
  ReloadFile_None = 0;
  // Field: ReloadFile_Selected
  //
  // (Value: 1) Reloads any file selected in a SequenceFileView Manager control.
  //
  ReloadFile_Selected = 1;
  // Field: ReloadFile_All
  //
  // (Value: 2) Reloads all files.
  //
  ReloadFile_All = 2;
}

// QueryCloseExecutionOptions
//
// Use these constants with the opt parameter of the ApplicationMgr.QueryCloseExecution event.
//
enum QueryCloseExecutionOptions {
  // Field: QueryCloseExecution_ShowDialog
  //
  // (Value: 0) Launches a dialog box if the execution is not terminated.
  //
  QueryCloseExecution_ShowDialog = 0;
  // Field: QueryCloseExecution_Terminate
  //
  // (Value: 1) Terminates the execution if it is running.
  //
  QueryCloseExecution_Terminate = 1;
  // Field: QueryCloseExecution_Abort
  //
  // (Value: 2) Aborts the execution if it is running.
  //
  QueryCloseExecution_Abort = 2;
  // Field: QueryCloseExecution_AutoCloseWhenDone
  //
  // (Value: 3) Marks the execution to close automatically when it completes. The dialog box prompts the user to abort, auto-close, terminate, or cancel.
  //
  QueryCloseExecution_AutoCloseWhenDone = 3;
  // Field: QueryCloseExecution_Cancel
  //
  // (Value: 4) Cancels the closing of an execution.
  //
  QueryCloseExecution_Cancel = 4;
  // Field: QueryCloseExecution_Hide
  //
  // (Value: 5) Turns off tracing and hides the execution. The execution continues to run. If the execution hits a breakpoint, tracepoint, or run-time error, the execution displays again.
  //
  QueryCloseExecution_Hide = 5;
}

// QueryShutdownOptions
//
// Use these constants with the opts parameter of the ApplicationMgr.QueryShutdown event.
//
enum QueryShutdownOptions {
  // Field: QueryShutdown_ShowDialog
  //
  // (Value: 0) The ApplicationMgr.Shutdown method continues shutdown and launches a dialog box if the method needs to terminate a running execution.
  //
  QueryShutdown_ShowDialog = 0;
  // Field: QueryShutdown_Continue
  //
  // (Value: 1) The ApplicationMgr.Shutdown method continues shutdown. If the shutdown process cannot continue because of a running execution, the application generates an error.
  //
  QueryShutdown_Continue = 1;
  // Field: QueryShutdown_Cancel
  //
  // (Value: 2) The ApplicationMgr.Shutdown method does nothing.
  //
  QueryShutdown_Cancel = 2;
}

// module 

// CommandConnectionOptions
//
// Use these constants with the CommandConnection.Options property.
//
enum CommandConnectionOptions {
  // Field: CommandConnection_NoOptions
  //
  // (Value: 0x0) No options.
  //
  CommandConnection_NoOptions = 0;
  // Field: CommandConnection_IgnoreVisible
  //
  // (Value: 0x1) The connection does not change the visibility of the connected control.
  //
  CommandConnection_IgnoreVisible = 1;
  // Field: CommandConnection_IgnoreCaption
  //
  // (Value: 0x2) The connection does not set the caption on the connected control.
  //
  CommandConnection_IgnoreCaption = 2;
  // Field: CommandConnection_IgnoreEnable
  //
  // (Value: 0x4) The connection does not enable or disable the connected control.
  //
  CommandConnection_IgnoreEnable = 4;
  // Field: CommandConnection_EnableImage
  //
  // (Value: 0x8) The connection sets the image on the connected control.
  //
  CommandConnection_EnableImage = 8;
}

// module 

// ExecutionViewOptions
//
// Use these constants with the opts parameter of the ExecutionViewMgr.ConnectExecutionView method.
//
enum ExecutionViewOptions {
  // Field: ExecutionViewConnection_NoOptions
  //
  // (Value: 0) No options.
  //
  ExecutionViewConnection_NoOptions = 0;
  // Field: ExecutionViewConnection_IgnoreColors
  //
  // (Value: 1) The control connected to the ExecutionView Manager control does not change colors based on the execution state when this option is used.
  //
  ExecutionViewConnection_IgnoreColors = 1;
}

// FontSources
//
// Use these constants with controls that have a FontSource property.
//
enum FontSources {
  // Field: FontSource_UseFontProperty
  //
  // (Value: 0) A corresponding Font property of the control determines the font.
  //
  FontSource_UseFontProperty = 0;
  // Field: FontSource_UseGUIFont
  //
  // (Value: 1) The default system font for user interface objects.
  //
  FontSource_UseGUIFont = 1;
  // Field: FontSource_UseContainerFont
  //
  // (Value: 2) The font the container supplies.
  //
  FontSource_UseContainerFont = 2;
  // Field: FontSource_UseTitlebarFont
  //
  // (Value: 3) The system font for a title bar.
  //
  FontSource_UseTitlebarFont = 3;
  // Field: FontSource_UseInactiveTitlebarFont
  //
  // (Value: 4) The system font for an inactive titlebar.
  //
  FontSource_UseInactiveTitlebarFont = 4;
  // Field: FontSource_UseIconFont
  //
  // (Value: 5) The system font for an icon title.
  //
  FontSource_UseIconFont = 5;
  // Field: FontSource_UseMenuFont
  //
  // (Value: 6) The system font for a menu.
  //
  FontSource_UseMenuFont = 6;
  // Field: FontSource_UseMessageBoxFont
  //
  // (Value: 7) The system font for a message box.
  //
  FontSource_UseMessageBoxFont = 7;
  // Field: FontSource_UsePaletteTitleFont
  //
  // (Value: 8) The system font for the title of a Tools window.
  //
  FontSource_UsePaletteTitleFont = 8;
  // Field: FontSource_UseSelectedItemsFont
  //
  // (Value: 9) The system font for the selected menu items.
  //
  FontSource_UseSelectedItemsFont = 9;
  // Field: FontSource_UseToolTipFont
  //
  // (Value: 10) The system font for tooltips and status bars.
  //
  FontSource_UseToolTipFont = 10;
  // Field: FontSource_UseSystemFixedWidthFont
  //
  // (Value: 11) The system font for monospaced text.
  //
  FontSource_UseSystemFixedWidthFont = 11;
  // Field: FontSource_UseUIStyleFont
  //
  // (Value: 12) The font the UIStyle object supplies.
  //
  FontSource_UseUIStyleFont = 12;
}

// ExecutionDisplayReasons
//
// These constants are passed as a parameter in the ApplicationMgr.DisplayExecution event to provide the reason for why the event was generated.
//
enum ExecutionDisplayReasons {
  // Field: ExecutionDisplayReason_UIMessage
  //
  // (Value: 0) Event occurred because the TestStand Engine sent the UIMsg_OpenWindows message for the execution.
  //
  ExecutionDisplayReason_UIMessage = 0;
  // Field: ExecutionDisplayReason_StartExecution
  //
  // (Value: 1) Event occurred because the execution was started.
  //
  ExecutionDisplayReason_StartExecution = 1;
  // Field: ExecutionDisplayReason_Breakpoint
  //
  // (Value: 2) Event occurred because the execution hit a breakpoint.
  //
  ExecutionDisplayReason_Breakpoint = 2;
  // Field: ExecutionDisplayReason_BreakOnUserRequest
  //
  // (Value: 3) Event occurred because the user paused the execution.
  //
  ExecutionDisplayReason_BreakOnUserRequest = 3;
  // Field: ExecutionDisplayReason_BreakOnRunTimeError
  //
  // (Value: 4) Event occurred because the execution was paused as a result of a run-time error.
  //
  ExecutionDisplayReason_BreakOnRunTimeError = 4;
  // Field: ExecutionDisplayReason_GotoLocation
  //
  // (Value: 5) Event occurred because of a request to display a location that resides in the execution.
  //
  ExecutionDisplayReason_GotoLocation = 5;
}

// SequenceFileDisplayReasons
//
// These values are passed as a parameter to the ApplicationMgr.DisplaySequenceFile event to provide the reason for why the event was generated.
//
enum SequenceFileDisplayReasons {
  // Field: SequenceFileDisplayReason_UIMessage
  //
  // (Value: 0) The event was generated because the TestStand Engine sent the UIMsg_OpenWindows message for the sequence file.
  //
  SequenceFileDisplayReason_UIMessage = 0;
  // Field: SequenceFileDisplayReason_OpenSequenceFile
  //
  // (Value: 1) The event was generated because the sequence file was opened.
  //
  SequenceFileDisplayReason_OpenSequenceFile = 1;
  // Field: SequenceFileDisplayReason_GotoLocation
  //
  // (Value: 3) The event was generated because of a request to display a location that resides in the file.
  //
  SequenceFileDisplayReason_GotoLocation = 2;
  // Field: SequenceFileDisplayReason_NewSequenceFile
  //
  // (Value: 2) The event was generated because a new sequence file was created.
  //
  SequenceFileDisplayReason_NewSequenceFile = 3;
}

// module 

// MouseButtons
//
// Use these constants to indicate which mouse button has been clicked for MouseDown, MouseMove, and MouseUp events.
//
service MouseButtons {
  // Field: MouseButton_Left
  //
  // (Value: 1) The left mouse button.
  //
  rpc Get_MouseButton_Left(ConstantValueRequest) returns (int32Response);
  // Field: MouseButton_Right
  //
  // (Value: 2) The right mouse button.
  //
  rpc Get_MouseButton_Right(ConstantValueRequest) returns (int32Response);
  // Field: MouseButton_Middle
  //
  // (Value: 4) The middle mouse button.
  //
  rpc Get_MouseButton_Middle(ConstantValueRequest) returns (int32Response);
}

// module 

// KeyCodes
//
// These constants specify the virtual key codes for the KeyDown and KeyUp events.
//
service KeyCodes {
  // Field: KeyCode_VK_CANCEL
  //
  // (Value: 0x03) The Cancel key.
  //
  rpc Get_KeyCode_VK_CANCEL(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_BACK
  //
  // (Value: 0x08) The Backspace key.
  //
  rpc Get_KeyCode_VK_BACK(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_TAB
  //
  // (Value: 0x09) The Tab key.
  //
  rpc Get_KeyCode_VK_TAB(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_CLEAR
  //
  // (Value: 0x0C) The Clear key.
  //
  rpc Get_KeyCode_VK_CLEAR(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_RETURN
  //
  // (Value: 0x0D) The Enter key.
  //
  rpc Get_KeyCode_VK_RETURN(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_SHIFT
  //
  // (Value: 0x10) The Shift key.
  //
  rpc Get_KeyCode_VK_SHIFT(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_CONTROL
  //
  // (Value: 0x11) The Ctrl key.
  //
  rpc Get_KeyCode_VK_CONTROL(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_MENU
  //
  // (Value: 0x12) The Alt key.
  //
  rpc Get_KeyCode_VK_MENU(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_PAUSE
  //
  // (Value: 0x13) The Pause key.
  //
  rpc Get_KeyCode_VK_PAUSE(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_CAPITAL
  //
  // (Value: 0x14) The Caps Lock key.
  //
  rpc Get_KeyCode_VK_CAPITAL(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_KANA
  //
  // (Value: 0x15) The Kana key.
  //
  rpc Get_KeyCode_VK_KANA(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_HANGEUL
  //
  // (Value: 0x15) The Hangeul key.
  //
  rpc Get_KeyCode_VK_HANGEUL(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_HANGUL
  //
  // (Value: 0x15) The Hangul key.
  //
  rpc Get_KeyCode_VK_HANGUL(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_JUNJA
  //
  // (Value: 0x17) The Junja key.
  //
  rpc Get_KeyCode_VK_JUNJA(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_FINAL
  //
  // (Value: 0x18) The Final key.
  //
  rpc Get_KeyCode_VK_FINAL(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_HANJA
  //
  // (Value: 0x19) The Hanja key.
  //
  rpc Get_KeyCode_VK_HANJA(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_KANJI
  //
  // (Value: 0x19) The Kanji key.
  //
  rpc Get_KeyCode_VK_KANJI(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_ESCAPE
  //
  // (Value: 0x1B) The Escape key.
  //
  rpc Get_KeyCode_VK_ESCAPE(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_CONVERT
  //
  // (Value: 0x1C) The IME Convert key.
  //
  rpc Get_KeyCode_VK_CONVERT(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_NONCONVERT
  //
  // (Value: 0x1D) The IME Nonconvert key.
  //
  rpc Get_KeyCode_VK_NONCONVERT(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_ACCEPT
  //
  // (Value: 0x1E) The Input Method Editor (IME) Accept key.
  //
  rpc Get_KeyCode_VK_ACCEPT(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_MODECHANGE
  //
  // (Value: 0x1F) The IME Mode Change Request key.
  //
  rpc Get_KeyCode_VK_MODECHANGE(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_SPACE
  //
  // (Value: 0x20) The Space key.
  //
  rpc Get_KeyCode_VK_SPACE(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_PRIOR
  //
  // (Value: 0x21) The Page Up key.
  //
  rpc Get_KeyCode_VK_PRIOR(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_NEXT
  //
  // (Value: 0x22) The Page Down key.
  //
  rpc Get_KeyCode_VK_NEXT(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_END
  //
  // (Value: 0x23) The End key.
  //
  rpc Get_KeyCode_VK_END(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_HOME
  //
  // (Value: 0x24) The Home key.
  //
  rpc Get_KeyCode_VK_HOME(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_LEFT
  //
  // (Value: 0x25) The Left Arrow key.
  //
  rpc Get_KeyCode_VK_LEFT(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_UP
  //
  // (Value: 0x26) The Up Arrow key.
  //
  rpc Get_KeyCode_VK_UP(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_RIGHT
  //
  // (Value: 0x27) The Right Arrow key.
  //
  rpc Get_KeyCode_VK_RIGHT(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_DOWN
  //
  // (Value: 0x28) The Down Arrow key.
  //
  rpc Get_KeyCode_VK_DOWN(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_SELECT
  //
  // (Value: 0x29) The Select key.
  //
  rpc Get_KeyCode_VK_SELECT(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_PRINT
  //
  // (Value: 0x2A) The Print key.
  //
  rpc Get_KeyCode_VK_PRINT(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_EXECUTE
  //
  // (Value: 0x2B) The Execute key.
  //
  rpc Get_KeyCode_VK_EXECUTE(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_SNAPSHOT
  //
  // (Value: 0x2C) The Snapshot key.
  //
  rpc Get_KeyCode_VK_SNAPSHOT(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_INSERT
  //
  // (Value: 0x2D) The Insert key.
  //
  rpc Get_KeyCode_VK_INSERT(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_DELETE
  //
  // (Value: 0x2E) The Delete key.
  //
  rpc Get_KeyCode_VK_DELETE(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_HELP
  //
  // (Value: 0x2F) The Help key.
  //
  rpc Get_KeyCode_VK_HELP(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_0
  //
  // (Value: 0x30) The 0 key.
  //
  rpc Get_KeyCode_VK_0(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_1
  //
  // (Value: 0x31) The 1 key.
  //
  rpc Get_KeyCode_VK_1(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_2
  //
  // (Value: 0x32) The 2 key.
  //
  rpc Get_KeyCode_VK_2(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_3
  //
  // (Value: 0x33) The 3 key.
  //
  rpc Get_KeyCode_VK_3(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_4
  //
  // (Value: 0x34) The 4 key.
  //
  rpc Get_KeyCode_VK_4(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_5
  //
  // (Value: 0x35) The 5 key.
  //
  rpc Get_KeyCode_VK_5(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_6
  //
  // (Value: 0x36) The 6 key.
  //
  rpc Get_KeyCode_VK_6(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_7
  //
  // (Value: 0x37) The 7 key.
  //
  rpc Get_KeyCode_VK_7(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_8
  //
  // (Value: 0x38) The 8 key.
  //
  rpc Get_KeyCode_VK_8(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_9
  //
  // (Value: 0x39) The 9 key.
  //
  rpc Get_KeyCode_VK_9(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_A
  //
  // (Value: 0x41) The A key.
  //
  rpc Get_KeyCode_VK_A(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_B
  //
  // (Value: 0x42) The B key.
  //
  rpc Get_KeyCode_VK_B(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_C
  //
  // (Value: 0x43) The C key.
  //
  rpc Get_KeyCode_VK_C(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_D
  //
  // (Value: 0x44) The D key.
  //
  rpc Get_KeyCode_VK_D(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_E
  //
  // (Value: 0x45) The E key.
  //
  rpc Get_KeyCode_VK_E(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_F
  //
  // (Value: 0x46) The F key.
  //
  rpc Get_KeyCode_VK_F(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_G
  //
  // (Value: 0x47) The G key.
  //
  rpc Get_KeyCode_VK_G(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_H
  //
  // (Value: 0x48) The H key.
  //
  rpc Get_KeyCode_VK_H(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_I
  //
  // (Value: 0x49) The I key.
  //
  rpc Get_KeyCode_VK_I(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_J
  //
  // (Value: 0x4A) The J key.
  //
  rpc Get_KeyCode_VK_J(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_K
  //
  // (Value: 0x4B) The K key.
  //
  rpc Get_KeyCode_VK_K(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_L
  //
  // (Value: 0x4C) The L key.
  //
  rpc Get_KeyCode_VK_L(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_M
  //
  // (Value: 0x4D) The M key.
  //
  rpc Get_KeyCode_VK_M(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_N
  //
  // (Value: 0x4E) The N key.
  //
  rpc Get_KeyCode_VK_N(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_O
  //
  // (Value: 0x4F) The O key.
  //
  rpc Get_KeyCode_VK_O(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_P
  //
  // (Value: 0x50) The P key.
  //
  rpc Get_KeyCode_VK_P(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_Q
  //
  // (Value: 0x51) The Q key.
  //
  rpc Get_KeyCode_VK_Q(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_R
  //
  // (Value: 0x52) The R key.
  //
  rpc Get_KeyCode_VK_R(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_S
  //
  // (Value: 0x53) The S key.
  //
  rpc Get_KeyCode_VK_S(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_T
  //
  // (Value: 0x54) The T key.
  //
  rpc Get_KeyCode_VK_T(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_U
  //
  // (Value: 0x55) The U key.
  //
  rpc Get_KeyCode_VK_U(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_V
  //
  // (Value: 0x56) The V key.
  //
  rpc Get_KeyCode_VK_V(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_W
  //
  // (Value: 0x57) The W key.
  //
  rpc Get_KeyCode_VK_W(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_X
  //
  // (Value: 0x58) The X key.
  //
  rpc Get_KeyCode_VK_X(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_Y
  //
  // (Value: 0x59) The Y key.
  //
  rpc Get_KeyCode_VK_Y(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_Z
  //
  // (Value: 0x5A) The Z key.
  //
  rpc Get_KeyCode_VK_Z(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_LWIN
  //
  // (Value: 0x5B) The Left Microsoft Windows key.
  //
  rpc Get_KeyCode_VK_LWIN(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_RWIN
  //
  // (Value: 0x5C) The Right Microsoft Windows key.
  //
  rpc Get_KeyCode_VK_RWIN(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_APPS
  //
  // (Value: 0x5D) The Applications key.
  //
  rpc Get_KeyCode_VK_APPS(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_NUMPAD0
  //
  // (Value: 0x60) The numeric keypad 0 key.
  //
  rpc Get_KeyCode_VK_NUMPAD0(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_NUMPAD1
  //
  // (Value: 0x61) The numeric keypad 1 key.
  //
  rpc Get_KeyCode_VK_NUMPAD1(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_NUMPAD2
  //
  // (Value: 0x62) The numeric keypad 2 key.
  //
  rpc Get_KeyCode_VK_NUMPAD2(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_NUMPAD3
  //
  // (Value: 0x63) The numeric keypad 3 key.
  //
  rpc Get_KeyCode_VK_NUMPAD3(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_NUMPAD4
  //
  // (Value: 0x64) The numeric keypad 4 key.
  //
  rpc Get_KeyCode_VK_NUMPAD4(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_NUMPAD5
  //
  // (Value: 0x65) The numeric keypad 5 key.
  //
  rpc Get_KeyCode_VK_NUMPAD5(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_NUMPAD6
  //
  // (Value: 0x66) The numeric keypad 6 key.
  //
  rpc Get_KeyCode_VK_NUMPAD6(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_NUMPAD7
  //
  // (Value: 0x67) The numeric keypad 7 key.
  //
  rpc Get_KeyCode_VK_NUMPAD7(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_NUMPAD8
  //
  // (Value: 0x68) The numeric keypad 8 key.
  //
  rpc Get_KeyCode_VK_NUMPAD8(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_NUMPAD9
  //
  // (Value: 0x69) The numeric keypad 9 key.
  //
  rpc Get_KeyCode_VK_NUMPAD9(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_MULTIPLY
  //
  // (Value: 0x6A) The Multiply key.
  //
  rpc Get_KeyCode_VK_MULTIPLY(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_ADD
  //
  // (Value: 0x6B) The Add key.
  //
  rpc Get_KeyCode_VK_ADD(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_SEPARATOR
  //
  // (Value: 0x6C) The Separator key.
  //
  rpc Get_KeyCode_VK_SEPARATOR(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_SUBTRACT
  //
  // (Value: 0x6D) The Subtract key.
  //
  rpc Get_KeyCode_VK_SUBTRACT(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_DECIMAL
  //
  // (Value: 0x6E) The Decimal key.
  //
  rpc Get_KeyCode_VK_DECIMAL(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_DIVIDE
  //
  // (Value: 0x6F) The Divide key.
  //
  rpc Get_KeyCode_VK_DIVIDE(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_F1
  //
  // (Value: 0x70) The F1 key.
  //
  rpc Get_KeyCode_VK_F1(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_F2
  //
  // (Value: 0x71) The F2 key.
  //
  rpc Get_KeyCode_VK_F2(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_F3
  //
  // (Value: 0x72) The F3 key.
  //
  rpc Get_KeyCode_VK_F3(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_F4
  //
  // (Value: 0x73) The F4 key.
  //
  rpc Get_KeyCode_VK_F4(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_F5
  //
  // (Value: 0x74) The F5 key.
  //
  rpc Get_KeyCode_VK_F5(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_F6
  //
  // (Value: 0x75) The F6 key.
  //
  rpc Get_KeyCode_VK_F6(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_F7
  //
  // (Value: 0x76) The F7 key.
  //
  rpc Get_KeyCode_VK_F7(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_F8
  //
  // (Value: 0x77) The F8 key.
  //
  rpc Get_KeyCode_VK_F8(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_F9
  //
  // (Value: 0x78) The F9 key.
  //
  rpc Get_KeyCode_VK_F9(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_F10
  //
  // (Value: 0x79) The F10 key.
  //
  rpc Get_KeyCode_VK_F10(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_F11
  //
  // (Value: 0x7A) The F11 key.
  //
  rpc Get_KeyCode_VK_F11(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_F12
  //
  // (Value: 0x7B) The F12 key.
  //
  rpc Get_KeyCode_VK_F12(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_F13
  //
  // (Value: 0x7C) The F13 key.
  //
  rpc Get_KeyCode_VK_F13(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_F14
  //
  // (Value: 0x7D) The F14 key.
  //
  rpc Get_KeyCode_VK_F14(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_F15
  //
  // (Value: 0x7E) The F15 key.
  //
  rpc Get_KeyCode_VK_F15(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_F16
  //
  // (Value: 0x7F) The F16 key.
  //
  rpc Get_KeyCode_VK_F16(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_F17
  //
  // (Value: 0x80) The F17 key.
  //
  rpc Get_KeyCode_VK_F17(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_F18
  //
  // (Value: 0x81) The F18 key.
  //
  rpc Get_KeyCode_VK_F18(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_F19
  //
  // (Value: 0x82) The F19 key.
  //
  rpc Get_KeyCode_VK_F19(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_F20
  //
  // (Value: 0x83) The F20 key.
  //
  rpc Get_KeyCode_VK_F20(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_F21
  //
  // (Value: 0x84) The F21 key.
  //
  rpc Get_KeyCode_VK_F21(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_F22
  //
  // (Value: 0x85) The F22 key.
  //
  rpc Get_KeyCode_VK_F22(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_F23
  //
  // (Value: 0x86) The F23 key.
  //
  rpc Get_KeyCode_VK_F23(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_F24
  //
  // (Value: 0x87) The F24 key.
  //
  rpc Get_KeyCode_VK_F24(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_NUMLOCK
  //
  // (Value: 0x90) The Num Lock key.
  //
  rpc Get_KeyCode_VK_NUMLOCK(ConstantValueRequest) returns (int32Response);
  // Field: KeyCode_VK_SCROLL
  //
  // (Value: 0x91) The Scroll Lock key.
  //
  rpc Get_KeyCode_VK_SCROLL(ConstantValueRequest) returns (int32Response);
}

// module 

// KeyModifiers
//
// These constants specify the state of the <Shift>, <Ctrl>, and <Alt> keys for the KeyDown, KeyUp, MouseDown, MouseUp, and MouseMove events.
//
service KeyModifiers {
  // Field: KeyModifier_None
  //
  // (Value: 0x0) The <Shift>, <Ctrl>, and <Alt> keys are not pressed.
  //
  rpc Get_KeyModifier_None(ConstantValueRequest) returns (int32Response);
  // Field: KeyModifier_Shift
  //
  // (Value: 0x1) The <Shift> key is pressed.
  //
  rpc Get_KeyModifier_Shift(ConstantValueRequest) returns (int32Response);
  // Field: KeyModifier_Control
  //
  // (Value: 0x2) The <Ctrl> key is pressed.
  //
  rpc Get_KeyModifier_Control(ConstantValueRequest) returns (int32Response);
  // Field: KeyModifier_Alt
  //
  // (Value: 0x4) The <Alt> key is pressed.
  //
  rpc Get_KeyModifier_Alt(ConstantValueRequest) returns (int32Response);
}

// CheckBoxStyles
//
// Use these constants with CheckBox.Style to specify the style of the CheckBox control.
//
enum CheckBoxStyles {
  // Field: CheckBoxStyle_Normal
  //
  // (Value: 0) Specifies that the CheckBox control is normal in appearance.
  //
  CheckBoxStyle_Normal = 0;
  // Field: CheckBoxStyle_Button
  //
  // (Value: 1) Specifies that the CheckBox control is a toggle button that you can toggle to an up or down state.
  //
  CheckBoxStyle_Button = 1;
}

// ContentAlignmentStyles
//
// Use these constants to specify the alignment of content on the drawing surface.
//
enum ContentAlignmentStyles {
  // Field: ContentAlignmentStyle_MiddleLeft
  //
  // (Value: 0) Content is vertically aligned in the middle and horizontally aligned on the left.
  //
  ContentAlignmentStyle_MiddleLeft = 0;
  // Field: ContentAlignmentStyle_MiddleRight
  //
  // (Value: 1) Content is vertically aligned in the middle and horizontally aligned on the right.
  //
  ContentAlignmentStyle_MiddleRight = 1;
  // Field: ContentAlignmentStyle_MiddleCenter
  //
  // (Value: 2) Content is vertically aligned in the middle and horizontally aligned in the center.
  //
  ContentAlignmentStyle_MiddleCenter = 2;
  // Field: ContentAlignmentStyle_TopLeft
  //
  // (Value: 3) Content is vertically aligned at the top and horizontally aligned on the left.
  //
  ContentAlignmentStyle_TopLeft = 3;
  // Field: ContentAlignmentStyle_TopRight
  //
  // (Value: 4) Content is vertically aligned at the top and horizontally aligned on the right.
  //
  ContentAlignmentStyle_TopRight = 4;
  // Field: ContentAlignmentStyle_TopCenter
  //
  // (Value: 5) Content is vertically aligned at the top and horizontally aligned in the center.
  //
  ContentAlignmentStyle_TopCenter = 5;
  // Field: ContentAlignmentStyle_BottomLeft
  //
  // (Value: 6) Content is vertically aligned at the bottom and horizontally aligned on the left.
  //
  ContentAlignmentStyle_BottomLeft = 6;
  // Field: ContentAlignmentStyle_BottomRight
  //
  // (Value: 7) Content is vertically aligned at the bottom and horizontally aligned on the right.
  //
  ContentAlignmentStyle_BottomRight = 7;
  // Field: ContentAlignmentStyle_BottomCenter
  //
  // (Value: 8) Content is vertically aligned at the bottom and horizontally aligned in the center.
  //
  ContentAlignmentStyle_BottomCenter = 8;
}

// module 

// BlockDisplayOptions
//
// Use these constants with the SequenceView.BlockDisplayOptions property.
//
enum BlockDisplayOptions {
  // Field: BlockDisplayOption_None
  //
  // (Value: 0x0) No options.
  //
  BlockDisplayOption_None = 0;
  // Field: BlockDisplayOption_Indent
  //
  // (Value: 0x1) Indents the steps within a block.
  //
  BlockDisplayOption_Indent = 1;
  // Field: BlockDisplayOption_ShowLines
  //
  // (Value: 0x2) Draws a vertical bar to the left of the steps in a block.
  //
  BlockDisplayOption_ShowLines = 2;
  // Field: BlockDisplayOption_DottedLines
  //
  // (Value: 0x4) Draws the vertical bar to the left of the block with a dotted line.
  //
  BlockDisplayOption_DottedLines = 4;
  // Field: BlockDisplayOption_ShowStepIcons
  //
  // (Value: 0x8) Displays icons for steps that define or operate according to the block structure of the sequence.
  //
  BlockDisplayOption_ShowStepIcons = 8;
  // Field: BlockDisplayOption_BoldStepFont
  //
  // (Value: 0x10) Displays the step name in bold for steps that define or operate according to the block structure of the sequence.
  //
  BlockDisplayOption_BoldStepFont = 16;
  // Field: BlockDisplayOption_HighlightMismatchErrors
  //
  // (Value: 0x20) Draws the step name in red for steps that start blocks that do not have an End step and for block ending steps that do not match with a block starting step. Also draws the vertical block bar red for blocks that do not have an ending step.
  //
  BlockDisplayOption_HighlightMismatchErrors = 32;
  // Field: BlockDisplayOption_ShowGroupLines
  //
  // (Value: 0x40) Draws a vertical bar to the left of the steps in a step group.
  //
  BlockDisplayOption_ShowGroupLines = 64;
}

// module 

// ExpressionEditButtonKinds
//
// Use these constants with the ExpressionEditButtons.Insert method and the ExpressionEditButton.Kind property.
//
enum ExpressionEditButtonKinds {
  ExpressionEditButtonKinds_reservedZero = 0;
  // Field: ExpressionEditButtonKind_BrowseExpression
  //
  // (Value: 1) This kind of button calls the ExpressionEdit.DisplayBrowseExprDialog method. The ExpressionEditButton.Enabled, ExpressionEditButton.Icon, ExpressionEditButton.ToolTipText, and ExpressionEditButton.Visible properties are managed automatically for this kind of button.
  //
  ExpressionEditButtonKind_BrowseExpression = 1;
  // Field: ExpressionEditButtonKind_CheckExpression
  //
  // (Value: 2) This kind of button calls the ExpressionEdit.CheckExpression method and displays the result in a dialog box. The ExpressionEditButton.Enabled, ExpressionEditButton.Icon, ExpressionEditButton.ToolTipText, and ExpressionEditButton.Visible properties are managed automatically for this kind of button.
  //
  ExpressionEditButtonKind_CheckExpression = 2;
  // Field: ExpressionEditButtonKind_CustomBase
  //
  // (Value: 1000) Use constants starting at ExpressionEditButtonKind_CustomBase to define custom buttons. You define the behavior and appearance of custom buttons yourself. Use the ExpressionEdit.ButtonClick event to respond to button clicks.
  //
  ExpressionEditButtonKind_CustomBase = 1000;
}

// SpecifyExpressionEditButton
//
// Use these constants with the ExpressionEditButtons.GetItem and ExpressionEditButtons.Remove methods.
//
enum SpecifyExpressionEditButton {
  // Field: SpecifyButton_ByIndex
  //
  // (Value: 0) The indexOrKind parameter is a zero-based index of a button.
  //
  SpecifyButton_ByIndex = 0;
  // Field: SpecifyButton_ByKind
  //
  // (Value: 1) The indexOrKind parameter is an ExpressionEditButtonKinds constant.
  //
  SpecifyButton_ByKind = 1;
}

// ExpressionEditStyles
//
// Use these constants with the ExpressionEdit.Style property to specify the appearance of the control and how the control operates.
//
enum ExpressionEditStyles {
  // Field: ExpressionEditStyle_Edit
  //
  // (Value: 0) Specifies that the ExpressionEdit control is an edit control.
  //
  ExpressionEditStyle_Edit = 0;
  // Field: ExpressionEditStyle_DropDownCombo
  //
  // (Value: 1) Specifies that the ExpressionEdit control is a combo box control.
  //
  ExpressionEditStyle_DropDownCombo = 1;
}

// QueryReloadSequenceFileOptions
//
// Use these constants with the opt parameter of the ApplicationMgr.QueryReloadSequenceFile event.
//
enum QueryReloadSequenceFileOptions {
  // Field: QueryReloadSequenceFile_Prompt
  //
  // (Value: 0) The Application Manager control prompts the user to reload the sequence file.
  //
  QueryReloadSequenceFile_Prompt = 0;
  // Field: QueryReloadSequenceFile_Reload
  //
  // (Value: 1) The Application Manager control reloads the sequence file.
  //
  QueryReloadSequenceFile_Reload = 1;
  // Field: QueryReloadSequenceFile_Cancel
  //
  // (Value: 2) The Application Manager control does not reload the sequence file.
  //
  QueryReloadSequenceFile_Cancel = 2;
}

// StepGroupModes
//
// Use these constants with ExecutionViewMgr.StepGroupMode to specify how to display step groups.
//
enum StepGroupModes {
  StepGroupModes_reservedZero = 0;
  // Field: StepGroupMode_OneGroup
  //
  // (Value: 1) Displays only one step group.
  //
  StepGroupMode_OneGroup = 1;
  // Field: StepGroupMode_AllGroups
  //
  // (Value: 2) Displays the Setup, Main, and Cleanup step groups.
  //
  StepGroupMode_AllGroups = 2;
}

// module 

// EditingFlags
//
// This data type contains values that specify general editing capabilities you can selectively enable for certain controls.
//
enum EditingFlags {
  EditingFlags_reservedZero = 0;
  // Field: EditingFlag_CutPasteDelete
  //
  // (Value: 0x7) Cut, Paste, and Delete operations are allowed, when applicable.
  //
  EditingFlag_CutPasteDelete = 7;
  // Field: EditingFlag_Copy
  //
  // (Value: 8) Copy operation is allowed, when applicable.
  //
  EditingFlag_Copy = 8;
  // Field: EditingFlag_DragDrop
  //
  // (Value: 16) Drag and Drop operations are allowed, when applicable.
  //
  EditingFlag_DragDrop = 16;
  // Field: EditingFlag_Rename
  //
  // (Value: 32) You can rename items, when applicable.
  //
  EditingFlag_Rename = 32;
}

// ExpressionEditButtonStyles
//
// Use these constants with the ExpressionEditButton.Style property.
//
enum ExpressionEditButtonStyles {
  ExpressionEditButtonStyles_reservedZero = 0;
  // Field: ExpressionEditButtonStyle_System
  //
  // (Value: 1) The button looks like a standard button for the operating system of the user.
  //
  ExpressionEditButtonStyle_System = 1;
  // Field: ExpressionEditButtonStyle_Standard
  //
  // (Value: 2) The button is three-dimensional.
  //
  ExpressionEditButtonStyle_Standard = 2;
  // Field: ExpressionEditButtonStyle_Flat
  //
  // (Value: 3) The button is flat.
  //
  ExpressionEditButtonStyle_Flat = 3;
  // Field: ExpressionEditButtonStyle_ToolBarButton
  //
  // (Value: 4) This style is the same as ExpressionEditButtonStyle_System except when the application supports Microsoft Windows XP themes, the button has no border when you hover over the button.
  //
  ExpressionEditButtonStyle_ToolBarButton = 4;
}

// module 

// RefreshOptions
//
// Use these constants with the ApplicationMgr.Refresh method.
//
enum RefreshOptions {
  RefreshOptions_reservedZero = 0;
  // Field: RefreshOption_AllSequenceFileViewMgrs
  //
  // (Value: 0x1) Refresh all controls connected to any SequenceFileView Manager control.
  //
  RefreshOption_AllSequenceFileViewMgrs = 1;
  // Field: RefreshOption_AllExecutionViewMgrs
  //
  // (Value: 0x2) Refresh all controls connected to any ExecutionView Manager control.
  //
  RefreshOption_AllExecutionViewMgrs = 2;
  // Field: RefreshOption_Commands
  //
  // (Value: 0x4) Refresh all commands connected to the Application Manager control.
  //
  RefreshOption_Commands = 4;
  // Field: RefreshOption_Captions
  //
  // (Value: 0x8) Refresh all captions connected to the Application Manager control.
  //
  RefreshOption_Captions = 8;
  // Field: RefreshOption_AllCommands
  //
  // (Value: 0x10) Refresh all commands connected to any manager control.
  //
  RefreshOption_AllCommands = 16;
  // Field: RefreshOption_AllCaptions
  //
  // (Value: 0x20) Refresh all captions connected to any manager control.
  //
  RefreshOption_AllCaptions = 32;
  // Field: RefreshOption_AdapterList
  //
  // (Value: 0x40) Refresh the connected adapter list.
  //
  RefreshOption_AdapterList = 64;
  // Field: RefreshOption_EntryPoints
  //
  // (Value: 0x80) Refresh the ApplicationMgr.ExecutionEntryPoints and ApplicationMgr.ConfigurationEntryPoints properties.
  //
  RefreshOption_EntryPoints = 128;
  // Field: RefreshOption_All
  //
  // (Value: 0xFFFFFFFF) Refresh all controls connected to any manager control.
  //
  RefreshOption_All = -1;
}

// module 

// EditingDenialReasons
//
// This data type contains values that indicate reasons why an editing action cannot take place. Use these constants with the ApplicationMgr.BeginEdit and ApplicationMgr.CanEdit events.
//
enum EditingDenialReasons {
  EditingDenialReasons_reservedZero = 0;
  // Field: EditingDenialReason_IsReadOnly
  //
  // (Value: 0x1) Editing is blocked because the file to edit is read-only.
  //
  EditingDenialReason_IsReadOnly = 1;
  // Field: EditingDenialReason_IsNotEditor
  //
  // (Value: 0x2) Editing is blocked because the value of the ApplicationMgr.IsEditor property is False.
  //
  EditingDenialReason_IsNotEditor = 2;
  // Field: EditingDenialReason_IsExecuting
  //
  // (Value: 0x4) Editing is blocked because the file to edit is executing.
  //
  EditingDenialReason_IsExecuting = 4;
  // Field: EditingDenialReason_IsLocked
  //
  // (Value: 0x8) Editing is blocked because the file to edit is locked.
  //
  EditingDenialReason_IsLocked = 8;
  // Field: EditingDenialReason_NoFileEditingPrivilege
  //
  // (Value: 0x10) Editing is blocked because the current user does not have privileges to edit the file.
  //
  EditingDenialReason_NoFileEditingPrivilege = 16;
}

// ConnectionActivityTypes
//
// This data type contains values that specify the type of change or refresh the connection to a manager control makes to a user interface control. Use these values with a ConnectionActivity event.
//
enum ConnectionActivityTypes {
  ConnectionActivityTypes_reservedZero = 0;
  // Field: ConnectionActivityType_TextChange
  //
  // (Value: 1) The connection changed or refreshed the text of the control.
  //
  ConnectionActivityType_TextChange = 1;
  // Field: ConnectionActivityType_NumberChange
  //
  // (Value: 2) The connection changed or refreshed the numerical value of the control.
  //
  ConnectionActivityType_NumberChange = 2;
  // Field: ConnectionActivityType_BooleanChange
  //
  // (Value: 3) The connection changed or refreshed the Boolean value of the control.
  //
  ConnectionActivityType_BooleanChange = 3;
  // Field: ConnectionActivityType_ImageChange
  //
  // (Value: 4) The connection changed or refreshed an image the control displays.
  //
  ConnectionActivityType_ImageChange = 4;
  // Field: ConnectionActivityType_ContentChange
  //
  // (Value: 5) The connection changed or refreshed the contents of the control, such as the available items in a Listbox, Combobox, ReportView, or ListBarPage.
  //
  ConnectionActivityType_ContentChange = 5;
  // Field: ConnectionActivityType_CursorOrSelectionChange
  //
  // (Value: 6) The connection changed or refreshed the cursor or selection in the control.
  //
  ConnectionActivityType_CursorOrSelectionChange = 6;
  // Field: ConnectionActivityType_EnabledChange
  //
  // (Value: 7) The connection changed or refreshed the enabled state of the control.
  //
  ConnectionActivityType_EnabledChange = 7;
  // Field: ConnectionActivityType_VisibleChange
  //
  // (Value: 8) The connection changed or refreshed the visibility of the control.
  //
  ConnectionActivityType_VisibleChange = 8;
}

// ContextChangedReasons
//
// The ExpressionEdit control passes one of these constants as the reason parameter to the ExpressionEdit.ContextChanged event to specify why the ExpressionEdit control generated the ExpressionEdit.ContextChanged event.
//
enum ContextChangedReasons {
  ContextChangedReasons_reservedZero = 0;
  // Field: ContextChangedReason_SetContext
  //
  // (Value: 1) Specifies that the application programmatically set the ExpressionEdit.Context property to a new value.
  //
  ContextChangedReason_SetContext = 1;
  // Field: ContextChangedReason_VariableCreatedFromContextMenu
  //
  // (Value: 2) Specifies that the user modified the context the ExpressionEdit.Context property specifies when creating a variable through the context menu in the ExpressionEdit control.
  //
  ContextChangedReason_VariableCreatedFromContextMenu = 2;
  // Field: ContextChangedReason_ExpressionBrowserDialogBox
  //
  // (Value: 3) Specifies that the user modified the context the ExpressionEdit.Context property specifies through the context menu in the Expression Browser dialog box.  A user can rename, insert, or delete properties. This constant is not set when the user modifies only the value of a variable or property.
  //
  ContextChangedReason_ExpressionBrowserDialogBox = 3;
}

// AutomaticallyReloadModifiedFilesOptions
//
// Use these constants with the ApplicationMgr.AutomaticallyReloadModifiedFiles property.
//
enum AutomaticallyReloadModifiedFilesOptions {
  AutomaticallyReloadModifiedFilesOptions_reservedZero = 0;
  // Field: AutomaticallyReloadModifiedFilesOption_DoNotReload
  //
  // (Value: 1) Specifies that the Application Manager control never calls the ApplicationMgr.ReloadModifiedSequenceFilesEx method. You must call the ApplicationMgr.ReloadModifiedSequenceFilesEx method to reload modified sequence files.
  //
  AutomaticallyReloadModifiedFilesOption_DoNotReload = 1;
  // Field: AutomaticallyReloadModifiedFilesOption_OnTimer
  //
  // (Value: 2) Specifies that the Application Manager control calls the ApplicationMgr.ReloadModifiedSequenceFilesEx method at the interval you specify with the ApplicationMgr.ReloadModifiedFilesInterval property.
  //
  AutomaticallyReloadModifiedFilesOption_OnTimer = 2;
  // Field: AutomaticallyReloadModifiedFilesOption_OnActivateApplication
  //
  // (Value: 3) Specifies that the Application Manager control calls the ApplicationMgr.ReloadModifiedSequenceFilesEx method when you activate the application.
  //
  AutomaticallyReloadModifiedFilesOption_OnActivateApplication = 3;
}

// ButtonStyles
//
// Use these constants with the Button.Style property to specify the appearance of the button and how the button operates.
//
enum ButtonStyles {
  ButtonStyles_reservedZero = 0;
  // Field: ButtonStyle_Standard
  //
  // (Value: 1) The button displays a three-dimensional border.
  //
  // 
  //
  ButtonStyle_Standard = 1;
  // Field: ButtonStyle_ToolBar
  //
  // (Value: 2) You cannot tab to the button. When the application supports Microsoft Windows XP themes, the button displays a border only when you hover over it.
  //
  ButtonStyle_ToolBar = 2;
}

// TextImageRelations
//
// Use these constants with Button.TextImageRelation to specify how to display the image in relation to the text.
//
enum TextImageRelations {
  // Field: TextImageRelation_Overlay
  //
  // (Value: 0) Displays the image behind the text.
  //
  TextImageRelation_Overlay = 0;
  // Field: TextImageRelation_ImageBelowText
  //
  // (Value: 1) Displays the image below the text.
  //
  TextImageRelation_ImageBelowText = 1;
  // Field: TextImageRelation_ImageAboveText
  //
  // (Value: 2) Displays the image above the text.
  //
  TextImageRelation_ImageAboveText = 2;
  // Field: TextImageRelation_ImageBeforeText
  //
  // (Value: 3) Displays the image to the left of the text.
  //
  TextImageRelation_ImageBeforeText = 3;
  // Field: TextImageRelation_ImageAfterText
  //
  // (Value: 4) Displays the image to the right of the text.
  //
  TextImageRelation_ImageAfterText = 4;
}

// ButtonActionStyles
//
// Use these constants with Button.ActionStyle to specify how the button behaves when you click it.
//
enum ButtonActionStyles {
  // Field: ButtonActionStyle_PushButton
  //
  // (Value: 0) Specifies that the button changes to a pressed state only when you click it.
  //
  ButtonActionStyle_PushButton = 0;
  // Field: ButtonActionStyle_ToggleButton
  //
  // (Value: 1) Specifies that the button changes to a pressed state when you set the Button.Value property to True and changes to a normal state when you set the value to False.
  //
  ButtonActionStyle_ToggleButton = 1;
}

// ProcessCommandLineErrors
//
// Use these constants in the ApplicationMgr.ProcessUserCommandLineArguments event to specify an error that occurs while processing the command line.
//
enum ProcessCommandLineErrors {
  // Field: ProcessCommandLineError_None
  //
  // (Value: 0) Specifies that no error occurred while processing the command line.
  //
  ProcessCommandLineError_None = 0;
  // Field: ProcessCommandLineError_UnrecognizedArgumentError
  //
  // (Value: 1) Specifies that you encountered an unrecognized command-line argument while processing the command line.
  //
  ProcessCommandLineError_UnrecognizedArgumentError = 1;
  // Field: ProcessCommandLineError_CustomError
  //
  // (Value: 2) Specifies that an error you define occurred while processing the command line.
  //
  ProcessCommandLineError_CustomError = 2;
}

// AutoSizingOptions
//
// Use these constants with the SeqViewColumn.Autosizing and ListBoxColumn.Autosizing properties.
//
enum AutoSizingOptions {
  // Field: AutoSizingOption_None
  //
  // (Value: 0) The item does not automatically resize itself.
  //
  AutoSizingOption_None = 0;
  // Field: AutoSizingOption_Proportional
  //
  // (Value: 1) The item resizes when the container resizes. The item determines the amount to resize from the proportion that the current size occupies of the total size of all resizable items in the same container.
  //
  AutoSizingOption_Proportional = 1;
}

// module 

// ReloadFileOptions
//
// Use these constants with the ApplicationMgr.ReloadFile method.
// 
//
enum ReloadFileOptions {
  // Field: ReloadFileOption_NoOptions
  //
  // (Value 0x0) No options.
  //
  ReloadFileOption_NoOptions = 0;
  // Field: ReloadFileOption_OnlyIfModifiedOnDisk
  //
  // (Value 0x1) Use this option when you want to make reloading occur conditionally based on whether the file has been modified on disk since the user was last prompted to reload it. You can combine this option with ReloadFileOption_OnlyIfModifiedInMemory.
  //
  ReloadFileOption_OnlyIfModifiedOnDisk = 1;
  // Field: ReloadFileOption_OnlyIfModifiedInMemory
  //
  // (Value 0x2) Use this option when you want to make reloading occur conditionally based on whether the file is modified in memory. You can combine this option with ReloadFileOption_OnlyIfModifiedOnDisk.
  //
  ReloadFileOption_OnlyIfModifiedInMemory = 2;
}

// Borders
//
// A Borders object specifies the frame and draggable borders that surround a control. A frame is a thin rectangle that surrounds a control on all sides. A draggable border is a rectangular strip of configurable thickness you can place on any combination of the edges of a control. When the application handles the BorderDragged event for the control, users can drag the borders to resize or move the control.
// When a control fills a rectangular view area of an application window, you can enable the draggable borders to implement splitter bars that resize the view. Although you can implement splitter bars in some environments without using draggable borders, some environments do not provide any other way to create a splitter bar. For other environments, creating a resizable view using draggable borders is sometimes simpler than using a separate splitter bar. You can also disable the BorderDragged event for a control to use borders for their cosmetic effect only.
//
service Borders {
  // Method: GetFrameThickness
  //
  // Returns the vertical and horizontal thickness of the frame around the control. The values returned are based on the frame visibility and style.
  //
  // Borders_GetFrameThicknessRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: BordersInstance - The id of the Borders object.
  //
  // Borders_GetFrameThicknessResponse - The response message from the server. It provides the output parameters.
  //    - verticalThickness: int3 - Returns the thickness, in pixels, of the vertical portion of the frame.
  //    - horizontalThickness: int3 - Returns the thickness, in pixels, of the horizontal portion of the frame.
  //
  rpc GetFrameThickness(Borders_GetFrameThicknessRequest) returns (Borders_GetFrameThicknessResponse);
  
  

  // Property: VisibleBorders
  //
  // Specifies which draggable borders the control displays.
  //
  // Use any combination of the WhichBorders constants. Use the bitwise-OR operator to specify more than one value.
  //
  // Borders_Set_VisibleBordersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: BordersInstance - The id of the Borders object.
  //    - val: int32 - Specifies which draggable borders the control displays. 
  //
  // Borders_Set_VisibleBordersResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Borders_Get_VisibleBordersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: BordersInstance - The id of the Borders object.
  //
  // Borders_Get_VisibleBordersResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies which draggable borders the control displays. 
  //
  rpc Set_VisibleBorders(Borders_Set_VisibleBordersRequest) returns (Borders_Set_VisibleBordersResponse);
  rpc Get_VisibleBorders(Borders_Get_VisibleBordersRequest) returns (Borders_Get_VisibleBordersResponse);
  
  
  // Property: BorderWidth
  //
  // Specifies the width of the draggable borders the control displays.
  //
  // Borders_Set_BorderWidthRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: BordersInstance - The id of the Borders object.
  //    - val: int32 - Specifies the width of the draggable borders the control displays. 
  //
  // Borders_Set_BorderWidthResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Borders_Get_BorderWidthRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: BordersInstance - The id of the Borders object.
  //
  // Borders_Get_BorderWidthResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the width of the draggable borders the control displays. 
  //
  rpc Set_BorderWidth(Borders_Set_BorderWidthRequest) returns (Borders_Set_BorderWidthResponse);
  rpc Get_BorderWidth(Borders_Get_BorderWidthRequest) returns (Borders_Get_BorderWidthResponse);
  
  
  // Property: BorderEdgeStyle
  //
  // Specifies the appearance of the draggable borders the control displays.
  //
  // Borders_Set_BorderEdgeStyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: BordersInstance - The id of the Borders object.
  //    - val: EdgeStyles - Specifies the appearance of the draggable borders the control displays. 
  //
  // Borders_Set_BorderEdgeStyleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Borders_Get_BorderEdgeStyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: BordersInstance - The id of the Borders object.
  //
  // Borders_Get_BorderEdgeStyleResponse - The response message from the server. It provides the return value.
  //    - returnValue: EdgeStyles - Specifies the appearance of the draggable borders the control displays. 
  //
  rpc Set_BorderEdgeStyle(Borders_Set_BorderEdgeStyleRequest) returns (Borders_Set_BorderEdgeStyleResponse);
  rpc Get_BorderEdgeStyle(Borders_Get_BorderEdgeStyleRequest) returns (Borders_Get_BorderEdgeStyleResponse);
  
  
  // Property: FrameEdgeStyle
  //
  // Specifies the appearance of the frame the control displays.
  //
  // Borders_Set_FrameEdgeStyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: BordersInstance - The id of the Borders object.
  //    - val: EdgeStyles - Specifies the appearance of the frame the control displays. 
  //
  // Borders_Set_FrameEdgeStyleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Borders_Get_FrameEdgeStyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: BordersInstance - The id of the Borders object.
  //
  // Borders_Get_FrameEdgeStyleResponse - The response message from the server. It provides the return value.
  //    - returnValue: EdgeStyles - Specifies the appearance of the frame the control displays. 
  //
  rpc Set_FrameEdgeStyle(Borders_Set_FrameEdgeStyleRequest) returns (Borders_Set_FrameEdgeStyleResponse);
  rpc Get_FrameEdgeStyle(Borders_Get_FrameEdgeStyleRequest) returns (Borders_Get_FrameEdgeStyleResponse);
  
  
  // Property: FrameVisible
  //
  // When this property is True, the control displays a thin rectangular frame that surrounds the control.
  //
  // Borders_Set_FrameVisibleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: BordersInstance - The id of the Borders object.
  //    - val: bool - When this property is True, the control displays a thin rectangular frame that surrounds the control. 
  //
  // Borders_Set_FrameVisibleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Borders_Get_FrameVisibleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: BordersInstance - The id of the Borders object.
  //
  // Borders_Get_FrameVisibleResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When this property is True, the control displays a thin rectangular frame that surrounds the control. 
  //
  rpc Set_FrameVisible(Borders_Set_FrameVisibleRequest) returns (Borders_Set_FrameVisibleResponse);
  rpc Get_FrameVisible(Borders_Get_FrameVisibleRequest) returns (Borders_Get_FrameVisibleResponse);
  
  
  // Property: FrameInsideBorders
  //
  // When this property is True, the control displays the frame within the draggable borders. When this property is False, the control displays the frame around the draggable borders.
  //
  // Borders_Set_FrameInsideBordersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: BordersInstance - The id of the Borders object.
  //    - val: bool - When this property is True, the control displays the frame within the draggable borders. When this property is False, the control displays the frame around the draggable borders. 
  //
  // Borders_Set_FrameInsideBordersResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Borders_Get_FrameInsideBordersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: BordersInstance - The id of the Borders object.
  //
  // Borders_Get_FrameInsideBordersResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When this property is True, the control displays the frame within the draggable borders. When this property is False, the control displays the frame around the draggable borders. 
  //
  rpc Set_FrameInsideBorders(Borders_Set_FrameInsideBordersRequest) returns (Borders_Set_FrameInsideBordersResponse);
  rpc Get_FrameInsideBorders(Borders_Get_FrameInsideBordersRequest) returns (Borders_Get_FrameInsideBordersResponse);
  
  
  // Property: BorderDraggedEventEnabled
  //
  // When this property is True, the control displays a resizing cursor over the draggable borders, and the control generates BorderDragged events when the user drags a draggable border with the mouse.
  //
  // Borders_Set_BorderDraggedEventEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: BordersInstance - The id of the Borders object.
  //    - val: bool - When this property is True, the control displays a resizing cursor over the draggable borders, and the control generates BorderDragged events when the user drags a draggable border with the mouse. 
  //
  // Borders_Set_BorderDraggedEventEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Borders_Get_BorderDraggedEventEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: BordersInstance - The id of the Borders object.
  //
  // Borders_Get_BorderDraggedEventEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When this property is True, the control displays a resizing cursor over the draggable borders, and the control generates BorderDragged events when the user drags a draggable border with the mouse. 
  //
  rpc Set_BorderDraggedEventEnabled(Borders_Set_BorderDraggedEventEnabledRequest) returns (Borders_Set_BorderDraggedEventEnabledResponse);
  rpc Get_BorderDraggedEventEnabled(Borders_Get_BorderDraggedEventEnabledRequest) returns (Borders_Get_BorderDraggedEventEnabledResponse);
  
  
  // Property: FrameEdgeUIStyleColor
  //
  // Specifies the color to use for the frame and draggable borders when using the option EdgeStyles.EdgeStyle_UI. The default color is COLOR_3DFACE.
  //
  // Borders_Set_FrameEdgeUIStyleColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: BordersInstance - The id of the Borders object.
  //    - val: uint32 - Specifies the color to use for the frame and draggable borders when using the option EdgeStyles.EdgeStyle_UI. The default color is COLOR_3DFACE. 
  //
  // Borders_Set_FrameEdgeUIStyleColorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Borders_Get_FrameEdgeUIStyleColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: BordersInstance - The id of the Borders object.
  //
  // Borders_Get_FrameEdgeUIStyleColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Specifies the color to use for the frame and draggable borders when using the option EdgeStyles.EdgeStyle_UI. The default color is COLOR_3DFACE. 
  //
  rpc Set_FrameEdgeUIStyleColor(Borders_Set_FrameEdgeUIStyleColorRequest) returns (Borders_Set_FrameEdgeUIStyleColorResponse);
  rpc Get_FrameEdgeUIStyleColor(Borders_Get_FrameEdgeUIStyleColorRequest) returns (Borders_Get_FrameEdgeUIStyleColorResponse);
  
  
}
message BordersInstance {
  // Specifies the handle of the Borders instance in the server.
  string id = 1;
}
message Borders_GetFrameThicknessRequest {
  // The id of the Borders object.
  BordersInstance instance = 1;
}

message Borders_GetFrameThicknessResponse {
  // Returns the thickness, in pixels, of the vertical portion of the frame.
  int32 verticalThickness = 1;
  // Returns the thickness, in pixels, of the horizontal portion of the frame.
  int32 horizontalThickness = 2;
}

message Borders_Set_VisibleBordersRequest {
  // The id of the Borders object.
  BordersInstance instance = 1;
  // Specifies which draggable borders the control displays.
  WhichBorders val = 2;
}

message Borders_Set_VisibleBordersResponse {
}

message Borders_Get_VisibleBordersRequest {
  // The id of the Borders object.
  BordersInstance instance = 1;
}

message Borders_Get_VisibleBordersResponse {
  // Specifies which draggable borders the control displays.
  WhichBorders returnValue = 1;
}

message Borders_Set_BorderWidthRequest {
  // The id of the Borders object.
  BordersInstance instance = 1;
  // Specifies the width of the draggable borders the control displays.
  int32 val = 2;
}

message Borders_Set_BorderWidthResponse {
}

message Borders_Get_BorderWidthRequest {
  // The id of the Borders object.
  BordersInstance instance = 1;
}

message Borders_Get_BorderWidthResponse {
  // Specifies the width of the draggable borders the control displays.
  int32 returnValue = 1;
}

message Borders_Set_BorderEdgeStyleRequest {
  // The id of the Borders object.
  BordersInstance instance = 1;
  // Specifies the appearance of the draggable borders the control displays.
  EdgeStyles val = 2;
}

message Borders_Set_BorderEdgeStyleResponse {
}

message Borders_Get_BorderEdgeStyleRequest {
  // The id of the Borders object.
  BordersInstance instance = 1;
}

message Borders_Get_BorderEdgeStyleResponse {
  // Specifies the appearance of the draggable borders the control displays.
  EdgeStyles returnValue = 1;
}

message Borders_Set_FrameEdgeStyleRequest {
  // The id of the Borders object.
  BordersInstance instance = 1;
  // Specifies the appearance of the frame the control displays.
  EdgeStyles val = 2;
}

message Borders_Set_FrameEdgeStyleResponse {
}

message Borders_Get_FrameEdgeStyleRequest {
  // The id of the Borders object.
  BordersInstance instance = 1;
}

message Borders_Get_FrameEdgeStyleResponse {
  // Specifies the appearance of the frame the control displays.
  EdgeStyles returnValue = 1;
}

message Borders_Set_FrameVisibleRequest {
  // The id of the Borders object.
  BordersInstance instance = 1;
  // When this property is True, the control displays a thin rectangular frame that surrounds the control.
  bool val = 2;
}

message Borders_Set_FrameVisibleResponse {
}

message Borders_Get_FrameVisibleRequest {
  // The id of the Borders object.
  BordersInstance instance = 1;
}

message Borders_Get_FrameVisibleResponse {
  // When this property is True, the control displays a thin rectangular frame that surrounds the control.
  bool returnValue = 1;
}

message Borders_Set_FrameInsideBordersRequest {
  // The id of the Borders object.
  BordersInstance instance = 1;
  // When this property is True, the control displays the frame within the draggable borders. When this property is False, the control displays the frame around the draggable borders.
  bool val = 2;
}

message Borders_Set_FrameInsideBordersResponse {
}

message Borders_Get_FrameInsideBordersRequest {
  // The id of the Borders object.
  BordersInstance instance = 1;
}

message Borders_Get_FrameInsideBordersResponse {
  // When this property is True, the control displays the frame within the draggable borders. When this property is False, the control displays the frame around the draggable borders.
  bool returnValue = 1;
}

message Borders_Set_BorderDraggedEventEnabledRequest {
  // The id of the Borders object.
  BordersInstance instance = 1;
  // When this property is True, the control displays a resizing cursor over the draggable borders, and the control generates BorderDragged events when the user drags a draggable border with the mouse.
  bool val = 2;
}

message Borders_Set_BorderDraggedEventEnabledResponse {
}

message Borders_Get_BorderDraggedEventEnabledRequest {
  // The id of the Borders object.
  BordersInstance instance = 1;
}

message Borders_Get_BorderDraggedEventEnabledResponse {
  // When this property is True, the control displays a resizing cursor over the draggable borders, and the control generates BorderDragged events when the user drags a draggable border with the mouse.
  bool returnValue = 1;
}

message Borders_Set_FrameEdgeUIStyleColorRequest {
  // The id of the Borders object.
  BordersInstance instance = 1;
  // Specifies the color to use for the frame and draggable borders when using the option EdgeStyles.EdgeStyle_UI. The default color is COLOR_3DFACE.
  uint32 val = 2;
}

message Borders_Set_FrameEdgeUIStyleColorResponse {
}

message Borders_Get_FrameEdgeUIStyleColorRequest {
  // The id of the Borders object.
  BordersInstance instance = 1;
}

message Borders_Get_FrameEdgeUIStyleColorResponse {
  // Specifies the color to use for the frame and draggable borders when using the option EdgeStyles.EdgeStyle_UI. The default color is COLOR_3DFACE.
  uint32 returnValue = 1;
}

// ExpressionEditButtons
//
// A collection of ExpressionEditButton objects. Use the ExpressionEdit.Buttons property to retrieve the ExpressionEditButtons object for an ExpressionEdit control.
//
service ExpressionEditButtons {
  // Method: GetItem
  //
  // Returns the ExpressionEdit button at the specified index or of the specified kind.
  //
  // ExpressionEditButtons_GetItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExpressionEditButtonsInstance - The id of the ExpressionEditButtons object.
  //    - indexOrKind: int32 - When you pass SpecifyButton_ByIndex as the specify parameter, indexOrKind is the zero-based index of the button to return. When you pass SpecifyButton_ByKind, the first button in the collection with a kind of indexOrKind is returned or NULL is returned when no button with a kind of indexOrKind exists.
  //    - specify: SpecifyExpressionEditButton - Specifies whether indexOrKind is a button index or a button kind.
  //
  // ExpressionEditButtons_GetItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExpressionEditButtonInstance - The return type of the ExpressionEditButton object.
  //
  rpc GetItem(ExpressionEditButtons_GetItemRequest) returns (ExpressionEditButtons_GetItemResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // ExpressionEditButtons_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditButtonsInstance - The id of the ExpressionEditButtons object.
  //
  // ExpressionEditButtons_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(ExpressionEditButtons_ClearRequest) returns (ExpressionEditButtons_ClearResponse);
  
  
  // Method: Insert
  //
  // Adds a new item to the collection.
  //
  // ExpressionEditButtons_InsertRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExpressionEditButtonsInstance - The id of the ExpressionEditButtons object.
  //    - itemIndexParam: int32 - Specifies the zero-based index where the new button is inserted. Pass -1 to insert the ExpressionEdit button at the end of the collection.
  //
  // ExpressionEditButtons_InsertResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExpressionEditButtonInstance - The button added to the collection. 
  //
  rpc Insert(ExpressionEditButtons_InsertRequest) returns (ExpressionEditButtons_InsertResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // ExpressionEditButtons_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExpressionEditButtonsInstance - The id of the ExpressionEditButtons object.
  //    - indexOrKind: int32 - When you pass SpecifyButton_ByIndex as the specify parameter, indexOrKind is the zero-based index of the button to remove from the collection. When you pass SpecifyButton_ByKind, all buttons with a kind of indexOrKind are removed from the collection.
  //    - specify: SpecifyExpressionEditButton - Specifies whether indexOrKind is a button index or a button kind.
  //
  // ExpressionEditButtons_RemoveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Remove(ExpressionEditButtons_RemoveRequest) returns (ExpressionEditButtons_RemoveResponse);
  
  

  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // ExpressionEditButtons_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditButtonsInstance - The id of the ExpressionEditButtons object.
  //
  // ExpressionEditButtons_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(ExpressionEditButtons_Get_CountRequest) returns (ExpressionEditButtons_Get_CountResponse);
  
  
}
message ExpressionEditButtonsInstance {
  // Specifies the handle of the ExpressionEditButtons instance in the server.
  string id = 1;
}

message ExpressionEditButtonInstance {
  // Specifies the handle of the ExpressionEditButton instance in the server.
  string id = 1;
}
message ExpressionEditButtons_GetItemRequest {
  // The id of the ExpressionEditButtons object.
  ExpressionEditButtonsInstance instance = 1;
  // When you pass SpecifyButton_ByIndex as the specify parameter, indexOrKind is the zero-based index of the button to return. When you pass SpecifyButton_ByKind, the first button in the collection with a kind of indexOrKind is returned or NULL is returned when no button with a kind of indexOrKind exists.
  int32 indexOrKind = 2;
  // Specifies whether indexOrKind is a button index or a button kind.
  SpecifyExpressionEditButton specify = 3;
}

message ExpressionEditButtons_GetItemResponse {
  // The return type of the ExpressionEditButton object.
  ExpressionEditButtonInstance returnValue = 1;
}

message ExpressionEditButtons_ClearRequest {
  // The id of the ExpressionEditButtons object.
  ExpressionEditButtonsInstance instance = 1;
}

message ExpressionEditButtons_ClearResponse {
}

message ExpressionEditButtons_InsertRequest {
  // The id of the ExpressionEditButtons object.
  ExpressionEditButtonsInstance instance = 1;
  // Specifies the zero-based index where the new button is inserted. Pass -1 to insert the ExpressionEdit button at the end of the collection.
  int32 itemIndexParam = 2;
  // Use the ExpressionEditButtonKinds constants to specify what kind of ExpressionEdit button is created.
  ExpressionEditButtonKinds Kind = 3;
}

message ExpressionEditButtons_InsertResponse {
  // The button added to the collection.
  ExpressionEditButtonInstance returnValue = 1;
}

message ExpressionEditButtons_RemoveRequest {
  // The id of the ExpressionEditButtons object.
  ExpressionEditButtonsInstance instance = 1;
  // When you pass SpecifyButton_ByIndex as the specify parameter, indexOrKind is the zero-based index of the button to remove from the collection. When you pass SpecifyButton_ByKind, all buttons with a kind of indexOrKind are removed from the collection.
  int32 indexOrKind = 2;
  // Specifies whether indexOrKind is a button index or a button kind.
  SpecifyExpressionEditButton specify = 3;
}

message ExpressionEditButtons_RemoveResponse {
}

message ExpressionEditButtons_Get_CountRequest {
  // The id of the ExpressionEditButtons object.
  ExpressionEditButtonsInstance instance = 1;
}

message ExpressionEditButtons_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// ExpressionEditButton
//
// An ExpressionEditButton can be a non-custom button, such as an Expression Browser button, which the ExpressionEdit control manages automatically. An ExpressionEditButton can also be a custom button. You can manage the custom button using the properties of an ExpressionEditButton.
//
service ExpressionEditButton {
  // Method: DoClick
  //
  // Call this method to simulate a button click.
  //
  // You can call this method to simulate a button click when the button is disabled or invisible.
  //
  // ExpressionEditButton_DoClickRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditButtonInstance - The id of the ExpressionEditButton object.
  //
  // ExpressionEditButton_DoClickResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc DoClick(ExpressionEditButton_DoClickRequest) returns (ExpressionEditButton_DoClickResponse);
  
  

  // Property: Enabled
  //
  // The control responds to user-generated events only when this property is True.
  //
  // The ExpressionEdit button is disabled when this property is False or the ExpressionEdit.Enabled property is False.
  //
  // ExpressionEditButton_Set_EnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditButtonInstance - The id of the ExpressionEditButton object.
  //    - val: bool - The control responds to user-generated events only when this property is True. 
  //
  // ExpressionEditButton_Set_EnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEditButton_Get_EnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditButtonInstance - The id of the ExpressionEditButton object.
  //
  // ExpressionEditButton_Get_EnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The control responds to user-generated events only when this property is True. 
  //
  rpc Set_Enabled(ExpressionEditButton_Set_EnabledRequest) returns (ExpressionEditButton_Set_EnabledResponse);
  rpc Get_Enabled(ExpressionEditButton_Get_EnabledRequest) returns (ExpressionEditButton_Get_EnabledResponse);
  
  
  // Property: hWnd
  //
  // Returns the Window handle of the ExpressionEdit button.
  //
  // You can use the returned Window handle with the Microsoft Windows API functions.
  // Note: Using Windows API functions with this property can cause undefined behavior.
  //
  // ExpressionEditButton_Get_hWndRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditButtonInstance - The id of the ExpressionEditButton object.
  //
  // ExpressionEditButton_Get_hWndResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the Window handle of the ExpressionEdit button. 
  //
  rpc Get_hWnd(ExpressionEditButton_Get_hWndRequest) returns (ExpressionEditButton_Get_hWndResponse);
  
  
  // Property: Icon
  //
  // Specifies the picture the ExpressionEdit button displays.
  //
  // To programmatically add an icon to a custom button, store the icon in the <TestStand Public>\Components\Icons directory and use the following pseudocode to set the image to use:
  // ExpressionEditButton.Icon = (stdole.IPictureDisp)Engine.Images.FindImage("MyIcon.ico", 16, 16)
  //
  // ExpressionEditButton_Set_IconRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditButtonInstance - The id of the ExpressionEditButton object.
  //    - val: IPictureDispInstance - Specifies the picture the ExpressionEdit button displays. 
  //
  // ExpressionEditButton_Set_IconResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEditButton_Get_IconRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditButtonInstance - The id of the ExpressionEditButton object.
  //
  // ExpressionEditButton_Get_IconResponse - The response message from the server. It provides the return value.
  //    - returnValue: IPictureDispInstance - Specifies the picture the ExpressionEdit button displays. 
  //
  rpc Set_Icon(ExpressionEditButton_Set_IconRequest) returns (ExpressionEditButton_Set_IconResponse);
  rpc Get_Icon(ExpressionEditButton_Get_IconRequest) returns (ExpressionEditButton_Get_IconResponse);
  
  
  // Property: BackColor
  //
  // Specifies the background color for the ExpressionEdit button.
  //
  // ExpressionEditButton_Set_BackColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditButtonInstance - The id of the ExpressionEditButton object.
  //    - val: uint32 - Specifies the background color for the ExpressionEdit button. 
  //
  // ExpressionEditButton_Set_BackColorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEditButton_Get_BackColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditButtonInstance - The id of the ExpressionEditButton object.
  //
  // ExpressionEditButton_Get_BackColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Specifies the background color for the ExpressionEdit button. 
  //
  rpc Set_BackColor(ExpressionEditButton_Set_BackColorRequest) returns (ExpressionEditButton_Set_BackColorResponse);
  rpc Get_BackColor(ExpressionEditButton_Get_BackColorRequest) returns (ExpressionEditButton_Get_BackColorResponse);
  
  
  // Property: Kind
  //
  // Specifies the type of ExpressionEdit button. Use the ExpressionEditButtonKinds constants with this property.
  //
  // ExpressionEditButton_Set_KindRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditButtonInstance - The id of the ExpressionEditButton object.
  //    - val: int32 - Specifies the type of ExpressionEdit button. Use the ExpressionEditButtonKinds constants with this property. 
  //
  // ExpressionEditButton_Set_KindResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEditButton_Get_KindRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditButtonInstance - The id of the ExpressionEditButton object.
  //
  // ExpressionEditButton_Get_KindResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the type of ExpressionEdit button. Use the ExpressionEditButtonKinds constants with this property. 
  //
  rpc Set_Kind(ExpressionEditButton_Set_KindRequest) returns (ExpressionEditButton_Set_KindResponse);
  rpc Get_Kind(ExpressionEditButton_Get_KindRequest) returns (ExpressionEditButton_Get_KindResponse);
  
  
  // Property: ToolTipText
  //
  // Specifies the tooltip for the ExpressionEdit button.
  //
  // ExpressionEditButton_Set_ToolTipTextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditButtonInstance - The id of the ExpressionEditButton object.
  //    - val: string - Specifies the tooltip for the ExpressionEdit button. 
  //
  // ExpressionEditButton_Set_ToolTipTextResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEditButton_Get_ToolTipTextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditButtonInstance - The id of the ExpressionEditButton object.
  //
  // ExpressionEditButton_Get_ToolTipTextResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the tooltip for the ExpressionEdit button. 
  //
  rpc Set_ToolTipText(ExpressionEditButton_Set_ToolTipTextRequest) returns (ExpressionEditButton_Set_ToolTipTextResponse);
  rpc Get_ToolTipText(ExpressionEditButton_Get_ToolTipTextRequest) returns (ExpressionEditButton_Get_ToolTipTextResponse);
  
  
  // Property: ContextMenuItemCaption
  //
  // Set this property to a non-empty string to create a menu item in the ExpressionEdit control context menu for the ExpressionEdit button. Selecting the context menu item is equivalent to clicking the ExpressionEdit button.
  //
  // Note: The Browse and Check for Errors context menu items do not correspond to the Browse Expression and Check Expression buttons on the ExpressionEdit control. The default ContextMenuItemCaption property for the Browse Expression and Check Expression buttons is empty.
  //
  // ExpressionEditButton_Set_ContextMenuItemCaptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditButtonInstance - The id of the ExpressionEditButton object.
  //    - val: string - Set this property to a non-empty string to create a menu item in the ExpressionEdit control context menu for the ExpressionEdit button. Selecting the context menu item is equivalent to clicking the ExpressionEdit button. 
  //
  // ExpressionEditButton_Set_ContextMenuItemCaptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEditButton_Get_ContextMenuItemCaptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditButtonInstance - The id of the ExpressionEditButton object.
  //
  // ExpressionEditButton_Get_ContextMenuItemCaptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Set this property to a non-empty string to create a menu item in the ExpressionEdit control context menu for the ExpressionEdit button. Selecting the context menu item is equivalent to clicking the ExpressionEdit button. 
  //
  rpc Set_ContextMenuItemCaption(ExpressionEditButton_Set_ContextMenuItemCaptionRequest) returns (ExpressionEditButton_Set_ContextMenuItemCaptionResponse);
  rpc Get_ContextMenuItemCaption(ExpressionEditButton_Get_ContextMenuItemCaptionRequest) returns (ExpressionEditButton_Get_ContextMenuItemCaptionResponse);
  
  
  // Property: ShortcutKey
  //
  // Specifies a keyboard shortcut for clicking the ExpressionEdit button when the ExpressionEdit control is active.
  //
  // ExpressionEditButton_Set_ShortcutKeyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditButtonInstance - The id of the ExpressionEditButton object.
  //    - val: ShortcutKeys - Specifies a keyboard shortcut for clicking the ExpressionEdit button when the ExpressionEdit control is active. 
  //
  // ExpressionEditButton_Set_ShortcutKeyResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEditButton_Get_ShortcutKeyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditButtonInstance - The id of the ExpressionEditButton object.
  //
  // ExpressionEditButton_Get_ShortcutKeyResponse - The response message from the server. It provides the return value.
  //    - returnValue: ShortcutKeys - Specifies a keyboard shortcut for clicking the ExpressionEdit button when the ExpressionEdit control is active. 
  //
  rpc Set_ShortcutKey(ExpressionEditButton_Set_ShortcutKeyRequest) returns (ExpressionEditButton_Set_ShortcutKeyResponse);
  rpc Get_ShortcutKey(ExpressionEditButton_Get_ShortcutKeyRequest) returns (ExpressionEditButton_Get_ShortcutKeyResponse);
  
  
  // Property: ShortcutModifier
  //
  // Specifies modifiers for a keyboard shortcut for clicking the ExpressionEdit button. Use any combination of the ShortcutModifiers constants.
  //
  // ExpressionEditButton_Set_ShortcutModifierRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditButtonInstance - The id of the ExpressionEditButton object.
  //    - val: int32 - Specifies modifiers for a keyboard shortcut for clicking the ExpressionEdit button. Use any combination of the ShortcutModifiers constants. 
  //
  // ExpressionEditButton_Set_ShortcutModifierResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEditButton_Get_ShortcutModifierRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditButtonInstance - The id of the ExpressionEditButton object.
  //
  // ExpressionEditButton_Get_ShortcutModifierResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies modifiers for a keyboard shortcut for clicking the ExpressionEdit button. Use any combination of the ShortcutModifiers constants. 
  //
  rpc Set_ShortcutModifier(ExpressionEditButton_Set_ShortcutModifierRequest) returns (ExpressionEditButton_Set_ShortcutModifierResponse);
  rpc Get_ShortcutModifier(ExpressionEditButton_Get_ShortcutModifierRequest) returns (ExpressionEditButton_Get_ShortcutModifierResponse);
  
  
  // Property: Visible
  //
  // Specifies whether the button is visible.
  //
  // ExpressionEditButton_Set_VisibleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditButtonInstance - The id of the ExpressionEditButton object.
  //    - val: bool - Specifies whether the button is visible. 
  //
  // ExpressionEditButton_Set_VisibleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEditButton_Get_VisibleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditButtonInstance - The id of the ExpressionEditButton object.
  //
  // ExpressionEditButton_Get_VisibleResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the button is visible. 
  //
  rpc Set_Visible(ExpressionEditButton_Set_VisibleRequest) returns (ExpressionEditButton_Set_VisibleResponse);
  rpc Get_Visible(ExpressionEditButton_Get_VisibleRequest) returns (ExpressionEditButton_Get_VisibleResponse);
  
  
  // Property: Style
  //
  // Specifies the appearance of the button.
  //
  // ExpressionEditButton_Set_StyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditButtonInstance - The id of the ExpressionEditButton object.
  //    - val: ExpressionEditButtonStyles - Specifies the appearance of the button. 
  //
  // ExpressionEditButton_Set_StyleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEditButton_Get_StyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditButtonInstance - The id of the ExpressionEditButton object.
  //
  // ExpressionEditButton_Get_StyleResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExpressionEditButtonStyles - Specifies the appearance of the button. 
  //
  rpc Set_Style(ExpressionEditButton_Set_StyleRequest) returns (ExpressionEditButton_Set_StyleResponse);
  rpc Get_Style(ExpressionEditButton_Get_StyleRequest) returns (ExpressionEditButton_Get_StyleResponse);
  
  
}
message ExpressionEditButton_DoClickRequest {
  // The id of the ExpressionEditButton object.
  ExpressionEditButtonInstance instance = 1;
}

message ExpressionEditButton_DoClickResponse {
}

message ExpressionEditButton_Set_EnabledRequest {
  // The id of the ExpressionEditButton object.
  ExpressionEditButtonInstance instance = 1;
  // The control responds to user-generated events only when this property is True.
  bool val = 2;
}

message ExpressionEditButton_Set_EnabledResponse {
}

message ExpressionEditButton_Get_EnabledRequest {
  // The id of the ExpressionEditButton object.
  ExpressionEditButtonInstance instance = 1;
}

message ExpressionEditButton_Get_EnabledResponse {
  // The control responds to user-generated events only when this property is True.
  bool returnValue = 1;
}

message ExpressionEditButton_Get_hWndRequest {
  // The id of the ExpressionEditButton object.
  ExpressionEditButtonInstance instance = 1;
}

message ExpressionEditButton_Get_hWndResponse {
  // Returns the Window handle of the ExpressionEdit button.
  int32 returnValue = 1;
}

message ExpressionEditButton_Set_IconRequest {
  // The id of the ExpressionEditButton object.
  ExpressionEditButtonInstance instance = 1;
  // Specifies the picture the ExpressionEdit button displays.
  IPictureDispInstance val = 2;
}

message ExpressionEditButton_Set_IconResponse {
}

message ExpressionEditButton_Get_IconRequest {
  // The id of the ExpressionEditButton object.
  ExpressionEditButtonInstance instance = 1;
}

message ExpressionEditButton_Get_IconResponse {
  // Specifies the picture the ExpressionEdit button displays.
  IPictureDispInstance returnValue = 1;
}

message ExpressionEditButton_Set_BackColorRequest {
  // The id of the ExpressionEditButton object.
  ExpressionEditButtonInstance instance = 1;
  // Specifies the background color for the ExpressionEdit button.
  uint32 val = 2;
}

message ExpressionEditButton_Set_BackColorResponse {
}

message ExpressionEditButton_Get_BackColorRequest {
  // The id of the ExpressionEditButton object.
  ExpressionEditButtonInstance instance = 1;
}

message ExpressionEditButton_Get_BackColorResponse {
  // Specifies the background color for the ExpressionEdit button.
  uint32 returnValue = 1;
}

message ExpressionEditButton_Set_KindRequest {
  // The id of the ExpressionEditButton object.
  ExpressionEditButtonInstance instance = 1;
  // Specifies the type of ExpressionEdit button. Use the ExpressionEditButtonKinds constants with this property.
  ExpressionEditButtonKinds val = 2;
}

message ExpressionEditButton_Set_KindResponse {
}

message ExpressionEditButton_Get_KindRequest {
  // The id of the ExpressionEditButton object.
  ExpressionEditButtonInstance instance = 1;
}

message ExpressionEditButton_Get_KindResponse {
  // Specifies the type of ExpressionEdit button. Use the ExpressionEditButtonKinds constants with this property.
  ExpressionEditButtonKinds returnValue = 1;
}

message ExpressionEditButton_Set_ToolTipTextRequest {
  // The id of the ExpressionEditButton object.
  ExpressionEditButtonInstance instance = 1;
  // Specifies the tooltip for the ExpressionEdit button.
  string val = 2;
}

message ExpressionEditButton_Set_ToolTipTextResponse {
}

message ExpressionEditButton_Get_ToolTipTextRequest {
  // The id of the ExpressionEditButton object.
  ExpressionEditButtonInstance instance = 1;
}

message ExpressionEditButton_Get_ToolTipTextResponse {
  // Specifies the tooltip for the ExpressionEdit button.
  string returnValue = 1;
}

message ExpressionEditButton_Set_ContextMenuItemCaptionRequest {
  // The id of the ExpressionEditButton object.
  ExpressionEditButtonInstance instance = 1;
  // Set this property to a non-empty string to create a menu item in the ExpressionEdit control context menu for the ExpressionEdit button. Selecting the context menu item is equivalent to clicking the ExpressionEdit button.
  string val = 2;
}

message ExpressionEditButton_Set_ContextMenuItemCaptionResponse {
}

message ExpressionEditButton_Get_ContextMenuItemCaptionRequest {
  // The id of the ExpressionEditButton object.
  ExpressionEditButtonInstance instance = 1;
}

message ExpressionEditButton_Get_ContextMenuItemCaptionResponse {
  // Set this property to a non-empty string to create a menu item in the ExpressionEdit control context menu for the ExpressionEdit button. Selecting the context menu item is equivalent to clicking the ExpressionEdit button.
  string returnValue = 1;
}

message ExpressionEditButton_Set_ShortcutKeyRequest {
  // The id of the ExpressionEditButton object.
  ExpressionEditButtonInstance instance = 1;
  // Specifies a keyboard shortcut for clicking the ExpressionEdit button when the ExpressionEdit control is active.
  ShortcutKeys val = 2;
}

message ExpressionEditButton_Set_ShortcutKeyResponse {
}

message ExpressionEditButton_Get_ShortcutKeyRequest {
  // The id of the ExpressionEditButton object.
  ExpressionEditButtonInstance instance = 1;
}

message ExpressionEditButton_Get_ShortcutKeyResponse {
  // Specifies a keyboard shortcut for clicking the ExpressionEdit button when the ExpressionEdit control is active.
  ShortcutKeys returnValue = 1;
}

message ExpressionEditButton_Set_ShortcutModifierRequest {
  // The id of the ExpressionEditButton object.
  ExpressionEditButtonInstance instance = 1;
  // Specifies modifiers for a keyboard shortcut for clicking the ExpressionEdit button. Use any combination of the ShortcutModifiers constants.
  ShortcutModifiers val = 2;
}

message ExpressionEditButton_Set_ShortcutModifierResponse {
}

message ExpressionEditButton_Get_ShortcutModifierRequest {
  // The id of the ExpressionEditButton object.
  ExpressionEditButtonInstance instance = 1;
}

message ExpressionEditButton_Get_ShortcutModifierResponse {
  // Specifies modifiers for a keyboard shortcut for clicking the ExpressionEdit button. Use any combination of the ShortcutModifiers constants.
  ShortcutModifiers returnValue = 1;
}

message ExpressionEditButton_Set_VisibleRequest {
  // The id of the ExpressionEditButton object.
  ExpressionEditButtonInstance instance = 1;
  // Specifies whether the button is visible.
  bool val = 2;
}

message ExpressionEditButton_Set_VisibleResponse {
}

message ExpressionEditButton_Get_VisibleRequest {
  // The id of the ExpressionEditButton object.
  ExpressionEditButtonInstance instance = 1;
}

message ExpressionEditButton_Get_VisibleResponse {
  // Specifies whether the button is visible.
  bool returnValue = 1;
}

message ExpressionEditButton_Set_StyleRequest {
  // The id of the ExpressionEditButton object.
  ExpressionEditButtonInstance instance = 1;
  // Specifies the appearance of the button.
  ExpressionEditButtonStyles val = 2;
}

message ExpressionEditButton_Set_StyleResponse {
}

message ExpressionEditButton_Get_StyleRequest {
  // The id of the ExpressionEditButton object.
  ExpressionEditButtonInstance instance = 1;
}

message ExpressionEditButton_Get_StyleResponse {
  // Specifies the appearance of the button.
  ExpressionEditButtonStyles returnValue = 1;
}

// ExpressionEditComboBoxItems
//
// A collection of ExpressionEditComboBoxItem objects. Use the ExpressionEdit.ComboBoxItems property to retrieve the ExpressionEditComboBoxItems for an ExpressionEdit control.
//
service ExpressionEditComboBoxItems {
  // Method: Clear
  //
  // Removes all items from the drop-down list.
  //
  // ExpressionEditComboBoxItems_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditComboBoxItemsInstance - The id of the ExpressionEditComboBoxItems object.
  //
  // ExpressionEditComboBoxItems_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(ExpressionEditComboBoxItems_ClearRequest) returns (ExpressionEditComboBoxItems_ClearResponse);
  
  
  // Method: Insert
  //
  // Adds a new ExpressionEditComboBoxItem in the drop-down list.
  //
  // ExpressionEditComboBoxItems_InsertRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExpressionEditComboBoxItemsInstance - The id of the ExpressionEditComboBoxItems object.
  //    - itemIndexParam: int32 - Specifies the zero-based index where the new item is inserted. Pass -1 to insert the item at the end of the drop-down list.
  //    - val: string - Specifies the ExpressionEditComboBoxItem.Value property of the new item. This value appears in the drop-down list when the displayName parameter is empty.
  //
  // ExpressionEditComboBoxItems_InsertResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExpressionEditComboBoxItemInstance - The item added to the drop-down list. 
  //
  rpc Insert(ExpressionEditComboBoxItems_InsertRequest) returns (ExpressionEditComboBoxItems_InsertResponse);
  
  
  // Method: Remove
  //
  // Removes an item from the drop-down list.
  //
  // ExpressionEditComboBoxItems_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExpressionEditComboBoxItemsInstance - The id of the ExpressionEditComboBoxItems object.
  //    - itemIndexParam: int32 - Specifies the zero-based index of the item to remove from the drop-down list.
  //
  // ExpressionEditComboBoxItems_RemoveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Remove(ExpressionEditComboBoxItems_RemoveRequest) returns (ExpressionEditComboBoxItems_RemoveResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // ExpressionEditComboBoxItems_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExpressionEditComboBoxItemsInstance - The id of the ExpressionEditComboBoxItems object.
  //    - itemIndexParam: int32 - Specifies the zero-based index of the item to return.
  //
  // ExpressionEditComboBoxItems_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExpressionEditComboBoxItemInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(ExpressionEditComboBoxItems_Get_ItemRequest) returns (ExpressionEditComboBoxItems_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // ExpressionEditComboBoxItems_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditComboBoxItemsInstance - The id of the ExpressionEditComboBoxItems object.
  //
  // ExpressionEditComboBoxItems_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(ExpressionEditComboBoxItems_Get_CountRequest) returns (ExpressionEditComboBoxItems_Get_CountResponse);
  
  
}
message ExpressionEditComboBoxItemsInstance {
  // Specifies the handle of the ExpressionEditComboBoxItems instance in the server.
  string id = 1;
}

message ExpressionEditComboBoxItemInstance {
  // Specifies the handle of the ExpressionEditComboBoxItem instance in the server.
  string id = 1;
}
message ExpressionEditComboBoxItems_ClearRequest {
  // The id of the ExpressionEditComboBoxItems object.
  ExpressionEditComboBoxItemsInstance instance = 1;
}

message ExpressionEditComboBoxItems_ClearResponse {
}

message ExpressionEditComboBoxItems_InsertRequest {
  // The id of the ExpressionEditComboBoxItems object.
  ExpressionEditComboBoxItemsInstance instance = 1;
  // Specifies the zero-based index where the new item is inserted. Pass -1 to insert the item at the end of the drop-down list.
  int32 itemIndexParam = 2;
  // Specifies the ExpressionEditComboBoxItem.Value property of the new item. This value appears in the drop-down list when the displayName parameter is empty.
  string val = 3;
  // Specifies the ExpressionEditComboBoxItem.DisplayName property of the new item. When this value is not empty, the display name is shown in the drop-down list for the item instead of the val parameter. Display names are useful for displaying a simple name for a complex expression in the drop-down list.
  string DisplayName = 4;
  // Specifies the ExpressionEditComboBoxItem.Icon property of the new item. This method makes a copy of the picture you pass. You can use the ExpressionEditComboBoxItem.Icon property to either use a picture directly or make a copy of a picture.
  IPictureDispInstance Icon = 5;
}

message ExpressionEditComboBoxItems_InsertResponse {
  // The item added to the drop-down list.
  ExpressionEditComboBoxItemInstance returnValue = 1;
}

message ExpressionEditComboBoxItems_RemoveRequest {
  // The id of the ExpressionEditComboBoxItems object.
  ExpressionEditComboBoxItemsInstance instance = 1;
  // Specifies the zero-based index of the item to remove from the drop-down list.
  int32 itemIndexParam = 2;
}

message ExpressionEditComboBoxItems_RemoveResponse {
}

message ExpressionEditComboBoxItems_Get_ItemRequest {
  // The id of the ExpressionEditComboBoxItems object.
  ExpressionEditComboBoxItemsInstance instance = 1;
  // Specifies the zero-based index of the item to return.
  int32 itemIndexParam = 2;
}

message ExpressionEditComboBoxItems_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  ExpressionEditComboBoxItemInstance returnValue = 1;
}

message ExpressionEditComboBoxItems_Get_CountRequest {
  // The id of the ExpressionEditComboBoxItems object.
  ExpressionEditComboBoxItemsInstance instance = 1;
}

message ExpressionEditComboBoxItems_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// ExpressionEditComboBoxItem
//
// An ExpressionEditComboBoxItem is an item that appears in the drop-down list when the ExpressionEdit control is a combo box.
//
service ExpressionEditComboBoxItem {
  // Property: Icon
  //
  // Specifies the picture that appears in the drop-down list for this item.
  //
  // ExpressionEditComboBoxItem_Set_IconRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditComboBoxItemInstance - The id of the ExpressionEditComboBoxItem object.
  //    - val: IPictureDispInstance - Specifies the picture that appears in the drop-down list for this item. 
  //
  // ExpressionEditComboBoxItem_Set_IconResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEditComboBoxItem_Get_IconRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditComboBoxItemInstance - The id of the ExpressionEditComboBoxItem object.
  //
  // ExpressionEditComboBoxItem_Get_IconResponse - The response message from the server. It provides the return value.
  //    - returnValue: IPictureDispInstance - Specifies the picture that appears in the drop-down list for this item. 
  //
  rpc Set_Icon(ExpressionEditComboBoxItem_Set_IconRequest) returns (ExpressionEditComboBoxItem_Set_IconResponse);
  rpc Get_Icon(ExpressionEditComboBoxItem_Get_IconRequest) returns (ExpressionEditComboBoxItem_Get_IconResponse);
  
  
  // Property: Value
  //
  // Specifies an expression that replaces the text in the ExpressionEdit control when the user selects this item in the drop-down list. The value appears in the drop-down list when the ExpressionEditComboBoxItem.DisplayName property is empty.
  //
  // ExpressionEditComboBoxItem_Set_ValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditComboBoxItemInstance - The id of the ExpressionEditComboBoxItem object.
  //    - val: string - Specifies an expression that replaces the text in the ExpressionEdit control when the user selects this item in the drop-down list. The value appears in the drop-down list when the ExpressionEditComboBoxItem.DisplayName property is empty. 
  //
  // ExpressionEditComboBoxItem_Set_ValueResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEditComboBoxItem_Get_ValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditComboBoxItemInstance - The id of the ExpressionEditComboBoxItem object.
  //
  // ExpressionEditComboBoxItem_Get_ValueResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies an expression that replaces the text in the ExpressionEdit control when the user selects this item in the drop-down list. The value appears in the drop-down list when the ExpressionEditComboBoxItem.DisplayName property is empty. 
  //
  rpc Set_Value(ExpressionEditComboBoxItem_Set_ValueRequest) returns (ExpressionEditComboBoxItem_Set_ValueResponse);
  rpc Get_Value(ExpressionEditComboBoxItem_Get_ValueRequest) returns (ExpressionEditComboBoxItem_Get_ValueResponse);
  
  
  // Property: DisplayName
  //
  // When this property is not empty, the display name is shown in the drop-down list instead of the ExpressionEditComboBoxItem.Value property. When you choose this item in the drop-down list, the ExpressionEditComboBoxItem.Value property, not the display name, replaces the existing text. This property is useful for displaying a simple name for a complex expression in the drop-down list.
  //
  // ExpressionEditComboBoxItem_Set_DisplayNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditComboBoxItemInstance - The id of the ExpressionEditComboBoxItem object.
  //    - val: string - When this property is not empty, the display name is shown in the drop-down list instead of the ExpressionEditComboBoxItem.Value property. When you choose this item in the drop-down list, the ExpressionEditComboBoxItem.Value property, not the display name, replaces the existing text. This property is useful for displaying a simple name for a complex expression in the drop-down list. 
  //
  // ExpressionEditComboBoxItem_Set_DisplayNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEditComboBoxItem_Get_DisplayNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditComboBoxItemInstance - The id of the ExpressionEditComboBoxItem object.
  //
  // ExpressionEditComboBoxItem_Get_DisplayNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - When this property is not empty, the display name is shown in the drop-down list instead of the ExpressionEditComboBoxItem.Value property. When you choose this item in the drop-down list, the ExpressionEditComboBoxItem.Value property, not the display name, replaces the existing text. This property is useful for displaying a simple name for a complex expression in the drop-down list. 
  //
  rpc Set_DisplayName(ExpressionEditComboBoxItem_Set_DisplayNameRequest) returns (ExpressionEditComboBoxItem_Set_DisplayNameResponse);
  rpc Get_DisplayName(ExpressionEditComboBoxItem_Get_DisplayNameRequest) returns (ExpressionEditComboBoxItem_Get_DisplayNameResponse);
  
  
}
message ExpressionEditComboBoxItem_Set_IconRequest {
  // The id of the ExpressionEditComboBoxItem object.
  ExpressionEditComboBoxItemInstance instance = 1;
  // Specifies the picture that appears in the drop-down list for this item.
  IPictureDispInstance val = 2;
}

message ExpressionEditComboBoxItem_Set_IconResponse {
}

message ExpressionEditComboBoxItem_Get_IconRequest {
  // The id of the ExpressionEditComboBoxItem object.
  ExpressionEditComboBoxItemInstance instance = 1;
}

message ExpressionEditComboBoxItem_Get_IconResponse {
  // Specifies the picture that appears in the drop-down list for this item.
  IPictureDispInstance returnValue = 1;
}

message ExpressionEditComboBoxItem_Set_ValueRequest {
  // The id of the ExpressionEditComboBoxItem object.
  ExpressionEditComboBoxItemInstance instance = 1;
  // Specifies an expression that replaces the text in the ExpressionEdit control when the user selects this item in the drop-down list. The value appears in the drop-down list when the ExpressionEditComboBoxItem.DisplayName property is empty.
  string val = 2;
}

message ExpressionEditComboBoxItem_Set_ValueResponse {
}

message ExpressionEditComboBoxItem_Get_ValueRequest {
  // The id of the ExpressionEditComboBoxItem object.
  ExpressionEditComboBoxItemInstance instance = 1;
}

message ExpressionEditComboBoxItem_Get_ValueResponse {
  // Specifies an expression that replaces the text in the ExpressionEdit control when the user selects this item in the drop-down list. The value appears in the drop-down list when the ExpressionEditComboBoxItem.DisplayName property is empty.
  string returnValue = 1;
}

message ExpressionEditComboBoxItem_Set_DisplayNameRequest {
  // The id of the ExpressionEditComboBoxItem object.
  ExpressionEditComboBoxItemInstance instance = 1;
  // When this property is not empty, the display name is shown in the drop-down list instead of the ExpressionEditComboBoxItem.Value property. When you choose this item in the drop-down list, the ExpressionEditComboBoxItem.Value property, not the display name, replaces the existing text. This property is useful for displaying a simple name for a complex expression in the drop-down list.
  string val = 2;
}

message ExpressionEditComboBoxItem_Set_DisplayNameResponse {
}

message ExpressionEditComboBoxItem_Get_DisplayNameRequest {
  // The id of the ExpressionEditComboBoxItem object.
  ExpressionEditComboBoxItemInstance instance = 1;
}

message ExpressionEditComboBoxItem_Get_DisplayNameResponse {
  // When this property is not empty, the display name is shown in the drop-down list instead of the ExpressionEditComboBoxItem.Value property. When you choose this item in the drop-down list, the ExpressionEditComboBoxItem.Value property, not the display name, replaces the existing text. This property is useful for displaying a simple name for a complex expression in the drop-down list.
  string returnValue = 1;
}

// ListBarPageItem
//
// Represents an item in the ListBarPage.
//
service ListBarPageItem {
  // Property: Caption
  //
  // Specifies the caption for an item.
  //
  // Note: When you connect a ListBarPage to a manager control, the ListBarPage becomes read-only. Attempting to change the caption of an item in the page results in an error.
  //
  // ListBarPageItem_Set_CaptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarPageItemInstance - The id of the ListBarPageItem object.
  //    - val: string - Specifies the caption for an item. 
  //
  // ListBarPageItem_Set_CaptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBarPageItem_Get_CaptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarPageItemInstance - The id of the ListBarPageItem object.
  //
  // ListBarPageItem_Get_CaptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the caption for an item. 
  //
  rpc Set_Caption(ListBarPageItem_Set_CaptionRequest) returns (ListBarPageItem_Set_CaptionResponse);
  rpc Get_Caption(ListBarPageItem_Get_CaptionRequest) returns (ListBarPageItem_Get_CaptionResponse);
  
  
  // Property: Index
  //
  // Returns the zero-based index of an item.
  //
  // ListBarPageItem_Get_IndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarPageItemInstance - The id of the ListBarPageItem object.
  //
  // ListBarPageItem_Get_IndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the zero-based index of an item. 
  //
  rpc Get_Index(ListBarPageItem_Get_IndexRequest) returns (ListBarPageItem_Get_IndexResponse);
  
  
  // Property: IconName
  //
  // Specifies the icon name for an item.
  //
  // TestStand User Interface Controls use the icon files in the <TestStand>\Components\Icons and <TestStand Public>\Components\Icons directories. To change an icon for any item, specify the name of the .ico file.
  // Note: When you connect a ListBarPage to a manager control, the ListBarPage becomes read-only. Attempting to change the icon name results in an error.
  //
  // ListBarPageItem_Set_IconNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarPageItemInstance - The id of the ListBarPageItem object.
  //    - val: string - Specifies the icon name for an item. 
  //
  // ListBarPageItem_Set_IconNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBarPageItem_Get_IconNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarPageItemInstance - The id of the ListBarPageItem object.
  //
  // ListBarPageItem_Get_IconNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the icon name for an item. 
  //
  rpc Set_IconName(ListBarPageItem_Set_IconNameRequest) returns (ListBarPageItem_Set_IconNameResponse);
  rpc Get_IconName(ListBarPageItem_Get_IconNameRequest) returns (ListBarPageItem_Get_IconNameResponse);
  
  
  // Property: ToolTipText
  //
  // Specifies the tooltip for an item. When this property is an empty string, the item uses the ListBarPageItem.Caption property for the tooltip.
  //
  // ListBarPageItem_Set_ToolTipTextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarPageItemInstance - The id of the ListBarPageItem object.
  //    - val: string - Specifies the tooltip for an item. When this property is an empty string, the item uses the ListBarPageItem.Caption property for the tooltip. 
  //
  // ListBarPageItem_Set_ToolTipTextResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBarPageItem_Get_ToolTipTextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarPageItemInstance - The id of the ListBarPageItem object.
  //
  // ListBarPageItem_Get_ToolTipTextResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the tooltip for an item. When this property is an empty string, the item uses the ListBarPageItem.Caption property for the tooltip. 
  //
  rpc Set_ToolTipText(ListBarPageItem_Set_ToolTipTextRequest) returns (ListBarPageItem_Set_ToolTipTextResponse);
  rpc Get_ToolTipText(ListBarPageItem_Get_ToolTipTextRequest) returns (ListBarPageItem_Get_ToolTipTextResponse);
  
  
}
message ListBarPageItemInstance {
  // Specifies the handle of the ListBarPageItem instance in the server.
  string id = 1;
}
message ListBarPageItem_Set_CaptionRequest {
  // The id of the ListBarPageItem object.
  ListBarPageItemInstance instance = 1;
  // Specifies the caption for an item.
  string val = 2;
}

message ListBarPageItem_Set_CaptionResponse {
}

message ListBarPageItem_Get_CaptionRequest {
  // The id of the ListBarPageItem object.
  ListBarPageItemInstance instance = 1;
}

message ListBarPageItem_Get_CaptionResponse {
  // Specifies the caption for an item.
  string returnValue = 1;
}

message ListBarPageItem_Get_IndexRequest {
  // The id of the ListBarPageItem object.
  ListBarPageItemInstance instance = 1;
}

message ListBarPageItem_Get_IndexResponse {
  // Returns the zero-based index of an item.
  int32 returnValue = 1;
}

message ListBarPageItem_Set_IconNameRequest {
  // The id of the ListBarPageItem object.
  ListBarPageItemInstance instance = 1;
  // Specifies the icon name for an item.
  string val = 2;
}

message ListBarPageItem_Set_IconNameResponse {
}

message ListBarPageItem_Get_IconNameRequest {
  // The id of the ListBarPageItem object.
  ListBarPageItemInstance instance = 1;
}

message ListBarPageItem_Get_IconNameResponse {
  // Specifies the icon name for an item.
  string returnValue = 1;
}

message ListBarPageItem_Set_ToolTipTextRequest {
  // The id of the ListBarPageItem object.
  ListBarPageItemInstance instance = 1;
  // Specifies the tooltip for an item. When this property is an empty string, the item uses the ListBarPageItem.Caption property for the tooltip.
  string val = 2;
}

message ListBarPageItem_Set_ToolTipTextResponse {
}

message ListBarPageItem_Get_ToolTipTextRequest {
  // The id of the ListBarPageItem object.
  ListBarPageItemInstance instance = 1;
}

message ListBarPageItem_Get_ToolTipTextResponse {
  // Specifies the tooltip for an item. When this property is an empty string, the item uses the ListBarPageItem.Caption property for the tooltip.
  string returnValue = 1;
}

// ListBarPageItems
//
// A collection of ListBarPageItem objects.
// Use the ListBarPage.Items property to retrieve a ListBarPageItems object. Use the ListBarPage.Cursor property to determine the selected item in the page.
//
service ListBarPageItems {
  // Method: Insert
  //
  // Inserts a new item into the ListBarPage.
  //
  // Note: When you connect a ListBarPage to a manager control, the ListBarPage becomes read-only. Attempting to change the content by calling this method results in an error.
  //
  // ListBarPageItems_InsertRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ListBarPageItemsInstance - The id of the ListBarPageItems object.
  //    - itemCaption: string - Specifies the caption for the new item.
  //    - insertBefore: int32 - Specifies the index of the existing item before which the new item is inserted. Pass -1 to insert the item at the end.
  //
  // ListBarPageItems_InsertResponse - The response message from the server. It provides the return value.
  //    - returnValue: ListBarPageItemInstance - The return type of the ListBarPageItem object.
  //
  rpc Insert(ListBarPageItems_InsertRequest) returns (ListBarPageItems_InsertResponse);
  
  
  // Method: Remove
  //
  // Use this method to delete an item on the page.
  //
  // This method takes the numeric index of an item.
  // Note: When the ListBarPage is connected to a manager control, you cannot remove any items from the page.
  //
  // ListBarPageItems_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ListBarPageItemsInstance - The id of the ListBarPageItems object.
  //    - itemIdx: int32 - Specifies the zero-based index of the item to remove.
  //
  // ListBarPageItems_RemoveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Remove(ListBarPageItems_RemoveRequest) returns (ListBarPageItems_RemoveResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // Note: When the ListBarPage object is connected to a manager control, you cannot remove any items from the page.
  //
  // ListBarPageItems_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarPageItemsInstance - The id of the ListBarPageItems object.
  //
  // ListBarPageItems_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(ListBarPageItems_ClearRequest) returns (ListBarPageItems_ClearResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item with the specified name or at the specified index in the collection.
  //
  // ListBarPageItems_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ListBarPageItemsInstance - The id of the ListBarPageItems object.
  //    - itemIdx: int32 - You can pass a number to obtain a page item by its index value. You can also pass a string to obtain the page item using its name.
  //
  // ListBarPageItems_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: ListBarPageItemInstance - Returns a reference to an item with the specified name or at the specified index in the collection. 
  //
  rpc Get_Item(ListBarPageItems_Get_ItemRequest) returns (ListBarPageItems_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // ListBarPageItems_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarPageItemsInstance - The id of the ListBarPageItems object.
  //
  // ListBarPageItems_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(ListBarPageItems_Get_CountRequest) returns (ListBarPageItems_Get_CountResponse);
  
  
}
message ListBarPageItemsInstance {
  // Specifies the handle of the ListBarPageItems instance in the server.
  string id = 1;
}
message ListBarPageItems_InsertRequest {
  // The id of the ListBarPageItems object.
  ListBarPageItemsInstance instance = 1;
  // Specifies the caption for the new item.
  string itemCaption = 2;
  // Specifies the name of the icon for the new item. Refer to the ListBarPageItem.IconName property for more information about naming icons for an item. Icon files are located in the <TestStand>\Components\Icons and <TestStand Public>\Components\Icons directories.
  string IconName = 3;
  // Specifies the index of the existing item before which the new item is inserted. Pass -1 to insert the item at the end.
  int32 insertBefore = 4;
}

message ListBarPageItems_InsertResponse {
  // The return type of the ListBarPageItem object.
  ListBarPageItemInstance returnValue = 1;
}

message ListBarPageItems_RemoveRequest {
  // The id of the ListBarPageItems object.
  ListBarPageItemsInstance instance = 1;
  // Specifies the zero-based index of the item to remove.
  int32 itemIdx = 2;
}

message ListBarPageItems_RemoveResponse {
}

message ListBarPageItems_ClearRequest {
  // The id of the ListBarPageItems object.
  ListBarPageItemsInstance instance = 1;
}

message ListBarPageItems_ClearResponse {
}

message ListBarPageItems_Get_ItemRequest {
  // The id of the ListBarPageItems object.
  ListBarPageItemsInstance instance = 1;
  // You can pass a number to obtain a page item by its index value. You can also pass a string to obtain the page item using its name.
  optional int32 itemIdx = 2;
}

message ListBarPageItems_Get_ItemResponse {
  // Returns a reference to an item with the specified name or at the specified index in the collection.
  ListBarPageItemInstance returnValue = 1;
}

message ListBarPageItems_Get_CountRequest {
  // The id of the ListBarPageItems object.
  ListBarPageItemsInstance instance = 1;
}

message ListBarPageItems_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// ListBarPage
//
// Connect a SequenceFileView Manager or ExecutionView Manager control to a ListBarPage object so users can iterate through the items in the page and set the cursor, caption, and name of the page.
// Use the ListBarPages.Insert method to create a new ListBarPage object. Use the ListBarPage.Cursor property to determine the selected item in the page.
// Use the ListBarPage control to connect to and display the ExecutionViewMgrConnections.ExecutionList, ExecutionViewMgrConnections.CallStack, and ExecutionViewMgrConnections.ThreadList properties in the ExecutionView Manager control and the SequenceFileViewMgrConnections.SequenceList, SequenceFileViewMgrConnections.SequenceFileList, and SequenceFileViewMgrConnections.StepGroupList properties in the SequenceFileView Manager control.
//
service ListBarPage {
  // Property: Name
  //
  // Specifies the name of the ListBarPage.
  //
  // Every ListBarPage must have a unique name, which can be used to identify the ListBarPage within the ListBarPages collection. ListBarPage names are not case-sensitive.
  //
  // ListBarPage_Set_NameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarPageInstance - The id of the ListBarPage object.
  //    - val: string - Specifies the name of the ListBarPage. 
  //
  // ListBarPage_Set_NameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBarPage_Get_NameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarPageInstance - The id of the ListBarPage object.
  //
  // ListBarPage_Get_NameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the name of the ListBarPage. 
  //
  rpc Set_Name(ListBarPage_Set_NameRequest) returns (ListBarPage_Set_NameResponse);
  rpc Get_Name(ListBarPage_Get_NameRequest) returns (ListBarPage_Get_NameResponse);
  
  
  // Property: Index
  //
  // Returns the numeric zero-based index of the page within the ListBarPages collection.
  //
  // ListBarPage_Get_IndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarPageInstance - The id of the ListBarPage object.
  //
  // ListBarPage_Get_IndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the numeric zero-based index of the page within the ListBarPages collection. 
  //
  rpc Get_Index(ListBarPage_Get_IndexRequest) returns (ListBarPage_Get_IndexResponse);
  
  
  // Property: Caption
  //
  // Specifies the caption text of the page.
  //
  // ListBarPage_Set_CaptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarPageInstance - The id of the ListBarPage object.
  //    - val: string - Specifies the caption text of the page. 
  //
  // ListBarPage_Set_CaptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBarPage_Get_CaptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarPageInstance - The id of the ListBarPage object.
  //
  // ListBarPage_Get_CaptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the caption text of the page. 
  //
  rpc Set_Caption(ListBarPage_Set_CaptionRequest) returns (ListBarPage_Set_CaptionResponse);
  rpc Get_Caption(ListBarPage_Get_CaptionRequest) returns (ListBarPage_Get_CaptionResponse);
  
  
  // Property: Items
  //
  // Returns a collection of items on the page.
  //
  // Use this property to obtain a ListBarPageItems collection, which you can use to iterate through all the items on the page.
  //
  // ListBarPage_Get_ItemsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarPageInstance - The id of the ListBarPage object.
  //
  // ListBarPage_Get_ItemsResponse - The response message from the server. It provides the return value.
  //    - returnValue: ListBarPageItemsInstance - Returns a collection of items on the page. 
  //
  rpc Get_Items(ListBarPage_Get_ItemsRequest) returns (ListBarPage_Get_ItemsResponse);
  
  
  // Property: Cursor
  //
  // Specifies the zero-based index of the item the cursor selects.
  //
  // Use this property to obtain the position of the cursor or move the cursor on the page.
  //
  // ListBarPage_Set_CursorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarPageInstance - The id of the ListBarPage object.
  //    - val: int32 - Specifies the zero-based index of the item the cursor selects. 
  //
  // ListBarPage_Set_CursorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBarPage_Get_CursorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarPageInstance - The id of the ListBarPage object.
  //
  // ListBarPage_Get_CursorResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the zero-based index of the item the cursor selects. 
  //
  rpc Set_Cursor(ListBarPage_Set_CursorRequest) returns (ListBarPage_Set_CursorResponse);
  rpc Get_Cursor(ListBarPage_Get_CursorRequest) returns (ListBarPage_Get_CursorResponse);
  
  
  // Property: Enabled
  //
  // Specifies to enable or disable the ListBarPage.
  //
  // Users cannot move the cursor when the page is disabled.
  //
  // ListBarPage_Set_EnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarPageInstance - The id of the ListBarPage object.
  //    - val: bool - Specifies to enable or disable the ListBarPage. 
  //
  // ListBarPage_Set_EnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBarPage_Get_EnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarPageInstance - The id of the ListBarPage object.
  //
  // ListBarPage_Get_EnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies to enable or disable the ListBarPage. 
  //
  rpc Set_Enabled(ListBarPage_Set_EnabledRequest) returns (ListBarPage_Set_EnabledResponse);
  rpc Get_Enabled(ListBarPage_Get_EnabledRequest) returns (ListBarPage_Get_EnabledResponse);
  
  
}
message ListBarPageInstance {
  // Specifies the handle of the ListBarPage instance in the server.
  string id = 1;
}
message ListBarPage_Set_NameRequest {
  // The id of the ListBarPage object.
  ListBarPageInstance instance = 1;
  // Specifies the name of the ListBarPage.
  string val = 2;
}

message ListBarPage_Set_NameResponse {
}

message ListBarPage_Get_NameRequest {
  // The id of the ListBarPage object.
  ListBarPageInstance instance = 1;
}

message ListBarPage_Get_NameResponse {
  // Specifies the name of the ListBarPage.
  string returnValue = 1;
}

message ListBarPage_Get_IndexRequest {
  // The id of the ListBarPage object.
  ListBarPageInstance instance = 1;
}

message ListBarPage_Get_IndexResponse {
  // Returns the numeric zero-based index of the page within the ListBarPages collection.
  int32 returnValue = 1;
}

message ListBarPage_Set_CaptionRequest {
  // The id of the ListBarPage object.
  ListBarPageInstance instance = 1;
  // Specifies the caption text of the page.
  string val = 2;
}

message ListBarPage_Set_CaptionResponse {
}

message ListBarPage_Get_CaptionRequest {
  // The id of the ListBarPage object.
  ListBarPageInstance instance = 1;
}

message ListBarPage_Get_CaptionResponse {
  // Specifies the caption text of the page.
  string returnValue = 1;
}

message ListBarPage_Get_ItemsRequest {
  // The id of the ListBarPage object.
  ListBarPageInstance instance = 1;
}

message ListBarPage_Get_ItemsResponse {
  // Returns a collection of items on the page.
  ListBarPageItemsInstance returnValue = 1;
}

message ListBarPage_Set_CursorRequest {
  // The id of the ListBarPage object.
  ListBarPageInstance instance = 1;
  // Specifies the zero-based index of the item the cursor selects.
  int32 val = 2;
}

message ListBarPage_Set_CursorResponse {
}

message ListBarPage_Get_CursorRequest {
  // The id of the ListBarPage object.
  ListBarPageInstance instance = 1;
}

message ListBarPage_Get_CursorResponse {
  // Specifies the zero-based index of the item the cursor selects.
  int32 returnValue = 1;
}

message ListBarPage_Set_EnabledRequest {
  // The id of the ListBarPage object.
  ListBarPageInstance instance = 1;
  // Specifies to enable or disable the ListBarPage.
  bool val = 2;
}

message ListBarPage_Set_EnabledResponse {
}

message ListBarPage_Get_EnabledRequest {
  // The id of the ListBarPage object.
  ListBarPageInstance instance = 1;
}

message ListBarPage_Get_EnabledResponse {
  // Specifies to enable or disable the ListBarPage.
  bool returnValue = 1;
}

// ListBarPages
//
// A collection of ListBarPage objects.
// Use the ListBar.Pages property to retrieve the ListBarPages object for a ListBar. Use the ListBar.CurrentPage property as an index to this collection to access the currently selected page.
//
service ListBarPages {
  // Method: Insert
  //
  // Adds a new item to the collection and returns a reference to the new ListBarPage.
  //
  // ListBarPages_InsertRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ListBarPagesInstance - The id of the ListBarPages object.
  //    - pageName: string - Specifies the name for the new ListBarPage. ListBarPage names must be unique. ListBarPage names are not case-sensitive.
  //    - insertBefore: int32 - Specifies the index of the existing ListBarPage before which the new ListBarPage is inserted. To insert the new ListBarPage at the end, pass -1 to this parameter.
  //
  // ListBarPages_InsertResponse - The response message from the server. It provides the return value.
  //    - returnValue: ListBarPageInstance - The return type of the ListBarPage object.
  //
  rpc Insert(ListBarPages_InsertRequest) returns (ListBarPages_InsertResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // ListBarPages_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ListBarPagesInstance - The id of the ListBarPages object.
  //    - itemIdx: int32 - Pass the zero-based index for the page to remove.
  //
  // ListBarPages_RemoveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Remove(ListBarPages_RemoveRequest) returns (ListBarPages_RemoveResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // ListBarPages_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarPagesInstance - The id of the ListBarPages object.
  //
  // ListBarPages_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(ListBarPages_ClearRequest) returns (ListBarPages_ClearResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item with the specified name or at the specified index in the collection.
  //
  // ListBarPages_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ListBarPagesInstance - The id of the ListBarPages object.
  //    - itemIdx: oneof index { int32 numericIndex = 2; string nameIndex = 3; } - You can pass a number to obtain a page by its zero-based index. You can also pass a string to obtain the ListBarPage using its name.
  //
  // ListBarPages_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: ListBarPageInstance - Returns a reference to an item with the specified name or at the specified index in the collection. 
  //
  rpc Get_Item(ListBarPages_Get_ItemRequest) returns (ListBarPages_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // ListBarPages_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarPagesInstance - The id of the ListBarPages object.
  //
  // ListBarPages_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(ListBarPages_Get_CountRequest) returns (ListBarPages_Get_CountResponse);
  
  
}
message ListBarPagesInstance {
  // Specifies the handle of the ListBarPages instance in the server.
  string id = 1;
}
message ListBarPages_InsertRequest {
  // The id of the ListBarPages object.
  ListBarPagesInstance instance = 1;
  // Specifies the name for the new ListBarPage. ListBarPage names must be unique. ListBarPage names are not case-sensitive.
  string pageName = 2;
  // Specifies the index of the existing ListBarPage before which the new ListBarPage is inserted. To insert the new ListBarPage at the end, pass -1 to this parameter.
  int32 insertBefore = 3;
}

message ListBarPages_InsertResponse {
  // The return type of the ListBarPage object.
  ListBarPageInstance returnValue = 1;
}

message ListBarPages_RemoveRequest {
  // The id of the ListBarPages object.
  ListBarPagesInstance instance = 1;
  // Pass the zero-based index for the page to remove.
  int32 itemIdx = 2;
}

message ListBarPages_RemoveResponse {
}

message ListBarPages_ClearRequest {
  // The id of the ListBarPages object.
  ListBarPagesInstance instance = 1;
}

message ListBarPages_ClearResponse {
}

message ListBarPages_Get_ItemRequest {
  // The id of the ListBarPages object.
  ListBarPagesInstance instance = 1;
  // You can pass a number to obtain a page by its zero-based index. You can also pass a string to obtain the ListBarPage using its name.
  oneof index { int32 numericIndex = 2; string nameIndex = 3; }
}

message ListBarPages_Get_ItemResponse {
  // Returns a reference to an item with the specified name or at the specified index in the collection.
  ListBarPageInstance returnValue = 1;
}

message ListBarPages_Get_CountRequest {
  // The id of the ListBarPages object.
  ListBarPagesInstance instance = 1;
}

message ListBarPages_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// StatusBarPane
//
// Represents a status bar pane.
//
service StatusBarPane {
  // Property: IconName
  //
  // Specifies an icon for the StatusBar pane.
  //
  // TestStand User Interface Controls use icons from the <TestStand>\Components\Icons and <TestStand Public>\Components\Icons directories. To specify an icon for a StatusBar pane, pass the name of the .ico file to this property.
  // Note: When a StatusBar pane is connected to an image source of a manager control, you cannot change the icon.
  //
  // StatusBarPane_Set_IconNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarPaneInstance - The id of the StatusBarPane object.
  //    - val: string - Specifies an icon for the StatusBar pane. 
  //
  // StatusBarPane_Set_IconNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StatusBarPane_Get_IconNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarPaneInstance - The id of the StatusBarPane object.
  //
  // StatusBarPane_Get_IconNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies an icon for the StatusBar pane. 
  //
  rpc Set_IconName(StatusBarPane_Set_IconNameRequest) returns (StatusBarPane_Set_IconNameResponse);
  rpc Get_IconName(StatusBarPane_Get_IconNameRequest) returns (StatusBarPane_Get_IconNameResponse);
  
  
  // Property: ProcessPercent
  //
  // Specifies a number between 0 and 100 to determine the progress for the StatusBar pane. The StatusBar pane uses this number to draw a progress bar.
  //
  // You can combine a caption, image, and progress bar on the same StatusBar pane. Set ProcessPercent to 0 when you do not want the StatusBar pane to contain a progress bar.
  // Note: When a StatusBar pane is connected to a numeric source of a manager control, you cannot change the process percent.
  //
  // StatusBarPane_Set_ProcessPercentRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarPaneInstance - The id of the StatusBarPane object.
  //    - val: double - Specifies a number between 0 and 100 to determine the progress for the StatusBar pane. The StatusBar pane uses this number to draw a progress bar. 
  //
  // StatusBarPane_Set_ProcessPercentResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StatusBarPane_Get_ProcessPercentRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarPaneInstance - The id of the StatusBarPane object.
  //
  // StatusBarPane_Get_ProcessPercentResponse - The response message from the server. It provides the return value.
  //    - returnValue: double - Specifies a number between 0 and 100 to determine the progress for the StatusBar pane. The StatusBar pane uses this number to draw a progress bar. 
  //
  rpc Set_ProcessPercent(StatusBarPane_Set_ProcessPercentRequest) returns (StatusBarPane_Set_ProcessPercentResponse);
  rpc Get_ProcessPercent(StatusBarPane_Get_ProcessPercentRequest) returns (StatusBarPane_Get_ProcessPercentResponse);
  
  
  // Property: Caption
  //
  // Specifies the caption for the StatusBar pane.
  //
  // You can display a caption and progress bar on the same StatusBar pane.
  // Note: When you connect a StatusBar pane to the caption source of a manager control, you cannot change the caption. When you connect a StatusBar pane to the image source of a manager control, the caption does not display when you display an image. Additionally, the caption does not display when you use the StatusBarPane.IconName property to specify a valid icon.
  //
  // StatusBarPane_Set_CaptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarPaneInstance - The id of the StatusBarPane object.
  //    - val: string - Specifies the caption for the StatusBar pane. 
  //
  // StatusBarPane_Set_CaptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StatusBarPane_Get_CaptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarPaneInstance - The id of the StatusBarPane object.
  //
  // StatusBarPane_Get_CaptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the caption for the StatusBar pane. 
  //
  rpc Set_Caption(StatusBarPane_Set_CaptionRequest) returns (StatusBarPane_Set_CaptionResponse);
  rpc Get_Caption(StatusBarPane_Get_CaptionRequest) returns (StatusBarPane_Get_CaptionResponse);
  
  
  // Property: Name
  //
  // Specifies the name for the pane.
  //
  // Every pane must have a unique name, which can be used to identify the pane within the StatusBarPanes collection. Pane names are not case-sensitive.
  //
  // StatusBarPane_Set_NameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarPaneInstance - The id of the StatusBarPane object.
  //    - val: string - Specifies the name for the pane. 
  //
  // StatusBarPane_Set_NameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StatusBarPane_Get_NameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarPaneInstance - The id of the StatusBarPane object.
  //
  // StatusBarPane_Get_NameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the name for the pane. 
  //
  rpc Set_Name(StatusBarPane_Set_NameRequest) returns (StatusBarPane_Set_NameResponse);
  rpc Get_Name(StatusBarPane_Get_NameRequest) returns (StatusBarPane_Get_NameResponse);
  
  
  // Property: Width
  //
  // Specifies the width for the pane in pixels.
  //
  // When you set the StatusBarPane.UseAvailableSpace property to True, the specified width of the pane is ignored when the StatusBar pane is the leftmost visible StatusBar pane with a True value for the StatusBarPane.UseAvailableSpace property.
  //
  // StatusBarPane_Set_WidthRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarPaneInstance - The id of the StatusBarPane object.
  //    - val: int32 - Specifies the width for the pane in pixels. 
  //
  // StatusBarPane_Set_WidthResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StatusBarPane_Get_WidthRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarPaneInstance - The id of the StatusBarPane object.
  //
  // StatusBarPane_Get_WidthResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the width for the pane in pixels. 
  //
  rpc Set_Width(StatusBarPane_Set_WidthRequest) returns (StatusBarPane_Set_WidthResponse);
  rpc Get_Width(StatusBarPane_Get_WidthRequest) returns (StatusBarPane_Get_WidthResponse);
  
  
  // Property: Style
  //
  // Specifies the appearance of the pane.
  //
  // A StatusBar pane can have only one style.
  //
  // StatusBarPane_Set_StyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarPaneInstance - The id of the StatusBarPane object.
  //    - val: StatusBarPaneStyles - Specifies the appearance of the pane. 
  //
  // StatusBarPane_Set_StyleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StatusBarPane_Get_StyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarPaneInstance - The id of the StatusBarPane object.
  //
  // StatusBarPane_Get_StyleResponse - The response message from the server. It provides the return value.
  //    - returnValue: StatusBarPaneStyles - Specifies the appearance of the pane. 
  //
  rpc Set_Style(StatusBarPane_Set_StyleRequest) returns (StatusBarPane_Set_StyleResponse);
  rpc Get_Style(StatusBarPane_Get_StyleRequest) returns (StatusBarPane_Get_StyleResponse);
  
  
  // Property: Index
  //
  // Returns the zero-based index of the pane in the StatusBarPanes collection.
  //
  // StatusBarPane_Get_IndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarPaneInstance - The id of the StatusBarPane object.
  //
  // StatusBarPane_Get_IndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the zero-based index of the pane in the StatusBarPanes collection. 
  //
  rpc Get_Index(StatusBarPane_Get_IndexRequest) returns (StatusBarPane_Get_IndexResponse);
  
  
  // Property: TextAlignment
  //
  // Specifies the alignment of the caption text.
  //
  // This method also applies to images when the StatusBar control is used to display images.
  //
  // StatusBarPane_Set_TextAlignmentRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarPaneInstance - The id of the StatusBarPane object.
  //    - val: AlignmentStyles - Specifies the alignment of the caption text. 
  //
  // StatusBarPane_Set_TextAlignmentResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StatusBarPane_Get_TextAlignmentRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarPaneInstance - The id of the StatusBarPane object.
  //
  // StatusBarPane_Get_TextAlignmentResponse - The response message from the server. It provides the return value.
  //    - returnValue: AlignmentStyles - Specifies the alignment of the caption text. 
  //
  rpc Set_TextAlignment(StatusBarPane_Set_TextAlignmentRequest) returns (StatusBarPane_Set_TextAlignmentResponse);
  rpc Get_TextAlignment(StatusBarPane_Get_TextAlignmentRequest) returns (StatusBarPane_Get_TextAlignmentResponse);
  
  
  // Property: Visible
  //
  // Specifies whether the StatusBar pane is visible.
  //
  // StatusBarPane_Set_VisibleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarPaneInstance - The id of the StatusBarPane object.
  //    - val: bool - Specifies whether the StatusBar pane is visible. 
  //
  // StatusBarPane_Set_VisibleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StatusBarPane_Get_VisibleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarPaneInstance - The id of the StatusBarPane object.
  //
  // StatusBarPane_Get_VisibleResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the StatusBar pane is visible. 
  //
  rpc Set_Visible(StatusBarPane_Set_VisibleRequest) returns (StatusBarPane_Set_VisibleResponse);
  rpc Get_Visible(StatusBarPane_Get_VisibleRequest) returns (StatusBarPane_Get_VisibleResponse);
  
  
  // Property: UseAvailableSpace
  //
  // Set this property to True when you want a StatusBar pane to occupy all available space in the status bar not used by other panes. This property enables a pane to adjust to make full use of the available space when the status bar changes size.
  //
  // Although you can have more than one StatusBar pane with a value of True for this property, only the leftmost visible StatusBar pane honors this setting.
  //
  // StatusBarPane_Set_UseAvailableSpaceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarPaneInstance - The id of the StatusBarPane object.
  //    - val: bool - Set this property to True when you want a StatusBar pane to occupy all available space in the status bar not used by other panes. This property enables a pane to adjust to make full use of the available space when the status bar changes size. 
  //
  // StatusBarPane_Set_UseAvailableSpaceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StatusBarPane_Get_UseAvailableSpaceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarPaneInstance - The id of the StatusBarPane object.
  //
  // StatusBarPane_Get_UseAvailableSpaceResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Set this property to True when you want a StatusBar pane to occupy all available space in the status bar not used by other panes. This property enables a pane to adjust to make full use of the available space when the status bar changes size. 
  //
  rpc Set_UseAvailableSpace(StatusBarPane_Set_UseAvailableSpaceRequest) returns (StatusBarPane_Set_UseAvailableSpaceResponse);
  rpc Get_UseAvailableSpace(StatusBarPane_Get_UseAvailableSpaceRequest) returns (StatusBarPane_Get_UseAvailableSpaceResponse);
  
  
  // Property: ToolTipText
  //
  // Specifies the tooltip for a status bar pane. When this property is an empty string, the pane uses the StatusBarPane.Caption property for the tooltip.
  //
  // StatusBarPane_Set_ToolTipTextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarPaneInstance - The id of the StatusBarPane object.
  //    - val: string - Specifies the tooltip for a status bar pane. When this property is an empty string, the pane uses the StatusBarPane.Caption property for the tooltip. 
  //
  // StatusBarPane_Set_ToolTipTextResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StatusBarPane_Get_ToolTipTextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarPaneInstance - The id of the StatusBarPane object.
  //
  // StatusBarPane_Get_ToolTipTextResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the tooltip for a status bar pane. When this property is an empty string, the pane uses the StatusBarPane.Caption property for the tooltip. 
  //
  rpc Set_ToolTipText(StatusBarPane_Set_ToolTipTextRequest) returns (StatusBarPane_Set_ToolTipTextResponse);
  rpc Get_ToolTipText(StatusBarPane_Get_ToolTipTextRequest) returns (StatusBarPane_Get_ToolTipTextResponse);
  
  
}
message StatusBarPaneInstance {
  // Specifies the handle of the StatusBarPane instance in the server.
  string id = 1;
}
message StatusBarPane_Set_IconNameRequest {
  // The id of the StatusBarPane object.
  StatusBarPaneInstance instance = 1;
  // Specifies an icon for the StatusBar pane.
  string val = 2;
}

message StatusBarPane_Set_IconNameResponse {
}

message StatusBarPane_Get_IconNameRequest {
  // The id of the StatusBarPane object.
  StatusBarPaneInstance instance = 1;
}

message StatusBarPane_Get_IconNameResponse {
  // Specifies an icon for the StatusBar pane.
  string returnValue = 1;
}

message StatusBarPane_Set_ProcessPercentRequest {
  // The id of the StatusBarPane object.
  StatusBarPaneInstance instance = 1;
  // Specifies a number between 0 and 100 to determine the progress for the StatusBar pane. The StatusBar pane uses this number to draw a progress bar.
  double val = 2;
}

message StatusBarPane_Set_ProcessPercentResponse {
}

message StatusBarPane_Get_ProcessPercentRequest {
  // The id of the StatusBarPane object.
  StatusBarPaneInstance instance = 1;
}

message StatusBarPane_Get_ProcessPercentResponse {
  // Specifies a number between 0 and 100 to determine the progress for the StatusBar pane. The StatusBar pane uses this number to draw a progress bar.
  double returnValue = 1;
}

message StatusBarPane_Set_CaptionRequest {
  // The id of the StatusBarPane object.
  StatusBarPaneInstance instance = 1;
  // Specifies the caption for the StatusBar pane.
  string val = 2;
}

message StatusBarPane_Set_CaptionResponse {
}

message StatusBarPane_Get_CaptionRequest {
  // The id of the StatusBarPane object.
  StatusBarPaneInstance instance = 1;
}

message StatusBarPane_Get_CaptionResponse {
  // Specifies the caption for the StatusBar pane.
  string returnValue = 1;
}

message StatusBarPane_Set_NameRequest {
  // The id of the StatusBarPane object.
  StatusBarPaneInstance instance = 1;
  // Specifies the name for the pane.
  string val = 2;
}

message StatusBarPane_Set_NameResponse {
}

message StatusBarPane_Get_NameRequest {
  // The id of the StatusBarPane object.
  StatusBarPaneInstance instance = 1;
}

message StatusBarPane_Get_NameResponse {
  // Specifies the name for the pane.
  string returnValue = 1;
}

message StatusBarPane_Set_WidthRequest {
  // The id of the StatusBarPane object.
  StatusBarPaneInstance instance = 1;
  // Specifies the width for the pane in pixels.
  int32 val = 2;
}

message StatusBarPane_Set_WidthResponse {
}

message StatusBarPane_Get_WidthRequest {
  // The id of the StatusBarPane object.
  StatusBarPaneInstance instance = 1;
}

message StatusBarPane_Get_WidthResponse {
  // Specifies the width for the pane in pixels.
  int32 returnValue = 1;
}

message StatusBarPane_Set_StyleRequest {
  // The id of the StatusBarPane object.
  StatusBarPaneInstance instance = 1;
  // Specifies the appearance of the pane.
  StatusBarPaneStyles val = 2;
}

message StatusBarPane_Set_StyleResponse {
}

message StatusBarPane_Get_StyleRequest {
  // The id of the StatusBarPane object.
  StatusBarPaneInstance instance = 1;
}

message StatusBarPane_Get_StyleResponse {
  // Specifies the appearance of the pane.
  StatusBarPaneStyles returnValue = 1;
}

message StatusBarPane_Get_IndexRequest {
  // The id of the StatusBarPane object.
  StatusBarPaneInstance instance = 1;
}

message StatusBarPane_Get_IndexResponse {
  // Returns the zero-based index of the pane in the StatusBarPanes collection.
  int32 returnValue = 1;
}

message StatusBarPane_Set_TextAlignmentRequest {
  // The id of the StatusBarPane object.
  StatusBarPaneInstance instance = 1;
  // Specifies the alignment of the caption text.
  AlignmentStyles val = 2;
}

message StatusBarPane_Set_TextAlignmentResponse {
}

message StatusBarPane_Get_TextAlignmentRequest {
  // The id of the StatusBarPane object.
  StatusBarPaneInstance instance = 1;
}

message StatusBarPane_Get_TextAlignmentResponse {
  // Specifies the alignment of the caption text.
  AlignmentStyles returnValue = 1;
}

message StatusBarPane_Set_VisibleRequest {
  // The id of the StatusBarPane object.
  StatusBarPaneInstance instance = 1;
  // Specifies whether the StatusBar pane is visible.
  bool val = 2;
}

message StatusBarPane_Set_VisibleResponse {
}

message StatusBarPane_Get_VisibleRequest {
  // The id of the StatusBarPane object.
  StatusBarPaneInstance instance = 1;
}

message StatusBarPane_Get_VisibleResponse {
  // Specifies whether the StatusBar pane is visible.
  bool returnValue = 1;
}

message StatusBarPane_Set_UseAvailableSpaceRequest {
  // The id of the StatusBarPane object.
  StatusBarPaneInstance instance = 1;
  // Set this property to True when you want a StatusBar pane to occupy all available space in the status bar not used by other panes. This property enables a pane to adjust to make full use of the available space when the status bar changes size.
  bool val = 2;
}

message StatusBarPane_Set_UseAvailableSpaceResponse {
}

message StatusBarPane_Get_UseAvailableSpaceRequest {
  // The id of the StatusBarPane object.
  StatusBarPaneInstance instance = 1;
}

message StatusBarPane_Get_UseAvailableSpaceResponse {
  // Set this property to True when you want a StatusBar pane to occupy all available space in the status bar not used by other panes. This property enables a pane to adjust to make full use of the available space when the status bar changes size.
  bool returnValue = 1;
}

message StatusBarPane_Set_ToolTipTextRequest {
  // The id of the StatusBarPane object.
  StatusBarPaneInstance instance = 1;
  // Specifies the tooltip for a status bar pane. When this property is an empty string, the pane uses the StatusBarPane.Caption property for the tooltip.
  string val = 2;
}

message StatusBarPane_Set_ToolTipTextResponse {
}

message StatusBarPane_Get_ToolTipTextRequest {
  // The id of the StatusBarPane object.
  StatusBarPaneInstance instance = 1;
}

message StatusBarPane_Get_ToolTipTextResponse {
  // Specifies the tooltip for a status bar pane. When this property is an empty string, the pane uses the StatusBarPane.Caption property for the tooltip.
  string returnValue = 1;
}

// StatusBarPanes
//
// A collection of StatusBarPane objects.
//
service StatusBarPanes {
  // Method: Insert
  //
  // Adds a new item to the collection and returns the new StatusBarPane object.
  //
  // StatusBarPanes_InsertRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StatusBarPanesInstance - The id of the StatusBarPanes object.
  //    - insertBefore: int32 - Specifies the index of the existing StatusBar pane before which the new StatusBar pane is inserted. To insert at the end, pass -1 to this parameter.
  //
  // StatusBarPanes_InsertResponse - The response message from the server. It provides the return value.
  //    - returnValue: StatusBarPaneInstance - Specifies the new StatusBar pane. 
  //
  rpc Insert(StatusBarPanes_InsertRequest) returns (StatusBarPanes_InsertResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // StatusBarPanes_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarPanesInstance - The id of the StatusBarPanes object.
  //
  // StatusBarPanes_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(StatusBarPanes_ClearRequest) returns (StatusBarPanes_ClearResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // StatusBarPanes_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StatusBarPanesInstance - The id of the StatusBarPanes object.
  //    - paneIndex: ObjectInstance - Specifies a number to remove a StatusBar pane by the zero-based index. Pass a string to remove a StatusBar pane using the name.
  //
  // StatusBarPanes_RemoveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Remove(StatusBarPanes_RemoveRequest) returns (StatusBarPanes_RemoveResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item with the specified name or at the specified index in the collection.
  //
  // StatusBarPanes_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StatusBarPanesInstance - The id of the StatusBarPanes object.
  //    - paneIndex: oneof index { int32 numericIndex = 2; string nameIndex = 3; } - Specifies a number to obtain a StatusBar pane by the zero-based index. Pass a string to obtain the StatusBar pane using the name.
  //
  // StatusBarPanes_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: StatusBarPaneInstance - Returns a reference to an item with the specified name or at the specified index in the collection. 
  //
  rpc Get_Item(StatusBarPanes_Get_ItemRequest) returns (StatusBarPanes_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // StatusBarPanes_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarPanesInstance - The id of the StatusBarPanes object.
  //
  // StatusBarPanes_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(StatusBarPanes_Get_CountRequest) returns (StatusBarPanes_Get_CountResponse);
  
  
}
message StatusBarPanesInstance {
  // Specifies the handle of the StatusBarPanes instance in the server.
  string id = 1;
}
message StatusBarPanes_InsertRequest {
  // The id of the StatusBarPanes object.
  StatusBarPanesInstance instance = 1;
  // Specifies the name of the new StatusBar pane. This name must be unique and is not case-sensitive.
  string paneName = 2;
  // Specifies the index of the existing StatusBar pane before which the new StatusBar pane is inserted. To insert at the end, pass -1 to this parameter.
  int32 insertBefore = 3;
}

message StatusBarPanes_InsertResponse {
  // Specifies the new StatusBar pane.
  StatusBarPaneInstance returnValue = 1;
}

message StatusBarPanes_ClearRequest {
  // The id of the StatusBarPanes object.
  StatusBarPanesInstance instance = 1;
}

message StatusBarPanes_ClearResponse {
}

message StatusBarPanes_RemoveRequest {
  // The id of the StatusBarPanes object.
  StatusBarPanesInstance instance = 1;
  // Specifies a number to remove a StatusBar pane by the zero-based index. Pass a string to remove a StatusBar pane using the name.
  oneof index { int32 numericIndex = 2; string nameIndex = 3; }
}

message StatusBarPanes_RemoveResponse {
}

message StatusBarPanes_Get_ItemRequest {
  // The id of the StatusBarPanes object.
  StatusBarPanesInstance instance = 1;
  // Specifies a number to obtain a StatusBar pane by the zero-based index. Pass a string to obtain the StatusBar pane using the name.
  oneof index { int32 numericIndex = 2; string nameIndex = 3; }
}

message StatusBarPanes_Get_ItemResponse {
  // Returns a reference to an item with the specified name or at the specified index in the collection.
  StatusBarPaneInstance returnValue = 1;
}

message StatusBarPanes_Get_CountRequest {
  // The id of the StatusBarPanes object.
  StatusBarPanesInstance instance = 1;
}

message StatusBarPanes_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// ListBoxColumns
//
// A collection of ListBoxColumn objects. Use the ListBox.ColumnSet property to obtain a collection of columns for a ListBox control.
//
service ListBoxColumns {
  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // ListBoxColumns_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ListBoxColumnsInstance - The id of the ListBoxColumns object.
  //    - itemIdx: int32 - Pass the zero-based index of the column to return.
  //
  // ListBoxColumns_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: ListBoxColumnInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(ListBoxColumns_Get_ItemRequest) returns (ListBoxColumns_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // ListBoxColumns_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxColumnsInstance - The id of the ListBoxColumns object.
  //
  // ListBoxColumns_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(ListBoxColumns_Get_CountRequest) returns (ListBoxColumns_Get_CountResponse);
  
  
}
message ListBoxColumnsInstance {
  // Specifies the handle of the ListBoxColumns instance in the server.
  string id = 1;
}

message ListBoxColumnInstance {
  // Specifies the handle of the ListBoxColumn instance in the server.
  string id = 1;
}
message ListBoxColumns_Get_ItemRequest {
  // The id of the ListBoxColumns object.
  ListBoxColumnsInstance instance = 1;
  // Pass the zero-based index of the column to return.
  int32 itemIdx = 2;
}

message ListBoxColumns_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  ListBoxColumnInstance returnValue = 1;
}

message ListBoxColumns_Get_CountRequest {
  // The id of the ListBoxColumns object.
  ListBoxColumnsInstance instance = 1;
}

message ListBoxColumns_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// ListBoxColumn
//
// The ListBoxColumn object represents a visible column in the ListBox control. Use the ListBox.ColumnSet property to obtain a list of columns for the control.
// When using a SequenceListConnection, use the SequenceListConnection.GetColumnIndex and SequenceListConnection.SetColumnVisible methods to determine the columns the ListBox control displays and the index for each column in ListBoxColumns.
//
service ListBoxColumn {
  // Property: Index
  //
  // Returns the zero-based numeric index of the column within the ListBoxColumns collection.
  //
  // ListBoxColumn_Get_IndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxColumnInstance - The id of the ListBoxColumn object.
  //
  // ListBoxColumn_Get_IndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the zero-based numeric index of the column within the ListBoxColumns collection. 
  //
  rpc Get_Index(ListBoxColumn_Get_IndexRequest) returns (ListBoxColumn_Get_IndexResponse);
  
  
  // Property: Width
  //
  // Specifies the width of the column in pixels.
  //
  // ListBoxColumn_Set_WidthRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxColumnInstance - The id of the ListBoxColumn object.
  //    - val: int32 - Specifies the width of the column in pixels. 
  //
  // ListBoxColumn_Set_WidthResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBoxColumn_Get_WidthRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxColumnInstance - The id of the ListBoxColumn object.
  //
  // ListBoxColumn_Get_WidthResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the width of the column in pixels. 
  //
  rpc Set_Width(ListBoxColumn_Set_WidthRequest) returns (ListBoxColumn_Set_WidthResponse);
  rpc Get_Width(ListBoxColumn_Get_WidthRequest) returns (ListBoxColumn_Get_WidthResponse);
  
  
  // Property: AutoSizing
  //
  // Specifies whether the column automatically grows or shrinks to adjust to changes in the size of the control. This property does not take effect unless the ListBox.AutoSizeColumns property is True.
  //
  // ListBoxColumn_Set_AutoSizingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxColumnInstance - The id of the ListBoxColumn object.
  //    - val: AutoSizingOptions - Specifies whether the column automatically grows or shrinks to adjust to changes in the size of the control. This property does not take effect unless the ListBox.AutoSizeColumns property is True. 
  //
  // ListBoxColumn_Set_AutoSizingResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBoxColumn_Get_AutoSizingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxColumnInstance - The id of the ListBoxColumn object.
  //
  // ListBoxColumn_Get_AutoSizingResponse - The response message from the server. It provides the return value.
  //    - returnValue: AutoSizingOptions - Specifies whether the column automatically grows or shrinks to adjust to changes in the size of the control. This property does not take effect unless the ListBox.AutoSizeColumns property is True. 
  //
  rpc Set_AutoSizing(ListBoxColumn_Set_AutoSizingRequest) returns (ListBoxColumn_Set_AutoSizingResponse);
  rpc Get_AutoSizing(ListBoxColumn_Get_AutoSizingRequest) returns (ListBoxColumn_Get_AutoSizingResponse);
  
  
  // Property: Caption
  //
  // Returns the caption in the header for the column.
  //
  // ListBoxColumn_Get_CaptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxColumnInstance - The id of the ListBoxColumn object.
  //
  // ListBoxColumn_Get_CaptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the caption in the header for the column. 
  //
  rpc Get_Caption(ListBoxColumn_Get_CaptionRequest) returns (ListBoxColumn_Get_CaptionResponse);
  
  
}
message ListBoxColumn_Get_IndexRequest {
  // The id of the ListBoxColumn object.
  ListBoxColumnInstance instance = 1;
}

message ListBoxColumn_Get_IndexResponse {
  // Returns the zero-based numeric index of the column within the ListBoxColumns collection.
  int32 returnValue = 1;
}

message ListBoxColumn_Set_WidthRequest {
  // The id of the ListBoxColumn object.
  ListBoxColumnInstance instance = 1;
  // Specifies the width of the column in pixels.
  int32 val = 2;
}

message ListBoxColumn_Set_WidthResponse {
}

message ListBoxColumn_Get_WidthRequest {
  // The id of the ListBoxColumn object.
  ListBoxColumnInstance instance = 1;
}

message ListBoxColumn_Get_WidthResponse {
  // Specifies the width of the column in pixels.
  int32 returnValue = 1;
}

message ListBoxColumn_Set_AutoSizingRequest {
  // The id of the ListBoxColumn object.
  ListBoxColumnInstance instance = 1;
  // Specifies whether the column automatically grows or shrinks to adjust to changes in the size of the control. This property does not take effect unless the ListBox.AutoSizeColumns property is True.
  AutoSizingOptions val = 2;
}

message ListBoxColumn_Set_AutoSizingResponse {
}

message ListBoxColumn_Get_AutoSizingRequest {
  // The id of the ListBoxColumn object.
  ListBoxColumnInstance instance = 1;
}

message ListBoxColumn_Get_AutoSizingResponse {
  // Specifies whether the column automatically grows or shrinks to adjust to changes in the size of the control. This property does not take effect unless the ListBox.AutoSizeColumns property is True.
  AutoSizingOptions returnValue = 1;
}

message ListBoxColumn_Get_CaptionRequest {
  // The id of the ListBoxColumn object.
  ListBoxColumnInstance instance = 1;
}

message ListBoxColumn_Get_CaptionResponse {
  // Returns the caption in the header for the column.
  string returnValue = 1;
}

// SeqViewColumn
//
// The SeqViewColumn object represents a column in the SequenceView control. Use the  SequenceView.Columns property to obtain a list of columns for the control.
//
service SeqViewColumn {
  // Property: Name
  //
  // Specifies the name for the column.
  //
  // Every column must have a unique name, which can be used to identify the column within the SeqViewColumns collection. Column names are not case-sensitive.
  //
  // SeqViewColumn_Set_NameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SeqViewColumnInstance - The id of the SeqViewColumn object.
  //    - val: string - Specifies the name for the column. 
  //
  // SeqViewColumn_Set_NameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SeqViewColumn_Get_NameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SeqViewColumnInstance - The id of the SeqViewColumn object.
  //
  // SeqViewColumn_Get_NameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the name for the column. 
  //
  rpc Set_Name(SeqViewColumn_Set_NameRequest) returns (SeqViewColumn_Set_NameResponse);
  rpc Get_Name(SeqViewColumn_Get_NameRequest) returns (SeqViewColumn_Get_NameResponse);
  
  
  // Property: Width
  //
  // Specifies the width of the column in pixels. When you set the width, the control generates the SequenceView.ColumnResized event.
  //
  // SeqViewColumn_Set_WidthRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SeqViewColumnInstance - The id of the SeqViewColumn object.
  //    - val: int32 - Specifies the width of the column in pixels. When you set the width, the control generates the SequenceView.ColumnResized event. 
  //
  // SeqViewColumn_Set_WidthResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SeqViewColumn_Get_WidthRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SeqViewColumnInstance - The id of the SeqViewColumn object.
  //
  // SeqViewColumn_Get_WidthResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the width of the column in pixels. When you set the width, the control generates the SequenceView.ColumnResized event. 
  //
  rpc Set_Width(SeqViewColumn_Set_WidthRequest) returns (SeqViewColumn_Set_WidthResponse);
  rpc Get_Width(SeqViewColumn_Get_WidthRequest) returns (SeqViewColumn_Get_WidthResponse);
  
  
  // Property: Expression
  //
  // Specifies the expression for the column.
  //
  // The column evaluates the expression and displays the evaluation result for each step.
  // The Expression property is one of two ways you can define what a column displays. You can also use the SeqViewColumn.Type property to define standard columns, such as step index or step description.
  // Note: This property is active only when the column type is SeqViewColumnType_Expression. The expression must return a string.
  //
  // SeqViewColumn_Set_ExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SeqViewColumnInstance - The id of the SeqViewColumn object.
  //    - val: string - Specifies the expression for the column. 
  //
  // SeqViewColumn_Set_ExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SeqViewColumn_Get_ExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SeqViewColumnInstance - The id of the SeqViewColumn object.
  //
  // SeqViewColumn_Get_ExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the expression for the column. 
  //
  rpc Set_Expression(SeqViewColumn_Set_ExpressionRequest) returns (SeqViewColumn_Set_ExpressionResponse);
  rpc Get_Expression(SeqViewColumn_Get_ExpressionRequest) returns (SeqViewColumn_Get_ExpressionResponse);
  
  
  // Property: Visible
  //
  // Specifies whether the column is visible.
  //
  // SeqViewColumn_Set_VisibleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SeqViewColumnInstance - The id of the SeqViewColumn object.
  //    - val: bool - Specifies whether the column is visible. 
  //
  // SeqViewColumn_Set_VisibleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SeqViewColumn_Get_VisibleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SeqViewColumnInstance - The id of the SeqViewColumn object.
  //
  // SeqViewColumn_Get_VisibleResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the column is visible. 
  //
  rpc Set_Visible(SeqViewColumn_Set_VisibleRequest) returns (SeqViewColumn_Set_VisibleResponse);
  rpc Get_Visible(SeqViewColumn_Get_VisibleRequest) returns (SeqViewColumn_Get_VisibleResponse);
  
  
  // Property: Type
  //
  // Specifies the type of the column.
  //
  // You can use this property to define what kind of information displays for each step in the column. When the type of column you need is not defined in SeqViewColumnTypes, you can set the type to SeqViewColumnType_Expression and create your own type using the SeqViewColumn.Expression property. The result of the expression you specify displays for each step.
  //
  // SeqViewColumn_Set_TypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SeqViewColumnInstance - The id of the SeqViewColumn object.
  //    - val: SeqViewColumnTypes - Specifies the type of the column. 
  //
  // SeqViewColumn_Set_TypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SeqViewColumn_Get_TypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SeqViewColumnInstance - The id of the SeqViewColumn object.
  //
  // SeqViewColumn_Get_TypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: SeqViewColumnTypes - Specifies the type of the column. 
  //
  rpc Set_Type(SeqViewColumn_Set_TypeRequest) returns (SeqViewColumn_Set_TypeResponse);
  rpc Get_Type(SeqViewColumn_Get_TypeRequest) returns (SeqViewColumn_Get_TypeResponse);
  
  
  // Property: TextColorExpression
  //
  // Specifies an expression that determines the text color for individual cells in the column at run time.
  //
  // This expression overrides the item color the SequenceView.TextColor and SequenceView.ItemTextColorExpression properties define.
  // The expression must return a numeric color value. When you do not want to change the text color, return -1, as the following example shows:
  // Step.Result.Status == "Failed" ? tsRed: -1
  // When you assign this expression string to the TextColorExpression property of a column and run the application, the control colors the column text red for steps that fail.
  // When empty, the control ignores this property.
  //
  // SeqViewColumn_Set_TextColorExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SeqViewColumnInstance - The id of the SeqViewColumn object.
  //    - val: string - Specifies an expression that determines the text color for individual cells in the column at run time. 
  //
  // SeqViewColumn_Set_TextColorExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SeqViewColumn_Get_TextColorExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SeqViewColumnInstance - The id of the SeqViewColumn object.
  //
  // SeqViewColumn_Get_TextColorExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies an expression that determines the text color for individual cells in the column at run time. 
  //
  rpc Set_TextColorExpression(SeqViewColumn_Set_TextColorExpressionRequest) returns (SeqViewColumn_Set_TextColorExpressionResponse);
  rpc Get_TextColorExpression(SeqViewColumn_Get_TextColorExpressionRequest) returns (SeqViewColumn_Get_TextColorExpressionResponse);
  
  
  // Property: BackColorExpression
  //
  // Specifies an expression used to determine the background color for individual cells in the selected column at run time.
  //
  // This expression overrides the item color the SequenceView.BackColor and SequenceView.ItemBackColorExpression properties define.
  // Specify an expression that returns a numeric color value. When you do not want to change the text color, return -1, as the following example shows:
  // Step.Result.Status == "Failed" ? tsRed: -1
  // When you assign this expression string to the BackColorExpression property of a column and run the application, the control colors the column background red for steps that fail.
  // When empty, the control ignores this property.
  //
  // SeqViewColumn_Set_BackColorExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SeqViewColumnInstance - The id of the SeqViewColumn object.
  //    - val: string - Specifies an expression used to determine the background color for individual cells in the selected column at run time. 
  //
  // SeqViewColumn_Set_BackColorExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SeqViewColumn_Get_BackColorExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SeqViewColumnInstance - The id of the SeqViewColumn object.
  //
  // SeqViewColumn_Get_BackColorExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies an expression used to determine the background color for individual cells in the selected column at run time. 
  //
  rpc Set_BackColorExpression(SeqViewColumn_Set_BackColorExpressionRequest) returns (SeqViewColumn_Set_BackColorExpressionResponse);
  rpc Get_BackColorExpression(SeqViewColumn_Get_BackColorExpressionRequest) returns (SeqViewColumn_Get_BackColorExpressionResponse);
  
  
  // Property: Index
  //
  // Returns the zero-based numeric index of the column within the SeqViewColumns collection.
  //
  // SeqViewColumn_Get_IndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SeqViewColumnInstance - The id of the SeqViewColumn object.
  //
  // SeqViewColumn_Get_IndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the zero-based numeric index of the column within the SeqViewColumns collection. 
  //
  rpc Get_Index(SeqViewColumn_Get_IndexRequest) returns (SeqViewColumn_Get_IndexResponse);
  
  
  // Property: Caption
  //
  // Specifies the caption in the header for the column.
  //
  // SeqViewColumn_Set_CaptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SeqViewColumnInstance - The id of the SeqViewColumn object.
  //    - val: string - Specifies the caption in the header for the column. 
  //
  // SeqViewColumn_Set_CaptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SeqViewColumn_Get_CaptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SeqViewColumnInstance - The id of the SeqViewColumn object.
  //
  // SeqViewColumn_Get_CaptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the caption in the header for the column. 
  //
  rpc Set_Caption(SeqViewColumn_Set_CaptionRequest) returns (SeqViewColumn_Set_CaptionResponse);
  rpc Get_Caption(SeqViewColumn_Get_CaptionRequest) returns (SeqViewColumn_Get_CaptionResponse);
  
  
  // Property: AutoSizing
  //
  // Specifies whether the column automatically grows or shrinks to adjust to changes in the size of the control. This property does not take effect unless the SequenceView.AutoSizeColumns property is True.
  //
  // SeqViewColumn_Set_AutoSizingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SeqViewColumnInstance - The id of the SeqViewColumn object.
  //    - val: AutoSizingOptions - Specifies whether the column automatically grows or shrinks to adjust to changes in the size of the control. This property does not take effect unless the SequenceView.AutoSizeColumns property is True. 
  //
  // SeqViewColumn_Set_AutoSizingResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SeqViewColumn_Get_AutoSizingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SeqViewColumnInstance - The id of the SeqViewColumn object.
  //
  // SeqViewColumn_Get_AutoSizingResponse - The response message from the server. It provides the return value.
  //    - returnValue: AutoSizingOptions - Specifies whether the column automatically grows or shrinks to adjust to changes in the size of the control. This property does not take effect unless the SequenceView.AutoSizeColumns property is True. 
  //
  rpc Set_AutoSizing(SeqViewColumn_Set_AutoSizingRequest) returns (SeqViewColumn_Set_AutoSizingResponse);
  rpc Get_AutoSizing(SeqViewColumn_Get_AutoSizingRequest) returns (SeqViewColumn_Get_AutoSizingResponse);
  
  
}
message SeqViewColumnInstance {
  // Specifies the handle of the SeqViewColumn instance in the server.
  string id = 1;
}
message SeqViewColumn_Set_NameRequest {
  // The id of the SeqViewColumn object.
  SeqViewColumnInstance instance = 1;
  // Specifies the name for the column.
  string val = 2;
}

message SeqViewColumn_Set_NameResponse {
}

message SeqViewColumn_Get_NameRequest {
  // The id of the SeqViewColumn object.
  SeqViewColumnInstance instance = 1;
}

message SeqViewColumn_Get_NameResponse {
  // Specifies the name for the column.
  string returnValue = 1;
}

message SeqViewColumn_Set_WidthRequest {
  // The id of the SeqViewColumn object.
  SeqViewColumnInstance instance = 1;
  // Specifies the width of the column in pixels. When you set the width, the control generates the SequenceView.ColumnResized event.
  int32 val = 2;
}

message SeqViewColumn_Set_WidthResponse {
}

message SeqViewColumn_Get_WidthRequest {
  // The id of the SeqViewColumn object.
  SeqViewColumnInstance instance = 1;
}

message SeqViewColumn_Get_WidthResponse {
  // Specifies the width of the column in pixels. When you set the width, the control generates the SequenceView.ColumnResized event.
  int32 returnValue = 1;
}

message SeqViewColumn_Set_ExpressionRequest {
  // The id of the SeqViewColumn object.
  SeqViewColumnInstance instance = 1;
  // Specifies the expression for the column.
  string val = 2;
}

message SeqViewColumn_Set_ExpressionResponse {
}

message SeqViewColumn_Get_ExpressionRequest {
  // The id of the SeqViewColumn object.
  SeqViewColumnInstance instance = 1;
}

message SeqViewColumn_Get_ExpressionResponse {
  // Specifies the expression for the column.
  string returnValue = 1;
}

message SeqViewColumn_Set_VisibleRequest {
  // The id of the SeqViewColumn object.
  SeqViewColumnInstance instance = 1;
  // Specifies whether the column is visible.
  bool val = 2;
}

message SeqViewColumn_Set_VisibleResponse {
}

message SeqViewColumn_Get_VisibleRequest {
  // The id of the SeqViewColumn object.
  SeqViewColumnInstance instance = 1;
}

message SeqViewColumn_Get_VisibleResponse {
  // Specifies whether the column is visible.
  bool returnValue = 1;
}

message SeqViewColumn_Set_TypeRequest {
  // The id of the SeqViewColumn object.
  SeqViewColumnInstance instance = 1;
  // Specifies the type of the column.
  SeqViewColumnTypes val = 2;
}

message SeqViewColumn_Set_TypeResponse {
}

message SeqViewColumn_Get_TypeRequest {
  // The id of the SeqViewColumn object.
  SeqViewColumnInstance instance = 1;
}

message SeqViewColumn_Get_TypeResponse {
  // Specifies the type of the column.
  SeqViewColumnTypes returnValue = 1;
}

message SeqViewColumn_Set_TextColorExpressionRequest {
  // The id of the SeqViewColumn object.
  SeqViewColumnInstance instance = 1;
  // Specifies an expression that determines the text color for individual cells in the column at run time.
  string val = 2;
}

message SeqViewColumn_Set_TextColorExpressionResponse {
}

message SeqViewColumn_Get_TextColorExpressionRequest {
  // The id of the SeqViewColumn object.
  SeqViewColumnInstance instance = 1;
}

message SeqViewColumn_Get_TextColorExpressionResponse {
  // Specifies an expression that determines the text color for individual cells in the column at run time.
  string returnValue = 1;
}

message SeqViewColumn_Set_BackColorExpressionRequest {
  // The id of the SeqViewColumn object.
  SeqViewColumnInstance instance = 1;
  // Specifies an expression used to determine the background color for individual cells in the selected column at run time.
  string val = 2;
}

message SeqViewColumn_Set_BackColorExpressionResponse {
}

message SeqViewColumn_Get_BackColorExpressionRequest {
  // The id of the SeqViewColumn object.
  SeqViewColumnInstance instance = 1;
}

message SeqViewColumn_Get_BackColorExpressionResponse {
  // Specifies an expression used to determine the background color for individual cells in the selected column at run time.
  string returnValue = 1;
}

message SeqViewColumn_Get_IndexRequest {
  // The id of the SeqViewColumn object.
  SeqViewColumnInstance instance = 1;
}

message SeqViewColumn_Get_IndexResponse {
  // Returns the zero-based numeric index of the column within the SeqViewColumns collection.
  int32 returnValue = 1;
}

message SeqViewColumn_Set_CaptionRequest {
  // The id of the SeqViewColumn object.
  SeqViewColumnInstance instance = 1;
  // Specifies the caption in the header for the column.
  string val = 2;
}

message SeqViewColumn_Set_CaptionResponse {
}

message SeqViewColumn_Get_CaptionRequest {
  // The id of the SeqViewColumn object.
  SeqViewColumnInstance instance = 1;
}

message SeqViewColumn_Get_CaptionResponse {
  // Specifies the caption in the header for the column.
  string returnValue = 1;
}

message SeqViewColumn_Set_AutoSizingRequest {
  // The id of the SeqViewColumn object.
  SeqViewColumnInstance instance = 1;
  // Specifies whether the column automatically grows or shrinks to adjust to changes in the size of the control. This property does not take effect unless the SequenceView.AutoSizeColumns property is True.
  AutoSizingOptions val = 2;
}

message SeqViewColumn_Set_AutoSizingResponse {
}

message SeqViewColumn_Get_AutoSizingRequest {
  // The id of the SeqViewColumn object.
  SeqViewColumnInstance instance = 1;
}

message SeqViewColumn_Get_AutoSizingResponse {
  // Specifies whether the column automatically grows or shrinks to adjust to changes in the size of the control. This property does not take effect unless the SequenceView.AutoSizeColumns property is True.
  AutoSizingOptions returnValue = 1;
}

// SeqViewColumns
//
// A collection of SeqViewColumn objects.
//
service SeqViewColumns {
  // Method: Insert
  //
  // Adds a new item to the collection and returns the new SeqViewColumn object.
  //
  // SeqViewColumns_InsertRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SeqViewColumnsInstance - The id of the SeqViewColumns object.
  //    - itemName: string - Specifies the name of the new column. The name must be unique but is not case-sensitive.
  //    - columnType: SeqViewColumnTypes - Specifies the type of column. Refer to the SeqViewColumn.Type property for more information about column types.
  //    - columnWidth: int32 - Specifies the width of the new column, in pixels.
  //    - insertBefore: int32 - Specifies the index of the existing page before which to insert the new page. When you want the new page to be last, pass -1 to this parameter.
  //
  // SeqViewColumns_InsertResponse - The response message from the server. It provides the return value.
  //    - returnValue: SeqViewColumnInstance - The return type of the SeqViewColumn object.
  //
  rpc Insert(SeqViewColumns_InsertRequest) returns (SeqViewColumns_InsertResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // SeqViewColumns_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SeqViewColumnsInstance - The id of the SeqViewColumns object.
  //    - itemIdx: int32 - Specifies the zero-based index of the column to remove from the collection.
  //
  // SeqViewColumns_RemoveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Remove(SeqViewColumns_RemoveRequest) returns (SeqViewColumns_RemoveResponse);
  
  
  // Method: MoveLeft
  //
  // Moves a specific column one position to the left towards the beginning of the collection. For example, call Control.Columns.MoveLeft(1) to switch the first and second columns.
  //
  // SeqViewColumns_MoveLeftRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SeqViewColumnsInstance - The id of the SeqViewColumns object.
  //    - itemIdx: int32 - Specifies the zero-based index of the column to move in the collection.
  //
  // SeqViewColumns_MoveLeftResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc MoveLeft(SeqViewColumns_MoveLeftRequest) returns (SeqViewColumns_MoveLeftResponse);
  
  
  // Method: MoveRight
  //
  // Moves a specific column one position to the right towards the end of the collection. For example, call Control.Columns.MoveRight(0) to switch the first and second columns.
  //
  // SeqViewColumns_MoveRightRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SeqViewColumnsInstance - The id of the SeqViewColumns object.
  //    - itemIdx: int32 - Specifies the zero-based index of the column to move in the collection.
  //
  // SeqViewColumns_MoveRightResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc MoveRight(SeqViewColumns_MoveRightRequest) returns (SeqViewColumns_MoveRightResponse);
  
  
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // SeqViewColumns_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SeqViewColumnsInstance - The id of the SeqViewColumns object.
  //
  // SeqViewColumns_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(SeqViewColumns_ClearRequest) returns (SeqViewColumns_ClearResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item with the specified name or at the specified index in the collection.
  //
  // SeqViewColumns_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SeqViewColumnsInstance - The id of the SeqViewColumns object.
  //    - itemIdx: oneof index { int32 numericIndex = 2; string nameIndex = 3; } - You can pass a number to obtain a column by its index value. You can also pass a string to obtain the column using its name.
  //
  // SeqViewColumns_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: SeqViewColumnInstance - Returns a reference to an item with the specified name or at the specified index in the collection. 
  //
  rpc Get_Item(SeqViewColumns_Get_ItemRequest) returns (SeqViewColumns_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // SeqViewColumns_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SeqViewColumnsInstance - The id of the SeqViewColumns object.
  //
  // SeqViewColumns_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(SeqViewColumns_Get_CountRequest) returns (SeqViewColumns_Get_CountResponse);
  
  
}
message SeqViewColumnsInstance {
  // Specifies the handle of the SeqViewColumns instance in the server.
  string id = 1;
}
message SeqViewColumns_InsertRequest {
  // The id of the SeqViewColumns object.
  SeqViewColumnsInstance instance = 1;
  // Specifies the name of the new column. The name must be unique but is not case-sensitive.
  string itemName = 2;
  // Specifies the type of column. Refer to the SeqViewColumn.Type property for more information about column types.
  SeqViewColumnTypes columnType = 3;
  // Specifies the width of the new column, in pixels.
  int32 columnWidth = 4;
  // Specifies the index of the existing page before which to insert the new page. When you want the new page to be last, pass -1 to this parameter.
  int32 insertBefore = 5;
}

message SeqViewColumns_InsertResponse {
  // The return type of the SeqViewColumn object.
  SeqViewColumnInstance returnValue = 1;
}

message SeqViewColumns_RemoveRequest {
  // The id of the SeqViewColumns object.
  SeqViewColumnsInstance instance = 1;
  // Specifies the zero-based index of the column to remove from the collection.
  int32 itemIdx = 2;
}

message SeqViewColumns_RemoveResponse {
}

message SeqViewColumns_MoveLeftRequest {
  // The id of the SeqViewColumns object.
  SeqViewColumnsInstance instance = 1;
  // Specifies the zero-based index of the column to move in the collection.
  int32 itemIdx = 2;
}

message SeqViewColumns_MoveLeftResponse {
}

message SeqViewColumns_MoveRightRequest {
  // The id of the SeqViewColumns object.
  SeqViewColumnsInstance instance = 1;
  // Specifies the zero-based index of the column to move in the collection.
  int32 itemIdx = 2;
}

message SeqViewColumns_MoveRightResponse {
}

message SeqViewColumns_ClearRequest {
  // The id of the SeqViewColumns object.
  SeqViewColumnsInstance instance = 1;
}

message SeqViewColumns_ClearResponse {
}

message SeqViewColumns_Get_ItemRequest {
  // The id of the SeqViewColumns object.
  SeqViewColumnsInstance instance = 1;
  // You can pass a number to obtain a column by its index value. You can also pass a string to obtain the column using its name.
  oneof index { int32 numericIndex = 2; string nameIndex = 3; }
}

message SeqViewColumns_Get_ItemResponse {
  // Returns a reference to an item with the specified name or at the specified index in the collection.
  SeqViewColumnInstance returnValue = 1;
}

message SeqViewColumns_Get_CountRequest {
  // The id of the SeqViewColumns object.
  SeqViewColumnsInstance instance = 1;
}

message SeqViewColumns_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// SequenceFiles
//
// Read-only collection of sequence files. Use the  ApplicationMgr.SequenceFiles property to obtain the collection of SequenceFile objects the Application Manager control opens.
//
service SequenceFiles {
  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // SequenceFiles_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFilesInstance - The id of the SequenceFiles object.
  //    - fileIndex: oneof index { int32 numericIndex = 2; string nameIndex = 3; } - Specifies the zero-based index of the item to retrieve. Use a non-negative number less than the value of the SequenceFiles.Count property. Alternatively, you can pass a string with the fully qualified path of the sequence file to retrieve from the collection.
  //
  // SequenceFiles_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFileInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(SequenceFiles_Get_ItemRequest) returns (SequenceFiles_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // SequenceFiles_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFilesInstance - The id of the SequenceFiles object.
  //
  // SequenceFiles_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(SequenceFiles_Get_CountRequest) returns (SequenceFiles_Get_CountResponse);
  
  
}
message SequenceFilesInstance {
  // Specifies the handle of the SequenceFiles instance in the server.
  string id = 1;
}
message SequenceFiles_Get_ItemRequest {
  // The id of the SequenceFiles object.
  SequenceFilesInstance instance = 1;
  // Specifies the zero-based index of the item to retrieve. Use a non-negative number less than the value of the SequenceFiles.Count property. Alternatively, you can pass a string with the fully qualified path of the sequence file to retrieve from the collection.
  oneof index { int32 numericIndex = 2; string nameIndex = 3; }
}

message SequenceFiles_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  SequenceFileInstance returnValue = 1;
}

message SequenceFiles_Get_CountRequest {
  // The id of the SequenceFiles object.
  SequenceFilesInstance instance = 1;
}

message SequenceFiles_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// Executions
//
// A collection of Execution objects. The ApplicationMgr.Executions property returns an Executions object, which contains all the executions the application created.
//
service Executions {
  // Method: ResumeAll
  //
  // Resumes all paused executions in the collection.
  //
  // Executions_ResumeAllRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionsInstance - The id of the Executions object.
  //
  // Executions_ResumeAllResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ResumeAll(Executions_ResumeAllRequest) returns (Executions_ResumeAllResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // Executions_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionsInstance - The id of the Executions object.
  //    - itemIdx: int32 - Specifies the zero-based index. Use a non-negative number less than the value of the Executions.Count property.
  //
  // Executions_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(Executions_Get_ItemRequest) returns (Executions_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // Executions_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionsInstance - The id of the Executions object.
  //
  // Executions_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(Executions_Get_CountRequest) returns (Executions_Get_CountResponse);
  
  
  // Property: NumIncomplete
  //
  // Returns the number of incomplete executions in the collection, which is the sum of paused and running executions.
  //
  // Executions_Get_NumIncompleteRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionsInstance - The id of the Executions object.
  //
  // Executions_Get_NumIncompleteResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of incomplete executions in the collection, which is the sum of paused and running executions. 
  //
  rpc Get_NumIncomplete(Executions_Get_NumIncompleteRequest) returns (Executions_Get_NumIncompleteResponse);
  
  
  // Property: NumPaused
  //
  // Returns the number of paused executions in the collection.
  //
  // Executions_Get_NumPausedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionsInstance - The id of the Executions object.
  //
  // Executions_Get_NumPausedResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of paused executions in the collection. 
  //
  rpc Get_NumPaused(Executions_Get_NumPausedRequest) returns (Executions_Get_NumPausedResponse);
  
  
  // Property: NumRunning
  //
  // Returns the number of running executions. Paused executions are not considered to be running.
  //
  // Executions_Get_NumRunningRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionsInstance - The id of the Executions object.
  //
  // Executions_Get_NumRunningResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of running executions. Paused executions are not considered to be running. 
  //
  rpc Get_NumRunning(Executions_Get_NumRunningRequest) returns (Executions_Get_NumRunningResponse);
  
  
}
message ExecutionsInstance {
  // Specifies the handle of the Executions instance in the server.
  string id = 1;
}
message Executions_ResumeAllRequest {
  // The id of the Executions object.
  ExecutionsInstance instance = 1;
}

message Executions_ResumeAllResponse {
}

message Executions_Get_ItemRequest {
  // The id of the Executions object.
  ExecutionsInstance instance = 1;
  // Specifies the zero-based index. Use a non-negative number less than the value of the Executions.Count property.
  int32 itemIdx = 2;
}

message Executions_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  ExecutionInstance returnValue = 1;
}

message Executions_Get_CountRequest {
  // The id of the Executions object.
  ExecutionsInstance instance = 1;
}

message Executions_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

message Executions_Get_NumIncompleteRequest {
  // The id of the Executions object.
  ExecutionsInstance instance = 1;
}

message Executions_Get_NumIncompleteResponse {
  // Returns the number of incomplete executions in the collection, which is the sum of paused and running executions.
  int32 returnValue = 1;
}

message Executions_Get_NumPausedRequest {
  // The id of the Executions object.
  ExecutionsInstance instance = 1;
}

message Executions_Get_NumPausedResponse {
  // Returns the number of paused executions in the collection.
  int32 returnValue = 1;
}

message Executions_Get_NumRunningRequest {
  // The id of the Executions object.
  ExecutionsInstance instance = 1;
}

message Executions_Get_NumRunningResponse {
  // Returns the number of running executions. Paused executions are not considered to be running.
  int32 returnValue = 1;
}

// EntryPoint
//
// An EntryPoint object represents an Execution or Configuration entry point. You can execute the entry point sequence using the EntryPoint.LoopOnSelectedSteps, EntryPoint.Run, or EntryPoint.RunSelectedSteps methods.
// Use the ExecutionViewMgr.ConfigurationEntryPoints, ExecutionViewMgr.ExecutionEntryPoints, SequenceFileViewMgr.ConfigurationEntryPoints, and SequenceFileViewMgr.ExecutionEntryPoints properties to retrieve an EntryPoints object that is a collection of entry points.
//
service EntryPoint {
  // Method: Run
  //
  // Runs the entry point.
  //
  // EntryPoint_RunRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EntryPointInstance - The id of the EntryPoint object.
  //    - editArgsVal: ObjectInstance - Specifies the EditArgs object for the new execution. Use this parameter only to override the EditArgs object the SequenceFileView Manager control creates.
  //
  // EntryPoint_RunResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionInstance - The new execution. 
  //
  rpc Run(EntryPoint_RunRequest) returns (EntryPoint_RunResponse);
  
  
  // Method: RunSelectedSteps
  //
  // Starts an interactive execution that runs the selected steps using the entry point of the process model.
  //
  // Use the EntryPoint.InteractiveExecutionAllowed property to determine whether you can call this method.
  //
  // EntryPoint_RunSelectedStepsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EntryPointInstance - The id of the EntryPoint object.
  //    - interactiveArgsVal: ObjectInstance - Specifies the InteractiveArgs objects for the new interactive execution. Use this parameter only to override the InteractiveArgs objects the SequenceFileView Manager control creates.
  //    - editArgsVal: ObjectInstance - Specifies the EditArgs object for the new interactive execution. Use this parameter only to override the EditArgs object the SequenceFileView Manager control creates.
  //
  // EntryPoint_RunSelectedStepsResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionInstance - The new interactive execution 
  //
  rpc RunSelectedSteps(EntryPoint_RunSelectedStepsRequest) returns (EntryPoint_RunSelectedStepsResponse);
  
  
  // Method: LoopOnSelectedSteps
  //
  // Starts an interactive execution that loops on the selected steps using the entry point of the process model.
  //
  // Use the EntryPoint.InteractiveExecutionAllowed property to determine whether you can call this method.
  //
  // EntryPoint_LoopOnSelectedStepsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EntryPointInstance - The id of the EntryPoint object.
  //    - interactiveArgsVal: ObjectInstance - Specifies an InteractiveArgs object for the new interactive execution. Use this parameter only to override the InteractiveArgs object the SequenceFileView Manager control creates.
  //    - editArgsVal: ObjectInstance - Specifies the EditArgs object for the new interactive execution. Use this parameter only to override the EditArgs object the SequenceFileView Manager control creates.
  //
  // EntryPoint_LoopOnSelectedStepsResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionInstance - The new interactive execution. 
  //
  rpc LoopOnSelectedSteps(EntryPoint_LoopOnSelectedStepsRequest) returns (EntryPoint_LoopOnSelectedStepsResponse);
  
  

  // Property: Name
  //
  // Returns the display name of the entry point.
  //
  // EntryPoint_Get_NameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EntryPointInstance - The id of the EntryPoint object.
  //
  // EntryPoint_Get_NameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Returns the display name of the entry point. 
  //
  rpc Get_Name(EntryPoint_Get_NameRequest) returns (EntryPoint_Get_NameResponse);
  
  
  // Property: Enabled
  //
  // Returns a Boolean value that indicates whether the entry point can be used to create an execution.
  //
  // Use this value to update the enabled state of the control that might call the entry point. When you use a Button control connected to an entry point command source, the enabled state of the button updates automatically.
  //
  // EntryPoint_Get_EnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EntryPointInstance - The id of the EntryPoint object.
  //
  // EntryPoint_Get_EnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a Boolean value that indicates whether the entry point can be used to create an execution. 
  //
  rpc Get_Enabled(EntryPoint_Get_EnabledRequest) returns (EntryPoint_Get_EnabledResponse);
  
  
  // Property: InteractiveExecutionAllowed
  //
  // Returns True if interactive executions are permitted using this entry point.
  //
  // When this property is True, you can call the EntryPoint.RunSelectedSteps or EntryPoint.LoopOnSelectedSteps methods.
  //
  // EntryPoint_Get_InteractiveExecutionAllowedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EntryPointInstance - The id of the EntryPoint object.
  //
  // EntryPoint_Get_InteractiveExecutionAllowedResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if interactive executions are permitted using this entry point. 
  //
  rpc Get_InteractiveExecutionAllowed(EntryPoint_Get_InteractiveExecutionAllowedRequest) returns (EntryPoint_Get_InteractiveExecutionAllowedResponse);
  
  
  // Property: Sequence
  //
  // Returns the sequence that defines this entry point.
  //
  // Use this property to access additional information about the entry point you cannot obtain from properties or methods of the entry point. For example, use this property to determine whether the entry point is an Execution or a Configuration entry point.
  //
  // EntryPoint_Get_SequenceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EntryPointInstance - The id of the EntryPoint object.
  //
  // EntryPoint_Get_SequenceResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceInstance - Returns the sequence that defines this entry point. 
  //
  rpc Get_Sequence(EntryPoint_Get_SequenceRequest) returns (EntryPoint_Get_SequenceResponse);
  
  
}
message EntryPointInstance {
  // Specifies the handle of the EntryPoint instance in the server.
  string id = 1;
}
message EntryPoint_RunRequest {
  // The id of the EntryPoint object.
  EntryPointInstance instance = 1;
  // Specifies the EditArgs object for the new execution. Use this parameter only to override the EditArgs object the SequenceFileView Manager control creates.
  PropertyObjectInstance editArgsVal = 2;
}

message EntryPoint_RunResponse {
  // The new execution.
  ExecutionInstance returnValue = 1;
}

message EntryPoint_RunSelectedStepsRequest {
  // The id of the EntryPoint object.
  EntryPointInstance instance = 1;
  // Specifies the InteractiveArgs objects for the new interactive execution. Use this parameter only to override the InteractiveArgs objects the SequenceFileView Manager control creates.
  PropertyObjectInstance interactiveArgsVal = 2;
  // Specifies the EditArgs object for the new interactive execution. Use this parameter only to override the EditArgs object the SequenceFileView Manager control creates.
  PropertyObjectInstance editArgsVal = 3;
}

message EntryPoint_RunSelectedStepsResponse {
  // The new interactive execution
  ExecutionInstance returnValue = 1;
}

message EntryPoint_LoopOnSelectedStepsRequest {
  // The id of the EntryPoint object.
  EntryPointInstance instance = 1;
  // Specifies an InteractiveArgs object for the new interactive execution. Use this parameter only to override the InteractiveArgs object the SequenceFileView Manager control creates.
  PropertyObjectInstance interactiveArgsVal = 2;
  // Specifies the EditArgs object for the new interactive execution. Use this parameter only to override the EditArgs object the SequenceFileView Manager control creates.
  PropertyObjectInstance editArgsVal = 3;
}

message EntryPoint_LoopOnSelectedStepsResponse {
  // The new interactive execution.
  ExecutionInstance returnValue = 1;
}

message EntryPoint_Get_NameRequest {
  // The id of the EntryPoint object.
  EntryPointInstance instance = 1;
}

message EntryPoint_Get_NameResponse {
  // Returns the display name of the entry point.
  string returnValue = 1;
}

message EntryPoint_Get_EnabledRequest {
  // The id of the EntryPoint object.
  EntryPointInstance instance = 1;
}

message EntryPoint_Get_EnabledResponse {
  // Returns a Boolean value that indicates whether the entry point can be used to create an execution.
  bool returnValue = 1;
}

message EntryPoint_Get_InteractiveExecutionAllowedRequest {
  // The id of the EntryPoint object.
  EntryPointInstance instance = 1;
}

message EntryPoint_Get_InteractiveExecutionAllowedResponse {
  // Returns True if interactive executions are permitted using this entry point.
  bool returnValue = 1;
}

message EntryPoint_Get_SequenceRequest {
  // The id of the EntryPoint object.
  EntryPointInstance instance = 1;
}

message EntryPoint_Get_SequenceResponse {
  // Returns the sequence that defines this entry point.
  SequenceInstance returnValue = 1;
}

// EntryPoints
//
// A Collection of EntryPoint objects. Use the ConfigurationEntryPoints and ExecutionEntryPoints methods of the SequenceFileView Manager and ExecutionView Manager controls to retrieve an EntryPoints object.
//
service EntryPoints {
  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // EntryPoints_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: EntryPointsInstance - The id of the EntryPoints object.
  //    - entryPointIndexParam: oneof index { int32 numericIndex = 2; string nameIndex = 3; } - Specifies the zero-based index. Use a non-negative number less than the value of the EntryPoints.Count property.
  //
  // EntryPoints_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: EntryPointInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(EntryPoints_Get_ItemRequest) returns (EntryPoints_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // EntryPoints_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: EntryPointsInstance - The id of the EntryPoints object.
  //
  // EntryPoints_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(EntryPoints_Get_CountRequest) returns (EntryPoints_Get_CountResponse);
  
  
}
message EntryPointsInstance {
  // Specifies the handle of the EntryPoints instance in the server.
  string id = 1;
}
message EntryPoints_Get_ItemRequest {
  // The id of the EntryPoints object.
  EntryPointsInstance instance = 1;
  // Specifies the zero-based index. Use a non-negative number less than the value of the EntryPoints.Count property.
  oneof index { int32 numericIndex = 2; string nameIndex = 3; }
}

message EntryPoints_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  EntryPointInstance returnValue = 1;
}

message EntryPoints_Get_CountRequest {
  // The id of the EntryPoints object.
  EntryPointsInstance instance = 1;
}

message EntryPoints_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// Command
//
// Use Command objects in applications to implement a user interface element that performs a standard action, such as opening a sequence file or executing a set of selected steps in a sequence. A Command object determines the dimming, visibility, shortcut key, and caption for the menu item, button, or checkbox that invokes the command. The Command object also provides the implementation of the action, which it performs when you call the Command.Execute method.
// In many cases you can use a TestStand Utility Library function, such as InsertCommandsInMenu, instead of Command objects to create menu items that invoke the  commands you specify. You can also call the ConnectCommand method on a TestStand manager control to connect a command to a TestStand button or checkbox control.
// To create Command objects, call the ApplicationMgr.NewCommands method to create a Commands collection. You specify the commands to create with the CommandKinds enumeration constants. When you call the Commands.InsertKind method, you can also specify a TestStand manager control. A command you create uses the specified manager control to determine the currently selected sequence file, execution, sequence, or steps. According to the selection and the type of command, the command determines the state of its properties, such as enabled and visible, and determines which items the command operates on when it executes. Some commands do not require a manager control, while others require a specific manager control. Refer to the CommandKinds enumeration for more information about which manager controls work with specific commands.
// You can also create commands using the following methods:    * ApplicationMgr.GetCommand    * ExecutionViewMgr.GetCommand    * SequenceFileViewMgr.GetCommand    * Commands.InsertKind
//
service Command {
  // Method: GetDisplayName
  //
  // Returns text that describes the command to the end user. The default text value is localized for the currently selected language. Typically, this text labels the menu item or button that invokes the command.
  //
  // Command_GetDisplayNameRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommandInstance - The id of the Command object.
  //    - acceleratorPrefix: string - Specifies the character(s) you want to precede the accelerator character, when one exists, in the display name the method returns. The accelerator prefix for menu items and button labels varies according to the programming environment. For example, LabVIEW uses "_", LabWindows/CVI uses "__", and C#, Microsoft Visual C++, and Microsoft Visual Basic .NET use "&". When you are not assigning the display name to the label of a user interface element that supports accelerators, pass an empty string.
  //    - includeShortcutText: bool - Pass True to append characters that represent the shortcut key for the command to the display name the method returns. When the command does not have a shortcut key, the display name remains unchanged.
  //
  // Command_GetDisplayNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetDisplayName(Command_GetDisplayNameRequest) returns (Command_GetDisplayNameResponse);
  
  
  // Method: SetDisplayName
  //
  // Specifies text that describes the command to the user.
  //
  // Command_SetDisplayNameRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommandInstance - The id of the Command object.
  //    - val: string - Pass the new value for the command display name. When the new display name has a character you want to designate as the accelerator character, precede the character with an ampersand (&).
  //
  // Command_SetDisplayNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetDisplayName(Command_SetDisplayNameRequest) returns (Command_SetDisplayNameResponse);
  
  
  // Method: Execute
  //
  // Executes the action that the command performs.
  //
  // Command_ExecuteRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommandInstance - The id of the Command object.
  //    - applicationHandlesError: bool - Specifies how the method reports an error that occurs when executing the command. When this parameter is False, the method returns the error to the caller. When this parameter is True, the method calls the ApplicationMgr.ReportError event to report the error.
  //
  // Command_ExecuteResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Execute(Command_ExecuteRequest) returns (Command_ExecuteResponse);
  
  

  // Property: Enabled
  //
  // Specifies to enable or disable the menu item or user interface element that invokes the command.
  //
  // The command computes the value of this property according to the kind of command and the current state of the items to which the command applies. However, when you set this property, the command returns only the property values that you set for the remainder of the life of the Command object.
  //
  // Command_Set_EnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandInstance - The id of the Command object.
  //    - val: bool - Specifies to enable or disable the menu item or user interface element that invokes the command. 
  //
  // Command_Set_EnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Command_Get_EnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandInstance - The id of the Command object.
  //
  // Command_Get_EnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies to enable or disable the menu item or user interface element that invokes the command. 
  //
  rpc Set_Enabled(Command_Set_EnabledRequest) returns (Command_Set_EnabledResponse);
  rpc Get_Enabled(Command_Get_EnabledRequest) returns (Command_Get_EnabledResponse);
  
  
  // Property: Visible
  //
  // Specifies whether to show or hide the menu item or user interface element that invokes the command.
  //
  // The command computes the value of this property according to the kind of command and the current state of the items to which the command applies. However, when you set this property, the command returns only the property values you set for the remainder of the life of the Command object.
  //
  // Command_Set_VisibleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandInstance - The id of the Command object.
  //    - val: bool - Specifies whether to show or hide the menu item or user interface element that invokes the command. 
  //
  // Command_Set_VisibleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Command_Get_VisibleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandInstance - The id of the Command object.
  //
  // Command_Get_VisibleResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether to show or hide the menu item or user interface element that invokes the command. 
  //
  rpc Set_Visible(Command_Set_VisibleRequest) returns (Command_Set_VisibleResponse);
  rpc Get_Visible(Command_Get_VisibleRequest) returns (Command_Get_VisibleResponse);
  
  
  // Property: IsSeparator
  //
  // Specifies the menu item or user interface element that represents the command displays as a menu separator or other appropriate user interface divider element when this property is True.
  //
  // The command computes the value of this property according to the kind of command. However, when you set this property, the command returns only the property values you set for the remainder of the life of the Command object.
  //
  // Command_Set_IsSeparatorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandInstance - The id of the Command object.
  //    - val: bool - Specifies the menu item or user interface element that represents the command displays as a menu separator or other appropriate user interface divider element when this property is True. 
  //
  // Command_Set_IsSeparatorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Command_Get_IsSeparatorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandInstance - The id of the Command object.
  //
  // Command_Get_IsSeparatorResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies the menu item or user interface element that represents the command displays as a menu separator or other appropriate user interface divider element when this property is True. 
  //
  rpc Set_IsSeparator(Command_Set_IsSeparatorRequest) returns (Command_Set_IsSeparatorResponse);
  rpc Get_IsSeparator(Command_Get_IsSeparatorRequest) returns (Command_Get_IsSeparatorResponse);
  
  
  // Property: IsToggle
  //
  // Specifies whether the menu item or user interface element that represents the command can toggle between the on and off states. When this property is True, a menu item that represents the command displays a checkmark the user can enable or disable.
  //
  // The command computes the value of this property according to the kind of command and the current state of the items to which the command applies. However, when you set this property, the command returns only the property values you set for the remainder of the life of the Command object.
  //
  // Command_Set_IsToggleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandInstance - The id of the Command object.
  //    - val: bool - Specifies whether the menu item or user interface element that represents the command can toggle between the on and off states. When this property is True, a menu item that represents the command displays a checkmark the user can enable or disable. 
  //
  // Command_Set_IsToggleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Command_Get_IsToggleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandInstance - The id of the Command object.
  //
  // Command_Get_IsToggleResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the menu item or user interface element that represents the command can toggle between the on and off states. When this property is True, a menu item that represents the command displays a checkmark the user can enable or disable. 
  //
  rpc Set_IsToggle(Command_Set_IsToggleRequest) returns (Command_Set_IsToggleResponse);
  rpc Get_IsToggle(Command_Get_IsToggleRequest) returns (Command_Get_IsToggleResponse);
  
  
  // Property: ToggleState
  //
  // When the Command.IsToggle property is True, this property specifies the on or off state of the menu item or user interface element that represents the command. When a menu item represents the command, the state of the menu item indicates the value of this property.
  //
  // The command computes the value of this property according to the kind of command and the current state of the items to which the command applies. However, when you set this property, the command returns only the property values you set for the remainder of the life of the Command object.
  //
  // Command_Set_ToggleStateRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandInstance - The id of the Command object.
  //    - val: bool - When the Command.IsToggle property is True, this property specifies the on or off state of the menu item or user interface element that represents the command. When a menu item represents the command, the state of the menu item indicates the value of this property. 
  //
  // Command_Set_ToggleStateResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Command_Get_ToggleStateRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandInstance - The id of the Command object.
  //
  // Command_Get_ToggleStateResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When the Command.IsToggle property is True, this property specifies the on or off state of the menu item or user interface element that represents the command. When a menu item represents the command, the state of the menu item indicates the value of this property. 
  //
  rpc Set_ToggleState(Command_Set_ToggleStateRequest) returns (Command_Set_ToggleStateResponse);
  rpc Get_ToggleState(Command_Get_ToggleStateRequest) returns (Command_Get_ToggleStateResponse);
  
  
  // Property: ShortcutKey
  //
  // Specifies which shortcut key to assign to a user interface element that represents a command.
  //
  // Use the Command.ShortcutModifier property to specify <Shift>, <Ctrl>, and  <Alt> modifiers for the shortcut key. For example, to assign the shortcut Ctrl+F12 to the command, set this property to ShortcutKey_VK_F12 and set the Command.ShortcutModifier property to ShortcutModifier_Control.
  // The command computes the value of this property according to the kind of command and the current state of the items to which the command applies. However, when you set this property, the command returns only the property values you set for the remainder of the life of the Command object.
  //
  // Command_Set_ShortcutKeyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandInstance - The id of the Command object.
  //    - val: ShortcutKeys - Specifies which shortcut key to assign to a user interface element that represents a command. 
  //
  // Command_Set_ShortcutKeyResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Command_Get_ShortcutKeyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandInstance - The id of the Command object.
  //
  // Command_Get_ShortcutKeyResponse - The response message from the server. It provides the return value.
  //    - returnValue: ShortcutKeys - Specifies which shortcut key to assign to a user interface element that represents a command. 
  //
  rpc Set_ShortcutKey(Command_Set_ShortcutKeyRequest) returns (Command_Set_ShortcutKeyResponse);
  rpc Get_ShortcutKey(Command_Get_ShortcutKeyRequest) returns (Command_Get_ShortcutKeyResponse);
  
  
  // Property: ShortcutModifier
  //
  // Specifies which shortcut key modifiers to assign to a user interface element that represents a command.
  //
  // The command computes the value of this property according to the kind of command and the current state of the items to which the command applies. However, when you set this property, the command returns only the property values you set for the remainder of the life of the Command object.
  //
  // Command_Set_ShortcutModifierRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandInstance - The id of the Command object.
  //    - val: int32 - Specifies which shortcut key modifiers to assign to a user interface element that represents a command. 
  //
  // Command_Set_ShortcutModifierResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Command_Get_ShortcutModifierRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandInstance - The id of the Command object.
  //
  // Command_Get_ShortcutModifierResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies which shortcut key modifiers to assign to a user interface element that represents a command. 
  //
  rpc Set_ShortcutModifier(Command_Set_ShortcutModifierRequest) returns (Command_Set_ShortcutModifierResponse);
  rpc Get_ShortcutModifier(Command_Get_ShortcutModifierRequest) returns (Command_Get_ShortcutModifierResponse);
  
  
  // Property: UserObject
  //
  // Holds an ActiveX object you associate with the Command object.
  //
  // Typically, you do not use this property unless you are implementing an event handler that requires specific data you define.
  //
  // Command_Set_UserObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandInstance - The id of the Command object.
  //    - val: ObjectInstance - Holds an ActiveX object you associate with the Command object. 
  //
  // Command_Set_UserObjectResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Command_Get_UserObjectRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandInstance - The id of the Command object.
  //
  // Command_Get_UserObjectResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - Holds an ActiveX object you associate with the Command object. 
  //
  rpc Set_UserObject(Command_Set_UserObjectRequest) returns (Command_Set_UserObjectResponse);
  rpc Get_UserObject(Command_Get_UserObjectRequest) returns (Command_Get_UserObjectResponse);
  
  
  // Property: Kind
  //
  // Returns a code that identifies the action the command performs.
  //
  // Command_Get_KindRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandInstance - The id of the Command object.
  //
  // Command_Get_KindResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommandKinds - Returns a code that identifies the action the command performs. 
  //
  rpc Get_Kind(Command_Get_KindRequest) returns (Command_Get_KindResponse);
  
  
  // Property: SubsidiaryCommands
  //
  // Specifies the subsidiary commands the command contains. When a menu contains an item for the command, the subsidiary commands appear as items in a submenu that attach to the item for the command. When the command has no subsidiary commands, the value can be NULL or the Commands collection is empty.
  //
  // Command_Set_SubsidiaryCommandsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandInstance - The id of the Command object.
  //    - val: CommandsInstance - Specifies the subsidiary commands the command contains. When a menu contains an item for the command, the subsidiary commands appear as items in a submenu that attach to the item for the command. When the command has no subsidiary commands, the value can be NULL or the Commands collection is empty. 
  //
  // Command_Set_SubsidiaryCommandsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Command_Get_SubsidiaryCommandsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandInstance - The id of the Command object.
  //
  // Command_Get_SubsidiaryCommandsResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommandsInstance - Specifies the subsidiary commands the command contains. When a menu contains an item for the command, the subsidiary commands appear as items in a submenu that attach to the item for the command. When the command has no subsidiary commands, the value can be NULL or the Commands collection is empty. 
  //
  rpc Set_SubsidiaryCommands(Command_Set_SubsidiaryCommandsRequest) returns (Command_Set_SubsidiaryCommandsResponse);
  rpc Get_SubsidiaryCommands(Command_Get_SubsidiaryCommandsRequest) returns (Command_Get_SubsidiaryCommandsResponse);
  
  
  // Property: LVShortcutKey
  //
  // Specifies the shortcut key that invokes the menu item or user interface element that represents the command. Use this value for the shortcut key element of the short cut cluster input to the LabVIEW Set Menu Item Info function when you create a menu item for the command. This property accounts for the set of shortcut keys LabVIEW run-time menus allow.
  //
  // All LabVIEW shortcut key operations require the <Ctrl> key to be pressed. Examples of shortcut key values include "x", "w", and "F12".
  // Set the Command.LVShortcutModifier property to True to specify that the shortcut key requires the <Shift> key to be pressed to invoke the command.
  // The command computes the value of this property according to the kind of command and the current state of the items to which the command applies. However, when you set this property, the command returns only the property values you set for the remainder of the life of the Command object.
  //
  // Command_Set_LVShortcutKeyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandInstance - The id of the Command object.
  //    - val: string - Specifies the shortcut key that invokes the menu item or user interface element that represents the command. Use this value for the shortcut key element of the short cut cluster input to the LabVIEW Set Menu Item Info function when you create a menu item for the command. This property accounts for the set of shortcut keys LabVIEW run-time menus allow. 
  //
  // Command_Set_LVShortcutKeyResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Command_Get_LVShortcutKeyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandInstance - The id of the Command object.
  //
  // Command_Get_LVShortcutKeyResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the shortcut key that invokes the menu item or user interface element that represents the command. Use this value for the shortcut key element of the short cut cluster input to the LabVIEW Set Menu Item Info function when you create a menu item for the command. This property accounts for the set of shortcut keys LabVIEW run-time menus allow. 
  //
  rpc Set_LVShortcutKey(Command_Set_LVShortcutKeyRequest) returns (Command_Set_LVShortcutKeyResponse);
  rpc Get_LVShortcutKey(Command_Get_LVShortcutKeyRequest) returns (Command_Get_LVShortcutKeyResponse);
  
  
  // Property: LVShortcutModifier
  //
  // Specifies whether to include the <Shift> key for the shortcut key that invokes the menu item or user interface element that represents the command. Use this value for the include Shift key? element of the short cut cluster input to the LabVIEW Set Menu Item Info function when you create a menu item for the command.
  //
  // The command computes the value of this property according to the kind of command and the current state of the items to which the command applies. However, when you set this property, the command returns only the property values you set for the remainder of the life of the Command object.
  //
  // Command_Set_LVShortcutModifierRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandInstance - The id of the Command object.
  //    - val: bool - Specifies whether to include the <Shift> key for the shortcut key that invokes the menu item or user interface element that represents the command. Use this value for the include Shift key? element of the short cut cluster input to the LabVIEW Set Menu Item Info function when you create a menu item for the command. 
  //
  // Command_Set_LVShortcutModifierResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Command_Get_LVShortcutModifierRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandInstance - The id of the Command object.
  //
  // Command_Get_LVShortcutModifierResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether to include the <Shift> key for the shortcut key that invokes the menu item or user interface element that represents the command. Use this value for the include Shift key? element of the short cut cluster input to the LabVIEW Set Menu Item Info function when you create a menu item for the command. 
  //
  rpc Set_LVShortcutModifier(Command_Set_LVShortcutModifierRequest) returns (Command_Set_LVShortcutModifierResponse);
  rpc Get_LVShortcutModifier(Command_Get_LVShortcutModifierRequest) returns (Command_Get_LVShortcutModifierResponse);
  
  
  // Property: IconName
  //
  // Specifies the name of the icon that represents the command. This property specifies an empty string when the command does not have an icon.
  //
  // Command_Set_IconNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandInstance - The id of the Command object.
  //    - val: string - Specifies the name of the icon that represents the command. This property specifies an empty string when the command does not have an icon. 
  //
  // Command_Set_IconNameResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Command_Get_IconNameRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandInstance - The id of the Command object.
  //
  // Command_Get_IconNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the name of the icon that represents the command. This property specifies an empty string when the command does not have an icon. 
  //
  rpc Set_IconName(Command_Set_IconNameRequest) returns (Command_Set_IconNameResponse);
  rpc Get_IconName(Command_Get_IconNameRequest) returns (Command_Get_IconNameResponse);
  
  
  // Property: EntryPointIndex
  //
  // Returns the index of an Execution or Configuration entry point for a CommandKind_RunEntryPoint command.
  //
  // Command_Get_EntryPointIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandInstance - The id of the Command object.
  //
  // Command_Get_EntryPointIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the index of an Execution or Configuration entry point for a CommandKind_RunEntryPoint command. 
  //
  rpc Get_EntryPointIndex(Command_Get_EntryPointIndexRequest) returns (Command_Get_EntryPointIndexResponse);
  
  
  // Property: EntryPoint
  //
  // Returns an EntryPoint object that represents an Execution or Configuration entry point for a CommandKind_RunEntryPoint command.
  //
  // Command_Get_EntryPointRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandInstance - The id of the Command object.
  //
  // Command_Get_EntryPointResponse - The response message from the server. It provides the return value.
  //    - returnValue: EntryPointInstance - Returns an EntryPoint object that represents an Execution or Configuration entry point for a CommandKind_RunEntryPoint command. 
  //
  rpc Get_EntryPoint(Command_Get_EntryPointRequest) returns (Command_Get_EntryPointResponse);
  
  
}
message CommandInstance {
  // Specifies the handle of the Command instance in the server.
  string id = 1;
}

message CommandsInstance {
  // Specifies the handle of the Commands instance in the server.
  string id = 1;
}
message Command_GetDisplayNameRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
  // Specifies the character(s) you want to precede the accelerator character, when one exists, in the display name the method returns. The accelerator prefix for menu items and button labels varies according to the programming environment. For example, LabVIEW uses "_", LabWindows/CVI uses "__", and C#, Microsoft Visual C++, and Microsoft Visual Basic .NET use "&". When you are not assigning the display name to the label of a user interface element that supports accelerators, pass an empty string.
  string acceleratorPrefix = 2;
  // Pass True to append characters that represent the shortcut key for the command to the display name the method returns. When the command does not have a shortcut key, the display name remains unchanged.
  bool includeShortcutText = 3;
}

message Command_GetDisplayNameResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message Command_SetDisplayNameRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
  // Pass the new value for the command display name. When the new display name has a character you want to designate as the accelerator character, precede the character with an ampersand (&).
  string val = 2;
}

message Command_SetDisplayNameResponse {
}

message Command_ExecuteRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
  // Specifies how the method reports an error that occurs when executing the command. When this parameter is False, the method returns the error to the caller. When this parameter is True, the method calls the ApplicationMgr.ReportError event to report the error.
  bool applicationHandlesError = 2;
}

message Command_ExecuteResponse {
}

message Command_Set_EnabledRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
  // Specifies to enable or disable the menu item or user interface element that invokes the command.
  bool val = 2;
}

message Command_Set_EnabledResponse {
}

message Command_Get_EnabledRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
}

message Command_Get_EnabledResponse {
  // Specifies to enable or disable the menu item or user interface element that invokes the command.
  bool returnValue = 1;
}

message Command_Set_VisibleRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
  // Specifies whether to show or hide the menu item or user interface element that invokes the command.
  bool val = 2;
}

message Command_Set_VisibleResponse {
}

message Command_Get_VisibleRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
}

message Command_Get_VisibleResponse {
  // Specifies whether to show or hide the menu item or user interface element that invokes the command.
  bool returnValue = 1;
}

message Command_Set_IsSeparatorRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
  // Specifies the menu item or user interface element that represents the command displays as a menu separator or other appropriate user interface divider element when this property is True.
  bool val = 2;
}

message Command_Set_IsSeparatorResponse {
}

message Command_Get_IsSeparatorRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
}

message Command_Get_IsSeparatorResponse {
  // Specifies the menu item or user interface element that represents the command displays as a menu separator or other appropriate user interface divider element when this property is True.
  bool returnValue = 1;
}

message Command_Set_IsToggleRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
  // Specifies whether the menu item or user interface element that represents the command can toggle between the on and off states. When this property is True, a menu item that represents the command displays a checkmark the user can enable or disable.
  bool val = 2;
}

message Command_Set_IsToggleResponse {
}

message Command_Get_IsToggleRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
}

message Command_Get_IsToggleResponse {
  // Specifies whether the menu item or user interface element that represents the command can toggle between the on and off states. When this property is True, a menu item that represents the command displays a checkmark the user can enable or disable.
  bool returnValue = 1;
}

message Command_Set_ToggleStateRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
  // When the Command.IsToggle property is True, this property specifies the on or off state of the menu item or user interface element that represents the command. When a menu item represents the command, the state of the menu item indicates the value of this property.
  bool val = 2;
}

message Command_Set_ToggleStateResponse {
}

message Command_Get_ToggleStateRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
}

message Command_Get_ToggleStateResponse {
  // When the Command.IsToggle property is True, this property specifies the on or off state of the menu item or user interface element that represents the command. When a menu item represents the command, the state of the menu item indicates the value of this property.
  bool returnValue = 1;
}

message Command_Set_ShortcutKeyRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
  // Specifies which shortcut key to assign to a user interface element that represents a command.
  ShortcutKeys val = 2;
}

message Command_Set_ShortcutKeyResponse {
}

message Command_Get_ShortcutKeyRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
}

message Command_Get_ShortcutKeyResponse {
  // Specifies which shortcut key to assign to a user interface element that represents a command.
  ShortcutKeys returnValue = 1;
}

message Command_Set_ShortcutModifierRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
  // Specifies which shortcut key modifiers to assign to a user interface element that represents a command.
  ShortcutModifiers val = 2;
}

message Command_Set_ShortcutModifierResponse {
}

message Command_Get_ShortcutModifierRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
}

message Command_Get_ShortcutModifierResponse {
  // Specifies which shortcut key modifiers to assign to a user interface element that represents a command.
  ShortcutModifiers returnValue = 1;
}

message Command_Set_UserObjectRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
  // Holds an ActiveX object you associate with the Command object.
  ObjectInstance val = 2;
}

message Command_Set_UserObjectResponse {
}

message Command_Get_UserObjectRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
}

message Command_Get_UserObjectResponse {
  // Holds an ActiveX object you associate with the Command object.
  ObjectInstance returnValue = 1;
}

message Command_Get_KindRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
}

message Command_Get_KindResponse {
  // Returns a code that identifies the action the command performs.
  CommandKinds returnValue = 1;
}

message Command_Set_SubsidiaryCommandsRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
  // Specifies the subsidiary commands the command contains. When a menu contains an item for the command, the subsidiary commands appear as items in a submenu that attach to the item for the command. When the command has no subsidiary commands, the value can be NULL or the Commands collection is empty.
  CommandsInstance val = 2;
}

message Command_Set_SubsidiaryCommandsResponse {
}

message Command_Get_SubsidiaryCommandsRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
}

message Command_Get_SubsidiaryCommandsResponse {
  // Specifies the subsidiary commands the command contains. When a menu contains an item for the command, the subsidiary commands appear as items in a submenu that attach to the item for the command. When the command has no subsidiary commands, the value can be NULL or the Commands collection is empty.
  CommandsInstance returnValue = 1;
}

message Command_Set_LVShortcutKeyRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
  // Specifies the shortcut key that invokes the menu item or user interface element that represents the command. Use this value for the shortcut key element of the short cut cluster input to the LabVIEW Set Menu Item Info function when you create a menu item for the command. This property accounts for the set of shortcut keys LabVIEW run-time menus allow.
  string val = 2;
}

message Command_Set_LVShortcutKeyResponse {
}

message Command_Get_LVShortcutKeyRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
}

message Command_Get_LVShortcutKeyResponse {
  // Specifies the shortcut key that invokes the menu item or user interface element that represents the command. Use this value for the shortcut key element of the short cut cluster input to the LabVIEW Set Menu Item Info function when you create a menu item for the command. This property accounts for the set of shortcut keys LabVIEW run-time menus allow.
  string returnValue = 1;
}

message Command_Set_LVShortcutModifierRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
  // Specifies whether to include the <Shift> key for the shortcut key that invokes the menu item or user interface element that represents the command. Use this value for the include Shift key? element of the short cut cluster input to the LabVIEW Set Menu Item Info function when you create a menu item for the command.
  bool val = 2;
}

message Command_Set_LVShortcutModifierResponse {
}

message Command_Get_LVShortcutModifierRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
}

message Command_Get_LVShortcutModifierResponse {
  // Specifies whether to include the <Shift> key for the shortcut key that invokes the menu item or user interface element that represents the command. Use this value for the include Shift key? element of the short cut cluster input to the LabVIEW Set Menu Item Info function when you create a menu item for the command.
  bool returnValue = 1;
}

message Command_Set_IconNameRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
  // Specifies the name of the icon that represents the command. This property specifies an empty string when the command does not have an icon.
  string val = 2;
}

message Command_Set_IconNameResponse {
}

message Command_Get_IconNameRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
}

message Command_Get_IconNameResponse {
  // Specifies the name of the icon that represents the command. This property specifies an empty string when the command does not have an icon.
  string returnValue = 1;
}

message Command_Get_EntryPointIndexRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
}

message Command_Get_EntryPointIndexResponse {
  // Returns the index of an Execution or Configuration entry point for a CommandKind_RunEntryPoint command.
  int32 returnValue = 1;
}

message Command_Get_EntryPointRequest {
  // The id of the Command object.
  CommandInstance instance = 1;
}

message Command_Get_EntryPointResponse {
  // Returns an EntryPoint object that represents an Execution or Configuration entry point for a CommandKind_RunEntryPoint command.
  EntryPointInstance returnValue = 1;
}

// Commands
//
// Contains a set of Command objects.
// To create new commands within the collection, call the Commands.InsertKind method.
//
service Commands {
  // Method: Clear
  //
  // Removes all items from the collection.
  //
  // Commands_ClearRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandsInstance - The id of the Commands object.
  //
  // Commands_ClearResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Clear(Commands_ClearRequest) returns (Commands_ClearResponse);
  
  
  // Method: Remove
  //
  // Removes the specified item from this collection, if it exists.
  //
  // Commands_RemoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommandsInstance - The id of the Commands object.
  //    - itemIdx: int32 - Specifies the zero-based index of the item to remove.
  //
  // Commands_RemoveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Remove(Commands_RemoveRequest) returns (Commands_RemoveResponse);
  
  
  // Method: Insert
  //
  // Adds a new item to the collection.
  //
  // Commands_InsertRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommandsInstance - The id of the Commands object.
  //    - insertBefore: int32 - Specifies the index of the existing command before which to insert the new command. When you want the new command to insert at the end, pass -1 to this parameter.
  //
  // Commands_InsertResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Insert(Commands_InsertRequest) returns (Commands_InsertResponse);
  
  
  // Method: InsertKind
  //
  // Inserts a new Command object or objects into the collection.
  //
  // This method uses the menu name the currentMenuName parameter specifies to determine whether to insert entry point items that specify a matching menu hint name when you pass the following values to the cmdKind parameter:
  // CommandKind_ExecutionEntryPointInsertionMarkerCommandKind_ConfigurationEntryPointInsertionMarkerCommandKind_ExecutionEntryPointDefaultMenuInsertionMarkerCommandKind_ConfigurationEntryPointDefaultMenuInsertionMarker
  // When an entry point does not specify a menu hint name or the menu hint names do not match any of the menu names listed in the allMenuNames parameter, the method creates commands to insert the entry point menus when you pass the following values to the cmdKind parameter:
  // CommandKind_ExecutionEntryPointDefaultMenuInsertionMarkerCommandKind_ConfigurationEntryPointDefaultMenuInsertionMarker
  //
  // Commands_InsertKindRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommandsInstance - The id of the Commands object.
  //    - managerControl: ObjectInstance - Pass a SequenceFileView Manager or ExecutionView Manager control when the command you insert requires it.
  //    - insertBefore: int32 - Specifies the position in the collection at which to insert the new command. Pass -1 to insert the new command at the end of the collection.
  //    - currentMenuName: string - Specifies the name of the menu when you create commands to insert into a menu in a top-level menu bar. Otherwise, pass an empty string.
  //      This method ignores accelerator prefix characters when comparing menu hints to the menu name you pass.
  //    - allMenuNames: string - Specifies the name of all top-level menus in order, separated by commas, when you create commands to insert into a menu in a top-level menu bar. Otherwise, pass an empty string. The commands use this to decide into which menu to insert based on the menu hint name.
  //      This method ignores accelerator prefix characters when comparing menu hints to the menu names you pass.
  //
  // Commands_InsertKindResponse - The response message from the server. It provides the output parameters.
  //    - numInserted: int3 - Returns the number of commands the method inserted into the collection.
  //
  rpc InsertKind(Commands_InsertKindRequest) returns (Commands_InsertKindResponse);
  
  
  // Method: InsertIntoWin32Menu
  //
  // Inserts a menu item into a menu for each command in the Commands collection. Use this method to build a context menu for a control that generates the SequenceView.CreateContextMenu or ListBar.CreateContextMenu event.
  //
  // Commands_InsertIntoWin32MenuRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommandsInstance - The id of the Commands object.
  //    - menuHandle: int32 - Specifies the Microsoft Windows menu handle (HMENU) to insert the menu items into. The menu items invoke their corresponding Command objects when selected. You do not handle menu events for items this method inserts.
  //    - menuItemToInsertBefore: int32 - Specifies the position or menu item identifier (resource ID/command ID) of the menu item before which the method inserts the new menu items. To insert at the end of the menu, pass -1 and pass True to the byPosition parameter.
  //    - byPosition: bool - Pass True when the menuItemToInsertBefore parameter contains a zero-based menu item position. Pass False when the menuItemToInsertBefore parameter contains a menu item identifier (resource ID/command ID).
  //    - useShortcutKeys: bool - Pass True to show shortcut key text for each item this method inserts that has a shortcut key. Typically, you use this method to build context menus which do not automatically implement shortcut key handling. Therefore, show shortcut keys only for items that also appear in the main menu bar, unless you explicitly provide shortcut key handling for items that appear only in the context menu.
  //
  // Commands_InsertIntoWin32MenuResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc InsertIntoWin32Menu(Commands_InsertIntoWin32MenuRequest) returns (Commands_InsertIntoWin32MenuResponse);
  
  

  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // Commands_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CommandsInstance - The id of the Commands object.
  //    - itemIdx: int32 - Specifies the zero-based index. Use a non-negative number less than the value of the Commands.Count property.
  //
  // Commands_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommandInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(Commands_Get_ItemRequest) returns (Commands_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // Commands_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CommandsInstance - The id of the Commands object.
  //
  // Commands_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(Commands_Get_CountRequest) returns (Commands_Get_CountResponse);
  
  
}
message Commands_ClearRequest {
  // The id of the Commands object.
  CommandsInstance instance = 1;
}

message Commands_ClearResponse {
}

message Commands_RemoveRequest {
  // The id of the Commands object.
  CommandsInstance instance = 1;
  // Specifies the zero-based index of the item to remove.
  int32 itemIdx = 2;
}

message Commands_RemoveResponse {
}

message Commands_InsertRequest {
  // The id of the Commands object.
  CommandsInstance instance = 1;
  // Specifies the command object to insert.
  CommandInstance Item = 2;
  // Specifies the index of the existing command before which to insert the new command. When you want the new command to insert at the end, pass -1 to this parameter.
  int32 insertBefore = 3;
}

message Commands_InsertResponse {
}

message Commands_InsertKindRequest {
  // The id of the Commands object.
  CommandsInstance instance = 1;
  // Specifies the type of command to insert. Depending on the value you pass and the state of the application, the method might insert one command, a set of commands, or no commands.
  CommandKinds cmdKind = 2;
  // Pass a SequenceFileView Manager or ExecutionView Manager control when the command you insert requires it.
  ObjectInstance managerControl = 3;
  // Specifies the position in the collection at which to insert the new command. Pass -1 to insert the new command at the end of the collection.
  int32 insertBefore = 4;
  // Specifies the name of the menu when you create commands to insert into a menu in a top-level menu bar. Otherwise, pass an empty string.
  // This method ignores accelerator prefix characters when comparing menu hints to the menu name you pass.
  string currentMenuName = 5;
  // Specifies the name of all top-level menus in order, separated by commas, when you create commands to insert into a menu in a top-level menu bar. Otherwise, pass an empty string. The commands use this to decide into which menu to insert based on the menu hint name.
  // This method ignores accelerator prefix characters when comparing menu hints to the menu names you pass.
  string allMenuNames = 6;
}

message Commands_InsertKindResponse {
  // Returns the number of commands the method inserted into the collection.
  int32 numInserted = 1;
}

message Commands_InsertIntoWin32MenuRequest {
  // The id of the Commands object.
  CommandsInstance instance = 1;
  // Specifies the Microsoft Windows menu handle (HMENU) to insert the menu items into. The menu items invoke their corresponding Command objects when selected. You do not handle menu events for items this method inserts.
  int32 menuHandle = 2;
  // Specifies the position or menu item identifier (resource ID/command ID) of the menu item before which the method inserts the new menu items. To insert at the end of the menu, pass -1 and pass True to the byPosition parameter.
  int32 menuItemToInsertBefore = 3;
  // Pass True when the menuItemToInsertBefore parameter contains a zero-based menu item position. Pass False when the menuItemToInsertBefore parameter contains a menu item identifier (resource ID/command ID).
  bool byPosition = 4;
  // Pass True to show shortcut key text for each item this method inserts that has a shortcut key. Typically, you use this method to build context menus which do not automatically implement shortcut key handling. Therefore, show shortcut keys only for items that also appear in the main menu bar, unless you explicitly provide shortcut key handling for items that appear only in the context menu.
  bool useShortcutKeys = 5;
}

message Commands_InsertIntoWin32MenuResponse {
}

message Commands_Get_ItemRequest {
  // The id of the Commands object.
  CommandsInstance instance = 1;
  // Specifies the zero-based index. Use a non-negative number less than the value of the Commands.Count property.
  int32 itemIdx = 2;
}

message Commands_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  CommandInstance returnValue = 1;
}

message Commands_Get_CountRequest {
  // The id of the Commands object.
  CommandsInstance instance = 1;
}

message Commands_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// InsertionPalettePages
//
// A collection of InsertionPalettePage objects.
// Use the InsertionPalette.Pages property to retrieve the InsertionPalettePages object for an InsertionPalette. Use the InsertionPalettePage.Visible property to control whether the page is visible.
//
service InsertionPalettePages {
  // Property: Item
  //
  // Returns a reference to an item at the specified index in the collection.
  //
  // InsertionPalettePages_Get_ItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: InsertionPalettePagesInstance - The id of the InsertionPalettePages object.
  //    - itemIdx: int32 - Specifies the zero-based index of the item.
  //
  // InsertionPalettePages_Get_ItemResponse - The response message from the server. It provides the return value.
  //    - returnValue: InsertionPalettePageInstance - Returns a reference to an item at the specified index in the collection. 
  //
  rpc Get_Item(InsertionPalettePages_Get_ItemRequest) returns (InsertionPalettePages_Get_ItemResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the collection.
  //
  // InsertionPalettePages_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InsertionPalettePagesInstance - The id of the InsertionPalettePages object.
  //
  // InsertionPalettePages_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the collection. 
  //
  rpc Get_Count(InsertionPalettePages_Get_CountRequest) returns (InsertionPalettePages_Get_CountResponse);
  
  
}
message InsertionPalettePagesInstance {
  // Specifies the handle of the InsertionPalettePages instance in the server.
  string id = 1;
}

message InsertionPalettePageInstance {
  // Specifies the handle of the InsertionPalettePage instance in the server.
  string id = 1;
}
message InsertionPalettePages_Get_ItemRequest {
  // The id of the InsertionPalettePages object.
  InsertionPalettePagesInstance instance = 1;
  // Specifies the zero-based index of the item.
  int32 itemIdx = 2;
}

message InsertionPalettePages_Get_ItemResponse {
  // Returns a reference to an item at the specified index in the collection.
  InsertionPalettePageInstance returnValue = 1;
}

message InsertionPalettePages_Get_CountRequest {
  // The id of the InsertionPalettePages object.
  InsertionPalettePagesInstance instance = 1;
}

message InsertionPalettePages_Get_CountResponse {
  // Returns the number of items in the collection.
  int32 returnValue = 1;
}

// InsertionPalettePage
//
// Use an InsertionPalettePage object to control whether a page is expanded or visible on an InsertionPalette control.
//
service InsertionPalettePage {
  // Property: Index
  //
  // Returns the zero-based index of the page on the InsertionPalette.
  //
  // InsertionPalettePage_Get_IndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InsertionPalettePageInstance - The id of the InsertionPalettePage object.
  //
  // InsertionPalettePage_Get_IndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the zero-based index of the page on the InsertionPalette. 
  //
  rpc Get_Index(InsertionPalettePage_Get_IndexRequest) returns (InsertionPalettePage_Get_IndexResponse);
  
  
  // Property: Visible
  //
  // Specifies whether the page is visible.
  //
  // InsertionPalettePage_Set_VisibleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InsertionPalettePageInstance - The id of the InsertionPalettePage object.
  //    - val: bool - Specifies whether the page is visible. 
  //
  // InsertionPalettePage_Set_VisibleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // InsertionPalettePage_Get_VisibleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InsertionPalettePageInstance - The id of the InsertionPalettePage object.
  //
  // InsertionPalettePage_Get_VisibleResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the page is visible. 
  //
  rpc Set_Visible(InsertionPalettePage_Set_VisibleRequest) returns (InsertionPalettePage_Set_VisibleResponse);
  rpc Get_Visible(InsertionPalettePage_Get_VisibleRequest) returns (InsertionPalettePage_Get_VisibleResponse);
  
  
  // Property: SplitterRatio
  //
  // Specifies the percentage of the InsertionPalette the page uses.  Changes to this property affect this property for other pages.
  // Note: This property is valid only when pages exist after the current page. In all other cases, this property is ignored.
  //
  // InsertionPalettePage_Set_SplitterRatioRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InsertionPalettePageInstance - The id of the InsertionPalettePage object.
  //    - ratio: float - Specifies the percentage of the InsertionPalette the page uses.  Changes to this property affect this property for other pages. Note: This property is valid only when pages exist after the current page. In all other cases, this property is ignored. 
  //
  // InsertionPalettePage_Set_SplitterRatioResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // InsertionPalettePage_Get_SplitterRatioRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InsertionPalettePageInstance - The id of the InsertionPalettePage object.
  //
  // InsertionPalettePage_Get_SplitterRatioResponse - The response message from the server. It provides the return value.
  //    - returnValue: float - Specifies the percentage of the InsertionPalette the page uses.  Changes to this property affect this property for other pages. Note: This property is valid only when pages exist after the current page. In all other cases, this property is ignored. 
  //
  rpc Set_SplitterRatio(InsertionPalettePage_Set_SplitterRatioRequest) returns (InsertionPalettePage_Set_SplitterRatioResponse);
  rpc Get_SplitterRatio(InsertionPalettePage_Get_SplitterRatioRequest) returns (InsertionPalettePage_Get_SplitterRatioResponse);
  
  
  // Property: Expanded
  //
  // Specifies whether the content of the page is expanded to show the list.
  //
  // InsertionPalettePage_Set_ExpandedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InsertionPalettePageInstance - The id of the InsertionPalettePage object.
  //    - val: bool - Specifies whether the content of the page is expanded to show the list. 
  //
  // InsertionPalettePage_Set_ExpandedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // InsertionPalettePage_Get_ExpandedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InsertionPalettePageInstance - The id of the InsertionPalettePage object.
  //
  // InsertionPalettePage_Get_ExpandedResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the content of the page is expanded to show the list. 
  //
  rpc Set_Expanded(InsertionPalettePage_Set_ExpandedRequest) returns (InsertionPalettePage_Set_ExpandedResponse);
  rpc Get_Expanded(InsertionPalettePage_Get_ExpandedRequest) returns (InsertionPalettePage_Get_ExpandedResponse);
  
  
  // Property: ShowSubPages
  //
  // 
  //
  // InsertionPalettePage_Set_ShowSubPagesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InsertionPalettePageInstance - The id of the InsertionPalettePage object.
  //    - val: bool -  
  //
  // InsertionPalettePage_Set_ShowSubPagesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // InsertionPalettePage_Get_ShowSubPagesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InsertionPalettePageInstance - The id of the InsertionPalettePage object.
  //
  // InsertionPalettePage_Get_ShowSubPagesResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool -  
  //
  rpc Set_ShowSubPages(InsertionPalettePage_Set_ShowSubPagesRequest) returns (InsertionPalettePage_Set_ShowSubPagesResponse);
  rpc Get_ShowSubPages(InsertionPalettePage_Get_ShowSubPagesRequest) returns (InsertionPalettePage_Get_ShowSubPagesResponse);
  
  
}
message InsertionPalettePage_Get_IndexRequest {
  // The id of the InsertionPalettePage object.
  InsertionPalettePageInstance instance = 1;
}

message InsertionPalettePage_Get_IndexResponse {
  // Returns the zero-based index of the page on the InsertionPalette.
  int32 returnValue = 1;
}

message InsertionPalettePage_Set_VisibleRequest {
  // The id of the InsertionPalettePage object.
  InsertionPalettePageInstance instance = 1;
  // Specifies whether the page is visible.
  bool val = 2;
}

message InsertionPalettePage_Set_VisibleResponse {
}

message InsertionPalettePage_Get_VisibleRequest {
  // The id of the InsertionPalettePage object.
  InsertionPalettePageInstance instance = 1;
}

message InsertionPalettePage_Get_VisibleResponse {
  // Specifies whether the page is visible.
  bool returnValue = 1;
}

message InsertionPalettePage_Set_SplitterRatioRequest {
  // The id of the InsertionPalettePage object.
  InsertionPalettePageInstance instance = 1;
  // Specifies the percentage of the InsertionPalette the page uses.  Changes to this property affect this property for other pages.
  // Note: This property is valid only when pages exist after the current page. In all other cases, this property is ignored.
  float ratio = 2;
}

message InsertionPalettePage_Set_SplitterRatioResponse {
}

message InsertionPalettePage_Get_SplitterRatioRequest {
  // The id of the InsertionPalettePage object.
  InsertionPalettePageInstance instance = 1;
}

message InsertionPalettePage_Get_SplitterRatioResponse {
  // Specifies the percentage of the InsertionPalette the page uses.  Changes to this property affect this property for other pages.
  // Note: This property is valid only when pages exist after the current page. In all other cases, this property is ignored.
  float returnValue = 1;
}

message InsertionPalettePage_Set_ExpandedRequest {
  // The id of the InsertionPalettePage object.
  InsertionPalettePageInstance instance = 1;
  // Specifies whether the content of the page is expanded to show the list.
  bool val = 2;
}

message InsertionPalettePage_Set_ExpandedResponse {
}

message InsertionPalettePage_Get_ExpandedRequest {
  // The id of the InsertionPalettePage object.
  InsertionPalettePageInstance instance = 1;
}

message InsertionPalettePage_Get_ExpandedResponse {
  // Specifies whether the content of the page is expanded to show the list.
  bool returnValue = 1;
}

message InsertionPalettePage_Set_ShowSubPagesRequest {
  // The id of the InsertionPalettePage object.
  InsertionPalettePageInstance instance = 1;
  // 
  bool val = 2;
}

message InsertionPalettePage_Set_ShowSubPagesResponse {
}

message InsertionPalettePage_Get_ShowSubPagesRequest {
  // The id of the InsertionPalettePage object.
  InsertionPalettePageInstance instance = 1;
}

message InsertionPalettePage_Get_ShowSubPagesResponse {
  // 
  bool returnValue = 1;
}

// ApplicationMgr
//
// The Application Manager control performs the following basic operations, which facilitate using the TestStand Engine in an application:    * Processes command-line arguments.    * Maintains an application configuration file.    * Initializes and shuts down the TestStand Engine.    * Logs users in and out.    * Loads and unloads files.    * Launches executions.    * Tracks existing sequence files and executions.    * Manages licensing.
// An application that uses the TestStand User Interface Controls must have a single Application Manager control that exists for the duration of the application.
//
service ApplicationMgr {
  // Service: ApplicationMgr
  //
  // Creates a new ApplicationMgr instance
  //
  // ApplicationMgrRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgrResponse - The response message from the server. It provides the return value.
  //    - returnValue: ApplicationMgrInstance - The return type of the ApplicationMgr object.
  //
  rpc ApplicationMgr(ApplicationMgr_ApplicationMgrRequest) returns (ApplicationMgr_ApplicationMgrResponse);

  // Method: ConnectAdapterList
  //
  // Connects the list of adapters to a ComboBox, ListBarPage, or ListBox control. The connected control shows the adapters and allows the user to select an adapter as the default adapter of the TestStand Engine.
  //
  // To disconnect an existing connection, you must first obtain the ApplicationMgrConnections object from the ApplicationMgr.Connections property. Then, access the ApplicationMgrConnections.AdapterList property to obtain the AdapterListConnections collection.
  //
  // ApplicationMgr_ConnectAdapterListRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - uiObj: ObjectInstance - Specifies the visible control or element of a visible control to display the list of adapters. Pass a ComboBox, ListBarPage, or ListBox.
  //
  // ApplicationMgr_ConnectAdapterListResponse - The response message from the server. It provides the return value.
  //    - returnValue: AdapterListConnectionInstance - The return type of the AdapterListConnection object.
  //
  rpc ConnectAdapterList(ApplicationMgr_ConnectAdapterListRequest) returns (ApplicationMgr_ConnectAdapterListResponse);
  
  
  // Method: Refresh
  //
  // Refreshes the specified connected controls.
  //
  // ApplicationMgr_RefreshRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - opts: int32 - Specifies any combination of RefreshOptions.
  //
  // ApplicationMgr_RefreshResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Refresh(ApplicationMgr_RefreshRequest) returns (ApplicationMgr_RefreshResponse);
  
  
  // Method: RefreshFile
  //
  // Performs a refresh operation on every SequenceFileView Manager control that currently displays the specified file.
  //
  // 
  //
  // ApplicationMgr_RefreshFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - file: PropertyObjectFileInstance - Specifies the PropertyObjectFile reference for a TestStand sequence file.
  //    - opts: int32 - Do not pass a value or pass RefreshOption_All (0xFFFFFFFF) to this reserved parameter.
  //
  // ApplicationMgr_RefreshFileResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc RefreshFile(ApplicationMgr_RefreshFileRequest) returns (ApplicationMgr_RefreshFileResponse);
  
  
  // Method: ReloadConfigFile
  //
  // Reloads the application configuration file from disk.
  //
  // Unlike sequences files, the application configuration file does not automatically reload when an external application, such as a source control system, modifies the file. You can call this method to force the configuration file to reload.
  //
  // ApplicationMgr_ReloadConfigFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_ReloadConfigFileResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ReloadConfigFile(ApplicationMgr_ReloadConfigFileRequest) returns (ApplicationMgr_ReloadConfigFileResponse);
  
  
  // Method: AddCommandLineArgumentsHelp
  //
  // Use this method to document command-line arguments you define.
  //
  // The Application Manager control displays help for command-line arguments when you pass the /? switch to the application.
  //
  // ApplicationMgr_AddCommandLineArgumentsHelpRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - usage: string - The Application Manager control adds this string to the usage section in the command-line help dialog box.
  //    - parameterHelp: string - Specifies a string for the Application Manager control to add to the section of the command-line help dialog box that explains parameters to command-line arguments.
  //    - notes: string - Specifies a string for the Application Manager control to add to the end of the command-line help dialog box.
  //
  // ApplicationMgr_AddCommandLineArgumentsHelpResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc AddCommandLineArgumentsHelp(ApplicationMgr_AddCommandLineArgumentsHelpRequest) returns (ApplicationMgr_AddCommandLineArgumentsHelpResponse);
  
  
  // Method: CanEdit
  //
  // Call this method to query whether the application gives permission to use the TestStand API to edit the sequence file the Application Manager control displays. This method generates an ApplicationMgr.CanEdit event to notify the application about the edit.
  //
  // When the application implements custom editing actions on the selected sequence file using the TestStand API, call this method to determine whether to enable or disable the user interface element such as a menu or button that invokes the editing action. The application might not grant permission to edit based on a number of factors, such as the read-only state of the file, whether the file is executing, or other conditions the application considers when it responds to the ApplicationMgr.CanEdit event. Do not call this method to determine whether to enable a user interface element that invokes a Command object. Instead, obtain the value from the Command.Enabled property, which checks conditions specific to the command in addition to calling this method. When you connect a command to a button or when you connect a command to a menu item using the appropriate TestStand utility methods, the connection automatically queries the Command.Enabled property to enable or disable the button or menu item.
  //
  // ApplicationMgr_CanEditRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - editedFile: PropertyObjectFileInstance - Specifies the file you are editing.
  //    - editKind: EditKinds - Specifies the kind of edit you are making.
  //
  // ApplicationMgr_CanEditResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a Boolean value that indicates whether the application allows or denies permission to perform the edit. 
  //
  rpc CanEdit(ApplicationMgr_CanEditRequest) returns (ApplicationMgr_CanEditResponse);
  
  
  // Method: BeginEdit
  //
  // Call this method before using the TestStand API to edit files the Application Manager and SequenceFileView Manager controls display. This method generates an ApplicationMgr.BeginEdit event to notify the application about the edit.
  //
  // Always make a corresponding call to the ApplicationMgr.EndEdit method after you modify the objectsToEdit parameter. Call the ApplicationMgr.EndEdit method even when the application cancels the edit. Do not call the ApplicationMgr.BeginEdit or ApplicationMgr.EndEdit methods when you execute a Command object to perform an edit. The Command object automatically calls the ApplicationMgr.BeginEdit and ApplicationMgr.EndEdit methods.
  //
  // ApplicationMgr_BeginEditRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - editedFile: PropertyObjectFileInstance - Specifies the file you are editing.
  //    - editKind: EditKinds - Specifies the kind of edit you are making.
  //    - objectsToEdit: repeated PropertyObjectInstance - Specifies the objects you are modifying.
  //
  // ApplicationMgr_BeginEditResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when the application cancels the edit operation. When the application cancels the edit operation, do not modify the objectsToEdit parameter. 
  //
  rpc BeginEdit(ApplicationMgr_BeginEditRequest) returns (ApplicationMgr_BeginEditResponse);
  
  
  // Method: EndEdit
  //
  // Call this method to generate an ApplicationMgr.EndEdit event that notifies the application an edit operation has completed. Call this method once for each call you make to the ApplicationMgr.BeginEdit method.
  //
  // ApplicationMgr_EndEditRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - editedFile: PropertyObjectFileInstance - Specifies the file you are editing.
  //    - editKind: EditKinds - Specifies the kind of edit. Pass the same value you pass to the ApplicationMgr.BeginEdit method.
  //    - editedObjects: repeated PropertyObjectInstance - Specifies the edited objects. Pass the same objects you pass to the ApplicationMgr.BeginEdit method.
  //    - cancelled: bool - Specifies whether the edit was cancelled. Pass the value you receive from the ApplicationMgr.BeginEdit method.
  //
  // ApplicationMgr_EndEditResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc EndEdit(ApplicationMgr_EndEditRequest) returns (ApplicationMgr_EndEditResponse);
  
  
  // Method: ReloadFile
  //
  // Reloads the specified file.
  // When the file is reloaded, this method returns a reference to the newly loaded version of the file in the file parameter. This method supports only sequence files the Application Manager control opens. For all other files, this method returns False.
  //
  // TestStand generates an ApplicationMgr.QueryReloadSequenceFile event to allow the application to cancel the reload operation or specify to prompt the user to reload the file.
  // When you specify ReloadFileOption_NoOptions for the options parameter for this method and an ApplicationMgr.QueryReloadSequenceFile event does not alter the opt parameter of the event, TestStand does not prompt to reload the file.
  // When you specify ReloadFileOption_OnlyIfModifiedInMemory or ReloadFileOption_OnlyIfModifiedOnDisk for the options parameter to this method and an ApplicationMgr.QueryReloadSequenceFile event does not alter the opt parameter of the event, TestStand prompts the user to reload the file.
  //
  // ApplicationMgr_ReloadFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - options: int32 - Specifies one or more ReloadFileOptions constants. Use the bitwise-OR operator to specify multiple options. Pass 0 to reload the file unconditionally.
  //
  // ApplicationMgr_ReloadFileResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True when the file was reloaded. This method returns False when the TestStand Engine cannot unload the file, when an ApplicationMgr.QueryReloadSequenceFile event cancels the operation, or when TestStand prompts the user and the user cancels the operation. 
  //    - file: PropertyObjectFileInstanc - The new value of file if the method modifies it.
  //
  rpc ReloadFile(ApplicationMgr_ReloadFileRequest) returns (ApplicationMgr_ReloadFileResponse);
  
  
  // Method: GetRunState
  //
  // Returns the run state of an execution.
  //
  // The value obtained from this method does not necessarily correspond to the value obtained from the Execution.GetStates method. The Execution.GetStates method returns the instantaneous state of the execution. This method returns the current state the TestStand User Interface (UI) Controls display.
  // Note: When you write a user interface that uses TestStand UI Controls, National Instruments recommends using this method or the ExecutionViewMgr.RunState property instead of directly calling the Execution.GetStates method on the execution. A slight delay exists between when the instantaneous state of the execution changes and when TestStand updates the state this method returns to reflect the change. This occurs because the state this method returns does not change until TestStand processes the UIMessages involved, thus allowing for synchronization of the updates necessary for displaying an execution.
  //
  // ApplicationMgr_GetRunStateRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - exec: ExecutionInstance - Specifies the execution on which to operate.
  //
  // ApplicationMgr_GetRunStateResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionRunStates - The return type of the ExecutionRunStates object.
  //
  rpc GetRunState(ApplicationMgr_GetRunStateRequest) returns (ApplicationMgr_GetRunStateResponse);
  
  
  // Method: GetTerminationState
  //
  // Returns the termination state of an execution.
  //
  // The value obtained from this method does not necessarily correspond to the value obtained from the Execution.GetStates method. The Execution.GetStates method returns the instantaneous state of the execution. This method returns the current state that the TestStand User Interface (UI) Controls display.
  // Note: When you write a user interface that uses TestStand UI Controls, National Instruments recommends using this method or the ExecutionViewMgr.TerminationState property instead of directly calling the Execution.GetStates method on the execution. A slight delay exists between when the instantaneous state of the execution changes and when TestStand updates the state this method returns to reflect the change. This occurs because the state this method returns does not change until TestStand processes the UIMessages involved, thus allowing for synchronization of the updates necessary for displaying an execution.
  //
  // ApplicationMgr_GetTerminationStateRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - exec: ExecutionInstance - Specifies the execution on which to operate.
  //
  // ApplicationMgr_GetTerminationStateResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionTerminationStates - The return type of the ExecutionTerminationStates object.
  //
  rpc GetTerminationState(ApplicationMgr_GetTerminationStateRequest) returns (ApplicationMgr_GetTerminationStateResponse);
  
  
  // Method: ReloadModifiedSequenceFilesEx
  //
  // Determines whether loaded sequence files have been modified on disk and generates an ApplicationMgr.QueryReloadSequenceFile event to determine whether to prompt you to reload any modified files.
  //
  // This method also refreshes the read-only state of open sequence files and updates the ApplicationMgr.ConfigurationEntryPoints and ApplicationMgr.ExecutionEntryPoints properties. Use the ApplicationMgr.ReloadFile method to reload a specific file.
  //
  // ApplicationMgr_ReloadModifiedSequenceFilesExRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_ReloadModifiedSequenceFilesExResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if this method reloads a sequence file. 
  //
  rpc ReloadModifiedSequenceFilesEx(ApplicationMgr_ReloadModifiedSequenceFilesExRequest) returns (ApplicationMgr_ReloadModifiedSequenceFilesExResponse);
  
  
  // Method: Start
  //
  // Initializes the user interface, acquires the necessary license, and runs the LoginLogout Front-End callback sequence, if the ApplicationMgr.LoginOnStart property is True.
  //
  // Call this method after you create the user interface window. If the application edits sequence files, set the ApplicationMgr.IsEditor property before calling this method. This method calls the Engine.AcquireLicense method to request the proper license for the application to start.
  // Note: You cannot use the user interface until you call this method.
  //
  // ApplicationMgr_StartRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_StartResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Start(ApplicationMgr_StartRequest) returns (ApplicationMgr_StartResponse);
  
  
  // Method: Shutdown
  //
  // Closes opened sequence files and executions. This method also releases the TestStand Engine.
  //
  // Call this method before the parent window of the Application Manager control is destroyed. When this method returns True, it is safe to destroy the parent window. When this method returns False, do not destroy the window until the Application Manager control generates an ApplicationMgrExitApplication event. When you cancel the TestStand Engine shutdown procedure, the Application Manager control generates the ApplicationMgrShutDownCancelled event.
  //
  // ApplicationMgr_ShutdownRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_ShutdownResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc Shutdown(ApplicationMgr_ShutdownRequest) returns (ApplicationMgr_ShutdownResponse);
  
  
  // Method: Login
  //
  // Logs in the user by running the LoginLogout Front-End callback sequence. This method does not wait for the callback to execute. Use the ApplicationMgr.UserChanged event to determine whether the login was successful.
  //
  // ApplicationMgr_LoginRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_LoginResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Login(ApplicationMgr_LoginRequest) returns (ApplicationMgr_LoginResponse);
  
  
  // Method: Logout
  //
  // Logs out the current user by running the LoginLogout Front-End callback sequence. This method does not wait for the callback to execute. Use the ApplicationMgr.UserChanged event to determine whether the logout was successful.
  //
  // ApplicationMgr_LogoutRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_LogoutResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Logout(ApplicationMgr_LogoutRequest) returns (ApplicationMgr_LogoutResponse);
  
  
  // Method: CloseAllSequenceFiles
  //
  // Closes all open sequence files.
  //
  // The Application Manager control attempts to close all sequence files by generating a QueryCloseSequenceFile event for each sequence file in the SequenceFiles collection. The ApplicationMgr.QueryCloseSequenceFile event confirms whether to release the file and remove the file from the SequenceFiles collection. When a sequence file is running in an execution or when other references to the sequence file exist, TestStand does not immediately unload the sequence file from memory.
  //
  // ApplicationMgr_CloseAllSequenceFilesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_CloseAllSequenceFilesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc CloseAllSequenceFiles(ApplicationMgr_CloseAllSequenceFilesRequest) returns (ApplicationMgr_CloseAllSequenceFilesResponse);
  
  
  // Method: OpenSequenceFile
  //
  // Opens a sequence file.
  //
  // This method adds the sequence file to the SequenceFiles collection and generates the ApplicationMgr.SequenceFileOpened and ApplicationMgr.DisplaySequenceFile events.
  //
  // ApplicationMgr_OpenSequenceFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - sequenceFilePath: string - Specifies the path of the sequence file to load. When you do not pass an absolute path, this method searches for the file using the TestStand search directory paths.
  //
  // ApplicationMgr_OpenSequenceFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFileInstance - Returns the opened sequence file, when successful. When a type conflict occurs when loading the file and the conflict prevents TestStand from opening the file, this method returns NULL. When an error occurs while opening the file, this method throws an exception. 
  //
  rpc OpenSequenceFile(ApplicationMgr_OpenSequenceFileRequest) returns (ApplicationMgr_OpenSequenceFileResponse);
  
  
  // Method: CloseSequenceFile
  //
  // Closes a sequence file.
  //
  // The Application Manager control attempts to close the sequence file by generating a QueryCloseSequenceFile event. The ApplicationMgr.QueryCloseSequenceFile event confirms whether to release the file and remove the file from the SequenceFiles collection. When the sequence file is running in an execution or when other references to the sequence file exist, TestStand does not immediately unload the file from memory.
  //
  // ApplicationMgr_CloseSequenceFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - file: SequenceFileInstance - Specifies the sequence file to close.
  //
  // ApplicationMgr_CloseSequenceFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the sequence file was closed. 
  //
  rpc CloseSequenceFile(ApplicationMgr_CloseSequenceFileRequest) returns (ApplicationMgr_CloseSequenceFileResponse);
  
  
  // Method: OpenSequenceFileDialog
  //
  // Launches the Open File dialog box.
  //
  // This method adds the sequence file to the SequenceFiles collection and generates the ApplicationMgr.SequenceFileOpened and ApplicationMgr.DisplaySequenceFile events.
  //
  // ApplicationMgr_OpenSequenceFileDialogRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_OpenSequenceFileDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFileInstance - Returns the opened sequence file if you open a file. This method returns NULL if you cancel the Open File dialog box. 
  //
  rpc OpenSequenceFileDialog(ApplicationMgr_OpenSequenceFileDialogRequest) returns (ApplicationMgr_OpenSequenceFileDialogResponse);
  
  
  // Method: NewCommands
  //
  // Creates an empty Commands collection. Refer to the Command object for more information about Command objects.
  //
  // ApplicationMgr_NewCommandsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_NewCommandsResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommandsInstance - A reference to a Commands object. Release this reference when you are finished with it. 
  //
  rpc NewCommands(ApplicationMgr_NewCommandsRequest) returns (ApplicationMgr_NewCommandsResponse);
  
  
  // Method: RaiseError
  //
  // Generates an ApplicationMgr.ReportError event.
  //
  // Typically, an application handles the ReportError event to display or log errors that occur during the operation of the TestStand User Interface Controls. An application can reuse this event handler to report other errors by calling this method.
  //
  // ApplicationMgr_RaiseErrorRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - errorCode: int32 - Specifies the integer error code.
  //    - errorMessage: string - Specifies the descriptive error string.
  //
  // ApplicationMgr_RaiseErrorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc RaiseError(ApplicationMgr_RaiseErrorRequest) returns (ApplicationMgr_RaiseErrorResponse);
  
  
  // Method: CloseExecution
  //
  // Releases all references to the execution.
  //
  // The Application Manager control attempts to close the execution by generating a QueryCloseExecution event. The ApplicationMgr.QueryCloseExecution event determines whether to cancel the closing of an execution or take additional actions when the execution is running. This method does not wait for running or terminating executions to complete.
  //
  // ApplicationMgr_CloseExecutionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - exec: ExecutionInstance - Specifies the execution to close.
  //
  // ApplicationMgr_CloseExecutionResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True if the execution was closed. 
  //
  rpc CloseExecution(ApplicationMgr_CloseExecutionRequest) returns (ApplicationMgr_CloseExecutionResponse);
  
  
  // Method: SetAutoCloseExecution
  //
  // Sets an execution to automatically close when complete.
  //
  // ApplicationMgr_SetAutoCloseExecutionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - exec: ExecutionInstance - Specifies the execution you want to close automatically.
  //    - val: bool - Pass True for the execution to close when complete. When this parameter is False, the execution does not close automatically.
  //
  // ApplicationMgr_SetAutoCloseExecutionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetAutoCloseExecution(ApplicationMgr_SetAutoCloseExecutionRequest) returns (ApplicationMgr_SetAutoCloseExecutionResponse);
  
  
  // Method: GetAutoCloseExecution
  //
  // Returns a Boolean value that indicates whether an execution closes automatically when complete.
  //
  // ApplicationMgr_GetAutoCloseExecutionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - exec: ExecutionInstance - Specifies the execution to obtain the setting from.
  //
  // ApplicationMgr_GetAutoCloseExecutionResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When this method returns True, the execution closes automatically when complete. When this method returns False, the execution does not close automatically. 
  //
  rpc GetAutoCloseExecution(ApplicationMgr_GetAutoCloseExecutionRequest) returns (ApplicationMgr_GetAutoCloseExecutionResponse);
  
  
  // Method: SetVisible
  //
  // Specify False to hide the execution in the user interface. Hidden executions are not included in an execution list connection you establish to an ExecutionView Manager control unless you set the ExecutionListConnection.ShowHiddenExecutions property to True.
  //
  // Invisible executions are created when an execution is created with ExecTypeMask_InitiallyHidden.
  //
  // ApplicationMgr_SetVisibleRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - exec: ExecutionInstance - Specifies the execution to make visible or hidden.
  //    - val: bool - Pass True to make the execution visible. Pass False to make the execution hidden.
  //
  // ApplicationMgr_SetVisibleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetVisible(ApplicationMgr_SetVisibleRequest) returns (ApplicationMgr_SetVisibleResponse);
  
  
  // Method: GetVisible
  //
  // Returns True when the execution is not hidden in the user interface. Hidden executions are not included in an execution list connection you establish to an ExecutionView Manager control unless you set the ExecutionListConnection.ShowHiddenExecutions property to True.
  //
  // Hidden executions are created using the ExecTypeMask_InitiallyHidden flag.
  //
  // ApplicationMgr_GetVisibleRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - exec: ExecutionInstance - Specifies the execution to determine whether it is visible.
  //
  // ApplicationMgr_GetVisibleResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The return type of the Boolean object.
  //
  rpc GetVisible(ApplicationMgr_GetVisibleRequest) returns (ApplicationMgr_GetVisibleResponse);
  
  
  // Method: GetEngine
  //
  // Returns a reference to the TestStand Engine.
  //
  // ApplicationMgr_GetEngineRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_GetEngineResponse - The response message from the server. It provides the return value.
  //    - returnValue: EngineInstance - The return type of the Engine object.
  //
  rpc GetEngine(ApplicationMgr_GetEngineRequest) returns (ApplicationMgr_GetEngineResponse);
  
  
  // Method: GetCommand
  //
  // Creates a Command object.
  //
  // ApplicationMgr_GetCommandRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - cmdKind: CommandKinds - Specifies the type of Command object to create.
  //    - commandIndex: int32 - Specifies which command in the set to return. Use this on sets of commands.
  //
  // ApplicationMgr_GetCommandResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommandInstance - Command object that represents the command. 
  //
  rpc GetCommand(ApplicationMgr_GetCommandRequest) returns (ApplicationMgr_GetCommandResponse);
  
  
  // Method: GetCaptionText
  //
  // Returns the current caption text for a caption source in the Application Manager control.
  //
  // ApplicationMgr_GetCaptionTextRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - captionSource: CaptionSources - Specifies the type of caption source to obtain the text from.
  //    - longName: bool - Specifies whether to return a long or short version of the caption text for certain caption sources. Refer to the CaptionSources enumeration for more information about determining when this option affects the text and for more information about the difference between the long and short versions of the text.
  //    - formatExpression: string - Specifies a format expression to evaluate when generating the caption text. For the CaptionSource_MacroExpression caption source, specify a format expression that evaluates to a string value that contains macros that specify other caption sources. For all other caption sources, specify an expression that evaluates to a string value that contains the characters %1.  The method replaces the %1 characters with the text from the caption source. Pass an empty string to use the default format string for the caption source.
  //
  // ApplicationMgr_GetCaptionTextResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The current text for the caption source you specify. 
  //
  rpc GetCaptionText(ApplicationMgr_GetCaptionTextRequest) returns (ApplicationMgr_GetCaptionTextResponse);
  
  
  // Method: GetImageName
  //
  // Returns the current image name for an image source in the Application Manager control. Use the Images.FindImage method to acquire a reference to the image.
  //
  // ApplicationMgr_GetImageNameRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - imageSource: ImageSources - Specifies the type of image source from which to obtain an image name.
  //
  // ApplicationMgr_GetImageNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The current image name for the image source you specify. 
  //
  rpc GetImageName(ApplicationMgr_GetImageNameRequest) returns (ApplicationMgr_GetImageNameResponse);
  
  
  // Method: ReloadModifiedSequenceFiles
  //
  // Note: This method is obsolete. Use the ReloadModifiedSequenceFilesEx method instead.
  //
  // Determines whether loaded sequence files have been modified on disk and generates an ApplicationMgr.QueryReloadSequenceFile event to determine whether to prompt you to reload any modified files.
  // This method also refreshes the read-only state of open sequence files and updates the ApplicationMgr.ConfigurationEntryPoints and ApplicationMgr.ExecutionEntryPoints properties. Use the ApplicationMgr.ReloadFile method to reload a specific file.
  //
  // ApplicationMgr_ReloadModifiedSequenceFilesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_ReloadModifiedSequenceFilesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ReloadModifiedSequenceFiles(ApplicationMgr_ReloadModifiedSequenceFilesRequest) returns (ApplicationMgr_ReloadModifiedSequenceFilesResponse);
  
  
  // Method: CloseAllExecutions
  //
  // Closes and releases all references to all executions.
  //
  // The Application Manager control attempts to close all executions by generating a QueryCloseExecution event for each execution in the Executions collection. The ApplicationMgr.QueryCloseExecution event determines whether to cancel the closing of an execution or take additional actions when the execution is running. This method does not wait for running or terminating executions to complete.
  //
  // ApplicationMgr_CloseAllExecutionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_CloseAllExecutionsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc CloseAllExecutions(ApplicationMgr_CloseAllExecutionsRequest) returns (ApplicationMgr_CloseAllExecutionsResponse);
  
  
  // Method: ConnectCommand
  //
  // Connects a control to the Application Manager control to make the connected control function as a command.
  //
  // You can connect TestStand User Interface buttons and checkboxes using this method.
  // To disconnect an existing connection, you must first obtain the ApplicationMgrConnections object from the ApplicationMgr.Connections property. Then, access the ApplicationMgrConnections.Command property to obtain the CommandConnections collection.
  //
  // ApplicationMgr_ConnectCommandRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - uiObj: ObjectInstance - Specifies the button or checkbox control to which the command connects.
  //    - cmdKind: CommandKinds - Specifies the type of command to connect. 
  //      Note: Not all commands found in the CommandKinds enumeration work with the Application Manager control. Refer to the  CommandKinds enumeration for a list of compatible commands.
  //    - opts: int32 - Specifies a bitwise-OR combination of the CommandConnectionOptions constants.
  //
  // ApplicationMgr_ConnectCommandResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommandConnectionInstance - A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected with this type of connection, the existing connection is returned. 
  //
  rpc ConnectCommand(ApplicationMgr_ConnectCommandRequest) returns (ApplicationMgr_ConnectCommandResponse);
  
  
  // Method: ConnectCaption
  //
  // Connects a caption source in the Application Manager control to a visible control or an element of a visible control. The connection automatically updates the visible control with the text that describes an aspect of the application state.
  //
  // You can use this method to display a caption in a Label, ExpressionEdit or StatusBarPane control.
  // To disconnect an existing connection, you must first obtain the ApplicationMgrConnections object from the ApplicationMgr.Connections property. Then, access the ApplicationMgrConnections.Caption property to obtain the CaptionConnections collection.
  //
  // ApplicationMgr_ConnectCaptionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - uiObj: ObjectInstance - Specifies the visible control, or element of a visible control to which the caption source connects. Pass a Label, ExpressionEdit,  or StatusBarPane.
  //    - captionSource: CaptionSources - Specifies the type of caption source to connect.
  //
  // ApplicationMgr_ConnectCaptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: CaptionConnectionInstance - A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected with this type of connection, the existing connection is returned. 
  //
  rpc ConnectCaption(ApplicationMgr_ConnectCaptionRequest) returns (ApplicationMgr_ConnectCaptionResponse);
  
  
  // Method: GetSequenceFileViewMgr
  //
  // Finds a SequenceFileView Manager control that has a particular sequence file selected.
  //
  // ApplicationMgr_GetSequenceFileViewMgrRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - file: SequenceFileInstance - Specifies the Sequence file with the SequenceFileView Manager control you want returned.
  //
  // ApplicationMgr_GetSequenceFileViewMgrResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - IDispatch pointer to a SequenceFileView Manager control. When a sequence file is not selected in a SequenceFileView Manager control, the return value is NULL. 
  //
  rpc GetSequenceFileViewMgr(ApplicationMgr_GetSequenceFileViewMgrRequest) returns (ApplicationMgr_GetSequenceFileViewMgrResponse);
  
  
  // Method: GetExecutionViewMgr
  //
  // Finds the ExecutionView Manager control displaying a particular execution.
  //
  // ApplicationMgr_GetExecutionViewMgrRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - exec: ExecutionInstance - Specifies the execution with the ExecutionView Manager control you want returned.
  //
  // ApplicationMgr_GetExecutionViewMgrResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - The ExecutionView Manager control that is displaying the execution that is passed in. This method returns NULL when it cannot find an ExecutionView Manager control that displays the specified execution. 
  //
  rpc GetExecutionViewMgr(ApplicationMgr_GetExecutionViewMgrRequest) returns (ApplicationMgr_GetExecutionViewMgrResponse);
  
  
  // Method: LocalizeAllControls
  //
  // Calls the Localize method on all loaded TestStand User Interface Controls using a given section name.
  // For each user visible control text string, this method searches for a tag with the same string value in the specified section. When this method finds a control text string that is a tag in the language file, the method replaces the control text string with the value of the tag for the current language.
  //
  // Call this control to localize all the controls once they are loaded.
  //
  // ApplicationMgr_LocalizeAllControlsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - sectionName: string - Specifies the name of the section in the language files to use.
  //
  // ApplicationMgr_LocalizeAllControlsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc LocalizeAllControls(ApplicationMgr_LocalizeAllControlsRequest) returns (ApplicationMgr_LocalizeAllControlsResponse);
  
  
  // Method: RefreshAllViewMgrs
  //
  // Refreshes all connected controls for all manager controls.
  //
  // ApplicationMgr_RefreshAllViewMgrsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_RefreshAllViewMgrsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc RefreshAllViewMgrs(ApplicationMgr_RefreshAllViewMgrsRequest) returns (ApplicationMgr_RefreshAllViewMgrsResponse);
  
  
  // Method: OpenSequenceFilesDialog
  //
  // Launches an Open File dialog box, in which you can select more than one sequence file.
  //
  // This method adds the opened sequence files to the SequenceFiles collection and generates the ApplicationMgr.SequenceFileOpened event for each opened file and generates the ApplicationMgr.DisplaySequenceFile event for the first file opened.
  //
  // ApplicationMgr_OpenSequenceFilesDialogRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_OpenSequenceFilesDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFilesInstance - A collection of the opened sequence files. 
  //
  rpc OpenSequenceFilesDialog(ApplicationMgr_OpenSequenceFilesDialogRequest) returns (ApplicationMgr_OpenSequenceFilesDialogResponse);
  
  
  // Method: GetModelFile
  //
  // This method returns the process model sequence file the Application Manager control loads for a specified sequence file.
  //
  // ApplicationMgr_GetModelFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - clientFile: SequenceFileInstance - Specifies the sequence file with the associated process model sequence file you want. When you pass NULL, this method returns the station model file.
  //    - loadIfNotAlreadyLoaded: bool - Pass True to force the Application Manager control to load the model file if the Application Manager control has not already done so. When you pass False and the Application Manager control has not already loaded the model file, this method returns NULL.
  //
  // ApplicationMgr_GetModelFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFileInstance - The return type of the SequenceFile object.
  //
  rpc GetModelFile(ApplicationMgr_GetModelFileRequest) returns (ApplicationMgr_GetModelFileResponse);
  
  

  // Property: LoginOnStart
  //
  // When this property is True and the StationOptions.LoginOnStart property is True, the LoginLogout Front-End callback sequence runs when you call the ApplicationMgr.Start method.
  //
  // ApplicationMgr_Set_LoginOnStartRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - val: bool - When this property is True and the StationOptions.LoginOnStart property is True, the LoginLogout Front-End callback sequence runs when you call the ApplicationMgr.Start method. 
  //
  // ApplicationMgr_Set_LoginOnStartResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ApplicationMgr_Get_LoginOnStartRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_LoginOnStartResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When this property is True and the StationOptions.LoginOnStart property is True, the LoginLogout Front-End callback sequence runs when you call the ApplicationMgr.Start method. 
  //
  rpc Set_LoginOnStart(ApplicationMgr_Set_LoginOnStartRequest) returns (ApplicationMgr_Set_LoginOnStartResponse);
  rpc Get_LoginOnStart(ApplicationMgr_Get_LoginOnStartRequest) returns (ApplicationMgr_Get_LoginOnStartResponse);
  
  
  // Property: BreakOnStepFailure
  //
  // When this property is True, TestStand suspends an execution for any step that fails. When this property is False, TestStand suspends execution based on whether the ExecTypeMask_BreakOnStepFailure option is enabled in the Execution.TypeMask property for that execution.
  //
  // The value of this property is the same as the StationOptions.BreakOnStepFailure property.
  //
  // ApplicationMgr_Set_BreakOnStepFailureRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - val: bool - When this property is True, TestStand suspends an execution for any step that fails. When this property is False, TestStand suspends execution based on whether the ExecTypeMask_BreakOnStepFailure option is enabled in the Execution.TypeMask property for that execution. 
  //
  // ApplicationMgr_Set_BreakOnStepFailureResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ApplicationMgr_Get_BreakOnStepFailureRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_BreakOnStepFailureResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When this property is True, TestStand suspends an execution for any step that fails. When this property is False, TestStand suspends execution based on whether the ExecTypeMask_BreakOnStepFailure option is enabled in the Execution.TypeMask property for that execution. 
  //
  rpc Set_BreakOnStepFailure(ApplicationMgr_Set_BreakOnStepFailureRequest) returns (ApplicationMgr_Set_BreakOnStepFailureResponse);
  rpc Get_BreakOnStepFailure(ApplicationMgr_Get_BreakOnStepFailureRequest) returns (ApplicationMgr_Get_BreakOnStepFailureResponse);
  
  
  // Property: Connections
  //
  // Returns the ApplicationMgrConnections object, which contains the collection of the connections made to the Application Manager control.
  //
  // Typically, you do not need to use this object.
  // To make connections to the Application Manager control, use the ApplicationMgr.ConnectCaption and the ApplicationMgr.ConnectCommand methods.
  //
  // ApplicationMgr_Get_ConnectionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_ConnectionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: ApplicationMgrConnectionsInstance - Returns the ApplicationMgrConnections object, which contains the collection of the connections made to the Application Manager control. 
  //
  rpc Get_Connections(ApplicationMgr_Get_ConnectionsRequest) returns (ApplicationMgr_Get_ConnectionsResponse);
  
  
  // Property: BreakOnFirstStep
  //
  // When this property is True, all new executions break on the first step.
  //
  // The value of this property persists in the configuration file the  ApplicationMgr.ConfigFilePath property specifies.
  //
  // ApplicationMgr_Set_BreakOnFirstStepRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - val: bool - When this property is True, all new executions break on the first step. 
  //
  // ApplicationMgr_Set_BreakOnFirstStepResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ApplicationMgr_Get_BreakOnFirstStepRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_BreakOnFirstStepResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When this property is True, all new executions break on the first step. 
  //
  rpc Set_BreakOnFirstStep(ApplicationMgr_Set_BreakOnFirstStepRequest) returns (ApplicationMgr_Set_BreakOnFirstStepResponse);
  rpc Get_BreakOnFirstStep(ApplicationMgr_Get_BreakOnFirstStepRequest) returns (ApplicationMgr_Get_BreakOnFirstStepResponse);
  
  
  // Property: BreakOnSequenceFailure
  //
  // When this property is True, TestStand suspends an execution on sequence failure. When this property is False, TestStand suspends execution based on whether the ExecTypeMask_BreakOnSequenceFailure  option is enabled in the Execution.TypeMask property for the execution.
  //
  // The value of this property is the same as the StationOptions.BreakOnSequenceFailure property.
  //
  // ApplicationMgr_Set_BreakOnSequenceFailureRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - val: bool - When this property is True, TestStand suspends an execution on sequence failure. When this property is False, TestStand suspends execution based on whether the ExecTypeMask_BreakOnSequenceFailure  option is enabled in the Execution.TypeMask property for the execution. 
  //
  // ApplicationMgr_Set_BreakOnSequenceFailureResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ApplicationMgr_Get_BreakOnSequenceFailureRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_BreakOnSequenceFailureResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When this property is True, TestStand suspends an execution on sequence failure. When this property is False, TestStand suspends execution based on whether the ExecTypeMask_BreakOnSequenceFailure  option is enabled in the Execution.TypeMask property for the execution. 
  //
  rpc Set_BreakOnSequenceFailure(ApplicationMgr_Set_BreakOnSequenceFailureRequest) returns (ApplicationMgr_Set_BreakOnSequenceFailureResponse);
  rpc Get_BreakOnSequenceFailure(ApplicationMgr_Get_BreakOnSequenceFailureRequest) returns (ApplicationMgr_Get_BreakOnSequenceFailureResponse);
  
  
  // Property: CommandLineArguments
  //
  // Returns the collection of command-line arguments to the application. The following are switches on the command line:    * /run <sequence> <sequencefile>—Runs the sequence in the sequence file.    * /runEntryPoint <entryPointName> <SequenceFile>—Runs the entry point on the sequence file.    * /quit—Exits the application once all executions complete.    * /setCurrentDir—Sets the current directory to the first directory in the directory history list in the File dialog box. The current directory is the directory the File dialog box initially displays when you open a file. Use this option to set the directory the File dialog box displays to the directory the File dialog box displayed the last time you ran the application. The application sets the current directory after processing the other command-line options.    * /?—Launches a help dialog box, which contains a list of valid command-line arguments, and then immediately closes.    * /useExisting—Prevents a second instance of the application from running and forwards all command-line arguments to the application that is already running.    * /goto <location>—Instructs the application to display the item the <location> property object path specifies, such as TestExec.exe C:\example.seq /goto "Seq[\"MainSequence\"].Main[\"Power On\"]"TestExec.exe C:\example.seq /goto "Seq[\"MainSequence\"].Main[\"ID#:JifH4ODTf0y1z7bJne0G7D\"]"TestExec.exe C:\example.seq /goto "Seq[1].Main[4].TS.LoadOpt"    * /editor—Enables the application to create and edit sequence files. You must have activated a license that supports creating and editing sequence files.    * /operatorInterface—Prevents the application from creating and editing sequence files.Note: You can use / or - to specify a switch. Quotation marks are required for arguments that contain a space, such as "Test UUTs" and "C:\My Documents\Test Sequence.seq".
  //
  // The collection is created by splitting up the command line used to start the application, using white space as a delimiter.
  // Note: When you launch another instance of the application with the /useExisting command-line switch, this property does not change to reflect the arguments forwarded to the application. Use the ApplicationMgr.ProcessUserCommandLineArguments event instead to process command-line arguments from another instance of the application.
  //
  // ApplicationMgr_Get_CommandLineArgumentsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_CommandLineArgumentsResponse - The response message from the server. It provides the return value.
  //    - returnValue: StringsInstance - Returns the collection of command-line arguments to the application. The following are switches on the command line:    * /run <sequence> <sequencefile>—Runs the sequence in the sequence file.    * /runEntryPoint <entryPointName> <SequenceFile>—Runs the entry point on the sequence file.    * /quit—Exits the application once all executions complete.    * /setCurrentDir—Sets the current directory to the first directory in the directory history list in the File dialog box. The current directory is the directory the File dialog box initially displays when you open a file. Use this option to set the directory the File dialog box displays to the directory the File dialog box displayed the last time you ran the application. The application sets the current directory after processing the other command-line options.    * /?—Launches a help dialog box, which contains a list of valid command-line arguments, and then immediately closes.    * /useExisting—Prevents a second instance of the application from running and forwards all command-line arguments to the application that is already running.    * /goto <location>—Instructs the application to display the item the <location> property object path specifies, such as TestExec.exe C:\example.seq /goto "Seq[\"MainSequence\"].Main[\"Power On\"]"TestExec.exe C:\example.seq /goto "Seq[\"MainSequence\"].Main[\"ID#:JifH4ODTf0y1z7bJne0G7D\"]"TestExec.exe C:\example.seq /goto "Seq[1].Main[4].TS.LoadOpt"    * /editor—Enables the application to create and edit sequence files. You must have activated a license that supports creating and editing sequence files.    * /operatorInterface—Prevents the application from creating and editing sequence files.Note: You can use / or - to specify a switch. Quotation marks are required for arguments that contain a space, such as "Test UUTs" and "C:\My Documents\Test Sequence.seq". 
  //
  rpc Get_CommandLineArguments(ApplicationMgr_Get_CommandLineArgumentsRequest) returns (ApplicationMgr_Get_CommandLineArgumentsResponse);
  
  
  // Property: ProcessCommandLine
  //
  // When this property is True, the Application Manager control processes the following switches on the command line:    * /editor—Enables the application to create and edit sequence files. You must have activated a license that supports creating and editing sequence files.    * /goto <location>—Instructs the application to display the item the <location> property object path specifies, such as TestExec.exe C:\example.seq /goto "Seq[\"MainSequence\"].Main[\"Power On\"]"TestExec.exe C:\example.seq /goto "Seq[\"MainSequence\"].Main[\"ID#:JifH4ODTf0y1z7bJne0G7D\"]"TestExec.exe C:\example.seq /goto "Seq[1].Main[4].TS.LoadOpt"    * /operatorinterface—Prevents the application from creating and editing sequence files.Note: You can use / or - to specify a switch. Quotation marks are required for arguments that contain a space, such as "Test UUTs" and "C:\My Documents\Test Sequence.seq".    * /outputToStdIO—Writes the status of completed executions to standard output. When you run a user interface from the command line, the console window displays the text written to standard output.    * /quit—Exits the application once all executions complete.    * /run <sequence> <sequencefile>—Runs the sequence in the sequence file.    * /runEntryPoint <entryPointName> <SequenceFile>—Runs the entry point on the sequence file.    * /setCurrentDir—Sets the current directory to the first directory in the directory history list in the File dialog box. The current directory is the directory the File dialog box initially displays when you open a file. Use this option to set the directory the File dialog box displays to the directory the File dialog box displayed the last time you ran the application. The application sets the current directory after processing the other command-line options.    * /useExisting—Prevents a second instance of the application from running and forwards all command-line arguments to the application that is already running.    * /?—Launches a help dialog box, which contains a list of valid command-line arguments, and then immediately closes.
  // In addition to the switches, you can provide on the command line sequence filenames to load into the application.
  //
  // The ApplicationMgr.ReportError event reports errors that might occur while processing the command-line arguments.
  // Use the ApplicationMgr.ProcessUserCommandLineArguments event to process command-line arguments the Application Manager control does not recognize as custom command-line arguments.
  //
  // ApplicationMgr_Set_ProcessCommandLineRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - val: bool - When this property is True, the Application Manager control processes the following switches on the command line:    * /editor—Enables the application to create and edit sequence files. You must have activated a license that supports creating and editing sequence files.    * /goto <location>—Instructs the application to display the item the <location> property object path specifies, such as TestExec.exe C:\example.seq /goto "Seq[\"MainSequence\"].Main[\"Power On\"]"TestExec.exe C:\example.seq /goto "Seq[\"MainSequence\"].Main[\"ID#:JifH4ODTf0y1z7bJne0G7D\"]"TestExec.exe C:\example.seq /goto "Seq[1].Main[4].TS.LoadOpt"    * /operatorinterface—Prevents the application from creating and editing sequence files.Note: You can use / or - to specify a switch. Quotation marks are required for arguments that contain a space, such as "Test UUTs" and "C:\My Documents\Test Sequence.seq".    * /outputToStdIO—Writes the status of completed executions to standard output. When you run a user interface from the command line, the console window displays the text written to standard output.    * /quit—Exits the application once all executions complete.    * /run <sequence> <sequencefile>—Runs the sequence in the sequence file.    * /runEntryPoint <entryPointName> <SequenceFile>—Runs the entry point on the sequence file.    * /setCurrentDir—Sets the current directory to the first directory in the directory history list in the File dialog box. The current directory is the directory the File dialog box initially displays when you open a file. Use this option to set the directory the File dialog box displays to the directory the File dialog box displayed the last time you ran the application. The application sets the current directory after processing the other command-line options.    * /useExisting—Prevents a second instance of the application from running and forwards all command-line arguments to the application that is already running.    * /?—Launches a help dialog box, which contains a list of valid command-line arguments, and then immediately closes. In addition to the switches, you can provide on the command line sequence filenames to load into the application. 
  //
  // ApplicationMgr_Set_ProcessCommandLineResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ApplicationMgr_Get_ProcessCommandLineRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_ProcessCommandLineResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When this property is True, the Application Manager control processes the following switches on the command line:    * /editor—Enables the application to create and edit sequence files. You must have activated a license that supports creating and editing sequence files.    * /goto <location>—Instructs the application to display the item the <location> property object path specifies, such as TestExec.exe C:\example.seq /goto "Seq[\"MainSequence\"].Main[\"Power On\"]"TestExec.exe C:\example.seq /goto "Seq[\"MainSequence\"].Main[\"ID#:JifH4ODTf0y1z7bJne0G7D\"]"TestExec.exe C:\example.seq /goto "Seq[1].Main[4].TS.LoadOpt"    * /operatorinterface—Prevents the application from creating and editing sequence files.Note: You can use / or - to specify a switch. Quotation marks are required for arguments that contain a space, such as "Test UUTs" and "C:\My Documents\Test Sequence.seq".    * /outputToStdIO—Writes the status of completed executions to standard output. When you run a user interface from the command line, the console window displays the text written to standard output.    * /quit—Exits the application once all executions complete.    * /run <sequence> <sequencefile>—Runs the sequence in the sequence file.    * /runEntryPoint <entryPointName> <SequenceFile>—Runs the entry point on the sequence file.    * /setCurrentDir—Sets the current directory to the first directory in the directory history list in the File dialog box. The current directory is the directory the File dialog box initially displays when you open a file. Use this option to set the directory the File dialog box displays to the directory the File dialog box displayed the last time you ran the application. The application sets the current directory after processing the other command-line options.    * /useExisting—Prevents a second instance of the application from running and forwards all command-line arguments to the application that is already running.    * /?—Launches a help dialog box, which contains a list of valid command-line arguments, and then immediately closes. In addition to the switches, you can provide on the command line sequence filenames to load into the application. 
  //
  rpc Set_ProcessCommandLine(ApplicationMgr_Set_ProcessCommandLineRequest) returns (ApplicationMgr_Set_ProcessCommandLineResponse);
  rpc Get_ProcessCommandLine(ApplicationMgr_Get_ProcessCommandLineRequest) returns (ApplicationMgr_Get_ProcessCommandLineResponse);
  
  
  // Property: SequenceFiles
  //
  // Returns the collection of sequence files the application opens.
  //
  // This property eliminates the need to keep an array of open sequence files. Use the ApplicationMgr.OpenSequenceFile method to add files to the collection and the ApplicationMgr.CloseSequenceFile method to remove files from the collection.
  //
  // ApplicationMgr_Get_SequenceFilesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_SequenceFilesResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFilesInstance - Returns the collection of sequence files the application opens. 
  //
  rpc Get_SequenceFiles(ApplicationMgr_Get_SequenceFilesRequest) returns (ApplicationMgr_Get_SequenceFilesResponse);
  
  
  // Property: Executions
  //
  // Returns the collection of executions the application creates.
  //
  // This property eliminates the need to keep an array of open executions. The Application Manager control automatically adds new executions to the collection and removes closed executions.
  //
  // ApplicationMgr_Get_ExecutionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_ExecutionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionsInstance - Returns the collection of executions the application creates. 
  //
  rpc Get_Executions(ApplicationMgr_Get_ExecutionsRequest) returns (ApplicationMgr_Get_ExecutionsResponse);
  
  
  // Property: LoginLogoutRunning
  //
  // Returns True when the Application Manager control is running a LoginLogout Front-End callback sequence for a user to log in or log out.
  //
  // ApplicationMgr_Get_LoginLogoutRunningRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_LoginLogoutRunningResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when the Application Manager control is running a LoginLogout Front-End callback sequence for a user to log in or log out. 
  //
  rpc Get_LoginLogoutRunning(ApplicationMgr_Get_LoginLogoutRunningRequest) returns (ApplicationMgr_Get_LoginLogoutRunningResponse);
  
  
  // Property: Executing
  //
  // Returns True when an execution is running.
  //
  // ApplicationMgr_Get_ExecutingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_ExecutingResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when an execution is running. 
  //
  rpc Get_Executing(ApplicationMgr_Get_ExecutingRequest) returns (ApplicationMgr_Get_ExecutingResponse);
  
  
  // Property: ConfigFile
  //
  // Returns the PropertyObjectFile object that represents the configuration information that persists between sessions of the application.
  //
  // The ApplicationMgr.ConfigFilePath property specifies the property object filename.
  //
  // ApplicationMgr_Get_ConfigFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_ConfigFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectFileInstance - Returns the PropertyObjectFile object that represents the configuration information that persists between sessions of the application. 
  //
  rpc Get_ConfigFile(ApplicationMgr_Get_ConfigFileRequest) returns (ApplicationMgr_Get_ConfigFileResponse);
  
  
  // Property: ConfigFilePath
  //
  // Specifies the path of the configuration file.
  //
  // Once the file has been loaded and you have called the ApplicationMgr.Start method, the path cannot be changed. The default pathname is %TestStandLocalAppData%\UserInterface.xml.
  // Note: This property honors environment variables, the %TSVer% macro, the %TestStandConfig% macro, and the %TestStandLocalAppData% macro. The %TSVer% macro expands to the current TestStand version number. The %TestStandConfig% macro expands to the directory the Engine.GetTestStandPath (TestStandPath_Config) method call returns. The %TestStandLocalAppData% macro expands to the directory the Engine.GetTestStandPath (TestStandPath_LocalAppData) method call returns.
  //
  // ApplicationMgr_Set_ConfigFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - val: string - Specifies the path of the configuration file. 
  //
  // ApplicationMgr_Set_ConfigFilePathResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ApplicationMgr_Get_ConfigFilePathRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_ConfigFilePathResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the path of the configuration file. 
  //
  rpc Set_ConfigFilePath(ApplicationMgr_Set_ConfigFilePathRequest) returns (ApplicationMgr_Set_ConfigFilePathResponse);
  rpc Get_ConfigFilePath(ApplicationMgr_Get_ConfigFilePathRequest) returns (ApplicationMgr_Get_ConfigFilePathResponse);
  
  
  // Property: MRUFiles
  //
  // Returns a collection of the most recently used (MRU) sequence filenames in the application.
  //
  // ApplicationMgr_Get_MRUFilesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_MRUFilesResponse - The response message from the server. It provides the return value.
  //    - returnValue: MRUFilesInstance - Returns a collection of the most recently used (MRU) sequence filenames in the application. 
  //
  rpc Get_MRUFiles(ApplicationMgr_Get_MRUFilesRequest) returns (ApplicationMgr_Get_MRUFilesResponse);
  
  
  // Property: ReloadSequenceFilesOnStart
  //
  // Specifies which files to reload when the application starts.
  //
  // A value of ReloadFile_None results in nothing being reloaded on start. A value of ReloadFile_Selected makes the ApplicationMgr.Start method reload all files selected in any SequenceFileView Manager controls the last time the ApplicationMgr.Shutdown method was called. A value of ReloadFile_All makes the ApplicationMgr.Start method reload all files that were open when the ApplicationMgr.Shutdown method was last called.
  // The files load after the first time a user logs in.
  //
  // ApplicationMgr_Set_ReloadSequenceFilesOnStartRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - val: ReloadFiles - Specifies which files to reload when the application starts. 
  //
  // ApplicationMgr_Set_ReloadSequenceFilesOnStartResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ApplicationMgr_Get_ReloadSequenceFilesOnStartRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_ReloadSequenceFilesOnStartResponse - The response message from the server. It provides the return value.
  //    - returnValue: ReloadFiles - Specifies which files to reload when the application starts. 
  //
  rpc Set_ReloadSequenceFilesOnStart(ApplicationMgr_Set_ReloadSequenceFilesOnStartRequest) returns (ApplicationMgr_Set_ReloadSequenceFilesOnStartResponse);
  rpc Get_ReloadSequenceFilesOnStart(ApplicationMgr_Get_ReloadSequenceFilesOnStartRequest) returns (ApplicationMgr_Get_ReloadSequenceFilesOnStartResponse);
  
  
  // Property: UserData
  //
  // Stores user-specific data.
  //
  // User data is cleared when the application shuts down.
  //
  // ApplicationMgr_Set_UserDataRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - val: ObjectInstance - Stores user-specific data. 
  //
  // ApplicationMgr_Set_UserDataResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ApplicationMgr_Get_UserDataRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_UserDataResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - Stores user-specific data. 
  //
  rpc Set_UserData(ApplicationMgr_Set_UserDataRequest) returns (ApplicationMgr_Set_UserDataResponse);
  rpc Get_UserData(ApplicationMgr_Get_UserDataRequest) returns (ApplicationMgr_Get_UserDataResponse);
  
  
  // Property: CurrentUIMessage
  //
  // Accesses the current message being processed.
  //
  // This property returns the current TestStand user interface message object when you need more information while handling an event.
  //
  // ApplicationMgr_Get_CurrentUIMessageRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_CurrentUIMessageResponse - The response message from the server. It provides the return value.
  //    - returnValue: UIMessageInstance - Accesses the current message being processed. 
  //
  rpc Get_CurrentUIMessage(ApplicationMgr_Get_CurrentUIMessageRequest) returns (ApplicationMgr_Get_CurrentUIMessageResponse);
  
  
  // Property: LogoutClosesSeqFilesAndExecs
  //
  // When this property is True, the ApplicationMgr.Logout method closes all sequence files and executions before running the LoginLogout Front-End callback. When this property is False, the ApplicationMgr.Logout method does not close any open sequence files or executions.
  //
  // ApplicationMgr_Set_LogoutClosesSeqFilesAndExecsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - val: bool - When this property is True, the ApplicationMgr.Logout method closes all sequence files and executions before running the LoginLogout Front-End callback. When this property is False, the ApplicationMgr.Logout method does not close any open sequence files or executions. 
  //
  // ApplicationMgr_Set_LogoutClosesSeqFilesAndExecsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ApplicationMgr_Get_LogoutClosesSeqFilesAndExecsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_LogoutClosesSeqFilesAndExecsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When this property is True, the ApplicationMgr.Logout method closes all sequence files and executions before running the LoginLogout Front-End callback. When this property is False, the ApplicationMgr.Logout method does not close any open sequence files or executions. 
  //
  rpc Set_LogoutClosesSeqFilesAndExecs(ApplicationMgr_Set_LogoutClosesSeqFilesAndExecsRequest) returns (ApplicationMgr_Set_LogoutClosesSeqFilesAndExecsResponse);
  rpc Get_LogoutClosesSeqFilesAndExecs(ApplicationMgr_Get_LogoutClosesSeqFilesAndExecsRequest) returns (ApplicationMgr_Get_LogoutClosesSeqFilesAndExecsResponse);
  
  
  // Property: ReloadModifiedFilesInterval
  //
  // Specifies the interval, in seconds, at which the Application Manager control calls the ApplicationMgr.ReloadModifiedSequenceFilesEx method. When the value is 0, the Application Manager control does not reload any modified sequence files.
  //
  // The default value is 3 seconds.
  //
  // ApplicationMgr_Set_ReloadModifiedFilesIntervalRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - val: int32 - Specifies the interval, in seconds, at which the Application Manager control calls the ApplicationMgr.ReloadModifiedSequenceFilesEx method. When the value is 0, the Application Manager control does not reload any modified sequence files. 
  //
  // ApplicationMgr_Set_ReloadModifiedFilesIntervalResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ApplicationMgr_Get_ReloadModifiedFilesIntervalRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_ReloadModifiedFilesIntervalResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the interval, in seconds, at which the Application Manager control calls the ApplicationMgr.ReloadModifiedSequenceFilesEx method. When the value is 0, the Application Manager control does not reload any modified sequence files. 
  //
  rpc Set_ReloadModifiedFilesInterval(ApplicationMgr_Set_ReloadModifiedFilesIntervalRequest) returns (ApplicationMgr_Set_ReloadModifiedFilesIntervalResponse);
  rpc Get_ReloadModifiedFilesInterval(ApplicationMgr_Get_ReloadModifiedFilesIntervalRequest) returns (ApplicationMgr_Get_ReloadModifiedFilesIntervalResponse);
  
  
  // Property: IsShuttingDown
  //
  // Returns True when the Application Manager control is shutting down. The Application Manager control shuts down between the time when the ApplicationMgr.Shutdown method is called until the ApplicationMgr.ExitApplication or ApplicationMgr.ShutDownCancelled event is called.
  //
  // ApplicationMgr_Get_IsShuttingDownRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_IsShuttingDownResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when the Application Manager control is shutting down. The Application Manager control shuts down between the time when the ApplicationMgr.Shutdown method is called until the ApplicationMgr.ExitApplication or ApplicationMgr.ShutDownCancelled event is called. 
  //
  rpc Get_IsShuttingDown(ApplicationMgr_Get_IsShuttingDownRequest) returns (ApplicationMgr_Get_IsShuttingDownResponse);
  
  
  // Property: IsStarted
  //
  // Returns True when the ApplicationMgr.Start method has been called. Returns False when the Application Manager control has been shutdown.
  //
  // ApplicationMgr_Get_IsStartedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_IsStartedResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when the ApplicationMgr.Start method has been called. Returns False when the Application Manager control has been shutdown. 
  //
  rpc Get_IsStarted(ApplicationMgr_Get_IsStartedRequest) returns (ApplicationMgr_Get_IsStartedResponse);
  
  
  // Property: ApplicationWillExitOnStart
  //
  // Returns True when the application exits on start as a result of using the command-line switch /? or /useExisting. Check this property before you call the ApplicationMgr.Start method. When this property is True, do not launch a splash screen or do any unnecessary time-consuming tasks.
  // 
  //
  // ApplicationMgr_Get_ApplicationWillExitOnStartRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_ApplicationWillExitOnStartResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when the application exits on start as a result of using the command-line switch /? or /useExisting. Check this property before you call the ApplicationMgr.Start method. When this property is True, do not launch a splash screen or do any unnecessary time-consuming tasks.  
  //
  rpc Get_ApplicationWillExitOnStart(ApplicationMgr_Get_ApplicationWillExitOnStartRequest) returns (ApplicationMgr_Get_ApplicationWillExitOnStartResponse);
  
  
  // Property: ExecutionEntryPoints
  //
  // Returns the set of Execution entry points that the station model sequence file defines. The collection includes only entry points that set the Sequence.ShowEntryPointForAllWindows property.
  //
  // This collection can change when the station model sequence file changes.
  //
  // ApplicationMgr_Get_ExecutionEntryPointsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_ExecutionEntryPointsResponse - The response message from the server. It provides the return value.
  //    - returnValue: EntryPointsInstance - Returns the set of Execution entry points that the station model sequence file defines. The collection includes only entry points that set the Sequence.ShowEntryPointForAllWindows property. 
  //
  rpc Get_ExecutionEntryPoints(ApplicationMgr_Get_ExecutionEntryPointsRequest) returns (ApplicationMgr_Get_ExecutionEntryPointsResponse);
  
  
  // Property: ConfigurationEntryPoints
  //
  // Returns the set of Configuration entry points that the station model sequence file defines.
  //
  // This collection can change when the station model sequence file changes.
  //
  // ApplicationMgr_Get_ConfigurationEntryPointsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_ConfigurationEntryPointsResponse - The response message from the server. It provides the return value.
  //    - returnValue: EntryPointsInstance - Returns the set of Configuration entry points that the station model sequence file defines. 
  //
  rpc Get_ConfigurationEntryPoints(ApplicationMgr_Get_ConfigurationEntryPointsRequest) returns (ApplicationMgr_Get_ConfigurationEntryPointsResponse);
  
  
  // Property: LoginRunning
  //
  // Returns True when the Application Manager control is running the LoginLogout Front-End callback sequence to log in a user.
  //
  // ApplicationMgr_Get_LoginRunningRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_LoginRunningResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when the Application Manager control is running the LoginLogout Front-End callback sequence to log in a user. 
  //
  rpc Get_LoginRunning(ApplicationMgr_Get_LoginRunningRequest) returns (ApplicationMgr_Get_LoginRunningResponse);
  
  
  // Property: LogoutRunning
  //
  // Returns True when the Application Manager control is running LoginLogout Front-End callback sequence to log out a user.
  //
  // ApplicationMgr_Get_LogoutRunningRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_LogoutRunningResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when the Application Manager control is running LoginLogout Front-End callback sequence to log out a user. 
  //
  rpc Get_LogoutRunning(ApplicationMgr_Get_LogoutRunningRequest) returns (ApplicationMgr_Get_LogoutRunningResponse);
  
  
  // Property: UndoStack
  //
  // Assign an UndoStack to this property to provide an UndoStack for CommandKind_Edit_Undo and CommandKind_Edit_Redo commands you connect to the Application Manager control.
  //
  // This property is useful for creating undo and redo commands for TestStand files that are not sequence files such the station globals file and the users file.
  //
  // ApplicationMgr_Set_UndoStackRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - val: UndoStackInstance - Assign an UndoStack to this property to provide an UndoStack for CommandKind_Edit_Undo and CommandKind_Edit_Redo commands you connect to the Application Manager control. 
  //
  // ApplicationMgr_Set_UndoStackResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ApplicationMgr_Get_UndoStackRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_UndoStackResponse - The response message from the server. It provides the return value.
  //    - returnValue: UndoStackInstance - Assign an UndoStack to this property to provide an UndoStack for CommandKind_Edit_Undo and CommandKind_Edit_Redo commands you connect to the Application Manager control. 
  //
  rpc Set_UndoStack(ApplicationMgr_Set_UndoStackRequest) returns (ApplicationMgr_Set_UndoStackResponse);
  rpc Get_UndoStack(ApplicationMgr_Get_UndoStackRequest) returns (ApplicationMgr_Get_UndoStackResponse);
  
  
  // Property: IsEditor
  //
  // Specifies whether the TestStand User Interface (UI) Controls allow the user to create and edit sequence files. Set this property to False for a non-editing user interface application. Set this property to True for an application that edits and saves sequence files.
  //
  // When you set this property to True and you do not have an activated license that allows editing, TestStand generates a prompt to activate a license. When you do not have an appropriate license, TestStand generates an error. You can set or clear this property with the /editor or /operatorinterface command-line flags. To avoid overriding a value you specify on the command line, set this property to a default value for the application before the application evaluates the command-line arguments. The application evaluates command-line arguments when you call the ApplicationMgr.Start method. Use the ApplicationMgr.CommandLineCanChangeEditMode property to control whether the application evaluates the /editor or /operatorinterface command-line flags.
  // When you set this property in the designer or set it before you call the ApplicationMgr.Start method, TestStand verifies the value when you call the ApplicationMgr.Start method, which returns an error when this property is True and cannot obtain a license that permits editing. When you set this property after calling the ApplicationMgr.Start method, the Application Manager control might prompt to activate a license.
  //
  // ApplicationMgr_Set_IsEditorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - val: bool - Specifies whether the TestStand User Interface (UI) Controls allow the user to create and edit sequence files. Set this property to False for a non-editing user interface application. Set this property to True for an application that edits and saves sequence files. 
  //
  // ApplicationMgr_Set_IsEditorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ApplicationMgr_Get_IsEditorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_IsEditorResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the TestStand User Interface (UI) Controls allow the user to create and edit sequence files. Set this property to False for a non-editing user interface application. Set this property to True for an application that edits and saves sequence files. 
  //
  rpc Set_IsEditor(ApplicationMgr_Set_IsEditorRequest) returns (ApplicationMgr_Set_IsEditorResponse);
  rpc Get_IsEditor(ApplicationMgr_Get_IsEditorRequest) returns (ApplicationMgr_Get_IsEditorResponse);
  
  
  // Property: EditReadOnlyFiles
  //
  // Specifies whether the TestStand User Interface (UI) Controls allow editing of read-only files.
  //
  // The value of this property persists in the application configuration file.
  //
  // ApplicationMgr_Set_EditReadOnlyFilesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - val: bool - Specifies whether the TestStand User Interface (UI) Controls allow editing of read-only files. 
  //
  // ApplicationMgr_Set_EditReadOnlyFilesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ApplicationMgr_Get_EditReadOnlyFilesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_EditReadOnlyFilesResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the TestStand User Interface (UI) Controls allow editing of read-only files. 
  //
  rpc Set_EditReadOnlyFiles(ApplicationMgr_Set_EditReadOnlyFilesRequest) returns (ApplicationMgr_Set_EditReadOnlyFilesResponse);
  rpc Get_EditReadOnlyFiles(ApplicationMgr_Get_EditReadOnlyFilesRequest) returns (ApplicationMgr_Get_EditReadOnlyFilesResponse);
  
  
  // Property: MakeStepNamesUnique
  //
  // When this property is True, the TestStand User Interface Controls ensure that steps you insert into a sequence have names that are unique within the sequence.
  //
  // The value of this property persists in the application configuration file.
  //
  // ApplicationMgr_Set_MakeStepNamesUniqueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - val: bool - When this property is True, the TestStand User Interface Controls ensure that steps you insert into a sequence have names that are unique within the sequence. 
  //
  // ApplicationMgr_Set_MakeStepNamesUniqueResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ApplicationMgr_Get_MakeStepNamesUniqueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_MakeStepNamesUniqueResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When this property is True, the TestStand User Interface Controls ensure that steps you insert into a sequence have names that are unique within the sequence. 
  //
  rpc Set_MakeStepNamesUnique(ApplicationMgr_Set_MakeStepNamesUniqueRequest) returns (ApplicationMgr_Set_MakeStepNamesUniqueResponse);
  rpc Get_MakeStepNamesUnique(ApplicationMgr_Get_MakeStepNamesUniqueRequest) returns (ApplicationMgr_Get_MakeStepNamesUniqueResponse);
  
  
  // Property: PromptForOverwrite
  //
  // Specifies whether the Application Manager control makes a backup of a file when you save a sequence file over an existing file that has an older or newer format. When this property is PerformActionOption_Yes, the Application Manager control backs up the existing file before saving it. When this property is PerformActionOption_No, the Application Manager control saves over the existing file without backing it up. When this property is PerformActionOption_Prompt, the Application Manager control prompts you to choose whether to back up the existing file.
  //
  // The value of this property persists in the application configuration file.
  //
  // ApplicationMgr_Set_PromptForOverwriteRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - val: PerformActionOptions - Specifies whether the Application Manager control makes a backup of a file when you save a sequence file over an existing file that has an older or newer format. When this property is PerformActionOption_Yes, the Application Manager control backs up the existing file before saving it. When this property is PerformActionOption_No, the Application Manager control saves over the existing file without backing it up. When this property is PerformActionOption_Prompt, the Application Manager control prompts you to choose whether to back up the existing file. 
  //
  // ApplicationMgr_Set_PromptForOverwriteResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ApplicationMgr_Get_PromptForOverwriteRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_PromptForOverwriteResponse - The response message from the server. It provides the return value.
  //    - returnValue: PerformActionOptions - Specifies whether the Application Manager control makes a backup of a file when you save a sequence file over an existing file that has an older or newer format. When this property is PerformActionOption_Yes, the Application Manager control backs up the existing file before saving it. When this property is PerformActionOption_No, the Application Manager control saves over the existing file without backing it up. When this property is PerformActionOption_Prompt, the Application Manager control prompts you to choose whether to back up the existing file. 
  //
  rpc Set_PromptForOverwrite(ApplicationMgr_Set_PromptForOverwriteRequest) returns (ApplicationMgr_Set_PromptForOverwriteResponse);
  rpc Get_PromptForOverwrite(ApplicationMgr_Get_PromptForOverwriteRequest) returns (ApplicationMgr_Get_PromptForOverwriteResponse);
  
  
  // Property: SaveOnClose
  //
  // Specifies whether the Application Manager control saves a modified file when you close the modified file. When this property is PerformActionOption_Yes, the Application Manager control saves the file. When this property is PerformActionOption_No, the Application Manager control discards the file without saving the file. When this property is PerformActionOption_Prompt, the Application Manager control prompts you to choose whether to save the file.
  //
  // The value of this property persists in the application configuration file.
  //
  // ApplicationMgr_Set_SaveOnCloseRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - val: PerformActionOptions - Specifies whether the Application Manager control saves a modified file when you close the modified file. When this property is PerformActionOption_Yes, the Application Manager control saves the file. When this property is PerformActionOption_No, the Application Manager control discards the file without saving the file. When this property is PerformActionOption_Prompt, the Application Manager control prompts you to choose whether to save the file. 
  //
  // ApplicationMgr_Set_SaveOnCloseResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ApplicationMgr_Get_SaveOnCloseRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_SaveOnCloseResponse - The response message from the server. It provides the return value.
  //    - returnValue: PerformActionOptions - Specifies whether the Application Manager control saves a modified file when you close the modified file. When this property is PerformActionOption_Yes, the Application Manager control saves the file. When this property is PerformActionOption_No, the Application Manager control discards the file without saving the file. When this property is PerformActionOption_Prompt, the Application Manager control prompts you to choose whether to save the file. 
  //
  rpc Set_SaveOnClose(ApplicationMgr_Set_SaveOnCloseRequest) returns (ApplicationMgr_Set_SaveOnCloseResponse);
  rpc Get_SaveOnClose(ApplicationMgr_Get_SaveOnCloseRequest) returns (ApplicationMgr_Get_SaveOnCloseResponse);
  
  
  // Property: AutomaticallyReloadModifiedFiles
  //
  // Specifies when the Application Manager control reloads sequence files that you modified on disk.
  //
  // The Application Manager control generates the ApplicationMgr.QueryReloadSequenceFile event when the Application Manager control wants to reload the sequence file.
  //
  // ApplicationMgr_Set_AutomaticallyReloadModifiedFilesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - val: AutomaticallyReloadModifiedFilesOptions - Specifies when the Application Manager control reloads sequence files that you modified on disk. 
  //
  // ApplicationMgr_Set_AutomaticallyReloadModifiedFilesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ApplicationMgr_Get_AutomaticallyReloadModifiedFilesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_AutomaticallyReloadModifiedFilesResponse - The response message from the server. It provides the return value.
  //    - returnValue: AutomaticallyReloadModifiedFilesOptions - Specifies when the Application Manager control reloads sequence files that you modified on disk. 
  //
  rpc Set_AutomaticallyReloadModifiedFiles(ApplicationMgr_Set_AutomaticallyReloadModifiedFilesRequest) returns (ApplicationMgr_Set_AutomaticallyReloadModifiedFilesResponse);
  rpc Get_AutomaticallyReloadModifiedFiles(ApplicationMgr_Get_AutomaticallyReloadModifiedFilesRequest) returns (ApplicationMgr_Get_AutomaticallyReloadModifiedFilesResponse);
  
  
  // Property: CreateEmptySequenceFileOnStart
  //
  // Specifies that the Application Manager control creates a new, empty sequence file at startup when the application is in edit mode, no initially opened sequences files exist, and a user logs in with the privilege to edit sequence files. When users open or create another file before making any changes to the empty automatically created file, the automatically created file closes.
  //
  // If you do not want the Application Manager control to create an empty file for the user, set this property to False in the designer or in the application before you call the ApplicationMgr.Start method.
  //
  // ApplicationMgr_Set_CreateEmptySequenceFileOnStartRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - val: bool - Specifies that the Application Manager control creates a new, empty sequence file at startup when the application is in edit mode, no initially opened sequences files exist, and a user logs in with the privilege to edit sequence files. When users open or create another file before making any changes to the empty automatically created file, the automatically created file closes. 
  //
  // ApplicationMgr_Set_CreateEmptySequenceFileOnStartResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ApplicationMgr_Get_CreateEmptySequenceFileOnStartRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_CreateEmptySequenceFileOnStartResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies that the Application Manager control creates a new, empty sequence file at startup when the application is in edit mode, no initially opened sequences files exist, and a user logs in with the privilege to edit sequence files. When users open or create another file before making any changes to the empty automatically created file, the automatically created file closes. 
  //
  rpc Set_CreateEmptySequenceFileOnStart(ApplicationMgr_Set_CreateEmptySequenceFileOnStartRequest) returns (ApplicationMgr_Set_CreateEmptySequenceFileOnStartResponse);
  rpc Get_CreateEmptySequenceFileOnStart(ApplicationMgr_Get_CreateEmptySequenceFileOnStartRequest) returns (ApplicationMgr_Get_CreateEmptySequenceFileOnStartResponse);
  
  
  // Property: SelectedPropertyObjects
  //
  rpc Get_SelectedPropertyObjects(ApplicationMgr_Get_SelectedPropertyObjectsRequest) returns (ApplicationMgr_Get_SelectedPropertyObjectsResponse);
  
  
  // Property: SelectedPropertyObjectFile
  //
  rpc Set_SelectedPropertyObjectFile(ApplicationMgr_Set_SelectedPropertyObjectFileRequest) returns (ApplicationMgr_Set_SelectedPropertyObjectFileResponse);
  rpc Get_SelectedPropertyObjectFile(ApplicationMgr_Get_SelectedPropertyObjectFileRequest) returns (ApplicationMgr_Get_SelectedPropertyObjectFileResponse);
  
  
  // Property: EditModeShortcutKey
  //
  // Specifies a key users can press to toggle the ApplicationMgr.IsEditor property. To prevent users from toggling the edit mode with a keystroke, set this property to ShortcutKey_VK_NOT_A_KEY.
  //
  // Requests to switch an application to Editor Mode might prompt a user to activate a license when the Application Manager control cannot acquire the appropriate license to edit and save sequence files.
  //
  // ApplicationMgr_Set_EditModeShortcutKeyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - val: ShortcutKeys - Specifies a key users can press to toggle the ApplicationMgr.IsEditor property. To prevent users from toggling the edit mode with a keystroke, set this property to ShortcutKey_VK_NOT_A_KEY. 
  //
  // ApplicationMgr_Set_EditModeShortcutKeyResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ApplicationMgr_Get_EditModeShortcutKeyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_EditModeShortcutKeyResponse - The response message from the server. It provides the return value.
  //    - returnValue: ShortcutKeys - Specifies a key users can press to toggle the ApplicationMgr.IsEditor property. To prevent users from toggling the edit mode with a keystroke, set this property to ShortcutKey_VK_NOT_A_KEY. 
  //
  rpc Set_EditModeShortcutKey(ApplicationMgr_Set_EditModeShortcutKeyRequest) returns (ApplicationMgr_Set_EditModeShortcutKeyResponse);
  rpc Get_EditModeShortcutKey(ApplicationMgr_Get_EditModeShortcutKeyRequest) returns (ApplicationMgr_Get_EditModeShortcutKeyResponse);
  
  
  // Property: EditModeShortcutModifier
  //
  // Specifies a modifier for the key users can press to toggle the ApplicationMgr.IsEditor property. Use any combination of the ShortcutModifiers constants.
  //
  // ApplicationMgr_Set_EditModeShortcutModifierRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - val: int32 - Specifies a modifier for the key users can press to toggle the ApplicationMgr.IsEditor property. Use any combination of the ShortcutModifiers constants. 
  //
  // ApplicationMgr_Set_EditModeShortcutModifierResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ApplicationMgr_Get_EditModeShortcutModifierRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_EditModeShortcutModifierResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies a modifier for the key users can press to toggle the ApplicationMgr.IsEditor property. Use any combination of the ShortcutModifiers constants. 
  //
  rpc Set_EditModeShortcutModifier(ApplicationMgr_Set_EditModeShortcutModifierRequest) returns (ApplicationMgr_Set_EditModeShortcutModifierResponse);
  rpc Get_EditModeShortcutModifier(ApplicationMgr_Get_EditModeShortcutModifierRequest) returns (ApplicationMgr_Get_EditModeShortcutModifierResponse);
  
  
  // Property: CommandLineCanChangeEditMode
  //
  // Set this property to False to prevent users from changing the edit mode of the application by passing /operatorInterface or /editor on the command line.
  //
  // Requests to launch an application in Editor Mode might prompt a user to activate a license when the Application Manager control cannot acquire the appropriate license to edit and save sequence files.
  //
  // ApplicationMgr_Set_CommandLineCanChangeEditModeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - val: bool - Set this property to False to prevent users from changing the edit mode of the application by passing /operatorInterface or /editor on the command line. 
  //
  // ApplicationMgr_Set_CommandLineCanChangeEditModeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ApplicationMgr_Get_CommandLineCanChangeEditModeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_CommandLineCanChangeEditModeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Set this property to False to prevent users from changing the edit mode of the application by passing /operatorInterface or /editor on the command line. 
  //
  rpc Set_CommandLineCanChangeEditMode(ApplicationMgr_Set_CommandLineCanChangeEditModeRequest) returns (ApplicationMgr_Set_CommandLineCanChangeEditModeResponse);
  rpc Get_CommandLineCanChangeEditMode(ApplicationMgr_Get_CommandLineCanChangeEditModeRequest) returns (ApplicationMgr_Get_CommandLineCanChangeEditModeResponse);
  
  
  // Property: UseStepListConfigurations
  //
  // Specifies whether the Application Manager control uses the selected step list configurations specified in the Edit Step List Configurations dialog box that set the non-border properties of connected SequenceView controls.
  // When this property is True, the Application Manager control enables commands that select or configure step list configuration. In addition, the non-border SequenceView properties you specify at edit time on the SequenceView property pages apply only when no applicable step list configurations exist in the application configuration file.
  // When this property is False, the Application Manager control hides commands that select or configure step list configurations, and the Application Manager control uses the non-border SequenceView properties you specify at edit time on the SequenceView property pages.
  //
  // ApplicationMgr_Set_UseStepListConfigurationsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - val: bool - Specifies whether the Application Manager control uses the selected step list configurations specified in the Edit Step List Configurations dialog box that set the non-border properties of connected SequenceView controls. When this property is True, the Application Manager control enables commands that select or configure step list configuration. In addition, the non-border SequenceView properties you specify at edit time on the SequenceView property pages apply only when no applicable step list configurations exist in the application configuration file. When this property is False, the Application Manager control hides commands that select or configure step list configurations, and the Application Manager control uses the non-border SequenceView properties you specify at edit time on the SequenceView property pages. 
  //
  // ApplicationMgr_Set_UseStepListConfigurationsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ApplicationMgr_Get_UseStepListConfigurationsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_UseStepListConfigurationsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the Application Manager control uses the selected step list configurations specified in the Edit Step List Configurations dialog box that set the non-border properties of connected SequenceView controls. When this property is True, the Application Manager control enables commands that select or configure step list configuration. In addition, the non-border SequenceView properties you specify at edit time on the SequenceView property pages apply only when no applicable step list configurations exist in the application configuration file. When this property is False, the Application Manager control hides commands that select or configure step list configurations, and the Application Manager control uses the non-border SequenceView properties you specify at edit time on the SequenceView property pages. 
  //
  rpc Set_UseStepListConfigurations(ApplicationMgr_Set_UseStepListConfigurationsRequest) returns (ApplicationMgr_Set_UseStepListConfigurationsResponse);
  rpc Get_UseStepListConfigurations(ApplicationMgr_Get_UseStepListConfigurationsRequest) returns (ApplicationMgr_Get_UseStepListConfigurationsResponse);
  
  
  // Property: ExitCode
  //
  // Specifies the exit code of a user interface.
  //
  // The Application Manager control sets the value of this property based on the status of executions and uses the following exit codes to indicate the specified status:@table(2,8,True,Status!Exit Code!Run-time Error!the error code of the run-time error!Normal Exit!0!Command-line Error!1!Sequence Failed!2!Sequence Terminated!3!Sequence Aborted!4!Killed Threads!5)
  // If a run-time error with a non-negative error code occurs, the exit code is -17009 (TS_Err_ConvertedErrorCode).
  // As a user interface developer, set the exit code of the application to this property. The development environment you use determines how you return an exit code in an application. LabVIEW does not support returning exit codes.
  // If you use a command line to run the user interface, you must use the start /wait command to obtain the exit code from a user interface, as follows:
  // start /wait TestExec -Quit -Run MainSequence SequenceFile1.seq
  // Use the –OutputToStdIO command-line flag to send additional status information for completed executions to standard output.
  //
  // ApplicationMgr_Set_ExitCodeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //    - val: int32 - Specifies the exit code of a user interface. 
  //
  // ApplicationMgr_Set_ExitCodeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ApplicationMgr_Get_ExitCodeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //
  // ApplicationMgr_Get_ExitCodeResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the exit code of a user interface. 
  //
  rpc Set_ExitCode(ApplicationMgr_Set_ExitCodeRequest) returns (ApplicationMgr_Set_ExitCodeResponse);
  rpc Get_ExitCode(ApplicationMgr_Get_ExitCodeRequest) returns (ApplicationMgr_Get_ExitCodeResponse);
  
  

  // Event: ExitApplication
  //
  // Occurs when the application has completed the shutdown process.
  //
  // The application responds to this event by exiting. Refer to the ApplicationMgr.Shutdown method for more information about exiting.
  //
  // The event has a registration method and a reply method.
  // GetEvents_ExitApplication - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_ExitApplication - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_ExitApplicationRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_ExitApplicationResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // ApplicationMgr_ReplyToEvent_ExitApplicationRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ApplicationMgr_ReplyToEvent_ExitApplicationResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_ExitApplication(ApplicationMgr_GetEvents_ExitApplicationRequest) returns (stream ApplicationMgr_GetEvents_ExitApplicationResponse);
  rpc ReplyToEvent_ExitApplication(ApplicationMgr_ReplyToEvent_ExitApplicationRequest) returns (ApplicationMgr_ReplyToEvent_ExitApplicationResponse); 
  
  
  // Event: UIMessageEvent
  //
  // Forwards TestStand Engine events before the manager controls process them.
  //
  // Use this event to handle messages before the manager controls handle them.
  // The Application Manager control automatically calls the UIMessage.Acknowledge method when this event completes. Therefore, you do not have to directly call the UIMessage.Acknowledge method from within this event.
  //
  // The event has a registration method and a reply method.
  // GetEvents_UIMessageEvent - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_UIMessageEvent - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_UIMessageEventRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_UIMessageEventResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - uiMsg: UIMessageInstance - Specifies a TestStand User Interface message.
  //  - cancel: bool
  //
  // ApplicationMgr_ReplyToEvent_UIMessageEventRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //  - cancel: bool
  //
  // ApplicationMgr_ReplyToEvent_UIMessageEventResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_UIMessageEvent(ApplicationMgr_GetEvents_UIMessageEventRequest) returns (stream ApplicationMgr_GetEvents_UIMessageEventResponse);
  rpc ReplyToEvent_UIMessageEvent(ApplicationMgr_ReplyToEvent_UIMessageEventRequest) returns (ApplicationMgr_ReplyToEvent_UIMessageEventResponse); 
  
  
  // Event: SequenceFileOpened
  //
  // Occurs when a sequence file is opened.
  //
  // The event has a registration method and a reply method.
  // GetEvents_SequenceFileOpened - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_SequenceFileOpened - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_SequenceFileOpenedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_SequenceFileOpenedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - file: SequenceFileInstance - Specifies the sequence file that opened.
  //  - alreadyLoaded: bool - If this parameter is True, the sequence file was already opened.
  //
  // ApplicationMgr_ReplyToEvent_SequenceFileOpenedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ApplicationMgr_ReplyToEvent_SequenceFileOpenedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_SequenceFileOpened(ApplicationMgr_GetEvents_SequenceFileOpenedRequest) returns (stream ApplicationMgr_GetEvents_SequenceFileOpenedResponse);
  rpc ReplyToEvent_SequenceFileOpened(ApplicationMgr_ReplyToEvent_SequenceFileOpenedRequest) returns (ApplicationMgr_ReplyToEvent_SequenceFileOpenedResponse); 
  
  
  // Event: SequenceFileClosed
  //
  // Note: This event is obsolete. Use the ApplicationMgr.SequenceFileClosing event instead.
  //
  // Occurs when the application has closed a sequence file. You can use this event, but unsaved sequence files always pass in an empty string for the pathName parameter so no method exists for distinguishing the files.
  //
  // The event has a registration method and a reply method.
  // GetEvents_SequenceFileClosed - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_SequenceFileClosed - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_SequenceFileClosedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_SequenceFileClosedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - pathName: string - Specifies the path of the closed sequence file.
  //
  // ApplicationMgr_ReplyToEvent_SequenceFileClosedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ApplicationMgr_ReplyToEvent_SequenceFileClosedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_SequenceFileClosed(ApplicationMgr_GetEvents_SequenceFileClosedRequest) returns (stream ApplicationMgr_GetEvents_SequenceFileClosedResponse);
  rpc ReplyToEvent_SequenceFileClosed(ApplicationMgr_ReplyToEvent_SequenceFileClosedRequest) returns (ApplicationMgr_ReplyToEvent_SequenceFileClosedResponse); 
  
  
  // Event: UserChanged
  //
  // Occurs when the current user logged in changes.
  //
  // Use this event to update the parts of the user interface that depend on user permissions when the current user logged in changes.
  //
  // The event has a registration method and a reply method.
  // GetEvents_UserChanged - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_UserChanged - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_UserChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_UserChangedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - user: UserInstance - Specifies the current user. When this parameter is NULL, no user is logged in.
  //
  // ApplicationMgr_ReplyToEvent_UserChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ApplicationMgr_ReplyToEvent_UserChangedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_UserChanged(ApplicationMgr_GetEvents_UserChangedRequest) returns (stream ApplicationMgr_GetEvents_UserChangedResponse);
  rpc ReplyToEvent_UserChanged(ApplicationMgr_ReplyToEvent_UserChangedRequest) returns (ApplicationMgr_ReplyToEvent_UserChangedResponse); 
  
  
  // Event: Wait
  //
  // Occurs when the application is performing lengthy tasks.
  //
  // Use this event to display or remove a wait cursor or other indicator to show when the application is busy.
  //
  // The event has a registration method and a reply method.
  // GetEvents_Wait - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_Wait - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_WaitRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_WaitResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - showWait: bool - When this parameter is True, the application has started a long operation. When this parameter is False, the application has finished the long operation.
  //
  // ApplicationMgr_ReplyToEvent_WaitRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ApplicationMgr_ReplyToEvent_WaitResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_Wait(ApplicationMgr_GetEvents_WaitRequest) returns (stream ApplicationMgr_GetEvents_WaitResponse);
  rpc ReplyToEvent_Wait(ApplicationMgr_ReplyToEvent_WaitRequest) returns (ApplicationMgr_ReplyToEvent_WaitResponse); 
  
  
  // Event: ReportError
  //
  // Occurs when an error is reported. This event notifies the application of errors that occur while the user operates connected controls. This event is also called when the ApplicationMgr.RaiseError method is called.
  //
  // Use this event to display an error message to the user of the user interface.
  //
  // The event has a registration method and a reply method.
  // GetEvents_ReportError - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_ReportError - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_ReportErrorRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_ReportErrorResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - errorCode: int32 - Specifies the error code for the error that caused the event.
  //  - errorMessage: string - Specifies the descriptive error string.
  //
  // ApplicationMgr_ReplyToEvent_ReportErrorRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ApplicationMgr_ReplyToEvent_ReportErrorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_ReportError(ApplicationMgr_GetEvents_ReportErrorRequest) returns (stream ApplicationMgr_GetEvents_ReportErrorResponse);
  rpc ReplyToEvent_ReportError(ApplicationMgr_ReplyToEvent_ReportErrorRequest) returns (ApplicationMgr_ReplyToEvent_ReportErrorResponse); 
  
  
  // Event: PreCommandExecute
  //
  // Occurs when a caller invokes the Command.Execute method. When you return False through the cancel parameter, the Command.Execute method does not perform an action and the ApplicationMgr.PostCommandExecute event does not occur.
  //
  // The event has a registration method and a reply method.
  // GetEvents_PreCommandExecute - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_PreCommandExecute - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_PreCommandExecuteRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_PreCommandExecuteResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - Command: CommandInstance
  //  - cancel: bool
  //
  // ApplicationMgr_ReplyToEvent_PreCommandExecuteRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //  - cancel: bool
  //
  // ApplicationMgr_ReplyToEvent_PreCommandExecuteResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_PreCommandExecute(ApplicationMgr_GetEvents_PreCommandExecuteRequest) returns (stream ApplicationMgr_GetEvents_PreCommandExecuteResponse);
  rpc ReplyToEvent_PreCommandExecute(ApplicationMgr_ReplyToEvent_PreCommandExecuteRequest) returns (ApplicationMgr_ReplyToEvent_PreCommandExecuteResponse); 
  
  
  // Event: PostCommandExecute
  //
  // Occurs when a caller invokes the Command.Execute method. The event occurs after the Command object performs an action.
  //
  // The event has a registration method and a reply method.
  // GetEvents_PostCommandExecute - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_PostCommandExecute - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_PostCommandExecuteRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_PostCommandExecuteResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - Command: CommandInstance
  //
  // ApplicationMgr_ReplyToEvent_PostCommandExecuteRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ApplicationMgr_ReplyToEvent_PostCommandExecuteResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_PostCommandExecute(ApplicationMgr_GetEvents_PostCommandExecuteRequest) returns (stream ApplicationMgr_GetEvents_PostCommandExecuteResponse);
  rpc ReplyToEvent_PostCommandExecute(ApplicationMgr_ReplyToEvent_PostCommandExecuteRequest) returns (ApplicationMgr_ReplyToEvent_PostCommandExecuteResponse); 
  
  
  // Event: QueryCloseExecution
  //
  // Occurs when the Application Manager control is attempting to close an execution.
  //
  // Calls to the ApplicationMgr.Shutdown, ApplicationMgr.CloseExecution, and ApplicationMgr.CloseAllExecutions methods result in closing executions and calling this event.
  // You can use this event to inform the user that an execution is closing and to allow the user to confirm that this is the desired action.
  //
  // The event has a registration method and a reply method.
  // GetEvents_QueryCloseExecution - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_QueryCloseExecution - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_QueryCloseExecutionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_QueryCloseExecutionResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - exec: ExecutionInstance - Specifies the execution about to be closed.
  //  - RunState: ExecutionRunStates
  //  - opt: QueryCloseExecutionOptions
  //
  // ApplicationMgr_ReplyToEvent_QueryCloseExecutionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //  - opt: QueryCloseExecutionOptions
  //
  // ApplicationMgr_ReplyToEvent_QueryCloseExecutionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_QueryCloseExecution(ApplicationMgr_GetEvents_QueryCloseExecutionRequest) returns (stream ApplicationMgr_GetEvents_QueryCloseExecutionResponse);
  rpc ReplyToEvent_QueryCloseExecution(ApplicationMgr_ReplyToEvent_QueryCloseExecutionRequest) returns (ApplicationMgr_ReplyToEvent_QueryCloseExecutionResponse); 
  
  
  // Event: ExecutionClosed
  //
  // Occurs when the Application Manager control closes an execution.
  //
  // The event has a registration method and a reply method.
  // GetEvents_ExecutionClosed - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_ExecutionClosed - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_ExecutionClosedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_ExecutionClosedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - exec: ExecutionInstance - Specifies the execution that has been closed.
  //
  // ApplicationMgr_ReplyToEvent_ExecutionClosedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ApplicationMgr_ReplyToEvent_ExecutionClosedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_ExecutionClosed(ApplicationMgr_GetEvents_ExecutionClosedRequest) returns (stream ApplicationMgr_GetEvents_ExecutionClosedResponse);
  rpc ReplyToEvent_ExecutionClosed(ApplicationMgr_ReplyToEvent_ExecutionClosedRequest) returns (ApplicationMgr_ReplyToEvent_ExecutionClosedResponse); 
  
  
  // Event: QueryCloseSequenceFile
  //
  // Occurs before a sequence file is closed.
  //
  // Use this event to prompt the user for confirmation on closing the sequence file or to stop the sequence file from closing.
  //
  // The event has a registration method and a reply method.
  // GetEvents_QueryCloseSequenceFile - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_QueryCloseSequenceFile - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_QueryCloseSequenceFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_QueryCloseSequenceFileResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - file: SequenceFileInstance - Specifies the sequence file that is closing.
  //  - cancel: bool
  //
  // ApplicationMgr_ReplyToEvent_QueryCloseSequenceFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //  - cancel: bool
  //
  // ApplicationMgr_ReplyToEvent_QueryCloseSequenceFileResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_QueryCloseSequenceFile(ApplicationMgr_GetEvents_QueryCloseSequenceFileRequest) returns (stream ApplicationMgr_GetEvents_QueryCloseSequenceFileResponse);
  rpc ReplyToEvent_QueryCloseSequenceFile(ApplicationMgr_ReplyToEvent_QueryCloseSequenceFileRequest) returns (ApplicationMgr_ReplyToEvent_QueryCloseSequenceFileResponse); 
  
  
  // Event: QueryShutdown
  //
  // Occurs before the Application Manager control initiates a shutdown.
  //
  // The event has a registration method and a reply method.
  // GetEvents_QueryShutdown - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_QueryShutdown - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_QueryShutdownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_QueryShutdownResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - opt: QueryShutdownOptions
  //
  // ApplicationMgr_ReplyToEvent_QueryShutdownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //  - opt: QueryShutdownOptions
  //
  // ApplicationMgr_ReplyToEvent_QueryShutdownResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_QueryShutdown(ApplicationMgr_GetEvents_QueryShutdownRequest) returns (stream ApplicationMgr_GetEvents_QueryShutdownResponse);
  rpc ReplyToEvent_QueryShutdown(ApplicationMgr_ReplyToEvent_QueryShutdownRequest) returns (ApplicationMgr_ReplyToEvent_QueryShutdownResponse); 
  
  
  // Event: DisplaySequenceFile
  //
  // Occurs when a sequence file is opened directly or in response to a UIMsg_OpenWindows event TestStand sends.
  //
  // Use this event to display the sequence file in a Sequence File window by setting the SequenceFileViewMgr.SequenceFile property on the SequenceFileView Manager control for the window.
  //
  // The event has a registration method and a reply method.
  // GetEvents_DisplaySequenceFile - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_DisplaySequenceFile - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_DisplaySequenceFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_DisplaySequenceFileResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - file: SequenceFileInstance - Specifies the sequence file to display.
  //  - reason: SequenceFileDisplayReasons - Specifies the reason why the event was generated. Refer to the SequenceFileDisplayReasons enumeration for more information about reasons for sequence file actions.
  //
  // ApplicationMgr_ReplyToEvent_DisplaySequenceFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ApplicationMgr_ReplyToEvent_DisplaySequenceFileResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_DisplaySequenceFile(ApplicationMgr_GetEvents_DisplaySequenceFileRequest) returns (stream ApplicationMgr_GetEvents_DisplaySequenceFileResponse);
  rpc ReplyToEvent_DisplaySequenceFile(ApplicationMgr_ReplyToEvent_DisplaySequenceFileRequest) returns (ApplicationMgr_ReplyToEvent_DisplaySequenceFileResponse); 
  
  
  // Event: DisplayExecution
  //
  // Occurs when a visible execution starts, when an execution breaks, or in response to a UIMsg_OpenWindow or a UIMsg_GotoLocation user interface message. Use the reason parameter to find out why this event was called.
  //
  // Use this event to display the execution in a window by setting the ExecutionViewMgr.Execution property on the ExecutionView Manager control for the window.
  //
  // The event has a registration method and a reply method.
  // GetEvents_DisplayExecution - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_DisplayExecution - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_DisplayExecutionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_DisplayExecutionResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - exec: ExecutionInstance - Specifies the execution to display.
  //  - reason: ExecutionDisplayReasons - Specifies the reason why the event was generated. Refer to the ExecutionDisplayReasons enumeration for more information about reasons for execution actions.
  //
  // ApplicationMgr_ReplyToEvent_DisplayExecutionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ApplicationMgr_ReplyToEvent_DisplayExecutionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_DisplayExecution(ApplicationMgr_GetEvents_DisplayExecutionRequest) returns (stream ApplicationMgr_GetEvents_DisplayExecutionResponse);
  rpc ReplyToEvent_DisplayExecution(ApplicationMgr_ReplyToEvent_DisplayExecutionRequest) returns (ApplicationMgr_ReplyToEvent_DisplayExecutionResponse); 
  
  
  // Event: DisplayReport
  //
  // Occurs when the UIMsg_DisplayReport user interface message is received.
  //
  // Use this event to show the window that displays the report.
  //
  // The event has a registration method and a reply method.
  // GetEvents_DisplayReport - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_DisplayReport - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_DisplayReportRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_DisplayReportResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - exec: ExecutionInstance - Specifies the execution that contains the report to display.
  //
  // ApplicationMgr_ReplyToEvent_DisplayReportRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ApplicationMgr_ReplyToEvent_DisplayReportResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_DisplayReport(ApplicationMgr_GetEvents_DisplayReportRequest) returns (stream ApplicationMgr_GetEvents_DisplayReportResponse);
  rpc ReplyToEvent_DisplayReport(ApplicationMgr_ReplyToEvent_DisplayReportRequest) returns (ApplicationMgr_ReplyToEvent_DisplayReportResponse); 
  
  
  // Event: AfterUIMessageEvent
  //
  // Forwards TestStand Engine events after the manager controls process them.
  //
  // Use this event to handle messages after the manager controls handle them.
  // The Application Manager control automatically calls the UIMessage.Acknowledge method when this event completes. Therefore, you do not have to directly call the UIMessage.Acknowledge method from within this event.
  //
  // The event has a registration method and a reply method.
  // GetEvents_AfterUIMessageEvent - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_AfterUIMessageEvent - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_AfterUIMessageEventRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_AfterUIMessageEventResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - uiMsg: UIMessageInstance - A TestStand user interface message.
  //
  // ApplicationMgr_ReplyToEvent_AfterUIMessageEventRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ApplicationMgr_ReplyToEvent_AfterUIMessageEventResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_AfterUIMessageEvent(ApplicationMgr_GetEvents_AfterUIMessageEventRequest) returns (stream ApplicationMgr_GetEvents_AfterUIMessageEventResponse);
  rpc ReplyToEvent_AfterUIMessageEvent(ApplicationMgr_ReplyToEvent_AfterUIMessageEventRequest) returns (ApplicationMgr_ReplyToEvent_AfterUIMessageEventResponse); 
  
  
  // Event: ShutDownCompleted
  //
  // Occurs when the TestStand Engine sends the UIMsg_ShutDownComplete message. Use the ApplicationMgr.Shutdown method to initiate the shutdown process.
  //
  // The event has a registration method and a reply method.
  // GetEvents_ShutDownCompleted - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_ShutDownCompleted - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_ShutDownCompletedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_ShutDownCompletedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // ApplicationMgr_ReplyToEvent_ShutDownCompletedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ApplicationMgr_ReplyToEvent_ShutDownCompletedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_ShutDownCompleted(ApplicationMgr_GetEvents_ShutDownCompletedRequest) returns (stream ApplicationMgr_GetEvents_ShutDownCompletedResponse);
  rpc ReplyToEvent_ShutDownCompleted(ApplicationMgr_ReplyToEvent_ShutDownCompletedRequest) returns (ApplicationMgr_ReplyToEvent_ShutDownCompletedResponse); 
  
  
  // Event: ShutDownCancelled
  //
  // Occurs when the Engine.ShutDown method is cancelled.
  //
  // The event has a registration method and a reply method.
  // GetEvents_ShutDownCancelled - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_ShutDownCancelled - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_ShutDownCancelledRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_ShutDownCancelledResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // ApplicationMgr_ReplyToEvent_ShutDownCancelledRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ApplicationMgr_ReplyToEvent_ShutDownCancelledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_ShutDownCancelled(ApplicationMgr_GetEvents_ShutDownCancelledRequest) returns (stream ApplicationMgr_GetEvents_ShutDownCancelledResponse);
  rpc ReplyToEvent_ShutDownCancelled(ApplicationMgr_ReplyToEvent_ShutDownCancelledRequest) returns (ApplicationMgr_ReplyToEvent_ShutDownCancelledResponse); 
  
  
  // Event: StartExecution
  //
  // Occurs when an execution starts.
  //
  // The event has a registration method and a reply method.
  // GetEvents_StartExecution - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_StartExecution - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_StartExecutionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_StartExecutionResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - exec: ExecutionInstance - Specifies the newly started execution.
  //  - thrd: ThreadInstance - Specifies the thread of the execution.
  //  - initiallyHidden: bool - Specifies whether the execution is initially hidden.
  //
  // ApplicationMgr_ReplyToEvent_StartExecutionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ApplicationMgr_ReplyToEvent_StartExecutionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_StartExecution(ApplicationMgr_GetEvents_StartExecutionRequest) returns (stream ApplicationMgr_GetEvents_StartExecutionResponse);
  rpc ReplyToEvent_StartExecution(ApplicationMgr_ReplyToEvent_StartExecutionRequest) returns (ApplicationMgr_ReplyToEvent_StartExecutionResponse); 
  
  
  // Event: EndExecution
  //
  // Occurs when an execution ends and the TestStand Engine sends a UIMsg_EndExecution message.
  //
  // The event has a registration method and a reply method.
  // GetEvents_EndExecution - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_EndExecution - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_EndExecutionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_EndExecutionResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - exec: ExecutionInstance - Specifies the execution that has ended.
  //
  // ApplicationMgr_ReplyToEvent_EndExecutionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ApplicationMgr_ReplyToEvent_EndExecutionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_EndExecution(ApplicationMgr_GetEvents_EndExecutionRequest) returns (stream ApplicationMgr_GetEvents_EndExecutionResponse);
  rpc ReplyToEvent_EndExecution(ApplicationMgr_ReplyToEvent_EndExecutionRequest) returns (ApplicationMgr_ReplyToEvent_EndExecutionResponse); 
  
  
  // Event: BreakOnRunTimeError
  //
  // Occurs when TestStand sends the UIMsg_BreakOnRunTimeErrorMessage message.
  //
  // Use this event to launch a custom run-time error dialog box or to specify whether the Application Manager control launches a Run-Time Error dialog box or suspends the execution. You can change the Execution.RTEOptionForThisExecution property for the execution in this event before the Application Manager control handles it.
  //
  // The event has a registration method and a reply method.
  // GetEvents_BreakOnRunTimeError - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_BreakOnRunTimeError - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_BreakOnRunTimeErrorRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_BreakOnRunTimeErrorResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - exec: ExecutionInstance - Specifies the execution to which the event applies.
  //  - initiatingThread: ThreadInstance - Specifies the thread that sent the run-time error notification.
  //  - showDialog: bool
  //  - BreakExecution: bool
  //
  // ApplicationMgr_ReplyToEvent_BreakOnRunTimeErrorRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //  - showDialog: bool
  //  - BreakExecution: bool
  //
  // ApplicationMgr_ReplyToEvent_BreakOnRunTimeErrorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_BreakOnRunTimeError(ApplicationMgr_GetEvents_BreakOnRunTimeErrorRequest) returns (stream ApplicationMgr_GetEvents_BreakOnRunTimeErrorResponse);
  rpc ReplyToEvent_BreakOnRunTimeError(ApplicationMgr_ReplyToEvent_BreakOnRunTimeErrorRequest) returns (ApplicationMgr_ReplyToEvent_BreakOnRunTimeErrorResponse); 
  
  
  // Event: UserMessage
  //
  // Occurs when an application component posts a user-defined UIMessage. A user-defined user interface message has an event code value that is equal to or greater than UIMsg_UserMessageBase (value: 10000).
  //
  // The Application Manager control automatically acknowledges the user message when this event completes. Therefore, you do not have to directly call the UIMessage.Acknowledge method from within this event.
  // Messages the Engine.RegisterUIMessage method defines do not generate an ApplicationMgr.UserMessage event, but TestStand does send the message to ApplicationMgr.UIMessageEvent.
  //
  // The event has a registration method and a reply method.
  // GetEvents_UserMessage - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_UserMessage - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_UserMessageRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_UserMessageResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - uiMsg: UIMessageInstance - Specifies the user-defined UIMessage object.
  //
  // ApplicationMgr_ReplyToEvent_UserMessageRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ApplicationMgr_ReplyToEvent_UserMessageResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_UserMessage(ApplicationMgr_GetEvents_UserMessageRequest) returns (stream ApplicationMgr_GetEvents_UserMessageResponse);
  rpc ReplyToEvent_UserMessage(ApplicationMgr_ReplyToEvent_UserMessageRequest) returns (ApplicationMgr_ReplyToEvent_UserMessageResponse); 
  
  
  // Event: RefreshWindows
  //
  // Occurs when a UIMsg_RefreshWindows UIMessage posts. Handle this event to refresh custom controls as needed.
  //
  // A step or callback sequence typically posts the UIMsg_RefreshWindows UIMessage to force a refresh, such as updating the status of a step in the Execution view when TestStand does not normally update it.
  //
  // The event has a registration method and a reply method.
  // GetEvents_RefreshWindows - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_RefreshWindows - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_RefreshWindowsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_RefreshWindowsResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - activeXData: ObjectInstance - Specifies the ActiveXData of the UIMessage object. Specify NULL to refresh data for all files and executions. Specify a PropertyObjectFile to refresh the data of a specific file. Specify a SequenceContext to refresh the SequenceContext of an execution. You can also specify an Object Reference Array that contains multiple values.
  //
  // ApplicationMgr_ReplyToEvent_RefreshWindowsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ApplicationMgr_ReplyToEvent_RefreshWindowsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_RefreshWindows(ApplicationMgr_GetEvents_RefreshWindowsRequest) returns (stream ApplicationMgr_GetEvents_RefreshWindowsResponse);
  rpc ReplyToEvent_RefreshWindows(ApplicationMgr_ReplyToEvent_RefreshWindowsRequest) returns (ApplicationMgr_ReplyToEvent_RefreshWindowsResponse); 
  
  
  // Event: Break
  //
  // Occurs when any execution breaks.
  //
  // An ApplicationMgr.DisplayExecution event follows this event.
  //
  // The event has a registration method and a reply method.
  // GetEvents_Break - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_Break - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_BreakRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_BreakResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - exec: ExecutionInstance - Specifies a paused execution.
  //
  // ApplicationMgr_ReplyToEvent_BreakRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ApplicationMgr_ReplyToEvent_BreakResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_Break(ApplicationMgr_GetEvents_BreakRequest) returns (stream ApplicationMgr_GetEvents_BreakResponse);
  rpc ReplyToEvent_Break(ApplicationMgr_ReplyToEvent_BreakRequest) returns (ApplicationMgr_ReplyToEvent_BreakResponse); 
  
  
  // Event: QueryReloadSequenceFile
  //
  // Occurs when the Application Manager control wants to reload a modified sequence file because you called the ApplicationMgr.ReloadModifiedSequenceFiles method or because the Application Manager control detected a modified sequence file.
  //
  // Use this event to customize how the application prompts the user to reload the modified sequence file or to reload or ignore modified sequence files without prompting the user.
  //
  // The event has a registration method and a reply method.
  // GetEvents_QueryReloadSequenceFile - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_QueryReloadSequenceFile - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_QueryReloadSequenceFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_QueryReloadSequenceFileResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - file: SequenceFileInstance - Specifies the sequence file to reload.
  //  - opt: QueryReloadSequenceFileOptions
  //
  // ApplicationMgr_ReplyToEvent_QueryReloadSequenceFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //  - opt: QueryReloadSequenceFileOptions
  //
  // ApplicationMgr_ReplyToEvent_QueryReloadSequenceFileResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_QueryReloadSequenceFile(ApplicationMgr_GetEvents_QueryReloadSequenceFileRequest) returns (stream ApplicationMgr_GetEvents_QueryReloadSequenceFileResponse);
  rpc ReplyToEvent_QueryReloadSequenceFile(ApplicationMgr_ReplyToEvent_QueryReloadSequenceFileRequest) returns (ApplicationMgr_ReplyToEvent_QueryReloadSequenceFileResponse); 
  
  
  // Event: ProcessUserCommands
  //
  // Note: This event is obsolete. Use the ApplicationMgr.ProcessUserCommandLineArguments event instead.
  //
  // Use this event to process custom command-line arguments. This event occurs when the ApplicationMgr.Start method is called and when another instance of the application is executed with the /useExisting command-line switch. This event occurs before the Application Manager control processes any command-line arguments.
  //
  // The event has a registration method and a reply method.
  // GetEvents_ProcessUserCommands - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_ProcessUserCommands - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_ProcessUserCommandsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_ProcessUserCommandsResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - cmds: StringsInstance - Specifies the user command-line arguments. This collection is created by splitting up the command line used to start the application using white space as a delimiter. When the ApplicationMgr.ProcessCommandLine property is True, the first argument the Application Manager control does not recognize marks the start of the user arguments. When the ApplicationMgr.ProcessCommandLine property is False, all arguments are user arguments.
  //
  // ApplicationMgr_ReplyToEvent_ProcessUserCommandsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ApplicationMgr_ReplyToEvent_ProcessUserCommandsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_ProcessUserCommands(ApplicationMgr_GetEvents_ProcessUserCommandsRequest) returns (stream ApplicationMgr_GetEvents_ProcessUserCommandsResponse);
  rpc ReplyToEvent_ProcessUserCommands(ApplicationMgr_ReplyToEvent_ProcessUserCommandsRequest) returns (ApplicationMgr_ReplyToEvent_ProcessUserCommandsResponse); 
  
  
  // Event: EditModeChanged
  //
  // Occurs when the ApplicationMgr.IsEditor property changes when directly set or when processing command-line arguments.
  //
  // The event has a registration method and a reply method.
  // GetEvents_EditModeChanged - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_EditModeChanged - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_EditModeChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_EditModeChangedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // ApplicationMgr_ReplyToEvent_EditModeChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ApplicationMgr_ReplyToEvent_EditModeChangedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_EditModeChanged(ApplicationMgr_GetEvents_EditModeChangedRequest) returns (stream ApplicationMgr_GetEvents_EditModeChangedResponse);
  rpc ReplyToEvent_EditModeChanged(ApplicationMgr_ReplyToEvent_EditModeChangedRequest) returns (ApplicationMgr_ReplyToEvent_EditModeChangedResponse); 
  
  
  // Event: ProcessUserCommandLineArguments
  //
  // Use this event to validate and process command-line arguments you define.
  //
  // The Application Manager control generates this event while validating and processing command-line arguments. When the Application Manager control validates the command line, the Application Manager control generates this event for command-line arguments that it does not recognize. For these events, you must validate the unrecognized command-line arguments. In addition, when the Application Manager control processes the command line, the Application Manager control generates this event again for command-line arguments that it does not recognize. For these events, you must perform the action that the arguments require. Use the processCommand parameter of this event to determine whether you must perform the action that the arguments requires.
  //
  // The event has a registration method and a reply method.
  // GetEvents_ProcessUserCommandLineArguments - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_ProcessUserCommandLineArguments - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_ProcessUserCommandLineArgumentsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_ProcessUserCommandLineArgumentsResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - processCommand: bool - The Application Manager control passes False to this parameter when the control is only validating and not actually processing the command line. When this parameter is False, handle this event the same as when this parameter is True, without performing the action the command-line specifies.
  //  - arguments: StringsInstance - Specifies the command-line arguments passed to the application.
  //  - currentArgument: int32
  //  - errorProcessing: ProcessCommandLineErrors
  //  - errorMessage: string
  //
  // ApplicationMgr_ReplyToEvent_ProcessUserCommandLineArgumentsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //  - currentArgument: int32
  //  - errorProcessing: ProcessCommandLineErrors
  //  - errorMessage: string
  //
  // ApplicationMgr_ReplyToEvent_ProcessUserCommandLineArgumentsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_ProcessUserCommandLineArguments(ApplicationMgr_GetEvents_ProcessUserCommandLineArgumentsRequest) returns (stream ApplicationMgr_GetEvents_ProcessUserCommandLineArgumentsResponse);
  rpc ReplyToEvent_ProcessUserCommandLineArguments(ApplicationMgr_ReplyToEvent_ProcessUserCommandLineArgumentsRequest) returns (ApplicationMgr_ReplyToEvent_ProcessUserCommandLineArgumentsResponse); 
  
  
  // Event: _ApplicationMgrEvents_Event_CanEdit
  //
  rpc GetEvents__ApplicationMgrEvents_Event_CanEdit(ApplicationMgr_GetEvents__ApplicationMgrEvents_Event_CanEditRequest) returns (stream ApplicationMgr_GetEvents__ApplicationMgrEvents_Event_CanEditResponse);
  rpc ReplyToEvent__ApplicationMgrEvents_Event_CanEdit(ApplicationMgr_ReplyToEvent__ApplicationMgrEvents_Event_CanEditRequest) returns (ApplicationMgr_ReplyToEvent__ApplicationMgrEvents_Event_CanEditResponse); 
  
  
  // Event: _ApplicationMgrEvents_Event_BeginEdit
  //
  rpc GetEvents__ApplicationMgrEvents_Event_BeginEdit(ApplicationMgr_GetEvents__ApplicationMgrEvents_Event_BeginEditRequest) returns (stream ApplicationMgr_GetEvents__ApplicationMgrEvents_Event_BeginEditResponse);
  rpc ReplyToEvent__ApplicationMgrEvents_Event_BeginEdit(ApplicationMgr_ReplyToEvent__ApplicationMgrEvents_Event_BeginEditRequest) returns (ApplicationMgr_ReplyToEvent__ApplicationMgrEvents_Event_BeginEditResponse); 
  
  
  // Event: _ApplicationMgrEvents_Event_EndEdit
  //
  rpc GetEvents__ApplicationMgrEvents_Event_EndEdit(ApplicationMgr_GetEvents__ApplicationMgrEvents_Event_EndEditRequest) returns (stream ApplicationMgr_GetEvents__ApplicationMgrEvents_Event_EndEditResponse);
  rpc ReplyToEvent__ApplicationMgrEvents_Event_EndEdit(ApplicationMgr_ReplyToEvent__ApplicationMgrEvents_Event_EndEditRequest) returns (ApplicationMgr_ReplyToEvent__ApplicationMgrEvents_Event_EndEditResponse); 
  
  
  // Event: DropFile
  //
  // Occurs when you drop a file onto a TestStand User Interface (UI) Control that supports drag and drop. When you drop multiple files at once, the Application Manager control generates this event once for each file dropped.
  //
  // This event is useful for supporting drag and drop of files that are not sequence files and must be handled differently. You can customize TestStand to natively support opening custom file formats and translating them into sequence files.
  // When you drop a file onto a SequenceView control and the file is a valid TestStand code module file, the control inserts a step with its code module configured to call the file. Before the SequenceView control inserts the step, the Application Manager control generates the DropFile event for the dropped file. If your application handles the DropFile event, the SequenceView control does not insert the step.
  //
  // The event has a registration method and a reply method.
  // GetEvents_DropFile - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_DropFile - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_DropFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_DropFileResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - file: string - Specifies the absolute pathname of the file you dropped.
  //  - handled: bool
  //
  // ApplicationMgr_ReplyToEvent_DropFileRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //  - handled: bool
  //
  // ApplicationMgr_ReplyToEvent_DropFileResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_DropFile(ApplicationMgr_GetEvents_DropFileRequest) returns (stream ApplicationMgr_GetEvents_DropFileResponse);
  rpc ReplyToEvent_DropFile(ApplicationMgr_ReplyToEvent_DropFileRequest) returns (ApplicationMgr_ReplyToEvent_DropFileResponse); 
  
  
  // Event: SequenceFileClosing
  //
  // Use this event when you need to perform cleanup or otherwise require a notification when the Application Manager control closes a sequence file. This event is generated immediately before the Application Manager control closes the file. The event handler for this event cannot cancel closing the file. Use the ApplicationMgr.QueryCloseSequenceFile event when you want an opportunity to cancel the closing of sequence files.
  //
  // The event has a registration method and a reply method.
  // GetEvents_SequenceFileClosing - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_SequenceFileClosing - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_SequenceFileClosingRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_SequenceFileClosingResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - file: SequenceFileInstance - Specifies a reference to the sequence file about to be closed.
  //
  // ApplicationMgr_ReplyToEvent_SequenceFileClosingRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ApplicationMgr_ReplyToEvent_SequenceFileClosingResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_SequenceFileClosing(ApplicationMgr_GetEvents_SequenceFileClosingRequest) returns (stream ApplicationMgr_GetEvents_SequenceFileClosingResponse);
  rpc ReplyToEvent_SequenceFileClosing(ApplicationMgr_ReplyToEvent_SequenceFileClosingRequest) returns (ApplicationMgr_ReplyToEvent_SequenceFileClosingResponse); 
  
  
  // Event: DisplayCustomRunTimeErrorDialog
  //
  // Occurs before TestStand launches the default run-time error dialog box. You can use this event to launch a custom run-time error dialog box.
  //
  // The event has a registration method and a reply method.
  // GetEvents_DisplayCustomRunTimeErrorDialog - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_DisplayCustomRunTimeErrorDialog - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ApplicationMgr_GetEvents_DisplayCustomRunTimeErrorDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ApplicationMgrInstance - The id of the ApplicationMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ApplicationMgr_GetEvents_DisplayCustomRunTimeErrorDialogResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - ctxt: SequenceContextInstance - Specifies the SequenceContext in which the run-time error occurred.
  //  - breakExec: bool
  //  - doNotShowAgainForExecution: bool
  //  - doNotShowAgainForBatch: bool
  //  - rteOption: int32
  //  - showDefaultDialog: bool
  //
  // ApplicationMgr_ReplyToEvent_DisplayCustomRunTimeErrorDialogRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //  - breakExec: bool
  //  - doNotShowAgainForExecution: bool
  //  - doNotShowAgainForBatch: bool
  //  - rteOption: int32
  //  - showDefaultDialog: bool
  //
  // ApplicationMgr_ReplyToEvent_DisplayCustomRunTimeErrorDialogResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_DisplayCustomRunTimeErrorDialog(ApplicationMgr_GetEvents_DisplayCustomRunTimeErrorDialogRequest) returns (stream ApplicationMgr_GetEvents_DisplayCustomRunTimeErrorDialogResponse);
  rpc ReplyToEvent_DisplayCustomRunTimeErrorDialog(ApplicationMgr_ReplyToEvent_DisplayCustomRunTimeErrorDialogRequest) returns (ApplicationMgr_ReplyToEvent_DisplayCustomRunTimeErrorDialogResponse); 
  
  
}
message ApplicationMgrInstance {
  // Specifies the handle of the ApplicationMgr instance in the server.
  string id = 1;
}
message ApplicationMgr_ApplicationMgrRequest {
}

message ApplicationMgr_ApplicationMgrResponse {
  // The return type of the ApplicationMgr object.
  ApplicationMgrInstance returnValue = 1;
}

message ApplicationMgr_ConnectAdapterListRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies the visible control or element of a visible control to display the list of adapters. Pass a ComboBox, ListBarPage, or ListBox.
  ObjectInstance uiObj = 2;
}

message ApplicationMgr_ConnectAdapterListResponse {
  // The return type of the AdapterListConnection object.
  AdapterListConnectionInstance returnValue = 1;
}

message ApplicationMgr_RefreshRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies any combination of RefreshOptions.
  RefreshOptions opts = 2;
}

message ApplicationMgr_RefreshResponse {
}

message ApplicationMgr_RefreshFileRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies the PropertyObjectFile reference for a TestStand sequence file.
  PropertyObjectFileInstance file = 2;
  // Do not pass a value or pass RefreshOption_All (0xFFFFFFFF) to this reserved parameter.
  int32 opts = 3;
}

message ApplicationMgr_RefreshFileResponse {
}

message ApplicationMgr_ReloadConfigFileRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_ReloadConfigFileResponse {
}

message ApplicationMgr_AddCommandLineArgumentsHelpRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // The Application Manager control adds this string to the usage section in the command-line help dialog box.
  string usage = 2;
  // Specifies a string for the Application Manager control to add to the section of the command-line help dialog box that explains parameters to command-line arguments.
  string parameterHelp = 3;
  // Specifies a string for the Application Manager control to add to the end of the command-line help dialog box.
  string notes = 4;
}

message ApplicationMgr_AddCommandLineArgumentsHelpResponse {
}

message ApplicationMgr_CanEditRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies the file you are editing.
  PropertyObjectFileInstance editedFile = 2;
  // Specifies the kind of edit you are making.
  EditKinds editKind = 3;
}

message ApplicationMgr_CanEditResponse {
  // Returns a Boolean value that indicates whether the application allows or denies permission to perform the edit.
  bool returnValue = 1;
}

message ApplicationMgr_BeginEditRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies the file you are editing.
  PropertyObjectFileInstance editedFile = 2;
  // Specifies the kind of edit you are making.
  EditKinds editKind = 3;
  // Specifies the objects you are modifying.
  repeated PropertyObjectInstance objectsToEdit = 4;
}

message ApplicationMgr_BeginEditResponse {
  // Returns True when the application cancels the edit operation. When the application cancels the edit operation, do not modify the objectsToEdit parameter.
  bool returnValue = 1;
}

message ApplicationMgr_EndEditRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies the file you are editing.
  PropertyObjectFileInstance editedFile = 2;
  // Specifies the kind of edit. Pass the same value you pass to the ApplicationMgr.BeginEdit method.
  EditKinds editKind = 3;
  // Specifies the edited objects. Pass the same objects you pass to the ApplicationMgr.BeginEdit method.
  repeated PropertyObjectInstance editedObjects = 4;
  // Specifies whether the edit was cancelled. Pass the value you receive from the ApplicationMgr.BeginEdit method.
  bool cancelled = 5;
}

message ApplicationMgr_EndEditResponse {
}

message ApplicationMgr_ReloadFileRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies a reference to the file you want to reload. The reference changes to the reloaded version of the file when TestStand reloads the file.
  PropertyObjectFileInstance file = 2;
  // Specifies one or more ReloadFileOptions constants. Use the bitwise-OR operator to specify multiple options. Pass 0 to reload the file unconditionally.
  ReloadFileOptions options = 3;
}

message ApplicationMgr_ReloadFileResponse {
  // Returns True when the file was reloaded. This method returns False when the TestStand Engine cannot unload the file, when an ApplicationMgr.QueryReloadSequenceFile event cancels the operation, or when TestStand prompts the user and the user cancels the operation.
  bool returnValue = 1;
  // Specifies a reference to the file you want to reload. The reference changes to the reloaded version of the file when TestStand reloads the file.
  PropertyObjectFileInstance file = 2;
}

message ApplicationMgr_GetRunStateRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies the execution on which to operate.
  ExecutionInstance exec = 2;
}

message ApplicationMgr_GetRunStateResponse {
  // The return type of the ExecutionRunStates object.
  ExecutionRunStates returnValue = 1;
}

message ApplicationMgr_GetTerminationStateRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies the execution on which to operate.
  ExecutionInstance exec = 2;
}

message ApplicationMgr_GetTerminationStateResponse {
  // The return type of the ExecutionTerminationStates object.
  ExecutionTerminationStates returnValue = 1;
}

message ApplicationMgr_ReloadModifiedSequenceFilesExRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_ReloadModifiedSequenceFilesExResponse {
  // Returns True if this method reloads a sequence file.
  bool returnValue = 1;
}

message ApplicationMgr_StartRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_StartResponse {
}

message ApplicationMgr_ShutdownRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_ShutdownResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message ApplicationMgr_LoginRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_LoginResponse {
}

message ApplicationMgr_LogoutRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_LogoutResponse {
}

message ApplicationMgr_CloseAllSequenceFilesRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_CloseAllSequenceFilesResponse {
}

message ApplicationMgr_OpenSequenceFileRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies the path of the sequence file to load. When you do not pass an absolute path, this method searches for the file using the TestStand search directory paths.
  string sequenceFilePath = 2;
}

message ApplicationMgr_OpenSequenceFileResponse {
  // Returns the opened sequence file, when successful. When a type conflict occurs when loading the file and the conflict prevents TestStand from opening the file, this method returns NULL. When an error occurs while opening the file, this method throws an exception.
  SequenceFileInstance returnValue = 1;
}

message ApplicationMgr_CloseSequenceFileRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies the sequence file to close.
  SequenceFileInstance file = 2;
}

message ApplicationMgr_CloseSequenceFileResponse {
  // Returns True if the sequence file was closed.
  bool returnValue = 1;
}

message ApplicationMgr_OpenSequenceFileDialogRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_OpenSequenceFileDialogResponse {
  // Returns the opened sequence file if you open a file. This method returns NULL if you cancel the Open File dialog box.
  SequenceFileInstance returnValue = 1;
}

message ApplicationMgr_NewCommandsRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_NewCommandsResponse {
  // A reference to a Commands object. Release this reference when you are finished with it.
  CommandsInstance returnValue = 1;
}

message ApplicationMgr_RaiseErrorRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies the integer error code.
  int32 errorCode = 2;
  // Specifies the descriptive error string.
  string errorMessage = 3;
}

message ApplicationMgr_RaiseErrorResponse {
}

message ApplicationMgr_CloseExecutionRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies the execution to close.
  ExecutionInstance exec = 2;
}

message ApplicationMgr_CloseExecutionResponse {
  // Returns True if the execution was closed.
  bool returnValue = 1;
}

message ApplicationMgr_SetAutoCloseExecutionRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies the execution you want to close automatically.
  ExecutionInstance exec = 2;
  // Pass True for the execution to close when complete. When this parameter is False, the execution does not close automatically.
  bool val = 3;
}

message ApplicationMgr_SetAutoCloseExecutionResponse {
}

message ApplicationMgr_GetAutoCloseExecutionRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies the execution to obtain the setting from.
  ExecutionInstance exec = 2;
}

message ApplicationMgr_GetAutoCloseExecutionResponse {
  // When this method returns True, the execution closes automatically when complete. When this method returns False, the execution does not close automatically.
  bool returnValue = 1;
}

message ApplicationMgr_SetVisibleRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies the execution to make visible or hidden.
  ExecutionInstance exec = 2;
  // Pass True to make the execution visible. Pass False to make the execution hidden.
  bool val = 3;
}

message ApplicationMgr_SetVisibleResponse {
}

message ApplicationMgr_GetVisibleRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies the execution to determine whether it is visible.
  ExecutionInstance exec = 2;
}

message ApplicationMgr_GetVisibleResponse {
  // The return type of the Boolean object.
  bool returnValue = 1;
}

message ApplicationMgr_GetEngineRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_GetEngineResponse {
  // The return type of the Engine object.
  EngineInstance returnValue = 1;
}

message ApplicationMgr_GetCommandRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies the type of Command object to create.
  CommandKinds cmdKind = 2;
  // Specifies which command in the set to return. Use this on sets of commands.
  int32 commandIndex = 3;
}

message ApplicationMgr_GetCommandResponse {
  // Command object that represents the command.
  CommandInstance returnValue = 1;
}

message ApplicationMgr_GetCaptionTextRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies the type of caption source to obtain the text from.
  CaptionSources captionSource = 2;
  // Specifies whether to return a long or short version of the caption text for certain caption sources. Refer to the CaptionSources enumeration for more information about determining when this option affects the text and for more information about the difference between the long and short versions of the text.
  bool longName = 3;
  // Specifies a format expression to evaluate when generating the caption text. For the CaptionSource_MacroExpression caption source, specify a format expression that evaluates to a string value that contains macros that specify other caption sources. For all other caption sources, specify an expression that evaluates to a string value that contains the characters %1.  The method replaces the %1 characters with the text from the caption source. Pass an empty string to use the default format string for the caption source.
  string formatExpression = 4;
}

message ApplicationMgr_GetCaptionTextResponse {
  // The current text for the caption source you specify.
  string returnValue = 1;
}

message ApplicationMgr_GetImageNameRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies the type of image source from which to obtain an image name.
  ImageSources imageSource = 2;
}

message ApplicationMgr_GetImageNameResponse {
  // The current image name for the image source you specify.
  string returnValue = 1;
}

message ApplicationMgr_ReloadModifiedSequenceFilesRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_ReloadModifiedSequenceFilesResponse {
}

message ApplicationMgr_CloseAllExecutionsRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_CloseAllExecutionsResponse {
}

message ApplicationMgr_ConnectCommandRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies the button or checkbox control to which the command connects.
  ObjectInstance uiObj = 2;
  // Specifies the type of command to connect.
  // Note: Not all commands found in the CommandKinds enumeration work with the Application Manager control. Refer to the  CommandKinds enumeration for a list of compatible commands.
  CommandKinds cmdKind = 3;
  // Specifies an index into command sets. For example, when you connect to CommandKind_EntryPointSet, this parameter specifies the index of the entry point to use.
  int32 Index = 4;
  // Specifies a bitwise-OR combination of the CommandConnectionOptions constants.
  CommandConnectionOptions opts = 5;
}

message ApplicationMgr_ConnectCommandResponse {
  // A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected with this type of connection, the existing connection is returned.
  CommandConnectionInstance returnValue = 1;
}

message ApplicationMgr_ConnectCaptionRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies the visible control, or element of a visible control to which the caption source connects. Pass a Label, ExpressionEdit,  or StatusBarPane.
  ObjectInstance uiObj = 2;
  // Specifies the type of caption source to connect.
  CaptionSources captionSource = 3;
  // For certain caption sources, this parameter specifies whether the connection displays the long or short version of the caption text. Refer to the CaptionSources enumeration for more information about the difference between the long and short versions of the text and to determine when this option affects a caption source.
  bool longName = 4;
}

message ApplicationMgr_ConnectCaptionResponse {
  // A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected with this type of connection, the existing connection is returned.
  CaptionConnectionInstance returnValue = 1;
}

message ApplicationMgr_GetSequenceFileViewMgrRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies the Sequence file with the SequenceFileView Manager control you want returned.
  SequenceFileInstance file = 2;
}

message ApplicationMgr_GetSequenceFileViewMgrResponse {
  // IDispatch pointer to a SequenceFileView Manager control. When a sequence file is not selected in a SequenceFileView Manager control, the return value is NULL.
  ObjectInstance returnValue = 1;
}

message ApplicationMgr_GetExecutionViewMgrRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies the execution with the ExecutionView Manager control you want returned.
  ExecutionInstance exec = 2;
}

message ApplicationMgr_GetExecutionViewMgrResponse {
  // The ExecutionView Manager control that is displaying the execution that is passed in. This method returns NULL when it cannot find an ExecutionView Manager control that displays the specified execution.
  ObjectInstance returnValue = 1;
}

message ApplicationMgr_LocalizeAllControlsRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies the name of the section in the language files to use.
  string sectionName = 2;
}

message ApplicationMgr_LocalizeAllControlsResponse {
}

message ApplicationMgr_RefreshAllViewMgrsRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_RefreshAllViewMgrsResponse {
}

message ApplicationMgr_OpenSequenceFilesDialogRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_OpenSequenceFilesDialogResponse {
  // A collection of the opened sequence files.
  SequenceFilesInstance returnValue = 1;
}

message ApplicationMgr_GetModelFileRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies the sequence file with the associated process model sequence file you want. When you pass NULL, this method returns the station model file.
  SequenceFileInstance clientFile = 2;
  // Pass True to force the Application Manager control to load the model file if the Application Manager control has not already done so. When you pass False and the Application Manager control has not already loaded the model file, this method returns NULL.
  bool loadIfNotAlreadyLoaded = 3;
}

message ApplicationMgr_GetModelFileResponse {
  // The return type of the SequenceFile object.
  SequenceFileInstance returnValue = 1;
}

message ApplicationMgr_Set_LoginOnStartRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // When this property is True and the StationOptions.LoginOnStart property is True, the LoginLogout Front-End callback sequence runs when you call the ApplicationMgr.Start method.
  bool val = 2;
}

message ApplicationMgr_Set_LoginOnStartResponse {
}

message ApplicationMgr_Get_LoginOnStartRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_LoginOnStartResponse {
  // When this property is True and the StationOptions.LoginOnStart property is True, the LoginLogout Front-End callback sequence runs when you call the ApplicationMgr.Start method.
  bool returnValue = 1;
}

message ApplicationMgr_Set_BreakOnStepFailureRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // When this property is True, TestStand suspends an execution for any step that fails. When this property is False, TestStand suspends execution based on whether the ExecTypeMask_BreakOnStepFailure option is enabled in the Execution.TypeMask property for that execution.
  bool val = 2;
}

message ApplicationMgr_Set_BreakOnStepFailureResponse {
}

message ApplicationMgr_Get_BreakOnStepFailureRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_BreakOnStepFailureResponse {
  // When this property is True, TestStand suspends an execution for any step that fails. When this property is False, TestStand suspends execution based on whether the ExecTypeMask_BreakOnStepFailure option is enabled in the Execution.TypeMask property for that execution.
  bool returnValue = 1;
}

message ApplicationMgr_Get_ConnectionsRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_ConnectionsResponse {
  // Returns the ApplicationMgrConnections object, which contains the collection of the connections made to the Application Manager control.
  ApplicationMgrConnectionsInstance returnValue = 1;
}

message ApplicationMgr_Set_BreakOnFirstStepRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // When this property is True, all new executions break on the first step.
  bool val = 2;
}

message ApplicationMgr_Set_BreakOnFirstStepResponse {
}

message ApplicationMgr_Get_BreakOnFirstStepRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_BreakOnFirstStepResponse {
  // When this property is True, all new executions break on the first step.
  bool returnValue = 1;
}

message ApplicationMgr_Set_BreakOnSequenceFailureRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // When this property is True, TestStand suspends an execution on sequence failure. When this property is False, TestStand suspends execution based on whether the ExecTypeMask_BreakOnSequenceFailure  option is enabled in the Execution.TypeMask property for the execution.
  bool val = 2;
}

message ApplicationMgr_Set_BreakOnSequenceFailureResponse {
}

message ApplicationMgr_Get_BreakOnSequenceFailureRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_BreakOnSequenceFailureResponse {
  // When this property is True, TestStand suspends an execution on sequence failure. When this property is False, TestStand suspends execution based on whether the ExecTypeMask_BreakOnSequenceFailure  option is enabled in the Execution.TypeMask property for the execution.
  bool returnValue = 1;
}

message ApplicationMgr_Get_CommandLineArgumentsRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_CommandLineArgumentsResponse {
  // Returns the collection of command-line arguments to the application. The following are switches on the command line:    * /run <sequence> <sequencefile>—Runs the sequence in the sequence file.    * /runEntryPoint <entryPointName> <SequenceFile>—Runs the entry point on the sequence file.    * /quit—Exits the application once all executions complete.    * /setCurrentDir—Sets the current directory to the first directory in the directory history list in the File dialog box. The current directory is the directory the File dialog box initially displays when you open a file. Use this option to set the directory the File dialog box displays to the directory the File dialog box displayed the last time you ran the application. The application sets the current directory after processing the other command-line options.    * /?—Launches a help dialog box, which contains a list of valid command-line arguments, and then immediately closes.    * /useExisting—Prevents a second instance of the application from running and forwards all command-line arguments to the application that is already running.    * /goto <location>—Instructs the application to display the item the <location> property object path specifies, such as TestExec.exe C:\example.seq /goto "Seq[\"MainSequence\"].Main[\"Power On\"]"TestExec.exe C:\example.seq /goto "Seq[\"MainSequence\"].Main[\"ID#:JifH4ODTf0y1z7bJne0G7D\"]"TestExec.exe C:\example.seq /goto "Seq[1].Main[4].TS.LoadOpt"    * /editor—Enables the application to create and edit sequence files. You must have activated a license that supports creating and editing sequence files.    * /operatorInterface—Prevents the application from creating and editing sequence files.Note: You can use / or - to specify a switch. Quotation marks are required for arguments that contain a space, such as "Test UUTs" and "C:\My Documents\Test Sequence.seq".
  StringsInstance returnValue = 1;
}

message ApplicationMgr_Set_ProcessCommandLineRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // When this property is True, the Application Manager control processes the following switches on the command line:    * /editor—Enables the application to create and edit sequence files. You must have activated a license that supports creating and editing sequence files.    * /goto <location>—Instructs the application to display the item the <location> property object path specifies, such as TestExec.exe C:\example.seq /goto "Seq[\"MainSequence\"].Main[\"Power On\"]"TestExec.exe C:\example.seq /goto "Seq[\"MainSequence\"].Main[\"ID#:JifH4ODTf0y1z7bJne0G7D\"]"TestExec.exe C:\example.seq /goto "Seq[1].Main[4].TS.LoadOpt"    * /operatorinterface—Prevents the application from creating and editing sequence files.Note: You can use / or - to specify a switch. Quotation marks are required for arguments that contain a space, such as "Test UUTs" and "C:\My Documents\Test Sequence.seq".    * /outputToStdIO—Writes the status of completed executions to standard output. When you run a user interface from the command line, the console window displays the text written to standard output.    * /quit—Exits the application once all executions complete.    * /run <sequence> <sequencefile>—Runs the sequence in the sequence file.    * /runEntryPoint <entryPointName> <SequenceFile>—Runs the entry point on the sequence file.    * /setCurrentDir—Sets the current directory to the first directory in the directory history list in the File dialog box. The current directory is the directory the File dialog box initially displays when you open a file. Use this option to set the directory the File dialog box displays to the directory the File dialog box displayed the last time you ran the application. The application sets the current directory after processing the other command-line options.    * /useExisting—Prevents a second instance of the application from running and forwards all command-line arguments to the application that is already running.    * /?—Launches a help dialog box, which contains a list of valid command-line arguments, and then immediately closes.
  // In addition to the switches, you can provide on the command line sequence filenames to load into the application.
  bool val = 2;
}

message ApplicationMgr_Set_ProcessCommandLineResponse {
}

message ApplicationMgr_Get_ProcessCommandLineRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_ProcessCommandLineResponse {
  // When this property is True, the Application Manager control processes the following switches on the command line:    * /editor—Enables the application to create and edit sequence files. You must have activated a license that supports creating and editing sequence files.    * /goto <location>—Instructs the application to display the item the <location> property object path specifies, such as TestExec.exe C:\example.seq /goto "Seq[\"MainSequence\"].Main[\"Power On\"]"TestExec.exe C:\example.seq /goto "Seq[\"MainSequence\"].Main[\"ID#:JifH4ODTf0y1z7bJne0G7D\"]"TestExec.exe C:\example.seq /goto "Seq[1].Main[4].TS.LoadOpt"    * /operatorinterface—Prevents the application from creating and editing sequence files.Note: You can use / or - to specify a switch. Quotation marks are required for arguments that contain a space, such as "Test UUTs" and "C:\My Documents\Test Sequence.seq".    * /outputToStdIO—Writes the status of completed executions to standard output. When you run a user interface from the command line, the console window displays the text written to standard output.    * /quit—Exits the application once all executions complete.    * /run <sequence> <sequencefile>—Runs the sequence in the sequence file.    * /runEntryPoint <entryPointName> <SequenceFile>—Runs the entry point on the sequence file.    * /setCurrentDir—Sets the current directory to the first directory in the directory history list in the File dialog box. The current directory is the directory the File dialog box initially displays when you open a file. Use this option to set the directory the File dialog box displays to the directory the File dialog box displayed the last time you ran the application. The application sets the current directory after processing the other command-line options.    * /useExisting—Prevents a second instance of the application from running and forwards all command-line arguments to the application that is already running.    * /?—Launches a help dialog box, which contains a list of valid command-line arguments, and then immediately closes.
  // In addition to the switches, you can provide on the command line sequence filenames to load into the application.
  bool returnValue = 1;
}

message ApplicationMgr_Get_SequenceFilesRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_SequenceFilesResponse {
  // Returns the collection of sequence files the application opens.
  SequenceFilesInstance returnValue = 1;
}

message ApplicationMgr_Get_ExecutionsRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_ExecutionsResponse {
  // Returns the collection of executions the application creates.
  ExecutionsInstance returnValue = 1;
}

message ApplicationMgr_Get_LoginLogoutRunningRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_LoginLogoutRunningResponse {
  // Returns True when the Application Manager control is running a LoginLogout Front-End callback sequence for a user to log in or log out.
  bool returnValue = 1;
}

message ApplicationMgr_Get_ExecutingRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_ExecutingResponse {
  // Returns True when an execution is running.
  bool returnValue = 1;
}

message ApplicationMgr_Get_ConfigFileRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_ConfigFileResponse {
  // Returns the PropertyObjectFile object that represents the configuration information that persists between sessions of the application.
  PropertyObjectFileInstance returnValue = 1;
}

message ApplicationMgr_Set_ConfigFilePathRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies the path of the configuration file.
  string val = 2;
}

message ApplicationMgr_Set_ConfigFilePathResponse {
}

message ApplicationMgr_Get_ConfigFilePathRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_ConfigFilePathResponse {
  // Specifies the path of the configuration file.
  string returnValue = 1;
}

message ApplicationMgr_Get_MRUFilesRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_MRUFilesResponse {
  // Returns a collection of the most recently used (MRU) sequence filenames in the application.
  MRUFilesInstance returnValue = 1;
}

message ApplicationMgr_Set_ReloadSequenceFilesOnStartRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies which files to reload when the application starts.
  ReloadFiles val = 2;
}

message ApplicationMgr_Set_ReloadSequenceFilesOnStartResponse {
}

message ApplicationMgr_Get_ReloadSequenceFilesOnStartRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_ReloadSequenceFilesOnStartResponse {
  // Specifies which files to reload when the application starts.
  ReloadFiles returnValue = 1;
}

message ApplicationMgr_Set_UserDataRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Stores user-specific data.
  ObjectInstance val = 2;
}

message ApplicationMgr_Set_UserDataResponse {
}

message ApplicationMgr_Get_UserDataRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_UserDataResponse {
  // Stores user-specific data.
  ObjectInstance returnValue = 1;
}

message ApplicationMgr_Get_CurrentUIMessageRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_CurrentUIMessageResponse {
  // Accesses the current message being processed.
  UIMessageInstance returnValue = 1;
}

message ApplicationMgr_Set_LogoutClosesSeqFilesAndExecsRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // When this property is True, the ApplicationMgr.Logout method closes all sequence files and executions before running the LoginLogout Front-End callback. When this property is False, the ApplicationMgr.Logout method does not close any open sequence files or executions.
  bool val = 2;
}

message ApplicationMgr_Set_LogoutClosesSeqFilesAndExecsResponse {
}

message ApplicationMgr_Get_LogoutClosesSeqFilesAndExecsRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_LogoutClosesSeqFilesAndExecsResponse {
  // When this property is True, the ApplicationMgr.Logout method closes all sequence files and executions before running the LoginLogout Front-End callback. When this property is False, the ApplicationMgr.Logout method does not close any open sequence files or executions.
  bool returnValue = 1;
}

message ApplicationMgr_Set_ReloadModifiedFilesIntervalRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies the interval, in seconds, at which the Application Manager control calls the ApplicationMgr.ReloadModifiedSequenceFilesEx method. When the value is 0, the Application Manager control does not reload any modified sequence files.
  int32 val = 2;
}

message ApplicationMgr_Set_ReloadModifiedFilesIntervalResponse {
}

message ApplicationMgr_Get_ReloadModifiedFilesIntervalRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_ReloadModifiedFilesIntervalResponse {
  // Specifies the interval, in seconds, at which the Application Manager control calls the ApplicationMgr.ReloadModifiedSequenceFilesEx method. When the value is 0, the Application Manager control does not reload any modified sequence files.
  int32 returnValue = 1;
}

message ApplicationMgr_Get_IsShuttingDownRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_IsShuttingDownResponse {
  // Returns True when the Application Manager control is shutting down. The Application Manager control shuts down between the time when the ApplicationMgr.Shutdown method is called until the ApplicationMgr.ExitApplication or ApplicationMgr.ShutDownCancelled event is called.
  bool returnValue = 1;
}

message ApplicationMgr_Get_IsStartedRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_IsStartedResponse {
  // Returns True when the ApplicationMgr.Start method has been called. Returns False when the Application Manager control has been shutdown.
  bool returnValue = 1;
}

message ApplicationMgr_Get_ApplicationWillExitOnStartRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_ApplicationWillExitOnStartResponse {
  // Returns True when the application exits on start as a result of using the command-line switch /? or /useExisting. Check this property before you call the ApplicationMgr.Start method. When this property is True, do not launch a splash screen or do any unnecessary time-consuming tasks.
  // 
  bool returnValue = 1;
}

message ApplicationMgr_Get_ExecutionEntryPointsRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_ExecutionEntryPointsResponse {
  // Returns the set of Execution entry points that the station model sequence file defines. The collection includes only entry points that set the Sequence.ShowEntryPointForAllWindows property.
  EntryPointsInstance returnValue = 1;
}

message ApplicationMgr_Get_ConfigurationEntryPointsRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_ConfigurationEntryPointsResponse {
  // Returns the set of Configuration entry points that the station model sequence file defines.
  EntryPointsInstance returnValue = 1;
}

message ApplicationMgr_Get_LoginRunningRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_LoginRunningResponse {
  // Returns True when the Application Manager control is running the LoginLogout Front-End callback sequence to log in a user.
  bool returnValue = 1;
}

message ApplicationMgr_Get_LogoutRunningRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_LogoutRunningResponse {
  // Returns True when the Application Manager control is running LoginLogout Front-End callback sequence to log out a user.
  bool returnValue = 1;
}

message ApplicationMgr_Set_UndoStackRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Assign an UndoStack to this property to provide an UndoStack for CommandKind_Edit_Undo and CommandKind_Edit_Redo commands you connect to the Application Manager control.
  UndoStackInstance val = 2;
}

message ApplicationMgr_Set_UndoStackResponse {
}

message ApplicationMgr_Get_UndoStackRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_UndoStackResponse {
  // Assign an UndoStack to this property to provide an UndoStack for CommandKind_Edit_Undo and CommandKind_Edit_Redo commands you connect to the Application Manager control.
  UndoStackInstance returnValue = 1;
}

message ApplicationMgr_Set_IsEditorRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies whether the TestStand User Interface (UI) Controls allow the user to create and edit sequence files. Set this property to False for a non-editing user interface application. Set this property to True for an application that edits and saves sequence files.
  bool val = 2;
}

message ApplicationMgr_Set_IsEditorResponse {
}

message ApplicationMgr_Get_IsEditorRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_IsEditorResponse {
  // Specifies whether the TestStand User Interface (UI) Controls allow the user to create and edit sequence files. Set this property to False for a non-editing user interface application. Set this property to True for an application that edits and saves sequence files.
  bool returnValue = 1;
}

message ApplicationMgr_Set_EditReadOnlyFilesRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies whether the TestStand User Interface (UI) Controls allow editing of read-only files.
  bool val = 2;
}

message ApplicationMgr_Set_EditReadOnlyFilesResponse {
}

message ApplicationMgr_Get_EditReadOnlyFilesRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_EditReadOnlyFilesResponse {
  // Specifies whether the TestStand User Interface (UI) Controls allow editing of read-only files.
  bool returnValue = 1;
}

message ApplicationMgr_Set_MakeStepNamesUniqueRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // When this property is True, the TestStand User Interface Controls ensure that steps you insert into a sequence have names that are unique within the sequence.
  bool val = 2;
}

message ApplicationMgr_Set_MakeStepNamesUniqueResponse {
}

message ApplicationMgr_Get_MakeStepNamesUniqueRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_MakeStepNamesUniqueResponse {
  // When this property is True, the TestStand User Interface Controls ensure that steps you insert into a sequence have names that are unique within the sequence.
  bool returnValue = 1;
}

message ApplicationMgr_Set_PromptForOverwriteRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies whether the Application Manager control makes a backup of a file when you save a sequence file over an existing file that has an older or newer format. When this property is PerformActionOption_Yes, the Application Manager control backs up the existing file before saving it. When this property is PerformActionOption_No, the Application Manager control saves over the existing file without backing it up. When this property is PerformActionOption_Prompt, the Application Manager control prompts you to choose whether to back up the existing file.
  PerformActionOptions val = 2;
}

message ApplicationMgr_Set_PromptForOverwriteResponse {
}

message ApplicationMgr_Get_PromptForOverwriteRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_PromptForOverwriteResponse {
  // Specifies whether the Application Manager control makes a backup of a file when you save a sequence file over an existing file that has an older or newer format. When this property is PerformActionOption_Yes, the Application Manager control backs up the existing file before saving it. When this property is PerformActionOption_No, the Application Manager control saves over the existing file without backing it up. When this property is PerformActionOption_Prompt, the Application Manager control prompts you to choose whether to back up the existing file.
  PerformActionOptions returnValue = 1;
}

message ApplicationMgr_Set_SaveOnCloseRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies whether the Application Manager control saves a modified file when you close the modified file. When this property is PerformActionOption_Yes, the Application Manager control saves the file. When this property is PerformActionOption_No, the Application Manager control discards the file without saving the file. When this property is PerformActionOption_Prompt, the Application Manager control prompts you to choose whether to save the file.
  PerformActionOptions val = 2;
}

message ApplicationMgr_Set_SaveOnCloseResponse {
}

message ApplicationMgr_Get_SaveOnCloseRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_SaveOnCloseResponse {
  // Specifies whether the Application Manager control saves a modified file when you close the modified file. When this property is PerformActionOption_Yes, the Application Manager control saves the file. When this property is PerformActionOption_No, the Application Manager control discards the file without saving the file. When this property is PerformActionOption_Prompt, the Application Manager control prompts you to choose whether to save the file.
  PerformActionOptions returnValue = 1;
}

message ApplicationMgr_Set_AutomaticallyReloadModifiedFilesRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies when the Application Manager control reloads sequence files that you modified on disk.
  AutomaticallyReloadModifiedFilesOptions val = 2;
}

message ApplicationMgr_Set_AutomaticallyReloadModifiedFilesResponse {
}

message ApplicationMgr_Get_AutomaticallyReloadModifiedFilesRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_AutomaticallyReloadModifiedFilesResponse {
  // Specifies when the Application Manager control reloads sequence files that you modified on disk.
  AutomaticallyReloadModifiedFilesOptions returnValue = 1;
}

message ApplicationMgr_Set_CreateEmptySequenceFileOnStartRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies that the Application Manager control creates a new, empty sequence file at startup when the application is in edit mode, no initially opened sequences files exist, and a user logs in with the privilege to edit sequence files. When users open or create another file before making any changes to the empty automatically created file, the automatically created file closes.
  bool val = 2;
}

message ApplicationMgr_Set_CreateEmptySequenceFileOnStartResponse {
}

message ApplicationMgr_Get_CreateEmptySequenceFileOnStartRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_CreateEmptySequenceFileOnStartResponse {
  // Specifies that the Application Manager control creates a new, empty sequence file at startup when the application is in edit mode, no initially opened sequences files exist, and a user logs in with the privilege to edit sequence files. When users open or create another file before making any changes to the empty automatically created file, the automatically created file closes.
  bool returnValue = 1;
}

message ApplicationMgr_Get_SelectedPropertyObjectsRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_SelectedPropertyObjectsResponse {
  SelectedPropertyObjectsInstance returnValue = 1;
}

message ApplicationMgr_Set_SelectedPropertyObjectFileRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  PropertyObjectFileInstance val = 2;
}

message ApplicationMgr_Set_SelectedPropertyObjectFileResponse {
}

message ApplicationMgr_Get_SelectedPropertyObjectFileRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_SelectedPropertyObjectFileResponse {
  PropertyObjectFileInstance returnValue = 1;
}

message ApplicationMgr_Set_EditModeShortcutKeyRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies a key users can press to toggle the ApplicationMgr.IsEditor property. To prevent users from toggling the edit mode with a keystroke, set this property to ShortcutKey_VK_NOT_A_KEY.
  ShortcutKeys val = 2;
}

message ApplicationMgr_Set_EditModeShortcutKeyResponse {
}

message ApplicationMgr_Get_EditModeShortcutKeyRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_EditModeShortcutKeyResponse {
  // Specifies a key users can press to toggle the ApplicationMgr.IsEditor property. To prevent users from toggling the edit mode with a keystroke, set this property to ShortcutKey_VK_NOT_A_KEY.
  ShortcutKeys returnValue = 1;
}

message ApplicationMgr_Set_EditModeShortcutModifierRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies a modifier for the key users can press to toggle the ApplicationMgr.IsEditor property. Use any combination of the ShortcutModifiers constants.
  ShortcutModifiers val = 2;
}

message ApplicationMgr_Set_EditModeShortcutModifierResponse {
}

message ApplicationMgr_Get_EditModeShortcutModifierRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_EditModeShortcutModifierResponse {
  // Specifies a modifier for the key users can press to toggle the ApplicationMgr.IsEditor property. Use any combination of the ShortcutModifiers constants.
  ShortcutModifiers returnValue = 1;
}

message ApplicationMgr_Set_CommandLineCanChangeEditModeRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Set this property to False to prevent users from changing the edit mode of the application by passing /operatorInterface or /editor on the command line.
  bool val = 2;
}

message ApplicationMgr_Set_CommandLineCanChangeEditModeResponse {
}

message ApplicationMgr_Get_CommandLineCanChangeEditModeRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_CommandLineCanChangeEditModeResponse {
  // Set this property to False to prevent users from changing the edit mode of the application by passing /operatorInterface or /editor on the command line.
  bool returnValue = 1;
}

message ApplicationMgr_Set_UseStepListConfigurationsRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies whether the Application Manager control uses the selected step list configurations specified in the Edit Step List Configurations dialog box that set the non-border properties of connected SequenceView controls.
  // When this property is True, the Application Manager control enables commands that select or configure step list configuration. In addition, the non-border SequenceView properties you specify at edit time on the SequenceView property pages apply only when no applicable step list configurations exist in the application configuration file.
  // When this property is False, the Application Manager control hides commands that select or configure step list configurations, and the Application Manager control uses the non-border SequenceView properties you specify at edit time on the SequenceView property pages.
  bool val = 2;
}

message ApplicationMgr_Set_UseStepListConfigurationsResponse {
}

message ApplicationMgr_Get_UseStepListConfigurationsRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_UseStepListConfigurationsResponse {
  // Specifies whether the Application Manager control uses the selected step list configurations specified in the Edit Step List Configurations dialog box that set the non-border properties of connected SequenceView controls.
  // When this property is True, the Application Manager control enables commands that select or configure step list configuration. In addition, the non-border SequenceView properties you specify at edit time on the SequenceView property pages apply only when no applicable step list configurations exist in the application configuration file.
  // When this property is False, the Application Manager control hides commands that select or configure step list configurations, and the Application Manager control uses the non-border SequenceView properties you specify at edit time on the SequenceView property pages.
  bool returnValue = 1;
}

message ApplicationMgr_Set_ExitCodeRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Specifies the exit code of a user interface.
  int32 val = 2;
}

message ApplicationMgr_Set_ExitCodeResponse {
}

message ApplicationMgr_Get_ExitCodeRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
}

message ApplicationMgr_Get_ExitCodeResponse {
  // Specifies the exit code of a user interface.
  int32 returnValue = 1;
}

message ApplicationMgr_GetEvents_ExitApplicationRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_ExitApplicationResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message ApplicationMgr_ReplyToEvent_ExitApplicationRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ApplicationMgr_ReplyToEvent_ExitApplicationResponse {
}

message ApplicationMgr_GetEvents_UIMessageEventRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_UIMessageEventResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies a TestStand User Interface message.
  UIMessageInstance uiMsg = 2;
  // Set this parameter to True when you do not want the manager controls to handle this event. Setting this parameter to True can improve performance in some cases by preventing TestStand from storing user interface message data in the internal cache.
  // Note: National Instruments recommends using this parameter only when performance is a concern. Preventing the manager controls from receiving messages needed to track the state of the TestStand Engine can produce unpredictable behavior in the application.
  bool cancel = 3;
}

message ApplicationMgr_ReplyToEvent_UIMessageEventRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  // Set this parameter to True when you do not want the manager controls to handle this event. Setting this parameter to True can improve performance in some cases by preventing TestStand from storing user interface message data in the internal cache.
  // Note: National Instruments recommends using this parameter only when performance is a concern. Preventing the manager controls from receiving messages needed to track the state of the TestStand Engine can produce unpredictable behavior in the application.
  bool cancel = 2;
}

message ApplicationMgr_ReplyToEvent_UIMessageEventResponse {
}

message ApplicationMgr_GetEvents_SequenceFileOpenedRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_SequenceFileOpenedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the sequence file that opened.
  SequenceFileInstance file = 2;
  // If this parameter is True, the sequence file was already opened.
  bool alreadyLoaded = 3;
}

message ApplicationMgr_ReplyToEvent_SequenceFileOpenedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ApplicationMgr_ReplyToEvent_SequenceFileOpenedResponse {
}

message ApplicationMgr_GetEvents_SequenceFileClosedRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_SequenceFileClosedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the path of the closed sequence file.
  string pathName = 2;
}

message ApplicationMgr_ReplyToEvent_SequenceFileClosedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ApplicationMgr_ReplyToEvent_SequenceFileClosedResponse {
}

message ApplicationMgr_GetEvents_UserChangedRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_UserChangedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the current user. When this parameter is NULL, no user is logged in.
  UserInstance user = 2;
}

message ApplicationMgr_ReplyToEvent_UserChangedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ApplicationMgr_ReplyToEvent_UserChangedResponse {
}

message ApplicationMgr_GetEvents_WaitRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_WaitResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // When this parameter is True, the application has started a long operation. When this parameter is False, the application has finished the long operation.
  bool showWait = 2;
}

message ApplicationMgr_ReplyToEvent_WaitRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ApplicationMgr_ReplyToEvent_WaitResponse {
}

message ApplicationMgr_GetEvents_ReportErrorRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_ReportErrorResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the error code for the error that caused the event.
  int32 errorCode = 2;
  // Specifies the descriptive error string.
  string errorMessage = 3;
}

message ApplicationMgr_ReplyToEvent_ReportErrorRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ApplicationMgr_ReplyToEvent_ReportErrorResponse {
}

message ApplicationMgr_GetEvents_PreCommandExecuteRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_PreCommandExecuteResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the command about to execute.
  CommandInstance Command = 2;
  // Set this parameter to False to prevent the command from executing. When you cancel the command execution, you do not receive an ApplicationMgr.PostCommandExecute event.
  bool cancel = 3;
}

message ApplicationMgr_ReplyToEvent_PreCommandExecuteRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  // Set this parameter to False to prevent the command from executing. When you cancel the command execution, you do not receive an ApplicationMgr.PostCommandExecute event.
  bool cancel = 2;
}

message ApplicationMgr_ReplyToEvent_PreCommandExecuteResponse {
}

message ApplicationMgr_GetEvents_PostCommandExecuteRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_PostCommandExecuteResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the command that executed.
  CommandInstance Command = 2;
}

message ApplicationMgr_ReplyToEvent_PostCommandExecuteRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ApplicationMgr_ReplyToEvent_PostCommandExecuteResponse {
}

message ApplicationMgr_GetEvents_QueryCloseExecutionRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_QueryCloseExecutionResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the execution about to be closed.
  ExecutionInstance exec = 2;
  // Specifies the run state of the execution.
  ExecutionRunStates RunState = 3;
  // Specifies to cancel the closing of the execution; automatically close, abort, or terminate the running execution; or prompt the user for action. Refer to the QueryCloseExecutionOptions enumeration for more information about options for closing executions.
  QueryCloseExecutionOptions opt = 4;
}

message ApplicationMgr_ReplyToEvent_QueryCloseExecutionRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  // Specifies to cancel the closing of the execution; automatically close, abort, or terminate the running execution; or prompt the user for action. Refer to the QueryCloseExecutionOptions enumeration for more information about options for closing executions.
  QueryCloseExecutionOptions opt = 2;
}

message ApplicationMgr_ReplyToEvent_QueryCloseExecutionResponse {
}

message ApplicationMgr_GetEvents_ExecutionClosedRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_ExecutionClosedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the execution that has been closed.
  ExecutionInstance exec = 2;
}

message ApplicationMgr_ReplyToEvent_ExecutionClosedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ApplicationMgr_ReplyToEvent_ExecutionClosedResponse {
}

message ApplicationMgr_GetEvents_QueryCloseSequenceFileRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_QueryCloseSequenceFileResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the sequence file that is closing.
  SequenceFileInstance file = 2;
  // Set this parameter to True when you want to stop the sequence file from closing.
  bool cancel = 3;
}

message ApplicationMgr_ReplyToEvent_QueryCloseSequenceFileRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  // Set this parameter to True when you want to stop the sequence file from closing.
  bool cancel = 2;
}

message ApplicationMgr_ReplyToEvent_QueryCloseSequenceFileResponse {
}

message ApplicationMgr_GetEvents_QueryShutdownRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_QueryShutdownResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Refer to the QueryShutdownOptions enumeration for more information about constants with this parameter.
  QueryShutdownOptions opt = 2;
}

message ApplicationMgr_ReplyToEvent_QueryShutdownRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  // Refer to the QueryShutdownOptions enumeration for more information about constants with this parameter.
  QueryShutdownOptions opt = 2;
}

message ApplicationMgr_ReplyToEvent_QueryShutdownResponse {
}

message ApplicationMgr_GetEvents_DisplaySequenceFileRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_DisplaySequenceFileResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the sequence file to display.
  SequenceFileInstance file = 2;
  // Specifies the reason why the event was generated. Refer to the SequenceFileDisplayReasons enumeration for more information about reasons for sequence file actions.
  SequenceFileDisplayReasons reason = 3;
}

message ApplicationMgr_ReplyToEvent_DisplaySequenceFileRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ApplicationMgr_ReplyToEvent_DisplaySequenceFileResponse {
}

message ApplicationMgr_GetEvents_DisplayExecutionRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_DisplayExecutionResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the execution to display.
  ExecutionInstance exec = 2;
  // Specifies the reason why the event was generated. Refer to the ExecutionDisplayReasons enumeration for more information about reasons for execution actions.
  ExecutionDisplayReasons reason = 3;
}

message ApplicationMgr_ReplyToEvent_DisplayExecutionRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ApplicationMgr_ReplyToEvent_DisplayExecutionResponse {
}

message ApplicationMgr_GetEvents_DisplayReportRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_DisplayReportResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the execution that contains the report to display.
  ExecutionInstance exec = 2;
}

message ApplicationMgr_ReplyToEvent_DisplayReportRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ApplicationMgr_ReplyToEvent_DisplayReportResponse {
}

message ApplicationMgr_GetEvents_AfterUIMessageEventRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_AfterUIMessageEventResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // A TestStand user interface message.
  UIMessageInstance uiMsg = 2;
}

message ApplicationMgr_ReplyToEvent_AfterUIMessageEventRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ApplicationMgr_ReplyToEvent_AfterUIMessageEventResponse {
}

message ApplicationMgr_GetEvents_ShutDownCompletedRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_ShutDownCompletedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message ApplicationMgr_ReplyToEvent_ShutDownCompletedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ApplicationMgr_ReplyToEvent_ShutDownCompletedResponse {
}

message ApplicationMgr_GetEvents_ShutDownCancelledRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_ShutDownCancelledResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message ApplicationMgr_ReplyToEvent_ShutDownCancelledRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ApplicationMgr_ReplyToEvent_ShutDownCancelledResponse {
}

message ApplicationMgr_GetEvents_StartExecutionRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_StartExecutionResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the newly started execution.
  ExecutionInstance exec = 2;
  // Specifies the thread of the execution.
  ThreadInstance thrd = 3;
  // Specifies whether the execution is initially hidden.
  bool initiallyHidden = 4;
}

message ApplicationMgr_ReplyToEvent_StartExecutionRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ApplicationMgr_ReplyToEvent_StartExecutionResponse {
}

message ApplicationMgr_GetEvents_EndExecutionRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_EndExecutionResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the execution that has ended.
  ExecutionInstance exec = 2;
}

message ApplicationMgr_ReplyToEvent_EndExecutionRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ApplicationMgr_ReplyToEvent_EndExecutionResponse {
}

message ApplicationMgr_GetEvents_BreakOnRunTimeErrorRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_BreakOnRunTimeErrorResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the execution to which the event applies.
  ExecutionInstance exec = 2;
  // Specifies the thread that sent the run-time error notification.
  ThreadInstance initiatingThread = 3;
  // The Application Manager control launches a Run-Time Error dialog box when the Execution.RTEOptionForThisExecution property is set to RTEOption_ShowDialog. Set this parameter to False when you do not want the Application Manager control to launch the Run-Time Error dialog box. Do not set this parameter to False to replace the default run-time error dialog box. Instead, handle the ApplicationMgr.DisplayCustomRunTimeErrorDialog event.
  // By default, this parameter is True.
  bool showDialog = 4;
  // Set this parameter to True to pause the current execution.
  // By default, this parameter is False.
  bool BreakExecution = 5;
}

message ApplicationMgr_ReplyToEvent_BreakOnRunTimeErrorRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  // The Application Manager control launches a Run-Time Error dialog box when the Execution.RTEOptionForThisExecution property is set to RTEOption_ShowDialog. Set this parameter to False when you do not want the Application Manager control to launch the Run-Time Error dialog box. Do not set this parameter to False to replace the default run-time error dialog box. Instead, handle the ApplicationMgr.DisplayCustomRunTimeErrorDialog event.
  // By default, this parameter is True.
  bool showDialog = 2;
  // Set this parameter to True to pause the current execution.
  // By default, this parameter is False.
  bool BreakExecution = 3;
}

message ApplicationMgr_ReplyToEvent_BreakOnRunTimeErrorResponse {
}

message ApplicationMgr_GetEvents_UserMessageRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_UserMessageResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the user-defined UIMessage object.
  UIMessageInstance uiMsg = 2;
}

message ApplicationMgr_ReplyToEvent_UserMessageRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ApplicationMgr_ReplyToEvent_UserMessageResponse {
}

message ApplicationMgr_GetEvents_RefreshWindowsRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_RefreshWindowsResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the ActiveXData of the UIMessage object. Specify NULL to refresh data for all files and executions. Specify a PropertyObjectFile to refresh the data of a specific file. Specify a SequenceContext to refresh the SequenceContext of an execution. You can also specify an Object Reference Array that contains multiple values.
  ObjectInstance activeXData = 2;
}

message ApplicationMgr_ReplyToEvent_RefreshWindowsRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ApplicationMgr_ReplyToEvent_RefreshWindowsResponse {
}

message ApplicationMgr_GetEvents_BreakRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_BreakResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies a paused execution.
  ExecutionInstance exec = 2;
}

message ApplicationMgr_ReplyToEvent_BreakRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ApplicationMgr_ReplyToEvent_BreakResponse {
}

message ApplicationMgr_GetEvents_QueryReloadSequenceFileRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_QueryReloadSequenceFileResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the sequence file to reload.
  SequenceFileInstance file = 2;
  // Use QueryReloadSequenceFileOptions with this parameter. This parameter is initialized to QueryReloadSequenceFile_Prompt. You can change the value of this parameter to make the Application Manager control reload or discard the modified file without prompting the user.
  QueryReloadSequenceFileOptions opt = 3;
}

message ApplicationMgr_ReplyToEvent_QueryReloadSequenceFileRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  // Use QueryReloadSequenceFileOptions with this parameter. This parameter is initialized to QueryReloadSequenceFile_Prompt. You can change the value of this parameter to make the Application Manager control reload or discard the modified file without prompting the user.
  QueryReloadSequenceFileOptions opt = 2;
}

message ApplicationMgr_ReplyToEvent_QueryReloadSequenceFileResponse {
}

message ApplicationMgr_GetEvents_ProcessUserCommandsRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_ProcessUserCommandsResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the user command-line arguments. This collection is created by splitting up the command line used to start the application using white space as a delimiter. When the ApplicationMgr.ProcessCommandLine property is True, the first argument the Application Manager control does not recognize marks the start of the user arguments. When the ApplicationMgr.ProcessCommandLine property is False, all arguments are user arguments.
  StringsInstance cmds = 2;
}

message ApplicationMgr_ReplyToEvent_ProcessUserCommandsRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ApplicationMgr_ReplyToEvent_ProcessUserCommandsResponse {
}

message ApplicationMgr_GetEvents_EditModeChangedRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_EditModeChangedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message ApplicationMgr_ReplyToEvent_EditModeChangedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ApplicationMgr_ReplyToEvent_EditModeChangedResponse {
}

message ApplicationMgr_GetEvents_ProcessUserCommandLineArgumentsRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_ProcessUserCommandLineArgumentsResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // The Application Manager control passes False to this parameter when the control is only validating and not actually processing the command line. When this parameter is False, handle this event the same as when this parameter is True, without performing the action the command-line specifies.
  bool processCommand = 2;
  // Specifies the command-line arguments passed to the application.
  StringsInstance arguments = 3;
  // Specifies the index into arguments of the command-line argument the Application Manager control does not recognize. Increment this parameter for every argument you process. The Application Manager control continues processing the command-line arguments at this parameter when this event returns.
  int32 currentArgument = 4;
  // The Application Manager control initializes this parameter to ProcessCommandLineError_None. Set this parameter to ProcessCommandLineError_UnrecognizedArgumentError when you do not recognize the command-line argument. Set this parameter to ProcessCommandLineError_CustomError when you encounter any other error processing the command line. The Application Manager control stops processing the command line and generates the ReportError event when an error occurs while processing the command line.
  ProcessCommandLineErrors errorProcessing = 5;
  // When you set the errorProcessing parameter to ProcessCommandLineError_CustomError, set this parameter to a custom error message.
  string errorMessage = 6;
}

message ApplicationMgr_ReplyToEvent_ProcessUserCommandLineArgumentsRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  // Specifies the index into arguments of the command-line argument the Application Manager control does not recognize. Increment this parameter for every argument you process. The Application Manager control continues processing the command-line arguments at this parameter when this event returns.
  int32 currentArgument = 2;
  // The Application Manager control initializes this parameter to ProcessCommandLineError_None. Set this parameter to ProcessCommandLineError_UnrecognizedArgumentError when you do not recognize the command-line argument. Set this parameter to ProcessCommandLineError_CustomError when you encounter any other error processing the command line. The Application Manager control stops processing the command line and generates the ReportError event when an error occurs while processing the command line.
  ProcessCommandLineErrors errorProcessing = 3;
  // When you set the errorProcessing parameter to ProcessCommandLineError_CustomError, set this parameter to a custom error message.
  string errorMessage = 4;
}

message ApplicationMgr_ReplyToEvent_ProcessUserCommandLineArgumentsResponse {
}

message ApplicationMgr_GetEvents__ApplicationMgrEvents_Event_CanEditRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents__ApplicationMgrEvents_Event_CanEditResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  PropertyObjectFileInstance editedFile = 2;
  EditKinds editKind = 3;
  bool canEditValue = 4;
  int32 editDenialReasons = 5;
}

message ApplicationMgr_ReplyToEvent__ApplicationMgrEvents_Event_CanEditRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  bool canEditValue = 2;
  int32 editDenialReasons = 3;
}

message ApplicationMgr_ReplyToEvent__ApplicationMgrEvents_Event_CanEditResponse {
}

message ApplicationMgr_GetEvents__ApplicationMgrEvents_Event_BeginEditRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents__ApplicationMgrEvents_Event_BeginEditResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  PropertyObjectFileInstance editedFile = 2;
  EditKinds editKind = 3;
  PropertyObjectInstance objectsToEdit = 4;
  bool cancel = 5;
  int32 editDenialReasons = 6;
}

message ApplicationMgr_ReplyToEvent__ApplicationMgrEvents_Event_BeginEditRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  bool cancel = 2;
  int32 editDenialReasons = 3;
}

message ApplicationMgr_ReplyToEvent__ApplicationMgrEvents_Event_BeginEditResponse {
}

message ApplicationMgr_GetEvents__ApplicationMgrEvents_Event_EndEditRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents__ApplicationMgrEvents_Event_EndEditResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  PropertyObjectFileInstance editedFile = 2;
  EditKinds editKind = 3;
  PropertyObjectInstance editedObjects = 4;
  bool cancelled = 5;
}

message ApplicationMgr_ReplyToEvent__ApplicationMgrEvents_Event_EndEditRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ApplicationMgr_ReplyToEvent__ApplicationMgrEvents_Event_EndEditResponse {
}

message ApplicationMgr_GetEvents_DropFileRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_DropFileResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the absolute pathname of the file you dropped.
  // 
  string file = 2;
  // Set this parameter to True when you programmatically open the file in the event handler and do not want the Application Manager to try to open the file. When you do not set this parameter to True, the Application Manager control opens the file as a sequence file or, if the file is a valid  code module file and the file was dropped on a SequenceView control, the SequenceView control inserts a step configured to call the code module file.
  bool handled = 3;
}

message ApplicationMgr_ReplyToEvent_DropFileRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  // Set this parameter to True when you programmatically open the file in the event handler and do not want the Application Manager to try to open the file. When you do not set this parameter to True, the Application Manager control opens the file as a sequence file or, if the file is a valid  code module file and the file was dropped on a SequenceView control, the SequenceView control inserts a step configured to call the code module file.
  bool handled = 2;
}

message ApplicationMgr_ReplyToEvent_DropFileResponse {
}

message ApplicationMgr_GetEvents_SequenceFileClosingRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_SequenceFileClosingResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies a reference to the sequence file about to be closed.
  SequenceFileInstance file = 2;
}

message ApplicationMgr_ReplyToEvent_SequenceFileClosingRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ApplicationMgr_ReplyToEvent_SequenceFileClosingResponse {
}

message ApplicationMgr_GetEvents_DisplayCustomRunTimeErrorDialogRequest {
  // The id of the ApplicationMgr object.
  ApplicationMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ApplicationMgr_GetEvents_DisplayCustomRunTimeErrorDialogResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the SequenceContext in which the run-time error occurred.
  SequenceContextInstance ctxt = 2;
  // Set this parameter to True to pause the current execution.
  bool breakExec = 3;
  // Set this parameter to True to set the Execution.RTEOptionForThisExecution property to the value of the rteOption parameter.
  bool doNotShowAgainForExecution = 4;
  // Set this parameter to True to set the Thread.SetBatchRTEOption method to the value of the rteOption parameter.
  bool doNotShowAgainForBatch = 5;
  // Use the RTEOptions constants to specify how TestStand handles the run-time error.
  int32 rteOption = 6;
  // Set this parameter to True to launch the default run-time error dialog box.
  bool showDefaultDialog = 7;
}

message ApplicationMgr_ReplyToEvent_DisplayCustomRunTimeErrorDialogRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  // Set this parameter to True to pause the current execution.
  bool breakExec = 2;
  // Set this parameter to True to set the Execution.RTEOptionForThisExecution property to the value of the rteOption parameter.
  bool doNotShowAgainForExecution = 3;
  // Set this parameter to True to set the Thread.SetBatchRTEOption method to the value of the rteOption parameter.
  bool doNotShowAgainForBatch = 4;
  // Use the RTEOptions constants to specify how TestStand handles the run-time error.
  int32 rteOption = 5;
  // Set this parameter to True to launch the default run-time error dialog box.
  bool showDefaultDialog = 6;
}

message ApplicationMgr_ReplyToEvent_DisplayCustomRunTimeErrorDialogResponse {
}

// SequenceFileViewMgr
//
// A SequenceFileView Manager control performs the following tasks to manage how other visible TestStand User Interface (UI) Controls view and interact with a selected sequence file:    * Designates a sequence file as the selected sequence file.    * Tracks which sequence, step groups, and steps are selected in the selected file and tracks the expansion of the step groups.    * Displays aspects of the selected file in the visible TestStand UI Controls to which it connects.    * Enables visible TestStand UI Controls to which it connects to change the selected file, sequence, step group, and steps.    * Provides methods for executing the selected sequence file.
// An application must have one SequenceFileView Manager control for each location, such as a window, form, or panel, in which you display a sequence file or let the user select a current sequence file.
//
service SequenceFileViewMgr {
  // Service: SequenceFileViewMgr
  //
  // Creates a new SequenceFileViewMgr instance
  //
  // SequenceFileViewMgrRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //
  // SequenceFileViewMgrResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFileViewMgrInstance - The return type of the SequenceFileViewMgr object.
  //
  rpc SequenceFileViewMgr(SequenceFileViewMgr_SequenceFileViewMgrRequest) returns (SequenceFileViewMgr_SequenceFileViewMgrResponse);

  // Method: BuildEditArgs
  //
  // Creates an EditArgs object according to the current selection settings of the SequenceFileView Manager control.
  //
  // Use this method to create an EditArgs object, which you can modify before you pass it as the optional parameter to a method that starts an execution.
  //
  // SequenceFileViewMgr_BuildEditArgsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //
  // SequenceFileViewMgr_BuildEditArgsResponse - The response message from the server. It provides the return value.
  //    - returnValue: EditArgsInstance - The return type of the EditArgs object.
  //
  rpc BuildEditArgs(SequenceFileViewMgr_BuildEditArgsRequest) returns (SequenceFileViewMgr_BuildEditArgsResponse);
  
  
  // Method: SetSequenceAndGroup
  //
  // Sets the current sequence and step group at the same time.
  //
  // This is more efficient than setting the SequenceFileViewMgr.Sequence property before setting the SequenceFileViewMgr.StepGroup property.
  //
  // SequenceFileViewMgr_SetSequenceAndGroupRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //    - newSequence: SequenceInstance - Specifies the sequence to set in the SequenceFileView Manager control.
  //    - newGroup: StepGroups - Specifies the step group value to set in the SequenceFileView Manager control.
  //
  // SequenceFileViewMgr_SetSequenceAndGroupResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetSequenceAndGroup(SequenceFileViewMgr_SetSequenceAndGroupRequest) returns (SequenceFileViewMgr_SetSequenceAndGroupResponse);
  
  
  // Method: Run
  //
  // Runs the current sequence without using a process model entry point.
  //
  // SequenceFileViewMgr_RunRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //    - editArgsVal: ObjectInstance - Specifies a custom EditArgs object using this parameter. When you do not pass a custom EditArgs object, the SequenceFileView Manager control builds an EditArgs object according to the current selections.
  //
  // SequenceFileViewMgr_RunResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionInstance - A new execution. 
  //
  rpc Run(SequenceFileViewMgr_RunRequest) returns (SequenceFileViewMgr_RunResponse);
  
  
  // Method: RunSelectedSteps
  //
  // Starts an execution to run the currently selected steps.
  //
  // SequenceFileViewMgr_RunSelectedStepsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //    - interactiveArgsVal: ObjectInstance - Specifies a custom InteractiveArgs object using this parameter. When you do not pass a custom InteractiveArgs object, the SequenceFileView Manager control builds an InteractiveArgs object according to the current selections.
  //    - editArgsVal: ObjectInstance - Specifies a custom EditArgs object using this parameter. When you do not pass a custom EditArgs object, the SequenceFileView Manager control builds an EditArgs object according to the current selections.
  //
  // SequenceFileViewMgr_RunSelectedStepsResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionInstance - A new execution. 
  //
  rpc RunSelectedSteps(SequenceFileViewMgr_RunSelectedStepsRequest) returns (SequenceFileViewMgr_RunSelectedStepsResponse);
  
  
  // Method: BuildInteractiveArgs
  //
  // Creates an InteractiveArgs object according to the current selection settings of the SequenceFileView Manager control.
  //
  // Use this method to create an InteractiveArgs object, which you can modify before you pass it as the optional parameter to a method that starts an interactive execution.
  //
  // SequenceFileViewMgr_BuildInteractiveArgsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //    - createLoopArgs: ObjectInstance - When this parameter is True, this property launches the Loop on Selected Steps dialog box to create the InteractiveArgs object for the SequenceFileViewMgr.LoopOnSelectedSteps method.
  //
  // SequenceFileViewMgr_BuildInteractiveArgsResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: InteractiveArgsInstance - A new InteractiveArgs object. 
  //    - cancel: ObjectInstanc - If the Loop on Selected Steps dialog box is cancelled, the value of the parameter passed in is True.
  //
  rpc BuildInteractiveArgs(SequenceFileViewMgr_BuildInteractiveArgsRequest) returns (SequenceFileViewMgr_BuildInteractiveArgsResponse);
  
  
  // Method: LoopOnSelectedSteps
  //
  // Starts an execution that loops on the currently selected steps.
  //
  // SequenceFileViewMgr_LoopOnSelectedStepsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //    - interactiveArgsVal: ObjectInstance - Specifies a custom InteractiveArgs object using this parameter. When you do not pass a custom InteractiveArgs object, the SequenceFileView Manager control builds an InteractiveArgs object according to the current selections.
  //    - editArgsVal: ObjectInstance - Specifies a custom EditArgs object using this parameter. When you do not pass a custom EditArgs object, the SequenceFileView Manager control builds an EditArgs object according to the current selections.
  //
  // SequenceFileViewMgr_LoopOnSelectedStepsResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionInstance - A new execution. 
  //
  rpc LoopOnSelectedSteps(SequenceFileViewMgr_LoopOnSelectedStepsRequest) returns (SequenceFileViewMgr_LoopOnSelectedStepsResponse);
  
  
  // Method: Refresh
  //
  // Refreshes all connected controls.
  //
  // Typically, you do not call this method unless you have changed the state of the execution directly using the TestStand API. Call this method so these types of changes are reflected in the connected controls.
  //
  // SequenceFileViewMgr_RefreshRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //
  // SequenceFileViewMgr_RefreshResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Refresh(SequenceFileViewMgr_RefreshRequest) returns (SequenceFileViewMgr_RefreshResponse);
  
  
  // Method: RefreshStep
  //
  // Refreshes a step in the current step group in a connected SequenceView control.
  //
  // Typically, you do not call this method unless you have changed the state of the step directly using the TestStand API. Call this method so these types of changes are reflected in the connected SequenceView control.
  // 
  // When you set the SequenceFileViewMgr.StepGroupMode property to StepGroupMode_AllGroups, call the SequenceFileViewMgr.RefreshStepEx method instead of this method to specify the step group in which the step resides.
  //
  // SequenceFileViewMgr_RefreshStepRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //    - stepIndex: int32 - Specifies the index of the step to refresh. Passing -1 refreshes all steps in the connected SequenceView control.
  //
  // SequenceFileViewMgr_RefreshStepResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc RefreshStep(SequenceFileViewMgr_RefreshStepRequest) returns (SequenceFileViewMgr_RefreshStepResponse);
  
  
  // Method: GetCommand
  //
  // Creates a Command object. When applicable, the command operates on the items the SequenceFileView Manager control selects.
  //
  // SequenceFileViewMgr_GetCommandRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //    - cmdKind: CommandKinds - Specifies the type of Command object to create.
  //
  // SequenceFileViewMgr_GetCommandResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommandInstance - The return type of the Command object.
  //
  rpc GetCommand(SequenceFileViewMgr_GetCommandRequest) returns (SequenceFileViewMgr_GetCommandResponse);
  
  
  // Method: GetCaptionText
  //
  // Returns the current caption text for a caption source in a SequenceFileView Manager control.
  //
  // SequenceFileViewMgr_GetCaptionTextRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //    - captionSource: CaptionSources - Specifies the type of caption source from which to obtain text.
  //    - formatExpression: string - Specifies a format expression to evaluate when generating the caption text. For the CaptionSource_MacroExpression caption source, specify a format expression that evaluates to a string value that contains macros that specify other caption sources. For all other caption sources, specify an expression that evaluates to a string value that contains the characters %1.  The method replaces the %1 characters with the text from the caption source. Pass an empty string to use the default format string for the caption source.
  //
  // SequenceFileViewMgr_GetCaptionTextResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The current text for the caption source you specify. 
  //
  rpc GetCaptionText(SequenceFileViewMgr_GetCaptionTextRequest) returns (SequenceFileViewMgr_GetCaptionTextResponse);
  
  
  // Method: GetImageName
  //
  // Returns the current image name for an image source in a SequenceFileView Manager control. Use the Images.FindImage method to acquire a reference to the image.
  //
  // SequenceFileViewMgr_GetImageNameRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //    - imageSource: ImageSources - Specifies the type of image source from which to obtain an image name. 
  //
  // SequenceFileViewMgr_GetImageNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The current image name for the image source you specify. 
  //
  rpc GetImageName(SequenceFileViewMgr_GetImageNameRequest) returns (SequenceFileViewMgr_GetImageNameResponse);
  
  
  // Method: ConnectCommand
  //
  // Connects a command source in a SequenceFileView Manager control to a TestStand button or checkbox control. The connection automatically updates the enabled, visible, and caption properties of the button or checkbox according to the state of the current execution. Clicking the button or enabling the checkbox control executes the command.
  //
  // To disconnect an existing connection, you must first obtain the SequenceFileViewMgrConnections object from the SequenceFileViewMgr.Connections property. Then, access the SequenceFileViewMgrConnections.Command property to obtain the CommandConnections collection.
  //
  // SequenceFileViewMgr_ConnectCommandRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //    - uiObj: ObjectInstance - Specifies the button or checkbox control to which the command connects.
  //    - cmdKind: CommandKinds - Specifies the type of command to connect.
  //    - opts: int32 - Specifies the options for the CommandConnection. Refer to the CommandConnectionOptions constants for more information about options for the CommandConnection object.
  //
  // SequenceFileViewMgr_ConnectCommandResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommandConnectionInstance - A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned. 
  //
  rpc ConnectCommand(SequenceFileViewMgr_ConnectCommandRequest) returns (SequenceFileViewMgr_ConnectCommandResponse);
  
  
  // Method: ConnectCaption
  //
  // Connects a caption source in a SequenceFileView Manager control to a visible control or an element of a visible control. The connection automatically updates the visible control with text that describes an aspect of the current application state.
  //
  // To disconnect an existing connection, you must first obtain the SequenceFileViewMgrConnections object from the SequenceFileViewMgr.Connections property. Then, call the SequenceFileViewMgrConnections.Caption property to obtain the CaptionConnections collection.
  //
  // SequenceFileViewMgr_ConnectCaptionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //    - uiObj: ObjectInstance - Specifies the visible control or element of a visible control to which the caption source connects. Pass a Label, ExpressionEdit, or StatusBarPane.
  //    - captionSource: CaptionSources - Specifies the type of caption source to connect.
  //
  // SequenceFileViewMgr_ConnectCaptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: CaptionConnectionInstance - A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned. 
  //
  rpc ConnectCaption(SequenceFileViewMgr_ConnectCaptionRequest) returns (SequenceFileViewMgr_ConnectCaptionResponse);
  
  
  // Method: ConnectSequenceFileList
  //
  // Connects a user interface control that displays the list of opened sequence files. The control can also select a sequence file to place into the SequenceFileView Manager control.
  //
  // You can connect a ComboBox, ListBarPage, and ListBox to SequenceFileLists.
  // To disconnect an existing connection, you must first obtain the SequenceFileViewMgrConnections object from the SequenceFileViewMgr.Connections property. Then, access the SequenceFileViewMgrConnections.SequenceFileList property to obtain the SequenceFileListConnections collection.
  //
  // SequenceFileViewMgr_ConnectSequenceFileListRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //    - uiObj: ObjectInstance - Use a ComboBox, ListBarPage, or ListBox to display the list of sequence files.
  //
  // SequenceFileViewMgr_ConnectSequenceFileListResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFileListConnectionInstance - A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned. 
  //
  rpc ConnectSequenceFileList(SequenceFileViewMgr_ConnectSequenceFileListRequest) returns (SequenceFileViewMgr_ConnectSequenceFileListResponse);
  
  
  // Method: ConnectSequenceList
  //
  // Connects a user interface control that displays the list of sequences in the current sequence file. The control can also select a sequence to place into the SequenceFileView Manager control.
  //
  // You can connect the ComboBox, ListBarPage, and ListBox to SequenceFileLists.
  // To disconnect an existing connection, you must first obtain the SequenceFileViewMgrConnections object from SequenceFileViewMgr.Connections property. Then, access the SequenceFileViewMgrConnections.SequenceList property to obtain the SequenceListConnections collection.
  //
  // SequenceFileViewMgr_ConnectSequenceListRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //    - uiObj: ObjectInstance - Use ComboBox, ListBarPage, or ListBox to display the list of sequence files.
  //
  // SequenceFileViewMgr_ConnectSequenceListResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceListConnectionInstance - A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned. 
  //
  rpc ConnectSequenceList(SequenceFileViewMgr_ConnectSequenceListRequest) returns (SequenceFileViewMgr_ConnectSequenceListResponse);
  
  
  // Method: ConnectStepGroupList
  //
  // Connects a user interface control that selects the step group of the current sequence file to place into the SequenceFileView Manager control.
  //
  // You can connect a ComboBox, ListBarPage, and ListBox as StepGroupLists.
  // To disconnect an existing connection, you must first obtain the SequenceFileViewMgrConnections object from SequenceFileViewMgr.Connections property. Then, access the SequenceFileViewMgrConnections.StepGroupList property to obtain the StepGroupListConnections collection.
  //
  // SequenceFileViewMgr_ConnectStepGroupListRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //    - uiObj: ObjectInstance - Use a ComboBox, ListBarPage, or ListBox to display the list of step groups.
  //
  // SequenceFileViewMgr_ConnectStepGroupListResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepGroupListConnectionInstance - A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned. 
  //
  rpc ConnectStepGroupList(SequenceFileViewMgr_ConnectStepGroupListRequest) returns (SequenceFileViewMgr_ConnectStepGroupListResponse);
  
  
  // Method: ConnectSequenceView
  //
  // Connects a SequenceView control to display the current sequence of the SequenceFileView Manager control.
  //
  // To disconnect an existing connection, you must first obtain the SequenceFileViewMgrConnections object from the SequenceFileViewMgr.Connections property. Then, access the SequenceFileViewMgrConnections.SequenceView property to obtain the SequenceViewConnections collection.
  //
  // SequenceFileViewMgr_ConnectSequenceViewRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //    - uiObj: ObjectInstance - Specifies the reference to a SequenceView control that displays the current sequence and step group.
  //
  // SequenceFileViewMgr_ConnectSequenceViewResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceViewConnectionInstance - A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned. 
  //
  rpc ConnectSequenceView(SequenceFileViewMgr_ConnectSequenceViewRequest) returns (SequenceFileViewMgr_ConnectSequenceViewResponse);
  
  
  // Method: ConnectImage
  //
  // Connects an image source in a SequenceFileView Manager control to a visible control or an element of a visible control. The connection automatically updates the visible control with an icon that describes an aspect of the current application state.
  //
  // To disconnect an existing connection, you must first obtain the SequenceFileViewMgrConnections object from the SequenceFileViewMgr.Connections property. Then, access the SequenceFileViewMgrConnections.Image property to obtain the ImageConnections collection.
  //
  // SequenceFileViewMgr_ConnectImageRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //    - uiObj: ObjectInstance - Specifies the visible control or element of a visible control to which the caption source connects. Pass a StatusBarPane or Button.
  //    - imageSource: ImageSources - Specifies the type of image source to connect.
  //
  // SequenceFileViewMgr_ConnectImageResponse - The response message from the server. It provides the return value.
  //    - returnValue: ImageConnectionInstance - A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned. 
  //
  rpc ConnectImage(SequenceFileViewMgr_ConnectImageRequest) returns (SequenceFileViewMgr_ConnectImageResponse);
  
  
  // Method: RefreshStepEx
  //
  // Refreshes a step in all connected SequenceView controls.
  //
  // Typically, you do not call this method unless you change the state of the step directly using the TestStand API.
  //
  // SequenceFileViewMgr_RefreshStepExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //    - group: StepGroups - Specifies a particular step group.
  //    - stepIndex: int32 - Specifies the zero-based index in the step group of the step to refresh. Pass -1 to refresh all the steps in all groups in the connected SequenceView control.
  //
  // SequenceFileViewMgr_RefreshStepExResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc RefreshStepEx(SequenceFileViewMgr_RefreshStepExRequest) returns (SequenceFileViewMgr_RefreshStepExResponse);
  
  
  // Method: NewEditContext
  //
  // Returns a SequenceContext that has a Step property that has only properties common to all currently selected steps. Use the SequenceContext.GetMultipleValues method to determine whether the values of the Step subproperties are common across all the currently selected steps.
  //
  // SequenceFileViewMgr_NewEditContextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //
  // SequenceFileViewMgr_NewEditContextResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceContextInstance - The return type of the SequenceContext object.
  //
  rpc NewEditContext(SequenceFileViewMgr_NewEditContextRequest) returns (SequenceFileViewMgr_NewEditContextResponse);
  
  
  // Method: ConnectVariables
  //
  // Connects a VariablesView control to display the current sequence context of the SequenceFileView Manager control.
  //
  // To disconnect an existing connection, you must first obtain the SequenceFileViewMgrConnections object from the SequenceFileViewMgr.Connections property. Then, access the SequenceFileViewMgrConnections.Variables property to obtain the VariablesConnections collection.
  //
  // SequenceFileViewMgr_ConnectVariablesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //    - uiObj: ObjectInstance - Specifies the reference to a VariablesView control that displays the current sequence context.
  //
  // SequenceFileViewMgr_ConnectVariablesResponse - The response message from the server. It provides the return value.
  //    - returnValue: VariablesConnectionInstance - A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned. 
  //
  rpc ConnectVariables(SequenceFileViewMgr_ConnectVariablesRequest) returns (SequenceFileViewMgr_ConnectVariablesResponse);
  
  
  // Method: ConnectInsertionPalette
  //
  // Connects an InsertionPalette control to display the step type list and templates list and enables inserting sequences, steps, and variables into controls connected to the SequenceFileView Manager control, such as the ListBox, SequenceView, or VariablesView controls.
  //
  // To disconnect an existing connection, you must first obtain the SequenceFileViewMgrConnections object from the SequenceFileViewMgr.Connections property. Then, access the SequenceFileViewMgrConnections.InsertionPalettes property to obtain the InsertionPaletteConnections collection.
  //
  // SequenceFileViewMgr_ConnectInsertionPaletteRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //    - uiObj: ObjectInstance - Specifies the reference to an InsertionPalette control that displays the step type list and templates list.
  //
  // SequenceFileViewMgr_ConnectInsertionPaletteResponse - The response message from the server. It provides the return value.
  //    - returnValue: InsertionPaletteConnectionInstance - A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned. 
  //
  rpc ConnectInsertionPalette(SequenceFileViewMgr_ConnectInsertionPaletteRequest) returns (SequenceFileViewMgr_ConnectInsertionPaletteResponse);
  
  

  // Property: Connections
  //
  // Returns the connections of this control.
  //
  // SequenceFileViewMgr_Get_ConnectionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //
  // SequenceFileViewMgr_Get_ConnectionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFileViewMgrConnectionsInstance - Returns the connections of this control. 
  //
  rpc Get_Connections(SequenceFileViewMgr_Get_ConnectionsRequest) returns (SequenceFileViewMgr_Get_ConnectionsResponse);
  
  
  // Property: ExecutionEntryPoints
  //
  // Returns the set of Execution entry points the model sequence file for the selected sequence file defines. The collection includes only entry points that set the Sequence.ShowEntryPointForFileWindow property.
  //
  // This collection can change when the selected sequence file changes.
  //
  // SequenceFileViewMgr_Get_ExecutionEntryPointsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //
  // SequenceFileViewMgr_Get_ExecutionEntryPointsResponse - The response message from the server. It provides the return value.
  //    - returnValue: EntryPointsInstance - Returns the set of Execution entry points the model sequence file for the selected sequence file defines. The collection includes only entry points that set the Sequence.ShowEntryPointForFileWindow property. 
  //
  rpc Get_ExecutionEntryPoints(SequenceFileViewMgr_Get_ExecutionEntryPointsRequest) returns (SequenceFileViewMgr_Get_ExecutionEntryPointsResponse);
  
  
  // Property: SequenceFile
  //
  // Specifies the selected sequence file the controls connected to the SequenceFileView Manager control display.
  //
  // Use the SequenceFileViewMgr.ConnectSequenceFileList method to connect a control that displays open sequence files and specifies the selected sequence file.
  //
  // SequenceFileViewMgr_Set_SequenceFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //    - val: SequenceFileInstance - Specifies the selected sequence file the controls connected to the SequenceFileView Manager control display. 
  //
  // SequenceFileViewMgr_Set_SequenceFileResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceFileViewMgr_Get_SequenceFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //
  // SequenceFileViewMgr_Get_SequenceFileResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceFileInstance - Specifies the selected sequence file the controls connected to the SequenceFileView Manager control display. 
  //
  rpc Set_SequenceFile(SequenceFileViewMgr_Set_SequenceFileRequest) returns (SequenceFileViewMgr_Set_SequenceFileResponse);
  rpc Get_SequenceFile(SequenceFileViewMgr_Get_SequenceFileRequest) returns (SequenceFileViewMgr_Get_SequenceFileResponse);
  
  
  // Property: Sequence
  //
  // Specifies the current sequence.
  //
  // Use the SequenceFileViewMgr.ConnectSequenceList method to connect a control that displays sequences and specifies the current sequence.
  // The current sequence is the sequence the SequenceFileView Manager control displays in a connected SequenceView control. Use the SequenceFileViewMgr.SelectedSequences property to determine the list of sequence a connected control selects.
  // Use the SequenceFileViewMgr.SetSequenceAndGroup method to set the current sequence when you must also set the SequenceFileViewMgr.StepGroup property.
  //
  // SequenceFileViewMgr_Set_SequenceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //    - val: SequenceInstance - Specifies the current sequence. 
  //
  // SequenceFileViewMgr_Set_SequenceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceFileViewMgr_Get_SequenceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //
  // SequenceFileViewMgr_Get_SequenceResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceInstance - Specifies the current sequence. 
  //
  rpc Set_Sequence(SequenceFileViewMgr_Set_SequenceRequest) returns (SequenceFileViewMgr_Set_SequenceResponse);
  rpc Get_Sequence(SequenceFileViewMgr_Get_SequenceRequest) returns (SequenceFileViewMgr_Get_SequenceResponse);
  
  
  // Property: StepGroup
  //
  // Specifies the selected step group.
  //
  // A SequenceView control displays the selected step group or all groups depending on the value of the SequenceFileViewMgr.StepGroupMode property. Use the SequenceFileViewMgr.SetSequenceAndGroup method to set the step group when you must also set the SequenceFileViewMgr.Sequence property.
  //
  // SequenceFileViewMgr_Set_StepGroupRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //    - val: StepGroups - Specifies the selected step group. 
  //
  // SequenceFileViewMgr_Set_StepGroupResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceFileViewMgr_Get_StepGroupRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //
  // SequenceFileViewMgr_Get_StepGroupResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepGroups - Specifies the selected step group. 
  //
  rpc Set_StepGroup(SequenceFileViewMgr_Set_StepGroupRequest) returns (SequenceFileViewMgr_Set_StepGroupResponse);
  rpc Get_StepGroup(SequenceFileViewMgr_Get_StepGroupRequest) returns (SequenceFileViewMgr_Get_StepGroupResponse);
  
  
  // Property: ConfigurationEntryPoints
  //
  // Returns the collection of Configuration entry points for the selected sequence file.
  //
  // This collection can change when the selected sequence file changes.
  //
  // SequenceFileViewMgr_Get_ConfigurationEntryPointsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //
  // SequenceFileViewMgr_Get_ConfigurationEntryPointsResponse - The response message from the server. It provides the return value.
  //    - returnValue: EntryPointsInstance - Returns the collection of Configuration entry points for the selected sequence file. 
  //
  rpc Get_ConfigurationEntryPoints(SequenceFileViewMgr_Get_ConfigurationEntryPointsRequest) returns (SequenceFileViewMgr_Get_ConfigurationEntryPointsResponse);
  
  
  // Property: SelectedSteps
  //
  // Returns a collection of selected steps.
  //
  // Use this collection to obtain the selected steps or to change the selected steps for the selected file. TestStand User Interface Controls connected to a SequenceFileView Manager control, such as the SequenceView control, automatically set this property when you select steps.
  //
  // SequenceFileViewMgr_Get_SelectedStepsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //
  // SequenceFileViewMgr_Get_SelectedStepsResponse - The response message from the server. It provides the return value.
  //    - returnValue: SelectedStepsInstance - Returns a collection of selected steps. 
  //
  rpc Get_SelectedSteps(SequenceFileViewMgr_Get_SelectedStepsRequest) returns (SequenceFileViewMgr_Get_SelectedStepsResponse);
  
  
  // Property: ReplaceSequenceFileOnClose
  //
  // Specifies whether the SequenceFileView Manager control selects another sequence file when the currently selected sequence file closes.
  //
  // SequenceFileViewMgr_Set_ReplaceSequenceFileOnCloseRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //    - val: bool - Specifies whether the SequenceFileView Manager control selects another sequence file when the currently selected sequence file closes. 
  //
  // SequenceFileViewMgr_Set_ReplaceSequenceFileOnCloseResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceFileViewMgr_Get_ReplaceSequenceFileOnCloseRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //
  // SequenceFileViewMgr_Get_ReplaceSequenceFileOnCloseResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the SequenceFileView Manager control selects another sequence file when the currently selected sequence file closes. 
  //
  rpc Set_ReplaceSequenceFileOnClose(SequenceFileViewMgr_Set_ReplaceSequenceFileOnCloseRequest) returns (SequenceFileViewMgr_Set_ReplaceSequenceFileOnCloseResponse);
  rpc Get_ReplaceSequenceFileOnClose(SequenceFileViewMgr_Get_ReplaceSequenceFileOnCloseRequest) returns (SequenceFileViewMgr_Get_ReplaceSequenceFileOnCloseResponse);
  
  
  // Property: ApplicationMgr
  //
  // Returns a reference to the Application Manager control of the application. The value is NULL when no Application Manager control exists within the process.
  //
  // SequenceFileViewMgr_Get_ApplicationMgrRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //
  // SequenceFileViewMgr_Get_ApplicationMgrResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - Returns a reference to the Application Manager control of the application. The value is NULL when no Application Manager control exists within the process. 
  //
  rpc Get_ApplicationMgr(SequenceFileViewMgr_Get_ApplicationMgrRequest) returns (SequenceFileViewMgr_Get_ApplicationMgrResponse);
  
  
  // Property: UserData
  //
  // Stores data associated with this control.
  //
  // Stored data is cleared during the shutdown process.
  //
  // SequenceFileViewMgr_Set_UserDataRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //    - val: ObjectInstance - Stores data associated with this control. 
  //
  // SequenceFileViewMgr_Set_UserDataResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceFileViewMgr_Get_UserDataRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //
  // SequenceFileViewMgr_Get_UserDataResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - Stores data associated with this control. 
  //
  rpc Set_UserData(SequenceFileViewMgr_Set_UserDataRequest) returns (SequenceFileViewMgr_Set_UserDataResponse);
  rpc Get_UserData(SequenceFileViewMgr_Get_UserDataRequest) returns (SequenceFileViewMgr_Get_UserDataResponse);
  
  
  // Property: StepGroupMode
  //
  // For connected controls that display steps, this property specifies whether to display all steps in the Cleanup, Main, and Setup groups or to display only the steps in the current step group.
  //
  // When you set this property to StepGroupMode_AllGroups, ensure that the application does not use the value of the SequenceFileViewMgr.StepGroup property.
  //
  // SequenceFileViewMgr_Set_StepGroupModeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //    - val: StepGroupModes - For connected controls that display steps, this property specifies whether to display all steps in the Cleanup, Main, and Setup groups or to display only the steps in the current step group. 
  //
  // SequenceFileViewMgr_Set_StepGroupModeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceFileViewMgr_Get_StepGroupModeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //
  // SequenceFileViewMgr_Get_StepGroupModeResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepGroupModes - For connected controls that display steps, this property specifies whether to display all steps in the Cleanup, Main, and Setup groups or to display only the steps in the current step group. 
  //
  rpc Set_StepGroupMode(SequenceFileViewMgr_Set_StepGroupModeRequest) returns (SequenceFileViewMgr_Set_StepGroupModeResponse);
  rpc Get_StepGroupMode(SequenceFileViewMgr_Get_StepGroupModeRequest) returns (SequenceFileViewMgr_Get_StepGroupModeResponse);
  
  
  // Property: UndoStack
  //
  // Returns the UndoStack for the currently selected SequenceFile.
  //
  // TestStand creates the UndoStack object and automatically adds items to this UndoStack for edits to the currently selected sequence file the TestStand User Interface Controls make.
  //
  // SequenceFileViewMgr_Get_UndoStackRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //
  // SequenceFileViewMgr_Get_UndoStackResponse - The response message from the server. It provides the return value.
  //    - returnValue: UndoStackInstance - Returns the UndoStack for the currently selected SequenceFile. 
  //
  rpc Get_UndoStack(SequenceFileViewMgr_Get_UndoStackRequest) returns (SequenceFileViewMgr_Get_UndoStackResponse);
  
  
  // Property: SelectedSequences
  //
  // Returns a collection of selected sequences.
  //
  // Use this collection to obtain the selected sequences or to change the selected sequences for the selected file. Use the SequenceFileViewMgr.ConnectSequenceList method to connect a control that displays sequences and specifies the selected sequence. Use the SequenceFileViewMgr.Sequence property to determine the sequence a connected SequenceView control displays.
  // TestStand User Interface Controls connected to a SequenceFileView Manager control, such as the ListBox control, automatically set this property when you select sequences.
  //
  // SequenceFileViewMgr_Get_SelectedSequencesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //
  // SequenceFileViewMgr_Get_SelectedSequencesResponse - The response message from the server. It provides the return value.
  //    - returnValue: SelectedSequencesInstance - Returns a collection of selected sequences. 
  //
  rpc Get_SelectedSequences(SequenceFileViewMgr_Get_SelectedSequencesRequest) returns (SequenceFileViewMgr_Get_SelectedSequencesResponse);
  
  
  // Property: SelectedPropertyObjects
  //
  // Returns a collection of selected property objects.
  //
  // Use this collection to obtain the selected property objects or change the selected property objects for the selected file. TestStand User Interface Controls connected to a SequenceFileView Manager control, such as the VariablesView control, automatically set this property when you select variables and properties.
  //
  // SequenceFileViewMgr_Get_SelectedPropertyObjectsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //
  // SequenceFileViewMgr_Get_SelectedPropertyObjectsResponse - The response message from the server. It provides the return value.
  //    - returnValue: SelectedPropertyObjectsInstance - Returns a collection of selected property objects. 
  //
  rpc Get_SelectedPropertyObjects(SequenceFileViewMgr_Get_SelectedPropertyObjectsRequest) returns (SequenceFileViewMgr_Get_SelectedPropertyObjectsResponse);
  
  

  // Event: SequenceFileChanged
  //
  // Occurs when the selected sequence file changes.
  //
  // The event has a registration method and a reply method.
  // GetEvents_SequenceFileChanged - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_SequenceFileChanged - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // SequenceFileViewMgr_GetEvents_SequenceFileChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // SequenceFileViewMgr_GetEvents_SequenceFileChangedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - newFile: SequenceFileInstance - Specifies the new sequence file.
  //
  // SequenceFileViewMgr_ReplyToEvent_SequenceFileChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // SequenceFileViewMgr_ReplyToEvent_SequenceFileChangedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_SequenceFileChanged(SequenceFileViewMgr_GetEvents_SequenceFileChangedRequest) returns (stream SequenceFileViewMgr_GetEvents_SequenceFileChangedResponse);
  rpc ReplyToEvent_SequenceFileChanged(SequenceFileViewMgr_ReplyToEvent_SequenceFileChangedRequest) returns (SequenceFileViewMgr_ReplyToEvent_SequenceFileChangedResponse); 
  
  
  // Event: SelectionChanged
  //
  // Occurs when the selected steps are changed.
  //
  // The event has a registration method and a reply method.
  // GetEvents_SelectionChanged - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_SelectionChanged - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // SequenceFileViewMgr_GetEvents_SelectionChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // SequenceFileViewMgr_GetEvents_SelectionChangedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // SequenceFileViewMgr_ReplyToEvent_SelectionChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // SequenceFileViewMgr_ReplyToEvent_SelectionChangedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_SelectionChanged(SequenceFileViewMgr_GetEvents_SelectionChangedRequest) returns (stream SequenceFileViewMgr_GetEvents_SelectionChangedResponse);
  rpc ReplyToEvent_SelectionChanged(SequenceFileViewMgr_ReplyToEvent_SelectionChangedRequest) returns (SequenceFileViewMgr_ReplyToEvent_SelectionChangedResponse); 
  
  
  // Event: SequenceChanged
  //
  // Occurs when the current sequence changes.
  //
  // The event has a registration method and a reply method.
  // GetEvents_SequenceChanged - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_SequenceChanged - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // SequenceFileViewMgr_GetEvents_SequenceChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // SequenceFileViewMgr_GetEvents_SequenceChangedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - newSequence: SequenceInstance - Specifies the new sequence.
  //
  // SequenceFileViewMgr_ReplyToEvent_SequenceChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // SequenceFileViewMgr_ReplyToEvent_SequenceChangedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_SequenceChanged(SequenceFileViewMgr_GetEvents_SequenceChangedRequest) returns (stream SequenceFileViewMgr_GetEvents_SequenceChangedResponse);
  rpc ReplyToEvent_SequenceChanged(SequenceFileViewMgr_ReplyToEvent_SequenceChangedRequest) returns (SequenceFileViewMgr_ReplyToEvent_SequenceChangedResponse); 
  
  
  // Event: StepGroupChanged
  //
  // Occurs when the selected step group changes.
  //
  // The event has a registration method and a reply method.
  // GetEvents_StepGroupChanged - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_StepGroupChanged - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // SequenceFileViewMgr_GetEvents_StepGroupChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // SequenceFileViewMgr_GetEvents_StepGroupChangedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - newGroup: StepGroups - Specifies the new value of the step group property.
  //
  // SequenceFileViewMgr_ReplyToEvent_StepGroupChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // SequenceFileViewMgr_ReplyToEvent_StepGroupChangedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_StepGroupChanged(SequenceFileViewMgr_GetEvents_StepGroupChangedRequest) returns (stream SequenceFileViewMgr_GetEvents_StepGroupChangedResponse);
  rpc ReplyToEvent_StepGroupChanged(SequenceFileViewMgr_ReplyToEvent_StepGroupChangedRequest) returns (SequenceFileViewMgr_ReplyToEvent_StepGroupChangedResponse); 
  
  
  // Event: RefreshWindow
  //
  // Occurs when TestStand sends a UIMsg_RefreshWindows message that requires a refresh of the selected sequence file.
  //
  // The event has a registration method and a reply method.
  // GetEvents_RefreshWindow - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_RefreshWindow - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // SequenceFileViewMgr_GetEvents_RefreshWindowRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // SequenceFileViewMgr_GetEvents_RefreshWindowResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // SequenceFileViewMgr_ReplyToEvent_RefreshWindowRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // SequenceFileViewMgr_ReplyToEvent_RefreshWindowResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_RefreshWindow(SequenceFileViewMgr_GetEvents_RefreshWindowRequest) returns (stream SequenceFileViewMgr_GetEvents_RefreshWindowResponse);
  rpc ReplyToEvent_RefreshWindow(SequenceFileViewMgr_ReplyToEvent_RefreshWindowRequest) returns (SequenceFileViewMgr_ReplyToEvent_RefreshWindowResponse); 
  
  
  // Event: SequenceSelectionChanged
  //
  // Occurs when the selected sequences change.
  //
  // The event has a registration method and a reply method.
  // GetEvents_SequenceSelectionChanged - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_SequenceSelectionChanged - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // SequenceFileViewMgr_GetEvents_SequenceSelectionChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // SequenceFileViewMgr_GetEvents_SequenceSelectionChangedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // SequenceFileViewMgr_ReplyToEvent_SequenceSelectionChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // SequenceFileViewMgr_ReplyToEvent_SequenceSelectionChangedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_SequenceSelectionChanged(SequenceFileViewMgr_GetEvents_SequenceSelectionChangedRequest) returns (stream SequenceFileViewMgr_GetEvents_SequenceSelectionChangedResponse);
  rpc ReplyToEvent_SequenceSelectionChanged(SequenceFileViewMgr_ReplyToEvent_SequenceSelectionChangedRequest) returns (SequenceFileViewMgr_ReplyToEvent_SequenceSelectionChangedResponse); 
  
  
  // Event: PropertyObjectSelectionChanged
  //
  // Occurs when the selected property objects change. For example, this event is generated when you change the selection in a VariablesView control that connects to the SequenceFileView Manager control or when you programmatically change the contents of the SelectedPropertyObjects collection.
  //
  // The event has a registration method and a reply method.
  // GetEvents_PropertyObjectSelectionChanged - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_PropertyObjectSelectionChanged - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // SequenceFileViewMgr_GetEvents_PropertyObjectSelectionChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: SequenceFileViewMgrInstance - The id of the SequenceFileViewMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // SequenceFileViewMgr_GetEvents_PropertyObjectSelectionChangedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // SequenceFileViewMgr_ReplyToEvent_PropertyObjectSelectionChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // SequenceFileViewMgr_ReplyToEvent_PropertyObjectSelectionChangedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_PropertyObjectSelectionChanged(SequenceFileViewMgr_GetEvents_PropertyObjectSelectionChangedRequest) returns (stream SequenceFileViewMgr_GetEvents_PropertyObjectSelectionChangedResponse);
  rpc ReplyToEvent_PropertyObjectSelectionChanged(SequenceFileViewMgr_ReplyToEvent_PropertyObjectSelectionChangedRequest) returns (SequenceFileViewMgr_ReplyToEvent_PropertyObjectSelectionChangedResponse); 
  
  
}
message SequenceFileViewMgrInstance {
  // Specifies the handle of the SequenceFileViewMgr instance in the server.
  string id = 1;
}
message SequenceFileViewMgr_SequenceFileViewMgrRequest {
}

message SequenceFileViewMgr_SequenceFileViewMgrResponse {
  // The return type of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance returnValue = 1;
}

message SequenceFileViewMgr_BuildEditArgsRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
}

message SequenceFileViewMgr_BuildEditArgsResponse {
  // The return type of the EditArgs object.
  EditArgsInstance returnValue = 1;
}

message SequenceFileViewMgr_SetSequenceAndGroupRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Specifies the sequence to set in the SequenceFileView Manager control.
  SequenceInstance newSequence = 2;
  // Specifies the step group value to set in the SequenceFileView Manager control.
  StepGroups newGroup = 3;
}

message SequenceFileViewMgr_SetSequenceAndGroupResponse {
}

message SequenceFileViewMgr_RunRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Specifies a custom EditArgs object using this parameter. When you do not pass a custom EditArgs object, the SequenceFileView Manager control builds an EditArgs object according to the current selections.
  ObjectInstance editArgsVal = 2;
}

message SequenceFileViewMgr_RunResponse {
  // A new execution.
  ExecutionInstance returnValue = 1;
}

message SequenceFileViewMgr_RunSelectedStepsRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Specifies a custom InteractiveArgs object using this parameter. When you do not pass a custom InteractiveArgs object, the SequenceFileView Manager control builds an InteractiveArgs object according to the current selections.
  ObjectInstance interactiveArgsVal = 2;
  // Specifies a custom EditArgs object using this parameter. When you do not pass a custom EditArgs object, the SequenceFileView Manager control builds an EditArgs object according to the current selections.
  ObjectInstance editArgsVal = 3;
}

message SequenceFileViewMgr_RunSelectedStepsResponse {
  // A new execution.
  ExecutionInstance returnValue = 1;
}

message SequenceFileViewMgr_BuildInteractiveArgsRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // When this parameter is True, this property launches the Loop on Selected Steps dialog box to create the InteractiveArgs object for the SequenceFileViewMgr.LoopOnSelectedSteps method.
  ObjectInstance createLoopArgs = 2;
}

message SequenceFileViewMgr_BuildInteractiveArgsResponse {
  // A new InteractiveArgs object.
  InteractiveArgsInstance returnValue = 1;
  // If the Loop on Selected Steps dialog box is cancelled, the value of the parameter passed in is True.
  ObjectInstance cancel = 2;
}

message SequenceFileViewMgr_LoopOnSelectedStepsRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Specifies a custom InteractiveArgs object using this parameter. When you do not pass a custom InteractiveArgs object, the SequenceFileView Manager control builds an InteractiveArgs object according to the current selections.
  ObjectInstance interactiveArgsVal = 2;
  // Specifies a custom EditArgs object using this parameter. When you do not pass a custom EditArgs object, the SequenceFileView Manager control builds an EditArgs object according to the current selections.
  ObjectInstance editArgsVal = 3;
}

message SequenceFileViewMgr_LoopOnSelectedStepsResponse {
  // A new execution.
  ExecutionInstance returnValue = 1;
}

message SequenceFileViewMgr_RefreshRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
}

message SequenceFileViewMgr_RefreshResponse {
}

message SequenceFileViewMgr_RefreshStepRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Specifies the index of the step to refresh. Passing -1 refreshes all steps in the connected SequenceView control.
  int32 stepIndex = 2;
}

message SequenceFileViewMgr_RefreshStepResponse {
}

message SequenceFileViewMgr_GetCommandRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Specifies the type of Command object to create.
  CommandKinds cmdKind = 2;
  // Use this parameter on commands that are sets  to specify which command in the set to return.
  int32 Index = 3;
}

message SequenceFileViewMgr_GetCommandResponse {
  // The return type of the Command object.
  CommandInstance returnValue = 1;
}

message SequenceFileViewMgr_GetCaptionTextRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Specifies the type of caption source from which to obtain text.
  CaptionSources captionSource = 2;
  // For certain caption sources, this parameter specifies whether to return a long or short version of the caption text. Refer to the CaptionSources enumeration for more information about determining when this option affects the text and for more information about the difference between the long and short versions of the text.
  bool longName = 3;
  // Specifies a format expression to evaluate when generating the caption text. For the CaptionSource_MacroExpression caption source, specify a format expression that evaluates to a string value that contains macros that specify other caption sources. For all other caption sources, specify an expression that evaluates to a string value that contains the characters %1.  The method replaces the %1 characters with the text from the caption source. Pass an empty string to use the default format string for the caption source.
  string formatExpression = 4;
}

message SequenceFileViewMgr_GetCaptionTextResponse {
  // The current text for the caption source you specify.
  string returnValue = 1;
}

message SequenceFileViewMgr_GetImageNameRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Specifies the type of image source from which to obtain an image name.
  ImageSources imageSource = 2;
}

message SequenceFileViewMgr_GetImageNameResponse {
  // The current image name for the image source you specify.
  string returnValue = 1;
}

message SequenceFileViewMgr_ConnectCommandRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Specifies the button or checkbox control to which the command connects.
  ObjectInstance uiObj = 2;
  // Specifies the type of command to connect.
  CommandKinds cmdKind = 3;
  // For CommandKinds that are sets, this parameter indexes the set to obtain a particular command.
  int32 Index = 4;
  // Specifies the options for the CommandConnection. Refer to the CommandConnectionOptions constants for more information about options for the CommandConnection object.
  CommandConnectionOptions opts = 5;
}

message SequenceFileViewMgr_ConnectCommandResponse {
  // A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned.
  CommandConnectionInstance returnValue = 1;
}

message SequenceFileViewMgr_ConnectCaptionRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Specifies the visible control or element of a visible control to which the caption source connects. Pass a Label, ExpressionEdit, or StatusBarPane.
  ObjectInstance uiObj = 2;
  // Specifies the type of caption source to connect.
  CaptionSources captionSource = 3;
  // For certain caption sources, this parameter specifies whether the connection displays a long or short version of the caption text. Refer to the CaptionSources enumeration for more information about determining when this option affects a caption source and for more information about the difference between the long and short versions of the text.
  bool longName = 4;
}

message SequenceFileViewMgr_ConnectCaptionResponse {
  // A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned.
  CaptionConnectionInstance returnValue = 1;
}

message SequenceFileViewMgr_ConnectSequenceFileListRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Use a ComboBox, ListBarPage, or ListBox to display the list of sequence files.
  ObjectInstance uiObj = 2;
  // When this parameter is True, TestStand displays the sequence files with full pathnames.
  bool fullPath = 3;
}

message SequenceFileViewMgr_ConnectSequenceFileListResponse {
  // A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned.
  SequenceFileListConnectionInstance returnValue = 1;
}

message SequenceFileViewMgr_ConnectSequenceListRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Use ComboBox, ListBarPage, or ListBox to display the list of sequence files.
  ObjectInstance uiObj = 2;
}

message SequenceFileViewMgr_ConnectSequenceListResponse {
  // A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned.
  SequenceListConnectionInstance returnValue = 1;
}

message SequenceFileViewMgr_ConnectStepGroupListRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Use a ComboBox, ListBarPage, or ListBox to display the list of step groups.
  ObjectInstance uiObj = 2;
}

message SequenceFileViewMgr_ConnectStepGroupListResponse {
  // A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned.
  StepGroupListConnectionInstance returnValue = 1;
}

message SequenceFileViewMgr_ConnectSequenceViewRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Specifies the reference to a SequenceView control that displays the current sequence and step group.
  ObjectInstance uiObj = 2;
}

message SequenceFileViewMgr_ConnectSequenceViewResponse {
  // A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned.
  SequenceViewConnectionInstance returnValue = 1;
}

message SequenceFileViewMgr_ConnectImageRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Specifies the visible control or element of a visible control to which the caption source connects. Pass a StatusBarPane or Button.
  ObjectInstance uiObj = 2;
  // Specifies the type of image source to connect.
  ImageSources imageSource = 3;
}

message SequenceFileViewMgr_ConnectImageResponse {
  // A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned.
  ImageConnectionInstance returnValue = 1;
}

message SequenceFileViewMgr_RefreshStepExRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Specifies a particular step group.
  StepGroups group = 2;
  // Specifies the zero-based index in the step group of the step to refresh. Pass -1 to refresh all the steps in all groups in the connected SequenceView control.
  int32 stepIndex = 3;
}

message SequenceFileViewMgr_RefreshStepExResponse {
}

message SequenceFileViewMgr_NewEditContextRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
}

message SequenceFileViewMgr_NewEditContextResponse {
  // The return type of the SequenceContext object.
  SequenceContextInstance returnValue = 1;
}

message SequenceFileViewMgr_ConnectVariablesRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Specifies the reference to a VariablesView control that displays the current sequence context.
  ObjectInstance uiObj = 2;
}

message SequenceFileViewMgr_ConnectVariablesResponse {
  // A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned.
  VariablesConnectionInstance returnValue = 1;
}

message SequenceFileViewMgr_ConnectInsertionPaletteRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Specifies the reference to an InsertionPalette control that displays the step type list and templates list.
  ObjectInstance uiObj = 2;
}

message SequenceFileViewMgr_ConnectInsertionPaletteResponse {
  // A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned.
  InsertionPaletteConnectionInstance returnValue = 1;
}

message SequenceFileViewMgr_Get_ConnectionsRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
}

message SequenceFileViewMgr_Get_ConnectionsResponse {
  // Returns the connections of this control.
  SequenceFileViewMgrConnectionsInstance returnValue = 1;
}

message SequenceFileViewMgr_Get_ExecutionEntryPointsRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
}

message SequenceFileViewMgr_Get_ExecutionEntryPointsResponse {
  // Returns the set of Execution entry points the model sequence file for the selected sequence file defines. The collection includes only entry points that set the Sequence.ShowEntryPointForFileWindow property.
  EntryPointsInstance returnValue = 1;
}

message SequenceFileViewMgr_Set_SequenceFileRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Specifies the selected sequence file the controls connected to the SequenceFileView Manager control display.
  SequenceFileInstance val = 2;
}

message SequenceFileViewMgr_Set_SequenceFileResponse {
}

message SequenceFileViewMgr_Get_SequenceFileRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
}

message SequenceFileViewMgr_Get_SequenceFileResponse {
  // Specifies the selected sequence file the controls connected to the SequenceFileView Manager control display.
  SequenceFileInstance returnValue = 1;
}

message SequenceFileViewMgr_Set_SequenceRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Specifies the current sequence.
  SequenceInstance val = 2;
}

message SequenceFileViewMgr_Set_SequenceResponse {
}

message SequenceFileViewMgr_Get_SequenceRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
}

message SequenceFileViewMgr_Get_SequenceResponse {
  // Specifies the current sequence.
  SequenceInstance returnValue = 1;
}

message SequenceFileViewMgr_Set_StepGroupRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Specifies the selected step group.
  StepGroups val = 2;
}

message SequenceFileViewMgr_Set_StepGroupResponse {
}

message SequenceFileViewMgr_Get_StepGroupRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
}

message SequenceFileViewMgr_Get_StepGroupResponse {
  // Specifies the selected step group.
  StepGroups returnValue = 1;
}

message SequenceFileViewMgr_Get_ConfigurationEntryPointsRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
}

message SequenceFileViewMgr_Get_ConfigurationEntryPointsResponse {
  // Returns the collection of Configuration entry points for the selected sequence file.
  EntryPointsInstance returnValue = 1;
}

message SequenceFileViewMgr_Get_SelectedStepsRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
}

message SequenceFileViewMgr_Get_SelectedStepsResponse {
  // Returns a collection of selected steps.
  SelectedStepsInstance returnValue = 1;
}

message SequenceFileViewMgr_Set_ReplaceSequenceFileOnCloseRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Specifies whether the SequenceFileView Manager control selects another sequence file when the currently selected sequence file closes.
  bool val = 2;
}

message SequenceFileViewMgr_Set_ReplaceSequenceFileOnCloseResponse {
}

message SequenceFileViewMgr_Get_ReplaceSequenceFileOnCloseRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
}

message SequenceFileViewMgr_Get_ReplaceSequenceFileOnCloseResponse {
  // Specifies whether the SequenceFileView Manager control selects another sequence file when the currently selected sequence file closes.
  bool returnValue = 1;
}

message SequenceFileViewMgr_Get_ApplicationMgrRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
}

message SequenceFileViewMgr_Get_ApplicationMgrResponse {
  // Returns a reference to the Application Manager control of the application. The value is NULL when no Application Manager control exists within the process.
  ObjectInstance returnValue = 1;
}

message SequenceFileViewMgr_Set_UserDataRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Stores data associated with this control.
  ObjectInstance val = 2;
}

message SequenceFileViewMgr_Set_UserDataResponse {
}

message SequenceFileViewMgr_Get_UserDataRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
}

message SequenceFileViewMgr_Get_UserDataResponse {
  // Stores data associated with this control.
  ObjectInstance returnValue = 1;
}

message SequenceFileViewMgr_Set_StepGroupModeRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // For connected controls that display steps, this property specifies whether to display all steps in the Cleanup, Main, and Setup groups or to display only the steps in the current step group.
  StepGroupModes val = 2;
}

message SequenceFileViewMgr_Set_StepGroupModeResponse {
}

message SequenceFileViewMgr_Get_StepGroupModeRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
}

message SequenceFileViewMgr_Get_StepGroupModeResponse {
  // For connected controls that display steps, this property specifies whether to display all steps in the Cleanup, Main, and Setup groups or to display only the steps in the current step group.
  StepGroupModes returnValue = 1;
}

message SequenceFileViewMgr_Get_UndoStackRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
}

message SequenceFileViewMgr_Get_UndoStackResponse {
  // Returns the UndoStack for the currently selected SequenceFile.
  UndoStackInstance returnValue = 1;
}

message SequenceFileViewMgr_Get_SelectedSequencesRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
}

message SequenceFileViewMgr_Get_SelectedSequencesResponse {
  // Returns a collection of selected sequences.
  SelectedSequencesInstance returnValue = 1;
}

message SequenceFileViewMgr_Get_SelectedPropertyObjectsRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
}

message SequenceFileViewMgr_Get_SelectedPropertyObjectsResponse {
  // Returns a collection of selected property objects.
  SelectedPropertyObjectsInstance returnValue = 1;
}

message SequenceFileViewMgr_GetEvents_SequenceFileChangedRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message SequenceFileViewMgr_GetEvents_SequenceFileChangedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the new sequence file.
  SequenceFileInstance newFile = 2;
}

message SequenceFileViewMgr_ReplyToEvent_SequenceFileChangedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message SequenceFileViewMgr_ReplyToEvent_SequenceFileChangedResponse {
}

message SequenceFileViewMgr_GetEvents_SelectionChangedRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message SequenceFileViewMgr_GetEvents_SelectionChangedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message SequenceFileViewMgr_ReplyToEvent_SelectionChangedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message SequenceFileViewMgr_ReplyToEvent_SelectionChangedResponse {
}

message SequenceFileViewMgr_GetEvents_SequenceChangedRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message SequenceFileViewMgr_GetEvents_SequenceChangedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the new sequence.
  SequenceInstance newSequence = 2;
}

message SequenceFileViewMgr_ReplyToEvent_SequenceChangedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message SequenceFileViewMgr_ReplyToEvent_SequenceChangedResponse {
}

message SequenceFileViewMgr_GetEvents_StepGroupChangedRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message SequenceFileViewMgr_GetEvents_StepGroupChangedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the new value of the step group property.
  StepGroups newGroup = 2;
}

message SequenceFileViewMgr_ReplyToEvent_StepGroupChangedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message SequenceFileViewMgr_ReplyToEvent_StepGroupChangedResponse {
}

message SequenceFileViewMgr_GetEvents_RefreshWindowRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message SequenceFileViewMgr_GetEvents_RefreshWindowResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message SequenceFileViewMgr_ReplyToEvent_RefreshWindowRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message SequenceFileViewMgr_ReplyToEvent_RefreshWindowResponse {
}

message SequenceFileViewMgr_GetEvents_SequenceSelectionChangedRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message SequenceFileViewMgr_GetEvents_SequenceSelectionChangedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message SequenceFileViewMgr_ReplyToEvent_SequenceSelectionChangedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message SequenceFileViewMgr_ReplyToEvent_SequenceSelectionChangedResponse {
}

message SequenceFileViewMgr_GetEvents_PropertyObjectSelectionChangedRequest {
  // The id of the SequenceFileViewMgr object.
  SequenceFileViewMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message SequenceFileViewMgr_GetEvents_PropertyObjectSelectionChangedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message SequenceFileViewMgr_ReplyToEvent_PropertyObjectSelectionChangedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message SequenceFileViewMgr_ReplyToEvent_PropertyObjectSelectionChangedResponse {
}

// ExecutionViewMgr
//
// An ExecutionView Manager control performs the following tasks to manage how other visible TestStand User Interface (UI) Controls view and interact with a selected TestStand execution:    * Designates an execution as the selected execution.    * Tracks which thread, stack frame, sequence, step group, and steps are selected in the selected execution.    * Displays aspects of the selected execution in the visible TestStand UI Controls to which the control connects.    * Enables visible TestStand UI Controls to which the control connects to change the selected thread, stack frame, sequence, step group, and steps.    * Generates events to notify the application of the progress and state of the selected execution.    * Provides debugging commands.    * Updates the ReportView control to show the current report for the selected execution.
// An application must have one ExecutionView Manager control for each location, such as a window, form, or panel, in which you display an execution or let the user select a current execution.
//
service ExecutionViewMgr {
  // Service: ExecutionViewMgr
  //
  // Creates a new ExecutionViewMgr instance
  //
  // ExecutionViewMgrRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //
  // ExecutionViewMgrResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionViewMgrInstance - The return type of the ExecutionViewMgr object.
  //
  rpc ExecutionViewMgr(ExecutionViewMgr_ExecutionViewMgrRequest) returns (ExecutionViewMgr_ExecutionViewMgrResponse);

  // Method: TerminateExecution
  //
  // Terminates the current execution if it is running.
  //
  // The ExecutionView Manager control generates the ExecutionViewMgr.TerminationStateChanged event after calling this method and the ExecutionViewMgr.EndExecution event when the execution has ended.
  //
  // ExecutionViewMgr_TerminateExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //
  // ExecutionViewMgr_TerminateExecutionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc TerminateExecution(ExecutionViewMgr_TerminateExecutionRequest) returns (ExecutionViewMgr_TerminateExecutionResponse);
  
  
  // Method: BreakExecution
  //
  // Attempts to pause the current execution if it is running.
  //
  // The ExecutionView Manager control generates an ExecutionViewMgr.Break event when the execution suspends.
  //
  // ExecutionViewMgr_BreakExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //
  // ExecutionViewMgr_BreakExecutionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc BreakExecution(ExecutionViewMgr_BreakExecutionRequest) returns (ExecutionViewMgr_BreakExecutionResponse);
  
  
  // Method: ResumeExecution
  //
  // Resumes the paused execution.
  //
  // ExecutionViewMgr_ResumeExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //
  // ExecutionViewMgr_ResumeExecutionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ResumeExecution(ExecutionViewMgr_ResumeExecutionRequest) returns (ExecutionViewMgr_ResumeExecutionResponse);
  
  
  // Method: RestartExecution
  //
  // Restarts the stopped execution.
  //
  // ExecutionViewMgr_RestartExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //
  // ExecutionViewMgr_RestartExecutionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc RestartExecution(ExecutionViewMgr_RestartExecutionRequest) returns (ExecutionViewMgr_RestartExecutionResponse);
  
  
  // Method: AbortExecution
  //
  // Attempts to abort the current execution if it is running.
  //
  // The ExecutionView Manager control generates the ExecutionViewMgr.TerminationStateChanged event after calling this method and then generates the ExecutionViewMgr.EndExecution event when the execution has ended.
  //
  // ExecutionViewMgr_AbortExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //
  // ExecutionViewMgr_AbortExecutionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc AbortExecution(ExecutionViewMgr_AbortExecutionRequest) returns (ExecutionViewMgr_AbortExecutionResponse);
  
  
  // Method: BuildEditArgs
  //
  // Creates an EditArgs object that reflects the selection state of the ExecutionView Manager control.
  //
  // Use this method to create an EditArgs object, which you can modify before you pass it as the optional parameter to a method that starts an execution.
  //
  // ExecutionViewMgr_BuildEditArgsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //
  // ExecutionViewMgr_BuildEditArgsResponse - The response message from the server. It provides the return value.
  //    - returnValue: EditArgsInstance - A new EditArgs object. 
  //
  rpc BuildEditArgs(ExecutionViewMgr_BuildEditArgsRequest) returns (ExecutionViewMgr_BuildEditArgsResponse);
  
  
  // Method: BuildInteractiveArgs
  //
  // Creates an InteractiveArgs object that reflects the selection state of the ExecutionView Manager control.
  //
  // Use this method to create an InteractiveArgs object, which you can modify before you pass it as an optional parameter to a method that starts an interactive execution.
  //
  // ExecutionViewMgr_BuildInteractiveArgsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //    - createLoopArgs: ObjectInstance - When this parameter is True, this property launches the Loop on Selected Steps dialog box to create the InteractiveArgs for the ExecutionViewMgr.LoopOnSelectedSteps method.
  //
  // ExecutionViewMgr_BuildInteractiveArgsResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: InteractiveArgsInstance - The new InteractiveArgs object. 
  //    - cancel: ObjectInstanc - If the Loop on Selected Steps dialog box is cancelled, the value of the parameter passed in is True.
  //
  rpc BuildInteractiveArgs(ExecutionViewMgr_BuildInteractiveArgsRequest) returns (ExecutionViewMgr_BuildInteractiveArgsResponse);
  
  
  // Method: Refresh
  //
  // Refreshes all connected controls.
  //
  // Typically, you do not call this method unless you have changed the state of the execution directly using the API. Call this method so these types of changes are reflected in the connected controls.
  //
  // ExecutionViewMgr_RefreshRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //    - seqCtxt: ObjectInstance - Specifies the SequenceContext used to refresh the controls. When you do pass a SequenceContext, the ExecutionView Manager control uses the current SequenceContext to refresh the controls.
  //
  // ExecutionViewMgr_RefreshResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Refresh(ExecutionViewMgr_RefreshRequest) returns (ExecutionViewMgr_RefreshResponse);
  
  
  // Method: RefreshStep
  //
  // Refreshes a step in a SequenceView control connected to the ExecutionView Manager control.
  // Note: When the value of the ExecutionViewMgr.StepGroupMode property is not StepGroupMode_OneGroup, call ExecutionViewMgr.RefreshStepEx instead so you can specify the step group that contains the step.
  //
  // Typically, you do not call this method unless you have changed the state of the step directly using the TestStand API. Call this method so these types of changes are reflected in connected SequenceView controls.
  //
  // ExecutionViewMgr_RefreshStepRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //    - stepIndex: int32 - Specifies the index of the step to refresh. Passing -1 refreshes all the steps in the connected SequenceView control.
  //
  // ExecutionViewMgr_RefreshStepResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc RefreshStep(ExecutionViewMgr_RefreshStepRequest) returns (ExecutionViewMgr_RefreshStepResponse);
  
  
  // Method: GetCommand
  //
  // Creates a Command object. When applicable, the command operates on the items the ExecutionView Manager control selects.
  //
  // ExecutionViewMgr_GetCommandRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //    - cmdKind: CommandKinds - Specifies the type of Command object to create.
  //    - commandIndex: int32 - Pass this parameter on commands that are sets  to specify which command in the set to return.
  //
  // ExecutionViewMgr_GetCommandResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommandInstance - The return type of the Command object.
  //
  rpc GetCommand(ExecutionViewMgr_GetCommandRequest) returns (ExecutionViewMgr_GetCommandResponse);
  
  
  // Method: GetCaptionText
  //
  // Returns the current caption text for a caption source in an ExecutionView Manager control.
  //
  // ExecutionViewMgr_GetCaptionTextRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //    - captionSource: CaptionSources - Specifies the type of caption source from which to obtain text.
  //    - formatExpression: string - Specifies a format expression to evaluate when generating the caption text. For the CaptionSource_MacroExpression caption source, specify a format expression that evaluates to a string value that contains macros that specify other caption sources. For all other caption sources, specify an expression that evaluates to a string value that contains the characters %1.  The method replaces the %1 characters with the text from the caption source. Pass an empty string to use the default format string for the caption source.
  //
  // ExecutionViewMgr_GetCaptionTextResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The current text for the caption source you specify. 
  //
  rpc GetCaptionText(ExecutionViewMgr_GetCaptionTextRequest) returns (ExecutionViewMgr_GetCaptionTextResponse);
  
  
  // Method: GetImageName
  //
  // Returns the current image name for an image source in an ExecutionView Manager control. Use the Images.FindImage method to acquire a reference to the image.
  //
  // ExecutionViewMgr_GetImageNameRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //    - imageSource: ImageSources - Specifies the type of image source from which to obtain an image name.
  //
  // ExecutionViewMgr_GetImageNameResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The current image name for the image source you specify. 
  //
  rpc GetImageName(ExecutionViewMgr_GetImageNameRequest) returns (ExecutionViewMgr_GetImageNameResponse);
  
  
  // Method: GetNumericValue
  //
  // Returns the current numeric value for a numeric source in an ExecutionView Manager control.
  //
  // ExecutionViewMgr_GetNumericValueRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //    - numericSource: NumericSources - Specifies the type of numeric source from which to obtain a numeric value.
  //
  // ExecutionViewMgr_GetNumericValueResponse - The response message from the server. It provides the return value.
  //    - returnValue: double - The current value for the numeric source you specify. 
  //
  rpc GetNumericValue(ExecutionViewMgr_GetNumericValueRequest) returns (ExecutionViewMgr_GetNumericValueResponse);
  
  
  // Method: RunSelectedSteps
  //
  // Interactively executes the selected steps within the current execution.
  //
  // Note: You can call this method only when the execution is paused and the execution is not in interactive mode.
  //
  // ExecutionViewMgr_RunSelectedStepsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //    - interArgs: ObjectInstance - Specifies an InteractiveArgs object. When you do not pass InteractiveArgs objects, the ExecutionView Manager control creates the appropriate InteractiveArgs objects.
  //
  // ExecutionViewMgr_RunSelectedStepsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc RunSelectedSteps(ExecutionViewMgr_RunSelectedStepsRequest) returns (ExecutionViewMgr_RunSelectedStepsResponse);
  
  
  // Method: LoopOnSelectedSteps
  //
  // Starts an interactive execution that loops on the currently selected steps.
  //
  // Note: You can call this method only when the execution is paused and the execution is not in interactive mode.
  //
  // ExecutionViewMgr_LoopOnSelectedStepsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //    - interArgs: ObjectInstance - Specifies an InteractiveArgs object. When you do not pass an InteractiveArgs object, the ExecutionView Manager control creates the appropriate InteractiveArgs object.
  //
  // ExecutionViewMgr_LoopOnSelectedStepsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc LoopOnSelectedSteps(ExecutionViewMgr_LoopOnSelectedStepsRequest) returns (ExecutionViewMgr_LoopOnSelectedStepsResponse);
  
  
  // Method: ConnectCommand
  //
  // Connects a command source in an ExecutionView Manager control to a TestStand button or checkbox control. The connection automatically updates the enabled, visible, and caption properties of the button or checkbox based on the state of the current execution. Clicking the button or enabling the checkbox executes the command.
  //
  // To disconnect an existing connection, you must first obtain the ExecutionViewMgrConnections object from the ExecutionViewMgr.Connections property. Then, access the ExecutionViewMgrConnections.Command property to obtain the CommandConnections collection.
  //
  // ExecutionViewMgr_ConnectCommandRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //    - uiObj: ObjectInstance - Specifies the button or checkbox control to which the command connects.
  //    - cmdKind: CommandKinds - Specifies the type of command to connect.
  //    - opts: int32 - Specifies the options for the CommandConnection. Refer to the CommandConnectionOptions constants for more information about the options for the CommandConnection object.
  //
  // ExecutionViewMgr_ConnectCommandResponse - The response message from the server. It provides the return value.
  //    - returnValue: CommandConnectionInstance - A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned. 
  //
  rpc ConnectCommand(ExecutionViewMgr_ConnectCommandRequest) returns (ExecutionViewMgr_ConnectCommandResponse);
  
  
  // Method: ConnectCaption
  //
  // Connects a caption source in an ExecutionView Manager control to a visible control or an element of a visible control. The connection automatically updates the visible control with text that describes an aspect of the current application state.
  //
  // To disconnect an existing connection, you must first obtain the ExecutionViewMgrConnections object from the ExecutionViewMgr.Connections property. Then, access the ExecutionViewMgrConnections.Caption property to obtain the CaptionConnections collection.
  //
  // ExecutionViewMgr_ConnectCaptionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //    - uiObj: ObjectInstance - Specifies the visible control or element of a visible control to which the caption source connects. Pass a Label, ExpressionEdit, or StatusBarPane control.
  //    - captionSource: CaptionSources - Specifies the type of caption source to connect.
  //
  // ExecutionViewMgr_ConnectCaptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: CaptionConnectionInstance - A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned. 
  //
  rpc ConnectCaption(ExecutionViewMgr_ConnectCaptionRequest) returns (ExecutionViewMgr_ConnectCaptionResponse);
  
  
  // Method: ConnectExecutionView
  //
  // Connects a SequenceView control to display the steps of the running sequence in the execution.
  //
  // To disconnect an existing connection, you must first obtain the ExecutionViewMgrConnections object from the ExecutionViewMgr.Connections property. Then, access the ExecutionViewMgrConnections.ExecutionView property to obtain the ExecutionViewConnections collection.
  //
  // ExecutionViewMgr_ConnectExecutionViewRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //    - uiObj: ObjectInstance - Specifies the SequenceView control to connect to the ExecutionViewConnection.
  //    - opts: int32 - Specifies the options for the ExecutionViewConnection. Refer to the ExecutionViewOptions constants for more information about the options for the ExecutionViewConnection.
  //
  // ExecutionViewMgr_ConnectExecutionViewResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionViewConnectionInstance - A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned. 
  //
  rpc ConnectExecutionView(ExecutionViewMgr_ConnectExecutionViewRequest) returns (ExecutionViewMgr_ConnectExecutionViewResponse);
  
  
  // Method: ConnectReportView
  //
  // Connects a ReportView control to display the report of the selected execution in the ExecutionView Manager control.
  //
  // To disconnect an existing connection, you must first obtain the ExecutionViewMgrConnections object from the ExecutionViewMgr.Connections property. Then, access the ExecutionViewMgrConnections.ReportView property to obtain the ReportViewConnections collection.
  //
  // ExecutionViewMgr_ConnectReportViewRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //    - uiObj: ObjectInstance - Specifies the ReportView control to connect to the ExecutionView Manager control.
  //
  // ExecutionViewMgr_ConnectReportViewResponse - The response message from the server. It provides the return value.
  //    - returnValue: ReportViewConnectionInstance - A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned. 
  //
  rpc ConnectReportView(ExecutionViewMgr_ConnectReportViewRequest) returns (ExecutionViewMgr_ConnectReportViewResponse);
  
  
  // Method: ConnectExecutionList
  //
  // Connects a ComboBox, ListBarPage, or ListBox control to the list of running executions. The connected item displays the executions and allows the user to select an execution in the ExecutionView Manager control.
  //
  // To disconnect an existing connection, you must first obtain the ExecutionViewMgrConnections object from the ExecutionViewMgr.Connections property. Then, access the ExecutionViewMgrConnections.ExecutionList property to obtain the ExecutionListConnections collection.
  //
  // ExecutionViewMgr_ConnectExecutionListRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //    - uiObj: ObjectInstance - Use a ComboBox, ListBarPage, or ListBox to display the list of executions.
  //
  // ExecutionViewMgr_ConnectExecutionListResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionListConnectionInstance - A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned. 
  //
  rpc ConnectExecutionList(ExecutionViewMgr_ConnectExecutionListRequest) returns (ExecutionViewMgr_ConnectExecutionListResponse);
  
  
  // Method: ConnectCallStack
  //
  // Connects a ComboBox, ListBarPage, or ListBox control to display the call stack of the paused execution.
  //
  // To disconnect an existing connection, you must first obtain the ExecutionViewMgrConnections object from the ExecutionViewMgr.Connections property. Then, access the ExecutionViewMgrConnections.CallStack property to obtain the CallstackConnections collection.
  //
  // ExecutionViewMgr_ConnectCallStackRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //    - uiObj: ObjectInstance - Specifies the control or element to which the call stack connection connects. Pass a ComboBox, ListBarPage, or ListBox.
  //
  // ExecutionViewMgr_ConnectCallStackResponse - The response message from the server. It provides the return value.
  //    - returnValue: CallStackConnectionInstance - A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned. 
  //
  rpc ConnectCallStack(ExecutionViewMgr_ConnectCallStackRequest) returns (ExecutionViewMgr_ConnectCallStackResponse);
  
  
  // Method: ConnectThreadList
  //
  // Connects the list of threads in the current execution to a control. The connected control displays the threads when the execution is paused and allows the user to specify a thread as the foreground thread.
  //
  // You can connect a ComboBox, ListBarPage, or ListBox to this connection.
  // To disconnect an existing connection, you must first obtain the ExecutionViewMgrConnections object from the ExecutionViewMgr.Connections property. Then, access the ExecutionViewMgrConnections.ThreadList property to obtain the ThreadListConnections collection.
  //
  // ExecutionViewMgr_ConnectThreadListRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //    - uiObj: ObjectInstance - Specifies a control or control element to connect to the ThreadListConnection.
  //
  // ExecutionViewMgr_ConnectThreadListResponse - The response message from the server. It provides the return value.
  //    - returnValue: ThreadListConnectionInstance - A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned. 
  //
  rpc ConnectThreadList(ExecutionViewMgr_ConnectThreadListRequest) returns (ExecutionViewMgr_ConnectThreadListResponse);
  
  
  // Method: ConnectImage
  //
  // Connects an image source in an ExecutionView Manager control to a visible control or an element of a visible control. The connection automatically updates the visible control with an icon that describes an aspect of the current application state.
  //
  // To disconnect an existing connection, you must first obtain the ExecutionViewMgrConnections object from the ExecutionViewMgr.Connections property. Then, access the ExecutionViewMgrConnections.Image property to obtain the ImageConnections collection.
  //
  // ExecutionViewMgr_ConnectImageRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //    - uiObj: ObjectInstance - Specifies a visible control or element of a visible control to which the caption source connects. Pass a StatusBarPane or Button.
  //    - imageSource: ImageSources - Specifies the type of image source to connect.
  //
  // ExecutionViewMgr_ConnectImageResponse - The response message from the server. It provides the return value.
  //    - returnValue: ImageConnectionInstance - A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned. 
  //
  rpc ConnectImage(ExecutionViewMgr_ConnectImageRequest) returns (ExecutionViewMgr_ConnectImageResponse);
  
  
  // Method: ConnectNumeric
  //
  // Connects a numeric source in an ExecutionView Manager control to an element of a visible control. The connection automatically updates the visible control with the numeric information that describes an aspect of the current application state.
  //
  // Use this method to display an execution progress bar in a StatusBar pane.
  // To disconnect an existing connection, you must first obtain the ExecutionViewMgrConnections object from the ExecutionViewMgr.Connections property. Then, access the ExecutionViewMgrConnections.Numeric property to obtain the NumericConnections collection.
  //
  // ExecutionViewMgr_ConnectNumericRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //    - uiObj: ObjectInstance - Specifies the element of a visible control to which the caption source connects. Pass a StatusBarPane.
  //    - numericSource: NumericSources - Specifies the type of numeric source from which to obtain a numeric value.
  //
  // ExecutionViewMgr_ConnectNumericResponse - The response message from the server. It provides the return value.
  //    - returnValue: NumericConnectionInstance - A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned. 
  //
  rpc ConnectNumeric(ExecutionViewMgr_ConnectNumericRequest) returns (ExecutionViewMgr_ConnectNumericResponse);
  
  
  // Method: RefreshStepEx
  //
  // Refreshes a step in all connected SequenceView controls.
  //
  // Typically, you do not call this method unless you change the state of the step directly using the TestStand API.
  //
  // ExecutionViewMgr_RefreshStepExRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //    - group: StepGroups - Specifies a particular step group.
  //    - stepIndex: int32 - Specifies the zero-based index in the step group of the step to refresh. Pass -1 to refresh all the steps in all groups in the connected SequenceView controls.
  //
  // ExecutionViewMgr_RefreshStepExResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc RefreshStepEx(ExecutionViewMgr_RefreshStepExRequest) returns (ExecutionViewMgr_RefreshStepExResponse);
  
  
  // Method: NewEditContext
  //
  // Returns a SequenceContext object that has a Step property that has only properties common to all the currently selected steps. Use the SequenceContext.GetMultipleValues method to determine whether the values of the Step subproperties are common across all the currently selected steps.
  //
  // ExecutionViewMgr_NewEditContextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //
  // ExecutionViewMgr_NewEditContextResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceContextInstance - The return type of the SequenceContext object.
  //
  rpc NewEditContext(ExecutionViewMgr_NewEditContextRequest) returns (ExecutionViewMgr_NewEditContextResponse);
  
  
  // Method: ConnectVariables
  //
  // Connects a VariablesView control to display the current sequence context of the ExecutionView Manager control.
  //
  // To disconnect an existing connection, you must first obtain the ExecutionViewMgrConnections object from the ExecutionViewMgr.Connections property. Then, access the  ExecutionViewMgrConnections.Variables property to obtain the VariablesConnections collection.
  //
  // ExecutionViewMgr_ConnectVariablesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //    - uiObj: ObjectInstance - Specifies the reference to a VariablesView control that displays the current sequence context.
  //
  // ExecutionViewMgr_ConnectVariablesResponse - The response message from the server. It provides the return value.
  //    - returnValue: VariablesConnectionInstance - A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned. 
  //
  rpc ConnectVariables(ExecutionViewMgr_ConnectVariablesRequest) returns (ExecutionViewMgr_ConnectVariablesResponse);
  
  

  // Property: Execution
  //
  // Specifies the execution selected in the ExecutionView Manager control.
  //
  // An execution cannot be selected in more than one ExecutionView Manager control at a time. The ExecutionView Manager control generates an ExecutionViewMgr.ExecutionChanged event when this property changes.
  //
  // ExecutionViewMgr_Set_ExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //    - val: ExecutionInstance - Specifies the execution selected in the ExecutionView Manager control. 
  //
  // ExecutionViewMgr_Set_ExecutionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExecutionViewMgr_Get_ExecutionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //
  // ExecutionViewMgr_Get_ExecutionResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionInstance - Specifies the execution selected in the ExecutionView Manager control. 
  //
  rpc Set_Execution(ExecutionViewMgr_Set_ExecutionRequest) returns (ExecutionViewMgr_Set_ExecutionResponse);
  rpc Get_Execution(ExecutionViewMgr_Get_ExecutionRequest) returns (ExecutionViewMgr_Get_ExecutionResponse);
  
  
  // Property: Connections
  //
  // Accesses the connections of the ExecutionView Manager control.
  //
  // ExecutionViewMgr_Get_ConnectionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //
  // ExecutionViewMgr_Get_ConnectionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionViewMgrConnectionsInstance - Accesses the connections of the ExecutionView Manager control. 
  //
  rpc Get_Connections(ExecutionViewMgr_Get_ConnectionsRequest) returns (ExecutionViewMgr_Get_ConnectionsResponse);
  
  
  // Property: RunState
  //
  // Returns the run state of the execution.
  //
  // The ExecutionView Manager control generates the ExecutionViewMgr.RunStateChanged event when this property changes. The value this property obtains does not necessarily correspond to the value the Execution.GetStates  method obtains. The Execution.GetStates method returns the instantaneous state of the execution, while the ExecutionViewMgr.RunState property returns the current state the ExecutionView Manager control displays.
  // Note: When you write a user interface that uses an ExecutionView Manager control, National Instruments recommends using the ExecutionViewMgr.RunState and ExecutionViewMgr.TerminationState properties instead of directly calling the Execution.GetStates method on the execution. A slight delay exists between when the instantaneous state of the execution changes and when TestStand updates the state this property returns to reflect the change. This occurs because the ExecutionViewMgr.RunState and ExecutionViewMgr.TerminationState properties do not change until TestStand processes the UIMessages involved. Thus, use the ExecutionViewMgr.RunState and ExecutionViewMgr.TerminationState properties instead because these properties reflect what the user interface actually displays.
  //
  // ExecutionViewMgr_Get_RunStateRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //
  // ExecutionViewMgr_Get_RunStateResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionRunStates - Returns the run state of the execution. 
  //
  rpc Get_RunState(ExecutionViewMgr_Get_RunStateRequest) returns (ExecutionViewMgr_Get_RunStateResponse);
  
  
  // Property: TerminationState
  //
  // Returns the termination state of the execution.
  //
  // The ExecutionView Manager control generates the ExecutionViewMgr.TerminationStateChanged event when this property changes. The value obtained from this property does not necessarily correspond to the value obtained from the Execution.GetStates  method. The Execution.GetStates method returns the instantaneous state of the execution, while the ExecutionViewMgr.RunState property returns the current state the ExecutionView Manager control displays.
  // Note: When you write a user interface that uses an ExecutionView Manager control, National Instruments recommends using the ExecutionViewMgr.RunState and ExecutionViewMgr.TerminationState properties instead of directly calling the Execution.GetStates method on the execution. A slight delay exists between when the instantaneous state of the execution changes and when TestStand updates the state this property returns to reflect the change. This occurs because the state this property returns does not change until TestStand processes the UIMessages involved, thus allowing for synchronization of the updates necessary for displaying an execution.
  //
  // ExecutionViewMgr_Get_TerminationStateRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //
  // ExecutionViewMgr_Get_TerminationStateResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExecutionTerminationStates - Returns the termination state of the execution. 
  //
  rpc Get_TerminationState(ExecutionViewMgr_Get_TerminationStateRequest) returns (ExecutionViewMgr_Get_TerminationStateResponse);
  
  
  // Property: ExecutionEntryPoints
  //
  // Returns the set of Execution entry points that the model sequence file for the selected execution defines. The collection includes only entry points that set the Sequence.ShowEntryPointForExeWindow property.
  //
  // This collection can change when the selected execution changes.
  //
  // ExecutionViewMgr_Get_ExecutionEntryPointsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //
  // ExecutionViewMgr_Get_ExecutionEntryPointsResponse - The response message from the server. It provides the return value.
  //    - returnValue: EntryPointsInstance - Returns the set of Execution entry points that the model sequence file for the selected execution defines. The collection includes only entry points that set the Sequence.ShowEntryPointForExeWindow property. 
  //
  rpc Get_ExecutionEntryPoints(ExecutionViewMgr_Get_ExecutionEntryPointsRequest) returns (ExecutionViewMgr_Get_ExecutionEntryPointsResponse);
  
  
  // Property: ConfigurationEntryPoints
  //
  // Returns a collection of Configuration entry points for the selected execution.
  //
  // This collection can change when the selected execution changes.
  //
  // ExecutionViewMgr_Get_ConfigurationEntryPointsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //
  // ExecutionViewMgr_Get_ConfigurationEntryPointsResponse - The response message from the server. It provides the return value.
  //    - returnValue: EntryPointsInstance - Returns a collection of Configuration entry points for the selected execution. 
  //
  rpc Get_ConfigurationEntryPoints(ExecutionViewMgr_Get_ConfigurationEntryPointsRequest) returns (ExecutionViewMgr_Get_ConfigurationEntryPointsResponse);
  
  
  // Property: SelectedSteps
  //
  // Returns the collection of selected steps.
  //
  // Use this collection to obtain the selected steps or to change the selected steps. TestStand User Interface Controls connected to an ExecutionView Manager control, such as the SequenceView control, automatically set this property when you select steps. The ExecutionView Manager control also generates the ExecutionViewMgr.SelectionChanged event when this property changes.
  // Note: You can select steps only when an execution is paused.
  //
  // ExecutionViewMgr_Get_SelectedStepsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //
  // ExecutionViewMgr_Get_SelectedStepsResponse - The response message from the server. It provides the return value.
  //    - returnValue: SelectedStepsInstance - Returns the collection of selected steps. 
  //
  rpc Get_SelectedSteps(ExecutionViewMgr_Get_SelectedStepsRequest) returns (ExecutionViewMgr_Get_SelectedStepsResponse);
  
  
  // Property: SequenceContext
  //
  // Specifies the current SequenceContext of the ExecutionView Manager control.
  //
  // The ExecutionView Manager control automatically sets this property when pausing an execution.
  // Note: You can read and write to this property only when the selected execution is paused. When you write to this property, the sequence context must belong to the selected execution.
  //
  // ExecutionViewMgr_Set_SequenceContextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //    - val: SequenceContextInstance - Specifies the current SequenceContext of the ExecutionView Manager control. 
  //
  // ExecutionViewMgr_Set_SequenceContextResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExecutionViewMgr_Get_SequenceContextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //
  // ExecutionViewMgr_Get_SequenceContextResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceContextInstance - Specifies the current SequenceContext of the ExecutionView Manager control. 
  //
  rpc Set_SequenceContext(ExecutionViewMgr_Set_SequenceContextRequest) returns (ExecutionViewMgr_Set_SequenceContextResponse);
  rpc Get_SequenceContext(ExecutionViewMgr_Get_SequenceContextRequest) returns (ExecutionViewMgr_Get_SequenceContextResponse);
  
  
  // Property: Thread
  //
  // Specifies the foreground thread of the selected execution.
  //
  // Note: You can read or write to this property only when the selected execution is paused. When you write to this property, the thread must belong to the selected execution.Note: Although you can set the foreground thread of an Execution object, National Instruments recommends using this property so connected TestStand User Interface Controls are updated to reflect any changes made.
  //
  // ExecutionViewMgr_Set_ThreadRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //    - val: ThreadInstance - Specifies the foreground thread of the selected execution. 
  //
  // ExecutionViewMgr_Set_ThreadResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExecutionViewMgr_Get_ThreadRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //
  // ExecutionViewMgr_Get_ThreadResponse - The response message from the server. It provides the return value.
  //    - returnValue: ThreadInstance - Specifies the foreground thread of the selected execution. 
  //
  rpc Set_Thread(ExecutionViewMgr_Set_ThreadRequest) returns (ExecutionViewMgr_Set_ThreadResponse);
  rpc Get_Thread(ExecutionViewMgr_Get_ThreadRequest) returns (ExecutionViewMgr_Get_ThreadResponse);
  
  
  // Property: ReplaceExecutionOnClose
  //
  // When this property is True, closing the selected execution replaces the closed execution with another execution not displayed in any other ExecutionView Manager control. Otherwise, the selected execution becomes NULL.
  //
  // ExecutionViewMgr_Set_ReplaceExecutionOnCloseRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //    - val: bool - When this property is True, closing the selected execution replaces the closed execution with another execution not displayed in any other ExecutionView Manager control. Otherwise, the selected execution becomes NULL. 
  //
  // ExecutionViewMgr_Set_ReplaceExecutionOnCloseResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExecutionViewMgr_Get_ReplaceExecutionOnCloseRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //
  // ExecutionViewMgr_Get_ReplaceExecutionOnCloseResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When this property is True, closing the selected execution replaces the closed execution with another execution not displayed in any other ExecutionView Manager control. Otherwise, the selected execution becomes NULL. 
  //
  rpc Set_ReplaceExecutionOnClose(ExecutionViewMgr_Set_ReplaceExecutionOnCloseRequest) returns (ExecutionViewMgr_Set_ReplaceExecutionOnCloseResponse);
  rpc Get_ReplaceExecutionOnClose(ExecutionViewMgr_Get_ReplaceExecutionOnCloseRequest) returns (ExecutionViewMgr_Get_ReplaceExecutionOnCloseResponse);
  
  
  // Property: ApplicationMgr
  //
  // Returns a reference to the Application Manager control of the application. The value is NULL when no Application Manager control exists within the process.
  //
  // ExecutionViewMgr_Get_ApplicationMgrRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //
  // ExecutionViewMgr_Get_ApplicationMgrResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - Returns a reference to the Application Manager control of the application. The value is NULL when no Application Manager control exists within the process. 
  //
  rpc Get_ApplicationMgr(ExecutionViewMgr_Get_ApplicationMgrRequest) returns (ExecutionViewMgr_Get_ApplicationMgrResponse);
  
  
  // Property: UserData
  //
  // Stores data associated with this control.
  //
  // Stored data is cleared during the shutdown process.
  //
  // ExecutionViewMgr_Set_UserDataRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //    - val: ObjectInstance - Stores data associated with this control. 
  //
  // ExecutionViewMgr_Set_UserDataResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExecutionViewMgr_Get_UserDataRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //
  // ExecutionViewMgr_Get_UserDataResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - Stores data associated with this control. 
  //
  rpc Set_UserData(ExecutionViewMgr_Set_UserDataRequest) returns (ExecutionViewMgr_Set_UserDataResponse);
  rpc Get_UserData(ExecutionViewMgr_Get_UserDataRequest) returns (ExecutionViewMgr_Get_UserDataResponse);
  
  
  // Property: StepGroupMode
  //
  // Specifies whether the SequenceView controls that connect to the ExecutionView Manager control display steps in all the step groups or only steps in the current step group.
  //
  // ExecutionViewMgr_Set_StepGroupModeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //    - val: StepGroupModes - Specifies whether the SequenceView controls that connect to the ExecutionView Manager control display steps in all the step groups or only steps in the current step group. 
  //
  // ExecutionViewMgr_Set_StepGroupModeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExecutionViewMgr_Get_StepGroupModeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //
  // ExecutionViewMgr_Get_StepGroupModeResponse - The response message from the server. It provides the return value.
  //    - returnValue: StepGroupModes - Specifies whether the SequenceView controls that connect to the ExecutionView Manager control display steps in all the step groups or only steps in the current step group. 
  //
  rpc Set_StepGroupMode(ExecutionViewMgr_Set_StepGroupModeRequest) returns (ExecutionViewMgr_Set_StepGroupModeResponse);
  rpc Get_StepGroupMode(ExecutionViewMgr_Get_StepGroupModeRequest) returns (ExecutionViewMgr_Get_StepGroupModeResponse);
  
  
  // Property: SelectedPropertyObjects
  //
  // Returns a collection of selected property objects.
  //
  // Use this collection to obtain the selected property objects or change the selected property objects for the selected execution. TestStand User Interface Controls connected to an ExecutionView Manager control, such as the VariablesView control, automatically set this property when you select variables and properties. The ExecutionView Manager control also generates a ExecutionViewMgr.PropertyObjectSelectionChanged event when this property changes.
  //
  // ExecutionViewMgr_Get_SelectedPropertyObjectsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //
  // ExecutionViewMgr_Get_SelectedPropertyObjectsResponse - The response message from the server. It provides the return value.
  //    - returnValue: SelectedPropertyObjectsInstance - Returns a collection of selected property objects. 
  //
  rpc Get_SelectedPropertyObjects(ExecutionViewMgr_Get_SelectedPropertyObjectsRequest) returns (ExecutionViewMgr_Get_SelectedPropertyObjectsResponse);
  
  

  // Event: ExecutionChanged
  //
  // Occurs when the ExecutionViewMgr.Execution property changes.
  //
  // The event has a registration method and a reply method.
  // GetEvents_ExecutionChanged - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_ExecutionChanged - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExecutionViewMgr_GetEvents_ExecutionChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExecutionViewMgr_GetEvents_ExecutionChangedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - exec: ExecutionInstance - Specifies a new execution.
  //
  // ExecutionViewMgr_ReplyToEvent_ExecutionChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExecutionViewMgr_ReplyToEvent_ExecutionChangedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_ExecutionChanged(ExecutionViewMgr_GetEvents_ExecutionChangedRequest) returns (stream ExecutionViewMgr_GetEvents_ExecutionChangedResponse);
  rpc ReplyToEvent_ExecutionChanged(ExecutionViewMgr_ReplyToEvent_ExecutionChangedRequest) returns (ExecutionViewMgr_ReplyToEvent_ExecutionChangedResponse); 
  
  
  // Event: RunStateChanged
  //
  // Occurs when the run state of the execution changes or when the execution changes and the new execution has a different run state.
  //
  // The event has a registration method and a reply method.
  // GetEvents_RunStateChanged - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_RunStateChanged - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExecutionViewMgr_GetEvents_RunStateChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExecutionViewMgr_GetEvents_RunStateChangedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - newRunState: ExecutionRunStates - Specifies the new run state of the execution.
  //
  // ExecutionViewMgr_ReplyToEvent_RunStateChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExecutionViewMgr_ReplyToEvent_RunStateChangedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_RunStateChanged(ExecutionViewMgr_GetEvents_RunStateChangedRequest) returns (stream ExecutionViewMgr_GetEvents_RunStateChangedResponse);
  rpc ReplyToEvent_RunStateChanged(ExecutionViewMgr_ReplyToEvent_RunStateChangedRequest) returns (ExecutionViewMgr_ReplyToEvent_RunStateChangedResponse); 
  
  
  // Event: EndExecution
  //
  // Occurs when the selected execution ends.
  //
  // The event has a registration method and a reply method.
  // GetEvents_EndExecution - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_EndExecution - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExecutionViewMgr_GetEvents_EndExecutionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExecutionViewMgr_GetEvents_EndExecutionResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - exec: ExecutionInstance - Specifies the execution that has ended.
  //
  // ExecutionViewMgr_ReplyToEvent_EndExecutionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExecutionViewMgr_ReplyToEvent_EndExecutionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_EndExecution(ExecutionViewMgr_GetEvents_EndExecutionRequest) returns (stream ExecutionViewMgr_GetEvents_EndExecutionResponse);
  rpc ReplyToEvent_EndExecution(ExecutionViewMgr_ReplyToEvent_EndExecutionRequest) returns (ExecutionViewMgr_ReplyToEvent_EndExecutionResponse); 
  
  
  // Event: TerminationStateChanged
  //
  // Occurs when the termination state for the execution changes or when the execution changes and the new execution has a different termination state.
  //
  // The event has a registration method and a reply method.
  // GetEvents_TerminationStateChanged - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_TerminationStateChanged - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExecutionViewMgr_GetEvents_TerminationStateChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExecutionViewMgr_GetEvents_TerminationStateChangedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - newTermState: ExecutionTerminationStates - Specifies the new termination state of the execution.
  //
  // ExecutionViewMgr_ReplyToEvent_TerminationStateChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExecutionViewMgr_ReplyToEvent_TerminationStateChangedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_TerminationStateChanged(ExecutionViewMgr_GetEvents_TerminationStateChangedRequest) returns (stream ExecutionViewMgr_GetEvents_TerminationStateChangedResponse);
  rpc ReplyToEvent_TerminationStateChanged(ExecutionViewMgr_ReplyToEvent_TerminationStateChangedRequest) returns (ExecutionViewMgr_ReplyToEvent_TerminationStateChangedResponse); 
  
  
  // Event: SelectionChanged
  //
  // Occurs when the set of selected steps changes.
  //
  // The event has a registration method and a reply method.
  // GetEvents_SelectionChanged - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_SelectionChanged - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExecutionViewMgr_GetEvents_SelectionChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExecutionViewMgr_GetEvents_SelectionChangedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // ExecutionViewMgr_ReplyToEvent_SelectionChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExecutionViewMgr_ReplyToEvent_SelectionChangedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_SelectionChanged(ExecutionViewMgr_GetEvents_SelectionChangedRequest) returns (stream ExecutionViewMgr_GetEvents_SelectionChangedResponse);
  rpc ReplyToEvent_SelectionChanged(ExecutionViewMgr_ReplyToEvent_SelectionChangedRequest) returns (ExecutionViewMgr_ReplyToEvent_SelectionChangedResponse); 
  
  
  // Event: UserMessage
  //
  // Occurs when the execution sends a user message.
  //
  // User messages are messages with codes that are greater than or equal to UIMsg_UserMessageBase.
  // The ExecutionView Manager control automatically acknowledges the user message when this event completes. Therefore, you do not have to directly call the UIMessage.Acknowledge method from within this event.
  //
  // The event has a registration method and a reply method.
  // GetEvents_UserMessage - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_UserMessage - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExecutionViewMgr_GetEvents_UserMessageRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExecutionViewMgr_GetEvents_UserMessageResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - uiMsg: UIMessageInstance - Specifies the user-defined UIMessage object.
  //
  // ExecutionViewMgr_ReplyToEvent_UserMessageRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExecutionViewMgr_ReplyToEvent_UserMessageResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_UserMessage(ExecutionViewMgr_GetEvents_UserMessageRequest) returns (stream ExecutionViewMgr_GetEvents_UserMessageResponse);
  rpc ReplyToEvent_UserMessage(ExecutionViewMgr_ReplyToEvent_UserMessageRequest) returns (ExecutionViewMgr_ReplyToEvent_UserMessageResponse); 
  
  
  // Event: RefreshWindow
  //
  // Occurs when TestStand sends a UIMsg_RefreshWindows message that requires a refresh of the selected execution.
  //
  // The event has a registration method and a reply method.
  // GetEvents_RefreshWindow - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_RefreshWindow - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExecutionViewMgr_GetEvents_RefreshWindowRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExecutionViewMgr_GetEvents_RefreshWindowResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - ctxt: SequenceContextInstance - Specifies the context of the steps to be refreshed. When the context is not passed in, the steps in the current context refresh.
  //
  // ExecutionViewMgr_ReplyToEvent_RefreshWindowRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExecutionViewMgr_ReplyToEvent_RefreshWindowResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_RefreshWindow(ExecutionViewMgr_GetEvents_RefreshWindowRequest) returns (stream ExecutionViewMgr_GetEvents_RefreshWindowResponse);
  rpc ReplyToEvent_RefreshWindow(ExecutionViewMgr_ReplyToEvent_RefreshWindowRequest) returns (ExecutionViewMgr_ReplyToEvent_RefreshWindowResponse); 
  
  
  // Event: Break
  //
  // Occurs when the selected execution in the ExecutionView Manager control breaks as a result of a breakpoint or upon user request, such as when you call the ExecutionViewMgr.BreakExecution method.
  //
  // To obtain the message that signaled this event, use the ApplicationMgr.CurrentUIMessage property.
  //
  // The event has a registration method and a reply method.
  // GetEvents_Break - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_Break - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExecutionViewMgr_GetEvents_BreakRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExecutionViewMgr_GetEvents_BreakResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - exec: ExecutionInstance - Specifies the paused execution.
  //  - thrd: ThreadInstance - Specifies the thread that generated the break notification.
  //  - ctxt: SequenceContextInstance - Specifies the current context of the execution.
  //
  // ExecutionViewMgr_ReplyToEvent_BreakRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExecutionViewMgr_ReplyToEvent_BreakResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_Break(ExecutionViewMgr_GetEvents_BreakRequest) returns (stream ExecutionViewMgr_GetEvents_BreakResponse);
  rpc ReplyToEvent_Break(ExecutionViewMgr_ReplyToEvent_BreakRequest) returns (ExecutionViewMgr_ReplyToEvent_BreakResponse); 
  
  
  // Event: Trace
  //
  // Occurs when the execution sends a UIMsg_Trace message.
  //
  // The event has a registration method and a reply method.
  // GetEvents_Trace - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_Trace - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExecutionViewMgr_GetEvents_TraceRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExecutionViewMgr_GetEvents_TraceResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - exec: ExecutionInstance - Specifies the current execution.
  //  - thrd: ThreadInstance - Specifies the current thread.
  //  - ctxt: SequenceContextInstance - Specifies the current context.
  //
  // ExecutionViewMgr_ReplyToEvent_TraceRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExecutionViewMgr_ReplyToEvent_TraceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_Trace(ExecutionViewMgr_GetEvents_TraceRequest) returns (stream ExecutionViewMgr_GetEvents_TraceResponse);
  rpc ReplyToEvent_Trace(ExecutionViewMgr_ReplyToEvent_TraceRequest) returns (ExecutionViewMgr_ReplyToEvent_TraceResponse); 
  
  
  // Event: DisplayReport
  //
  // Occurs when an execution has ended and has a report to display. This event is also called in response to UIMsg_DisplayReport.
  //
  // Use this event to show the report for the execution.
  //
  // The event has a registration method and a reply method.
  // GetEvents_DisplayReport - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_DisplayReport - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExecutionViewMgr_GetEvents_DisplayReportRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExecutionViewMgr_GetEvents_DisplayReportResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - exec: ExecutionInstance - Specifies the execution that has the report to display.
  //
  // ExecutionViewMgr_ReplyToEvent_DisplayReportRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExecutionViewMgr_ReplyToEvent_DisplayReportResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_DisplayReport(ExecutionViewMgr_GetEvents_DisplayReportRequest) returns (stream ExecutionViewMgr_GetEvents_DisplayReportResponse);
  rpc ReplyToEvent_DisplayReport(ExecutionViewMgr_ReplyToEvent_DisplayReportRequest) returns (ExecutionViewMgr_ReplyToEvent_DisplayReportResponse); 
  
  
  // Event: ContextChanged
  //
  // Occurs when the ExecutionViewMgr.SequenceContext property changes programmatically or when a control connected to a CallStackConnection changes the property.
  //
  // The event has a registration method and a reply method.
  // GetEvents_ContextChanged - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_ContextChanged - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExecutionViewMgr_GetEvents_ContextChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExecutionViewMgr_GetEvents_ContextChangedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - ctxt: SequenceContextInstance - Specifies the current sequence context of the ExecutionView Manager control.
  //
  // ExecutionViewMgr_ReplyToEvent_ContextChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExecutionViewMgr_ReplyToEvent_ContextChangedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_ContextChanged(ExecutionViewMgr_GetEvents_ContextChangedRequest) returns (stream ExecutionViewMgr_GetEvents_ContextChangedResponse);
  rpc ReplyToEvent_ContextChanged(ExecutionViewMgr_ReplyToEvent_ContextChangedRequest) returns (ExecutionViewMgr_ReplyToEvent_ContextChangedResponse); 
  
  
  // Event: ThreadChanged
  //
  // Occurs when the ExecutionViewMgr.Thread property changes programmatically or when a control connected to a ThreadListConnection changes the property.
  //
  // The event has a registration method and a reply method.
  // GetEvents_ThreadChanged - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_ThreadChanged - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExecutionViewMgr_GetEvents_ThreadChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExecutionViewMgr_GetEvents_ThreadChangedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - thrd: ThreadInstance - Specifies the current foreground thread of the execution in the ExecutionView Manager control.
  //
  // ExecutionViewMgr_ReplyToEvent_ThreadChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExecutionViewMgr_ReplyToEvent_ThreadChangedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_ThreadChanged(ExecutionViewMgr_GetEvents_ThreadChangedRequest) returns (stream ExecutionViewMgr_GetEvents_ThreadChangedResponse);
  rpc ReplyToEvent_ThreadChanged(ExecutionViewMgr_ReplyToEvent_ThreadChangedRequest) returns (ExecutionViewMgr_ReplyToEvent_ThreadChangedResponse); 
  
  
  // Event: PropertyObjectSelectionChanged
  //
  // Occurs when the selected property objects change. For example, this event is generated when you change the selection in a VariablesView control that connects to the ExecutionView Manager control or when you programmatically change the contents of the SelectedPropertyObjects collection.
  //
  // The event has a registration method and a reply method.
  // GetEvents_PropertyObjectSelectionChanged - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_PropertyObjectSelectionChanged - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExecutionViewMgr_GetEvents_PropertyObjectSelectionChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExecutionViewMgrInstance - The id of the ExecutionViewMgr object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExecutionViewMgr_GetEvents_PropertyObjectSelectionChangedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // ExecutionViewMgr_ReplyToEvent_PropertyObjectSelectionChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExecutionViewMgr_ReplyToEvent_PropertyObjectSelectionChangedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_PropertyObjectSelectionChanged(ExecutionViewMgr_GetEvents_PropertyObjectSelectionChangedRequest) returns (stream ExecutionViewMgr_GetEvents_PropertyObjectSelectionChangedResponse);
  rpc ReplyToEvent_PropertyObjectSelectionChanged(ExecutionViewMgr_ReplyToEvent_PropertyObjectSelectionChangedRequest) returns (ExecutionViewMgr_ReplyToEvent_PropertyObjectSelectionChangedResponse); 
  
  
}
message ExecutionViewMgrInstance {
  // Specifies the handle of the ExecutionViewMgr instance in the server.
  string id = 1;
}
message ExecutionViewMgr_ExecutionViewMgrRequest {
}

message ExecutionViewMgr_ExecutionViewMgrResponse {
  // The return type of the ExecutionViewMgr object.
  ExecutionViewMgrInstance returnValue = 1;
}

message ExecutionViewMgr_TerminateExecutionRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
}

message ExecutionViewMgr_TerminateExecutionResponse {
}

message ExecutionViewMgr_BreakExecutionRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
}

message ExecutionViewMgr_BreakExecutionResponse {
}

message ExecutionViewMgr_ResumeExecutionRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
}

message ExecutionViewMgr_ResumeExecutionResponse {
}

message ExecutionViewMgr_RestartExecutionRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
}

message ExecutionViewMgr_RestartExecutionResponse {
}

message ExecutionViewMgr_AbortExecutionRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
}

message ExecutionViewMgr_AbortExecutionResponse {
}

message ExecutionViewMgr_BuildEditArgsRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
}

message ExecutionViewMgr_BuildEditArgsResponse {
  // A new EditArgs object.
  EditArgsInstance returnValue = 1;
}

message ExecutionViewMgr_BuildInteractiveArgsRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // When this parameter is True, this property launches the Loop on Selected Steps dialog box to create the InteractiveArgs for the ExecutionViewMgr.LoopOnSelectedSteps method.
  ObjectInstance createLoopArgs = 2;
}

message ExecutionViewMgr_BuildInteractiveArgsResponse {
  // The new InteractiveArgs object.
  InteractiveArgsInstance returnValue = 1;
  // If the Loop on Selected Steps dialog box is cancelled, the value of the parameter passed in is True.
  ObjectInstance cancel = 2;
}

message ExecutionViewMgr_RefreshRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Specifies the SequenceContext used to refresh the controls. When you do pass a SequenceContext, the ExecutionView Manager control uses the current SequenceContext to refresh the controls.
  ObjectInstance seqCtxt = 2;
}

message ExecutionViewMgr_RefreshResponse {
}

message ExecutionViewMgr_RefreshStepRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Specifies the index of the step to refresh. Passing -1 refreshes all the steps in the connected SequenceView control.
  int32 stepIndex = 2;
}

message ExecutionViewMgr_RefreshStepResponse {
}

message ExecutionViewMgr_GetCommandRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Specifies the type of Command object to create.
  CommandKinds cmdKind = 2;
  // Pass this parameter on commands that are sets  to specify which command in the set to return.
  int32 commandIndex = 3;
}

message ExecutionViewMgr_GetCommandResponse {
  // The return type of the Command object.
  CommandInstance returnValue = 1;
}

message ExecutionViewMgr_GetCaptionTextRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Specifies the type of caption source from which to obtain text.
  CaptionSources captionSource = 2;
  // For certain caption sources, this parameter specifies to return a long or short version of the caption text. Refer to the CaptionSources enumeration for more information about determining when this option affects the text and for more information about the difference between the long and short versions of the text.
  bool longName = 3;
  // Specifies a format expression to evaluate when generating the caption text. For the CaptionSource_MacroExpression caption source, specify a format expression that evaluates to a string value that contains macros that specify other caption sources. For all other caption sources, specify an expression that evaluates to a string value that contains the characters %1.  The method replaces the %1 characters with the text from the caption source. Pass an empty string to use the default format string for the caption source.
  string formatExpression = 4;
}

message ExecutionViewMgr_GetCaptionTextResponse {
  // The current text for the caption source you specify.
  string returnValue = 1;
}

message ExecutionViewMgr_GetImageNameRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Specifies the type of image source from which to obtain an image name.
  ImageSources imageSource = 2;
}

message ExecutionViewMgr_GetImageNameResponse {
  // The current image name for the image source you specify.
  string returnValue = 1;
}

message ExecutionViewMgr_GetNumericValueRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Specifies the type of numeric source from which to obtain a numeric value.
  NumericSources numericSource = 2;
}

message ExecutionViewMgr_GetNumericValueResponse {
  // The current value for the numeric source you specify.
  double returnValue = 1;
}

message ExecutionViewMgr_RunSelectedStepsRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Specifies an InteractiveArgs object. When you do not pass InteractiveArgs objects, the ExecutionView Manager control creates the appropriate InteractiveArgs objects.
  ObjectInstance interArgs = 2;
}

message ExecutionViewMgr_RunSelectedStepsResponse {
}

message ExecutionViewMgr_LoopOnSelectedStepsRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Specifies an InteractiveArgs object. When you do not pass an InteractiveArgs object, the ExecutionView Manager control creates the appropriate InteractiveArgs object.
  ObjectInstance interArgs = 2;
}

message ExecutionViewMgr_LoopOnSelectedStepsResponse {
}

message ExecutionViewMgr_ConnectCommandRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Specifies the button or checkbox control to which the command connects.
  ObjectInstance uiObj = 2;
  // Specifies the type of command to connect.
  CommandKinds cmdKind = 3;
  // For CommandKinds that are sets, this parameter indexes the set to obtain a particular command.
  int32 Index = 4;
  // Specifies the options for the CommandConnection. Refer to the CommandConnectionOptions constants for more information about the options for the CommandConnection object.
  CommandConnectionOptions opts = 5;
}

message ExecutionViewMgr_ConnectCommandResponse {
  // A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned.
  CommandConnectionInstance returnValue = 1;
}

message ExecutionViewMgr_ConnectCaptionRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Specifies the visible control or element of a visible control to which the caption source connects. Pass a Label, ExpressionEdit, or StatusBarPane control.
  ObjectInstance uiObj = 2;
  // Specifies the type of caption source to connect.
  CaptionSources captionSource = 3;
  // For certain caption sources, this parameter specifies whether the connection displays a long or short version of the caption text. Refer to the CaptionSources enumeration for more information about determining when this option affects a caption source and for more information about the difference between the long and short versions of the text.
  bool longName = 4;
}

message ExecutionViewMgr_ConnectCaptionResponse {
  // A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned.
  CaptionConnectionInstance returnValue = 1;
}

message ExecutionViewMgr_ConnectExecutionViewRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Specifies the SequenceView control to connect to the ExecutionViewConnection.
  ObjectInstance uiObj = 2;
  // Specifies the options for the ExecutionViewConnection. Refer to the ExecutionViewOptions constants for more information about the options for the ExecutionViewConnection.
  ExecutionViewOptions opts = 3;
}

message ExecutionViewMgr_ConnectExecutionViewResponse {
  // A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned.
  ExecutionViewConnectionInstance returnValue = 1;
}

message ExecutionViewMgr_ConnectReportViewRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Specifies the ReportView control to connect to the ExecutionView Manager control.
  ObjectInstance uiObj = 2;
}

message ExecutionViewMgr_ConnectReportViewResponse {
  // A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned.
  ReportViewConnectionInstance returnValue = 1;
}

message ExecutionViewMgr_ConnectExecutionListRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Use a ComboBox, ListBarPage, or ListBox to display the list of executions.
  ObjectInstance uiObj = 2;
}

message ExecutionViewMgr_ConnectExecutionListResponse {
  // A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned.
  ExecutionListConnectionInstance returnValue = 1;
}

message ExecutionViewMgr_ConnectCallStackRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Specifies the control or element to which the call stack connection connects. Pass a ComboBox, ListBarPage, or ListBox.
  ObjectInstance uiObj = 2;
}

message ExecutionViewMgr_ConnectCallStackResponse {
  // A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned.
  CallStackConnectionInstance returnValue = 1;
}

message ExecutionViewMgr_ConnectThreadListRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Specifies a control or control element to connect to the ThreadListConnection.
  ObjectInstance uiObj = 2;
}

message ExecutionViewMgr_ConnectThreadListResponse {
  // A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned.
  ThreadListConnectionInstance returnValue = 1;
}

message ExecutionViewMgr_ConnectImageRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Specifies a visible control or element of a visible control to which the caption source connects. Pass a StatusBarPane or Button.
  ObjectInstance uiObj = 2;
  // Specifies the type of image source to connect.
  ImageSources imageSource = 3;
}

message ExecutionViewMgr_ConnectImageResponse {
  // A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned.
  ImageConnectionInstance returnValue = 1;
}

message ExecutionViewMgr_ConnectNumericRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Specifies the element of a visible control to which the caption source connects. Pass a StatusBarPane.
  ObjectInstance uiObj = 2;
  // Specifies the type of numeric source from which to obtain a numeric value.
  NumericSources numericSource = 3;
}

message ExecutionViewMgr_ConnectNumericResponse {
  // A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned.
  NumericConnectionInstance returnValue = 1;
}

message ExecutionViewMgr_RefreshStepExRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Specifies a particular step group.
  StepGroups group = 2;
  // Specifies the zero-based index in the step group of the step to refresh. Pass -1 to refresh all the steps in all groups in the connected SequenceView controls.
  int32 stepIndex = 3;
}

message ExecutionViewMgr_RefreshStepExResponse {
}

message ExecutionViewMgr_NewEditContextRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
}

message ExecutionViewMgr_NewEditContextResponse {
  // The return type of the SequenceContext object.
  SequenceContextInstance returnValue = 1;
}

message ExecutionViewMgr_ConnectVariablesRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Specifies the reference to a VariablesView control that displays the current sequence context.
  ObjectInstance uiObj = 2;
}

message ExecutionViewMgr_ConnectVariablesResponse {
  // A reference to an object that represents the new connection. Discarding the reference does not affect the connection. When the object is already connected to this type of connection, the existing connection is returned.
  VariablesConnectionInstance returnValue = 1;
}

message ExecutionViewMgr_Set_ExecutionRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Specifies the execution selected in the ExecutionView Manager control.
  ExecutionInstance val = 2;
}

message ExecutionViewMgr_Set_ExecutionResponse {
}

message ExecutionViewMgr_Get_ExecutionRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
}

message ExecutionViewMgr_Get_ExecutionResponse {
  // Specifies the execution selected in the ExecutionView Manager control.
  ExecutionInstance returnValue = 1;
}

message ExecutionViewMgr_Get_ConnectionsRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
}

message ExecutionViewMgr_Get_ConnectionsResponse {
  // Accesses the connections of the ExecutionView Manager control.
  ExecutionViewMgrConnectionsInstance returnValue = 1;
}

message ExecutionViewMgr_Get_RunStateRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
}

message ExecutionViewMgr_Get_RunStateResponse {
  // Returns the run state of the execution.
  ExecutionRunStates returnValue = 1;
}

message ExecutionViewMgr_Get_TerminationStateRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
}

message ExecutionViewMgr_Get_TerminationStateResponse {
  // Returns the termination state of the execution.
  ExecutionTerminationStates returnValue = 1;
}

message ExecutionViewMgr_Get_ExecutionEntryPointsRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
}

message ExecutionViewMgr_Get_ExecutionEntryPointsResponse {
  // Returns the set of Execution entry points that the model sequence file for the selected execution defines. The collection includes only entry points that set the Sequence.ShowEntryPointForExeWindow property.
  EntryPointsInstance returnValue = 1;
}

message ExecutionViewMgr_Get_ConfigurationEntryPointsRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
}

message ExecutionViewMgr_Get_ConfigurationEntryPointsResponse {
  // Returns a collection of Configuration entry points for the selected execution.
  EntryPointsInstance returnValue = 1;
}

message ExecutionViewMgr_Get_SelectedStepsRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
}

message ExecutionViewMgr_Get_SelectedStepsResponse {
  // Returns the collection of selected steps.
  SelectedStepsInstance returnValue = 1;
}

message ExecutionViewMgr_Set_SequenceContextRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Specifies the current SequenceContext of the ExecutionView Manager control.
  SequenceContextInstance val = 2;
}

message ExecutionViewMgr_Set_SequenceContextResponse {
}

message ExecutionViewMgr_Get_SequenceContextRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
}

message ExecutionViewMgr_Get_SequenceContextResponse {
  // Specifies the current SequenceContext of the ExecutionView Manager control.
  SequenceContextInstance returnValue = 1;
}

message ExecutionViewMgr_Set_ThreadRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Specifies the foreground thread of the selected execution.
  ThreadInstance val = 2;
}

message ExecutionViewMgr_Set_ThreadResponse {
}

message ExecutionViewMgr_Get_ThreadRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
}

message ExecutionViewMgr_Get_ThreadResponse {
  // Specifies the foreground thread of the selected execution.
  ThreadInstance returnValue = 1;
}

message ExecutionViewMgr_Set_ReplaceExecutionOnCloseRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // When this property is True, closing the selected execution replaces the closed execution with another execution not displayed in any other ExecutionView Manager control. Otherwise, the selected execution becomes NULL.
  bool val = 2;
}

message ExecutionViewMgr_Set_ReplaceExecutionOnCloseResponse {
}

message ExecutionViewMgr_Get_ReplaceExecutionOnCloseRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
}

message ExecutionViewMgr_Get_ReplaceExecutionOnCloseResponse {
  // When this property is True, closing the selected execution replaces the closed execution with another execution not displayed in any other ExecutionView Manager control. Otherwise, the selected execution becomes NULL.
  bool returnValue = 1;
}

message ExecutionViewMgr_Get_ApplicationMgrRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
}

message ExecutionViewMgr_Get_ApplicationMgrResponse {
  // Returns a reference to the Application Manager control of the application. The value is NULL when no Application Manager control exists within the process.
  ObjectInstance returnValue = 1;
}

message ExecutionViewMgr_Set_UserDataRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Stores data associated with this control.
  ObjectInstance val = 2;
}

message ExecutionViewMgr_Set_UserDataResponse {
}

message ExecutionViewMgr_Get_UserDataRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
}

message ExecutionViewMgr_Get_UserDataResponse {
  // Stores data associated with this control.
  ObjectInstance returnValue = 1;
}

message ExecutionViewMgr_Set_StepGroupModeRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Specifies whether the SequenceView controls that connect to the ExecutionView Manager control display steps in all the step groups or only steps in the current step group.
  StepGroupModes val = 2;
}

message ExecutionViewMgr_Set_StepGroupModeResponse {
}

message ExecutionViewMgr_Get_StepGroupModeRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
}

message ExecutionViewMgr_Get_StepGroupModeResponse {
  // Specifies whether the SequenceView controls that connect to the ExecutionView Manager control display steps in all the step groups or only steps in the current step group.
  StepGroupModes returnValue = 1;
}

message ExecutionViewMgr_Get_SelectedPropertyObjectsRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
}

message ExecutionViewMgr_Get_SelectedPropertyObjectsResponse {
  // Returns a collection of selected property objects.
  SelectedPropertyObjectsInstance returnValue = 1;
}

message ExecutionViewMgr_GetEvents_ExecutionChangedRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExecutionViewMgr_GetEvents_ExecutionChangedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies a new execution.
  ExecutionInstance exec = 2;
}

message ExecutionViewMgr_ReplyToEvent_ExecutionChangedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExecutionViewMgr_ReplyToEvent_ExecutionChangedResponse {
}

message ExecutionViewMgr_GetEvents_RunStateChangedRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExecutionViewMgr_GetEvents_RunStateChangedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the new run state of the execution.
  ExecutionRunStates newRunState = 2;
}

message ExecutionViewMgr_ReplyToEvent_RunStateChangedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExecutionViewMgr_ReplyToEvent_RunStateChangedResponse {
}

message ExecutionViewMgr_GetEvents_EndExecutionRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExecutionViewMgr_GetEvents_EndExecutionResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the execution that has ended.
  ExecutionInstance exec = 2;
}

message ExecutionViewMgr_ReplyToEvent_EndExecutionRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExecutionViewMgr_ReplyToEvent_EndExecutionResponse {
}

message ExecutionViewMgr_GetEvents_TerminationStateChangedRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExecutionViewMgr_GetEvents_TerminationStateChangedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the new termination state of the execution.
  ExecutionTerminationStates newTermState = 2;
}

message ExecutionViewMgr_ReplyToEvent_TerminationStateChangedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExecutionViewMgr_ReplyToEvent_TerminationStateChangedResponse {
}

message ExecutionViewMgr_GetEvents_SelectionChangedRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExecutionViewMgr_GetEvents_SelectionChangedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message ExecutionViewMgr_ReplyToEvent_SelectionChangedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExecutionViewMgr_ReplyToEvent_SelectionChangedResponse {
}

message ExecutionViewMgr_GetEvents_UserMessageRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExecutionViewMgr_GetEvents_UserMessageResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the user-defined UIMessage object.
  UIMessageInstance uiMsg = 2;
}

message ExecutionViewMgr_ReplyToEvent_UserMessageRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExecutionViewMgr_ReplyToEvent_UserMessageResponse {
}

message ExecutionViewMgr_GetEvents_RefreshWindowRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExecutionViewMgr_GetEvents_RefreshWindowResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the context of the steps to be refreshed. When the context is not passed in, the steps in the current context refresh.
  SequenceContextInstance ctxt = 2;
}

message ExecutionViewMgr_ReplyToEvent_RefreshWindowRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExecutionViewMgr_ReplyToEvent_RefreshWindowResponse {
}

message ExecutionViewMgr_GetEvents_BreakRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExecutionViewMgr_GetEvents_BreakResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the paused execution.
  ExecutionInstance exec = 2;
  // Specifies the thread that generated the break notification.
  ThreadInstance thrd = 3;
  // Specifies the current context of the execution.
  SequenceContextInstance ctxt = 4;
}

message ExecutionViewMgr_ReplyToEvent_BreakRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExecutionViewMgr_ReplyToEvent_BreakResponse {
}

message ExecutionViewMgr_GetEvents_TraceRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExecutionViewMgr_GetEvents_TraceResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the current execution.
  ExecutionInstance exec = 2;
  // Specifies the current thread.
  ThreadInstance thrd = 3;
  // Specifies the current context.
  SequenceContextInstance ctxt = 4;
}

message ExecutionViewMgr_ReplyToEvent_TraceRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExecutionViewMgr_ReplyToEvent_TraceResponse {
}

message ExecutionViewMgr_GetEvents_DisplayReportRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExecutionViewMgr_GetEvents_DisplayReportResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the execution that has the report to display.
  ExecutionInstance exec = 2;
}

message ExecutionViewMgr_ReplyToEvent_DisplayReportRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExecutionViewMgr_ReplyToEvent_DisplayReportResponse {
}

message ExecutionViewMgr_GetEvents_ContextChangedRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExecutionViewMgr_GetEvents_ContextChangedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the current sequence context of the ExecutionView Manager control.
  SequenceContextInstance ctxt = 2;
}

message ExecutionViewMgr_ReplyToEvent_ContextChangedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExecutionViewMgr_ReplyToEvent_ContextChangedResponse {
}

message ExecutionViewMgr_GetEvents_ThreadChangedRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExecutionViewMgr_GetEvents_ThreadChangedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the current foreground thread of the execution in the ExecutionView Manager control.
  ThreadInstance thrd = 2;
}

message ExecutionViewMgr_ReplyToEvent_ThreadChangedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExecutionViewMgr_ReplyToEvent_ThreadChangedResponse {
}

message ExecutionViewMgr_GetEvents_PropertyObjectSelectionChangedRequest {
  // The id of the ExecutionViewMgr object.
  ExecutionViewMgrInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExecutionViewMgr_GetEvents_PropertyObjectSelectionChangedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message ExecutionViewMgr_ReplyToEvent_PropertyObjectSelectionChangedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExecutionViewMgr_ReplyToEvent_PropertyObjectSelectionChangedResponse {
}

// Button
//
// Connect a manager control to a Button control to specify that the button performs a common user interface command, such as Open Sequence File. The Button control uses a localized caption and automatically enables or disables depending on the application state.
//
service Button {
  // Service: Button
  //
  // Creates a new Button instance
  //
  // ButtonRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //
  // ButtonResponse - The response message from the server. It provides the return value.
  //    - returnValue: ButtonInstance - The return type of the Button object.
  //
  rpc Button(Button_ButtonRequest) returns (Button_ButtonResponse);

  // Method: DoClick
  //
  // Call this method to simulate a button click.
  //
  // Button_DoClickRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //
  // Button_DoClickResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc DoClick(Button_DoClickRequest) returns (Button_DoClickResponse);
  
  
  // Method: Localize
  //
  // Localizes the text caption on the button in this control.
  //
  // First, update a .ini file located in the TestStand Language directory with the required string. Second, use the string tag in the .ini file as the caption for the control.
  // When you call this method, the control replaces the caption with the string from the .ini file. If the caption is not a tag in the .ini file, the caption does not change.
  // Note: When you connect this control to a manager control, the manager control automatically sets a localized caption.
  //
  // Button_LocalizeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ButtonInstance - The id of the Button object.
  //    - sectionName: string - Specifies the name of the section in the language files that contains the localized text.
  //
  // Button_LocalizeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Localize(Button_LocalizeRequest) returns (Button_LocalizeResponse);
  
  

  // Property: Enabled
  //
  // The control responds to user-generated events only when this property is True.
  //
  // When you connect this control to a manager control, the manager control sets this property automatically.
  //
  // Button_Set_EnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //    - val: bool - The control responds to user-generated events only when this property is True. 
  //
  // Button_Set_EnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Button_Get_EnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //
  // Button_Get_EnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The control responds to user-generated events only when this property is True. 
  //
  rpc Set_Enabled(Button_Set_EnabledRequest) returns (Button_Set_EnabledResponse);
  rpc Get_Enabled(Button_Get_EnabledRequest) returns (Button_Get_EnabledResponse);
  
  
  // Property: MousePointer
  //
  // Specifies the appearance of the mouse cursor when the cursor is over the control.
  //
  // When the parameter is MousePointer_Custom, the mouse cursor is the picture the Button.MouseIcon property specifies.
  //
  // Button_Set_MousePointerRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //    - val: MousePointerStyles - Specifies the appearance of the mouse cursor when the cursor is over the control. 
  //
  // Button_Set_MousePointerResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Button_Get_MousePointerRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //
  // Button_Get_MousePointerResponse - The response message from the server. It provides the return value.
  //    - returnValue: MousePointerStyles - Specifies the appearance of the mouse cursor when the cursor is over the control. 
  //
  rpc Set_MousePointer(Button_Set_MousePointerRequest) returns (Button_Set_MousePointerResponse);
  rpc Get_MousePointer(Button_Get_MousePointerRequest) returns (Button_Get_MousePointerResponse);
  
  
  // Property: MouseIcon
  //
  // Specifies the custom mouse icon for the control.
  //
  // The control displays the specified picture as the cursor when the value of the Button.MousePointer property is MousePointer_Custom. When you set this property to NULL, the value of the Button.MousePointer property changes to MousePointer_Default.
  // Note: This property requires that the picture value is an icon.
  //
  // Button_Set_MouseIconRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //    - val: IPictureDispInstance - Specifies the custom mouse icon for the control. 
  //
  // Button_Set_MouseIconResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Button_Get_MouseIconRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //
  // Button_Get_MouseIconResponse - The response message from the server. It provides the return value.
  //    - returnValue: IPictureDispInstance - Specifies the custom mouse icon for the control. 
  //
  rpc Set_MouseIcon(Button_Set_MouseIconRequest) returns (Button_Set_MouseIconResponse);
  rpc Get_MouseIcon(Button_Get_MouseIconRequest) returns (Button_Get_MouseIconResponse);
  
  
  // Property: Font
  //
  // Specifies the font for the control when the value of the Button.FontSource property is FontSource_UseFontProperty.
  //
  // Button_Set_FontRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //    - val: IFontDispInstance - Specifies the font for the control when the value of the Button.FontSource property is FontSource_UseFontProperty. 
  //
  // Button_Set_FontResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Button_Get_FontRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //
  // Button_Get_FontResponse - The response message from the server. It provides the return value.
  //    - returnValue: IFontDispInstance - Specifies the font for the control when the value of the Button.FontSource property is FontSource_UseFontProperty. 
  //
  rpc Set_Font(Button_Set_FontRequest) returns (Button_Set_FontResponse);
  rpc Get_Font(Button_Get_FontRequest) returns (Button_Get_FontResponse);
  
  
  // Property: Caption
  //
  // Specifies the text the control displays.
  //
  // In the caption, include an ampersand (&) immediately before the character, if any, you want to designate as an accelerator character. The character displays as underlined. Press <Alt> and the underlined character to move the focus to the control. To include an ampersand character in a caption without creating an accelerator character, include two consecutive ampersands. A single ampersand displays in the caption and no characters display as underlined.
  // When you connect this control to a manager control, the manager control sets this property automatically.
  //
  // Button_Set_CaptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //    - val: string - Specifies the text the control displays. 
  //
  // Button_Set_CaptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Button_Get_CaptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //
  // Button_Get_CaptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the text the control displays. 
  //
  rpc Set_Caption(Button_Set_CaptionRequest) returns (Button_Set_CaptionResponse);
  rpc Get_Caption(Button_Get_CaptionRequest) returns (Button_Get_CaptionResponse);
  
  
  // Property: hWnd
  //
  // Returns a Window handle for the control.
  //
  // You can use the returned Window handle with the Microsoft Windows API functions.
  // Note: Using Windows API functions with this property can cause undefined behavior.
  //
  // Button_Get_hWndRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //
  // Button_Get_hWndResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a Window handle for the control. 
  //
  rpc Get_hWnd(Button_Get_hWndRequest) returns (Button_Get_hWndResponse);
  
  
  // Property: Value
  //
  // This property is True when the button is pressed and False when the button is not pressed. Use this property when the value of the ButtonActionStyles enumeration is ButtonActionStyle_ToggleButton to set the pressed state of the button.
  //
  // Setting this property generates a Button.Click event.
  // Note: You cannot set this property at design time.
  //
  // Button_Set_ValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //    - val: bool - This property is True when the button is pressed and False when the button is not pressed. Use this property when the value of the ButtonActionStyles enumeration is ButtonActionStyle_ToggleButton to set the pressed state of the button. 
  //
  // Button_Set_ValueResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Button_Get_ValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //
  // Button_Get_ValueResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - This property is True when the button is pressed and False when the button is not pressed. Use this property when the value of the ButtonActionStyles enumeration is ButtonActionStyle_ToggleButton to set the pressed state of the button. 
  //
  rpc Set_Value(Button_Set_ValueRequest) returns (Button_Set_ValueResponse);
  rpc Get_Value(Button_Get_ValueRequest) returns (Button_Get_ValueResponse);
  
  
  // Property: AutoSizing
  //
  // Specifies whether the control automatically resizes when the text of the control changes.
  //
  // Button_Set_AutoSizingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //    - val: ButtonSizing - Specifies whether the control automatically resizes when the text of the control changes. 
  //
  // Button_Set_AutoSizingResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Button_Get_AutoSizingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //
  // Button_Get_AutoSizingResponse - The response message from the server. It provides the return value.
  //    - returnValue: ButtonSizing - Specifies whether the control automatically resizes when the text of the control changes. 
  //
  rpc Set_AutoSizing(Button_Set_AutoSizingRequest) returns (Button_Set_AutoSizingResponse);
  rpc Get_AutoSizing(Button_Get_AutoSizingRequest) returns (Button_Get_AutoSizingResponse);
  
  
  // Property: FontSource
  //
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  //
  // When the value of this property is FontSource_UseFontProperty, the corresponding Font property specifies the particular font the control uses. Otherwise, the control uses the font from the source this property specifies. Refer to the FontSources enumeration for the list of valid font sources.
  // Set this property to a value other than FontSource_UseFontProperty when you expect the font the Button.Font property specifies to not be present on a computer at run time. For example, a font present on an English version of the Microsoft Windows operating system might not be present on a Japanese version of the Windows operating system.
  //
  // Button_Set_FontSourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //    - val: FontSources - Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont. 
  //
  // Button_Set_FontSourceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Button_Get_FontSourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //
  // Button_Get_FontSourceResponse - The response message from the server. It provides the return value.
  //    - returnValue: FontSources - Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont. 
  //
  rpc Set_FontSource(Button_Set_FontSourceRequest) returns (Button_Set_FontSourceResponse);
  rpc Get_FontSource(Button_Get_FontSourceRequest) returns (Button_Get_FontSourceResponse);
  
  
  // Property: ScaleWithDPI
  //
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  //
  // Some environments scale native controls based on the DPI settings of their display, while other environments do not. The TestStand User Interface Controls are designed to work in all environments.
  // The following are the recommended settings for various platforms:    * LabVIEW, LabWindows/CVI, C#, and Microsoft Visual Basic .NET—Set this property to False.    * Active Template Library (ATL)/Microsoft Foundation Class (MFC)—Set this property to True.
  //
  // Button_Set_ScaleWithDPIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //    - val: bool - Specifies how the control scales based on the dots per inch (DPI) setting. 
  //
  // Button_Set_ScaleWithDPIResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Button_Get_ScaleWithDPIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //
  // Button_Get_ScaleWithDPIResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies how the control scales based on the dots per inch (DPI) setting. 
  //
  rpc Set_ScaleWithDPI(Button_Set_ScaleWithDPIRequest) returns (Button_Set_ScaleWithDPIResponse);
  rpc Get_ScaleWithDPI(Button_Get_ScaleWithDPIRequest) returns (Button_Get_ScaleWithDPIResponse);
  
  
  // Property: Style
  //
  // Specifies the appearance of the Button control.
  //
  // Button_Set_StyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //    - val: ButtonStyles - Specifies the appearance of the Button control. 
  //
  // Button_Set_StyleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Button_Get_StyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //
  // Button_Get_StyleResponse - The response message from the server. It provides the return value.
  //    - returnValue: ButtonStyles - Specifies the appearance of the Button control. 
  //
  rpc Set_Style(Button_Set_StyleRequest) returns (Button_Set_StyleResponse);
  rpc Get_Style(Button_Get_StyleRequest) returns (Button_Get_StyleResponse);
  
  
  // Property: Image
  //
  // Specifies a custom graphic for the Button control.
  //
  // Use the Engine.Images property to obtain the TestStand images collection, and use the Images.FindImage method to obtain a particular image reference. Icon files are located in the <TestStand>\Components\Icons and <TestStand Public>\Components\Icons directories.
  //
  // Button_Set_ImageRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //    - val: IPictureDispInstance - Specifies a custom graphic for the Button control. 
  //
  // Button_Set_ImageResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Button_Get_ImageRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //
  // Button_Get_ImageResponse - The response message from the server. It provides the return value.
  //    - returnValue: IPictureDispInstance - Specifies a custom graphic for the Button control. 
  //
  rpc Set_Image(Button_Set_ImageRequest) returns (Button_Set_ImageResponse);
  rpc Get_Image(Button_Get_ImageRequest) returns (Button_Get_ImageResponse);
  
  
  // Property: TextAlignment
  //
  // Specifies the horizontal and vertical alignment of text on a Button control.
  //
  // Button_Set_TextAlignmentRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //    - val: ContentAlignmentStyles - Specifies the horizontal and vertical alignment of text on a Button control. 
  //
  // Button_Set_TextAlignmentResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Button_Get_TextAlignmentRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //
  // Button_Get_TextAlignmentResponse - The response message from the server. It provides the return value.
  //    - returnValue: ContentAlignmentStyles - Specifies the horizontal and vertical alignment of text on a Button control. 
  //
  rpc Set_TextAlignment(Button_Set_TextAlignmentRequest) returns (Button_Set_TextAlignmentResponse);
  rpc Get_TextAlignment(Button_Get_TextAlignmentRequest) returns (Button_Get_TextAlignmentResponse);
  
  
  // Property: ImageAlignment
  //
  // Specifies the horizontal and vertical alignment of an image on a Button control.
  //
  // Button_Set_ImageAlignmentRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //    - val: ContentAlignmentStyles - Specifies the horizontal and vertical alignment of an image on a Button control. 
  //
  // Button_Set_ImageAlignmentResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Button_Get_ImageAlignmentRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //
  // Button_Get_ImageAlignmentResponse - The response message from the server. It provides the return value.
  //    - returnValue: ContentAlignmentStyles - Specifies the horizontal and vertical alignment of an image on a Button control. 
  //
  rpc Set_ImageAlignment(Button_Set_ImageAlignmentRequest) returns (Button_Set_ImageAlignmentResponse);
  rpc Get_ImageAlignment(Button_Get_ImageAlignmentRequest) returns (Button_Get_ImageAlignmentResponse);
  
  
  // Property: TextImageRelation
  //
  // Specifies how to display the image in relation to the text on the Button control.
  //
  // This property has an effect only when the Button.ImageAlignment and Button.TextAlignment properties are set to the same value. When the values are different, TestStand ignores the Button.TextImageRelation property.
  //
  // Button_Set_TextImageRelationRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //    - val: TextImageRelations - Specifies how to display the image in relation to the text on the Button control. 
  //
  // Button_Set_TextImageRelationResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Button_Get_TextImageRelationRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //
  // Button_Get_TextImageRelationResponse - The response message from the server. It provides the return value.
  //    - returnValue: TextImageRelations - Specifies how to display the image in relation to the text on the Button control. 
  //
  rpc Set_TextImageRelation(Button_Set_TextImageRelationRequest) returns (Button_Set_TextImageRelationResponse);
  rpc Get_TextImageRelation(Button_Get_TextImageRelationRequest) returns (Button_Get_TextImageRelationResponse);
  
  
  // Property: ShowImage
  //
  // Specifies whether the button displays an image.
  //
  // Button_Set_ShowImageRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //    - val: bool - Specifies whether the button displays an image. 
  //
  // Button_Set_ShowImageResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Button_Get_ShowImageRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //
  // Button_Get_ShowImageResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the button displays an image. 
  //
  rpc Set_ShowImage(Button_Set_ShowImageRequest) returns (Button_Set_ShowImageResponse);
  rpc Get_ShowImage(Button_Get_ShowImageRequest) returns (Button_Get_ShowImageResponse);
  
  
  // Property: ShowText
  //
  // Specifies whether the button displays a text label.
  //
  // Button_Set_ShowTextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //    - val: bool - Specifies whether the button displays a text label. 
  //
  // Button_Set_ShowTextResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Button_Get_ShowTextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //
  // Button_Get_ShowTextResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the button displays a text label. 
  //
  rpc Set_ShowText(Button_Set_ShowTextRequest) returns (Button_Set_ShowTextResponse);
  rpc Get_ShowText(Button_Get_ShowTextRequest) returns (Button_Get_ShowTextResponse);
  
  
  // Property: BackColor
  //
  // Specifies the background color for the Button control.
  //
  // When you set the Button.Style property to ButtonStyle_ToolBar, this setting applies to the face and border of the button. When you set the Button.Style property to ButtonStyle_Standard, the button face adheres to the system settings, and this setting affects only the border of the button.
  //
  // Button_Set_BackColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //    - val: uint32 - Specifies the background color for the Button control. 
  //
  // Button_Set_BackColorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Button_Get_BackColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //
  // Button_Get_BackColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Specifies the background color for the Button control. 
  //
  rpc Set_BackColor(Button_Set_BackColorRequest) returns (Button_Set_BackColorResponse);
  rpc Get_BackColor(Button_Get_BackColorRequest) returns (Button_Get_BackColorResponse);
  
  
  // Property: ForeColor
  //
  // Specifies the text color for the Button control.
  //
  // Use the Button.BackColor property to change the face and border color of the control.
  //
  // Button_Set_ForeColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //    - val: uint32 - Specifies the text color for the Button control. 
  //
  // Button_Set_ForeColorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Button_Get_ForeColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //
  // Button_Get_ForeColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Specifies the text color for the Button control. 
  //
  rpc Set_ForeColor(Button_Set_ForeColorRequest) returns (Button_Set_ForeColorResponse);
  rpc Get_ForeColor(Button_Get_ForeColorRequest) returns (Button_Get_ForeColorResponse);
  
  
  // Property: ActionStyle
  //
  // Specifies how the button behaves when you click it.
  //
  // Button_Set_ActionStyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //    - val: ButtonActionStyles - Specifies how the button behaves when you click it. 
  //
  // Button_Set_ActionStyleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Button_Get_ActionStyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //
  // Button_Get_ActionStyleResponse - The response message from the server. It provides the return value.
  //    - returnValue: ButtonActionStyles - Specifies how the button behaves when you click it. 
  //
  rpc Set_ActionStyle(Button_Set_ActionStyleRequest) returns (Button_Set_ActionStyleResponse);
  rpc Get_ActionStyle(Button_Get_ActionStyleRequest) returns (Button_Get_ActionStyleResponse);
  
  
  // Property: ToolTipText
  //
  // Specifies the tooltip for the Button control. When this property is an empty string, the Button control uses the Button.Caption property for the tooltip.
  //
  // Button_Set_ToolTipTextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //    - val: string - Specifies the tooltip for the Button control. When this property is an empty string, the Button control uses the Button.Caption property for the tooltip. 
  //
  // Button_Set_ToolTipTextResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Button_Get_ToolTipTextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //
  // Button_Get_ToolTipTextResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the tooltip for the Button control. When this property is an empty string, the Button control uses the Button.Caption property for the tooltip. 
  //
  rpc Set_ToolTipText(Button_Set_ToolTipTextRequest) returns (Button_Set_ToolTipTextResponse);
  rpc Get_ToolTipText(Button_Get_ToolTipTextRequest) returns (Button_Get_ToolTipTextResponse);
  
  
  // Property: UseMnemonic
  //
  // The button interprets the character that follows an ampersand (&) character in the Button.Caption property as an accelerator character when this property is True.
  //
  // Button_Set_UseMnemonicRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //    - val: bool - The button interprets the character that follows an ampersand (&) character in the Button.Caption property as an accelerator character when this property is True. 
  //
  // Button_Set_UseMnemonicResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Button_Get_UseMnemonicRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //
  // Button_Get_UseMnemonicResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The button interprets the character that follows an ampersand (&) character in the Button.Caption property as an accelerator character when this property is True. 
  //
  rpc Set_UseMnemonic(Button_Set_UseMnemonicRequest) returns (Button_Set_UseMnemonicResponse);
  rpc Get_UseMnemonic(Button_Get_UseMnemonicRequest) returns (Button_Get_UseMnemonicResponse);
  
  
  // Property: UseMaskColor
  //
  // The control uses the color the Button.MaskColor property specifies as a mask color when this property is True. You can use the mask color to create transparent regions.
  //
  // This property is used only when the button displays an image.
  //
  // Button_Set_UseMaskColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //    - val: bool - The control uses the color the Button.MaskColor property specifies as a mask color when this property is True. You can use the mask color to create transparent regions. 
  //
  // Button_Set_UseMaskColorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Button_Get_UseMaskColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //
  // Button_Get_UseMaskColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The control uses the color the Button.MaskColor property specifies as a mask color when this property is True. You can use the mask color to create transparent regions. 
  //
  rpc Set_UseMaskColor(Button_Set_UseMaskColorRequest) returns (Button_Set_UseMaskColorResponse);
  rpc Get_UseMaskColor(Button_Get_UseMaskColorRequest) returns (Button_Get_UseMaskColorResponse);
  
  
  // Property: MaskColor
  //
  // Specifies a color in the picture of the control to use as a mask color when the Button.UseMaskColor property is True. You can use the mask color to create transparent regions.
  //
  // This property is used only when the button displays an image.
  //
  // Button_Set_MaskColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //    - val: uint32 - Specifies a color in the picture of the control to use as a mask color when the Button.UseMaskColor property is True. You can use the mask color to create transparent regions. 
  //
  // Button_Set_MaskColorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Button_Get_MaskColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ButtonInstance - The id of the Button object.
  //
  // Button_Get_MaskColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Specifies a color in the picture of the control to use as a mask color when the Button.UseMaskColor property is True. You can use the mask color to create transparent regions. 
  //
  rpc Set_MaskColor(Button_Set_MaskColorRequest) returns (Button_Set_MaskColorResponse);
  rpc Get_MaskColor(Button_Get_MaskColorRequest) returns (Button_Get_MaskColorResponse);
  
  

  // Event: Click
  //
  // Occurs when you press and release the mouse on the control, or when the Button.Value property of the control changes.
  //
  // The event has a registration method and a reply method.
  // GetEvents_Click - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_Click - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // Button_GetEvents_ClickRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ButtonInstance - The id of the Button object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // Button_GetEvents_ClickResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // Button_ReplyToEvent_ClickRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // Button_ReplyToEvent_ClickResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_Click(Button_GetEvents_ClickRequest) returns (stream Button_GetEvents_ClickResponse);
  rpc ReplyToEvent_Click(Button_ReplyToEvent_ClickRequest) returns (Button_ReplyToEvent_ClickResponse); 
  
  
  // Event: KeyDown
  //
  // Occurs when the user presses a key while the control has the input focus. This event occurs before the Button.KeyPress event.
  //
  // The event has a registration method and a reply method.
  // GetEvents_KeyDown - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_KeyDown - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // Button_GetEvents_KeyDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ButtonInstance - The id of the Button object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // Button_GetEvents_KeyDownResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - keyCode: int32
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //
  // Button_ReplyToEvent_KeyDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //  - keyCode: int32
  //
  // Button_ReplyToEvent_KeyDownResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_KeyDown(Button_GetEvents_KeyDownRequest) returns (stream Button_GetEvents_KeyDownResponse);
  rpc ReplyToEvent_KeyDown(Button_ReplyToEvent_KeyDownRequest) returns (Button_ReplyToEvent_KeyDownResponse); 
  
  
  // Event: KeyPress
  //
  // Occurs when the user presses a key while the control has the input focus. This event occurs after the Button.KeyDown event.
  //
  // The event has a registration method and a reply method.
  // GetEvents_KeyPress - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_KeyPress - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // Button_GetEvents_KeyPressRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ButtonInstance - The id of the Button object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // Button_GetEvents_KeyPressResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - keyAscii: int32
  //
  // Button_ReplyToEvent_KeyPressRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //  - keyAscii: int32
  //
  // Button_ReplyToEvent_KeyPressResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_KeyPress(Button_GetEvents_KeyPressRequest) returns (stream Button_GetEvents_KeyPressResponse);
  rpc ReplyToEvent_KeyPress(Button_ReplyToEvent_KeyPressRequest) returns (Button_ReplyToEvent_KeyPressResponse); 
  
  
  // Event: KeyUp
  //
  // Occurs when the user releases a key while the control has the input focus.
  //
  // The event has a registration method and a reply method.
  // GetEvents_KeyUp - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_KeyUp - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // Button_GetEvents_KeyUpRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ButtonInstance - The id of the Button object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // Button_GetEvents_KeyUpResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - keyCode: int32 - Specifies the KeyCodes constant of the key the user pressed.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //
  // Button_ReplyToEvent_KeyUpRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // Button_ReplyToEvent_KeyUpResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_KeyUp(Button_GetEvents_KeyUpRequest) returns (stream Button_GetEvents_KeyUpResponse);
  rpc ReplyToEvent_KeyUp(Button_ReplyToEvent_KeyUpRequest) returns (Button_ReplyToEvent_KeyUpResponse); 
  
  
  // Event: MouseDown
  //
  // Occurs when the user clicks the mouse on the control. This event occurs before the Button.MouseUp event.
  //
  // The event has a registration method and a reply method.
  // GetEvents_MouseDown - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_MouseDown - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // Button_GetEvents_MouseDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ButtonInstance - The id of the Button object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // Button_GetEvents_MouseDownResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - btn: int32 - Specifies a MouseButtons constant that specifies the mouse button the user pressed to generate this event.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //  - x: int32 - Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //  - y: int32 - Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //
  // Button_ReplyToEvent_MouseDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // Button_ReplyToEvent_MouseDownResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_MouseDown(Button_GetEvents_MouseDownRequest) returns (stream Button_GetEvents_MouseDownResponse);
  rpc ReplyToEvent_MouseDown(Button_ReplyToEvent_MouseDownRequest) returns (Button_ReplyToEvent_MouseDownResponse); 
  
  
  // Event: MouseMove
  //
  // Occurs when the user moves the mouse over the control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_MouseMove - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_MouseMove - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // Button_GetEvents_MouseMoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ButtonInstance - The id of the Button object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // Button_GetEvents_MouseMoveResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - btn: int32 - Specifies what mouse buttons are pressed. You can use any combination of the MouseButtons constants.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //  - x: int32 - Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //  - y: int32 - Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //
  // Button_ReplyToEvent_MouseMoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // Button_ReplyToEvent_MouseMoveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_MouseMove(Button_GetEvents_MouseMoveRequest) returns (stream Button_GetEvents_MouseMoveResponse);
  rpc ReplyToEvent_MouseMove(Button_ReplyToEvent_MouseMoveRequest) returns (Button_ReplyToEvent_MouseMoveResponse); 
  
  
  // Event: MouseUp
  //
  // Occurs when the user releases the mouse button on the control. This event occurs before the Button.Click event.
  //
  // The event has a registration method and a reply method.
  // GetEvents_MouseUp - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_MouseUp - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // Button_GetEvents_MouseUpRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ButtonInstance - The id of the Button object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // Button_GetEvents_MouseUpResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - btn: int32 - Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //  - x: int32 - Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //  - y: int32 - Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //
  // Button_ReplyToEvent_MouseUpRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // Button_ReplyToEvent_MouseUpResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_MouseUp(Button_GetEvents_MouseUpRequest) returns (stream Button_GetEvents_MouseUpResponse);
  rpc ReplyToEvent_MouseUp(Button_ReplyToEvent_MouseUpRequest) returns (Button_ReplyToEvent_MouseUpResponse); 
  
  
  // Event: ConnectionActivity
  //
  // Occurs after the connection to a manager control makes a change to a user interface control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_ConnectionActivity - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_ConnectionActivity - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // Button_GetEvents_ConnectionActivityRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ButtonInstance - The id of the Button object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // Button_GetEvents_ConnectionActivityResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - activity: ConnectionActivityTypes - Specifies the type of change.
  //
  // Button_ReplyToEvent_ConnectionActivityRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // Button_ReplyToEvent_ConnectionActivityResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_ConnectionActivity(Button_GetEvents_ConnectionActivityRequest) returns (stream Button_GetEvents_ConnectionActivityResponse);
  rpc ReplyToEvent_ConnectionActivity(Button_ReplyToEvent_ConnectionActivityRequest) returns (Button_ReplyToEvent_ConnectionActivityResponse); 
  
  
}
message ButtonInstance {
  // Specifies the handle of the Button instance in the server.
  string id = 1;
}
message Button_ButtonRequest {
}

message Button_ButtonResponse {
  // The return type of the Button object.
  ButtonInstance returnValue = 1;
}

message Button_DoClickRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
}

message Button_DoClickResponse {
}

message Button_LocalizeRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Specifies the name of the section in the language files that contains the localized text.
  string sectionName = 2;
}

message Button_LocalizeResponse {
}

message Button_Set_EnabledRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // The control responds to user-generated events only when this property is True.
  bool val = 2;
}

message Button_Set_EnabledResponse {
}

message Button_Get_EnabledRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
}

message Button_Get_EnabledResponse {
  // The control responds to user-generated events only when this property is True.
  bool returnValue = 1;
}

message Button_Set_MousePointerRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Specifies the appearance of the mouse cursor when the cursor is over the control.
  MousePointerStyles val = 2;
}

message Button_Set_MousePointerResponse {
}

message Button_Get_MousePointerRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
}

message Button_Get_MousePointerResponse {
  // Specifies the appearance of the mouse cursor when the cursor is over the control.
  MousePointerStyles returnValue = 1;
}

message Button_Set_MouseIconRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Specifies the custom mouse icon for the control.
  IPictureDispInstance val = 2;
}

message Button_Set_MouseIconResponse {
}

message Button_Get_MouseIconRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
}

message Button_Get_MouseIconResponse {
  // Specifies the custom mouse icon for the control.
  IPictureDispInstance returnValue = 1;
}

message Button_Set_FontRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Specifies the font for the control when the value of the Button.FontSource property is FontSource_UseFontProperty.
  IFontDispInstance val = 2;
}

message Button_Set_FontResponse {
}

message Button_Get_FontRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
}

message Button_Get_FontResponse {
  // Specifies the font for the control when the value of the Button.FontSource property is FontSource_UseFontProperty.
  IFontDispInstance returnValue = 1;
}

message Button_Set_CaptionRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Specifies the text the control displays.
  string val = 2;
}

message Button_Set_CaptionResponse {
}

message Button_Get_CaptionRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
}

message Button_Get_CaptionResponse {
  // Specifies the text the control displays.
  string returnValue = 1;
}

message Button_Get_hWndRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
}

message Button_Get_hWndResponse {
  // Returns a Window handle for the control.
  int32 returnValue = 1;
}

message Button_Set_ValueRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // This property is True when the button is pressed and False when the button is not pressed. Use this property when the value of the ButtonActionStyles enumeration is ButtonActionStyle_ToggleButton to set the pressed state of the button.
  bool val = 2;
}

message Button_Set_ValueResponse {
}

message Button_Get_ValueRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
}

message Button_Get_ValueResponse {
  // This property is True when the button is pressed and False when the button is not pressed. Use this property when the value of the ButtonActionStyles enumeration is ButtonActionStyle_ToggleButton to set the pressed state of the button.
  bool returnValue = 1;
}

message Button_Set_AutoSizingRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Specifies whether the control automatically resizes when the text of the control changes.
  ButtonSizing val = 2;
}

message Button_Set_AutoSizingResponse {
}

message Button_Get_AutoSizingRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
}

message Button_Get_AutoSizingResponse {
  // Specifies whether the control automatically resizes when the text of the control changes.
  ButtonSizing returnValue = 1;
}

message Button_Set_FontSourceRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  FontSources val = 2;
}

message Button_Set_FontSourceResponse {
}

message Button_Get_FontSourceRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
}

message Button_Get_FontSourceResponse {
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  FontSources returnValue = 1;
}

message Button_Set_ScaleWithDPIRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  bool val = 2;
}

message Button_Set_ScaleWithDPIResponse {
}

message Button_Get_ScaleWithDPIRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
}

message Button_Get_ScaleWithDPIResponse {
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  bool returnValue = 1;
}

message Button_Set_StyleRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Specifies the appearance of the Button control.
  ButtonStyles val = 2;
}

message Button_Set_StyleResponse {
}

message Button_Get_StyleRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
}

message Button_Get_StyleResponse {
  // Specifies the appearance of the Button control.
  ButtonStyles returnValue = 1;
}

message Button_Set_ImageRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Specifies a custom graphic for the Button control.
  IPictureDispInstance val = 2;
}

message Button_Set_ImageResponse {
}

message Button_Get_ImageRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
}

message Button_Get_ImageResponse {
  // Specifies a custom graphic for the Button control.
  IPictureDispInstance returnValue = 1;
}

message Button_Set_TextAlignmentRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Specifies the horizontal and vertical alignment of text on a Button control.
  ContentAlignmentStyles val = 2;
}

message Button_Set_TextAlignmentResponse {
}

message Button_Get_TextAlignmentRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
}

message Button_Get_TextAlignmentResponse {
  // Specifies the horizontal and vertical alignment of text on a Button control.
  ContentAlignmentStyles returnValue = 1;
}

message Button_Set_ImageAlignmentRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Specifies the horizontal and vertical alignment of an image on a Button control.
  ContentAlignmentStyles val = 2;
}

message Button_Set_ImageAlignmentResponse {
}

message Button_Get_ImageAlignmentRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
}

message Button_Get_ImageAlignmentResponse {
  // Specifies the horizontal and vertical alignment of an image on a Button control.
  ContentAlignmentStyles returnValue = 1;
}

message Button_Set_TextImageRelationRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Specifies how to display the image in relation to the text on the Button control.
  TextImageRelations val = 2;
}

message Button_Set_TextImageRelationResponse {
}

message Button_Get_TextImageRelationRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
}

message Button_Get_TextImageRelationResponse {
  // Specifies how to display the image in relation to the text on the Button control.
  TextImageRelations returnValue = 1;
}

message Button_Set_ShowImageRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Specifies whether the button displays an image.
  bool val = 2;
}

message Button_Set_ShowImageResponse {
}

message Button_Get_ShowImageRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
}

message Button_Get_ShowImageResponse {
  // Specifies whether the button displays an image.
  bool returnValue = 1;
}

message Button_Set_ShowTextRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Specifies whether the button displays a text label.
  bool val = 2;
}

message Button_Set_ShowTextResponse {
}

message Button_Get_ShowTextRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
}

message Button_Get_ShowTextResponse {
  // Specifies whether the button displays a text label.
  bool returnValue = 1;
}

message Button_Set_BackColorRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Specifies the background color for the Button control.
  uint32 val = 2;
}

message Button_Set_BackColorResponse {
}

message Button_Get_BackColorRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
}

message Button_Get_BackColorResponse {
  // Specifies the background color for the Button control.
  uint32 returnValue = 1;
}

message Button_Set_ForeColorRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Specifies the text color for the Button control.
  uint32 val = 2;
}

message Button_Set_ForeColorResponse {
}

message Button_Get_ForeColorRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
}

message Button_Get_ForeColorResponse {
  // Specifies the text color for the Button control.
  uint32 returnValue = 1;
}

message Button_Set_ActionStyleRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Specifies how the button behaves when you click it.
  ButtonActionStyles val = 2;
}

message Button_Set_ActionStyleResponse {
}

message Button_Get_ActionStyleRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
}

message Button_Get_ActionStyleResponse {
  // Specifies how the button behaves when you click it.
  ButtonActionStyles returnValue = 1;
}

message Button_Set_ToolTipTextRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Specifies the tooltip for the Button control. When this property is an empty string, the Button control uses the Button.Caption property for the tooltip.
  string val = 2;
}

message Button_Set_ToolTipTextResponse {
}

message Button_Get_ToolTipTextRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
}

message Button_Get_ToolTipTextResponse {
  // Specifies the tooltip for the Button control. When this property is an empty string, the Button control uses the Button.Caption property for the tooltip.
  string returnValue = 1;
}

message Button_Set_UseMnemonicRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // The button interprets the character that follows an ampersand (&) character in the Button.Caption property as an accelerator character when this property is True.
  bool val = 2;
}

message Button_Set_UseMnemonicResponse {
}

message Button_Get_UseMnemonicRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
}

message Button_Get_UseMnemonicResponse {
  // The button interprets the character that follows an ampersand (&) character in the Button.Caption property as an accelerator character when this property is True.
  bool returnValue = 1;
}

message Button_Set_UseMaskColorRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // The control uses the color the Button.MaskColor property specifies as a mask color when this property is True. You can use the mask color to create transparent regions.
  bool val = 2;
}

message Button_Set_UseMaskColorResponse {
}

message Button_Get_UseMaskColorRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
}

message Button_Get_UseMaskColorResponse {
  // The control uses the color the Button.MaskColor property specifies as a mask color when this property is True. You can use the mask color to create transparent regions.
  bool returnValue = 1;
}

message Button_Set_MaskColorRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Specifies a color in the picture of the control to use as a mask color when the Button.UseMaskColor property is True. You can use the mask color to create transparent regions.
  uint32 val = 2;
}

message Button_Set_MaskColorResponse {
}

message Button_Get_MaskColorRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
}

message Button_Get_MaskColorResponse {
  // Specifies a color in the picture of the control to use as a mask color when the Button.UseMaskColor property is True. You can use the mask color to create transparent regions.
  uint32 returnValue = 1;
}

message Button_GetEvents_ClickRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message Button_GetEvents_ClickResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message Button_ReplyToEvent_ClickRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message Button_ReplyToEvent_ClickResponse {
}

message Button_GetEvents_KeyDownRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message Button_GetEvents_KeyDownResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the KeyCodes constant of the key the user pressed.
  int32 keyCode = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
}

message Button_ReplyToEvent_KeyDownRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  // Specifies the KeyCodes constant of the key the user pressed.
  int32 keyCode = 2;
}

message Button_ReplyToEvent_KeyDownResponse {
}

message Button_GetEvents_KeyPressRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message Button_GetEvents_KeyPressResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the ASCII value of the pressed key.
  int32 keyAscii = 2;
}

message Button_ReplyToEvent_KeyPressRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  // Specifies the ASCII value of the pressed key.
  int32 keyAscii = 2;
}

message Button_ReplyToEvent_KeyPressResponse {
}

message Button_GetEvents_KeyUpRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message Button_GetEvents_KeyUpResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the KeyCodes constant of the key the user pressed.
  int32 keyCode = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
}

message Button_ReplyToEvent_KeyUpRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message Button_ReplyToEvent_KeyUpResponse {
}

message Button_GetEvents_MouseDownRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message Button_GetEvents_MouseDownResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies a MouseButtons constant that specifies the mouse button the user pressed to generate this event.
  int32 btn = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
  // Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 x = 4;
  // Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 y = 5;
}

message Button_ReplyToEvent_MouseDownRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message Button_ReplyToEvent_MouseDownResponse {
}

message Button_GetEvents_MouseMoveRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message Button_GetEvents_MouseMoveResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies what mouse buttons are pressed. You can use any combination of the MouseButtons constants.
  int32 btn = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
  // Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 x = 4;
  // Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 y = 5;
}

message Button_ReplyToEvent_MouseMoveRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message Button_ReplyToEvent_MouseMoveResponse {
}

message Button_GetEvents_MouseUpRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message Button_GetEvents_MouseUpResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  int32 btn = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
  // Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 x = 4;
  // Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 y = 5;
}

message Button_ReplyToEvent_MouseUpRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message Button_ReplyToEvent_MouseUpResponse {
}

message Button_GetEvents_ConnectionActivityRequest {
  // The id of the Button object.
  ButtonInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message Button_GetEvents_ConnectionActivityResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the type of change.
  ConnectionActivityTypes activity = 2;
}

message Button_ReplyToEvent_ConnectionActivityRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message Button_ReplyToEvent_ConnectionActivityResponse {
}

// ExpressionEdit
//
// Use an ExpressionEdit control so users can edit a TestStand expression with syntax coloring, popup help, and statement completion. Although you typically do not need to edit expressions in a user interface application, you can connect a manager control to a read-only ExpressionEdit control to display text information about the application state, such as the pathname of the sequence file selection or the name of the current user.
// You can also use ExpressionEdit controls in dialog boxes for step types and in tools in which you prompt users to enter a TestStand expression.
//
service ExpressionEdit {
  // Service: ExpressionEdit
  //
  // Creates a new ExpressionEdit instance
  //
  // ExpressionEditRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEditResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExpressionEditInstance - The return type of the ExpressionEdit object.
  //
  rpc ExpressionEdit(ExpressionEdit_ExpressionEditRequest) returns (ExpressionEdit_ExpressionEditResponse);

  // Method: DisplayBrowseExprDialog
  //
  // Launches the Expression Browser dialog box. Use the ExpressionEdit.BrowseExprDialogTitle property to customize the title for the dialog box, and use the BrowseExprDialogOptions constants to specify additional options.
  //
  // ExpressionEdit_DisplayBrowseExprDialogRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_DisplayBrowseExprDialogResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns True when you click OK in the Expression Browser dialog box. Returns False when you click Cancel. 
  //
  rpc DisplayBrowseExprDialog(ExpressionEdit_DisplayBrowseExprDialogRequest) returns (ExpressionEdit_DisplayBrowseExprDialogResponse);
  
  
  // Method: Localize
  //
  // Localizes the ToolTipText and ContextMenuItemCaption properties for each ExpressionEditButton and the DisplayName property of each ExpressionEditComboBoxItem.
  //
  // First, update a .ini file located in the TestStand Language directory with the required string. Second, use the string tag in the .ini file as the ToolTipText and ContextMenuItemCaption properties of each button and the DisplayName property of each combo box item.
  // When you call this method, the control replaces the ToolTipText and ContextMenuItemCaption properties of each button and the DisplayName property of each combo box item with the string from the .ini file. If the ToolTipText, ContextMenuItemCaption, or DisplayName property is not a tag in the .ini file, the property does not change.
  // Note: This method does not localize the ToolTipText of non-custom buttons. Non-custom buttons localize ToolTipText automatically.
  //
  // ExpressionEdit_LocalizeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - sectionName: string - Specifies the name of the section in the language files that contains the localized text.
  //
  // ExpressionEdit_LocalizeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Localize(ExpressionEdit_LocalizeRequest) returns (ExpressionEdit_LocalizeResponse);
  
  
  // Method: GetAdditionalEvaluationConstants
  //
  // Returns a copy of the additional constants you passed to the ExpressionEdit.SetAdditionalEvaluationConstants method.
  //
  // ExpressionEdit_GetAdditionalEvaluationConstantsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_GetAdditionalEvaluationConstantsResponse - The response message from the server. It provides the return value.
  //    - returnValue: repeated PropertyObjectInstance - The return type of the PropertyObject[] object.
  //
  rpc GetAdditionalEvaluationConstants(ExpressionEdit_GetAdditionalEvaluationConstantsRequest) returns (ExpressionEdit_GetAdditionalEvaluationConstantsResponse);
  
  
  // Method: SetAdditionalEvaluationConstants
  //
  // Use this method to specify additional constants that the expression can contain that are not part of the Context. The ExpressionEdit control does not consider an identifier that has the same name as one of these constants as an error.
  //
  // This method is useful when the expression can contain a constant from an enumeration, such as a parameter value of a module call when the type of that parameter is an enumeration.
  //
  // ExpressionEdit_SetAdditionalEvaluationConstantsRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: repeated PropertyObjectInstance - Specifies variables that are valid in the expression but are not part of the context. For example, include a numeric or string PropertyObject where the name and value of the object are the name and value of the enumeration or constant. The control ignores subproperties of the object.
  //
  // ExpressionEdit_SetAdditionalEvaluationConstantsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetAdditionalEvaluationConstants(ExpressionEdit_SetAdditionalEvaluationConstantsRequest) returns (ExpressionEdit_SetAdditionalEvaluationConstantsResponse);
  
  
  // Method: GetValidEvaluationTypes
  //
  // Obtains the valid evaluation types.
  //
  // ExpressionEdit_GetValidEvaluationTypesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_GetValidEvaluationTypesResponse - The response message from the server. It provides the return value.
  //    - returnValue: EvaluationTypesInstance - The return type of the EvaluationTypes object.
  //
  rpc GetValidEvaluationTypes(ExpressionEdit_GetValidEvaluationTypesRequest) returns (ExpressionEdit_GetValidEvaluationTypesResponse);
  
  
  // Method: SetValidEvaluationTypes
  //
  // Sets the valid evaluation types.
  //
  // ExpressionEdit_SetValidEvaluationTypesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: EvaluationTypesInstance - Specifies the expected types for evaluating an expression.
  //
  // ExpressionEdit_SetValidEvaluationTypesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SetValidEvaluationTypes(ExpressionEdit_SetValidEvaluationTypesRequest) returns (ExpressionEdit_SetValidEvaluationTypesResponse);
  
  
  // Method: SelectAll
  //
  // Selects all the text in the ExpressionEdit control.
  //
  // ExpressionEdit_SelectAllRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_SelectAllResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc SelectAll(ExpressionEdit_SelectAllRequest) returns (ExpressionEdit_SelectAllResponse);
  
  
  // Method: Evaluate
  //
  // Evaluates the current expression using the context the ExpressionEdit.Context property specifies.
  //
  // ExpressionEdit_EvaluateRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - evaluationOptions: int32 - Pass Eval_NoOptions to specify the default behavior, or pass one or more EvaluationOptions constants. The EvalOption_AllowEmptyExpression constant is ignored. Use the ExpressionEdit.AllowEmpty property to determine whether to treat an empty expression as an error. Use the bitwise-OR operator to specify multiple options.
  //
  // ExpressionEdit_EvaluateResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - The result of the evaluation. 
  //
  rpc Evaluate(ExpressionEdit_EvaluateRequest) returns (ExpressionEdit_EvaluateResponse);
  
  
  // Method: CheckExpression
  //
  // Returns the result of the error checking the ExpressionEdit.ErrorCheck, ExpressionEdit.SetValidEvaluationTypes, and ExpressionEdit.GetValidEvaluationTypes methods specify.
  //
  // When you call this method, the ExpressionEdit control might modify the text to automatically prefix variables that do not have a full path specified.
  // Calling this method does not display an error.
  // To display an error, call the ExpressionEdit.DisplayError method.
  //
  // ExpressionEdit_CheckExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_CheckExpressionResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: TSError - An error code. 
  //    - errorDescription: strin - When an error exists, this parameter returns an error message that describes the error.
  //    - errorStartPosition: int3 - When an error exists, this parameter returns the starting character index of the error in the expression.
  //    - errorEndPosition: int3 - When an error exists, this parameter returns the index of one character past the ending character index of the error in the expression.
  //
  rpc CheckExpression(ExpressionEdit_CheckExpressionRequest) returns (ExpressionEdit_CheckExpressionResponse);
  
  
  // Method: DisplayError
  //
  // Performs error checking the ExpressionEdit.ErrorCheck and ExpressionEdit.AllowEmpty properties and the  ExpressionEdit.SetValidEvaluationTypes and ExpressionEdit.GetValidEvaluationTypes methods specify. The ExpressionEdit control displays any errors in a different font and displays the error message in a tooltip.
  //
  // Use this method to force the ExpressionEdit control to check for errors as it does when you select Check for Errors from the ExpressionEdit control context menu.
  // When you call this method, the ExpressionEdit control might modify the text to automatically prefix variables that do not have a full path specified.
  //
  // ExpressionEdit_DisplayErrorRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - options: int32 - Specifies a bitwise-OR combination of the DisplayErrorOptions constants.
  //
  // ExpressionEdit_DisplayErrorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc DisplayError(ExpressionEdit_DisplayErrorRequest) returns (ExpressionEdit_DisplayErrorResponse);
  
  

  // Property: BackColor
  //
  // Specifies the background color of the ExpressionEdit control.
  //
  // ExpressionEdit_Set_BackColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: uint32 - Specifies the background color of the ExpressionEdit control. 
  //
  // ExpressionEdit_Set_BackColorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_BackColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_BackColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Specifies the background color of the ExpressionEdit control. 
  //
  rpc Set_BackColor(ExpressionEdit_Set_BackColorRequest) returns (ExpressionEdit_Set_BackColorResponse);
  rpc Get_BackColor(ExpressionEdit_Get_BackColorRequest) returns (ExpressionEdit_Get_BackColorResponse);
  
  
  // Property: Borders
  //
  // Returns the frame and draggable borders that surround the control.
  //
  // ExpressionEdit_Get_BordersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_BordersResponse - The response message from the server. It provides the return value.
  //    - returnValue: BordersInstance - Returns the frame and draggable borders that surround the control. 
  //
  rpc Get_Borders(ExpressionEdit_Get_BordersRequest) returns (ExpressionEdit_Get_BordersResponse);
  
  
  // Property: Enabled
  //
  // The control responds to user input only when this property is True.
  //
  // ExpressionEdit_Set_EnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: bool - The control responds to user input only when this property is True. 
  //
  // ExpressionEdit_Set_EnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_EnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_EnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The control responds to user input only when this property is True. 
  //
  rpc Set_Enabled(ExpressionEdit_Set_EnabledRequest) returns (ExpressionEdit_Set_EnabledResponse);
  rpc Get_Enabled(ExpressionEdit_Get_EnabledRequest) returns (ExpressionEdit_Get_EnabledResponse);
  
  
  // Property: HideSelection
  //
  // When this property is True, text selection is hidden when the ExpressionEdit control loses focus. When this property is False, text selection is never hidden.
  //
  // ExpressionEdit_Set_HideSelectionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: bool - When this property is True, text selection is hidden when the ExpressionEdit control loses focus. When this property is False, text selection is never hidden. 
  //
  // ExpressionEdit_Set_HideSelectionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_HideSelectionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_HideSelectionResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When this property is True, text selection is hidden when the ExpressionEdit control loses focus. When this property is False, text selection is never hidden. 
  //
  rpc Set_HideSelection(ExpressionEdit_Set_HideSelectionRequest) returns (ExpressionEdit_Set_HideSelectionResponse);
  rpc Get_HideSelection(ExpressionEdit_Get_HideSelectionRequest) returns (ExpressionEdit_Get_HideSelectionResponse);
  
  
  // Property: Font
  //
  // Specifies the current font for the ExpressionEdit control when the value of the ExpressionEdit.FontSource property is FontSource_UseFontProperty.
  //
  // Only the font name and size are used. All other properties of this parameter are ignored because those properties are set on a per-text element basis in the Expression Editing Options dialog box, which you can access through the Options item from the context menu of the ExpressionEdit control.
  //
  // ExpressionEdit_Set_FontRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: IFontDispInstance - Specifies the current font for the ExpressionEdit control when the value of the ExpressionEdit.FontSource property is FontSource_UseFontProperty. 
  //
  // ExpressionEdit_Set_FontResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_FontRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_FontResponse - The response message from the server. It provides the return value.
  //    - returnValue: IFontDispInstance - Specifies the current font for the ExpressionEdit control when the value of the ExpressionEdit.FontSource property is FontSource_UseFontProperty. 
  //
  rpc Set_Font(ExpressionEdit_Set_FontRequest) returns (ExpressionEdit_Set_FontResponse);
  rpc Get_Font(ExpressionEdit_Get_FontRequest) returns (ExpressionEdit_Get_FontResponse);
  
  
  // Property: hWnd
  //
  // Returns the Window handle of the ExpressionEdit control.
  //
  // You can use the returned Window handle with the Microsoft Windows API functions.
  // Note: Using Windows API functions with this property can cause undefined behavior.
  //
  // ExpressionEdit_Get_hWndRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_hWndResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the Window handle of the ExpressionEdit control. 
  //
  rpc Get_hWnd(ExpressionEdit_Get_hWndRequest) returns (ExpressionEdit_Get_hWndResponse);
  
  
  // Property: ReadOnly
  //
  // Specifies that the control can be edited.
  //
  // ExpressionEdit_Set_ReadOnlyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: bool - Specifies that the control can be edited. 
  //
  // ExpressionEdit_Set_ReadOnlyResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_ReadOnlyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_ReadOnlyResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies that the control can be edited. 
  //
  rpc Set_ReadOnly(ExpressionEdit_Set_ReadOnlyRequest) returns (ExpressionEdit_Set_ReadOnlyResponse);
  rpc Get_ReadOnly(ExpressionEdit_Get_ReadOnlyRequest) returns (ExpressionEdit_Get_ReadOnlyResponse);
  
  
  // Property: MaxLength
  //
  // Specifies the maximum number of characters the ExpressionEdit control can contain. When the value of this property is 0, the maximum number of characters is 64,000. You can specify a number greater than 64,000.
  //
  // ExpressionEdit_Set_MaxLengthRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: int32 - Specifies the maximum number of characters the ExpressionEdit control can contain. When the value of this property is 0, the maximum number of characters is 64,000. You can specify a number greater than 64,000. 
  //
  // ExpressionEdit_Set_MaxLengthResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_MaxLengthRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_MaxLengthResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the maximum number of characters the ExpressionEdit control can contain. When the value of this property is 0, the maximum number of characters is 64,000. You can specify a number greater than 64,000. 
  //
  rpc Set_MaxLength(ExpressionEdit_Set_MaxLengthRequest) returns (ExpressionEdit_Set_MaxLengthResponse);
  rpc Get_MaxLength(ExpressionEdit_Get_MaxLengthRequest) returns (ExpressionEdit_Get_MaxLengthResponse);
  
  
  // Property: MouseIcon
  //
  // Displays the specified picture as the cursor for the ExpressionEdit control.
  //
  // The value of the ExpressionEdit.MousePointer property must be MousePointer_Custom for you to use the ExpressionEdit.MouseIcon property. When you set this property to NULL, the value of the ExpressionEdit.MousePointer property changes to MousePointer_Default.
  //
  // ExpressionEdit_Set_MouseIconRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: IPictureDispInstance - Displays the specified picture as the cursor for the ExpressionEdit control. 
  //
  // ExpressionEdit_Set_MouseIconResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_MouseIconRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_MouseIconResponse - The response message from the server. It provides the return value.
  //    - returnValue: IPictureDispInstance - Displays the specified picture as the cursor for the ExpressionEdit control. 
  //
  rpc Set_MouseIcon(ExpressionEdit_Set_MouseIconRequest) returns (ExpressionEdit_Set_MouseIconResponse);
  rpc Get_MouseIcon(ExpressionEdit_Get_MouseIconRequest) returns (ExpressionEdit_Get_MouseIconResponse);
  
  
  // Property: MousePointer
  //
  // Specifies the appearance of the mouse cursor when the cursor is over the control.
  //
  // When the parameter is MousePointer_Custom, the mouse cursor is the picture the ExpressionEdit.MouseIcon property specifies.
  //
  // ExpressionEdit_Set_MousePointerRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: MousePointerStyles - Specifies the appearance of the mouse cursor when the cursor is over the control. 
  //
  // ExpressionEdit_Set_MousePointerResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_MousePointerRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_MousePointerResponse - The response message from the server. It provides the return value.
  //    - returnValue: MousePointerStyles - Specifies the appearance of the mouse cursor when the cursor is over the control. 
  //
  rpc Set_MousePointer(ExpressionEdit_Set_MousePointerRequest) returns (ExpressionEdit_Set_MousePointerResponse);
  rpc Get_MousePointer(ExpressionEdit_Get_MousePointerRequest) returns (ExpressionEdit_Get_MousePointerResponse);
  
  
  // Property: Multiline
  //
  // Specifies whether the ExpressionEdit control is a multi-line or single-line control.
  //
  // ExpressionEdit_Set_MultilineRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: bool - Specifies whether the ExpressionEdit control is a multi-line or single-line control. 
  //
  // ExpressionEdit_Set_MultilineResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_MultilineRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_MultilineResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the ExpressionEdit control is a multi-line or single-line control. 
  //
  rpc Set_Multiline(ExpressionEdit_Set_MultilineRequest) returns (ExpressionEdit_Set_MultilineResponse);
  rpc Get_Multiline(ExpressionEdit_Get_MultilineRequest) returns (ExpressionEdit_Get_MultilineResponse);
  
  
  // Property: ScrollBars
  //
  // Specifies which scrollbars are visible in the ExpressionEdit control.
  //
  // ExpressionEdit_Set_ScrollBarsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: ScrollBars - Specifies which scrollbars are visible in the ExpressionEdit control. 
  //
  // ExpressionEdit_Set_ScrollBarsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_ScrollBarsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_ScrollBarsResponse - The response message from the server. It provides the return value.
  //    - returnValue: ScrollBars - Specifies which scrollbars are visible in the ExpressionEdit control. 
  //
  rpc Set_ScrollBars(ExpressionEdit_Set_ScrollBarsRequest) returns (ExpressionEdit_Set_ScrollBarsResponse);
  rpc Get_ScrollBars(ExpressionEdit_Get_ScrollBarsRequest) returns (ExpressionEdit_Get_ScrollBarsResponse);
  
  
  // Property: SelLength
  //
  // Specifies the number of characters in the current selection.
  //
  // ExpressionEdit_Set_SelLengthRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: int32 - Specifies the number of characters in the current selection. 
  //
  // ExpressionEdit_Set_SelLengthResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_SelLengthRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_SelLengthResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the number of characters in the current selection. 
  //
  rpc Set_SelLength(ExpressionEdit_Set_SelLengthRequest) returns (ExpressionEdit_Set_SelLengthResponse);
  rpc Get_SelLength(ExpressionEdit_Get_SelLengthRequest) returns (ExpressionEdit_Get_SelLengthResponse);
  
  
  // Property: SelStart
  //
  // Specifies the zero-based index of the starting character for the current selection.
  //
  // ExpressionEdit_Set_SelStartRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: int32 - Specifies the zero-based index of the starting character for the current selection. 
  //
  // ExpressionEdit_Set_SelStartResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_SelStartRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_SelStartResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the zero-based index of the starting character for the current selection. 
  //
  rpc Set_SelStart(ExpressionEdit_Set_SelStartRequest) returns (ExpressionEdit_Set_SelStartResponse);
  rpc Get_SelStart(ExpressionEdit_Get_SelStartRequest) returns (ExpressionEdit_Get_SelStartResponse);
  
  
  // Property: SelText
  //
  // Use this property to obtain or replace the currently selected text.
  //
  // This property is a portion of the displayed text which is a localized expression.
  //
  // ExpressionEdit_Set_SelTextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: string - Use this property to obtain or replace the currently selected text. 
  //
  // ExpressionEdit_Set_SelTextResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_SelTextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_SelTextResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Use this property to obtain or replace the currently selected text. 
  //
  rpc Set_SelText(ExpressionEdit_Set_SelTextRequest) returns (ExpressionEdit_Set_SelTextResponse);
  rpc Get_SelText(ExpressionEdit_Get_SelTextRequest) returns (ExpressionEdit_Get_SelTextResponse);
  
  
  // Property: Text
  //
  // Specifies a delocalized expression for the text in the ExpressionEdit control. The value of the ExpressionEdit.DisplayText property updates when you set this property.
  //
  // When the ExpressionEdit.TextType property is TextType_PlainText, this property specifies the actual text in the ExpressionEdit control rather than a delocalized version of the text. Refer to the Engine.LocalizeExpression and Engine.DelocalizeExpression methods for more information about localized and delocalized expressions.
  //
  // ExpressionEdit_Set_TextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: string - Specifies a delocalized expression for the text in the ExpressionEdit control. The value of the ExpressionEdit.DisplayText property updates when you set this property. 
  //
  // ExpressionEdit_Set_TextResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_TextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_TextResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies a delocalized expression for the text in the ExpressionEdit control. The value of the ExpressionEdit.DisplayText property updates when you set this property. 
  //
  rpc Set_Text(ExpressionEdit_Set_TextRequest) returns (ExpressionEdit_Set_TextResponse);
  rpc Get_Text(ExpressionEdit_Get_TextRequest) returns (ExpressionEdit_Get_TextResponse);
  
  
  // Property: TextLength
  //
  // Returns the number of characters in the ExpressionEdit control text.
  //
  // ExpressionEdit_Get_TextLengthRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_TextLengthResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of characters in the ExpressionEdit control text. 
  //
  rpc Get_TextLength(ExpressionEdit_Get_TextLengthRequest) returns (ExpressionEdit_Get_TextLengthResponse);
  
  
  // Property: WantReturn
  //
  // Specifies whether the ExpressionEdit control processes the <Enter> key. When the ExpressionEdit control is not processing the <Enter> key, the <Enter> key goes to the default button.    * When the value of this property is BooleanOrPreference_False, the <Enter> key goes to the default button.    * When the value of this property is BooleanOrPreference_True, the control applies the <Enter> key to the expression.    * When the value of this property is BooleanOrPreference_UsePreference, the Want Return option in the Expression Editing Options dialog box determines the setting.
  //
  // If the ExpressionEdit.Multiline property is False, this property is ignored and the <Enter> key is never processed.
  //
  // ExpressionEdit_Set_WantReturnRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: BooleanOrPreference - Specifies whether the ExpressionEdit control processes the <Enter> key. When the ExpressionEdit control is not processing the <Enter> key, the <Enter> key goes to the default button.    * When the value of this property is BooleanOrPreference_False, the <Enter> key goes to the default button.    * When the value of this property is BooleanOrPreference_True, the control applies the <Enter> key to the expression.    * When the value of this property is BooleanOrPreference_UsePreference, the Want Return option in the Expression Editing Options dialog box determines the setting. 
  //
  // ExpressionEdit_Set_WantReturnResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_WantReturnRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_WantReturnResponse - The response message from the server. It provides the return value.
  //    - returnValue: BooleanOrPreference - Specifies whether the ExpressionEdit control processes the <Enter> key. When the ExpressionEdit control is not processing the <Enter> key, the <Enter> key goes to the default button.    * When the value of this property is BooleanOrPreference_False, the <Enter> key goes to the default button.    * When the value of this property is BooleanOrPreference_True, the control applies the <Enter> key to the expression.    * When the value of this property is BooleanOrPreference_UsePreference, the Want Return option in the Expression Editing Options dialog box determines the setting. 
  //
  rpc Set_WantReturn(ExpressionEdit_Set_WantReturnRequest) returns (ExpressionEdit_Set_WantReturnResponse);
  rpc Get_WantReturn(ExpressionEdit_Get_WantReturnRequest) returns (ExpressionEdit_Get_WantReturnResponse);
  
  
  // Property: WordWrap
  //
  // Specifies that lines too long to display on one line wrap to the next line.    * When the value of this property is BooleanOrPreference_False, word wrap is off.    * When the value of this property is BooleanOrPreference_True, word wrap is on.    * When the value of this property is BooleanOrPreference_UsePreference, the Word Wrap option in the Expression Editing Options dialog box determines whether word wrap is on.
  //
  // When the ExpressionEdit.Multiline property is False, this property is ignored.
  //
  // ExpressionEdit_Set_WordWrapRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: BooleanOrPreference - Specifies that lines too long to display on one line wrap to the next line.    * When the value of this property is BooleanOrPreference_False, word wrap is off.    * When the value of this property is BooleanOrPreference_True, word wrap is on.    * When the value of this property is BooleanOrPreference_UsePreference, the Word Wrap option in the Expression Editing Options dialog box determines whether word wrap is on. 
  //
  // ExpressionEdit_Set_WordWrapResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_WordWrapRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_WordWrapResponse - The response message from the server. It provides the return value.
  //    - returnValue: BooleanOrPreference - Specifies that lines too long to display on one line wrap to the next line.    * When the value of this property is BooleanOrPreference_False, word wrap is off.    * When the value of this property is BooleanOrPreference_True, word wrap is on.    * When the value of this property is BooleanOrPreference_UsePreference, the Word Wrap option in the Expression Editing Options dialog box determines whether word wrap is on. 
  //
  rpc Set_WordWrap(ExpressionEdit_Set_WordWrapRequest) returns (ExpressionEdit_Set_WordWrapResponse);
  rpc Get_WordWrap(ExpressionEdit_Get_WordWrapRequest) returns (ExpressionEdit_Get_WordWrapResponse);
  
  
  // Property: Engine
  //
  // Specifies a reference to the Engine object. The ExpressionEdit control uses the Engine object for the following purposes:    * Displaying the Expression Browser dialog box.    * Displaying the Expression Editing Options dialog box, which you can access through the Options item in the context menu of the ExpressionEdit control.    * Reading options configured in the Expression Editing Options dialog box.
  //
  // You do not need to set this property because the ExpressionEdit control automatically obtains a reference to an Engine object when a reference is needed. However, because the ExpressionEdit control creates an Engine object when it cannot obtain one from the ExpressionEdit.Context property, it is useful to set this property when the ExpressionEdit.Context property has not been set to a PropertyObject that is also a SequenceContext and when an Engine object has already been created in a different process than the ExpressionEdit control. The TestStand Engine is considered needed when the ExpressionEdit.Context property is set or when this property is read, even when the property is read internally to launch an engine dialog box.
  //
  // ExpressionEdit_Set_EngineRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: EngineInstance - Specifies a reference to the Engine object. The ExpressionEdit control uses the Engine object for the following purposes:    * Displaying the Expression Browser dialog box.    * Displaying the Expression Editing Options dialog box, which you can access through the Options item in the context menu of the ExpressionEdit control.    * Reading options configured in the Expression Editing Options dialog box. 
  //
  // ExpressionEdit_Set_EngineResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_EngineRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_EngineResponse - The response message from the server. It provides the return value.
  //    - returnValue: EngineInstance - Specifies a reference to the Engine object. The ExpressionEdit control uses the Engine object for the following purposes:    * Displaying the Expression Browser dialog box.    * Displaying the Expression Editing Options dialog box, which you can access through the Options item in the context menu of the ExpressionEdit control.    * Reading options configured in the Expression Editing Options dialog box. 
  //
  rpc Set_Engine(ExpressionEdit_Set_EngineRequest) returns (ExpressionEdit_Set_EngineResponse);
  rpc Get_Engine(ExpressionEdit_Get_EngineRequest) returns (ExpressionEdit_Get_EngineResponse);
  
  
  // Property: Context
  //
  // Specifies the set of available variables and properties for autocompletion, error checking, evaluation, and the Expression Browser dialog box. Set this property to a PropertyObject in which the expression you are editing can be evaluated.
  //
  // The ExpressionEdit control might create an Engine object when you set the Context to a PropertyObject that is not a SequenceContext. Refer to the ExpressionEdit.Engine property for more information about creating a reference to an Engine object.
  //
  // ExpressionEdit_Set_ContextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: PropertyObjectInstance - Specifies the set of available variables and properties for autocompletion, error checking, evaluation, and the Expression Browser dialog box. Set this property to a PropertyObject in which the expression you are editing can be evaluated. 
  //
  // ExpressionEdit_Set_ContextResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_ContextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_ContextResponse - The response message from the server. It provides the return value.
  //    - returnValue: PropertyObjectInstance - Specifies the set of available variables and properties for autocompletion, error checking, evaluation, and the Expression Browser dialog box. Set this property to a PropertyObject in which the expression you are editing can be evaluated. 
  //
  rpc Set_Context(ExpressionEdit_Set_ContextRequest) returns (ExpressionEdit_Set_ContextResponse);
  rpc Get_Context(ExpressionEdit_Get_ContextRequest) returns (ExpressionEdit_Get_ContextResponse);
  
  
  // Property: AutoLocalize
  //
  // Note: This property is obsolete. Use ExpressionEdit.DisplayText instead.
  //
  // When this property is True, the ExpressionEdit.Text property is a delocalized expression. When this property is False, the ExpressionEdit.Text property is a localized expression. The default value of the property is True.
  //
  // ExpressionEdit_Set_AutoLocalizeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: bool - Note: This property is obsolete. Use ExpressionEdit.DisplayText instead. 
  //
  // ExpressionEdit_Set_AutoLocalizeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_AutoLocalizeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_AutoLocalizeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Note: This property is obsolete. Use ExpressionEdit.DisplayText instead. 
  //
  rpc Set_AutoLocalize(ExpressionEdit_Set_AutoLocalizeRequest) returns (ExpressionEdit_Set_AutoLocalizeResponse);
  rpc Get_AutoLocalize(ExpressionEdit_Get_AutoLocalizeRequest) returns (ExpressionEdit_Get_AutoLocalizeResponse);
  
  
  // Property: TextType
  //
  // Use this property to make an ExpressionEdit control behave like an ordinary edit or text box control. This is useful when you want to use an edit control for editing expressions and plain text.
  //
  // ExpressionEdit_Set_TextTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: TextTypes - Use this property to make an ExpressionEdit control behave like an ordinary edit or text box control. This is useful when you want to use an edit control for editing expressions and plain text. 
  //
  // ExpressionEdit_Set_TextTypeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_TextTypeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_TextTypeResponse - The response message from the server. It provides the return value.
  //    - returnValue: TextTypes - Use this property to make an ExpressionEdit control behave like an ordinary edit or text box control. This is useful when you want to use an edit control for editing expressions and plain text. 
  //
  rpc Set_TextType(ExpressionEdit_Set_TextTypeRequest) returns (ExpressionEdit_Set_TextTypeResponse);
  rpc Get_TextType(ExpressionEdit_Get_TextTypeRequest) returns (ExpressionEdit_Get_TextTypeResponse);
  
  
  // Property: SyntaxHighlightingEnabled
  //
  // Specifies whether the ExpressionEdit control displays different text elements, such as numbers, strings, and comments, in different colors and styles.
  //
  // Do not use this property to display text that is not an expression in an ExpressionEdit control. Instead, set the ExpressionEdit.TextType property to TextType_PlainText.
  //
  // ExpressionEdit_Set_SyntaxHighlightingEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: bool - Specifies whether the ExpressionEdit control displays different text elements, such as numbers, strings, and comments, in different colors and styles. 
  //
  // ExpressionEdit_Set_SyntaxHighlightingEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_SyntaxHighlightingEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_SyntaxHighlightingEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the ExpressionEdit control displays different text elements, such as numbers, strings, and comments, in different colors and styles. 
  //
  rpc Set_SyntaxHighlightingEnabled(ExpressionEdit_Set_SyntaxHighlightingEnabledRequest) returns (ExpressionEdit_Set_SyntaxHighlightingEnabledResponse);
  rpc Get_SyntaxHighlightingEnabled(ExpressionEdit_Get_SyntaxHighlightingEnabledRequest) returns (ExpressionEdit_Get_SyntaxHighlightingEnabledResponse);
  
  
  // Property: FunctionTipHwnd
  //
  // Returns the Window handle of the function tip.
  //
  // You can use the returned Window handle with the Microsoft Windows API functions.
  // Note: Using Windows API functions with this property can cause undefined behavior.
  //
  // ExpressionEdit_Get_FunctionTipHwndRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_FunctionTipHwndResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the Window handle of the function tip. 
  //
  rpc Get_FunctionTipHwnd(ExpressionEdit_Get_FunctionTipHwndRequest) returns (ExpressionEdit_Get_FunctionTipHwndResponse);
  
  
  // Property: AutoCompletionHwnd
  //
  // Returns the Window handle of the autocompletion listbox.
  //
  // You can use the returned Window handle with the Microsoft Windows API functions.
  // Note: Using Windows API functions with this property can cause undefined behavior.
  //
  // ExpressionEdit_Get_AutoCompletionHwndRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_AutoCompletionHwndResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the Window handle of the autocompletion listbox. 
  //
  rpc Get_AutoCompletionHwnd(ExpressionEdit_Get_AutoCompletionHwndRequest) returns (ExpressionEdit_Get_AutoCompletionHwndResponse);
  
  
  // Property: AllowEmpty
  //
  // TestStand returns an error for an empty expression only when this property is False.
  //
  // The ExpressionEdit control displays the text "<The expression cannot be empty>" when this property is False, the control contains an empty expression, the control is not active, and error checking is enabled.
  //
  // ExpressionEdit_Set_AllowEmptyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: bool - TestStand returns an error for an empty expression only when this property is False. 
  //
  // ExpressionEdit_Set_AllowEmptyResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_AllowEmptyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_AllowEmptyResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - TestStand returns an error for an empty expression only when this property is False. 
  //
  rpc Set_AllowEmpty(ExpressionEdit_Set_AllowEmptyRequest) returns (ExpressionEdit_Set_AllowEmptyResponse);
  rpc Get_AllowEmpty(ExpressionEdit_Get_AllowEmptyRequest) returns (ExpressionEdit_Get_AllowEmptyResponse);
  
  
  // Property: ErrorCheck
  //
  // Specifies whether the control performs error checking on the expression. When the value of this property is a value other than ErrorCheck_None, the expression is checked for errors when the ExpressionEdit control loses focus, when you select Check for Errors from the context menu, or when the ExpressionEdit.DisplayError method is called.
  //
  // When an error is found, the error is displayed in a different font color or style. The error message is displayed in a tooltip.
  //
  // ExpressionEdit_Set_ErrorCheckRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: ErrorCheck - Specifies whether the control performs error checking on the expression. When the value of this property is a value other than ErrorCheck_None, the expression is checked for errors when the ExpressionEdit control loses focus, when you select Check for Errors from the context menu, or when the ExpressionEdit.DisplayError method is called. 
  //
  // ExpressionEdit_Set_ErrorCheckResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_ErrorCheckRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_ErrorCheckResponse - The response message from the server. It provides the return value.
  //    - returnValue: ErrorCheck - Specifies whether the control performs error checking on the expression. When the value of this property is a value other than ErrorCheck_None, the expression is checked for errors when the ExpressionEdit control loses focus, when you select Check for Errors from the context menu, or when the ExpressionEdit.DisplayError method is called. 
  //
  rpc Set_ErrorCheck(ExpressionEdit_Set_ErrorCheckRequest) returns (ExpressionEdit_Set_ErrorCheckResponse);
  rpc Get_ErrorCheck(ExpressionEdit_Get_ErrorCheckRequest) returns (ExpressionEdit_Get_ErrorCheckResponse);
  
  
  // Property: RequiredTypes
  //
  // Note: This property is obsolete. Use the ExpressionEdit.GetValidEvaluationTypes and ExpressionEdit.SetValidEvaluationTypes methods instead.
  //
  // Specifies any combination of the ValidExpressionTypes constants. Use the bitwise-OR operator to specify more than one valid type.
  // Specifies the allowed evaluation result types when the value of the ExpressionEdit.ErrorCheck property is ErrorCheck_SyntaxAndEvaluation.
  // If the value of this property is ValidExpressionType_NamedType or ValidExpressionType_NamedTypeArray, the named types or named type arrays must be specified using the RequiredNamedTypes property and the RequiredNamedTypeArrays property, respectively.
  //
  // ExpressionEdit_Set_RequiredTypesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: int32 - Note: This property is obsolete. Use the ExpressionEdit.GetValidEvaluationTypes and ExpressionEdit.SetValidEvaluationTypes methods instead. 
  //
  // ExpressionEdit_Set_RequiredTypesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_RequiredTypesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_RequiredTypesResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Note: This property is obsolete. Use the ExpressionEdit.GetValidEvaluationTypes and ExpressionEdit.SetValidEvaluationTypes methods instead. 
  //
  rpc Set_RequiredTypes(ExpressionEdit_Set_RequiredTypesRequest) returns (ExpressionEdit_Set_RequiredTypesResponse);
  rpc Get_RequiredTypes(ExpressionEdit_Get_RequiredTypesRequest) returns (ExpressionEdit_Get_RequiredTypesResponse);
  
  
  // Property: RequiredNamedTypes
  //
  // Note: This property is obsolete. Use the ExpressionEdit.GetValidEvaluationTypes and ExpressionEdit.SetValidEvaluationTypes methods instead.
  //
  // Returns a collection of strings that specify the named types that are allowed when the value of the ExpressionEdit.RequiredTypes property is ValidExpressionType_NamedType. The ExpressionEdit control highlights the expression as an evaluation error when the expression fails to evaluate to a named type listed in the collection.
  //
  // ExpressionEdit_Get_RequiredNamedTypesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_RequiredNamedTypesResponse - The response message from the server. It provides the return value.
  //    - returnValue: StringsInstance - Note: This property is obsolete. Use the ExpressionEdit.GetValidEvaluationTypes and ExpressionEdit.SetValidEvaluationTypes methods instead. 
  //
  rpc Get_RequiredNamedTypes(ExpressionEdit_Get_RequiredNamedTypesRequest) returns (ExpressionEdit_Get_RequiredNamedTypesResponse);
  
  
  // Property: RequiredNamedTypeArrays
  //
  // Note: This property is obsolete. Use the ExpressionEdit.GetValidEvaluationTypes and ExpressionEdit.SetValidEvaluationTypes methods instead.
  //
  // Returns a collection of strings that specify the named type arrays allowed when the value of the ExpressionEdit.RequiredTypes property is ValidExpressionType_NamedTypeArray. The ExpressionEdit control highlights the expression as an evaluation error when the expression fails to evaluate to a named type array listed in the collection.
  //
  // ExpressionEdit_Get_RequiredNamedTypeArraysRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_RequiredNamedTypeArraysResponse - The response message from the server. It provides the return value.
  //    - returnValue: StringsInstance - Note: This property is obsolete. Use the ExpressionEdit.GetValidEvaluationTypes and ExpressionEdit.SetValidEvaluationTypes methods instead. 
  //
  rpc Get_RequiredNamedTypeArrays(ExpressionEdit_Get_RequiredNamedTypeArraysRequest) returns (ExpressionEdit_Get_RequiredNamedTypeArraysResponse);
  
  
  // Property: BrowseExprDialogTitle
  //
  // Specifies the title for the Expression Browser dialog box when you call the ExpressionEdit.DisplayBrowseExprDialog method or when you select Browse in the context menu of the ExpressionEdit control. Set this property to an empty string to use the default title for the dialog box.
  //
  // ExpressionEdit_Set_BrowseExprDialogTitleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: string - Specifies the title for the Expression Browser dialog box when you call the ExpressionEdit.DisplayBrowseExprDialog method or when you select Browse in the context menu of the ExpressionEdit control. Set this property to an empty string to use the default title for the dialog box. 
  //
  // ExpressionEdit_Set_BrowseExprDialogTitleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_BrowseExprDialogTitleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_BrowseExprDialogTitleResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the title for the Expression Browser dialog box when you call the ExpressionEdit.DisplayBrowseExprDialog method or when you select Browse in the context menu of the ExpressionEdit control. Set this property to an empty string to use the default title for the dialog box. 
  //
  rpc Set_BrowseExprDialogTitle(ExpressionEdit_Set_BrowseExprDialogTitleRequest) returns (ExpressionEdit_Set_BrowseExprDialogTitleResponse);
  rpc Get_BrowseExprDialogTitle(ExpressionEdit_Get_BrowseExprDialogTitleRequest) returns (ExpressionEdit_Get_BrowseExprDialogTitleResponse);
  
  
  // Property: BrowseExprDialogOptions
  //
  // Specifies the options in the Expression Browser dialog box when you call the ExpressionEdit.DisplayBrowseExprDialog method or when you select Browse from the context menu of the ExpressionEdit control. Use any combination of the BrowseExprDialogOptions constants with this property.
  //
  // The constant BrowseExpr_UsesCRLF is ignored.
  //
  // ExpressionEdit_Set_BrowseExprDialogOptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: int32 - Specifies the options in the Expression Browser dialog box when you call the ExpressionEdit.DisplayBrowseExprDialog method or when you select Browse from the context menu of the ExpressionEdit control. Use any combination of the BrowseExprDialogOptions constants with this property. 
  //
  // ExpressionEdit_Set_BrowseExprDialogOptionsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_BrowseExprDialogOptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_BrowseExprDialogOptionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the options in the Expression Browser dialog box when you call the ExpressionEdit.DisplayBrowseExprDialog method or when you select Browse from the context menu of the ExpressionEdit control. Use any combination of the BrowseExprDialogOptions constants with this property. 
  //
  rpc Set_BrowseExprDialogOptions(ExpressionEdit_Set_BrowseExprDialogOptionsRequest) returns (ExpressionEdit_Set_BrowseExprDialogOptionsResponse);
  rpc Get_BrowseExprDialogOptions(ExpressionEdit_Get_BrowseExprDialogOptionsRequest) returns (ExpressionEdit_Get_BrowseExprDialogOptionsResponse);
  
  
  // Property: FontSource
  //
  // Specifies the current font for the ExpressionEdit control. The default value for this property is FontSource_UseGUIFont. When the value of this property is FontSource_UseFontProperty, the ExpressionEdit.Font property specifies the current font.
  //
  // Only the font name and size are used. All other properties of this parameter are ignored because the other properties are set on a per-text element basis in the Expression Editing Options dialog box, which you can access through the Options item from the context menu of the ExpressionEdit control.
  // When the value of this property is FontSource_UseFontProperty, the corresponding Font property specifies the particular font the control uses. Otherwise, the control uses the font from the source this property specifies. Refer to the FontSources enumeration for the list of valid font sources.
  // Set this property to a value other than FontSource_UseFontProperty when you expect the font the ExpressionEdit.Font property specifies to not be present on a computer at run time. For example, a font present on an English version of the Microsoft Windows operating system might not be present on a Japanese version of the Windows operating system.
  //
  // ExpressionEdit_Set_FontSourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: FontSources - Specifies the current font for the ExpressionEdit control. The default value for this property is FontSource_UseGUIFont. When the value of this property is FontSource_UseFontProperty, the ExpressionEdit.Font property specifies the current font. 
  //
  // ExpressionEdit_Set_FontSourceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_FontSourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_FontSourceResponse - The response message from the server. It provides the return value.
  //    - returnValue: FontSources - Specifies the current font for the ExpressionEdit control. The default value for this property is FontSource_UseGUIFont. When the value of this property is FontSource_UseFontProperty, the ExpressionEdit.Font property specifies the current font. 
  //
  rpc Set_FontSource(ExpressionEdit_Set_FontSourceRequest) returns (ExpressionEdit_Set_FontSourceResponse);
  rpc Get_FontSource(ExpressionEdit_Get_FontSourceRequest) returns (ExpressionEdit_Get_FontSourceResponse);
  
  
  // Property: ScaleWithDPI
  //
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  //
  // Some environments scale native controls based on the DPI settings of their display, while other environments do not. The TestStand User Interface Controls are designed to work in all environments.
  // The following are the recommended settings for various platforms:    * LabVIEW, LabWindows/CVI, C#, and Microsoft Visual Basic .NET—Set this property to False.    * Active Template Library (ATL)/Microsoft Foundation Class (MFC)—Set this property to True.
  //
  // ExpressionEdit_Set_ScaleWithDPIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: bool - Specifies how the control scales based on the dots per inch (DPI) setting. 
  //
  // ExpressionEdit_Set_ScaleWithDPIResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_ScaleWithDPIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_ScaleWithDPIResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies how the control scales based on the dots per inch (DPI) setting. 
  //
  rpc Set_ScaleWithDPI(ExpressionEdit_Set_ScaleWithDPIRequest) returns (ExpressionEdit_Set_ScaleWithDPIResponse);
  rpc Get_ScaleWithDPI(ExpressionEdit_Get_ScaleWithDPIRequest) returns (ExpressionEdit_Get_ScaleWithDPIResponse);
  
  
  // Property: Buttons
  //
  // Returns a collection of the buttons for the ExpressionEdit control.
  //
  // ExpressionEdit_Get_ButtonsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_ButtonsResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExpressionEditButtonsInstance - Returns a collection of the buttons for the ExpressionEdit control. 
  //
  rpc Get_Buttons(ExpressionEdit_Get_ButtonsRequest) returns (ExpressionEdit_Get_ButtonsResponse);
  
  
  // Property: Style
  //
  // Specifies the appearance of the control.
  //
  // ExpressionEdit_Set_StyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: ExpressionEditStyles - Specifies the appearance of the control. 
  //
  // ExpressionEdit_Set_StyleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_StyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_StyleResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExpressionEditStyles - Specifies the appearance of the control. 
  //
  rpc Set_Style(ExpressionEdit_Set_StyleRequest) returns (ExpressionEdit_Set_StyleResponse);
  rpc Get_Style(ExpressionEdit_Get_StyleRequest) returns (ExpressionEdit_Get_StyleResponse);
  
  
  // Property: ComboBoxItems
  //
  // Returns a collection of the items in the drop-down list when the ExpressionEdit control is a combo box.
  //
  // ExpressionEdit_Get_ComboBoxItemsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_ComboBoxItemsResponse - The response message from the server. It provides the return value.
  //    - returnValue: ExpressionEditComboBoxItemsInstance - Returns a collection of the items in the drop-down list when the ExpressionEdit control is a combo box. 
  //
  rpc Get_ComboBoxItems(ExpressionEdit_Get_ComboBoxItemsRequest) returns (ExpressionEdit_Get_ComboBoxItemsResponse);
  
  
  // Property: ShowDisplayNameWhenInactive
  //
  // When this property is True and the text in the ExpressionEdit control corresponds to the value of an item in the drop-down list and the item has a DisplayName, the ExpressionEdit control shows the DisplayName of the item instead of the text when the ExpressionEdit control is inactive.
  //
  // The ExpressionEdit control uses this property only when the style is ExpressionEditStyle_DropDownCombo.
  //
  // ExpressionEdit_Set_ShowDisplayNameWhenInactiveRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: bool - When this property is True and the text in the ExpressionEdit control corresponds to the value of an item in the drop-down list and the item has a DisplayName, the ExpressionEdit control shows the DisplayName of the item instead of the text when the ExpressionEdit control is inactive. 
  //
  // ExpressionEdit_Set_ShowDisplayNameWhenInactiveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_ShowDisplayNameWhenInactiveRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_ShowDisplayNameWhenInactiveResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When this property is True and the text in the ExpressionEdit control corresponds to the value of an item in the drop-down list and the item has a DisplayName, the ExpressionEdit control shows the DisplayName of the item instead of the text when the ExpressionEdit control is inactive. 
  //
  rpc Set_ShowDisplayNameWhenInactive(ExpressionEdit_Set_ShowDisplayNameWhenInactiveRequest) returns (ExpressionEdit_Set_ShowDisplayNameWhenInactiveResponse);
  rpc Get_ShowDisplayNameWhenInactive(ExpressionEdit_Get_ShowDisplayNameWhenInactiveRequest) returns (ExpressionEdit_Get_ShowDisplayNameWhenInactiveResponse);
  
  
  // Property: DropDownListHwnd
  //
  // Returns the Window handle of the drop-down list visible when the ExpressionEdit control is a combo box.
  //
  // You can use the returned Window handle with the Microsoft Windows API functions.
  // Note: Using Windows API functions with this property can cause undefined behavior.
  //
  // ExpressionEdit_Get_DropDownListHwndRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_DropDownListHwndResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the Window handle of the drop-down list visible when the ExpressionEdit control is a combo box. 
  //
  rpc Get_DropDownListHwnd(ExpressionEdit_Get_DropDownListHwndRequest) returns (ExpressionEdit_Get_DropDownListHwndResponse);
  
  
  // Property: DisplayText
  //
  // Specifies a localized expression for the text in the ExpressionEdit control. The value of the ExpressionEdit.Text property updates when you set this property.
  //
  // This property specifies the actual text in the ExpressionEdit control. Use this property when you use the ExpressionEdit control with expression strings that are already localized for display. Refer to the Engine.LocalizeExpression and Engine.DelocalizeExpression methods for more information about localized and delocalized expressions.
  //
  // ExpressionEdit_Set_DisplayTextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: string - Specifies a localized expression for the text in the ExpressionEdit control. The value of the ExpressionEdit.Text property updates when you set this property. 
  //
  // ExpressionEdit_Set_DisplayTextResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_DisplayTextRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_DisplayTextResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies a localized expression for the text in the ExpressionEdit control. The value of the ExpressionEdit.Text property updates when you set this property. 
  //
  rpc Set_DisplayText(ExpressionEdit_Set_DisplayTextRequest) returns (ExpressionEdit_Set_DisplayTextResponse);
  rpc Get_DisplayText(ExpressionEdit_Get_DisplayTextRequest) returns (ExpressionEdit_Get_DisplayTextResponse);
  
  
  // Property: DisplayFormattedValue
  //
  // When this property is True, the ExpressionEdit control displays the formatted value of a numeric constant you type in a tooltip and replaces the text you type with the formatted value when the ExpressionEdit control loses focus.
  //
  // ExpressionEdit_Set_DisplayFormattedValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: bool - When this property is True, the ExpressionEdit control displays the formatted value of a numeric constant you type in a tooltip and replaces the text you type with the formatted value when the ExpressionEdit control loses focus. 
  //
  // ExpressionEdit_Set_DisplayFormattedValueResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_DisplayFormattedValueRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_DisplayFormattedValueResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When this property is True, the ExpressionEdit control displays the formatted value of a numeric constant you type in a tooltip and replaces the text you type with the formatted value when the ExpressionEdit control loses focus. 
  //
  rpc Set_DisplayFormattedValue(ExpressionEdit_Set_DisplayFormattedValueRequest) returns (ExpressionEdit_Set_DisplayFormattedValueResponse);
  rpc Get_DisplayFormattedValue(ExpressionEdit_Get_DisplayFormattedValueRequest) returns (ExpressionEdit_Get_DisplayFormattedValueResponse);
  
  
  // Property: NumericFormat
  //
  // Specifies the format string that the ExpressionEdit control uses to calculate the formatted value of the text when the ExpressionEdit.DisplayFormattedValue property is True. Assign any string to this property that you would pass as the formatString parameter in the PropertyObject.GetFormattedValue method.
  //
  // ExpressionEdit_Set_NumericFormatRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: string - Specifies the format string that the ExpressionEdit control uses to calculate the formatted value of the text when the ExpressionEdit.DisplayFormattedValue property is True. Assign any string to this property that you would pass as the formatString parameter in the PropertyObject.GetFormattedValue method. 
  //
  // ExpressionEdit_Set_NumericFormatResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_NumericFormatRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_NumericFormatResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the format string that the ExpressionEdit control uses to calculate the formatted value of the text when the ExpressionEdit.DisplayFormattedValue property is True. Assign any string to this property that you would pass as the formatString parameter in the PropertyObject.GetFormattedValue method. 
  //
  rpc Set_NumericFormat(ExpressionEdit_Set_NumericFormatRequest) returns (ExpressionEdit_Set_NumericFormatResponse);
  rpc Get_NumericFormat(ExpressionEdit_Get_NumericFormatRequest) returns (ExpressionEdit_Get_NumericFormatResponse);
  
  
  // Property: AutomaticallyPrefixVariables
  //
  // Specifies whether the ExpressionEdit control automatically replaces variable names the user types with the full pathname of the variable.
  //
  // ExpressionEdit_Set_AutomaticallyPrefixVariablesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: BooleanOrPreference - Specifies whether the ExpressionEdit control automatically replaces variable names the user types with the full pathname of the variable. 
  //
  // ExpressionEdit_Set_AutomaticallyPrefixVariablesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_AutomaticallyPrefixVariablesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_AutomaticallyPrefixVariablesResponse - The response message from the server. It provides the return value.
  //    - returnValue: BooleanOrPreference - Specifies whether the ExpressionEdit control automatically replaces variable names the user types with the full pathname of the variable. 
  //
  rpc Set_AutomaticallyPrefixVariables(ExpressionEdit_Set_AutomaticallyPrefixVariablesRequest) returns (ExpressionEdit_Set_AutomaticallyPrefixVariablesResponse);
  rpc Get_AutomaticallyPrefixVariables(ExpressionEdit_Get_AutomaticallyPrefixVariablesRequest) returns (ExpressionEdit_Get_AutomaticallyPrefixVariablesResponse);
  
  
  // Property: ApplyDefaultStyle
  //
  // Specifies whether the control uses the default style for the ExpressionEdit buttons, and sets the ExpressionEdit.FontSource property to FontSource_UseUIStyleFont.
  //
  // TestStand 2020 introduced new default icons for the ExpressionEdit buttons.
  //
  // ExpressionEdit_Set_ApplyDefaultStyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //    - val: bool - Specifies whether the control uses the default style for the ExpressionEdit buttons, and sets the ExpressionEdit.FontSource property to FontSource_UseUIStyleFont. 
  //
  // ExpressionEdit_Set_ApplyDefaultStyleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ExpressionEdit_Get_ApplyDefaultStyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //
  // ExpressionEdit_Get_ApplyDefaultStyleResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the control uses the default style for the ExpressionEdit buttons, and sets the ExpressionEdit.FontSource property to FontSource_UseUIStyleFont. 
  //
  rpc Set_ApplyDefaultStyle(ExpressionEdit_Set_ApplyDefaultStyleRequest) returns (ExpressionEdit_Set_ApplyDefaultStyleResponse);
  rpc Get_ApplyDefaultStyle(ExpressionEdit_Get_ApplyDefaultStyleRequest) returns (ExpressionEdit_Get_ApplyDefaultStyleResponse);
  
  

  // Event: Click
  //
  // Occurs when you press and release the mouse on the control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_Click - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_Click - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExpressionEdit_GetEvents_ClickRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExpressionEdit_GetEvents_ClickResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // ExpressionEdit_ReplyToEvent_ClickRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExpressionEdit_ReplyToEvent_ClickResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_Click(ExpressionEdit_GetEvents_ClickRequest) returns (stream ExpressionEdit_GetEvents_ClickResponse);
  rpc ReplyToEvent_Click(ExpressionEdit_ReplyToEvent_ClickRequest) returns (ExpressionEdit_ReplyToEvent_ClickResponse); 
  
  
  // Event: DblClick
  //
  // Occurs when you double-click the control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_DblClick - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_DblClick - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExpressionEdit_GetEvents_DblClickRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExpressionEdit_GetEvents_DblClickResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // ExpressionEdit_ReplyToEvent_DblClickRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExpressionEdit_ReplyToEvent_DblClickResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_DblClick(ExpressionEdit_GetEvents_DblClickRequest) returns (stream ExpressionEdit_GetEvents_DblClickResponse);
  rpc ReplyToEvent_DblClick(ExpressionEdit_ReplyToEvent_DblClickRequest) returns (ExpressionEdit_ReplyToEvent_DblClickResponse); 
  
  
  // Event: KeyDown
  //
  // Occurs when the user presses any key while the control has the input focus. This event occurs before the ExpressionEdit.KeyPress event.
  //
  // The event has a registration method and a reply method.
  // GetEvents_KeyDown - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_KeyDown - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExpressionEdit_GetEvents_KeyDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExpressionEdit_GetEvents_KeyDownResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - keyCode: int32
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //
  // ExpressionEdit_ReplyToEvent_KeyDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //  - keyCode: int32
  //
  // ExpressionEdit_ReplyToEvent_KeyDownResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_KeyDown(ExpressionEdit_GetEvents_KeyDownRequest) returns (stream ExpressionEdit_GetEvents_KeyDownResponse);
  rpc ReplyToEvent_KeyDown(ExpressionEdit_ReplyToEvent_KeyDownRequest) returns (ExpressionEdit_ReplyToEvent_KeyDownResponse); 
  
  
  // Event: KeyPress
  //
  // Occurs when the user presses a key while a control is active. This event occurs after the ExpressionEdit.KeyDown event.
  //
  // The event has a registration method and a reply method.
  // GetEvents_KeyPress - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_KeyPress - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExpressionEdit_GetEvents_KeyPressRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExpressionEdit_GetEvents_KeyPressResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - keyAscii: int32
  //
  // ExpressionEdit_ReplyToEvent_KeyPressRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //  - keyAscii: int32
  //
  // ExpressionEdit_ReplyToEvent_KeyPressResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_KeyPress(ExpressionEdit_GetEvents_KeyPressRequest) returns (stream ExpressionEdit_GetEvents_KeyPressResponse);
  rpc ReplyToEvent_KeyPress(ExpressionEdit_ReplyToEvent_KeyPressRequest) returns (ExpressionEdit_ReplyToEvent_KeyPressResponse); 
  
  
  // Event: KeyUp
  //
  // Occurs when the user releases any key while the control has the input focus.
  //
  // The event has a registration method and a reply method.
  // GetEvents_KeyUp - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_KeyUp - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExpressionEdit_GetEvents_KeyUpRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExpressionEdit_GetEvents_KeyUpResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - keyCode: int32 - Specifies the KeyCodes constant of the key the user pressed.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //
  // ExpressionEdit_ReplyToEvent_KeyUpRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExpressionEdit_ReplyToEvent_KeyUpResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_KeyUp(ExpressionEdit_GetEvents_KeyUpRequest) returns (stream ExpressionEdit_GetEvents_KeyUpResponse);
  rpc ReplyToEvent_KeyUp(ExpressionEdit_ReplyToEvent_KeyUpRequest) returns (ExpressionEdit_ReplyToEvent_KeyUpResponse); 
  
  
  // Event: MouseDown
  //
  // Occurs when the user clicks the mouse on the control. This event occurs before the ExpressionEdit.MouseUp event.
  //
  // The event has a registration method and a reply method.
  // GetEvents_MouseDown - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_MouseDown - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExpressionEdit_GetEvents_MouseDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExpressionEdit_GetEvents_MouseDownResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - btn: int32 - Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //  - x: int32 - Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //  - y: int32 - Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //
  // ExpressionEdit_ReplyToEvent_MouseDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExpressionEdit_ReplyToEvent_MouseDownResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_MouseDown(ExpressionEdit_GetEvents_MouseDownRequest) returns (stream ExpressionEdit_GetEvents_MouseDownResponse);
  rpc ReplyToEvent_MouseDown(ExpressionEdit_ReplyToEvent_MouseDownRequest) returns (ExpressionEdit_ReplyToEvent_MouseDownResponse); 
  
  
  // Event: MouseMove
  //
  // Occurs when the user moves the mouse over the control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_MouseMove - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_MouseMove - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExpressionEdit_GetEvents_MouseMoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExpressionEdit_GetEvents_MouseMoveResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - btn: int32 - Specifies what mouse buttons are pressed. You can use any combination of the MouseButtons constants.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //  - x: int32 - Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //  - y: int32 - Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //
  // ExpressionEdit_ReplyToEvent_MouseMoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExpressionEdit_ReplyToEvent_MouseMoveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_MouseMove(ExpressionEdit_GetEvents_MouseMoveRequest) returns (stream ExpressionEdit_GetEvents_MouseMoveResponse);
  rpc ReplyToEvent_MouseMove(ExpressionEdit_ReplyToEvent_MouseMoveRequest) returns (ExpressionEdit_ReplyToEvent_MouseMoveResponse); 
  
  
  // Event: MouseUp
  //
  // Occurs when the user releases the mouse on the control. This event occurs before the ExpressionEdit.Click event.
  //
  // The event has a registration method and a reply method.
  // GetEvents_MouseUp - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_MouseUp - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExpressionEdit_GetEvents_MouseUpRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExpressionEdit_GetEvents_MouseUpResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - btn: int32 - Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //  - x: int32 - Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //  - y: int32 - Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //
  // ExpressionEdit_ReplyToEvent_MouseUpRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExpressionEdit_ReplyToEvent_MouseUpResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_MouseUp(ExpressionEdit_GetEvents_MouseUpRequest) returns (stream ExpressionEdit_GetEvents_MouseUpResponse);
  rpc ReplyToEvent_MouseUp(ExpressionEdit_ReplyToEvent_MouseUpRequest) returns (ExpressionEdit_ReplyToEvent_MouseUpResponse); 
  
  
  // Event: Change
  //
  // Occurs when the text in the control changes.
  //
  // The event has a registration method and a reply method.
  // GetEvents_Change - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_Change - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExpressionEdit_GetEvents_ChangeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExpressionEdit_GetEvents_ChangeResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // ExpressionEdit_ReplyToEvent_ChangeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExpressionEdit_ReplyToEvent_ChangeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_Change(ExpressionEdit_GetEvents_ChangeRequest) returns (stream ExpressionEdit_GetEvents_ChangeResponse);
  rpc ReplyToEvent_Change(ExpressionEdit_ReplyToEvent_ChangeRequest) returns (ExpressionEdit_ReplyToEvent_ChangeResponse); 
  
  
  // Event: SelChange
  //
  // Occurs when the current selection changes.
  //
  // The event has a registration method and a reply method.
  // GetEvents_SelChange - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_SelChange - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExpressionEdit_GetEvents_SelChangeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExpressionEdit_GetEvents_SelChangeResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // ExpressionEdit_ReplyToEvent_SelChangeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExpressionEdit_ReplyToEvent_SelChangeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_SelChange(ExpressionEdit_GetEvents_SelChangeRequest) returns (stream ExpressionEdit_GetEvents_SelChangeResponse);
  rpc ReplyToEvent_SelChange(ExpressionEdit_ReplyToEvent_SelChangeRequest) returns (ExpressionEdit_ReplyToEvent_SelChangeResponse); 
  
  
  // Event: BrowseExprDialogClosed
  //
  // Occurs when you close an Expression Browser dialog box displayed using the Browse menu item in the ExpressionEdit control context menu or the ExpressionEdit.DisplayBrowseExprDialog method.
  //
  // The event has a registration method and a reply method.
  // GetEvents_BrowseExprDialogClosed - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_BrowseExprDialogClosed - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExpressionEdit_GetEvents_BrowseExprDialogClosedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExpressionEdit_GetEvents_BrowseExprDialogClosedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - userHitOK: bool - This parameter is True when you click OK in the Expression Browser dialog box and False when you click Cancel.
  //  - contextModified: bool - This parameter is True when a variable or property in the context is created, deleted, or renamed through the context menu in the Expression Browser dialog box while the Expression Browser dialog box is displayed. This parameter is False when the user modifies only the value of a variable or property.
  //
  // ExpressionEdit_ReplyToEvent_BrowseExprDialogClosedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExpressionEdit_ReplyToEvent_BrowseExprDialogClosedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_BrowseExprDialogClosed(ExpressionEdit_GetEvents_BrowseExprDialogClosedRequest) returns (stream ExpressionEdit_GetEvents_BrowseExprDialogClosedResponse);
  rpc ReplyToEvent_BrowseExprDialogClosed(ExpressionEdit_ReplyToEvent_BrowseExprDialogClosedRequest) returns (ExpressionEdit_ReplyToEvent_BrowseExprDialogClosedResponse); 
  
  
  // Event: BorderDragged
  //
  // Occurs when the user drags a draggable border of a control with the mouse. The event provides the location and size to which you must set the control for the draggable borders to track the mouse cursor. However, you can choose to modify the location or size to which you set the control. For example, you can limit the width of the control so the left edge cannot be dragged off the visible portion of the window.
  // In addition to changing the size and position of the control, you might also update the sizes and positions of the other controls on the window to account for the change.
  //
  // If you are using LabVIEW, you must add the Horizontal and Vertical components of the origin of the LabVIEW front panel to the newX and newY event parameter values before you can use the newX and newY event parameters to set the ActiveX Container (AxCont) Left and Top properties for the control. To obtain the origin of a LabVIEW front panel, place an ActiveX property node on the block diagram of the VI, right-click the node, and select Link to»Pane from the context menu. Right-click the node again and select Select Property»Origin.
  //
  // The event has a registration method and a reply method.
  // GetEvents_BorderDragged - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_BorderDragged - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExpressionEdit_GetEvents_BorderDraggedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExpressionEdit_GetEvents_BorderDraggedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - bordersChanged: WhichBorders - Specifies which borders the user dragged. Refer to the WhichBorders constants for more information about draggable borders.
  //  - newX: int32 - Specifies the new x-coordinate for the control.
  //  - newY: int32 - Specifies the new y-coordinate for the control.
  //  - newWidth: int32 - Specifies the new width for the control.
  //  - newHeight: int32 - Specifies the new height for the control.
  //  - finalResize: bool - Specifies whether the event is the final event for the drag operation the user performs.
  //
  // ExpressionEdit_ReplyToEvent_BorderDraggedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExpressionEdit_ReplyToEvent_BorderDraggedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_BorderDragged(ExpressionEdit_GetEvents_BorderDraggedRequest) returns (stream ExpressionEdit_GetEvents_BorderDraggedResponse);
  rpc ReplyToEvent_BorderDragged(ExpressionEdit_ReplyToEvent_BorderDraggedRequest) returns (ExpressionEdit_ReplyToEvent_BorderDraggedResponse); 
  
  
  // Event: ButtonClick
  //
  // Responds to clicking on a custom button.
  //
  // This event does not occur when you click on a non-custom button.
  //
  // The event has a registration method and a reply method.
  // GetEvents_ButtonClick - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_ButtonClick - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExpressionEdit_GetEvents_ButtonClickRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExpressionEdit_GetEvents_ButtonClickResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - btn: ExpressionEditButtonInstance - Specifies the button the user clicked.
  //
  // ExpressionEdit_ReplyToEvent_ButtonClickRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExpressionEdit_ReplyToEvent_ButtonClickResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_ButtonClick(ExpressionEdit_GetEvents_ButtonClickRequest) returns (stream ExpressionEdit_GetEvents_ButtonClickResponse);
  rpc ReplyToEvent_ButtonClick(ExpressionEdit_ReplyToEvent_ButtonClickRequest) returns (ExpressionEdit_ReplyToEvent_ButtonClickResponse); 
  
  
  // Event: DropDown
  //
  // Occurs when the list portion of the control is about to drop down.
  //
  // This event is useful if you want to wait until the list is visible to populate the list with items.
  //
  // The event has a registration method and a reply method.
  // GetEvents_DropDown - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_DropDown - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExpressionEdit_GetEvents_DropDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExpressionEdit_GetEvents_DropDownResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // ExpressionEdit_ReplyToEvent_DropDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExpressionEdit_ReplyToEvent_DropDownResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_DropDown(ExpressionEdit_GetEvents_DropDownRequest) returns (stream ExpressionEdit_GetEvents_DropDownResponse);
  rpc ReplyToEvent_DropDown(ExpressionEdit_ReplyToEvent_DropDownRequest) returns (ExpressionEdit_ReplyToEvent_DropDownResponse); 
  
  
  // Event: InsertComboBoxItem
  //
  // Occurs when the user selects an item in the drop-down list. This event is useful when you do not want the selected item to replace the existing text.
  //
  // You cannot use this event to change what text to insert into the ExpressionEdit control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_InsertComboBoxItem - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_InsertComboBoxItem - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExpressionEdit_GetEvents_InsertComboBoxItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExpressionEdit_GetEvents_InsertComboBoxItemResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - Item: ExpressionEditComboBoxItemInstance
  //  - insertStart: int32
  //  - insertEnd: int32
  //
  // ExpressionEdit_ReplyToEvent_InsertComboBoxItemRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //  - insertStart: int32
  //  - insertEnd: int32
  //
  // ExpressionEdit_ReplyToEvent_InsertComboBoxItemResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_InsertComboBoxItem(ExpressionEdit_GetEvents_InsertComboBoxItemRequest) returns (stream ExpressionEdit_GetEvents_InsertComboBoxItemResponse);
  rpc ReplyToEvent_InsertComboBoxItem(ExpressionEdit_ReplyToEvent_InsertComboBoxItemRequest) returns (ExpressionEdit_ReplyToEvent_InsertComboBoxItemResponse); 
  
  
  // Event: CreateContextMenu
  //
  // Occurs just before the ExpressionEdit control displays its context menu. Use this event to add or remove items from the context menu of the ExpressionEdit control.
  //
  // The ExpressionEdit control creates a new context menu every time it displays its context menu to the user.
  //
  // The event has a registration method and a reply method.
  // GetEvents_CreateContextMenu - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_CreateContextMenu - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExpressionEdit_GetEvents_CreateContextMenuRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExpressionEdit_GetEvents_CreateContextMenuResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - menuHandle: int32 - Specifies the Microsoft Windows menu handle (HMENU) of the context menu. Use menu functions in the Windows Software Development Kit to modify this menu. Use the ExpressionEdit.ContextMenuItemClick event to respond to the user clicking menu items you add.When the context menu closes, the control disposes of the menu items. Thus, you do not need to dispose of menu items you insert.
  //  - x: int32 - Specifies where the left edge of the context menu is visible, relative to the control.
  //  - y: int32 - Specifies where the top edge of the context menu is visible, relative to the control.
  //
  // ExpressionEdit_ReplyToEvent_CreateContextMenuRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExpressionEdit_ReplyToEvent_CreateContextMenuResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_CreateContextMenu(ExpressionEdit_GetEvents_CreateContextMenuRequest) returns (stream ExpressionEdit_GetEvents_CreateContextMenuResponse);
  rpc ReplyToEvent_CreateContextMenu(ExpressionEdit_ReplyToEvent_CreateContextMenuRequest) returns (ExpressionEdit_ReplyToEvent_CreateContextMenuResponse); 
  
  
  // Event: ContextMenuItemClick
  //
  // Occurs when the user selects a menu item from the ExpressionEdit control context menu.
  //
  // The event has a registration method and a reply method.
  // GetEvents_ContextMenuItemClick - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_ContextMenuItemClick - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExpressionEdit_GetEvents_ContextMenuItemClickRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExpressionEdit_GetEvents_ContextMenuItemClickResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - menuItemId: int32 - Specifies the menu item ID of the menu item the user selects.
  //
  // ExpressionEdit_ReplyToEvent_ContextMenuItemClickRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExpressionEdit_ReplyToEvent_ContextMenuItemClickResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_ContextMenuItemClick(ExpressionEdit_GetEvents_ContextMenuItemClickRequest) returns (stream ExpressionEdit_GetEvents_ContextMenuItemClickResponse);
  rpc ReplyToEvent_ContextMenuItemClick(ExpressionEdit_ReplyToEvent_ContextMenuItemClickRequest) returns (ExpressionEdit_ReplyToEvent_ContextMenuItemClickResponse); 
  
  
  // Event: ContextChanged
  //
  // Occurs when the ExpressionEdit.Context property changes.
  //
  // The event has a registration method and a reply method.
  // GetEvents_ContextChanged - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_ContextChanged - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExpressionEdit_GetEvents_ContextChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExpressionEdit_GetEvents_ContextChangedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - reason: ContextChangedReasons - Specifies how the ExpressionEdit.Context property changed.
  //
  // ExpressionEdit_ReplyToEvent_ContextChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExpressionEdit_ReplyToEvent_ContextChangedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_ContextChanged(ExpressionEdit_GetEvents_ContextChangedRequest) returns (stream ExpressionEdit_GetEvents_ContextChangedResponse);
  rpc ReplyToEvent_ContextChanged(ExpressionEdit_ReplyToEvent_ContextChangedRequest) returns (ExpressionEdit_ReplyToEvent_ContextChangedResponse); 
  
  
  // Event: BrowseExprDialogOpened
  //
  // Occurs just before the ExpressionEdit control displays the Expression Browser dialog box. Use this event to override the default parameter values the ExpressionEdit control passes to the Expression Browser dialog box or to cancel displaying the Expression Browser dialog box to the user.
  //
  // The event has a registration method and a reply method.
  // GetEvents_BrowseExprDialogOpened - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_BrowseExprDialogOpened - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExpressionEdit_GetEvents_BrowseExprDialogOpenedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExpressionEdit_GetEvents_BrowseExprDialogOpenedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - dlgTitle: string
  //  - dlgOptions: int32
  //  - selectionStart: int32
  //  - selectionEnd: int32
  //  - initialVariableName: string
  //
  // ExpressionEdit_ReplyToEvent_BrowseExprDialogOpenedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //  - dlgTitle: string
  //  - dlgOptions: int32
  //  - selectionStart: int32
  //  - selectionEnd: int32
  //  - initialVariableName: string
  //  - cancel: bool
  //
  // ExpressionEdit_ReplyToEvent_BrowseExprDialogOpenedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_BrowseExprDialogOpened(ExpressionEdit_GetEvents_BrowseExprDialogOpenedRequest) returns (stream ExpressionEdit_GetEvents_BrowseExprDialogOpenedResponse);
  rpc ReplyToEvent_BrowseExprDialogOpened(ExpressionEdit_ReplyToEvent_BrowseExprDialogOpenedRequest) returns (ExpressionEdit_ReplyToEvent_BrowseExprDialogOpenedResponse); 
  
  
  // Event: ConnectionActivity
  //
  // Occurs after the connection to a manager control makes a change to a user interface control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_ConnectionActivity - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_ConnectionActivity - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ExpressionEdit_GetEvents_ConnectionActivityRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ExpressionEditInstance - The id of the ExpressionEdit object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ExpressionEdit_GetEvents_ConnectionActivityResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - activity: ConnectionActivityTypes - Specifies the type of change.
  //
  // ExpressionEdit_ReplyToEvent_ConnectionActivityRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ExpressionEdit_ReplyToEvent_ConnectionActivityResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_ConnectionActivity(ExpressionEdit_GetEvents_ConnectionActivityRequest) returns (stream ExpressionEdit_GetEvents_ConnectionActivityResponse);
  rpc ReplyToEvent_ConnectionActivity(ExpressionEdit_ReplyToEvent_ConnectionActivityRequest) returns (ExpressionEdit_ReplyToEvent_ConnectionActivityResponse); 
  
  
  // Event: _ExpressionEditEvents_Event_CheckExpression
  //
  rpc GetEvents__ExpressionEditEvents_Event_CheckExpression(ExpressionEdit_GetEvents__ExpressionEditEvents_Event_CheckExpressionRequest) returns (stream ExpressionEdit_GetEvents__ExpressionEditEvents_Event_CheckExpressionResponse);
  rpc ReplyToEvent__ExpressionEditEvents_Event_CheckExpression(ExpressionEdit_ReplyToEvent__ExpressionEditEvents_Event_CheckExpressionRequest) returns (ExpressionEdit_ReplyToEvent__ExpressionEditEvents_Event_CheckExpressionResponse); 
  
  
}
message ExpressionEditInstance {
  // Specifies the handle of the ExpressionEdit instance in the server.
  string id = 1;
}
message ExpressionEdit_ExpressionEditRequest {
}

message ExpressionEdit_ExpressionEditResponse {
  // The return type of the ExpressionEdit object.
  ExpressionEditInstance returnValue = 1;
}

message ExpressionEdit_DisplayBrowseExprDialogRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_DisplayBrowseExprDialogResponse {
  // Returns True when you click OK in the Expression Browser dialog box. Returns False when you click Cancel.
  bool returnValue = 1;
}

message ExpressionEdit_LocalizeRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies the name of the section in the language files that contains the localized text.
  string sectionName = 2;
}

message ExpressionEdit_LocalizeResponse {
}

message ExpressionEdit_GetAdditionalEvaluationConstantsRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_GetAdditionalEvaluationConstantsResponse {
  // The return type of the PropertyObject[] object.
  repeated PropertyObjectInstance returnValue = 1;
}

message ExpressionEdit_SetAdditionalEvaluationConstantsRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies variables that are valid in the expression but are not part of the context. For example, include a numeric or string PropertyObject where the name and value of the object are the name and value of the enumeration or constant. The control ignores subproperties of the object.
  repeated PropertyObjectInstance val = 2;
}

message ExpressionEdit_SetAdditionalEvaluationConstantsResponse {
}

message ExpressionEdit_GetValidEvaluationTypesRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_GetValidEvaluationTypesResponse {
  // The return type of the EvaluationTypes object.
  EvaluationTypesInstance returnValue = 1;
}

message ExpressionEdit_SetValidEvaluationTypesRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies the expected types for evaluating an expression.
  EvaluationTypesInstance val = 2;
}

message ExpressionEdit_SetValidEvaluationTypesResponse {
}

message ExpressionEdit_SelectAllRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_SelectAllResponse {
}

message ExpressionEdit_EvaluateRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Pass Eval_NoOptions to specify the default behavior, or pass one or more EvaluationOptions constants. The EvalOption_AllowEmptyExpression constant is ignored. Use the ExpressionEdit.AllowEmpty property to determine whether to treat an empty expression as an error. Use the bitwise-OR operator to specify multiple options.
  EvaluationOptions evaluationOptions = 2;
}

message ExpressionEdit_EvaluateResponse {
  // The result of the evaluation.
  PropertyObjectInstance returnValue = 1;
}

message ExpressionEdit_CheckExpressionRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_CheckExpressionResponse {
  // An error code.
  TSError returnValue = 1;
  // When an error exists, this parameter returns an error message that describes the error.
  string errorDescription = 2;
  // When an error exists, this parameter returns the starting character index of the error in the expression.
  int32 errorStartPosition = 3;
  // When an error exists, this parameter returns the index of one character past the ending character index of the error in the expression.
  int32 errorEndPosition = 4;
}

message ExpressionEdit_DisplayErrorRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies a bitwise-OR combination of the DisplayErrorOptions constants.
  int32 options = 2;
}

message ExpressionEdit_DisplayErrorResponse {
}

message ExpressionEdit_Set_BackColorRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies the background color of the ExpressionEdit control.
  uint32 val = 2;
}

message ExpressionEdit_Set_BackColorResponse {
}

message ExpressionEdit_Get_BackColorRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_BackColorResponse {
  // Specifies the background color of the ExpressionEdit control.
  uint32 returnValue = 1;
}

message ExpressionEdit_Get_BordersRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_BordersResponse {
  // Returns the frame and draggable borders that surround the control.
  BordersInstance returnValue = 1;
}

message ExpressionEdit_Set_EnabledRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // The control responds to user input only when this property is True.
  bool val = 2;
}

message ExpressionEdit_Set_EnabledResponse {
}

message ExpressionEdit_Get_EnabledRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_EnabledResponse {
  // The control responds to user input only when this property is True.
  bool returnValue = 1;
}

message ExpressionEdit_Set_HideSelectionRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // When this property is True, text selection is hidden when the ExpressionEdit control loses focus. When this property is False, text selection is never hidden.
  bool val = 2;
}

message ExpressionEdit_Set_HideSelectionResponse {
}

message ExpressionEdit_Get_HideSelectionRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_HideSelectionResponse {
  // When this property is True, text selection is hidden when the ExpressionEdit control loses focus. When this property is False, text selection is never hidden.
  bool returnValue = 1;
}

message ExpressionEdit_Set_FontRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies the current font for the ExpressionEdit control when the value of the ExpressionEdit.FontSource property is FontSource_UseFontProperty.
  IFontDispInstance val = 2;
}

message ExpressionEdit_Set_FontResponse {
}

message ExpressionEdit_Get_FontRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_FontResponse {
  // Specifies the current font for the ExpressionEdit control when the value of the ExpressionEdit.FontSource property is FontSource_UseFontProperty.
  IFontDispInstance returnValue = 1;
}

message ExpressionEdit_Get_hWndRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_hWndResponse {
  // Returns the Window handle of the ExpressionEdit control.
  int32 returnValue = 1;
}

message ExpressionEdit_Set_ReadOnlyRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies that the control can be edited.
  bool val = 2;
}

message ExpressionEdit_Set_ReadOnlyResponse {
}

message ExpressionEdit_Get_ReadOnlyRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_ReadOnlyResponse {
  // Specifies that the control can be edited.
  bool returnValue = 1;
}

message ExpressionEdit_Set_MaxLengthRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies the maximum number of characters the ExpressionEdit control can contain. When the value of this property is 0, the maximum number of characters is 64,000. You can specify a number greater than 64,000.
  int32 val = 2;
}

message ExpressionEdit_Set_MaxLengthResponse {
}

message ExpressionEdit_Get_MaxLengthRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_MaxLengthResponse {
  // Specifies the maximum number of characters the ExpressionEdit control can contain. When the value of this property is 0, the maximum number of characters is 64,000. You can specify a number greater than 64,000.
  int32 returnValue = 1;
}

message ExpressionEdit_Set_MouseIconRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Displays the specified picture as the cursor for the ExpressionEdit control.
  IPictureDispInstance val = 2;
}

message ExpressionEdit_Set_MouseIconResponse {
}

message ExpressionEdit_Get_MouseIconRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_MouseIconResponse {
  // Displays the specified picture as the cursor for the ExpressionEdit control.
  IPictureDispInstance returnValue = 1;
}

message ExpressionEdit_Set_MousePointerRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies the appearance of the mouse cursor when the cursor is over the control.
  MousePointerStyles val = 2;
}

message ExpressionEdit_Set_MousePointerResponse {
}

message ExpressionEdit_Get_MousePointerRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_MousePointerResponse {
  // Specifies the appearance of the mouse cursor when the cursor is over the control.
  MousePointerStyles returnValue = 1;
}

message ExpressionEdit_Set_MultilineRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies whether the ExpressionEdit control is a multi-line or single-line control.
  bool val = 2;
}

message ExpressionEdit_Set_MultilineResponse {
}

message ExpressionEdit_Get_MultilineRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_MultilineResponse {
  // Specifies whether the ExpressionEdit control is a multi-line or single-line control.
  bool returnValue = 1;
}

message ExpressionEdit_Set_ScrollBarsRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies which scrollbars are visible in the ExpressionEdit control.
  ScrollBars val = 2;
}

message ExpressionEdit_Set_ScrollBarsResponse {
}

message ExpressionEdit_Get_ScrollBarsRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_ScrollBarsResponse {
  // Specifies which scrollbars are visible in the ExpressionEdit control.
  ScrollBars returnValue = 1;
}

message ExpressionEdit_Set_SelLengthRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies the number of characters in the current selection.
  int32 val = 2;
}

message ExpressionEdit_Set_SelLengthResponse {
}

message ExpressionEdit_Get_SelLengthRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_SelLengthResponse {
  // Specifies the number of characters in the current selection.
  int32 returnValue = 1;
}

message ExpressionEdit_Set_SelStartRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies the zero-based index of the starting character for the current selection.
  int32 val = 2;
}

message ExpressionEdit_Set_SelStartResponse {
}

message ExpressionEdit_Get_SelStartRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_SelStartResponse {
  // Specifies the zero-based index of the starting character for the current selection.
  int32 returnValue = 1;
}

message ExpressionEdit_Set_SelTextRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Use this property to obtain or replace the currently selected text.
  string val = 2;
}

message ExpressionEdit_Set_SelTextResponse {
}

message ExpressionEdit_Get_SelTextRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_SelTextResponse {
  // Use this property to obtain or replace the currently selected text.
  string returnValue = 1;
}

message ExpressionEdit_Set_TextRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies a delocalized expression for the text in the ExpressionEdit control. The value of the ExpressionEdit.DisplayText property updates when you set this property.
  string val = 2;
}

message ExpressionEdit_Set_TextResponse {
}

message ExpressionEdit_Get_TextRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_TextResponse {
  // Specifies a delocalized expression for the text in the ExpressionEdit control. The value of the ExpressionEdit.DisplayText property updates when you set this property.
  string returnValue = 1;
}

message ExpressionEdit_Get_TextLengthRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_TextLengthResponse {
  // Returns the number of characters in the ExpressionEdit control text.
  int32 returnValue = 1;
}

message ExpressionEdit_Set_WantReturnRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies whether the ExpressionEdit control processes the <Enter> key. When the ExpressionEdit control is not processing the <Enter> key, the <Enter> key goes to the default button.    * When the value of this property is BooleanOrPreference_False, the <Enter> key goes to the default button.    * When the value of this property is BooleanOrPreference_True, the control applies the <Enter> key to the expression.    * When the value of this property is BooleanOrPreference_UsePreference, the Want Return option in the Expression Editing Options dialog box determines the setting.
  BooleanOrPreference val = 2;
}

message ExpressionEdit_Set_WantReturnResponse {
}

message ExpressionEdit_Get_WantReturnRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_WantReturnResponse {
  // Specifies whether the ExpressionEdit control processes the <Enter> key. When the ExpressionEdit control is not processing the <Enter> key, the <Enter> key goes to the default button.    * When the value of this property is BooleanOrPreference_False, the <Enter> key goes to the default button.    * When the value of this property is BooleanOrPreference_True, the control applies the <Enter> key to the expression.    * When the value of this property is BooleanOrPreference_UsePreference, the Want Return option in the Expression Editing Options dialog box determines the setting.
  BooleanOrPreference returnValue = 1;
}

message ExpressionEdit_Set_WordWrapRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies that lines too long to display on one line wrap to the next line.    * When the value of this property is BooleanOrPreference_False, word wrap is off.    * When the value of this property is BooleanOrPreference_True, word wrap is on.    * When the value of this property is BooleanOrPreference_UsePreference, the Word Wrap option in the Expression Editing Options dialog box determines whether word wrap is on.
  BooleanOrPreference val = 2;
}

message ExpressionEdit_Set_WordWrapResponse {
}

message ExpressionEdit_Get_WordWrapRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_WordWrapResponse {
  // Specifies that lines too long to display on one line wrap to the next line.    * When the value of this property is BooleanOrPreference_False, word wrap is off.    * When the value of this property is BooleanOrPreference_True, word wrap is on.    * When the value of this property is BooleanOrPreference_UsePreference, the Word Wrap option in the Expression Editing Options dialog box determines whether word wrap is on.
  BooleanOrPreference returnValue = 1;
}

message ExpressionEdit_Set_EngineRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies a reference to the Engine object. The ExpressionEdit control uses the Engine object for the following purposes:    * Displaying the Expression Browser dialog box.    * Displaying the Expression Editing Options dialog box, which you can access through the Options item in the context menu of the ExpressionEdit control.    * Reading options configured in the Expression Editing Options dialog box.
  EngineInstance val = 2;
}

message ExpressionEdit_Set_EngineResponse {
}

message ExpressionEdit_Get_EngineRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_EngineResponse {
  // Specifies a reference to the Engine object. The ExpressionEdit control uses the Engine object for the following purposes:    * Displaying the Expression Browser dialog box.    * Displaying the Expression Editing Options dialog box, which you can access through the Options item in the context menu of the ExpressionEdit control.    * Reading options configured in the Expression Editing Options dialog box.
  EngineInstance returnValue = 1;
}

message ExpressionEdit_Set_ContextRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies the set of available variables and properties for autocompletion, error checking, evaluation, and the Expression Browser dialog box. Set this property to a PropertyObject in which the expression you are editing can be evaluated.
  PropertyObjectInstance val = 2;
}

message ExpressionEdit_Set_ContextResponse {
}

message ExpressionEdit_Get_ContextRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_ContextResponse {
  // Specifies the set of available variables and properties for autocompletion, error checking, evaluation, and the Expression Browser dialog box. Set this property to a PropertyObject in which the expression you are editing can be evaluated.
  PropertyObjectInstance returnValue = 1;
}

message ExpressionEdit_Set_AutoLocalizeRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Note: This property is obsolete. Use ExpressionEdit.DisplayText instead.
  bool val = 2;
}

message ExpressionEdit_Set_AutoLocalizeResponse {
}

message ExpressionEdit_Get_AutoLocalizeRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_AutoLocalizeResponse {
  // Note: This property is obsolete. Use ExpressionEdit.DisplayText instead.
  bool returnValue = 1;
}

message ExpressionEdit_Set_TextTypeRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Use this property to make an ExpressionEdit control behave like an ordinary edit or text box control. This is useful when you want to use an edit control for editing expressions and plain text.
  TextTypes val = 2;
}

message ExpressionEdit_Set_TextTypeResponse {
}

message ExpressionEdit_Get_TextTypeRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_TextTypeResponse {
  // Use this property to make an ExpressionEdit control behave like an ordinary edit or text box control. This is useful when you want to use an edit control for editing expressions and plain text.
  TextTypes returnValue = 1;
}

message ExpressionEdit_Set_SyntaxHighlightingEnabledRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies whether the ExpressionEdit control displays different text elements, such as numbers, strings, and comments, in different colors and styles.
  bool val = 2;
}

message ExpressionEdit_Set_SyntaxHighlightingEnabledResponse {
}

message ExpressionEdit_Get_SyntaxHighlightingEnabledRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_SyntaxHighlightingEnabledResponse {
  // Specifies whether the ExpressionEdit control displays different text elements, such as numbers, strings, and comments, in different colors and styles.
  bool returnValue = 1;
}

message ExpressionEdit_Get_FunctionTipHwndRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_FunctionTipHwndResponse {
  // Returns the Window handle of the function tip.
  int32 returnValue = 1;
}

message ExpressionEdit_Get_AutoCompletionHwndRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_AutoCompletionHwndResponse {
  // Returns the Window handle of the autocompletion listbox.
  int32 returnValue = 1;
}

message ExpressionEdit_Set_AllowEmptyRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // TestStand returns an error for an empty expression only when this property is False.
  bool val = 2;
}

message ExpressionEdit_Set_AllowEmptyResponse {
}

message ExpressionEdit_Get_AllowEmptyRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_AllowEmptyResponse {
  // TestStand returns an error for an empty expression only when this property is False.
  bool returnValue = 1;
}

message ExpressionEdit_Set_ErrorCheckRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies whether the control performs error checking on the expression. When the value of this property is a value other than ErrorCheck_None, the expression is checked for errors when the ExpressionEdit control loses focus, when you select Check for Errors from the context menu, or when the ExpressionEdit.DisplayError method is called.
  ErrorCheck val = 2;
}

message ExpressionEdit_Set_ErrorCheckResponse {
}

message ExpressionEdit_Get_ErrorCheckRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_ErrorCheckResponse {
  // Specifies whether the control performs error checking on the expression. When the value of this property is a value other than ErrorCheck_None, the expression is checked for errors when the ExpressionEdit control loses focus, when you select Check for Errors from the context menu, or when the ExpressionEdit.DisplayError method is called.
  ErrorCheck returnValue = 1;
}

message ExpressionEdit_Set_RequiredTypesRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Note: This property is obsolete. Use the ExpressionEdit.GetValidEvaluationTypes and ExpressionEdit.SetValidEvaluationTypes methods instead.
  ValidExpressionTypes val = 2;
}

message ExpressionEdit_Set_RequiredTypesResponse {
}

message ExpressionEdit_Get_RequiredTypesRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_RequiredTypesResponse {
  // Note: This property is obsolete. Use the ExpressionEdit.GetValidEvaluationTypes and ExpressionEdit.SetValidEvaluationTypes methods instead.
  ValidExpressionTypes returnValue = 1;
}

message ExpressionEdit_Get_RequiredNamedTypesRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_RequiredNamedTypesResponse {
  // Note: This property is obsolete. Use the ExpressionEdit.GetValidEvaluationTypes and ExpressionEdit.SetValidEvaluationTypes methods instead.
  StringsInstance returnValue = 1;
}

message ExpressionEdit_Get_RequiredNamedTypeArraysRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_RequiredNamedTypeArraysResponse {
  // Note: This property is obsolete. Use the ExpressionEdit.GetValidEvaluationTypes and ExpressionEdit.SetValidEvaluationTypes methods instead.
  StringsInstance returnValue = 1;
}

message ExpressionEdit_Set_BrowseExprDialogTitleRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies the title for the Expression Browser dialog box when you call the ExpressionEdit.DisplayBrowseExprDialog method or when you select Browse in the context menu of the ExpressionEdit control. Set this property to an empty string to use the default title for the dialog box.
  string val = 2;
}

message ExpressionEdit_Set_BrowseExprDialogTitleResponse {
}

message ExpressionEdit_Get_BrowseExprDialogTitleRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_BrowseExprDialogTitleResponse {
  // Specifies the title for the Expression Browser dialog box when you call the ExpressionEdit.DisplayBrowseExprDialog method or when you select Browse in the context menu of the ExpressionEdit control. Set this property to an empty string to use the default title for the dialog box.
  string returnValue = 1;
}

message ExpressionEdit_Set_BrowseExprDialogOptionsRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies the options in the Expression Browser dialog box when you call the ExpressionEdit.DisplayBrowseExprDialog method or when you select Browse from the context menu of the ExpressionEdit control. Use any combination of the BrowseExprDialogOptions constants with this property.
  int32 val = 2;
}

message ExpressionEdit_Set_BrowseExprDialogOptionsResponse {
}

message ExpressionEdit_Get_BrowseExprDialogOptionsRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_BrowseExprDialogOptionsResponse {
  // Specifies the options in the Expression Browser dialog box when you call the ExpressionEdit.DisplayBrowseExprDialog method or when you select Browse from the context menu of the ExpressionEdit control. Use any combination of the BrowseExprDialogOptions constants with this property.
  int32 returnValue = 1;
}

message ExpressionEdit_Set_FontSourceRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies the current font for the ExpressionEdit control. The default value for this property is FontSource_UseGUIFont. When the value of this property is FontSource_UseFontProperty, the ExpressionEdit.Font property specifies the current font.
  FontSources val = 2;
}

message ExpressionEdit_Set_FontSourceResponse {
}

message ExpressionEdit_Get_FontSourceRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_FontSourceResponse {
  // Specifies the current font for the ExpressionEdit control. The default value for this property is FontSource_UseGUIFont. When the value of this property is FontSource_UseFontProperty, the ExpressionEdit.Font property specifies the current font.
  FontSources returnValue = 1;
}

message ExpressionEdit_Set_ScaleWithDPIRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  bool val = 2;
}

message ExpressionEdit_Set_ScaleWithDPIResponse {
}

message ExpressionEdit_Get_ScaleWithDPIRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_ScaleWithDPIResponse {
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  bool returnValue = 1;
}

message ExpressionEdit_Get_ButtonsRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_ButtonsResponse {
  // Returns a collection of the buttons for the ExpressionEdit control.
  ExpressionEditButtonsInstance returnValue = 1;
}

message ExpressionEdit_Set_StyleRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies the appearance of the control.
  ExpressionEditStyles val = 2;
}

message ExpressionEdit_Set_StyleResponse {
}

message ExpressionEdit_Get_StyleRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_StyleResponse {
  // Specifies the appearance of the control.
  ExpressionEditStyles returnValue = 1;
}

message ExpressionEdit_Get_ComboBoxItemsRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_ComboBoxItemsResponse {
  // Returns a collection of the items in the drop-down list when the ExpressionEdit control is a combo box.
  ExpressionEditComboBoxItemsInstance returnValue = 1;
}

message ExpressionEdit_Set_ShowDisplayNameWhenInactiveRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // When this property is True and the text in the ExpressionEdit control corresponds to the value of an item in the drop-down list and the item has a DisplayName, the ExpressionEdit control shows the DisplayName of the item instead of the text when the ExpressionEdit control is inactive.
  bool val = 2;
}

message ExpressionEdit_Set_ShowDisplayNameWhenInactiveResponse {
}

message ExpressionEdit_Get_ShowDisplayNameWhenInactiveRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_ShowDisplayNameWhenInactiveResponse {
  // When this property is True and the text in the ExpressionEdit control corresponds to the value of an item in the drop-down list and the item has a DisplayName, the ExpressionEdit control shows the DisplayName of the item instead of the text when the ExpressionEdit control is inactive.
  bool returnValue = 1;
}

message ExpressionEdit_Get_DropDownListHwndRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_DropDownListHwndResponse {
  // Returns the Window handle of the drop-down list visible when the ExpressionEdit control is a combo box.
  int32 returnValue = 1;
}

message ExpressionEdit_Set_DisplayTextRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies a localized expression for the text in the ExpressionEdit control. The value of the ExpressionEdit.Text property updates when you set this property.
  string val = 2;
}

message ExpressionEdit_Set_DisplayTextResponse {
}

message ExpressionEdit_Get_DisplayTextRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_DisplayTextResponse {
  // Specifies a localized expression for the text in the ExpressionEdit control. The value of the ExpressionEdit.Text property updates when you set this property.
  string returnValue = 1;
}

message ExpressionEdit_Set_DisplayFormattedValueRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // When this property is True, the ExpressionEdit control displays the formatted value of a numeric constant you type in a tooltip and replaces the text you type with the formatted value when the ExpressionEdit control loses focus.
  bool val = 2;
}

message ExpressionEdit_Set_DisplayFormattedValueResponse {
}

message ExpressionEdit_Get_DisplayFormattedValueRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_DisplayFormattedValueResponse {
  // When this property is True, the ExpressionEdit control displays the formatted value of a numeric constant you type in a tooltip and replaces the text you type with the formatted value when the ExpressionEdit control loses focus.
  bool returnValue = 1;
}

message ExpressionEdit_Set_NumericFormatRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies the format string that the ExpressionEdit control uses to calculate the formatted value of the text when the ExpressionEdit.DisplayFormattedValue property is True. Assign any string to this property that you would pass as the formatString parameter in the PropertyObject.GetFormattedValue method.
  string val = 2;
}

message ExpressionEdit_Set_NumericFormatResponse {
}

message ExpressionEdit_Get_NumericFormatRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_NumericFormatResponse {
  // Specifies the format string that the ExpressionEdit control uses to calculate the formatted value of the text when the ExpressionEdit.DisplayFormattedValue property is True. Assign any string to this property that you would pass as the formatString parameter in the PropertyObject.GetFormattedValue method.
  string returnValue = 1;
}

message ExpressionEdit_Set_AutomaticallyPrefixVariablesRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies whether the ExpressionEdit control automatically replaces variable names the user types with the full pathname of the variable.
  BooleanOrPreference val = 2;
}

message ExpressionEdit_Set_AutomaticallyPrefixVariablesResponse {
}

message ExpressionEdit_Get_AutomaticallyPrefixVariablesRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_AutomaticallyPrefixVariablesResponse {
  // Specifies whether the ExpressionEdit control automatically replaces variable names the user types with the full pathname of the variable.
  BooleanOrPreference returnValue = 1;
}

message ExpressionEdit_Set_ApplyDefaultStyleRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Specifies whether the control uses the default style for the ExpressionEdit buttons, and sets the ExpressionEdit.FontSource property to FontSource_UseUIStyleFont.
  bool val = 2;
}

message ExpressionEdit_Set_ApplyDefaultStyleResponse {
}

message ExpressionEdit_Get_ApplyDefaultStyleRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
}

message ExpressionEdit_Get_ApplyDefaultStyleResponse {
  // Specifies whether the control uses the default style for the ExpressionEdit buttons, and sets the ExpressionEdit.FontSource property to FontSource_UseUIStyleFont.
  bool returnValue = 1;
}

message ExpressionEdit_GetEvents_ClickRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExpressionEdit_GetEvents_ClickResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message ExpressionEdit_ReplyToEvent_ClickRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExpressionEdit_ReplyToEvent_ClickResponse {
}

message ExpressionEdit_GetEvents_DblClickRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExpressionEdit_GetEvents_DblClickResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message ExpressionEdit_ReplyToEvent_DblClickRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExpressionEdit_ReplyToEvent_DblClickResponse {
}

message ExpressionEdit_GetEvents_KeyDownRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExpressionEdit_GetEvents_KeyDownResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the KeyCodes constant of the key the user pressed.
  int32 keyCode = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
}

message ExpressionEdit_ReplyToEvent_KeyDownRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  // Specifies the KeyCodes constant of the key the user pressed.
  int32 keyCode = 2;
}

message ExpressionEdit_ReplyToEvent_KeyDownResponse {
}

message ExpressionEdit_GetEvents_KeyPressRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExpressionEdit_GetEvents_KeyPressResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the ASCII value of the pressed key.
  int32 keyAscii = 2;
}

message ExpressionEdit_ReplyToEvent_KeyPressRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  // Specifies the ASCII value of the pressed key.
  int32 keyAscii = 2;
}

message ExpressionEdit_ReplyToEvent_KeyPressResponse {
}

message ExpressionEdit_GetEvents_KeyUpRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExpressionEdit_GetEvents_KeyUpResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the KeyCodes constant of the key the user pressed.
  int32 keyCode = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
}

message ExpressionEdit_ReplyToEvent_KeyUpRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExpressionEdit_ReplyToEvent_KeyUpResponse {
}

message ExpressionEdit_GetEvents_MouseDownRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExpressionEdit_GetEvents_MouseDownResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  int32 btn = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
  // Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 x = 4;
  // Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 y = 5;
}

message ExpressionEdit_ReplyToEvent_MouseDownRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExpressionEdit_ReplyToEvent_MouseDownResponse {
}

message ExpressionEdit_GetEvents_MouseMoveRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExpressionEdit_GetEvents_MouseMoveResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies what mouse buttons are pressed. You can use any combination of the MouseButtons constants.
  int32 btn = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
  // Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 x = 4;
  // Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 y = 5;
}

message ExpressionEdit_ReplyToEvent_MouseMoveRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExpressionEdit_ReplyToEvent_MouseMoveResponse {
}

message ExpressionEdit_GetEvents_MouseUpRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExpressionEdit_GetEvents_MouseUpResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  int32 btn = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
  // Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 x = 4;
  // Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 y = 5;
}

message ExpressionEdit_ReplyToEvent_MouseUpRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExpressionEdit_ReplyToEvent_MouseUpResponse {
}

message ExpressionEdit_GetEvents_ChangeRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExpressionEdit_GetEvents_ChangeResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message ExpressionEdit_ReplyToEvent_ChangeRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExpressionEdit_ReplyToEvent_ChangeResponse {
}

message ExpressionEdit_GetEvents_SelChangeRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExpressionEdit_GetEvents_SelChangeResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message ExpressionEdit_ReplyToEvent_SelChangeRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExpressionEdit_ReplyToEvent_SelChangeResponse {
}

message ExpressionEdit_GetEvents_BrowseExprDialogClosedRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExpressionEdit_GetEvents_BrowseExprDialogClosedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // This parameter is True when you click OK in the Expression Browser dialog box and False when you click Cancel.
  bool userHitOK = 2;
  // This parameter is True when a variable or property in the context is created, deleted, or renamed through the context menu in the Expression Browser dialog box while the Expression Browser dialog box is displayed. This parameter is False when the user modifies only the value of a variable or property.
  bool contextModified = 3;
}

message ExpressionEdit_ReplyToEvent_BrowseExprDialogClosedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExpressionEdit_ReplyToEvent_BrowseExprDialogClosedResponse {
}

message ExpressionEdit_GetEvents_BorderDraggedRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExpressionEdit_GetEvents_BorderDraggedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies which borders the user dragged. Refer to the WhichBorders constants for more information about draggable borders.
  WhichBorders bordersChanged = 2;
  // Specifies the new x-coordinate for the control.
  int32 newX = 3;
  // Specifies the new y-coordinate for the control.
  int32 newY = 4;
  // Specifies the new width for the control.
  int32 newWidth = 5;
  // Specifies the new height for the control.
  int32 newHeight = 6;
  // Specifies whether the event is the final event for the drag operation the user performs.
  bool finalResize = 7;
}

message ExpressionEdit_ReplyToEvent_BorderDraggedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExpressionEdit_ReplyToEvent_BorderDraggedResponse {
}

message ExpressionEdit_GetEvents_ButtonClickRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExpressionEdit_GetEvents_ButtonClickResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the button the user clicked.
  ExpressionEditButtonInstance btn = 2;
}

message ExpressionEdit_ReplyToEvent_ButtonClickRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExpressionEdit_ReplyToEvent_ButtonClickResponse {
}

message ExpressionEdit_GetEvents_DropDownRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExpressionEdit_GetEvents_DropDownResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message ExpressionEdit_ReplyToEvent_DropDownRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExpressionEdit_ReplyToEvent_DropDownResponse {
}

message ExpressionEdit_GetEvents_InsertComboBoxItemRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExpressionEdit_GetEvents_InsertComboBoxItemResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the item to insert into the ExpressionEdit control.
  ExpressionEditComboBoxItemInstance Item = 2;
  // Specifies the zero-based index of the character where the selected item is inserted.
  // This parameter is initialized to zero. You can change the value of this parameter to change where the selected item is inserted.
  int32 insertStart = 3;
  // Specifies the zero-based index of the last character the selected item replaces.
  // This parameter is initialized to the index of the last character in the ExpressionEdit control. You can change the value of this parameter to change what text the selected item replaces.
  int32 insertEnd = 4;
}

message ExpressionEdit_ReplyToEvent_InsertComboBoxItemRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  // Specifies the zero-based index of the character where the selected item is inserted.
  // This parameter is initialized to zero. You can change the value of this parameter to change where the selected item is inserted.
  int32 insertStart = 2;
  // Specifies the zero-based index of the last character the selected item replaces.
  // This parameter is initialized to the index of the last character in the ExpressionEdit control. You can change the value of this parameter to change what text the selected item replaces.
  int32 insertEnd = 3;
}

message ExpressionEdit_ReplyToEvent_InsertComboBoxItemResponse {
}

message ExpressionEdit_GetEvents_CreateContextMenuRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExpressionEdit_GetEvents_CreateContextMenuResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the Microsoft Windows menu handle (HMENU) of the context menu. Use menu functions in the Windows Software Development Kit to modify this menu. Use the ExpressionEdit.ContextMenuItemClick event to respond to the user clicking menu items you add.
  // 
  // When the context menu closes, the control disposes of the menu items. Thus, you do not need to dispose of menu items you insert.
  int32 menuHandle = 2;
  // Specifies where the left edge of the context menu is visible, relative to the control.
  int32 x = 3;
  // Specifies where the top edge of the context menu is visible, relative to the control.
  int32 y = 4;
}

message ExpressionEdit_ReplyToEvent_CreateContextMenuRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExpressionEdit_ReplyToEvent_CreateContextMenuResponse {
}

message ExpressionEdit_GetEvents_ContextMenuItemClickRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExpressionEdit_GetEvents_ContextMenuItemClickResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the menu item ID of the menu item the user selects.
  int32 menuItemId = 2;
}

message ExpressionEdit_ReplyToEvent_ContextMenuItemClickRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExpressionEdit_ReplyToEvent_ContextMenuItemClickResponse {
}

message ExpressionEdit_GetEvents_ContextChangedRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExpressionEdit_GetEvents_ContextChangedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies how the ExpressionEdit.Context property changed.
  ContextChangedReasons reason = 2;
}

message ExpressionEdit_ReplyToEvent_ContextChangedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExpressionEdit_ReplyToEvent_ContextChangedResponse {
}

message ExpressionEdit_GetEvents_BrowseExprDialogOpenedRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExpressionEdit_GetEvents_BrowseExprDialogOpenedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the title of the Expression Browser dialog box. Assign a value to this parameter to override the default title.
  string dlgTitle = 2;
  // Specifies the BrowseExprDialogOptions the ExpressionEdit control passes to the Expression Browser dialog box. Assign a value to this parameter to override the default options.
  int32 dlgOptions = 3;
  // Specifies the zero-based character index where selection begins. Assign a value to this parameter to override the default start of selection.
  int32 selectionStart = 4;
  // Specifies the zero-based character index where selection ends. Assign a value to this parameter to override the default end of selection.
  int32 selectionEnd = 5;
  // Specifies the name of the initial variable or property to show as selected in the tree view portion of the Expression Browser dialog box. Assign a value to this parameter to override the default initially selected variable. Assign an empty string to this parameter to select the first item.
  string initialVariableName = 6;
}

message ExpressionEdit_ReplyToEvent_BrowseExprDialogOpenedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  // Specifies the title of the Expression Browser dialog box. Assign a value to this parameter to override the default title.
  string dlgTitle = 2;
  // Specifies the BrowseExprDialogOptions the ExpressionEdit control passes to the Expression Browser dialog box. Assign a value to this parameter to override the default options.
  int32 dlgOptions = 3;
  // Specifies the zero-based character index where selection begins. Assign a value to this parameter to override the default start of selection.
  int32 selectionStart = 4;
  // Specifies the zero-based character index where selection ends. Assign a value to this parameter to override the default end of selection.
  int32 selectionEnd = 5;
  // Specifies the name of the initial variable or property to show as selected in the tree view portion of the Expression Browser dialog box. Assign a value to this parameter to override the default initially selected variable. Assign an empty string to this parameter to select the first item.
  string initialVariableName = 6;
  // Assign True to this parameter to prevent the ExpressionEdit control from displaying the Expression Browser dialog box to the user.
  bool cancel = 7;
}

message ExpressionEdit_ReplyToEvent_BrowseExprDialogOpenedResponse {
}

message ExpressionEdit_GetEvents_ConnectionActivityRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExpressionEdit_GetEvents_ConnectionActivityResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the type of change.
  ConnectionActivityTypes activity = 2;
}

message ExpressionEdit_ReplyToEvent_ConnectionActivityRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ExpressionEdit_ReplyToEvent_ConnectionActivityResponse {
}

message ExpressionEdit_GetEvents__ExpressionEditEvents_Event_CheckExpressionRequest {
  // The id of the ExpressionEdit object.
  ExpressionEditInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ExpressionEdit_GetEvents__ExpressionEditEvents_Event_CheckExpressionResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  TSError errorCode = 2;
  string errorDescription = 3;
  int32 errorStartPosition = 4;
  int32 errorEndPosition = 5;
}

message ExpressionEdit_ReplyToEvent__ExpressionEditEvents_Event_CheckExpressionRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  TSError errorCode = 2;
  string errorDescription = 3;
  int32 errorStartPosition = 4;
  int32 errorEndPosition = 5;
}

message ExpressionEdit_ReplyToEvent__ExpressionEditEvents_Event_CheckExpressionResponse {
}

// ListBar
//
// Use a ListBar control to display multiple pages, where each page contains a list of items users can view or select. Connect a SequenceFileView Manager or ExecutionView Manager control to a ListBar page so users can view and select from a list, such as the active sequence file or execution. Connect an Application Manager control to a ListBar page so users can view or select the default adapter of the TestStand Engine.
// You can view the contents of a page by clicking on the page node, and you can also select a single item with the current page. Use the ListBar.CurrentPage property to determine the selected page, and use Pages.Item(CurrentPage).Cursor to determine the selected item on the current page.
// 
//
service ListBar {
  // Service: ListBar
  //
  // Creates a new ListBar instance
  //
  // ListBarRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //
  // ListBarResponse - The response message from the server. It provides the return value.
  //    - returnValue: ListBarInstance - The return type of the ListBar object.
  //
  rpc ListBar(ListBar_ListBarRequest) returns (ListBar_ListBarResponse);

  // Method: HitTest
  //
  // Returns which item, if any, is at the specified location.
  //
  // Use this method to determine which item the given coordinates belong to. For example, when a user clicks a control, you might want to determine which item on the current page the user clicked.
  //
  // ListBar_HitTestRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //    - x: int32 - Specifies the x-coordinate of the location to test, in pixels, relative to the control. 
  //    - y: int32 - Specifies the y-coordinate of the location to test, in pixels, relative to the control. 
  //
  // ListBar_HitTestResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the index of an item on the current page. When no item exists at the specified location, this method returns -1. 
  //
  rpc HitTest(ListBar_HitTestRequest) returns (ListBar_HitTestResponse);
  
  
  // Method: Localize
  //
  // Localizes the captions of all pages.
  //
  // First, update a .ini file located in the TestStand Language directory with the required string. Second, use the string tag in the .ini file as the caption for the control.
  // When you call this method, the control replaces the caption with the string from the .ini file. If the caption is not a tag in the .ini file, the caption does not change.
  // Note: When you connect a page to a manager control, the manager control automatically sets a localized page caption.
  //
  // ListBar_LocalizeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //    - sectionName: string - Specifies the name of the section in the language files that contains the localized text.
  //
  // ListBar_LocalizeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Localize(ListBar_LocalizeRequest) returns (ListBar_LocalizeResponse);
  
  

  // Property: hWnd
  //
  // Returns a Window handle for the ListBar control.
  //
  // You can use the returned Window handle with the Microsoft Windows API functions.
  // Note: Using Windows API functions with this property can cause undefined behavior.
  //
  // ListBar_Get_hWndRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //
  // ListBar_Get_hWndResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a Window handle for the ListBar control. 
  //
  rpc Get_hWnd(ListBar_Get_hWndRequest) returns (ListBar_Get_hWndResponse);
  
  
  // Property: ButtonStyle
  //
  // Specifies the style of buttons on the ListBar control.
  //
  // ListBar_Set_ButtonStyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //    - val: ListBarButtonStyles - Specifies the style of buttons on the ListBar control. 
  //
  // ListBar_Set_ButtonStyleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBar_Get_ButtonStyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //
  // ListBar_Get_ButtonStyleResponse - The response message from the server. It provides the return value.
  //    - returnValue: ListBarButtonStyles - Specifies the style of buttons on the ListBar control. 
  //
  rpc Set_ButtonStyle(ListBar_Set_ButtonStyleRequest) returns (ListBar_Set_ButtonStyleResponse);
  rpc Get_ButtonStyle(ListBar_Get_ButtonStyleRequest) returns (ListBar_Get_ButtonStyleResponse);
  
  
  // Property: ButtonFont
  //
  // Specifies the font of the button text on ListBar buttons.
  //
  // ListBar_Set_ButtonFontRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //    - val: IFontDispInstance - Specifies the font of the button text on ListBar buttons. 
  //
  // ListBar_Set_ButtonFontResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBar_Get_ButtonFontRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //
  // ListBar_Get_ButtonFontResponse - The response message from the server. It provides the return value.
  //    - returnValue: IFontDispInstance - Specifies the font of the button text on ListBar buttons. 
  //
  rpc Set_ButtonFont(ListBar_Set_ButtonFontRequest) returns (ListBar_Set_ButtonFontResponse);
  rpc Get_ButtonFont(ListBar_Get_ButtonFontRequest) returns (ListBar_Get_ButtonFontResponse);
  
  
  // Property: PageStyle
  //
  // Specifies the style of the pages in the ListBar control. This property can be any combination of the ListBarPageStyles constants.
  //
  // ListBar_Set_PageStyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //    - val: int32 - Specifies the style of the pages in the ListBar control. This property can be any combination of the ListBarPageStyles constants. 
  //
  // ListBar_Set_PageStyleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBar_Get_PageStyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //
  // ListBar_Get_PageStyleResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the style of the pages in the ListBar control. This property can be any combination of the ListBarPageStyles constants. 
  //
  rpc Set_PageStyle(ListBar_Set_PageStyleRequest) returns (ListBar_Set_PageStyleResponse);
  rpc Get_PageStyle(ListBar_Get_PageStyleRequest) returns (ListBar_Get_PageStyleResponse);
  
  
  // Property: PageFont
  //
  // Specifies the font for items on a ListBar page.
  //
  // ListBar_Set_PageFontRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //    - val: IFontDispInstance - Specifies the font for items on a ListBar page. 
  //
  // ListBar_Set_PageFontResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBar_Get_PageFontRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //
  // ListBar_Get_PageFontResponse - The response message from the server. It provides the return value.
  //    - returnValue: IFontDispInstance - Specifies the font for items on a ListBar page. 
  //
  rpc Set_PageFont(ListBar_Set_PageFontRequest) returns (ListBar_Set_PageFontResponse);
  rpc Get_PageFont(ListBar_Get_PageFontRequest) returns (ListBar_Get_PageFontResponse);
  
  
  // Property: Pages
  //
  // Returns a collection of the ListBar pages.
  //
  // Refer to the ListBarPages object for information about adding, removing, and accessing pages.
  //
  // ListBar_Get_PagesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //
  // ListBar_Get_PagesResponse - The response message from the server. It provides the return value.
  //    - returnValue: ListBarPagesInstance - Returns a collection of the ListBar pages. 
  //
  rpc Get_Pages(ListBar_Get_PagesRequest) returns (ListBar_Get_PagesResponse);
  
  
  // Property: CurrentPage
  //
  // Specifies the zero-based index of the current page in the ListBar control.
  //
  // The current page is the page in the ListBar control that displays the items of the page. Only one page is current in the ListBar control at a time.
  // Use the ListBarPages collection to access a ListBarPage using the page index of the ListBarPage.
  //
  // ListBar_Set_CurrentPageRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //    - val: int32 - Specifies the zero-based index of the current page in the ListBar control. 
  //
  // ListBar_Set_CurrentPageResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBar_Get_CurrentPageRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //
  // ListBar_Get_CurrentPageResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the zero-based index of the current page in the ListBar control. 
  //
  rpc Set_CurrentPage(ListBar_Set_CurrentPageRequest) returns (ListBar_Set_CurrentPageResponse);
  rpc Get_CurrentPage(ListBar_Get_CurrentPageRequest) returns (ListBar_Get_CurrentPageResponse);
  
  
  // Property: ShowItemCount
  //
  // When this property is True, the ListBar buttons display the number of items in each page, in addition to the page captions.
  //
  // ListBar_Set_ShowItemCountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //    - val: bool - When this property is True, the ListBar buttons display the number of items in each page, in addition to the page captions. 
  //
  // ListBar_Set_ShowItemCountResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBar_Get_ShowItemCountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //
  // ListBar_Get_ShowItemCountResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When this property is True, the ListBar buttons display the number of items in each page, in addition to the page captions. 
  //
  rpc Set_ShowItemCount(ListBar_Set_ShowItemCountRequest) returns (ListBar_Set_ShowItemCountResponse);
  rpc Get_ShowItemCount(ListBar_Get_ShowItemCountRequest) returns (ListBar_Get_ShowItemCountResponse);
  
  
  // Property: ButtonTextColor
  //
  // Specifies the color for the page captions displayed on the buttons in the ListBar control.
  //
  // ListBar_Set_ButtonTextColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //    - val: uint32 - Specifies the color for the page captions displayed on the buttons in the ListBar control. 
  //
  // ListBar_Set_ButtonTextColorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBar_Get_ButtonTextColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //
  // ListBar_Get_ButtonTextColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Specifies the color for the page captions displayed on the buttons in the ListBar control. 
  //
  rpc Set_ButtonTextColor(ListBar_Set_ButtonTextColorRequest) returns (ListBar_Set_ButtonTextColorResponse);
  rpc Get_ButtonTextColor(ListBar_Get_ButtonTextColorRequest) returns (ListBar_Get_ButtonTextColorResponse);
  
  
  // Property: PageTextColor
  //
  // Specifies the text color for page items.
  //
  // ListBar_Set_PageTextColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //    - val: uint32 - Specifies the text color for page items. 
  //
  // ListBar_Set_PageTextColorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBar_Get_PageTextColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //
  // ListBar_Get_PageTextColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Specifies the text color for page items. 
  //
  rpc Set_PageTextColor(ListBar_Set_PageTextColorRequest) returns (ListBar_Set_PageTextColorResponse);
  rpc Get_PageTextColor(ListBar_Get_PageTextColorRequest) returns (ListBar_Get_PageTextColorResponse);
  
  
  // Property: BackColor
  //
  // Specifies the background color of the ListBar control.
  //
  // ListBar_Set_BackColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //    - val: uint32 - Specifies the background color of the ListBar control. 
  //
  // ListBar_Set_BackColorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBar_Get_BackColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //
  // ListBar_Get_BackColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Specifies the background color of the ListBar control. 
  //
  rpc Set_BackColor(ListBar_Set_BackColorRequest) returns (ListBar_Set_BackColorResponse);
  rpc Get_BackColor(ListBar_Get_BackColorRequest) returns (ListBar_Get_BackColorResponse);
  
  
  // Property: ShowItemTipStrips
  //
  // Specifies whether to enable item tooltips. When you set this property to True, tooltips are visible.
  //
  // Item tooltips are the text you see when you hover over a partially visible item with the mouse. Tooltips allow you to see the full caption of a partially visible item.
  //
  // ListBar_Set_ShowItemTipStripsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //    - val: bool - Specifies whether to enable item tooltips. When you set this property to True, tooltips are visible. 
  //
  // ListBar_Set_ShowItemTipStripsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBar_Get_ShowItemTipStripsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //
  // ListBar_Get_ShowItemTipStripsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether to enable item tooltips. When you set this property to True, tooltips are visible. 
  //
  rpc Set_ShowItemTipStrips(ListBar_Set_ShowItemTipStripsRequest) returns (ListBar_Set_ShowItemTipStripsResponse);
  rpc Get_ShowItemTipStrips(ListBar_Get_ShowItemTipStripsRequest) returns (ListBar_Get_ShowItemTipStripsResponse);
  
  
  // Property: IconSize
  //
  // Specifies the size of icons in the ListBar control.
  //
  // Icons are always square. For example, when you specify an icon size of 32, the dimensions of the icon are 32 × 32 pixels.
  //
  // ListBar_Set_IconSizeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //    - val: int32 - Specifies the size of icons in the ListBar control. 
  //
  // ListBar_Set_IconSizeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBar_Get_IconSizeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //
  // ListBar_Get_IconSizeResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the size of icons in the ListBar control. 
  //
  rpc Set_IconSize(ListBar_Set_IconSizeRequest) returns (ListBar_Set_IconSizeResponse);
  rpc Get_IconSize(ListBar_Get_IconSizeRequest) returns (ListBar_Get_IconSizeResponse);
  
  
  // Property: ShowScrollBar
  //
  // Specifies whether to display a vertical scrollbar on the ListBarPage portion of the ListBar control when not enough room exists vertically to display all items in a ListBarPage.
  //
  // ListBar_Set_ShowScrollBarRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //    - val: bool - Specifies whether to display a vertical scrollbar on the ListBarPage portion of the ListBar control when not enough room exists vertically to display all items in a ListBarPage. 
  //
  // ListBar_Set_ShowScrollBarResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBar_Get_ShowScrollBarRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //
  // ListBar_Get_ShowScrollBarResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether to display a vertical scrollbar on the ListBarPage portion of the ListBar control when not enough room exists vertically to display all items in a ListBarPage. 
  //
  rpc Set_ShowScrollBar(ListBar_Set_ShowScrollBarRequest) returns (ListBar_Set_ShowScrollBarResponse);
  rpc Get_ShowScrollBar(ListBar_Get_ShowScrollBarRequest) returns (ListBar_Get_ShowScrollBarResponse);
  
  
  // Property: ButtonFontSource
  //
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  //
  // When the value of this property is FontSource_UseFontProperty, the corresponding Font property specifies the particular font the control uses. Otherwise, the control uses the font from the source this property specifies. Refer to the FontSources enumeration for the list of valid font sources.
  // Set this property to a value other than FontSource_UseFontProperty if you expect the font the ListBar.ButtonFont property specifies to not be present on a computer at run time. For example, a font present on an English version of the Microsoft Windows operating system might not be present on a Japanese version of the Windows operating system.
  //
  // ListBar_Set_ButtonFontSourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //    - val: FontSources - Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont. 
  //
  // ListBar_Set_ButtonFontSourceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBar_Get_ButtonFontSourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //
  // ListBar_Get_ButtonFontSourceResponse - The response message from the server. It provides the return value.
  //    - returnValue: FontSources - Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont. 
  //
  rpc Set_ButtonFontSource(ListBar_Set_ButtonFontSourceRequest) returns (ListBar_Set_ButtonFontSourceResponse);
  rpc Get_ButtonFontSource(ListBar_Get_ButtonFontSourceRequest) returns (ListBar_Get_ButtonFontSourceResponse);
  
  
  // Property: PageFontSource
  //
  // Specifies the font the ListBar control uses to display text on the page. The default value for this property is FontSource_UseGUIFont.
  //
  // When the value of this property is FontSource_UseFontProperty, the corresponding Font property specifies the particular font the control uses. Otherwise, the control uses the font from the source this property specifies. Refer to the FontSources enumeration for the list of valid font sources.
  // Set this property to a value other than FontSource_UseFontProperty when you expect the font the ListBar.PageFont property specifies to not be present on a computer at run time. For example, a font present on an English version of the Microsoft Windows operating system might not be present on a Japanese version of the Windows operating system.
  //
  // ListBar_Set_PageFontSourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //    - val: FontSources - Specifies the font the ListBar control uses to display text on the page. The default value for this property is FontSource_UseGUIFont. 
  //
  // ListBar_Set_PageFontSourceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBar_Get_PageFontSourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //
  // ListBar_Get_PageFontSourceResponse - The response message from the server. It provides the return value.
  //    - returnValue: FontSources - Specifies the font the ListBar control uses to display text on the page. The default value for this property is FontSource_UseGUIFont. 
  //
  rpc Set_PageFontSource(ListBar_Set_PageFontSourceRequest) returns (ListBar_Set_PageFontSourceResponse);
  rpc Get_PageFontSource(ListBar_Get_PageFontSourceRequest) returns (ListBar_Get_PageFontSourceResponse);
  
  
  // Property: ScaleWithDPI
  //
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  //
  // Some environments scale native controls based on the DPI settings of their display, while other environments do not. The TestStand User Interface Controls are designed to work in all environments.
  // The following are the recommended settings for various platforms:    * LabVIEW, LabWindows/CVI, C#, and Microsoft Visual Basic .NET—Set this property to False.    * Active Template Library (ATL)/Microsoft Foundation Class (MFC)—Set this property to True.
  //
  // ListBar_Set_ScaleWithDPIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //    - val: bool - Specifies how the control scales based on the dots per inch (DPI) setting. 
  //
  // ListBar_Set_ScaleWithDPIResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBar_Get_ScaleWithDPIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //
  // ListBar_Get_ScaleWithDPIResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies how the control scales based on the dots per inch (DPI) setting. 
  //
  rpc Set_ScaleWithDPI(ListBar_Set_ScaleWithDPIRequest) returns (ListBar_Set_ScaleWithDPIResponse);
  rpc Get_ScaleWithDPI(ListBar_Get_ScaleWithDPIRequest) returns (ListBar_Get_ScaleWithDPIResponse);
  
  
  // Property: Borders
  //
  // Returns the frame and draggable borders that surround the control.
  //
  // ListBar_Get_BordersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBarInstance - The id of the ListBar object.
  //
  // ListBar_Get_BordersResponse - The response message from the server. It provides the return value.
  //    - returnValue: BordersInstance - Returns the frame and draggable borders that surround the control. 
  //
  rpc Get_Borders(ListBar_Get_BordersRequest) returns (ListBar_Get_BordersResponse);
  
  

  // Event: CursorMoved
  //
  // Occurs when the user selects a new item in the current page.
  //
  // The event has a registration method and a reply method.
  // GetEvents_CursorMoved - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_CursorMoved - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ListBar_GetEvents_CursorMovedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ListBarInstance - The id of the ListBar object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ListBar_GetEvents_CursorMovedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - itemIdx: int32 - Specifies the index of the element that became the cursor.
  //
  // ListBar_ReplyToEvent_CursorMovedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ListBar_ReplyToEvent_CursorMovedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_CursorMoved(ListBar_GetEvents_CursorMovedRequest) returns (stream ListBar_GetEvents_CursorMovedResponse);
  rpc ReplyToEvent_CursorMoved(ListBar_ReplyToEvent_CursorMovedRequest) returns (ListBar_ReplyToEvent_CursorMovedResponse); 
  
  
  // Event: CurPageChanged
  //
  // Occurs when you select a new current page.
  //
  // The event has a registration method and a reply method.
  // GetEvents_CurPageChanged - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_CurPageChanged - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ListBar_GetEvents_CurPageChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ListBarInstance - The id of the ListBar object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ListBar_GetEvents_CurPageChangedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - CurrentPage: int32
  //
  // ListBar_ReplyToEvent_CurPageChangedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ListBar_ReplyToEvent_CurPageChangedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_CurPageChanged(ListBar_GetEvents_CurPageChangedRequest) returns (stream ListBar_GetEvents_CurPageChangedResponse);
  rpc ReplyToEvent_CurPageChanged(ListBar_ReplyToEvent_CurPageChangedRequest) returns (ListBar_ReplyToEvent_CurPageChangedResponse); 
  
  
  // Event: KeyDown
  //
  // Occurs when the user presses a key while the ListBar control has focus.
  //
  // The event has a registration method and a reply method.
  // GetEvents_KeyDown - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_KeyDown - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ListBar_GetEvents_KeyDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ListBarInstance - The id of the ListBar object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ListBar_GetEvents_KeyDownResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - keyCode: int32
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //
  // ListBar_ReplyToEvent_KeyDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //  - keyCode: int32
  //
  // ListBar_ReplyToEvent_KeyDownResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_KeyDown(ListBar_GetEvents_KeyDownRequest) returns (stream ListBar_GetEvents_KeyDownResponse);
  rpc ReplyToEvent_KeyDown(ListBar_ReplyToEvent_KeyDownRequest) returns (ListBar_ReplyToEvent_KeyDownResponse); 
  
  
  // Event: MouseMove
  //
  // Occurs when the user moves the mouse over the control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_MouseMove - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_MouseMove - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ListBar_GetEvents_MouseMoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ListBarInstance - The id of the ListBar object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ListBar_GetEvents_MouseMoveResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - btn: int32 - Specifies what mouse buttons are pressed. You can use any combination of the MouseButtons constants.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //  - x: int32 - Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //  - y: int32 - Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //
  // ListBar_ReplyToEvent_MouseMoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ListBar_ReplyToEvent_MouseMoveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_MouseMove(ListBar_GetEvents_MouseMoveRequest) returns (stream ListBar_GetEvents_MouseMoveResponse);
  rpc ReplyToEvent_MouseMove(ListBar_ReplyToEvent_MouseMoveRequest) returns (ListBar_ReplyToEvent_MouseMoveResponse); 
  
  
  // Event: MouseDown
  //
  // Occurs when the user clicks the mouse on the control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_MouseDown - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_MouseDown - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ListBar_GetEvents_MouseDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ListBarInstance - The id of the ListBar object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ListBar_GetEvents_MouseDownResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - btn: int32 - Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //  - x: int32 - Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //  - y: int32 - Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //
  // ListBar_ReplyToEvent_MouseDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ListBar_ReplyToEvent_MouseDownResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_MouseDown(ListBar_GetEvents_MouseDownRequest) returns (stream ListBar_GetEvents_MouseDownResponse);
  rpc ReplyToEvent_MouseDown(ListBar_ReplyToEvent_MouseDownRequest) returns (ListBar_ReplyToEvent_MouseDownResponse); 
  
  
  // Event: MouseUp
  //
  // Occurs when the user clicks the mouse on the control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_MouseUp - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_MouseUp - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ListBar_GetEvents_MouseUpRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ListBarInstance - The id of the ListBar object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ListBar_GetEvents_MouseUpResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - btn: int32 - Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //  - x: int32 - Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //  - y: int32 - Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //
  // ListBar_ReplyToEvent_MouseUpRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ListBar_ReplyToEvent_MouseUpResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_MouseUp(ListBar_GetEvents_MouseUpRequest) returns (stream ListBar_GetEvents_MouseUpResponse);
  rpc ReplyToEvent_MouseUp(ListBar_ReplyToEvent_MouseUpRequest) returns (ListBar_ReplyToEvent_MouseUpResponse); 
  
  
  // Event: DblClick
  //
  // Occurs when the user double-clicks the left mouse button.
  //
  // The event has a registration method and a reply method.
  // GetEvents_DblClick - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_DblClick - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ListBar_GetEvents_DblClickRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ListBarInstance - The id of the ListBar object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ListBar_GetEvents_DblClickResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // ListBar_ReplyToEvent_DblClickRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ListBar_ReplyToEvent_DblClickResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_DblClick(ListBar_GetEvents_DblClickRequest) returns (stream ListBar_GetEvents_DblClickResponse);
  rpc ReplyToEvent_DblClick(ListBar_ReplyToEvent_DblClickRequest) returns (ListBar_ReplyToEvent_DblClickResponse); 
  
  
  // Event: CreateContextMenu
  //
  // Occurs when the user right-clicks the control so the application can build a context menu from which the user can select commands. Although you can implement context menus in most environments without using this event, some environments do not provide any other way to create a context menu. Also, creating a context menu using this event can be simpler in most environments, especially when the context menu contains only TestStand commands.
  //
  // The event has a registration method and a reply method.
  // GetEvents_CreateContextMenu - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_CreateContextMenu - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ListBar_GetEvents_CreateContextMenuRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ListBarInstance - The id of the ListBar object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ListBar_GetEvents_CreateContextMenuResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - menuHandle: int32 - Specifies the Microsoft Windows menu handle (HMENU). When you add menu items to the menu handle, the control displays them in a context menu. Use the Commands.InsertIntoWin32Menu method to insert TestStand commands to the menu. You can also use the menu functions in the Windows Software Development Kit (SDK) to add other menu items. Menu items you add this way do not have an associated TestStand command. When the user selects an item that does not have a TestStand command, the control creates and executes a Command object of kind CommandKind_Custom. The control stores the menu item identifier (resource ID/command ID) as a long in the Command.UserData property and as a decimal string in the command display name. You can handle either the ApplicationMgr.PreCommandExecute or ApplicationMgr.PostCommandExecute event to receive a notification when the user selects a menu item you insert with the Windows SDK. When the context menu closes, the control disposes of the menu items. Thus, you do not need to dispose of menu items you insert.
  //  - x: int32 - Specifies the horizontal position of the right-mouse click, relative to the control.
  //  - y: int32 - Specifies the vertical position of the right-mouse click, relative to the control.
  //
  // ListBar_ReplyToEvent_CreateContextMenuRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ListBar_ReplyToEvent_CreateContextMenuResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_CreateContextMenu(ListBar_GetEvents_CreateContextMenuRequest) returns (stream ListBar_GetEvents_CreateContextMenuResponse);
  rpc ReplyToEvent_CreateContextMenu(ListBar_ReplyToEvent_CreateContextMenuRequest) returns (ListBar_ReplyToEvent_CreateContextMenuResponse); 
  
  
  // Event: BorderDragged
  //
  // Occurs when the user drags a draggable border of a control with the mouse. The event provides the location and size to which you must set the control for the draggable borders to track the mouse cursor. However, you can choose to modify the location or size to which you set the control. For example, you can limit the width of the control so the left edge cannot be dragged off of the visible portion of the window.
  // In addition to changing the size and position of the control, you might also update the sizes and positions of the other controls on the window to account for the change.
  //
  // If you are using LabVIEW, you must add the Horizontal and Vertical components of the origin of the LabVIEW front panel to the newX and newY event parameter values before you can use the newX and newY event parameters to set the ActiveX Container (AxCont) Left and Top properties for the control. To obtain the origin of a LabVIEW front panel, place an ActiveX property node on the block diagram of the VI, right-click the node, and select Link to»Pane from the context menu. Right-click the node again and select Select Property»Origin.
  //
  // The event has a registration method and a reply method.
  // GetEvents_BorderDragged - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_BorderDragged - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ListBar_GetEvents_BorderDraggedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ListBarInstance - The id of the ListBar object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ListBar_GetEvents_BorderDraggedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - bordersChanged: WhichBorders - Specifies which borders the user dragged. Refer to the WhichBorders constants for more information about draggable borders.
  //  - newX: int32 - Specifies the new x-coordinate for the control.
  //  - newY: int32 - Specifies the new y-coordinate for the control.
  //  - newWidth: int32 - Specifies the new width for the control.
  //  - newHeight: int32 - Specifies the new height for the control.
  //  - finalResize: bool - Specifies whether the event is the final event for the drag operation the user performs.
  //
  // ListBar_ReplyToEvent_BorderDraggedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ListBar_ReplyToEvent_BorderDraggedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_BorderDragged(ListBar_GetEvents_BorderDraggedRequest) returns (stream ListBar_GetEvents_BorderDraggedResponse);
  rpc ReplyToEvent_BorderDragged(ListBar_ReplyToEvent_BorderDraggedRequest) returns (ListBar_ReplyToEvent_BorderDraggedResponse); 
  
  
  // Event: ConnectionActivity
  //
  // Occurs after the connection to a manager control makes a change to a user interface control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_ConnectionActivity - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_ConnectionActivity - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ListBar_GetEvents_ConnectionActivityRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ListBarInstance - The id of the ListBar object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ListBar_GetEvents_ConnectionActivityResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - activity: ConnectionActivityTypes - Specifies the type of change.
  //  - pageIndex: int32 - Specifies the index of the ListBarPage to which the connection made a change.
  //
  // ListBar_ReplyToEvent_ConnectionActivityRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ListBar_ReplyToEvent_ConnectionActivityResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_ConnectionActivity(ListBar_GetEvents_ConnectionActivityRequest) returns (stream ListBar_GetEvents_ConnectionActivityResponse);
  rpc ReplyToEvent_ConnectionActivity(ListBar_ReplyToEvent_ConnectionActivityRequest) returns (ListBar_ReplyToEvent_ConnectionActivityResponse); 
  
  
}
message ListBarInstance {
  // Specifies the handle of the ListBar instance in the server.
  string id = 1;
}
message ListBar_ListBarRequest {
}

message ListBar_ListBarResponse {
  // The return type of the ListBar object.
  ListBarInstance returnValue = 1;
}

message ListBar_HitTestRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
  // Specifies the x-coordinate of the location to test, in pixels, relative to the control.
  int32 x = 2;
  // Specifies the y-coordinate of the location to test, in pixels, relative to the control.
  int32 y = 3;
}

message ListBar_HitTestResponse {
  // Returns the index of an item on the current page. When no item exists at the specified location, this method returns -1.
  int32 returnValue = 1;
}

message ListBar_LocalizeRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
  // Specifies the name of the section in the language files that contains the localized text.
  string sectionName = 2;
}

message ListBar_LocalizeResponse {
}

message ListBar_Get_hWndRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
}

message ListBar_Get_hWndResponse {
  // Returns a Window handle for the ListBar control.
  int32 returnValue = 1;
}

message ListBar_Set_ButtonStyleRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
  // Specifies the style of buttons on the ListBar control.
  ListBarButtonStyles val = 2;
}

message ListBar_Set_ButtonStyleResponse {
}

message ListBar_Get_ButtonStyleRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
}

message ListBar_Get_ButtonStyleResponse {
  // Specifies the style of buttons on the ListBar control.
  ListBarButtonStyles returnValue = 1;
}

message ListBar_Set_ButtonFontRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
  // Specifies the font of the button text on ListBar buttons.
  IFontDispInstance val = 2;
}

message ListBar_Set_ButtonFontResponse {
}

message ListBar_Get_ButtonFontRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
}

message ListBar_Get_ButtonFontResponse {
  // Specifies the font of the button text on ListBar buttons.
  IFontDispInstance returnValue = 1;
}

message ListBar_Set_PageStyleRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
  // Specifies the style of the pages in the ListBar control. This property can be any combination of the ListBarPageStyles constants.
  ListBarPageStyles val = 2;
}

message ListBar_Set_PageStyleResponse {
}

message ListBar_Get_PageStyleRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
}

message ListBar_Get_PageStyleResponse {
  // Specifies the style of the pages in the ListBar control. This property can be any combination of the ListBarPageStyles constants.
  ListBarPageStyles returnValue = 1;
}

message ListBar_Set_PageFontRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
  // Specifies the font for items on a ListBar page.
  IFontDispInstance val = 2;
}

message ListBar_Set_PageFontResponse {
}

message ListBar_Get_PageFontRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
}

message ListBar_Get_PageFontResponse {
  // Specifies the font for items on a ListBar page.
  IFontDispInstance returnValue = 1;
}

message ListBar_Get_PagesRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
}

message ListBar_Get_PagesResponse {
  // Returns a collection of the ListBar pages.
  ListBarPagesInstance returnValue = 1;
}

message ListBar_Set_CurrentPageRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
  // Specifies the zero-based index of the current page in the ListBar control.
  int32 val = 2;
}

message ListBar_Set_CurrentPageResponse {
}

message ListBar_Get_CurrentPageRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
}

message ListBar_Get_CurrentPageResponse {
  // Specifies the zero-based index of the current page in the ListBar control.
  int32 returnValue = 1;
}

message ListBar_Set_ShowItemCountRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
  // When this property is True, the ListBar buttons display the number of items in each page, in addition to the page captions.
  bool val = 2;
}

message ListBar_Set_ShowItemCountResponse {
}

message ListBar_Get_ShowItemCountRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
}

message ListBar_Get_ShowItemCountResponse {
  // When this property is True, the ListBar buttons display the number of items in each page, in addition to the page captions.
  bool returnValue = 1;
}

message ListBar_Set_ButtonTextColorRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
  // Specifies the color for the page captions displayed on the buttons in the ListBar control.
  uint32 val = 2;
}

message ListBar_Set_ButtonTextColorResponse {
}

message ListBar_Get_ButtonTextColorRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
}

message ListBar_Get_ButtonTextColorResponse {
  // Specifies the color for the page captions displayed on the buttons in the ListBar control.
  uint32 returnValue = 1;
}

message ListBar_Set_PageTextColorRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
  // Specifies the text color for page items.
  uint32 val = 2;
}

message ListBar_Set_PageTextColorResponse {
}

message ListBar_Get_PageTextColorRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
}

message ListBar_Get_PageTextColorResponse {
  // Specifies the text color for page items.
  uint32 returnValue = 1;
}

message ListBar_Set_BackColorRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
  // Specifies the background color of the ListBar control.
  uint32 val = 2;
}

message ListBar_Set_BackColorResponse {
}

message ListBar_Get_BackColorRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
}

message ListBar_Get_BackColorResponse {
  // Specifies the background color of the ListBar control.
  uint32 returnValue = 1;
}

message ListBar_Set_ShowItemTipStripsRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
  // Specifies whether to enable item tooltips. When you set this property to True, tooltips are visible.
  bool val = 2;
}

message ListBar_Set_ShowItemTipStripsResponse {
}

message ListBar_Get_ShowItemTipStripsRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
}

message ListBar_Get_ShowItemTipStripsResponse {
  // Specifies whether to enable item tooltips. When you set this property to True, tooltips are visible.
  bool returnValue = 1;
}

message ListBar_Set_IconSizeRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
  // Specifies the size of icons in the ListBar control.
  int32 val = 2;
}

message ListBar_Set_IconSizeResponse {
}

message ListBar_Get_IconSizeRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
}

message ListBar_Get_IconSizeResponse {
  // Specifies the size of icons in the ListBar control.
  int32 returnValue = 1;
}

message ListBar_Set_ShowScrollBarRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
  // Specifies whether to display a vertical scrollbar on the ListBarPage portion of the ListBar control when not enough room exists vertically to display all items in a ListBarPage.
  bool val = 2;
}

message ListBar_Set_ShowScrollBarResponse {
}

message ListBar_Get_ShowScrollBarRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
}

message ListBar_Get_ShowScrollBarResponse {
  // Specifies whether to display a vertical scrollbar on the ListBarPage portion of the ListBar control when not enough room exists vertically to display all items in a ListBarPage.
  bool returnValue = 1;
}

message ListBar_Set_ButtonFontSourceRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  FontSources val = 2;
}

message ListBar_Set_ButtonFontSourceResponse {
}

message ListBar_Get_ButtonFontSourceRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
}

message ListBar_Get_ButtonFontSourceResponse {
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  FontSources returnValue = 1;
}

message ListBar_Set_PageFontSourceRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
  // Specifies the font the ListBar control uses to display text on the page. The default value for this property is FontSource_UseGUIFont.
  FontSources val = 2;
}

message ListBar_Set_PageFontSourceResponse {
}

message ListBar_Get_PageFontSourceRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
}

message ListBar_Get_PageFontSourceResponse {
  // Specifies the font the ListBar control uses to display text on the page. The default value for this property is FontSource_UseGUIFont.
  FontSources returnValue = 1;
}

message ListBar_Set_ScaleWithDPIRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  bool val = 2;
}

message ListBar_Set_ScaleWithDPIResponse {
}

message ListBar_Get_ScaleWithDPIRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
}

message ListBar_Get_ScaleWithDPIResponse {
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  bool returnValue = 1;
}

message ListBar_Get_BordersRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
}

message ListBar_Get_BordersResponse {
  // Returns the frame and draggable borders that surround the control.
  BordersInstance returnValue = 1;
}

message ListBar_GetEvents_CursorMovedRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ListBar_GetEvents_CursorMovedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the index of the element that became the cursor.
  int32 itemIdx = 2;
}

message ListBar_ReplyToEvent_CursorMovedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ListBar_ReplyToEvent_CursorMovedResponse {
}

message ListBar_GetEvents_CurPageChangedRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ListBar_GetEvents_CurPageChangedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the index of the selected page in ListBarPages.
  int32 CurrentPage = 2;
}

message ListBar_ReplyToEvent_CurPageChangedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ListBar_ReplyToEvent_CurPageChangedResponse {
}

message ListBar_GetEvents_KeyDownRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ListBar_GetEvents_KeyDownResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the KeyCodes constant of the key the user pressed.
  int32 keyCode = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
}

message ListBar_ReplyToEvent_KeyDownRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  // Specifies the KeyCodes constant of the key the user pressed.
  int32 keyCode = 2;
}

message ListBar_ReplyToEvent_KeyDownResponse {
}

message ListBar_GetEvents_MouseMoveRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ListBar_GetEvents_MouseMoveResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies what mouse buttons are pressed. You can use any combination of the MouseButtons constants.
  int32 btn = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
  // Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 x = 4;
  // Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 y = 5;
}

message ListBar_ReplyToEvent_MouseMoveRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ListBar_ReplyToEvent_MouseMoveResponse {
}

message ListBar_GetEvents_MouseDownRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ListBar_GetEvents_MouseDownResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  int32 btn = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
  // Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 x = 4;
  // Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 y = 5;
}

message ListBar_ReplyToEvent_MouseDownRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ListBar_ReplyToEvent_MouseDownResponse {
}

message ListBar_GetEvents_MouseUpRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ListBar_GetEvents_MouseUpResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  int32 btn = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
  // Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 x = 4;
  // Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 y = 5;
}

message ListBar_ReplyToEvent_MouseUpRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ListBar_ReplyToEvent_MouseUpResponse {
}

message ListBar_GetEvents_DblClickRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ListBar_GetEvents_DblClickResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message ListBar_ReplyToEvent_DblClickRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ListBar_ReplyToEvent_DblClickResponse {
}

message ListBar_GetEvents_CreateContextMenuRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ListBar_GetEvents_CreateContextMenuResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the Microsoft Windows menu handle (HMENU). When you add menu items to the menu handle, the control displays them in a context menu. Use the Commands.InsertIntoWin32Menu method to insert TestStand commands to the menu.
  // You can also use the menu functions in the Windows Software Development Kit (SDK) to add other menu items. Menu items you add this way do not have an associated TestStand command. When the user selects an item that does not have a TestStand command, the control creates and executes a Command object of kind CommandKind_Custom. The control stores the menu item identifier (resource ID/command ID) as a long in the Command.UserData property and as a decimal string in the command display name. You can handle either the ApplicationMgr.PreCommandExecute or ApplicationMgr.PostCommandExecute event to receive a notification when the user selects a menu item you insert with the Windows SDK.
  // When the context menu closes, the control disposes of the menu items. Thus, you do not need to dispose of menu items you insert.
  int32 menuHandle = 2;
  // Specifies the horizontal position of the right-mouse click, relative to the control.
  int32 x = 3;
  // Specifies the vertical position of the right-mouse click, relative to the control.
  int32 y = 4;
}

message ListBar_ReplyToEvent_CreateContextMenuRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ListBar_ReplyToEvent_CreateContextMenuResponse {
}

message ListBar_GetEvents_BorderDraggedRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ListBar_GetEvents_BorderDraggedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies which borders the user dragged. Refer to the WhichBorders constants for more information about draggable borders.
  WhichBorders bordersChanged = 2;
  // Specifies the new x-coordinate for the control.
  int32 newX = 3;
  // Specifies the new y-coordinate for the control.
  int32 newY = 4;
  // Specifies the new width for the control.
  int32 newWidth = 5;
  // Specifies the new height for the control.
  int32 newHeight = 6;
  // Specifies whether the event is the final event for the drag operation the user performs.
  bool finalResize = 7;
}

message ListBar_ReplyToEvent_BorderDraggedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ListBar_ReplyToEvent_BorderDraggedResponse {
}

message ListBar_GetEvents_ConnectionActivityRequest {
  // The id of the ListBar object.
  ListBarInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ListBar_GetEvents_ConnectionActivityResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the type of change.
  ConnectionActivityTypes activity = 2;
  // Specifies the index of the ListBarPage to which the connection made a change.
  int32 pageIndex = 3;
}

message ListBar_ReplyToEvent_ConnectionActivityRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ListBar_ReplyToEvent_ConnectionActivityResponse {
}

// StatusBar
//
// Connect a manager control to panes of a StatusBar control to display text, image, or progress information about the application state. You can programmatically control individual StatusBar panes to display custom information.
// You can connect the panes to CaptionSources, NumericSources, and ImageSources on the Application Manager, ExecutionView Manager, and SequenceFileView Manager controls.
//
service StatusBar {
  // Service: StatusBar
  //
  // Creates a new StatusBar instance
  //
  // StatusBarRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarInstance - The id of the StatusBar object.
  //
  // StatusBarResponse - The response message from the server. It provides the return value.
  //    - returnValue: StatusBarInstance - The return type of the StatusBar object.
  //
  rpc StatusBar(StatusBar_StatusBarRequest) returns (StatusBar_StatusBarResponse);

  // Method: Localize
  //
  // Localizes all the text captions in the StatusBar control.
  //
  // First, update a .ini file located in the <TestStand Public>\Components\Language directory with the required strings. Second, use the string tags in the .ini file as the pane captions for the control.
  // When you call this method, the control replaces the pane captions with the strings from the .ini file. If a caption is not a tag in the .ini file, the caption does not change.
  // Note: When you connect a pane to a manager control, the manager control automatically sets a localized caption.
  //
  // StatusBar_LocalizeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StatusBarInstance - The id of the StatusBar object.
  //    - sectionName: string - Specifies the name of the section in the language files that contains the localized text.
  //
  // StatusBar_LocalizeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Localize(StatusBar_LocalizeRequest) returns (StatusBar_LocalizeResponse);
  
  
  // Method: HitTest
  //
  // Returns the index of the pane at the given coordinates.
  //
  // Use this method to determine the item to which the given coordinates belong. For example, when a user clicks on the control, you might want to determine the item the user clicked.
  //
  // StatusBar_HitTestRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StatusBarInstance - The id of the StatusBar object.
  //    - x: int32 - Specifies the x-coordinate of the location to test, in pixels, relative to the control. 
  //    - y: int32 - Specifies the y-coordinate of the location to test, in pixels, relative to the control. 
  //
  // StatusBar_HitTestResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a zero-based item index. You can use this value to retrieve a StatusBarPane object from the StatusBarPanes collection. This method returns -1 when the location is not on a pane. 
  //
  rpc HitTest(StatusBar_HitTestRequest) returns (StatusBar_HitTestResponse);
  
  
  // Method: ShowPanes
  //
  // Shows the list of panes and hides any panes not in the list.
  //
  // Use this method to switch between sets of visible panes.
  //
  // StatusBar_ShowPanesRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: StatusBarInstance - The id of the StatusBar object.
  //    - panesList: string - Specifies a comma-separated list of pane names. For example, "pane1, pane2, pane3".
  //
  // StatusBar_ShowPanesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc ShowPanes(StatusBar_ShowPanesRequest) returns (StatusBar_ShowPanesResponse);
  
  

  // Property: Panes
  //
  // Returns the StatusBarPanes collection.
  //
  // StatusBar_Get_PanesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarInstance - The id of the StatusBar object.
  //
  // StatusBar_Get_PanesResponse - The response message from the server. It provides the return value.
  //    - returnValue: StatusBarPanesInstance - Returns the StatusBarPanes collection. 
  //
  rpc Get_Panes(StatusBar_Get_PanesRequest) returns (StatusBar_Get_PanesResponse);
  
  
  // Property: Font
  //
  // Specifies the font for the control when the value of the StatusBar.FontSource property is FontSource_UseFontProperty.
  //
  // StatusBar_Set_FontRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarInstance - The id of the StatusBar object.
  //    - val: IFontDispInstance - Specifies the font for the control when the value of the StatusBar.FontSource property is FontSource_UseFontProperty. 
  //
  // StatusBar_Set_FontResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StatusBar_Get_FontRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarInstance - The id of the StatusBar object.
  //
  // StatusBar_Get_FontResponse - The response message from the server. It provides the return value.
  //    - returnValue: IFontDispInstance - Specifies the font for the control when the value of the StatusBar.FontSource property is FontSource_UseFontProperty. 
  //
  rpc Set_Font(StatusBar_Set_FontRequest) returns (StatusBar_Set_FontResponse);
  rpc Get_Font(StatusBar_Get_FontRequest) returns (StatusBar_Get_FontResponse);
  
  
  // Property: AutoSize
  //
  // Specifies whether the control places the status bar on the bottom of the parent window, auto-sizes the height of the status bar, and adjusts to match the width of the parent window at run time.
  //
  // Note: This property has no effect when you edit a form at design time in any development environment.
  //
  // StatusBar_Set_AutoSizeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarInstance - The id of the StatusBar object.
  //    - val: bool - Specifies whether the control places the status bar on the bottom of the parent window, auto-sizes the height of the status bar, and adjusts to match the width of the parent window at run time. 
  //
  // StatusBar_Set_AutoSizeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StatusBar_Get_AutoSizeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarInstance - The id of the StatusBar object.
  //
  // StatusBar_Get_AutoSizeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the control places the status bar on the bottom of the parent window, auto-sizes the height of the status bar, and adjusts to match the width of the parent window at run time. 
  //
  rpc Set_AutoSize(StatusBar_Set_AutoSizeRequest) returns (StatusBar_Set_AutoSizeResponse);
  rpc Get_AutoSize(StatusBar_Get_AutoSizeRequest) returns (StatusBar_Get_AutoSizeResponse);
  
  
  // Property: ShowTopDivider
  //
  // Specifies whether the StatusBar control displays a horizontal line as the top border.
  //
  // When the application supports themes using Microsoft Windows XP, this property has no visual effect.
  //
  // StatusBar_Set_ShowTopDividerRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarInstance - The id of the StatusBar object.
  //    - val: bool - Specifies whether the StatusBar control displays a horizontal line as the top border. 
  //
  // StatusBar_Set_ShowTopDividerResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StatusBar_Get_ShowTopDividerRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarInstance - The id of the StatusBar object.
  //
  // StatusBar_Get_ShowTopDividerResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the StatusBar control displays a horizontal line as the top border. 
  //
  rpc Set_ShowTopDivider(StatusBar_Set_ShowTopDividerRequest) returns (StatusBar_Set_ShowTopDividerResponse);
  rpc Get_ShowTopDivider(StatusBar_Get_ShowTopDividerRequest) returns (StatusBar_Get_ShowTopDividerResponse);
  
  
  // Property: hWnd
  //
  // Returns the Window handle of the StatusBar control.
  //
  // You can use the returned Window handle with the Microsoft Windows API functions.
  // Note: Using Windows API functions with this property can cause undefined behavior.
  //
  // StatusBar_Get_hWndRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarInstance - The id of the StatusBar object.
  //
  // StatusBar_Get_hWndResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the Window handle of the StatusBar control. 
  //
  rpc Get_hWnd(StatusBar_Get_hWndRequest) returns (StatusBar_Get_hWndResponse);
  
  
  // Property: ShowResizingGrip
  //
  // Specifies to enable the resizing grip on the bottom right corner of the control.
  //
  // Note: Enable this property only when the window on which you place the StatusBar control is resizable and when the StatusBar.AutoSize property is True.
  //
  // StatusBar_Set_ShowResizingGripRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarInstance - The id of the StatusBar object.
  //    - val: bool - Specifies to enable the resizing grip on the bottom right corner of the control. 
  //
  // StatusBar_Set_ShowResizingGripResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StatusBar_Get_ShowResizingGripRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarInstance - The id of the StatusBar object.
  //
  // StatusBar_Get_ShowResizingGripResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies to enable the resizing grip on the bottom right corner of the control. 
  //
  rpc Set_ShowResizingGrip(StatusBar_Set_ShowResizingGripRequest) returns (StatusBar_Set_ShowResizingGripResponse);
  rpc Get_ShowResizingGrip(StatusBar_Get_ShowResizingGripRequest) returns (StatusBar_Get_ShowResizingGripResponse);
  
  
  // Property: IconSize
  //
  // Specifies the size of the icons in the control.
  //
  // Icons are always square. For example, when you specify an icon size of 32, the dimensions of the icons in the status bar are 32 × 32 pixels.
  //
  // StatusBar_Set_IconSizeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarInstance - The id of the StatusBar object.
  //    - val: int32 - Specifies the size of the icons in the control. 
  //
  // StatusBar_Set_IconSizeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StatusBar_Get_IconSizeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarInstance - The id of the StatusBar object.
  //
  // StatusBar_Get_IconSizeResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the size of the icons in the control. 
  //
  rpc Set_IconSize(StatusBar_Set_IconSizeRequest) returns (StatusBar_Set_IconSizeResponse);
  rpc Get_IconSize(StatusBar_Get_IconSizeRequest) returns (StatusBar_Get_IconSizeResponse);
  
  
  // Property: FontSource
  //
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  //
  // When the value of this property is FontSource_UseFontProperty, the corresponding Font property specifies the particular font the control uses. Otherwise, the control uses the font from the source this property specifies.
  // Set this property to a value other than FontSource_UseFontProperty if you expect the font the StatusBar.Font property specifies to not be present on a computer at run time. For example, a font present on an English version of the Microsoft Windows operating system might not be present on a Japanese version of the Windows operating system.
  //
  // StatusBar_Set_FontSourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarInstance - The id of the StatusBar object.
  //    - val: FontSources - Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont. 
  //
  // StatusBar_Set_FontSourceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StatusBar_Get_FontSourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarInstance - The id of the StatusBar object.
  //
  // StatusBar_Get_FontSourceResponse - The response message from the server. It provides the return value.
  //    - returnValue: FontSources - Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont. 
  //
  rpc Set_FontSource(StatusBar_Set_FontSourceRequest) returns (StatusBar_Set_FontSourceResponse);
  rpc Get_FontSource(StatusBar_Get_FontSourceRequest) returns (StatusBar_Get_FontSourceResponse);
  
  
  // Property: ScaleWithDPI
  //
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  //
  // Some environments scale native controls based on the DPI settings of their display, while other environments do not. The TestStand User Interface Controls are designed to work in all environments.
  // The following are the recommended settings for various platforms:    * LabVIEW, LabWindows/CVI, C#, and Microsoft Visual Basic .NET—Set this property to False.    * Active Template Library (ATL)/Microsoft Foundation Class (MFC)—Set this property to True.
  //
  // StatusBar_Set_ScaleWithDPIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarInstance - The id of the StatusBar object.
  //    - val: bool - Specifies how the control scales based on the dots per inch (DPI) setting. 
  //
  // StatusBar_Set_ScaleWithDPIResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // StatusBar_Get_ScaleWithDPIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: StatusBarInstance - The id of the StatusBar object.
  //
  // StatusBar_Get_ScaleWithDPIResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies how the control scales based on the dots per inch (DPI) setting. 
  //
  rpc Set_ScaleWithDPI(StatusBar_Set_ScaleWithDPIRequest) returns (StatusBar_Set_ScaleWithDPIResponse);
  rpc Get_ScaleWithDPI(StatusBar_Get_ScaleWithDPIRequest) returns (StatusBar_Get_ScaleWithDPIResponse);
  
  

  // Event: MouseDown
  //
  // Occurs when the user clicks the mouse on the control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_MouseDown - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_MouseDown - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // StatusBar_GetEvents_MouseDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: StatusBarInstance - The id of the StatusBar object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // StatusBar_GetEvents_MouseDownResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - btn: int32 - Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //  - x: int32 - Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs..
  //  - y: int32 - Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //
  // StatusBar_ReplyToEvent_MouseDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // StatusBar_ReplyToEvent_MouseDownResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_MouseDown(StatusBar_GetEvents_MouseDownRequest) returns (stream StatusBar_GetEvents_MouseDownResponse);
  rpc ReplyToEvent_MouseDown(StatusBar_ReplyToEvent_MouseDownRequest) returns (StatusBar_ReplyToEvent_MouseDownResponse); 
  
  
  // Event: MouseMove
  //
  // Occurs when the user moves the mouse over the control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_MouseMove - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_MouseMove - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // StatusBar_GetEvents_MouseMoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: StatusBarInstance - The id of the StatusBar object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // StatusBar_GetEvents_MouseMoveResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - btn: int32 - Specifies what mouse buttons are pressed. You can use any combination of the MouseButtons constants.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //  - x: int32 - Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //  - y: int32 - Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //
  // StatusBar_ReplyToEvent_MouseMoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // StatusBar_ReplyToEvent_MouseMoveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_MouseMove(StatusBar_GetEvents_MouseMoveRequest) returns (stream StatusBar_GetEvents_MouseMoveResponse);
  rpc ReplyToEvent_MouseMove(StatusBar_ReplyToEvent_MouseMoveRequest) returns (StatusBar_ReplyToEvent_MouseMoveResponse); 
  
  
  // Event: MouseUp
  //
  // Occurs when the user clicks the mouse on the control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_MouseUp - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_MouseUp - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // StatusBar_GetEvents_MouseUpRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: StatusBarInstance - The id of the StatusBar object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // StatusBar_GetEvents_MouseUpResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - btn: int32 - Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //  - x: int32 - Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //  - y: int32 - Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //
  // StatusBar_ReplyToEvent_MouseUpRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // StatusBar_ReplyToEvent_MouseUpResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_MouseUp(StatusBar_GetEvents_MouseUpRequest) returns (stream StatusBar_GetEvents_MouseUpResponse);
  rpc ReplyToEvent_MouseUp(StatusBar_ReplyToEvent_MouseUpRequest) returns (StatusBar_ReplyToEvent_MouseUpResponse); 
  
  
  // Event: DblClick
  //
  // Occurs when the user double-clicks the mouse over the control.
  //
  // Use the StatusBar.HitTest event to determine whether the user double-clicked the mouse on a pane.
  //
  // The event has a registration method and a reply method.
  // GetEvents_DblClick - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_DblClick - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // StatusBar_GetEvents_DblClickRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: StatusBarInstance - The id of the StatusBar object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // StatusBar_GetEvents_DblClickResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // StatusBar_ReplyToEvent_DblClickRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // StatusBar_ReplyToEvent_DblClickResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_DblClick(StatusBar_GetEvents_DblClickRequest) returns (stream StatusBar_GetEvents_DblClickResponse);
  rpc ReplyToEvent_DblClick(StatusBar_ReplyToEvent_DblClickRequest) returns (StatusBar_ReplyToEvent_DblClickResponse); 
  
  
  // Event: Resized
  //
  // Occurs when a status bar is resized. This occurs only when you set the StatusBar.AutoSize property to True and resize the parent window.
  //
  // The event has a registration method and a reply method.
  // GetEvents_Resized - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_Resized - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // StatusBar_GetEvents_ResizedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: StatusBarInstance - The id of the StatusBar object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // StatusBar_GetEvents_ResizedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - newWidth: int32 - Specifies the new width of the status bar, in pixels.
  //  - newHeight: int32 - Specifies the new height of the status bar, in pixels.
  //
  // StatusBar_ReplyToEvent_ResizedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // StatusBar_ReplyToEvent_ResizedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_Resized(StatusBar_GetEvents_ResizedRequest) returns (stream StatusBar_GetEvents_ResizedResponse);
  rpc ReplyToEvent_Resized(StatusBar_ReplyToEvent_ResizedRequest) returns (StatusBar_ReplyToEvent_ResizedResponse); 
  
  
  // Event: ConnectionActivity
  //
  // Occurs after the connection to a manager control makes a change to a user interface control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_ConnectionActivity - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_ConnectionActivity - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // StatusBar_GetEvents_ConnectionActivityRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: StatusBarInstance - The id of the StatusBar object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // StatusBar_GetEvents_ConnectionActivityResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - activity: ConnectionActivityTypes - Specifies the type of change.
  //
  // StatusBar_ReplyToEvent_ConnectionActivityRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // StatusBar_ReplyToEvent_ConnectionActivityResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_ConnectionActivity(StatusBar_GetEvents_ConnectionActivityRequest) returns (stream StatusBar_GetEvents_ConnectionActivityResponse);
  rpc ReplyToEvent_ConnectionActivity(StatusBar_ReplyToEvent_ConnectionActivityRequest) returns (StatusBar_ReplyToEvent_ConnectionActivityResponse); 
  
  
}
message StatusBarInstance {
  // Specifies the handle of the StatusBar instance in the server.
  string id = 1;
}
message StatusBar_StatusBarRequest {
}

message StatusBar_StatusBarResponse {
  // The return type of the StatusBar object.
  StatusBarInstance returnValue = 1;
}

message StatusBar_LocalizeRequest {
  // The id of the StatusBar object.
  StatusBarInstance instance = 1;
  // Specifies the name of the section in the language files that contains the localized text.
  string sectionName = 2;
}

message StatusBar_LocalizeResponse {
}

message StatusBar_HitTestRequest {
  // The id of the StatusBar object.
  StatusBarInstance instance = 1;
  // Specifies the x-coordinate of the location to test, in pixels, relative to the control.
  int32 x = 2;
  // Specifies the y-coordinate of the location to test, in pixels, relative to the control.
  int32 y = 3;
}

message StatusBar_HitTestResponse {
  // Returns a zero-based item index. You can use this value to retrieve a StatusBarPane object from the StatusBarPanes collection. This method returns -1 when the location is not on a pane.
  int32 returnValue = 1;
}

message StatusBar_ShowPanesRequest {
  // The id of the StatusBar object.
  StatusBarInstance instance = 1;
  // Specifies a comma-separated list of pane names. For example, "pane1, pane2, pane3".
  string panesList = 2;
}

message StatusBar_ShowPanesResponse {
}

message StatusBar_Get_PanesRequest {
  // The id of the StatusBar object.
  StatusBarInstance instance = 1;
}

message StatusBar_Get_PanesResponse {
  // Returns the StatusBarPanes collection.
  StatusBarPanesInstance returnValue = 1;
}

message StatusBar_Set_FontRequest {
  // The id of the StatusBar object.
  StatusBarInstance instance = 1;
  // Specifies the font for the control when the value of the StatusBar.FontSource property is FontSource_UseFontProperty.
  IFontDispInstance val = 2;
}

message StatusBar_Set_FontResponse {
}

message StatusBar_Get_FontRequest {
  // The id of the StatusBar object.
  StatusBarInstance instance = 1;
}

message StatusBar_Get_FontResponse {
  // Specifies the font for the control when the value of the StatusBar.FontSource property is FontSource_UseFontProperty.
  IFontDispInstance returnValue = 1;
}

message StatusBar_Set_AutoSizeRequest {
  // The id of the StatusBar object.
  StatusBarInstance instance = 1;
  // Specifies whether the control places the status bar on the bottom of the parent window, auto-sizes the height of the status bar, and adjusts to match the width of the parent window at run time.
  bool val = 2;
}

message StatusBar_Set_AutoSizeResponse {
}

message StatusBar_Get_AutoSizeRequest {
  // The id of the StatusBar object.
  StatusBarInstance instance = 1;
}

message StatusBar_Get_AutoSizeResponse {
  // Specifies whether the control places the status bar on the bottom of the parent window, auto-sizes the height of the status bar, and adjusts to match the width of the parent window at run time.
  bool returnValue = 1;
}

message StatusBar_Set_ShowTopDividerRequest {
  // The id of the StatusBar object.
  StatusBarInstance instance = 1;
  // Specifies whether the StatusBar control displays a horizontal line as the top border.
  bool val = 2;
}

message StatusBar_Set_ShowTopDividerResponse {
}

message StatusBar_Get_ShowTopDividerRequest {
  // The id of the StatusBar object.
  StatusBarInstance instance = 1;
}

message StatusBar_Get_ShowTopDividerResponse {
  // Specifies whether the StatusBar control displays a horizontal line as the top border.
  bool returnValue = 1;
}

message StatusBar_Get_hWndRequest {
  // The id of the StatusBar object.
  StatusBarInstance instance = 1;
}

message StatusBar_Get_hWndResponse {
  // Returns the Window handle of the StatusBar control.
  int32 returnValue = 1;
}

message StatusBar_Set_ShowResizingGripRequest {
  // The id of the StatusBar object.
  StatusBarInstance instance = 1;
  // Specifies to enable the resizing grip on the bottom right corner of the control.
  bool val = 2;
}

message StatusBar_Set_ShowResizingGripResponse {
}

message StatusBar_Get_ShowResizingGripRequest {
  // The id of the StatusBar object.
  StatusBarInstance instance = 1;
}

message StatusBar_Get_ShowResizingGripResponse {
  // Specifies to enable the resizing grip on the bottom right corner of the control.
  bool returnValue = 1;
}

message StatusBar_Set_IconSizeRequest {
  // The id of the StatusBar object.
  StatusBarInstance instance = 1;
  // Specifies the size of the icons in the control.
  int32 val = 2;
}

message StatusBar_Set_IconSizeResponse {
}

message StatusBar_Get_IconSizeRequest {
  // The id of the StatusBar object.
  StatusBarInstance instance = 1;
}

message StatusBar_Get_IconSizeResponse {
  // Specifies the size of the icons in the control.
  int32 returnValue = 1;
}

message StatusBar_Set_FontSourceRequest {
  // The id of the StatusBar object.
  StatusBarInstance instance = 1;
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  FontSources val = 2;
}

message StatusBar_Set_FontSourceResponse {
}

message StatusBar_Get_FontSourceRequest {
  // The id of the StatusBar object.
  StatusBarInstance instance = 1;
}

message StatusBar_Get_FontSourceResponse {
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  FontSources returnValue = 1;
}

message StatusBar_Set_ScaleWithDPIRequest {
  // The id of the StatusBar object.
  StatusBarInstance instance = 1;
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  bool val = 2;
}

message StatusBar_Set_ScaleWithDPIResponse {
}

message StatusBar_Get_ScaleWithDPIRequest {
  // The id of the StatusBar object.
  StatusBarInstance instance = 1;
}

message StatusBar_Get_ScaleWithDPIResponse {
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  bool returnValue = 1;
}

message StatusBar_GetEvents_MouseDownRequest {
  // The id of the StatusBar object.
  StatusBarInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message StatusBar_GetEvents_MouseDownResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  int32 btn = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
  // Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs..
  int32 x = 4;
  // Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 y = 5;
}

message StatusBar_ReplyToEvent_MouseDownRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message StatusBar_ReplyToEvent_MouseDownResponse {
}

message StatusBar_GetEvents_MouseMoveRequest {
  // The id of the StatusBar object.
  StatusBarInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message StatusBar_GetEvents_MouseMoveResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies what mouse buttons are pressed. You can use any combination of the MouseButtons constants.
  int32 btn = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
  // Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 x = 4;
  // Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 y = 5;
}

message StatusBar_ReplyToEvent_MouseMoveRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message StatusBar_ReplyToEvent_MouseMoveResponse {
}

message StatusBar_GetEvents_MouseUpRequest {
  // The id of the StatusBar object.
  StatusBarInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message StatusBar_GetEvents_MouseUpResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  int32 btn = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
  // Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 x = 4;
  // Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 y = 5;
}

message StatusBar_ReplyToEvent_MouseUpRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message StatusBar_ReplyToEvent_MouseUpResponse {
}

message StatusBar_GetEvents_DblClickRequest {
  // The id of the StatusBar object.
  StatusBarInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message StatusBar_GetEvents_DblClickResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message StatusBar_ReplyToEvent_DblClickRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message StatusBar_ReplyToEvent_DblClickResponse {
}

message StatusBar_GetEvents_ResizedRequest {
  // The id of the StatusBar object.
  StatusBarInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message StatusBar_GetEvents_ResizedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the new width of the status bar, in pixels.
  int32 newWidth = 2;
  // Specifies the new height of the status bar, in pixels.
  int32 newHeight = 3;
}

message StatusBar_ReplyToEvent_ResizedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message StatusBar_ReplyToEvent_ResizedResponse {
}

message StatusBar_GetEvents_ConnectionActivityRequest {
  // The id of the StatusBar object.
  StatusBarInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message StatusBar_GetEvents_ConnectionActivityResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the type of change.
  ConnectionActivityTypes activity = 2;
}

message StatusBar_ReplyToEvent_ConnectionActivityRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message StatusBar_ReplyToEvent_ConnectionActivityResponse {
}

// Label
//
// Connect a manager control to a Label control to display text information about the application state in the label, such as the name of the current user or the status of the current unit under test.
//
service Label {
  // Service: Label
  //
  // Creates a new Label instance
  //
  // LabelRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //
  // LabelResponse - The response message from the server. It provides the return value.
  //    - returnValue: LabelInstance - The return type of the Label object.
  //
  rpc Label(Label_LabelRequest) returns (Label_LabelResponse);

  // Method: Localize
  //
  // Localizes the text caption.
  //
  // First, update a .ini file located in the TestStand Language directory with the required string. Second, use the string tag in the .ini file as the caption for the control.
  // When you call this method, the control replaces the caption with the string from the .ini file. If the caption is not a tag in the .ini file, the caption does not change.
  // Note: When you connect this control to a manager control, the manager control automatically sets a localized caption.
  //
  // Label_LocalizeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: LabelInstance - The id of the Label object.
  //    - sectionName: string - Specifies the name of the section in the language files that contains the localized text.
  //
  // Label_LocalizeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Localize(Label_LocalizeRequest) returns (Label_LocalizeResponse);
  
  

  // Property: Enabled
  //
  // When this property is False, the caption text dims.
  //
  // Label_Set_EnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //    - val: bool - When this property is False, the caption text dims. 
  //
  // Label_Set_EnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Label_Get_EnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //
  // Label_Get_EnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When this property is False, the caption text dims. 
  //
  rpc Set_Enabled(Label_Set_EnabledRequest) returns (Label_Set_EnabledResponse);
  rpc Get_Enabled(Label_Get_EnabledRequest) returns (Label_Get_EnabledResponse);
  
  
  // Property: MousePointer
  //
  // Specifies the appearance of the mouse cursor when the cursor is over the control.
  //
  // When the parameter is MousePointer_Custom, the mouse cursor is the picture the Label.MouseIcon property specifies.
  //
  // Label_Set_MousePointerRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //    - val: MousePointerStyles - Specifies the appearance of the mouse cursor when the cursor is over the control. 
  //
  // Label_Set_MousePointerResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Label_Get_MousePointerRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //
  // Label_Get_MousePointerResponse - The response message from the server. It provides the return value.
  //    - returnValue: MousePointerStyles - Specifies the appearance of the mouse cursor when the cursor is over the control. 
  //
  rpc Set_MousePointer(Label_Set_MousePointerRequest) returns (Label_Set_MousePointerResponse);
  rpc Get_MousePointer(Label_Get_MousePointerRequest) returns (Label_Get_MousePointerResponse);
  
  
  // Property: MouseIcon
  //
  // Specifies a custom mouse icon for the control.
  //
  // The control displays the specified picture as the cursor when the value of the Label.MousePointer property is MousePointer_Custom. When you set this property to NULL, the value of the Label.MousePointer property changes to MousePointer_Default.
  // Note: Icons are the only types of pictures supported.
  //
  // Label_Set_MouseIconRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //    - val: IPictureDispInstance - Specifies a custom mouse icon for the control. 
  //
  // Label_Set_MouseIconResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Label_Get_MouseIconRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //
  // Label_Get_MouseIconResponse - The response message from the server. It provides the return value.
  //    - returnValue: IPictureDispInstance - Specifies a custom mouse icon for the control. 
  //
  rpc Set_MouseIcon(Label_Set_MouseIconRequest) returns (Label_Set_MouseIconResponse);
  rpc Get_MouseIcon(Label_Get_MouseIconRequest) returns (Label_Get_MouseIconResponse);
  
  
  // Property: Font
  //
  // Specifies the font for the control when the value of the Label.FontSource property is FontSource_UseFontProperty.
  //
  // Label_Set_FontRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //    - val: IFontDispInstance - Specifies the font for the control when the value of the Label.FontSource property is FontSource_UseFontProperty. 
  //
  // Label_Set_FontResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Label_Get_FontRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //
  // Label_Get_FontResponse - The response message from the server. It provides the return value.
  //    - returnValue: IFontDispInstance - Specifies the font for the control when the value of the Label.FontSource property is FontSource_UseFontProperty. 
  //
  rpc Set_Font(Label_Set_FontRequest) returns (Label_Set_FontResponse);
  rpc Get_Font(Label_Get_FontRequest) returns (Label_Get_FontResponse);
  
  
  // Property: BackColor
  //
  // Specifies the background color for the control.
  //
  // Label_Set_BackColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //    - val: uint32 - Specifies the background color for the control. 
  //
  // Label_Set_BackColorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Label_Get_BackColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //
  // Label_Get_BackColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Specifies the background color for the control. 
  //
  rpc Set_BackColor(Label_Set_BackColorRequest) returns (Label_Set_BackColorResponse);
  rpc Get_BackColor(Label_Get_BackColorRequest) returns (Label_Get_BackColorResponse);
  
  
  // Property: ForeColor
  //
  // Specifies the foreground color for the control.
  //
  // Label_Set_ForeColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //    - val: uint32 - Specifies the foreground color for the control. 
  //
  // Label_Set_ForeColorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Label_Get_ForeColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //
  // Label_Get_ForeColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Specifies the foreground color for the control. 
  //
  rpc Set_ForeColor(Label_Set_ForeColorRequest) returns (Label_Set_ForeColorResponse);
  rpc Get_ForeColor(Label_Get_ForeColorRequest) returns (Label_Get_ForeColorResponse);
  
  
  // Property: AutoSize
  //
  // The control automatically resizes to display all the content when this property is True. The direction in which the control resizes varies depending on the alignment of the text and the value of the Label.WordWrap property.
  //
  // Label_Set_AutoSizeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //    - val: bool - The control automatically resizes to display all the content when this property is True. The direction in which the control resizes varies depending on the alignment of the text and the value of the Label.WordWrap property. 
  //
  // Label_Set_AutoSizeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Label_Get_AutoSizeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //
  // Label_Get_AutoSizeResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The control automatically resizes to display all the content when this property is True. The direction in which the control resizes varies depending on the alignment of the text and the value of the Label.WordWrap property. 
  //
  rpc Set_AutoSize(Label_Set_AutoSizeRequest) returns (Label_Set_AutoSizeResponse);
  rpc Get_AutoSize(Label_Get_AutoSizeRequest) returns (Label_Get_AutoSizeResponse);
  
  
  // Property: WordWrap
  //
  // When this property is True, the Label can display multiple lines of text, and the Label breaks lines before a word that would extend past the right edge of the control. When this property is False, the Label always displays one line of text.
  //
  // When this property is True, the Label.AutoSize property causes the Label to expand vertically. When this property is False, the Label.AutoSize property causes the Label to expand horizontally.
  //
  // Label_Set_WordWrapRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //    - val: bool - When this property is True, the Label can display multiple lines of text, and the Label breaks lines before a word that would extend past the right edge of the control. When this property is False, the Label always displays one line of text. 
  //
  // Label_Set_WordWrapResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Label_Get_WordWrapRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //
  // Label_Get_WordWrapResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When this property is True, the Label can display multiple lines of text, and the Label breaks lines before a word that would extend past the right edge of the control. When this property is False, the Label always displays one line of text. 
  //
  rpc Set_WordWrap(Label_Set_WordWrapRequest) returns (Label_Set_WordWrapResponse);
  rpc Get_WordWrap(Label_Get_WordWrapRequest) returns (Label_Get_WordWrapResponse);
  
  
  // Property: UseMnemonic
  //
  // The label interprets the character that follows an ampersand (&) character in the Label.Caption property as an accelerator character when this property is True.
  //
  // Label_Set_UseMnemonicRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //    - val: bool - The label interprets the character that follows an ampersand (&) character in the Label.Caption property as an accelerator character when this property is True. 
  //
  // Label_Set_UseMnemonicResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Label_Get_UseMnemonicRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //
  // Label_Get_UseMnemonicResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The label interprets the character that follows an ampersand (&) character in the Label.Caption property as an accelerator character when this property is True. 
  //
  rpc Set_UseMnemonic(Label_Set_UseMnemonicRequest) returns (Label_Set_UseMnemonicResponse);
  rpc Get_UseMnemonic(Label_Get_UseMnemonicRequest) returns (Label_Get_UseMnemonicResponse);
  
  
  // Property: Caption
  //
  // Specifies the text the control displays.
  //
  // Use this property to assign an accelerator character to a control when the Label.UseMnemonic property is True. In the caption, include an ampersand (&) immediately before the character you want to designate as the accelerator character. The character is now underlined. Press <Alt> plus the underlined character to move the focus to the control.
  // To include an ampersand in a caption without creating an accelerator character, include two ampersands (&&). A single ampersand is visible in the caption and no characters are underlined.
  //
  // Label_Set_CaptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //    - val: string - Specifies the text the control displays. 
  //
  // Label_Set_CaptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Label_Get_CaptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //
  // Label_Get_CaptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the text the control displays. 
  //
  rpc Set_Caption(Label_Set_CaptionRequest) returns (Label_Set_CaptionResponse);
  rpc Get_Caption(Label_Get_CaptionRequest) returns (Label_Get_CaptionResponse);
  
  
  // Property: BorderStyle
  //
  // Specifies the border style for the control.
  //
  // Label_Set_BorderStyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //    - val: BorderStyles - Specifies the border style for the control. 
  //
  // Label_Set_BorderStyleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Label_Get_BorderStyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //
  // Label_Get_BorderStyleResponse - The response message from the server. It provides the return value.
  //    - returnValue: BorderStyles - Specifies the border style for the control. 
  //
  rpc Set_BorderStyle(Label_Set_BorderStyleRequest) returns (Label_Set_BorderStyleResponse);
  rpc Get_BorderStyle(Label_Get_BorderStyleRequest) returns (Label_Get_BorderStyleResponse);
  
  
  // Property: Alignment
  //
  // Specifies the alignment of the text in the control.
  //
  // Label_Set_AlignmentRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //    - val: AlignmentStyles - Specifies the alignment of the text in the control. 
  //
  // Label_Set_AlignmentResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Label_Get_AlignmentRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //
  // Label_Get_AlignmentResponse - The response message from the server. It provides the return value.
  //    - returnValue: AlignmentStyles - Specifies the alignment of the text in the control. 
  //
  rpc Set_Alignment(Label_Set_AlignmentRequest) returns (Label_Set_AlignmentResponse);
  rpc Get_Alignment(Label_Get_AlignmentRequest) returns (Label_Get_AlignmentResponse);
  
  
  // Property: FontSource
  //
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  //
  // When the value of this property is FontSource_UseFontProperty, the corresponding Font property specifies the particular font the control uses. Otherwise, the control uses the font from the source this property specifies. Refer to the FontSources enumeration for the list of valid font sources.
  // Set this property to a value other than FontSource_UseFontProperty when you expect the font the Label.Font property specifies to not be present on a computer at run time. For example, a font present on an English version of the Microsoft Windows operating system might not be present on a Japanese version of the Windows operating system.
  //
  // Label_Set_FontSourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //    - val: FontSources - Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont. 
  //
  // Label_Set_FontSourceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Label_Get_FontSourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //
  // Label_Get_FontSourceResponse - The response message from the server. It provides the return value.
  //    - returnValue: FontSources - Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont. 
  //
  rpc Set_FontSource(Label_Set_FontSourceRequest) returns (Label_Set_FontSourceResponse);
  rpc Get_FontSource(Label_Get_FontSourceRequest) returns (Label_Get_FontSourceResponse);
  
  
  // Property: ScaleWithDPI
  //
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  //
  // Some environments scale native controls based on the DPI settings of their display, while other environments do not. The TestStand User Interface Controls are designed to work in all environments.
  // The following are the recommended settings for various platforms:    * LabVIEW, LabWindows/CVI, C#, and Microsoft Visual Basic .NET—Set this property to False.    * Active Template Library (ATL)/Microsoft Foundation Class (MFC)—Set this property to True.
  //
  // Label_Set_ScaleWithDPIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //    - val: bool - Specifies how the control scales based on the dots per inch (DPI) setting. 
  //
  // Label_Set_ScaleWithDPIResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // Label_Get_ScaleWithDPIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: LabelInstance - The id of the Label object.
  //
  // Label_Get_ScaleWithDPIResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies how the control scales based on the dots per inch (DPI) setting. 
  //
  rpc Set_ScaleWithDPI(Label_Set_ScaleWithDPIRequest) returns (Label_Set_ScaleWithDPIResponse);
  rpc Get_ScaleWithDPI(Label_Get_ScaleWithDPIRequest) returns (Label_Get_ScaleWithDPIResponse);
  
  

  // Event: Click
  //
  // Occurs when you press and release the mouse on the control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_Click - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_Click - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // Label_GetEvents_ClickRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: LabelInstance - The id of the Label object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // Label_GetEvents_ClickResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // Label_ReplyToEvent_ClickRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // Label_ReplyToEvent_ClickResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_Click(Label_GetEvents_ClickRequest) returns (stream Label_GetEvents_ClickResponse);
  rpc ReplyToEvent_Click(Label_ReplyToEvent_ClickRequest) returns (Label_ReplyToEvent_ClickResponse); 
  
  
  // Event: MouseDown
  //
  // Occurs when the user clicks the mouse on the control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_MouseDown - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_MouseDown - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // Label_GetEvents_MouseDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: LabelInstance - The id of the Label object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // Label_GetEvents_MouseDownResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - btn: int32 - Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //  - x: int32 - Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //  - y: int32 - Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //
  // Label_ReplyToEvent_MouseDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // Label_ReplyToEvent_MouseDownResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_MouseDown(Label_GetEvents_MouseDownRequest) returns (stream Label_GetEvents_MouseDownResponse);
  rpc ReplyToEvent_MouseDown(Label_ReplyToEvent_MouseDownRequest) returns (Label_ReplyToEvent_MouseDownResponse); 
  
  
  // Event: MouseMove
  //
  // Occurs when the user moves the mouse over the control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_MouseMove - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_MouseMove - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // Label_GetEvents_MouseMoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: LabelInstance - The id of the Label object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // Label_GetEvents_MouseMoveResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - btn: int32 - Specifies what mouse buttons are pressed. You can use any combination of the MouseButtons constants.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //  - x: int32 - Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //  - y: int32 - Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //
  // Label_ReplyToEvent_MouseMoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // Label_ReplyToEvent_MouseMoveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_MouseMove(Label_GetEvents_MouseMoveRequest) returns (stream Label_GetEvents_MouseMoveResponse);
  rpc ReplyToEvent_MouseMove(Label_ReplyToEvent_MouseMoveRequest) returns (Label_ReplyToEvent_MouseMoveResponse); 
  
  
  // Event: MouseUp
  //
  // Occurs when the user releases the mouse on the control. This event occurs before the Label.Click event.
  //
  // The event has a registration method and a reply method.
  // GetEvents_MouseUp - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_MouseUp - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // Label_GetEvents_MouseUpRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: LabelInstance - The id of the Label object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // Label_GetEvents_MouseUpResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - btn: int32 - Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //  - x: int32 - Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //  - y: int32 - Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //
  // Label_ReplyToEvent_MouseUpRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // Label_ReplyToEvent_MouseUpResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_MouseUp(Label_GetEvents_MouseUpRequest) returns (stream Label_GetEvents_MouseUpResponse);
  rpc ReplyToEvent_MouseUp(Label_ReplyToEvent_MouseUpRequest) returns (Label_ReplyToEvent_MouseUpResponse); 
  
  
  // Event: Change
  //
  // Occurs when you change the contents of the control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_Change - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_Change - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // Label_GetEvents_ChangeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: LabelInstance - The id of the Label object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // Label_GetEvents_ChangeResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // Label_ReplyToEvent_ChangeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // Label_ReplyToEvent_ChangeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_Change(Label_GetEvents_ChangeRequest) returns (stream Label_GetEvents_ChangeResponse);
  rpc ReplyToEvent_Change(Label_ReplyToEvent_ChangeRequest) returns (Label_ReplyToEvent_ChangeResponse); 
  
  
  // Event: ConnectionActivity
  //
  // Occurs after the connection to a manager control makes a change to a user interface control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_ConnectionActivity - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_ConnectionActivity - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // Label_GetEvents_ConnectionActivityRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: LabelInstance - The id of the Label object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // Label_GetEvents_ConnectionActivityResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - activity: ConnectionActivityTypes - Specifies the type of change.
  //
  // Label_ReplyToEvent_ConnectionActivityRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // Label_ReplyToEvent_ConnectionActivityResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_ConnectionActivity(Label_GetEvents_ConnectionActivityRequest) returns (stream Label_GetEvents_ConnectionActivityResponse);
  rpc ReplyToEvent_ConnectionActivity(Label_ReplyToEvent_ConnectionActivityRequest) returns (Label_ReplyToEvent_ConnectionActivityResponse); 
  
  
}
message LabelInstance {
  // Specifies the handle of the Label instance in the server.
  string id = 1;
}
message Label_LabelRequest {
}

message Label_LabelResponse {
  // The return type of the Label object.
  LabelInstance returnValue = 1;
}

message Label_LocalizeRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
  // Specifies the name of the section in the language files that contains the localized text.
  string sectionName = 2;
}

message Label_LocalizeResponse {
}

message Label_Set_EnabledRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
  // When this property is False, the caption text dims.
  bool val = 2;
}

message Label_Set_EnabledResponse {
}

message Label_Get_EnabledRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
}

message Label_Get_EnabledResponse {
  // When this property is False, the caption text dims.
  bool returnValue = 1;
}

message Label_Set_MousePointerRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
  // Specifies the appearance of the mouse cursor when the cursor is over the control.
  MousePointerStyles val = 2;
}

message Label_Set_MousePointerResponse {
}

message Label_Get_MousePointerRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
}

message Label_Get_MousePointerResponse {
  // Specifies the appearance of the mouse cursor when the cursor is over the control.
  MousePointerStyles returnValue = 1;
}

message Label_Set_MouseIconRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
  // Specifies a custom mouse icon for the control.
  IPictureDispInstance val = 2;
}

message Label_Set_MouseIconResponse {
}

message Label_Get_MouseIconRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
}

message Label_Get_MouseIconResponse {
  // Specifies a custom mouse icon for the control.
  IPictureDispInstance returnValue = 1;
}

message Label_Set_FontRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
  // Specifies the font for the control when the value of the Label.FontSource property is FontSource_UseFontProperty.
  IFontDispInstance val = 2;
}

message Label_Set_FontResponse {
}

message Label_Get_FontRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
}

message Label_Get_FontResponse {
  // Specifies the font for the control when the value of the Label.FontSource property is FontSource_UseFontProperty.
  IFontDispInstance returnValue = 1;
}

message Label_Set_BackColorRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
  // Specifies the background color for the control.
  uint32 val = 2;
}

message Label_Set_BackColorResponse {
}

message Label_Get_BackColorRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
}

message Label_Get_BackColorResponse {
  // Specifies the background color for the control.
  uint32 returnValue = 1;
}

message Label_Set_ForeColorRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
  // Specifies the foreground color for the control.
  uint32 val = 2;
}

message Label_Set_ForeColorResponse {
}

message Label_Get_ForeColorRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
}

message Label_Get_ForeColorResponse {
  // Specifies the foreground color for the control.
  uint32 returnValue = 1;
}

message Label_Set_AutoSizeRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
  // The control automatically resizes to display all the content when this property is True. The direction in which the control resizes varies depending on the alignment of the text and the value of the Label.WordWrap property.
  bool val = 2;
}

message Label_Set_AutoSizeResponse {
}

message Label_Get_AutoSizeRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
}

message Label_Get_AutoSizeResponse {
  // The control automatically resizes to display all the content when this property is True. The direction in which the control resizes varies depending on the alignment of the text and the value of the Label.WordWrap property.
  bool returnValue = 1;
}

message Label_Set_WordWrapRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
  // When this property is True, the Label can display multiple lines of text, and the Label breaks lines before a word that would extend past the right edge of the control. When this property is False, the Label always displays one line of text.
  bool val = 2;
}

message Label_Set_WordWrapResponse {
}

message Label_Get_WordWrapRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
}

message Label_Get_WordWrapResponse {
  // When this property is True, the Label can display multiple lines of text, and the Label breaks lines before a word that would extend past the right edge of the control. When this property is False, the Label always displays one line of text.
  bool returnValue = 1;
}

message Label_Set_UseMnemonicRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
  // The label interprets the character that follows an ampersand (&) character in the Label.Caption property as an accelerator character when this property is True.
  bool val = 2;
}

message Label_Set_UseMnemonicResponse {
}

message Label_Get_UseMnemonicRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
}

message Label_Get_UseMnemonicResponse {
  // The label interprets the character that follows an ampersand (&) character in the Label.Caption property as an accelerator character when this property is True.
  bool returnValue = 1;
}

message Label_Set_CaptionRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
  // Specifies the text the control displays.
  string val = 2;
}

message Label_Set_CaptionResponse {
}

message Label_Get_CaptionRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
}

message Label_Get_CaptionResponse {
  // Specifies the text the control displays.
  string returnValue = 1;
}

message Label_Set_BorderStyleRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
  // Specifies the border style for the control.
  BorderStyles val = 2;
}

message Label_Set_BorderStyleResponse {
}

message Label_Get_BorderStyleRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
}

message Label_Get_BorderStyleResponse {
  // Specifies the border style for the control.
  BorderStyles returnValue = 1;
}

message Label_Set_AlignmentRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
  // Specifies the alignment of the text in the control.
  AlignmentStyles val = 2;
}

message Label_Set_AlignmentResponse {
}

message Label_Get_AlignmentRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
}

message Label_Get_AlignmentResponse {
  // Specifies the alignment of the text in the control.
  AlignmentStyles returnValue = 1;
}

message Label_Set_FontSourceRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  FontSources val = 2;
}

message Label_Set_FontSourceResponse {
}

message Label_Get_FontSourceRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
}

message Label_Get_FontSourceResponse {
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  FontSources returnValue = 1;
}

message Label_Set_ScaleWithDPIRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  bool val = 2;
}

message Label_Set_ScaleWithDPIResponse {
}

message Label_Get_ScaleWithDPIRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
}

message Label_Get_ScaleWithDPIResponse {
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  bool returnValue = 1;
}

message Label_GetEvents_ClickRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message Label_GetEvents_ClickResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message Label_ReplyToEvent_ClickRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message Label_ReplyToEvent_ClickResponse {
}

message Label_GetEvents_MouseDownRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message Label_GetEvents_MouseDownResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  int32 btn = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
  // Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 x = 4;
  // Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 y = 5;
}

message Label_ReplyToEvent_MouseDownRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message Label_ReplyToEvent_MouseDownResponse {
}

message Label_GetEvents_MouseMoveRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message Label_GetEvents_MouseMoveResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies what mouse buttons are pressed. You can use any combination of the MouseButtons constants.
  int32 btn = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
  // Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 x = 4;
  // Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 y = 5;
}

message Label_ReplyToEvent_MouseMoveRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message Label_ReplyToEvent_MouseMoveResponse {
}

message Label_GetEvents_MouseUpRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message Label_GetEvents_MouseUpResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  int32 btn = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
  // Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 x = 4;
  // Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 y = 5;
}

message Label_ReplyToEvent_MouseUpRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message Label_ReplyToEvent_MouseUpResponse {
}

message Label_GetEvents_ChangeRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message Label_GetEvents_ChangeResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message Label_ReplyToEvent_ChangeRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message Label_ReplyToEvent_ChangeResponse {
}

message Label_GetEvents_ConnectionActivityRequest {
  // The id of the Label object.
  LabelInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message Label_GetEvents_ConnectionActivityResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the type of change.
  ConnectionActivityTypes activity = 2;
}

message Label_ReplyToEvent_ConnectionActivityRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message Label_ReplyToEvent_ConnectionActivityResponse {
}

// ComboBox
//
// Connect a SequenceFileView Manager or ExecutionView Manager control to a ComboBox control so users can view or select from a list of sequence files, sequences, step groups, steps, executions, threads, or stack frames. Connect an Application Manager control to a ComboBox control so users can view or select the default adapter of the TestStand Engine.
// Use the ComboBox control to connect to and display the ExecutionViewMgrConnections.ExecutionList, ExecutionViewMgrConnections.CallStack, and ExecutionViewMgrConnections.ThreadList properties in the ExecutionView Manager control and the SequenceFileViewMgrConnections.SequenceList, SequenceFileViewMgrConnections.SequenceFileList, and SequenceFileViewMgrConnections.StepGroupList properties in the SequenceFileView Manager control.
// Selecting an item in the ComboBox control updates the application based on the type of data the connection specifies.
// Note: The ComboBox control does not allow you to populate the items in the drop-down list without connecting to a list connection. The items in the drop-down list are obtained from the connection to a manager control.
//
service ComboBox {
  // Service: ComboBox
  //
  // Creates a new ComboBox instance
  //
  // ComboBoxRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //
  // ComboBoxResponse - The response message from the server. It provides the return value.
  //    - returnValue: ComboBoxInstance - The return type of the ComboBox object.
  //
  rpc ComboBox(ComboBox_ComboBoxRequest) returns (ComboBox_ComboBoxResponse);

  // Method: GetItemText
  //
  // Returns the text of the item at a specified index.
  //
  // ComboBox_GetItemTextRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //    - itemIdx: int32 - Specifies the zero-based index of the item to retrieve. Pass -1 to obtain the text of the currently selected item.
  //
  // ComboBox_GetItemTextResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetItemText(ComboBox_GetItemTextRequest) returns (ComboBox_GetItemTextResponse);
  
  

  // Property: Enabled
  //
  // The control responds to user input only when this property is True.
  //
  // ComboBox_Set_EnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //    - val: bool - The control responds to user input only when this property is True. 
  //
  // ComboBox_Set_EnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ComboBox_Get_EnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //
  // ComboBox_Get_EnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The control responds to user input only when this property is True. 
  //
  rpc Set_Enabled(ComboBox_Set_EnabledRequest) returns (ComboBox_Set_EnabledResponse);
  rpc Get_Enabled(ComboBox_Get_EnabledRequest) returns (ComboBox_Get_EnabledResponse);
  
  
  // Property: MousePointer
  //
  // Specifies the appearance of the mouse cursor when the cursor is over the control.
  //
  // When the parameter is MousePointer_Custom, the mouse cursor is the picture the ComboBox.MouseIcon property specifies.
  //
  // ComboBox_Set_MousePointerRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //    - val: MousePointerStyles - Specifies the appearance of the mouse cursor when the cursor is over the control. 
  //
  // ComboBox_Set_MousePointerResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ComboBox_Get_MousePointerRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //
  // ComboBox_Get_MousePointerResponse - The response message from the server. It provides the return value.
  //    - returnValue: MousePointerStyles - Specifies the appearance of the mouse cursor when the cursor is over the control. 
  //
  rpc Set_MousePointer(ComboBox_Set_MousePointerRequest) returns (ComboBox_Set_MousePointerResponse);
  rpc Get_MousePointer(ComboBox_Get_MousePointerRequest) returns (ComboBox_Get_MousePointerResponse);
  
  
  // Property: MouseIcon
  //
  // Specifies a custom mouse icon for the control.
  //
  // The control displays the specified picture as the cursor when the value of the ComboBox.MousePointer property is MousePointer_Custom. When you set this property to NULL, the value of the ComboBox.MousePointer property changes to MousePointer_Default.
  // Note: This property requires that the picture value is an icon.
  //
  // ComboBox_Set_MouseIconRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //    - val: IPictureDispInstance - Specifies a custom mouse icon for the control. 
  //
  // ComboBox_Set_MouseIconResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ComboBox_Get_MouseIconRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //
  // ComboBox_Get_MouseIconResponse - The response message from the server. It provides the return value.
  //    - returnValue: IPictureDispInstance - Specifies a custom mouse icon for the control. 
  //
  rpc Set_MouseIcon(ComboBox_Set_MouseIconRequest) returns (ComboBox_Set_MouseIconResponse);
  rpc Get_MouseIcon(ComboBox_Get_MouseIconRequest) returns (ComboBox_Get_MouseIconResponse);
  
  
  // Property: Font
  //
  // Specifies the font for the control when the value of the ComboBox.FontSource property is FontSource_UseFontProperty.
  //
  // ComboBox_Set_FontRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //    - val: IFontDispInstance - Specifies the font for the control when the value of the ComboBox.FontSource property is FontSource_UseFontProperty. 
  //
  // ComboBox_Set_FontResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ComboBox_Get_FontRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //
  // ComboBox_Get_FontResponse - The response message from the server. It provides the return value.
  //    - returnValue: IFontDispInstance - Specifies the font for the control when the value of the ComboBox.FontSource property is FontSource_UseFontProperty. 
  //
  rpc Set_Font(ComboBox_Set_FontRequest) returns (ComboBox_Set_FontResponse);
  rpc Get_Font(ComboBox_Get_FontRequest) returns (ComboBox_Get_FontResponse);
  
  
  // Property: ItemIndex
  //
  // Specifies the zero-based index of the currently selected item in the control.
  //
  // A value of -1 indicates no item is currently selected, or the user entered a new value not in the list.
  //
  // ComboBox_Set_ItemIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //    - val: int32 - Specifies the zero-based index of the currently selected item in the control. 
  //
  // ComboBox_Set_ItemIndexResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ComboBox_Get_ItemIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //
  // ComboBox_Get_ItemIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the zero-based index of the currently selected item in the control. 
  //
  rpc Set_ItemIndex(ComboBox_Set_ItemIndexRequest) returns (ComboBox_Set_ItemIndexResponse);
  rpc Get_ItemIndex(ComboBox_Get_ItemIndexRequest) returns (ComboBox_Get_ItemIndexResponse);
  
  
  // Property: ReadOnly
  //
  // Specifies whether the control can be edited.
  //
  // ComboBox_Set_ReadOnlyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //    - val: bool - Specifies whether the control can be edited. 
  //
  // ComboBox_Set_ReadOnlyResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ComboBox_Get_ReadOnlyRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //
  // ComboBox_Get_ReadOnlyResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the control can be edited. 
  //
  rpc Set_ReadOnly(ComboBox_Set_ReadOnlyRequest) returns (ComboBox_Set_ReadOnlyResponse);
  rpc Get_ReadOnly(ComboBox_Get_ReadOnlyRequest) returns (ComboBox_Get_ReadOnlyResponse);
  
  
  // Property: HeightWithDropDown
  //
  // Specifies the maximum height of the edit box and drop-down list.
  //
  // When the total height of all the items in the drop-down list exceeds the value of this property, the drop-down list uses a vertical scrollbar. This value cannot be less than 100 pixels.
  //
  // ComboBox_Set_HeightWithDropDownRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //    - val: int32 - Specifies the maximum height of the edit box and drop-down list. 
  //
  // ComboBox_Set_HeightWithDropDownResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ComboBox_Get_HeightWithDropDownRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //
  // ComboBox_Get_HeightWithDropDownResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the maximum height of the edit box and drop-down list. 
  //
  rpc Set_HeightWithDropDown(ComboBox_Set_HeightWithDropDownRequest) returns (ComboBox_Set_HeightWithDropDownResponse);
  rpc Get_HeightWithDropDown(ComboBox_Get_HeightWithDropDownRequest) returns (ComboBox_Get_HeightWithDropDownResponse);
  
  
  // Property: Style
  //
  // Specifies the appearance of the control.
  //
  // ComboBox_Set_StyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //    - val: ComboBoxStyles - Specifies the appearance of the control. 
  //
  // ComboBox_Set_StyleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ComboBox_Get_StyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //
  // ComboBox_Get_StyleResponse - The response message from the server. It provides the return value.
  //    - returnValue: ComboBoxStyles - Specifies the appearance of the control. 
  //
  rpc Set_Style(ComboBox_Set_StyleRequest) returns (ComboBox_Set_StyleResponse);
  rpc Get_Style(ComboBox_Get_StyleRequest) returns (ComboBox_Get_StyleResponse);
  
  
  // Property: IconSize
  //
  // Specifies the size, in pixels, of the icon displayed in the control.
  //
  // The value of this property cannot be less than 1 or greater than 96.
  // Icons are always square. For example, when you specify an icon size of 32, the dimensions of the icon are 32 × 32 pixels.
  //
  // ComboBox_Set_IconSizeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //    - val: int32 - Specifies the size, in pixels, of the icon displayed in the control. 
  //
  // ComboBox_Set_IconSizeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ComboBox_Get_IconSizeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //
  // ComboBox_Get_IconSizeResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the size, in pixels, of the icon displayed in the control. 
  //
  rpc Set_IconSize(ComboBox_Set_IconSizeRequest) returns (ComboBox_Set_IconSizeResponse);
  rpc Get_IconSize(ComboBox_Get_IconSizeRequest) returns (ComboBox_Get_IconSizeResponse);
  
  
  // Property: hWnd
  //
  // Returns a Window handle for the control.
  //
  // You can use the returned Window handle with the Microsoft Windows API functions.
  // Note: Using Windows API functions with this property can cause undefined behavior.
  //
  // ComboBox_Get_hWndRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //
  // ComboBox_Get_hWndResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a Window handle for the control. 
  //
  rpc Get_hWnd(ComboBox_Get_hWndRequest) returns (ComboBox_Get_hWndResponse);
  
  
  // Property: FontSource
  //
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  //
  // When the value of this property is FontSource_UseFontProperty, the corresponding Font property specifies the particular font the control uses. Otherwise, the control uses the font from the source this property specifies. Refer to the FontSources enumeration for the list of valid font sources.
  // Set this property to a value other than FontSource_UseFontProperty when you expect the font the ComboBox.Font property specifies to not be present on a computer at run time. For example, a font present on an English version of the Microsoft Windows operating system might not be present on a Japanese version of the Windows operating system.
  //
  // ComboBox_Set_FontSourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //    - val: FontSources - Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont. 
  //
  // ComboBox_Set_FontSourceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ComboBox_Get_FontSourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //
  // ComboBox_Get_FontSourceResponse - The response message from the server. It provides the return value.
  //    - returnValue: FontSources - Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont. 
  //
  rpc Set_FontSource(ComboBox_Set_FontSourceRequest) returns (ComboBox_Set_FontSourceResponse);
  rpc Get_FontSource(ComboBox_Get_FontSourceRequest) returns (ComboBox_Get_FontSourceResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the ComboBox.
  //
  // ComboBox_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //
  // ComboBox_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the ComboBox. 
  //
  rpc Get_Count(ComboBox_Get_CountRequest) returns (ComboBox_Get_CountResponse);
  
  
  // Property: ScaleWithDPI
  //
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  //
  // Some environments scale native controls based on the DPI settings of their display, while other environments do not. The TestStand User Interface controls are designed to work in all environments.
  // The following are the recommended settings for various platforms:    * LabVIEW, LabWindows/CVI, C#, and Microsoft Visual Basic .NET—Set this property to False.    * Active Template Library (ATL)/Microsoft Foundation Class (MFC)—Set this property to True.
  //
  // ComboBox_Set_ScaleWithDPIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //    - val: bool - Specifies how the control scales based on the dots per inch (DPI) setting. 
  //
  // ComboBox_Set_ScaleWithDPIResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ComboBox_Get_ScaleWithDPIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //
  // ComboBox_Get_ScaleWithDPIResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies how the control scales based on the dots per inch (DPI) setting. 
  //
  rpc Set_ScaleWithDPI(ComboBox_Set_ScaleWithDPIRequest) returns (ComboBox_Set_ScaleWithDPIResponse);
  rpc Get_ScaleWithDPI(ComboBox_Get_ScaleWithDPIRequest) returns (ComboBox_Get_ScaleWithDPIResponse);
  
  
  // Property: ShowImages
  //
  // Specifies whether the control shows images.
  //
  // The edit box does not show images when the style is ComboBoxStyle_DropDownCombo.
  //
  // ComboBox_Set_ShowImagesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //    - val: bool - Specifies whether the control shows images. 
  //
  // ComboBox_Set_ShowImagesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ComboBox_Get_ShowImagesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //
  // ComboBox_Get_ShowImagesResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the control shows images. 
  //
  rpc Set_ShowImages(ComboBox_Set_ShowImagesRequest) returns (ComboBox_Set_ShowImagesResponse);
  rpc Get_ShowImages(ComboBox_Get_ShowImagesRequest) returns (ComboBox_Get_ShowImagesResponse);
  
  
  // Property: ToolTipVisible
  //
  // Specifies whether the control shows tooltips.
  //
  // ComboBox_Set_ToolTipVisibleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //    - val: bool - Specifies whether the control shows tooltips. 
  //
  // ComboBox_Set_ToolTipVisibleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ComboBox_Get_ToolTipVisibleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ComboBoxInstance - The id of the ComboBox object.
  //
  // ComboBox_Get_ToolTipVisibleResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the control shows tooltips. 
  //
  rpc Set_ToolTipVisible(ComboBox_Set_ToolTipVisibleRequest) returns (ComboBox_Set_ToolTipVisibleResponse);
  rpc Get_ToolTipVisible(ComboBox_Get_ToolTipVisibleRequest) returns (ComboBox_Get_ToolTipVisibleResponse);
  
  

  // Event: Click
  //
  // Occurs when you press and release the mouse on the control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_Click - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_Click - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ComboBox_GetEvents_ClickRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ComboBoxInstance - The id of the ComboBox object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ComboBox_GetEvents_ClickResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // ComboBox_ReplyToEvent_ClickRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ComboBox_ReplyToEvent_ClickResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_Click(ComboBox_GetEvents_ClickRequest) returns (stream ComboBox_GetEvents_ClickResponse);
  rpc ReplyToEvent_Click(ComboBox_ReplyToEvent_ClickRequest) returns (ComboBox_ReplyToEvent_ClickResponse); 
  
  
  // Event: KeyDown
  //
  // Occurs when the user presses a key while the control has input focus. This event occurs before the ComboBox.KeyPress event.
  //
  // The event has a registration method and a reply method.
  // GetEvents_KeyDown - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_KeyDown - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ComboBox_GetEvents_KeyDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ComboBoxInstance - The id of the ComboBox object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ComboBox_GetEvents_KeyDownResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - keyCode: int32
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //
  // ComboBox_ReplyToEvent_KeyDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //  - keyCode: int32
  //
  // ComboBox_ReplyToEvent_KeyDownResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_KeyDown(ComboBox_GetEvents_KeyDownRequest) returns (stream ComboBox_GetEvents_KeyDownResponse);
  rpc ReplyToEvent_KeyDown(ComboBox_ReplyToEvent_KeyDownRequest) returns (ComboBox_ReplyToEvent_KeyDownResponse); 
  
  
  // Event: KeyPress
  //
  // Occurs when the user presses a key while a control is active. This event occurs after the ComboBox.KeyDown event.
  //
  // The event has a registration method and a reply method.
  // GetEvents_KeyPress - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_KeyPress - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ComboBox_GetEvents_KeyPressRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ComboBoxInstance - The id of the ComboBox object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ComboBox_GetEvents_KeyPressResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - keyAscii: int32
  //
  // ComboBox_ReplyToEvent_KeyPressRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //  - keyAscii: int32
  //
  // ComboBox_ReplyToEvent_KeyPressResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_KeyPress(ComboBox_GetEvents_KeyPressRequest) returns (stream ComboBox_GetEvents_KeyPressResponse);
  rpc ReplyToEvent_KeyPress(ComboBox_ReplyToEvent_KeyPressRequest) returns (ComboBox_ReplyToEvent_KeyPressResponse); 
  
  
  // Event: KeyUp
  //
  // Occurs when the user releases a key while the control has input focus.
  //
  // The event has a registration method and a reply method.
  // GetEvents_KeyUp - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_KeyUp - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ComboBox_GetEvents_KeyUpRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ComboBoxInstance - The id of the ComboBox object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ComboBox_GetEvents_KeyUpResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - keyCode: int32 - Specifies the KeyCodes constant of the key the user pressed.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //
  // ComboBox_ReplyToEvent_KeyUpRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ComboBox_ReplyToEvent_KeyUpResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_KeyUp(ComboBox_GetEvents_KeyUpRequest) returns (stream ComboBox_GetEvents_KeyUpResponse);
  rpc ReplyToEvent_KeyUp(ComboBox_ReplyToEvent_KeyUpRequest) returns (ComboBox_ReplyToEvent_KeyUpResponse); 
  
  
  // Event: Change
  //
  // Occurs when the contents of a control change.
  //
  // The event has a registration method and a reply method.
  // GetEvents_Change - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_Change - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ComboBox_GetEvents_ChangeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ComboBoxInstance - The id of the ComboBox object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ComboBox_GetEvents_ChangeResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // ComboBox_ReplyToEvent_ChangeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ComboBox_ReplyToEvent_ChangeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_Change(ComboBox_GetEvents_ChangeRequest) returns (stream ComboBox_GetEvents_ChangeResponse);
  rpc ReplyToEvent_Change(ComboBox_ReplyToEvent_ChangeRequest) returns (ComboBox_ReplyToEvent_ChangeResponse); 
  
  
  // Event: DropDown
  //
  // Occurs when the list portion of the control is about to drop down.
  // Note: The ComboBox control does not allow you to populate the items in the drop-down list.
  //
  // The event has a registration method and a reply method.
  // GetEvents_DropDown - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_DropDown - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ComboBox_GetEvents_DropDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ComboBoxInstance - The id of the ComboBox object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ComboBox_GetEvents_DropDownResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // ComboBox_ReplyToEvent_DropDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ComboBox_ReplyToEvent_DropDownResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_DropDown(ComboBox_GetEvents_DropDownRequest) returns (stream ComboBox_GetEvents_DropDownResponse);
  rpc ReplyToEvent_DropDown(ComboBox_ReplyToEvent_DropDownRequest) returns (ComboBox_ReplyToEvent_DropDownResponse); 
  
  
  // Event: ConnectionActivity
  //
  // Occurs after the connection to a manager control makes a change to a user interface control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_ConnectionActivity - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_ConnectionActivity - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ComboBox_GetEvents_ConnectionActivityRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ComboBoxInstance - The id of the ComboBox object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ComboBox_GetEvents_ConnectionActivityResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - activity: ConnectionActivityTypes - Specifies the type of change.
  //
  // ComboBox_ReplyToEvent_ConnectionActivityRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ComboBox_ReplyToEvent_ConnectionActivityResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_ConnectionActivity(ComboBox_GetEvents_ConnectionActivityRequest) returns (stream ComboBox_GetEvents_ConnectionActivityResponse);
  rpc ReplyToEvent_ConnectionActivity(ComboBox_ReplyToEvent_ConnectionActivityRequest) returns (ComboBox_ReplyToEvent_ConnectionActivityResponse); 
  
  
}
message ComboBoxInstance {
  // Specifies the handle of the ComboBox instance in the server.
  string id = 1;
}
message ComboBox_ComboBoxRequest {
}

message ComboBox_ComboBoxResponse {
  // The return type of the ComboBox object.
  ComboBoxInstance returnValue = 1;
}

message ComboBox_GetItemTextRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
  // Specifies the zero-based index of the item to retrieve. Pass -1 to obtain the text of the currently selected item.
  int32 itemIdx = 2;
}

message ComboBox_GetItemTextResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message ComboBox_Set_EnabledRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
  // The control responds to user input only when this property is True.
  bool val = 2;
}

message ComboBox_Set_EnabledResponse {
}

message ComboBox_Get_EnabledRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
}

message ComboBox_Get_EnabledResponse {
  // The control responds to user input only when this property is True.
  bool returnValue = 1;
}

message ComboBox_Set_MousePointerRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
  // Specifies the appearance of the mouse cursor when the cursor is over the control.
  MousePointerStyles val = 2;
}

message ComboBox_Set_MousePointerResponse {
}

message ComboBox_Get_MousePointerRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
}

message ComboBox_Get_MousePointerResponse {
  // Specifies the appearance of the mouse cursor when the cursor is over the control.
  MousePointerStyles returnValue = 1;
}

message ComboBox_Set_MouseIconRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
  // Specifies a custom mouse icon for the control.
  IPictureDispInstance val = 2;
}

message ComboBox_Set_MouseIconResponse {
}

message ComboBox_Get_MouseIconRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
}

message ComboBox_Get_MouseIconResponse {
  // Specifies a custom mouse icon for the control.
  IPictureDispInstance returnValue = 1;
}

message ComboBox_Set_FontRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
  // Specifies the font for the control when the value of the ComboBox.FontSource property is FontSource_UseFontProperty.
  IFontDispInstance val = 2;
}

message ComboBox_Set_FontResponse {
}

message ComboBox_Get_FontRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
}

message ComboBox_Get_FontResponse {
  // Specifies the font for the control when the value of the ComboBox.FontSource property is FontSource_UseFontProperty.
  IFontDispInstance returnValue = 1;
}

message ComboBox_Set_ItemIndexRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
  // Specifies the zero-based index of the currently selected item in the control.
  int32 val = 2;
}

message ComboBox_Set_ItemIndexResponse {
}

message ComboBox_Get_ItemIndexRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
}

message ComboBox_Get_ItemIndexResponse {
  // Specifies the zero-based index of the currently selected item in the control.
  int32 returnValue = 1;
}

message ComboBox_Set_ReadOnlyRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
  // Specifies whether the control can be edited.
  bool val = 2;
}

message ComboBox_Set_ReadOnlyResponse {
}

message ComboBox_Get_ReadOnlyRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
}

message ComboBox_Get_ReadOnlyResponse {
  // Specifies whether the control can be edited.
  bool returnValue = 1;
}

message ComboBox_Set_HeightWithDropDownRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
  // Specifies the maximum height of the edit box and drop-down list.
  int32 val = 2;
}

message ComboBox_Set_HeightWithDropDownResponse {
}

message ComboBox_Get_HeightWithDropDownRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
}

message ComboBox_Get_HeightWithDropDownResponse {
  // Specifies the maximum height of the edit box and drop-down list.
  int32 returnValue = 1;
}

message ComboBox_Set_StyleRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
  // Specifies the appearance of the control.
  ComboBoxStyles val = 2;
}

message ComboBox_Set_StyleResponse {
}

message ComboBox_Get_StyleRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
}

message ComboBox_Get_StyleResponse {
  // Specifies the appearance of the control.
  ComboBoxStyles returnValue = 1;
}

message ComboBox_Set_IconSizeRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
  // Specifies the size, in pixels, of the icon displayed in the control.
  int32 val = 2;
}

message ComboBox_Set_IconSizeResponse {
}

message ComboBox_Get_IconSizeRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
}

message ComboBox_Get_IconSizeResponse {
  // Specifies the size, in pixels, of the icon displayed in the control.
  int32 returnValue = 1;
}

message ComboBox_Get_hWndRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
}

message ComboBox_Get_hWndResponse {
  // Returns a Window handle for the control.
  int32 returnValue = 1;
}

message ComboBox_Set_FontSourceRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  FontSources val = 2;
}

message ComboBox_Set_FontSourceResponse {
}

message ComboBox_Get_FontSourceRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
}

message ComboBox_Get_FontSourceResponse {
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  FontSources returnValue = 1;
}

message ComboBox_Get_CountRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
}

message ComboBox_Get_CountResponse {
  // Returns the number of items in the ComboBox.
  int32 returnValue = 1;
}

message ComboBox_Set_ScaleWithDPIRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  bool val = 2;
}

message ComboBox_Set_ScaleWithDPIResponse {
}

message ComboBox_Get_ScaleWithDPIRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
}

message ComboBox_Get_ScaleWithDPIResponse {
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  bool returnValue = 1;
}

message ComboBox_Set_ShowImagesRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
  // Specifies whether the control shows images.
  bool val = 2;
}

message ComboBox_Set_ShowImagesResponse {
}

message ComboBox_Get_ShowImagesRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
}

message ComboBox_Get_ShowImagesResponse {
  // Specifies whether the control shows images.
  bool returnValue = 1;
}

message ComboBox_Set_ToolTipVisibleRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
  // Specifies whether the control shows tooltips.
  bool val = 2;
}

message ComboBox_Set_ToolTipVisibleResponse {
}

message ComboBox_Get_ToolTipVisibleRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
}

message ComboBox_Get_ToolTipVisibleResponse {
  // Specifies whether the control shows tooltips.
  bool returnValue = 1;
}

message ComboBox_GetEvents_ClickRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ComboBox_GetEvents_ClickResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message ComboBox_ReplyToEvent_ClickRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ComboBox_ReplyToEvent_ClickResponse {
}

message ComboBox_GetEvents_KeyDownRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ComboBox_GetEvents_KeyDownResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the KeyCodes constant of the key the user pressed.
  int32 keyCode = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
}

message ComboBox_ReplyToEvent_KeyDownRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  // Specifies the KeyCodes constant of the key the user pressed.
  int32 keyCode = 2;
}

message ComboBox_ReplyToEvent_KeyDownResponse {
}

message ComboBox_GetEvents_KeyPressRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ComboBox_GetEvents_KeyPressResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the ASCII value of the pressed key.
  int32 keyAscii = 2;
}

message ComboBox_ReplyToEvent_KeyPressRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  // Specifies the ASCII value of the pressed key.
  int32 keyAscii = 2;
}

message ComboBox_ReplyToEvent_KeyPressResponse {
}

message ComboBox_GetEvents_KeyUpRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ComboBox_GetEvents_KeyUpResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the KeyCodes constant of the key the user pressed.
  int32 keyCode = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
}

message ComboBox_ReplyToEvent_KeyUpRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ComboBox_ReplyToEvent_KeyUpResponse {
}

message ComboBox_GetEvents_ChangeRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ComboBox_GetEvents_ChangeResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message ComboBox_ReplyToEvent_ChangeRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ComboBox_ReplyToEvent_ChangeResponse {
}

message ComboBox_GetEvents_DropDownRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ComboBox_GetEvents_DropDownResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message ComboBox_ReplyToEvent_DropDownRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ComboBox_ReplyToEvent_DropDownResponse {
}

message ComboBox_GetEvents_ConnectionActivityRequest {
  // The id of the ComboBox object.
  ComboBoxInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ComboBox_GetEvents_ConnectionActivityResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the type of change.
  ConnectionActivityTypes activity = 2;
}

message ComboBox_ReplyToEvent_ConnectionActivityRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ComboBox_ReplyToEvent_ConnectionActivityResponse {
}

// ListBox
//
// Connect a SequenceFileView Manager or ExecutionView Manager control to a ListBox control so users can view or select from a list of sequence files, sequences, step groups, steps, executions, threads, or stack frames. Connect an Application Manager control to a ListBox control so users can view or select the default adapter of the TestStand Engine. Use a ListBox control to display multiple pages, where each page contains a list of items that users can view or select.
// Use the ListBox control to connect to and display the ExecutionViewMgrConnections.ExecutionList, ExecutionViewMgrConnections.CallStack, and ExecutionViewMgrConnections.ThreadList properties in the ExecutionView Manager control and the SequenceFileViewMgrConnections.SequenceList, SequenceFileViewMgrConnections.SequenceFileList, and SequenceFileViewMgrConnections.StepGroupList properties in the SequenceFileView Manager control.
// Selecting an item in the ListBox control updates the application according to the type of connection.
//
service ListBox {
  // Service: ListBox
  //
  // Creates a new ListBox instance
  //
  // ListBoxRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //
  // ListBoxResponse - The response message from the server. It provides the return value.
  //    - returnValue: ListBoxInstance - The return type of the ListBox object.
  //
  rpc ListBox(ListBox_ListBoxRequest) returns (ListBox_ListBoxResponse);

  // Method: HitTest
  //
  // Returns the index of the item at the given coordinates. Returns -1 when no item exists at the specified coordinates.
  //
  // Use this method to determine the item at the given coordinates. For example, when a user clicks on the control, you can determine the item the user clicked.
  //
  // ListBox_HitTestRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //    - x: int32 - Specifies the x-coordinate of the location to test, in pixels, relative to the control.
  //    - y: int32 - Specifies the y-coordinate of the location to test, in pixels, relative to the control.
  //
  // ListBox_HitTestResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a numeric item index. 
  //
  rpc HitTest(ListBox_HitTestRequest) returns (ListBox_HitTestResponse);
  
  
  // Method: GetItemText
  //
  // Returns the text of the item at a specified index.
  //
  // ListBox_GetItemTextRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //    - itemIdx: int32 - Specifies the zero-based index of the item to return. Pass the ListBox.ItemIndex property or pass -1 to obtain the text of the currently selected item.
  //
  // ListBox_GetItemTextResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - The return type of the String object.
  //
  rpc GetItemText(ListBox_GetItemTextRequest) returns (ListBox_GetItemTextResponse);
  
  
  // Method: EditLabel
  //
  // Enters label-editing mode for the active item in the list. In label-editing mode, you can edit the item text in the first column of the listbox.
  //
  // The listbox automatically attempts to enter label-edit mode when you click the active item in the first column or when you press <F2> when the listbox has the keyboard focus.
  //
  // ListBox_EditLabelRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //
  // ListBox_EditLabelResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc EditLabel(ListBox_EditLabelRequest) returns (ListBox_EditLabelResponse);
  
  

  // Property: Enabled
  //
  // The control responds to user input only when this property is True.
  //
  // ListBox_Set_EnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //    - val: bool - The control responds to user input only when this property is True. 
  //
  // ListBox_Set_EnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBox_Get_EnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //
  // ListBox_Get_EnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The control responds to user input only when this property is True. 
  //
  rpc Set_Enabled(ListBox_Set_EnabledRequest) returns (ListBox_Set_EnabledResponse);
  rpc Get_Enabled(ListBox_Get_EnabledRequest) returns (ListBox_Get_EnabledResponse);
  
  
  // Property: MousePointer
  //
  // Specifies the appearance of the mouse cursor when the cursor is over the control.
  //
  // When the parameter is MousePointer_Custom, the mouse cursor is the picture the ListBox.MouseIcon property specifies.
  //
  // ListBox_Set_MousePointerRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //    - val: MousePointerStyles - Specifies the appearance of the mouse cursor when the cursor is over the control. 
  //
  // ListBox_Set_MousePointerResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBox_Get_MousePointerRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //
  // ListBox_Get_MousePointerResponse - The response message from the server. It provides the return value.
  //    - returnValue: MousePointerStyles - Specifies the appearance of the mouse cursor when the cursor is over the control. 
  //
  rpc Set_MousePointer(ListBox_Set_MousePointerRequest) returns (ListBox_Set_MousePointerResponse);
  rpc Get_MousePointer(ListBox_Get_MousePointerRequest) returns (ListBox_Get_MousePointerResponse);
  
  
  // Property: MouseIcon
  //
  // Specifies a custom mouse pointer icon for the control.
  //
  // The control displays the specified picture as the cursor when the value of the ListBox.MousePointer property is MousePointer_Custom. When you set this property to NULL, the value of the ListBox.MousePointer property changes to MousePointer_Default.
  // Note: This property requires that the picture value is an icon.
  //
  // ListBox_Set_MouseIconRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //    - val: IPictureDispInstance - Specifies a custom mouse pointer icon for the control. 
  //
  // ListBox_Set_MouseIconResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBox_Get_MouseIconRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //
  // ListBox_Get_MouseIconResponse - The response message from the server. It provides the return value.
  //    - returnValue: IPictureDispInstance - Specifies a custom mouse pointer icon for the control. 
  //
  rpc Set_MouseIcon(ListBox_Set_MouseIconRequest) returns (ListBox_Set_MouseIconResponse);
  rpc Get_MouseIcon(ListBox_Get_MouseIconRequest) returns (ListBox_Get_MouseIconResponse);
  
  
  // Property: Font
  //
  // Specifies the font for the control when the value of the ListBox.FontSource property is FontSource_UseFontProperty.
  //
  // ListBox_Set_FontRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //    - val: IFontDispInstance - Specifies the font for the control when the value of the ListBox.FontSource property is FontSource_UseFontProperty. 
  //
  // ListBox_Set_FontResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBox_Get_FontRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //
  // ListBox_Get_FontResponse - The response message from the server. It provides the return value.
  //    - returnValue: IFontDispInstance - Specifies the font for the control when the value of the ListBox.FontSource property is FontSource_UseFontProperty. 
  //
  rpc Set_Font(ListBox_Set_FontRequest) returns (ListBox_Set_FontResponse);
  rpc Get_Font(ListBox_Get_FontRequest) returns (ListBox_Get_FontResponse);
  
  
  // Property: BackColor
  //
  // Specifies the background color for the control.
  //
  // ListBox_Set_BackColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //    - val: uint32 - Specifies the background color for the control. 
  //
  // ListBox_Set_BackColorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBox_Get_BackColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //
  // ListBox_Get_BackColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Specifies the background color for the control. 
  //
  rpc Set_BackColor(ListBox_Set_BackColorRequest) returns (ListBox_Set_BackColorResponse);
  rpc Get_BackColor(ListBox_Get_BackColorRequest) returns (ListBox_Get_BackColorResponse);
  
  
  // Property: ItemIndex
  //
  // Specifies the index of the currently selected item in the control.
  // Note: You cannot change this property at design time.
  //
  // When no item is selected, the value of this property is -1.
  //
  // ListBox_Set_ItemIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //    - val: int32 - Specifies the index of the currently selected item in the control. Note: You cannot change this property at design time. 
  //
  // ListBox_Set_ItemIndexResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBox_Get_ItemIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //
  // ListBox_Get_ItemIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the index of the currently selected item in the control. Note: You cannot change this property at design time. 
  //
  rpc Set_ItemIndex(ListBox_Set_ItemIndexRequest) returns (ListBox_Set_ItemIndexResponse);
  rpc Get_ItemIndex(ListBox_Get_ItemIndexRequest) returns (ListBox_Get_ItemIndexResponse);
  
  
  // Property: Count
  //
  // Returns the number of items in the listbox.
  //
  // ListBox_Get_CountRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //
  // ListBox_Get_CountResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns the number of items in the listbox. 
  //
  rpc Get_Count(ListBox_Get_CountRequest) returns (ListBox_Get_CountResponse);
  
  
  // Property: Columns
  //
  // TestStand 4.0 or later does not support setting this property to create multiple columns. Setting this property has no effect.
  //
  // Use the ListBox.ColumnSet property to access information about list box columns.
  //
  // ListBox_Set_ColumnsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //    - val: int32 - TestStand 4.0 or later does not support setting this property to create multiple columns. Setting this property has no effect. 
  //
  // ListBox_Set_ColumnsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBox_Get_ColumnsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //
  // ListBox_Get_ColumnsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - TestStand 4.0 or later does not support setting this property to create multiple columns. Setting this property has no effect. 
  //
  rpc Set_Columns(ListBox_Set_ColumnsRequest) returns (ListBox_Set_ColumnsResponse);
  rpc Get_Columns(ListBox_Get_ColumnsRequest) returns (ListBox_Get_ColumnsResponse);
  
  
  // Property: ForeColor
  //
  // Specifies the foreground color for the ListBox control.
  //
  // ListBox_Set_ForeColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //    - val: uint32 - Specifies the foreground color for the ListBox control. 
  //
  // ListBox_Set_ForeColorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBox_Get_ForeColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //
  // ListBox_Get_ForeColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Specifies the foreground color for the ListBox control. 
  //
  rpc Set_ForeColor(ListBox_Set_ForeColorRequest) returns (ListBox_Set_ForeColorResponse);
  rpc Get_ForeColor(ListBox_Get_ForeColorRequest) returns (ListBox_Get_ForeColorResponse);
  
  
  // Property: hWnd
  //
  // Returns a Window handle for the ListBox control.
  //
  // You can use the returned Window handle with the Microsoft Windows API functions.
  // Note: Using Windows API functions with this property can cause undefined behavior.
  //
  // ListBox_Get_hWndRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //
  // ListBox_Get_hWndResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a Window handle for the ListBox control. 
  //
  rpc Get_hWnd(ListBox_Get_hWndRequest) returns (ListBox_Get_hWndResponse);
  
  
  // Property: FontSource
  //
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  //
  // When the value of this property is FontSource_UseFontProperty, the corresponding Font property specifies the particular font the control uses. Otherwise, the control uses the font from the source this property specifies. Refer to the FontSources enumeration for the list of valid font sources.
  // Set this property to a value other than FontSource_UseFontProperty if you expect the font the ListBox.Font property specifies to not be present on a computer at run time. For example, a font present on an English version of the Microsoft Windows operating system might not be present on a Japanese version of the Windows operating system.
  //
  // ListBox_Set_FontSourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //    - val: FontSources - Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont. 
  //
  // ListBox_Set_FontSourceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBox_Get_FontSourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //
  // ListBox_Get_FontSourceResponse - The response message from the server. It provides the return value.
  //    - returnValue: FontSources - Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont. 
  //
  rpc Set_FontSource(ListBox_Set_FontSourceRequest) returns (ListBox_Set_FontSourceResponse);
  rpc Get_FontSource(ListBox_Get_FontSourceRequest) returns (ListBox_Get_FontSourceResponse);
  
  
  // Property: ScaleWithDPI
  //
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  //
  // Some environments scale native controls based on the DPI settings of their display, while other environments do not. The TestStand User Interface Controls are designed to work in all environments.
  // The following are the recommended settings for various platforms:    * LabVIEW, LabWindows/CVI, C#, and Microsoft Visual Basic .NET—Set this property to False.    * Active Template Library (ATL)/Microsoft Foundation Class (MFC)—Set this property to True.
  //
  // ListBox_Set_ScaleWithDPIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //    - val: bool - Specifies how the control scales based on the dots per inch (DPI) setting. 
  //
  // ListBox_Set_ScaleWithDPIResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBox_Get_ScaleWithDPIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //
  // ListBox_Get_ScaleWithDPIResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies how the control scales based on the dots per inch (DPI) setting. 
  //
  rpc Set_ScaleWithDPI(ListBox_Set_ScaleWithDPIRequest) returns (ListBox_Set_ScaleWithDPIResponse);
  rpc Get_ScaleWithDPI(ListBox_Get_ScaleWithDPIRequest) returns (ListBox_Get_ScaleWithDPIResponse);
  
  
  // Property: ToolTipVisible
  //
  // Specifies whether the control shows tooltips.
  //
  // ListBox_Set_ToolTipVisibleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //    - val: bool - Specifies whether the control shows tooltips. 
  //
  // ListBox_Set_ToolTipVisibleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBox_Get_ToolTipVisibleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //
  // ListBox_Get_ToolTipVisibleResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the control shows tooltips. 
  //
  rpc Set_ToolTipVisible(ListBox_Set_ToolTipVisibleRequest) returns (ListBox_Set_ToolTipVisibleResponse);
  rpc Get_ToolTipVisible(ListBox_Get_ToolTipVisibleRequest) returns (ListBox_Get_ToolTipVisibleResponse);
  
  
  // Property: Borders
  //
  // Returns the frame and draggable borders that surround the control.
  //
  // ListBox_Get_BordersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //
  // ListBox_Get_BordersResponse - The response message from the server. It provides the return value.
  //    - returnValue: BordersInstance - Returns the frame and draggable borders that surround the control. 
  //
  rpc Get_Borders(ListBox_Get_BordersRequest) returns (ListBox_Get_BordersResponse);
  
  
  // Property: EditingFlags
  //
  // Specifies the types of editing the listbox allows. Use any combination of the EditingFlags constants with this property.
  //
  // By default, TestStand allows all editing types. These flags have no effect if the listbox is not connected to display editable items.
  //
  // ListBox_Set_EditingFlagsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //    - val: int32 - Specifies the types of editing the listbox allows. Use any combination of the EditingFlags constants with this property. 
  //
  // ListBox_Set_EditingFlagsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBox_Get_EditingFlagsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //
  // ListBox_Get_EditingFlagsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the types of editing the listbox allows. Use any combination of the EditingFlags constants with this property. 
  //
  rpc Set_EditingFlags(ListBox_Set_EditingFlagsRequest) returns (ListBox_Set_EditingFlagsResponse);
  rpc Get_EditingFlags(ListBox_Get_EditingFlagsRequest) returns (ListBox_Get_EditingFlagsResponse);
  
  
  // Property: CanEditLabel
  //
  // Returns a value that indicates whether the listbox can enter label-editing mode, in which you can edit the item text in the first column of the listbox.
  //
  // ListBox_Get_CanEditLabelRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //
  // ListBox_Get_CanEditLabelResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the listbox can enter label-editing mode, in which you can edit the item text in the first column of the listbox. 
  //
  rpc Get_CanEditLabel(ListBox_Get_CanEditLabelRequest) returns (ListBox_Get_CanEditLabelResponse);
  
  
  // Property: ShowHeaders
  //
  // Specifies whether the control displays headers for the visible columns.
  //
  // ListBox_Set_ShowHeadersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //    - val: bool - Specifies whether the control displays headers for the visible columns. 
  //
  // ListBox_Set_ShowHeadersResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBox_Get_ShowHeadersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //
  // ListBox_Get_ShowHeadersResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the control displays headers for the visible columns. 
  //
  rpc Set_ShowHeaders(ListBox_Set_ShowHeadersRequest) returns (ListBox_Set_ShowHeadersResponse);
  rpc Get_ShowHeaders(ListBox_Get_ShowHeadersRequest) returns (ListBox_Get_ShowHeadersResponse);
  
  
  // Property: ColumnSet
  //
  // Returns the list of columns for the control.
  //
  // ListBox_Get_ColumnSetRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //
  // ListBox_Get_ColumnSetResponse - The response message from the server. It provides the return value.
  //    - returnValue: ListBoxColumnsInstance - Returns the list of columns for the control. 
  //
  rpc Get_ColumnSet(ListBox_Get_ColumnSetRequest) returns (ListBox_Get_ColumnSetResponse);
  
  
  // Property: AutoSizeColumns
  //
  // Specifies whether to make all columns fit within the width of the control. When the control resizes, the width of each column for which the ListBoxColumn.Autosizing property is a value other than AutoSizingOption_None adjusts so the columns fit the new size of the control. You must ensure that at least one column enables autosizing when you set this property to True.
  //
  // When this property is True, the sum of all column widths always equals the width of the control, and the horizontal scrollbar is not visible. When this property is False, you can resize the columns to any width, and the horizontal scrollbar appears as needed. When the value of the autosize property for each column is AutoSizingOption_None, the last column is autosized to fit the width of the control.
  //
  // ListBox_Set_AutoSizeColumnsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //    - val: bool - Specifies whether to make all columns fit within the width of the control. When the control resizes, the width of each column for which the ListBoxColumn.Autosizing property is a value other than AutoSizingOption_None adjusts so the columns fit the new size of the control. You must ensure that at least one column enables autosizing when you set this property to True. 
  //
  // ListBox_Set_AutoSizeColumnsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ListBox_Get_AutoSizeColumnsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ListBoxInstance - The id of the ListBox object.
  //
  // ListBox_Get_AutoSizeColumnsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether to make all columns fit within the width of the control. When the control resizes, the width of each column for which the ListBoxColumn.Autosizing property is a value other than AutoSizingOption_None adjusts so the columns fit the new size of the control. You must ensure that at least one column enables autosizing when you set this property to True. 
  //
  rpc Set_AutoSizeColumns(ListBox_Set_AutoSizeColumnsRequest) returns (ListBox_Set_AutoSizeColumnsResponse);
  rpc Get_AutoSizeColumns(ListBox_Get_AutoSizeColumnsRequest) returns (ListBox_Get_AutoSizeColumnsResponse);
  
  

  // Event: Click
  //
  // Occurs when you press and release the mouse on the control or when the selected item of the control changes.
  //
  // The event has a registration method and a reply method.
  // GetEvents_Click - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_Click - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ListBox_GetEvents_ClickRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ListBoxInstance - The id of the ListBox object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ListBox_GetEvents_ClickResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // ListBox_ReplyToEvent_ClickRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ListBox_ReplyToEvent_ClickResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_Click(ListBox_GetEvents_ClickRequest) returns (stream ListBox_GetEvents_ClickResponse);
  rpc ReplyToEvent_Click(ListBox_ReplyToEvent_ClickRequest) returns (ListBox_ReplyToEvent_ClickResponse); 
  
  
  // Event: KeyDown
  //
  // Occurs when the user presses a key while the control has the input focus. This event occurs before the ListBox.KeyPress event.
  //
  // The event has a registration method and a reply method.
  // GetEvents_KeyDown - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_KeyDown - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ListBox_GetEvents_KeyDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ListBoxInstance - The id of the ListBox object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ListBox_GetEvents_KeyDownResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - keyCode: int32
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //
  // ListBox_ReplyToEvent_KeyDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //  - keyCode: int32
  //
  // ListBox_ReplyToEvent_KeyDownResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_KeyDown(ListBox_GetEvents_KeyDownRequest) returns (stream ListBox_GetEvents_KeyDownResponse);
  rpc ReplyToEvent_KeyDown(ListBox_ReplyToEvent_KeyDownRequest) returns (ListBox_ReplyToEvent_KeyDownResponse); 
  
  
  // Event: KeyPress
  //
  // Occurs when the user presses a key while a control is active. This event occurs after the ListBox.KeyDown event.
  //
  // The event has a registration method and a reply method.
  // GetEvents_KeyPress - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_KeyPress - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ListBox_GetEvents_KeyPressRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ListBoxInstance - The id of the ListBox object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ListBox_GetEvents_KeyPressResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - keyAscii: int32
  //
  // ListBox_ReplyToEvent_KeyPressRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //  - keyAscii: int32
  //
  // ListBox_ReplyToEvent_KeyPressResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_KeyPress(ListBox_GetEvents_KeyPressRequest) returns (stream ListBox_GetEvents_KeyPressResponse);
  rpc ReplyToEvent_KeyPress(ListBox_ReplyToEvent_KeyPressRequest) returns (ListBox_ReplyToEvent_KeyPressResponse); 
  
  
  // Event: KeyUp
  //
  // Occurs when the user releases a key while the control has the input focus.
  //
  // The event has a registration method and a reply method.
  // GetEvents_KeyUp - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_KeyUp - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ListBox_GetEvents_KeyUpRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ListBoxInstance - The id of the ListBox object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ListBox_GetEvents_KeyUpResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - keyCode: int32 - Specifies the KeyCodes constant of the key the user pressed.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //
  // ListBox_ReplyToEvent_KeyUpRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ListBox_ReplyToEvent_KeyUpResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_KeyUp(ListBox_GetEvents_KeyUpRequest) returns (stream ListBox_GetEvents_KeyUpResponse);
  rpc ReplyToEvent_KeyUp(ListBox_ReplyToEvent_KeyUpRequest) returns (ListBox_ReplyToEvent_KeyUpResponse); 
  
  
  // Event: MouseDown
  //
  // Occurs when the user clicks the mouse on the control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_MouseDown - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_MouseDown - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ListBox_GetEvents_MouseDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ListBoxInstance - The id of the ListBox object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ListBox_GetEvents_MouseDownResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - btn: int32 - Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //  - x: int32 - Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //  - y: int32 - Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //
  // ListBox_ReplyToEvent_MouseDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ListBox_ReplyToEvent_MouseDownResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_MouseDown(ListBox_GetEvents_MouseDownRequest) returns (stream ListBox_GetEvents_MouseDownResponse);
  rpc ReplyToEvent_MouseDown(ListBox_ReplyToEvent_MouseDownRequest) returns (ListBox_ReplyToEvent_MouseDownResponse); 
  
  
  // Event: MouseMove
  //
  // Occurs when the user moves the mouse over the control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_MouseMove - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_MouseMove - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ListBox_GetEvents_MouseMoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ListBoxInstance - The id of the ListBox object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ListBox_GetEvents_MouseMoveResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - btn: int32 - Specifies what mouse buttons are pressed. You can use any combination of the MouseButtons constants.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //  - x: int32 - Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //  - y: int32 - Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //
  // ListBox_ReplyToEvent_MouseMoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ListBox_ReplyToEvent_MouseMoveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_MouseMove(ListBox_GetEvents_MouseMoveRequest) returns (stream ListBox_GetEvents_MouseMoveResponse);
  rpc ReplyToEvent_MouseMove(ListBox_ReplyToEvent_MouseMoveRequest) returns (ListBox_ReplyToEvent_MouseMoveResponse); 
  
  
  // Event: MouseUp
  //
  // Occurs when the user releases the mouse on the control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_MouseUp - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_MouseUp - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ListBox_GetEvents_MouseUpRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ListBoxInstance - The id of the ListBox object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ListBox_GetEvents_MouseUpResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - btn: int32 - Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //  - x: int32 - Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //  - y: int32 - Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //
  // ListBox_ReplyToEvent_MouseUpRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ListBox_ReplyToEvent_MouseUpResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_MouseUp(ListBox_GetEvents_MouseUpRequest) returns (stream ListBox_GetEvents_MouseUpResponse);
  rpc ReplyToEvent_MouseUp(ListBox_ReplyToEvent_MouseUpRequest) returns (ListBox_ReplyToEvent_MouseUpResponse); 
  
  
  // Event: BorderDragged
  //
  // Occurs when the user drags a draggable border of a control with the mouse. The event provides the location and size to which you must set the control for the draggable borders to track the mouse cursor. However, you can choose to modify the location or size to which you set the control. For example, you can limit the width of the control so the left edge cannot be dragged off of the visible portion of the window.
  // In addition to changing the size and position of the control, you might also update the sizes and positions of the other controls on the window to account for the change.
  //
  // If you are using LabVIEW, you must add the Horizontal and Vertical components of the origin of the LabVIEW front panel to the newX and newY event parameter values before you can use the newX and newY event parameters to set the ActiveX Container (AxCont) Left and Top properties for the control. To obtain the origin of a LabVIEW front panel, place an ActiveX property node on the block diagram of the VI, right-click the node, and select Link to»Pane from the context menu. Right-click the node again and select Select Property»Origin.
  //
  // The event has a registration method and a reply method.
  // GetEvents_BorderDragged - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_BorderDragged - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ListBox_GetEvents_BorderDraggedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ListBoxInstance - The id of the ListBox object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ListBox_GetEvents_BorderDraggedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - bordersChanged: WhichBorders - Specifies which borders the user dragged. Refer to the WhichBorders constants for more information about draggable borders.
  //  - newX: int32 - Specifies the new x-coordinate for the control.
  //  - newY: int32 - Specifies the new y-coordinate for the control.
  //  - newWidth: int32 - Specifies the new width for the control.
  //  - newHeight: int32 - Specifies the new height for the control.
  //  - finalResize: bool - Specifies whether the event is the final event for the drag operation the user performs.
  //
  // ListBox_ReplyToEvent_BorderDraggedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ListBox_ReplyToEvent_BorderDraggedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_BorderDragged(ListBox_GetEvents_BorderDraggedRequest) returns (stream ListBox_GetEvents_BorderDraggedResponse);
  rpc ReplyToEvent_BorderDragged(ListBox_ReplyToEvent_BorderDraggedRequest) returns (ListBox_ReplyToEvent_BorderDraggedResponse); 
  
  
  // Event: CreateContextMenu
  //
  // Occurs when you right-click the control so the application can build a context menu from which you can select commands. Even though you can implement context menus in most environments without using this event, some environments do not provide any other way to create a context menu. Also, creating a context menu using this event is less complicated in most environments, especially when the context menu contains only TestStand commands.
  //
  // The event has a registration method and a reply method.
  // GetEvents_CreateContextMenu - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_CreateContextMenu - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ListBox_GetEvents_CreateContextMenuRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ListBoxInstance - The id of the ListBox object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ListBox_GetEvents_CreateContextMenuResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - menuHandle: int32 - Specifies the Microsoft Windows menu handle (HMENU). When you add menu items to the menu handle, the control displays them in a context menu. Use the Commands.InsertIntoWin32Menu method to insert TestStand commands into the menu. You can also use the menu functions in the Windows Software Development Kit (SDK) to add other menu items; however, these menu items do not have an associated TestStand command. When you select an item without a TestStand command, the control creates and executes a Command object of kind CommandKind_Custom. The control stores the menu item identifier, such as resource ID or command ID, as a long in the Command.UserData property, and as a decimal string in the command display name. You can handle either the ApplicationMgr.PreCommandExecute or ApplicationMgr.PostCommandExecute event to receive a notification when the user selects a menu item you insert with the Windows SDK. When you close the context menu, the control disposes of the menu items. You do not need to dispose of the menu items you insert.
  //  - x: int32 - Specifies the horizontal position of right-clicking, relative to the control.
  //  - y: int32 - Specifies the vertical position of right-clicking, relative to the control.
  //
  // ListBox_ReplyToEvent_CreateContextMenuRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ListBox_ReplyToEvent_CreateContextMenuResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_CreateContextMenu(ListBox_GetEvents_CreateContextMenuRequest) returns (stream ListBox_GetEvents_CreateContextMenuResponse);
  rpc ReplyToEvent_CreateContextMenu(ListBox_ReplyToEvent_CreateContextMenuRequest) returns (ListBox_ReplyToEvent_CreateContextMenuResponse); 
  
  
  // Event: ConnectionActivity
  //
  // Occurs after the connection to a manager control makes a change to a user interface control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_ConnectionActivity - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_ConnectionActivity - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ListBox_GetEvents_ConnectionActivityRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ListBoxInstance - The id of the ListBox object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ListBox_GetEvents_ConnectionActivityResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - activity: ConnectionActivityTypes - Specifies the type of change.
  //
  // ListBox_ReplyToEvent_ConnectionActivityRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ListBox_ReplyToEvent_ConnectionActivityResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_ConnectionActivity(ListBox_GetEvents_ConnectionActivityRequest) returns (stream ListBox_GetEvents_ConnectionActivityResponse);
  rpc ReplyToEvent_ConnectionActivity(ListBox_ReplyToEvent_ConnectionActivityRequest) returns (ListBox_ReplyToEvent_ConnectionActivityResponse); 
  
  
  // Event: DblClick
  //
  // Occurs when you double-click using the left mouse button.
  //
  // The event has a registration method and a reply method.
  // GetEvents_DblClick - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_DblClick - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ListBox_GetEvents_DblClickRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ListBoxInstance - The id of the ListBox object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ListBox_GetEvents_DblClickResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // ListBox_ReplyToEvent_DblClickRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ListBox_ReplyToEvent_DblClickResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_DblClick(ListBox_GetEvents_DblClickRequest) returns (stream ListBox_GetEvents_DblClickResponse);
  rpc ReplyToEvent_DblClick(ListBox_ReplyToEvent_DblClickRequest) returns (ListBox_ReplyToEvent_DblClickResponse); 
  
  
  // Event: ColumnsResized
  //
  // Occurs when one or more columns resize in the control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_ColumnsResized - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_ColumnsResized - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ListBox_GetEvents_ColumnsResizedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ListBoxInstance - The id of the ListBox object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ListBox_GetEvents_ColumnsResizedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // ListBox_ReplyToEvent_ColumnsResizedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ListBox_ReplyToEvent_ColumnsResizedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_ColumnsResized(ListBox_GetEvents_ColumnsResizedRequest) returns (stream ListBox_GetEvents_ColumnsResizedResponse);
  rpc ReplyToEvent_ColumnsResized(ListBox_ReplyToEvent_ColumnsResizedRequest) returns (ListBox_ReplyToEvent_ColumnsResizedResponse); 
  
  
}
message ListBoxInstance {
  // Specifies the handle of the ListBox instance in the server.
  string id = 1;
}
message ListBox_ListBoxRequest {
}

message ListBox_ListBoxResponse {
  // The return type of the ListBox object.
  ListBoxInstance returnValue = 1;
}

message ListBox_HitTestRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // Specifies the x-coordinate of the location to test, in pixels, relative to the control.
  int32 x = 2;
  // Specifies the y-coordinate of the location to test, in pixels, relative to the control.
  int32 y = 3;
}

message ListBox_HitTestResponse {
  // Returns a numeric item index.
  int32 returnValue = 1;
}

message ListBox_GetItemTextRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // Specifies the zero-based index of the item to return. Pass the ListBox.ItemIndex property or pass -1 to obtain the text of the currently selected item.
  int32 itemIdx = 2;
}

message ListBox_GetItemTextResponse {
  // The return type of the String object.
  string returnValue = 1;
}

message ListBox_EditLabelRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
}

message ListBox_EditLabelResponse {
}

message ListBox_Set_EnabledRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // The control responds to user input only when this property is True.
  bool val = 2;
}

message ListBox_Set_EnabledResponse {
}

message ListBox_Get_EnabledRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
}

message ListBox_Get_EnabledResponse {
  // The control responds to user input only when this property is True.
  bool returnValue = 1;
}

message ListBox_Set_MousePointerRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // Specifies the appearance of the mouse cursor when the cursor is over the control.
  MousePointerStyles val = 2;
}

message ListBox_Set_MousePointerResponse {
}

message ListBox_Get_MousePointerRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
}

message ListBox_Get_MousePointerResponse {
  // Specifies the appearance of the mouse cursor when the cursor is over the control.
  MousePointerStyles returnValue = 1;
}

message ListBox_Set_MouseIconRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // Specifies a custom mouse pointer icon for the control.
  IPictureDispInstance val = 2;
}

message ListBox_Set_MouseIconResponse {
}

message ListBox_Get_MouseIconRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
}

message ListBox_Get_MouseIconResponse {
  // Specifies a custom mouse pointer icon for the control.
  IPictureDispInstance returnValue = 1;
}

message ListBox_Set_FontRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // Specifies the font for the control when the value of the ListBox.FontSource property is FontSource_UseFontProperty.
  IFontDispInstance val = 2;
}

message ListBox_Set_FontResponse {
}

message ListBox_Get_FontRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
}

message ListBox_Get_FontResponse {
  // Specifies the font for the control when the value of the ListBox.FontSource property is FontSource_UseFontProperty.
  IFontDispInstance returnValue = 1;
}

message ListBox_Set_BackColorRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // Specifies the background color for the control.
  uint32 val = 2;
}

message ListBox_Set_BackColorResponse {
}

message ListBox_Get_BackColorRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
}

message ListBox_Get_BackColorResponse {
  // Specifies the background color for the control.
  uint32 returnValue = 1;
}

message ListBox_Set_ItemIndexRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // Specifies the index of the currently selected item in the control.
  // Note: You cannot change this property at design time.
  int32 val = 2;
}

message ListBox_Set_ItemIndexResponse {
}

message ListBox_Get_ItemIndexRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
}

message ListBox_Get_ItemIndexResponse {
  // Specifies the index of the currently selected item in the control.
  // Note: You cannot change this property at design time.
  int32 returnValue = 1;
}

message ListBox_Get_CountRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
}

message ListBox_Get_CountResponse {
  // Returns the number of items in the listbox.
  int32 returnValue = 1;
}

message ListBox_Set_ColumnsRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // TestStand 4.0 or later does not support setting this property to create multiple columns. Setting this property has no effect.
  int32 val = 2;
}

message ListBox_Set_ColumnsResponse {
}

message ListBox_Get_ColumnsRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
}

message ListBox_Get_ColumnsResponse {
  // TestStand 4.0 or later does not support setting this property to create multiple columns. Setting this property has no effect.
  int32 returnValue = 1;
}

message ListBox_Set_ForeColorRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // Specifies the foreground color for the ListBox control.
  uint32 val = 2;
}

message ListBox_Set_ForeColorResponse {
}

message ListBox_Get_ForeColorRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
}

message ListBox_Get_ForeColorResponse {
  // Specifies the foreground color for the ListBox control.
  uint32 returnValue = 1;
}

message ListBox_Get_hWndRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
}

message ListBox_Get_hWndResponse {
  // Returns a Window handle for the ListBox control.
  int32 returnValue = 1;
}

message ListBox_Set_FontSourceRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  FontSources val = 2;
}

message ListBox_Set_FontSourceResponse {
}

message ListBox_Get_FontSourceRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
}

message ListBox_Get_FontSourceResponse {
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  FontSources returnValue = 1;
}

message ListBox_Set_ScaleWithDPIRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  bool val = 2;
}

message ListBox_Set_ScaleWithDPIResponse {
}

message ListBox_Get_ScaleWithDPIRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
}

message ListBox_Get_ScaleWithDPIResponse {
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  bool returnValue = 1;
}

message ListBox_Set_ToolTipVisibleRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // Specifies whether the control shows tooltips.
  bool val = 2;
}

message ListBox_Set_ToolTipVisibleResponse {
}

message ListBox_Get_ToolTipVisibleRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
}

message ListBox_Get_ToolTipVisibleResponse {
  // Specifies whether the control shows tooltips.
  bool returnValue = 1;
}

message ListBox_Get_BordersRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
}

message ListBox_Get_BordersResponse {
  // Returns the frame and draggable borders that surround the control.
  BordersInstance returnValue = 1;
}

message ListBox_Set_EditingFlagsRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // Specifies the types of editing the listbox allows. Use any combination of the EditingFlags constants with this property.
  EditingFlags val = 2;
}

message ListBox_Set_EditingFlagsResponse {
}

message ListBox_Get_EditingFlagsRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
}

message ListBox_Get_EditingFlagsResponse {
  // Specifies the types of editing the listbox allows. Use any combination of the EditingFlags constants with this property.
  EditingFlags returnValue = 1;
}

message ListBox_Get_CanEditLabelRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
}

message ListBox_Get_CanEditLabelResponse {
  // Returns a value that indicates whether the listbox can enter label-editing mode, in which you can edit the item text in the first column of the listbox.
  bool returnValue = 1;
}

message ListBox_Set_ShowHeadersRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // Specifies whether the control displays headers for the visible columns.
  bool val = 2;
}

message ListBox_Set_ShowHeadersResponse {
}

message ListBox_Get_ShowHeadersRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
}

message ListBox_Get_ShowHeadersResponse {
  // Specifies whether the control displays headers for the visible columns.
  bool returnValue = 1;
}

message ListBox_Get_ColumnSetRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
}

message ListBox_Get_ColumnSetResponse {
  // Returns the list of columns for the control.
  ListBoxColumnsInstance returnValue = 1;
}

message ListBox_Set_AutoSizeColumnsRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // Specifies whether to make all columns fit within the width of the control. When the control resizes, the width of each column for which the ListBoxColumn.Autosizing property is a value other than AutoSizingOption_None adjusts so the columns fit the new size of the control. You must ensure that at least one column enables autosizing when you set this property to True.
  bool val = 2;
}

message ListBox_Set_AutoSizeColumnsResponse {
}

message ListBox_Get_AutoSizeColumnsRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
}

message ListBox_Get_AutoSizeColumnsResponse {
  // Specifies whether to make all columns fit within the width of the control. When the control resizes, the width of each column for which the ListBoxColumn.Autosizing property is a value other than AutoSizingOption_None adjusts so the columns fit the new size of the control. You must ensure that at least one column enables autosizing when you set this property to True.
  bool returnValue = 1;
}

message ListBox_GetEvents_ClickRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ListBox_GetEvents_ClickResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message ListBox_ReplyToEvent_ClickRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ListBox_ReplyToEvent_ClickResponse {
}

message ListBox_GetEvents_KeyDownRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ListBox_GetEvents_KeyDownResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the KeyCodes constant of the key the user pressed.
  int32 keyCode = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
}

message ListBox_ReplyToEvent_KeyDownRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  // Specifies the KeyCodes constant of the key the user pressed.
  int32 keyCode = 2;
}

message ListBox_ReplyToEvent_KeyDownResponse {
}

message ListBox_GetEvents_KeyPressRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ListBox_GetEvents_KeyPressResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the ASCII value of the pressed key.
  int32 keyAscii = 2;
}

message ListBox_ReplyToEvent_KeyPressRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  // Specifies the ASCII value of the pressed key.
  int32 keyAscii = 2;
}

message ListBox_ReplyToEvent_KeyPressResponse {
}

message ListBox_GetEvents_KeyUpRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ListBox_GetEvents_KeyUpResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the KeyCodes constant of the key the user pressed.
  int32 keyCode = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
}

message ListBox_ReplyToEvent_KeyUpRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ListBox_ReplyToEvent_KeyUpResponse {
}

message ListBox_GetEvents_MouseDownRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ListBox_GetEvents_MouseDownResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  int32 btn = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
  // Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 x = 4;
  // Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 y = 5;
}

message ListBox_ReplyToEvent_MouseDownRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ListBox_ReplyToEvent_MouseDownResponse {
}

message ListBox_GetEvents_MouseMoveRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ListBox_GetEvents_MouseMoveResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies what mouse buttons are pressed. You can use any combination of the MouseButtons constants.
  int32 btn = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
  // Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 x = 4;
  // Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 y = 5;
}

message ListBox_ReplyToEvent_MouseMoveRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ListBox_ReplyToEvent_MouseMoveResponse {
}

message ListBox_GetEvents_MouseUpRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ListBox_GetEvents_MouseUpResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  int32 btn = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
  // Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 x = 4;
  // Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 y = 5;
}

message ListBox_ReplyToEvent_MouseUpRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ListBox_ReplyToEvent_MouseUpResponse {
}

message ListBox_GetEvents_BorderDraggedRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ListBox_GetEvents_BorderDraggedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies which borders the user dragged. Refer to the WhichBorders constants for more information about draggable borders.
  WhichBorders bordersChanged = 2;
  // Specifies the new x-coordinate for the control.
  int32 newX = 3;
  // Specifies the new y-coordinate for the control.
  int32 newY = 4;
  // Specifies the new width for the control.
  int32 newWidth = 5;
  // Specifies the new height for the control.
  int32 newHeight = 6;
  // Specifies whether the event is the final event for the drag operation the user performs.
  bool finalResize = 7;
}

message ListBox_ReplyToEvent_BorderDraggedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ListBox_ReplyToEvent_BorderDraggedResponse {
}

message ListBox_GetEvents_CreateContextMenuRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ListBox_GetEvents_CreateContextMenuResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the Microsoft Windows menu handle (HMENU). When you add menu items to the menu handle, the control displays them in a context menu. Use the Commands.InsertIntoWin32Menu method to insert TestStand commands into the menu.
  // 
  // You can also use the menu functions in the Windows Software Development Kit (SDK) to add other menu items; however, these menu items do not have an associated TestStand command. When you select an item without a TestStand command, the control creates and executes a Command object of kind CommandKind_Custom. The control stores the menu item identifier, such as resource ID or command ID, as a long in the Command.UserData property, and as a decimal string in the command display name. You can handle either the ApplicationMgr.PreCommandExecute or ApplicationMgr.PostCommandExecute event to receive a notification when the user selects a menu item you insert with the Windows SDK.
  // 
  // When you close the context menu, the control disposes of the menu items. You do not need to dispose of the menu items you insert.
  int32 menuHandle = 2;
  // Specifies the horizontal position of right-clicking, relative to the control.
  int32 x = 3;
  // Specifies the vertical position of right-clicking, relative to the control.
  int32 y = 4;
}

message ListBox_ReplyToEvent_CreateContextMenuRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ListBox_ReplyToEvent_CreateContextMenuResponse {
}

message ListBox_GetEvents_ConnectionActivityRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ListBox_GetEvents_ConnectionActivityResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the type of change.
  ConnectionActivityTypes activity = 2;
}

message ListBox_ReplyToEvent_ConnectionActivityRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ListBox_ReplyToEvent_ConnectionActivityResponse {
}

message ListBox_GetEvents_DblClickRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ListBox_GetEvents_DblClickResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message ListBox_ReplyToEvent_DblClickRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ListBox_ReplyToEvent_DblClickResponse {
}

message ListBox_GetEvents_ColumnsResizedRequest {
  // The id of the ListBox object.
  ListBoxInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ListBox_GetEvents_ColumnsResizedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message ListBox_ReplyToEvent_ColumnsResizedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ListBox_ReplyToEvent_ColumnsResizedResponse {
}

// ReportView
//
// Connect an ExecutionView Manager control to a ReportView control to display the report for the selected execution.
//
service ReportView {
  // Service: ReportView
  //
  // Creates a new ReportView instance
  //
  // ReportViewRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportViewInstance - The id of the ReportView object.
  //
  // ReportViewResponse - The response message from the server. It provides the return value.
  //    - returnValue: ReportViewInstance - The return type of the ReportView object.
  //
  rpc ReportView(ReportView_ReportViewRequest) returns (ReportView_ReportViewResponse);

  // Method: PrintReport
  //
  // Prints the current report.
  //
  // ReportView_PrintReportRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ReportViewInstance - The id of the ReportView object.
  //    - showPrintDialog: bool - Pass True to launch the Print dialog box, in which you can select a printer for printing the report.
  //
  // ReportView_PrintReportResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc PrintReport(ReportView_PrintReportRequest) returns (ReportView_PrintReportResponse);
  
  
  // Method: UpdateFromExecution
  //
  // Updates the content of the control from an Execution object.
  //
  // This method changes the report style of the control to the style the report uses. When you connect this control to an ExecutionView Manager control, you do not need to call this method because the connection updates this control when the report for the selected execution changes.
  //
  // ReportView_UpdateFromExecutionRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: ReportViewInstance - The id of the ReportView object.
  //    - exec: ExecutionInstance - Specifies the execution from which the ReportView control obtains the report.
  //
  // ReportView_UpdateFromExecutionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc UpdateFromExecution(ReportView_UpdateFromExecutionRequest) returns (ReportView_UpdateFromExecutionResponse);
  
  
  // Method: GetHTMLCtrl
  //
  // Note: This method is obsolete.
  //
  // Returns the handle to the WebBrowser control this control uses to display HTML and XML reports.
  // Use this handle to access methods and properties of the WebBrowser control. Refer to Microsoft MSDN documentation for more information about WebBrowser control methods and properties.
  //
  // ReportView_GetHTMLCtrlRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportViewInstance - The id of the ReportView object.
  //
  // ReportView_GetHTMLCtrlResponse - The response message from the server. It provides the return value.
  //    - returnValue: ObjectInstance - The return type of the Object object.
  //
  rpc GetHTMLCtrl(ReportView_GetHTMLCtrlRequest) returns (ReportView_GetHTMLCtrlResponse);
  
  
  // Method: GetRichEditCtrl
  //
  // Returns the Window handle to the RichText control this control uses to display text reports.
  //
  // You can use a returned Window handle with the Microsoft Windows API functions.
  //
  // ReportView_GetRichEditCtrlRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportViewInstance - The id of the ReportView object.
  //
  // ReportView_GetRichEditCtrlResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - The return type of the Int32 object.
  //
  rpc GetRichEditCtrl(ReportView_GetRichEditCtrlRequest) returns (ReportView_GetRichEditCtrlResponse);
  
  
  // Method: UpdateFromFile
  //
  // Updates the content of the control from a file.
  //
  // The extension of the fileName parameter determines the report style of the control. For example, if fileName is C:\Reports\MyReport.html, the style is HTML.
  // Note: This method returns an error if the ReportView control is currently attached to an execution.
  //
  // ReportView_UpdateFromFileRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportViewInstance - The id of the ReportView object.
  //
  // ReportView_UpdateFromFileResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc UpdateFromFile(ReportView_UpdateFromFileRequest) returns (ReportView_UpdateFromFileResponse);
  
  

  // Property: ToolBarVisible
  //
  // Specifies whether the control displays a toolbar.
  //
  // ReportView_Set_ToolBarVisibleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportViewInstance - The id of the ReportView object.
  //    - val: bool - Specifies whether the control displays a toolbar. 
  //
  // ReportView_Set_ToolBarVisibleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ReportView_Get_ToolBarVisibleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportViewInstance - The id of the ReportView object.
  //
  // ReportView_Get_ToolBarVisibleResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the control displays a toolbar. 
  //
  rpc Set_ToolBarVisible(ReportView_Set_ToolBarVisibleRequest) returns (ReportView_Set_ToolBarVisibleResponse);
  rpc Get_ToolBarVisible(ReportView_Get_ToolBarVisibleRequest) returns (ReportView_Get_ToolBarVisibleResponse);
  
  
  // Property: LargeIcons
  //
  // When this property is True, the control displays large icons in the toolbar. When this property is False, the control displays small icons in the toolbar.
  //
  // ReportView_Set_LargeIconsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportViewInstance - The id of the ReportView object.
  //    - val: bool - When this property is True, the control displays large icons in the toolbar. When this property is False, the control displays small icons in the toolbar. 
  //
  // ReportView_Set_LargeIconsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ReportView_Get_LargeIconsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportViewInstance - The id of the ReportView object.
  //
  // ReportView_Get_LargeIconsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When this property is True, the control displays large icons in the toolbar. When this property is False, the control displays small icons in the toolbar. 
  //
  rpc Set_LargeIcons(ReportView_Set_LargeIconsRequest) returns (ReportView_Set_LargeIconsResponse);
  rpc Get_LargeIcons(ReportView_Get_LargeIconsRequest) returns (ReportView_Get_LargeIconsResponse);
  
  
  // Property: ToolBarTextStyle
  //
  // Specifies how the control displays the text for the toolbar buttons.
  //
  // ReportView_Set_ToolBarTextStyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportViewInstance - The id of the ReportView object.
  //    - val: ToolBarTextStyles - Specifies how the control displays the text for the toolbar buttons. 
  //
  // ReportView_Set_ToolBarTextStyleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ReportView_Get_ToolBarTextStyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportViewInstance - The id of the ReportView object.
  //
  // ReportView_Get_ToolBarTextStyleResponse - The response message from the server. It provides the return value.
  //    - returnValue: ToolBarTextStyles - Specifies how the control displays the text for the toolbar buttons. 
  //
  rpc Set_ToolBarTextStyle(ReportView_Set_ToolBarTextStyleRequest) returns (ReportView_Set_ToolBarTextStyleResponse);
  rpc Get_ToolBarTextStyle(ReportView_Get_ToolBarTextStyleRequest) returns (ReportView_Get_ToolBarTextStyleResponse);
  
  
  // Property: ButtonsVisible
  //
  // Specifies which buttons are visible in the toolbar of the control. Use any combination of the ReportViewButtons constants. Use the bitwise-OR operator to specify more than one value.
  //
  // ReportView_Set_ButtonsVisibleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportViewInstance - The id of the ReportView object.
  //    - val: int32 - Specifies which buttons are visible in the toolbar of the control. Use any combination of the ReportViewButtons constants. Use the bitwise-OR operator to specify more than one value. 
  //
  // ReportView_Set_ButtonsVisibleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ReportView_Get_ButtonsVisibleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportViewInstance - The id of the ReportView object.
  //
  // ReportView_Get_ButtonsVisibleResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies which buttons are visible in the toolbar of the control. Use any combination of the ReportViewButtons constants. Use the bitwise-OR operator to specify more than one value. 
  //
  rpc Set_ButtonsVisible(ReportView_Set_ButtonsVisibleRequest) returns (ReportView_Set_ButtonsVisibleResponse);
  rpc Get_ButtonsVisible(ReportView_Get_ButtonsVisibleRequest) returns (ReportView_Get_ButtonsVisibleResponse);
  
  
  // Property: TextReportFont
  //
  // Specifies the current font of the text used when displaying text reports. This font is used when the value of the ReportView.TextReportFontSource property is FontSource_UseFontProperty.
  //
  // ReportView_Set_TextReportFontRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportViewInstance - The id of the ReportView object.
  //    - val: IFontDispInstance - Specifies the current font of the text used when displaying text reports. This font is used when the value of the ReportView.TextReportFontSource property is FontSource_UseFontProperty. 
  //
  // ReportView_Set_TextReportFontResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ReportView_Get_TextReportFontRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportViewInstance - The id of the ReportView object.
  //
  // ReportView_Get_TextReportFontResponse - The response message from the server. It provides the return value.
  //    - returnValue: IFontDispInstance - Specifies the current font of the text used when displaying text reports. This font is used when the value of the ReportView.TextReportFontSource property is FontSource_UseFontProperty. 
  //
  rpc Set_TextReportFont(ReportView_Set_TextReportFontRequest) returns (ReportView_Set_TextReportFontResponse);
  rpc Get_TextReportFont(ReportView_Get_TextReportFontRequest) returns (ReportView_Get_TextReportFontResponse);
  
  
  // Property: TextReportFontSource
  //
  // Specifies the font the control uses to display text reports.
  // Note: This property does not apply to HTML and XML reports. The default value for this property is FontSource_UseSystemFixedWidthFont.
  //
  // When the value of this property is FontSource_UseFontProperty, the corresponding Font property specifies the particular font the control uses. Otherwise, the control uses the font from the source this property specifies. Refer to the FontSources enumeration for the list of valid font sources.
  // Set this property to a value other than FontSource_UseFontProperty when you expect the font the ReportView.TextReportFont property specifies to not be present on a computer at run time. For example, a font present on an English version of the Microsoft Windows operating system might not be present on a Japanese version of the Windows operating system.
  //
  // ReportView_Set_TextReportFontSourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportViewInstance - The id of the ReportView object.
  //    - val: FontSources - Specifies the font the control uses to display text reports. Note: This property does not apply to HTML and XML reports. The default value for this property is FontSource_UseSystemFixedWidthFont. 
  //
  // ReportView_Set_TextReportFontSourceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ReportView_Get_TextReportFontSourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportViewInstance - The id of the ReportView object.
  //
  // ReportView_Get_TextReportFontSourceResponse - The response message from the server. It provides the return value.
  //    - returnValue: FontSources - Specifies the font the control uses to display text reports. Note: This property does not apply to HTML and XML reports. The default value for this property is FontSource_UseSystemFixedWidthFont. 
  //
  rpc Set_TextReportFontSource(ReportView_Set_TextReportFontSourceRequest) returns (ReportView_Set_TextReportFontSourceResponse);
  rpc Get_TextReportFontSource(ReportView_Get_TextReportFontSourceRequest) returns (ReportView_Get_TextReportFontSourceResponse);
  
  
  // Property: TextReportColor
  //
  // Specifies the color of the text used when displaying reports.
  //
  // ReportView_Set_TextReportColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportViewInstance - The id of the ReportView object.
  //    - val: uint32 - Specifies the color of the text used when displaying reports. 
  //
  // ReportView_Set_TextReportColorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ReportView_Get_TextReportColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportViewInstance - The id of the ReportView object.
  //
  // ReportView_Get_TextReportColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Specifies the color of the text used when displaying reports. 
  //
  rpc Set_TextReportColor(ReportView_Set_TextReportColorRequest) returns (ReportView_Set_TextReportColorResponse);
  rpc Get_TextReportColor(ReportView_Get_TextReportColorRequest) returns (ReportView_Get_TextReportColorResponse);
  
  
  // Property: TextReportBackColor
  //
  // Specifies the background color of the report when displaying text reports.
  //
  // ReportView_Set_TextReportBackColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportViewInstance - The id of the ReportView object.
  //    - val: uint32 - Specifies the background color of the report when displaying text reports. 
  //
  // ReportView_Set_TextReportBackColorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ReportView_Get_TextReportBackColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportViewInstance - The id of the ReportView object.
  //
  // ReportView_Get_TextReportBackColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Specifies the background color of the report when displaying text reports. 
  //
  rpc Set_TextReportBackColor(ReportView_Set_TextReportBackColorRequest) returns (ReportView_Set_TextReportBackColorResponse);
  rpc Get_TextReportBackColor(ReportView_Get_TextReportBackColorRequest) returns (ReportView_Get_TextReportBackColorResponse);
  
  
  // Property: ScaleWithDPI
  //
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  //
  // Some environments scale native controls based on the DPI settings of their display, while other environments do not. The TestStand User Interface Controls are designed to work in all environments.
  // The following are the recommended settings for various platforms:    * LabVIEW, LabWindows/CVI, C#, and Microsoft Visual Basic .NET—Set this property to False.    * Active Template Library (ATL)/Microsoft Foundation Class (MFC)—Set this property to True.
  //
  // ReportView_Set_ScaleWithDPIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportViewInstance - The id of the ReportView object.
  //    - val: bool - Specifies how the control scales based on the dots per inch (DPI) setting. 
  //
  // ReportView_Set_ScaleWithDPIResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // ReportView_Get_ScaleWithDPIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportViewInstance - The id of the ReportView object.
  //
  // ReportView_Get_ScaleWithDPIResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies how the control scales based on the dots per inch (DPI) setting. 
  //
  rpc Set_ScaleWithDPI(ReportView_Set_ScaleWithDPIRequest) returns (ReportView_Set_ScaleWithDPIResponse);
  rpc Get_ScaleWithDPI(ReportView_Get_ScaleWithDPIRequest) returns (ReportView_Get_ScaleWithDPIResponse);
  
  
  // Property: Borders
  //
  // Returns the frame and draggable borders that surround the control.
  //
  // ReportView_Get_BordersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: ReportViewInstance - The id of the ReportView object.
  //
  // ReportView_Get_BordersResponse - The response message from the server. It provides the return value.
  //    - returnValue: BordersInstance - Returns the frame and draggable borders that surround the control. 
  //
  rpc Get_Borders(ReportView_Get_BordersRequest) returns (ReportView_Get_BordersResponse);
  
  

  // Event: BorderDragged
  //
  // Occurs when the user drags a draggable border of a control with the mouse. The event provides the location and size to which you must set the control for the draggable borders to track the mouse cursor. However, you can choose to modify the location or size to which you set the control. For example, you can limit the width of the control so the left edge cannot be dragged off of the visible portion of the window.
  // In addition to changing the size and position of the control, you might also update the sizes and positions of the other controls on the window to account for the change.
  //
  // If you are using LabVIEW, you must add the Horizontal and Vertical components of the origin of the LabVIEW front panel to the newX and newY event parameter values before you can use the newX and newY event parameters to set the ActiveX Container (AxCont) Left and Top properties for the control. To obtain the origin of a LabVIEW front panel, place an ActiveX property node on the block diagram of the VI, right-click the node, and select Link to»Pane from the context menu. Right-click the node again and select Select Property»Origin.
  //
  // The event has a registration method and a reply method.
  // GetEvents_BorderDragged - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_BorderDragged - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ReportView_GetEvents_BorderDraggedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ReportViewInstance - The id of the ReportView object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ReportView_GetEvents_BorderDraggedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - bordersChanged: WhichBorders - Specifies which borders the user dragged. Refer to the WhichBorders constants for more information about draggable borders.
  //  - newX: int32 - Specifies the new x-coordinate for the control.
  //  - newY: int32 - Specifies the new y-coordinate for the control.
  //  - newWidth: int32 - Specifies the new width for the control.
  //  - newHeight: int32 - Specifies the new height for the control.
  //  - finalResize: bool - Specifies whether the event is the final event for the drag operation the user performs.
  //
  // ReportView_ReplyToEvent_BorderDraggedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ReportView_ReplyToEvent_BorderDraggedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_BorderDragged(ReportView_GetEvents_BorderDraggedRequest) returns (stream ReportView_GetEvents_BorderDraggedResponse);
  rpc ReplyToEvent_BorderDragged(ReportView_ReplyToEvent_BorderDraggedRequest) returns (ReportView_ReplyToEvent_BorderDraggedResponse); 
  
  
  // Event: ConnectionActivity
  //
  // Occurs after the connection to a manager control makes a change to a user interface control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_ConnectionActivity - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_ConnectionActivity - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // ReportView_GetEvents_ConnectionActivityRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: ReportViewInstance - The id of the ReportView object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // ReportView_GetEvents_ConnectionActivityResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - activity: ConnectionActivityTypes - Specifies the type of change.
  //
  // ReportView_ReplyToEvent_ConnectionActivityRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // ReportView_ReplyToEvent_ConnectionActivityResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_ConnectionActivity(ReportView_GetEvents_ConnectionActivityRequest) returns (stream ReportView_GetEvents_ConnectionActivityResponse);
  rpc ReplyToEvent_ConnectionActivity(ReportView_ReplyToEvent_ConnectionActivityRequest) returns (ReportView_ReplyToEvent_ConnectionActivityResponse); 
  
  
}
message ReportViewInstance {
  // Specifies the handle of the ReportView instance in the server.
  string id = 1;
}
message ReportView_ReportViewRequest {
}

message ReportView_ReportViewResponse {
  // The return type of the ReportView object.
  ReportViewInstance returnValue = 1;
}

message ReportView_PrintReportRequest {
  // The id of the ReportView object.
  ReportViewInstance instance = 1;
  // Pass True to launch the Print dialog box, in which you can select a printer for printing the report.
  bool showPrintDialog = 2;
}

message ReportView_PrintReportResponse {
}

message ReportView_UpdateFromExecutionRequest {
  // The id of the ReportView object.
  ReportViewInstance instance = 1;
  // Specifies the execution from which the ReportView control obtains the report.
  ExecutionInstance exec = 2;
}

message ReportView_UpdateFromExecutionResponse {
}

message ReportView_GetHTMLCtrlRequest {
  // The id of the ReportView object.
  ReportViewInstance instance = 1;
}

message ReportView_GetHTMLCtrlResponse {
  // The return type of the Object object.
  ObjectInstance returnValue = 1;
}

message ReportView_GetRichEditCtrlRequest {
  // The id of the ReportView object.
  ReportViewInstance instance = 1;
}

message ReportView_GetRichEditCtrlResponse {
  // The return type of the Int32 object.
  int32 returnValue = 1;
}

message ReportView_UpdateFromFileRequest {
  // The id of the ReportView object.
  ReportViewInstance instance = 1;
  // Specifies the full path of the report file.
  string fileName = 2;
}

message ReportView_UpdateFromFileResponse {
}

message ReportView_Set_ToolBarVisibleRequest {
  // The id of the ReportView object.
  ReportViewInstance instance = 1;
  // Specifies whether the control displays a toolbar.
  bool val = 2;
}

message ReportView_Set_ToolBarVisibleResponse {
}

message ReportView_Get_ToolBarVisibleRequest {
  // The id of the ReportView object.
  ReportViewInstance instance = 1;
}

message ReportView_Get_ToolBarVisibleResponse {
  // Specifies whether the control displays a toolbar.
  bool returnValue = 1;
}

message ReportView_Set_LargeIconsRequest {
  // The id of the ReportView object.
  ReportViewInstance instance = 1;
  // When this property is True, the control displays large icons in the toolbar. When this property is False, the control displays small icons in the toolbar.
  bool val = 2;
}

message ReportView_Set_LargeIconsResponse {
}

message ReportView_Get_LargeIconsRequest {
  // The id of the ReportView object.
  ReportViewInstance instance = 1;
}

message ReportView_Get_LargeIconsResponse {
  // When this property is True, the control displays large icons in the toolbar. When this property is False, the control displays small icons in the toolbar.
  bool returnValue = 1;
}

message ReportView_Set_ToolBarTextStyleRequest {
  // The id of the ReportView object.
  ReportViewInstance instance = 1;
  // Specifies how the control displays the text for the toolbar buttons.
  ToolBarTextStyles val = 2;
}

message ReportView_Set_ToolBarTextStyleResponse {
}

message ReportView_Get_ToolBarTextStyleRequest {
  // The id of the ReportView object.
  ReportViewInstance instance = 1;
}

message ReportView_Get_ToolBarTextStyleResponse {
  // Specifies how the control displays the text for the toolbar buttons.
  ToolBarTextStyles returnValue = 1;
}

message ReportView_Set_ButtonsVisibleRequest {
  // The id of the ReportView object.
  ReportViewInstance instance = 1;
  // Specifies which buttons are visible in the toolbar of the control. Use any combination of the ReportViewButtons constants. Use the bitwise-OR operator to specify more than one value.
  ReportViewButtons val = 2;
}

message ReportView_Set_ButtonsVisibleResponse {
}

message ReportView_Get_ButtonsVisibleRequest {
  // The id of the ReportView object.
  ReportViewInstance instance = 1;
}

message ReportView_Get_ButtonsVisibleResponse {
  // Specifies which toolbar buttons are visible.
  ReportViewButtons returnValue = 1;
}

message ReportView_Set_TextReportFontRequest {
  // The id of the ReportView object.
  ReportViewInstance instance = 1;
  // Specifies the current font of the text used when displaying text reports. This font is used when the value of the ReportView.TextReportFontSource property is FontSource_UseFontProperty.
  IFontDispInstance val = 2;
}

message ReportView_Set_TextReportFontResponse {
}

message ReportView_Get_TextReportFontRequest {
  // The id of the ReportView object.
  ReportViewInstance instance = 1;
}

message ReportView_Get_TextReportFontResponse {
  // Specifies the current font of the text used when displaying text reports. This font is used when the value of the ReportView.TextReportFontSource property is FontSource_UseFontProperty.
  IFontDispInstance returnValue = 1;
}

message ReportView_Set_TextReportFontSourceRequest {
  // The id of the ReportView object.
  ReportViewInstance instance = 1;
  // Specifies the font the control uses to display text reports.
  // Note: This property does not apply to HTML and XML reports. The default value for this property is FontSource_UseSystemFixedWidthFont.
  FontSources val = 2;
}

message ReportView_Set_TextReportFontSourceResponse {
}

message ReportView_Get_TextReportFontSourceRequest {
  // The id of the ReportView object.
  ReportViewInstance instance = 1;
}

message ReportView_Get_TextReportFontSourceResponse {
  // Specifies the font the control uses to display text reports.
  // Note: This property does not apply to HTML and XML reports. The default value for this property is FontSource_UseSystemFixedWidthFont.
  FontSources returnValue = 1;
}

message ReportView_Set_TextReportColorRequest {
  // The id of the ReportView object.
  ReportViewInstance instance = 1;
  // Specifies the color of the text used when displaying reports.
  uint32 val = 2;
}

message ReportView_Set_TextReportColorResponse {
}

message ReportView_Get_TextReportColorRequest {
  // The id of the ReportView object.
  ReportViewInstance instance = 1;
}

message ReportView_Get_TextReportColorResponse {
  // Specifies the color of the text used when displaying reports.
  uint32 returnValue = 1;
}

message ReportView_Set_TextReportBackColorRequest {
  // The id of the ReportView object.
  ReportViewInstance instance = 1;
  // Specifies the background color of the report when displaying text reports.
  uint32 val = 2;
}

message ReportView_Set_TextReportBackColorResponse {
}

message ReportView_Get_TextReportBackColorRequest {
  // The id of the ReportView object.
  ReportViewInstance instance = 1;
}

message ReportView_Get_TextReportBackColorResponse {
  // Specifies the background color of the report when displaying text reports.
  uint32 returnValue = 1;
}

message ReportView_Set_ScaleWithDPIRequest {
  // The id of the ReportView object.
  ReportViewInstance instance = 1;
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  bool val = 2;
}

message ReportView_Set_ScaleWithDPIResponse {
}

message ReportView_Get_ScaleWithDPIRequest {
  // The id of the ReportView object.
  ReportViewInstance instance = 1;
}

message ReportView_Get_ScaleWithDPIResponse {
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  bool returnValue = 1;
}

message ReportView_Get_BordersRequest {
  // The id of the ReportView object.
  ReportViewInstance instance = 1;
}

message ReportView_Get_BordersResponse {
  // Returns the frame and draggable borders that surround the control.
  BordersInstance returnValue = 1;
}

message ReportView_GetEvents_BorderDraggedRequest {
  // The id of the ReportView object.
  ReportViewInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ReportView_GetEvents_BorderDraggedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies which borders the user dragged. Refer to the WhichBorders constants for more information about draggable borders.
  WhichBorders bordersChanged = 2;
  // Specifies the new x-coordinate for the control.
  int32 newX = 3;
  // Specifies the new y-coordinate for the control.
  int32 newY = 4;
  // Specifies the new width for the control.
  int32 newWidth = 5;
  // Specifies the new height for the control.
  int32 newHeight = 6;
  // Specifies whether the event is the final event for the drag operation the user performs.
  bool finalResize = 7;
}

message ReportView_ReplyToEvent_BorderDraggedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ReportView_ReplyToEvent_BorderDraggedResponse {
}

message ReportView_GetEvents_ConnectionActivityRequest {
  // The id of the ReportView object.
  ReportViewInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message ReportView_GetEvents_ConnectionActivityResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the type of change.
  ConnectionActivityTypes activity = 2;
}

message ReportView_ReplyToEvent_ConnectionActivityRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message ReportView_ReplyToEvent_ConnectionActivityResponse {
}

// SequenceView
//
// Connect a SequenceFileView Manager control or an ExecutionView Manager control to a SequenceView control to display the steps of a sequence from a selected file or execution. The SequenceView control displays the steps in a list with columns you specify when you configure the control.
// The SequenceView control maintains a cursor that indicates the last active item you clicked using the mouse or highlighted using the arrow keys. The control denotes the cursor using a dotted box that outlines the step. Use the SequenceView control to select one or more steps at a time.
// Use the SequenceFileView Manager control connected to the SequenceView control to control which sequence, step groups, and steps are selected in the file and to track the expansion of the step groups.
//
service SequenceView {
  // Service: SequenceView
  //
  // Creates a new SequenceView instance
  //
  // SequenceViewRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceViewResponse - The response message from the server. It provides the return value.
  //    - returnValue: SequenceViewInstance - The return type of the SequenceView object.
  //
  rpc SequenceView(SequenceView_SequenceViewRequest) returns (SequenceView_SequenceViewResponse);

  // Method: ItemIndexToStep
  //
  // Converts from an item index to a step group and step index.
  //
  // SequenceView_ItemIndexToStepRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_ItemIndexToStepResponse - The response message from the server. It provides the return value and output parameters.
  //    - returnValue: bool - Returns True when the item at itemIndex is a step. Returns False when the item is a step group start or end marker. 
  //    - group: StepGroup - Returns the step group of the specified step.
  //    - stepIndex: int3 - Returns the index within the step group for the specified step. Returns -1 when the item is a start marker. Returns the number of steps in the step group when the item is an end marker.
  //
  rpc ItemIndexToStep(SequenceView_ItemIndexToStepRequest) returns (SequenceView_ItemIndexToStepResponse);
  
  
  // Method: StepToItemIndex
  //
  // Converts from a step group and step index to an index into the list of items the control displays.
  //
  // SequenceView_StepToItemIndexRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - group: StepGroups - Specifies a step group.
  //    - stepIndex: int32 - Specifies an index into the specified step group.
  //
  // SequenceView_StepToItemIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a zero-based index. The index identifies the item that displays the specified step. When the step is within a collapsed group, the index identifies the step group start marker. 
  //
  rpc StepToItemIndex(SequenceView_StepToItemIndexRequest) returns (SequenceView_StepToItemIndexResponse);
  
  
  // Method: EditLabel
  //
  // Enters label-editing mode for the active item in the step list. Label-editing mode enables you to edit the item text in the first column of the SequenceView listbox control.
  //
  // The SequenceView control automatically attempts to enter label-editing mode when you click the active item in the first column or when you press <F2> when the SequenceView control has the keyboard focus.
  //
  // SequenceView_EditLabelRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_EditLabelResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc EditLabel(SequenceView_EditLabelRequest) returns (SequenceView_EditLabelResponse);
  
  
  // Method: BeginUpdate
  //
  // Prevents the SequenceView control from drawing until the SequenceView.EndUpdate method is called.
  //
  // Call this method to make multiple changes to the selection or the list of steps without updating the display.
  //
  // SequenceView_BeginUpdateRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_BeginUpdateResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc BeginUpdate(SequenceView_BeginUpdateRequest) returns (SequenceView_BeginUpdateResponse);
  
  
  // Method: EndUpdate
  //
  // Allows the SequenceView control to resume updating, following a call to BeginUpdate.
  //
  // After making edits to the sequence, call this method to allow the display to update.
  //
  // SequenceView_EndUpdateRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_EndUpdateResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc EndUpdate(SequenceView_EndUpdateRequest) returns (SequenceView_EndUpdateResponse);
  
  
  // Method: HitTest
  //
  // Returns the zero-based index of the step at the location you specify. When the location is on the End step, the index is equal to the number of steps in the step group the control displays. A value of -1 indicates the location is not on a step.
  //
  // Use this method to determine the item to which the given coordinates belong. For example, when a user clicks on the control, you might want to determine the item the user clicked.
  //
  // SequenceView_HitTestRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - x: int32 - Specifies the x-coordinate of the location to test, in pixels, relative to the control. 
  //    - y: int32 - Specifies the y-coordinate of the location to test, in pixels, relative to the control. 
  //
  // SequenceView_HitTestResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a numeric item index. 
  //
  rpc HitTest(SequenceView_HitTestRequest) returns (SequenceView_HitTestResponse);
  
  
  // Method: Localize
  //
  // Localizes the captions of the columns in the SequenceView control.
  //
  // First, update a .ini file located in the TestStand Language directory with the required strings. Second, use the string tags in the .ini file as the column captions for the control.
  // When you call this method, the control replaces the column captions with the strings from the .ini file. If a caption is not a tag in the .ini file, the caption does not change.
  //
  // SequenceView_LocalizeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - sectionName: string - Specifies the name of the section in the language files that contains the localized text.
  //
  // SequenceView_LocalizeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Localize(SequenceView_LocalizeRequest) returns (SequenceView_LocalizeResponse);
  
  

  // Property: hWnd
  //
  // Returns a Window handle for the control.
  //
  // You can use the returned Window handle with the Microsoft Windows API functions.
  // Note: Using Windows API functions with this property can cause undefined behavior.
  //
  // SequenceView_Get_hWndRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_hWndResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a Window handle for the control. 
  //
  rpc Get_hWnd(SequenceView_Get_hWndRequest) returns (SequenceView_Get_hWndResponse);
  
  
  // Property: TextColor
  //
  // Specifies the default text color for the item text.
  //
  // Note: You can override this default color on a per-row, per-column basis using the SequenceView.ItemTextColorExpression and SeqViewColumn.TextColorExpression properties.
  //
  // SequenceView_Set_TextColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: uint32 - Specifies the default text color for the item text. 
  //
  // SequenceView_Set_TextColorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_TextColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_TextColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Specifies the default text color for the item text. 
  //
  rpc Set_TextColor(SequenceView_Set_TextColorRequest) returns (SequenceView_Set_TextColorResponse);
  rpc Get_TextColor(SequenceView_Get_TextColorRequest) returns (SequenceView_Get_TextColorResponse);
  
  
  // Property: ShowComments
  //
  // Specifies whether the control displays step comments.
  //
  // The control displays step comments above the step. Although step comments can be of any length, you can use the SequenceView.MaxCommentsHeight property to limit the number of comment lines that display for each step.
  //
  // SequenceView_Set_ShowCommentsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: bool - Specifies whether the control displays step comments. 
  //
  // SequenceView_Set_ShowCommentsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_ShowCommentsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_ShowCommentsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the control displays step comments. 
  //
  rpc Set_ShowComments(SequenceView_Set_ShowCommentsRequest) returns (SequenceView_Set_ShowCommentsResponse);
  rpc Get_ShowComments(SequenceView_Get_ShowCommentsRequest) returns (SequenceView_Get_ShowCommentsResponse);
  
  
  // Property: CommentsColor
  //
  // Specifies the color of the comments for step items.
  //
  // SequenceView_Set_CommentsColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: uint32 - Specifies the color of the comments for step items. 
  //
  // SequenceView_Set_CommentsColorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_CommentsColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_CommentsColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Specifies the color of the comments for step items. 
  //
  rpc Set_CommentsColor(SequenceView_Set_CommentsColorRequest) returns (SequenceView_Set_CommentsColorResponse);
  rpc Get_CommentsColor(SequenceView_Get_CommentsColorRequest) returns (SequenceView_Get_CommentsColorResponse);
  
  
  // Property: LinesColor
  //
  // Specifies the color of gridlines.
  //
  // SequenceView_Set_LinesColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: uint32 - Specifies the color of gridlines. 
  //
  // SequenceView_Set_LinesColorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_LinesColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_LinesColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Specifies the color of gridlines. 
  //
  rpc Set_LinesColor(SequenceView_Set_LinesColorRequest) returns (SequenceView_Set_LinesColorResponse);
  rpc Get_LinesColor(SequenceView_Get_LinesColorRequest) returns (SequenceView_Get_LinesColorResponse);
  
  
  // Property: ShowCommentsBars
  //
  // When this property is True and the SequenceView.ShowComments property is True, vertical lines display to the left of the step comments.
  //
  // SequenceView_Set_ShowCommentsBarsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: bool - When this property is True and the SequenceView.ShowComments property is True, vertical lines display to the left of the step comments. 
  //
  // SequenceView_Set_ShowCommentsBarsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_ShowCommentsBarsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_ShowCommentsBarsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - When this property is True and the SequenceView.ShowComments property is True, vertical lines display to the left of the step comments. 
  //
  rpc Set_ShowCommentsBars(SequenceView_Set_ShowCommentsBarsRequest) returns (SequenceView_Set_ShowCommentsBarsResponse);
  rpc Get_ShowCommentsBars(SequenceView_Get_ShowCommentsBarsRequest) returns (SequenceView_Get_ShowCommentsBarsResponse);
  
  
  // Property: BackColor
  //
  // Specifies the default background color.
  //
  // Note: You can override this default color on a per-row, per-column basis using the SequenceView.ItemBackColorExpression and SeqViewColumn.BackColorExpression properties.Note: When using the SequenceView control as an ExecutionViewConnection, use the SequenceView.BackColor property only when the value of the ExecutionViewConnection.Options property is ExecutionViewConnection_IgnoreColors.
  //
  // SequenceView_Set_BackColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: uint32 - Specifies the default background color. 
  //
  // SequenceView_Set_BackColorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_BackColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_BackColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Specifies the default background color. 
  //
  rpc Set_BackColor(SequenceView_Set_BackColorRequest) returns (SequenceView_Set_BackColorResponse);
  rpc Get_BackColor(SequenceView_Get_BackColorRequest) returns (SequenceView_Get_BackColorResponse);
  
  
  // Property: TextFont
  //
  // Specifies the font for the item text when the value of the SequenceView.TextFontSource property is FontSource_UseFontProperty.
  //
  // SequenceView_Set_TextFontRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: IFontDispInstance - Specifies the font for the item text when the value of the SequenceView.TextFontSource property is FontSource_UseFontProperty. 
  //
  // SequenceView_Set_TextFontResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_TextFontRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_TextFontResponse - The response message from the server. It provides the return value.
  //    - returnValue: IFontDispInstance - Specifies the font for the item text when the value of the SequenceView.TextFontSource property is FontSource_UseFontProperty. 
  //
  rpc Set_TextFont(SequenceView_Set_TextFontRequest) returns (SequenceView_Set_TextFontResponse);
  rpc Get_TextFont(SequenceView_Get_TextFontRequest) returns (SequenceView_Get_TextFontResponse);
  
  
  // Property: CommentsFont
  //
  // Specifies the font for comments when the value of the SequenceView.CommentsFontSource property is FontSource_UseFontProperty.
  // 
  //
  // SequenceView_Set_CommentsFontRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: IFontDispInstance - Specifies the font for comments when the value of the SequenceView.CommentsFontSource property is FontSource_UseFontProperty.  
  //
  // SequenceView_Set_CommentsFontResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_CommentsFontRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_CommentsFontResponse - The response message from the server. It provides the return value.
  //    - returnValue: IFontDispInstance - Specifies the font for comments when the value of the SequenceView.CommentsFontSource property is FontSource_UseFontProperty.  
  //
  rpc Set_CommentsFont(SequenceView_Set_CommentsFontRequest) returns (SequenceView_Set_CommentsFontResponse);
  rpc Get_CommentsFont(SequenceView_Get_CommentsFontRequest) returns (SequenceView_Get_CommentsFontResponse);
  
  
  // Property: HeaderFont
  //
  // Specifies the font for the header, which labels each column when the value of the SequenceView.HeaderFontSource property is FontSource_UseFontProperty.
  //
  // SequenceView_Set_HeaderFontRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: IFontDispInstance - Specifies the font for the header, which labels each column when the value of the SequenceView.HeaderFontSource property is FontSource_UseFontProperty. 
  //
  // SequenceView_Set_HeaderFontResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_HeaderFontRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_HeaderFontResponse - The response message from the server. It provides the return value.
  //    - returnValue: IFontDispInstance - Specifies the font for the header, which labels each column when the value of the SequenceView.HeaderFontSource property is FontSource_UseFontProperty. 
  //
  rpc Set_HeaderFont(SequenceView_Set_HeaderFontRequest) returns (SequenceView_Set_HeaderFontResponse);
  rpc Get_HeaderFont(SequenceView_Get_HeaderFontRequest) returns (SequenceView_Get_HeaderFontResponse);
  
  
  // Property: ShowItemTipStrips
  //
  // Specifies whether the control displays tooltips.
  //
  // Item tooltips are the tooltips that appear when you hover over a partially visible item with the mouse. Tooltips allow you to see the full caption of a partially visible item.
  //
  // SequenceView_Set_ShowItemTipStripsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: bool - Specifies whether the control displays tooltips. 
  //
  // SequenceView_Set_ShowItemTipStripsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_ShowItemTipStripsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_ShowItemTipStripsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the control displays tooltips. 
  //
  rpc Set_ShowItemTipStrips(SequenceView_Set_ShowItemTipStripsRequest) returns (SequenceView_Set_ShowItemTipStripsResponse);
  rpc Get_ShowItemTipStrips(SequenceView_Get_ShowItemTipStripsRequest) returns (SequenceView_Get_ShowItemTipStripsResponse);
  
  
  // Property: Columns
  //
  // Returns the collection of columns.
  //
  // SequenceView_Get_ColumnsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_ColumnsResponse - The response message from the server. It provides the return value.
  //    - returnValue: SeqViewColumnsInstance - Returns the collection of columns. 
  //
  rpc Get_Columns(SequenceView_Get_ColumnsRequest) returns (SequenceView_Get_ColumnsResponse);
  
  
  // Property: MaxCommentsHeight
  //
  // Specifies the maximum number of comment lines visible per step.
  //
  // Use this property to specify the maximum number of comment lines a step can display. By default, the value of this property is 3.
  //
  // SequenceView_Set_MaxCommentsHeightRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: int32 - Specifies the maximum number of comment lines visible per step. 
  //
  // SequenceView_Set_MaxCommentsHeightResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_MaxCommentsHeightRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_MaxCommentsHeightResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the maximum number of comment lines visible per step. 
  //
  rpc Set_MaxCommentsHeight(SequenceView_Set_MaxCommentsHeightRequest) returns (SequenceView_Set_MaxCommentsHeightResponse);
  rpc Get_MaxCommentsHeight(SequenceView_Get_MaxCommentsHeightRequest) returns (SequenceView_Get_MaxCommentsHeightResponse);
  
  
  // Property: Cursor
  //
  // Specifies the cursor index. The cursor indicates the active item in the view using a dotted box that outlines the item. Setting this property clears the current selection and selects the specified item.
  //
  // SequenceView_Set_CursorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: int32 - Specifies the cursor index. The cursor indicates the active item in the view using a dotted box that outlines the item. Setting this property clears the current selection and selects the specified item. 
  //
  // SequenceView_Set_CursorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_CursorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_CursorResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the cursor index. The cursor indicates the active item in the view using a dotted box that outlines the item. Setting this property clears the current selection and selects the specified item. 
  //
  rpc Set_Cursor(SequenceView_Set_CursorRequest) returns (SequenceView_Set_CursorResponse);
  rpc Get_Cursor(SequenceView_Get_CursorRequest) returns (SequenceView_Get_CursorResponse);
  
  
  // Property: HorizLines
  //
  // Specifies whether the horizontal grid lines are visible.
  //
  // SequenceView_Set_HorizLinesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: bool - Specifies whether the horizontal grid lines are visible. 
  //
  // SequenceView_Set_HorizLinesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_HorizLinesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_HorizLinesResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the horizontal grid lines are visible. 
  //
  rpc Set_HorizLines(SequenceView_Set_HorizLinesRequest) returns (SequenceView_Set_HorizLinesResponse);
  rpc Get_HorizLines(SequenceView_Get_HorizLinesRequest) returns (SequenceView_Get_HorizLinesResponse);
  
  
  // Property: VertLines
  //
  // Specifies whether the vertical grid lines are visible.
  //
  // SequenceView_Set_VertLinesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: bool - Specifies whether the vertical grid lines are visible. 
  //
  // SequenceView_Set_VertLinesResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_VertLinesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_VertLinesResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the vertical grid lines are visible. 
  //
  rpc Set_VertLines(SequenceView_Set_VertLinesRequest) returns (SequenceView_Set_VertLinesResponse);
  rpc Get_VertLines(SequenceView_Get_VertLinesRequest) returns (SequenceView_Get_VertLinesResponse);
  
  
  // Property: CommentsOffset
  //
  // Specifies the number of pixels to indent the comment text and comment bar to the right.
  //
  // SequenceView_Set_CommentsOffsetRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: int32 - Specifies the number of pixels to indent the comment text and comment bar to the right. 
  //
  // SequenceView_Set_CommentsOffsetResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_CommentsOffsetRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_CommentsOffsetResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the number of pixels to indent the comment text and comment bar to the right. 
  //
  rpc Set_CommentsOffset(SequenceView_Set_CommentsOffsetRequest) returns (SequenceView_Set_CommentsOffsetResponse);
  rpc Get_CommentsOffset(SequenceView_Get_CommentsOffsetRequest) returns (SequenceView_Get_CommentsOffsetResponse);
  
  
  // Property: AutoSizeColumns
  //
  // Specifies to make all columns fit within the width of the control. When the control resizes, the width of each column for which the SeqViewColumn.Autosizing property is a value other than AutoSizingOption_None adjusts so the columns fit the new size of the control. You must ensure that at least one column enables autosizing when you set this property to True.
  //
  // When this property is True, the sum of all column widths always equals the width of the control and the horizontal scrollbar is not visible.
  // When this property is False, you can resize the columns to any width and the horizontal scrollbar appears as needed.
  //
  // SequenceView_Set_AutoSizeColumnsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: bool - Specifies to make all columns fit within the width of the control. When the control resizes, the width of each column for which the SeqViewColumn.Autosizing property is a value other than AutoSizingOption_None adjusts so the columns fit the new size of the control. You must ensure that at least one column enables autosizing when you set this property to True. 
  //
  // SequenceView_Set_AutoSizeColumnsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_AutoSizeColumnsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_AutoSizeColumnsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies to make all columns fit within the width of the control. When the control resizes, the width of each column for which the SeqViewColumn.Autosizing property is a value other than AutoSizingOption_None adjusts so the columns fit the new size of the control. You must ensure that at least one column enables autosizing when you set this property to True. 
  //
  rpc Set_AutoSizeColumns(SequenceView_Set_AutoSizeColumnsRequest) returns (SequenceView_Set_AutoSizeColumnsResponse);
  rpc Get_AutoSizeColumns(SequenceView_Get_AutoSizeColumnsRequest) returns (SequenceView_Get_AutoSizeColumnsResponse);
  
  
  // Property: ItemBackColorExpression
  //
  // Specifies an expression which the SequenceView control uses at run time to determine the background color for individual items. This expression overrides the item color the SequenceView.BackColor property defines.
  //
  // The expression you specify must return a numeric color value. When you do not want to change the background color, return -1, as the following example shows:
  // Step.Result.Status == "Failed" ? tsRed : -1
  // When you use this expression string, the SequenceView control makes the background for all failed steps red.
  // If empty, the control ignores this property.
  //
  // SequenceView_Set_ItemBackColorExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: string - Specifies an expression which the SequenceView control uses at run time to determine the background color for individual items. This expression overrides the item color the SequenceView.BackColor property defines. 
  //
  // SequenceView_Set_ItemBackColorExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_ItemBackColorExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_ItemBackColorExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies an expression which the SequenceView control uses at run time to determine the background color for individual items. This expression overrides the item color the SequenceView.BackColor property defines. 
  //
  rpc Set_ItemBackColorExpression(SequenceView_Set_ItemBackColorExpressionRequest) returns (SequenceView_Set_ItemBackColorExpressionResponse);
  rpc Get_ItemBackColorExpression(SequenceView_Get_ItemBackColorExpressionRequest) returns (SequenceView_Get_ItemBackColorExpressionResponse);
  
  
  // Property: ItemTextColorExpression
  //
  // Specifies an expression which the SequenceView control uses at run time to determine the text color for individual items. This expression overrides the text color the SequenceView.TextColor property defines.
  //
  // The expression you specify must return a numeric color value. When you do not want to change the background color, return -1, as the following example shows:
  // Step.Result.Status == "Failed" ? tsRed : -1
  // When you use this expression string, the SequenceView control makes the text color of all failed steps red.
  // If empty, the control ignores this property.
  //
  // SequenceView_Set_ItemTextColorExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: string - Specifies an expression which the SequenceView control uses at run time to determine the text color for individual items. This expression overrides the text color the SequenceView.TextColor property defines. 
  //
  // SequenceView_Set_ItemTextColorExpressionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_ItemTextColorExpressionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_ItemTextColorExpressionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies an expression which the SequenceView control uses at run time to determine the text color for individual items. This expression overrides the text color the SequenceView.TextColor property defines. 
  //
  rpc Set_ItemTextColorExpression(SequenceView_Set_ItemTextColorExpressionRequest) returns (SequenceView_Set_ItemTextColorExpressionResponse);
  rpc Get_ItemTextColorExpression(SequenceView_Get_ItemTextColorExpressionRequest) returns (SequenceView_Get_ItemTextColorExpressionResponse);
  
  
  // Property: IconSize
  //
  // Specifies the size of icons in the SequenceView control.
  //
  // Icons are always square. For example, when you specify an icon size of 32, the dimensions of the icons are 32 × 32 pixels.
  //
  // SequenceView_Set_IconSizeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: int32 - Specifies the size of icons in the SequenceView control. 
  //
  // SequenceView_Set_IconSizeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_IconSizeRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_IconSizeResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the size of icons in the SequenceView control. 
  //
  rpc Set_IconSize(SequenceView_Set_IconSizeRequest) returns (SequenceView_Set_IconSizeResponse);
  rpc Get_IconSize(SequenceView_Get_IconSizeRequest) returns (SequenceView_Get_IconSizeResponse);
  
  
  // Property: HeaderFontSource
  //
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  //
  // When the value of this property is FontSource_UseFontProperty, the corresponding Font property specifies the particular font the control uses. Otherwise, the control uses the font from the source this property specifies.
  // Set this property to a value other than FontSource_UseFontProperty if you expect the font the SequenceView.HeaderFont property specifies to not be present on a computer at run time. For example, a font present on an English version of the Microsoft Windows operating system might not be present on a Japanese version of the Windows operating system.
  //
  // SequenceView_Set_HeaderFontSourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: FontSources - Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont. 
  //
  // SequenceView_Set_HeaderFontSourceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_HeaderFontSourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_HeaderFontSourceResponse - The response message from the server. It provides the return value.
  //    - returnValue: FontSources - Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont. 
  //
  rpc Set_HeaderFontSource(SequenceView_Set_HeaderFontSourceRequest) returns (SequenceView_Set_HeaderFontSourceResponse);
  rpc Get_HeaderFontSource(SequenceView_Get_HeaderFontSourceRequest) returns (SequenceView_Get_HeaderFontSourceResponse);
  
  
  // Property: CommentsFontSource
  //
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  //
  // When the value of this property is FontSource_UseFontProperty, the corresponding Font property specifies the particular font the control uses. Otherwise, the control uses the font from the source this property specifies. Refer to the FontSources enumeration for the list of valid font sources.
  // Set this property to a value other than FontSource_UseFontProperty if you expect the font the SequenceView.CommentsFont property specifies to not be present on a computer at run time. For example, a font present on an English version of the Microsoft Windows operating system might not be present on a Japanese version of the Windows operating system.
  //
  // SequenceView_Set_CommentsFontSourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: FontSources - Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont. 
  //
  // SequenceView_Set_CommentsFontSourceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_CommentsFontSourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_CommentsFontSourceResponse - The response message from the server. It provides the return value.
  //    - returnValue: FontSources - Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont. 
  //
  rpc Set_CommentsFontSource(SequenceView_Set_CommentsFontSourceRequest) returns (SequenceView_Set_CommentsFontSourceResponse);
  rpc Get_CommentsFontSource(SequenceView_Get_CommentsFontSourceRequest) returns (SequenceView_Get_CommentsFontSourceResponse);
  
  
  // Property: TextFontSource
  //
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  //
  // When the value of this property is FontSource_UseFontProperty, the corresponding Font property specifies the particular font the control uses. Otherwise, the control uses the font from the source this property specifies.
  // Set the FontSource property to a value other than FontSource_UseFontProperty when you expect the font the Font property specifies to not be present on a computer at run time. For example, a font present on an English version of the Microsoft Windows operating system might not be present on a Japanese version of the Windows operating system.
  //
  // SequenceView_Set_TextFontSourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: FontSources - Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont. 
  //
  // SequenceView_Set_TextFontSourceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_TextFontSourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_TextFontSourceResponse - The response message from the server. It provides the return value.
  //    - returnValue: FontSources - Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont. 
  //
  rpc Set_TextFontSource(SequenceView_Set_TextFontSourceRequest) returns (SequenceView_Set_TextFontSourceResponse);
  rpc Get_TextFontSource(SequenceView_Get_TextFontSourceRequest) returns (SequenceView_Get_TextFontSourceResponse);
  
  
  // Property: ScaleWithDPI
  //
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  //
  // Some environments scale native controls based on the DPI settings of their display, while other environments do not. The TestStand User Interface Controls are designed to work in all environments.
  // The following are the recommended settings for various platforms:    * LabVIEW, LabWindows/CVI, C#, and Microsoft Visual Basic .NET—Set this property to False.    * Active Template Library (ATL)/Microsoft Foundation Class (MFC)—Set this property to True.
  //
  // SequenceView_Set_ScaleWithDPIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: bool - Specifies how the control scales based on the dots per inch (DPI) setting. 
  //
  // SequenceView_Set_ScaleWithDPIResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_ScaleWithDPIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_ScaleWithDPIResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies how the control scales based on the dots per inch (DPI) setting. 
  //
  rpc Set_ScaleWithDPI(SequenceView_Set_ScaleWithDPIRequest) returns (SequenceView_Set_ScaleWithDPIResponse);
  rpc Get_ScaleWithDPI(SequenceView_Get_ScaleWithDPIRequest) returns (SequenceView_Get_ScaleWithDPIResponse);
  
  
  // Property: ShadeAlternateColumns
  //
  // Specifies whether this control uses a darker color for the background of every other column.
  //
  // SequenceView_Set_ShadeAlternateColumnsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: bool - Specifies whether this control uses a darker color for the background of every other column. 
  //
  // SequenceView_Set_ShadeAlternateColumnsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_ShadeAlternateColumnsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_ShadeAlternateColumnsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether this control uses a darker color for the background of every other column. 
  //
  rpc Set_ShadeAlternateColumns(SequenceView_Set_ShadeAlternateColumnsRequest) returns (SequenceView_Set_ShadeAlternateColumnsResponse);
  rpc Get_ShadeAlternateColumns(SequenceView_Get_ShadeAlternateColumnsRequest) returns (SequenceView_Get_ShadeAlternateColumnsResponse);
  
  
  // Property: RoundItemRects
  //
  // Specifies whether this control uses rounded corners to draw the background for the individual cells.
  //
  // By default, all cells have the same background color as the control, which prevents this property from having any discernable effect. However, you can alter the background color of an individual cell using the SeqViewColumn.BackColorExpression property.
  //
  // SequenceView_Set_RoundItemRectsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: bool - Specifies whether this control uses rounded corners to draw the background for the individual cells. 
  //
  // SequenceView_Set_RoundItemRectsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_RoundItemRectsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_RoundItemRectsResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether this control uses rounded corners to draw the background for the individual cells. 
  //
  rpc Set_RoundItemRects(SequenceView_Set_RoundItemRectsRequest) returns (SequenceView_Set_RoundItemRectsResponse);
  rpc Get_RoundItemRects(SequenceView_Get_RoundItemRectsRequest) returns (SequenceView_Get_RoundItemRectsResponse);
  
  
  // Property: Borders
  //
  // Returns the frame and draggable borders that surround the control.
  //
  // SequenceView_Get_BordersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_BordersResponse - The response message from the server. It provides the return value.
  //    - returnValue: BordersInstance - Returns the frame and draggable borders that surround the control. 
  //
  rpc Get_Borders(SequenceView_Get_BordersRequest) returns (SequenceView_Get_BordersResponse);
  
  
  // Property: StepIconsEnabled
  //
  // Specifies whether the SequenceView control displays the step icons.
  //
  // SequenceView_Set_StepIconsEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: bool - Specifies whether the SequenceView control displays the step icons. 
  //
  // SequenceView_Set_StepIconsEnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_StepIconsEnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_StepIconsEnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether the SequenceView control displays the step icons. 
  //
  rpc Set_StepIconsEnabled(SequenceView_Set_StepIconsEnabledRequest) returns (SequenceView_Set_StepIconsEnabledResponse);
  rpc Get_StepIconsEnabled(SequenceView_Get_StepIconsEnabledRequest) returns (SequenceView_Get_StepIconsEnabledResponse);
  
  
  // Property: BlockDisplayOptions
  //
  // Specifies how the SequenceView control displays the block structure of a sequence.
  //
  // SequenceView_Set_BlockDisplayOptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: int32 - Specifies how the SequenceView control displays the block structure of a sequence. 
  //
  // SequenceView_Set_BlockDisplayOptionsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_BlockDisplayOptionsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_BlockDisplayOptionsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies how the SequenceView control displays the block structure of a sequence. 
  //
  rpc Set_BlockDisplayOptions(SequenceView_Set_BlockDisplayOptionsRequest) returns (SequenceView_Set_BlockDisplayOptionsResponse);
  rpc Get_BlockDisplayOptions(SequenceView_Get_BlockDisplayOptionsRequest) returns (SequenceView_Get_BlockDisplayOptionsResponse);
  
  
  // Property: EditingFlags
  //
  // Specifies the types of editing the SequenceView control allows. Use any combination of the EditingFlags constants with this property.
  //
  // All editing types are allowed by default. These flags have no effect if the SequenceView control is not connected to display editable steps.
  //
  // SequenceView_Set_EditingFlagsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: int32 - Specifies the types of editing the SequenceView control allows. Use any combination of the EditingFlags constants with this property. 
  //
  // SequenceView_Set_EditingFlagsResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_EditingFlagsRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_EditingFlagsResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the types of editing the SequenceView control allows. Use any combination of the EditingFlags constants with this property. 
  //
  rpc Set_EditingFlags(SequenceView_Set_EditingFlagsRequest) returns (SequenceView_Set_EditingFlagsResponse);
  rpc Get_EditingFlags(SequenceView_Get_EditingFlagsRequest) returns (SequenceView_Get_EditingFlagsResponse);
  
  
  // Property: CanEditLabel
  //
  // Returns a value that indicates whether the SequenceView control can enter label-editing mode.
  //
  // SequenceView_Get_CanEditLabelRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_CanEditLabelResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Returns a value that indicates whether the SequenceView control can enter label-editing mode. 
  //
  rpc Get_CanEditLabel(SequenceView_Get_CanEditLabelRequest) returns (SequenceView_Get_CanEditLabelResponse);
  
  
  // Property: FocusIndex
  //
  // Specifies the index of the item with the input focus. A dotted rectangle around the item represents the input focus. This property is identical to the SequenceView.Cursor property except that setting this property does not change the selection.
  //
  // SequenceView_Set_FocusIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //    - val: int32 - Specifies the index of the item with the input focus. A dotted rectangle around the item represents the input focus. This property is identical to the SequenceView.Cursor property except that setting this property does not change the selection. 
  //
  // SequenceView_Set_FocusIndexResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // SequenceView_Get_FocusIndexRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: SequenceViewInstance - The id of the SequenceView object.
  //
  // SequenceView_Get_FocusIndexResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Specifies the index of the item with the input focus. A dotted rectangle around the item represents the input focus. This property is identical to the SequenceView.Cursor property except that setting this property does not change the selection. 
  //
  rpc Set_FocusIndex(SequenceView_Set_FocusIndexRequest) returns (SequenceView_Set_FocusIndexResponse);
  rpc Get_FocusIndex(SequenceView_Get_FocusIndexRequest) returns (SequenceView_Get_FocusIndexResponse);
  
  

  // Event: CursorMoved
  //
  // Occurs when the user moves the item cursor.
  //
  // The event has a registration method and a reply method.
  // GetEvents_CursorMoved - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_CursorMoved - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // SequenceView_GetEvents_CursorMovedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: SequenceViewInstance - The id of the SequenceView object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // SequenceView_GetEvents_CursorMovedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - itemIdx: int32 - Specifies the index of the element that became the cursor.
  //
  // SequenceView_ReplyToEvent_CursorMovedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // SequenceView_ReplyToEvent_CursorMovedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_CursorMoved(SequenceView_GetEvents_CursorMovedRequest) returns (stream SequenceView_GetEvents_CursorMovedResponse);
  rpc ReplyToEvent_CursorMoved(SequenceView_ReplyToEvent_CursorMovedRequest) returns (SequenceView_ReplyToEvent_CursorMovedResponse); 
  
  
  // Event: ColumnResized
  //
  // Occurs when the user resizes a column in the SequenceView control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_ColumnResized - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_ColumnResized - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // SequenceView_GetEvents_ColumnResizedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: SequenceViewInstance - The id of the SequenceView object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // SequenceView_GetEvents_ColumnResizedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - columnIndex: int32 - Specifies the index of the resized column.
  //  - newSize: int32 - Specifies the new size of the column.
  //
  // SequenceView_ReplyToEvent_ColumnResizedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // SequenceView_ReplyToEvent_ColumnResizedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_ColumnResized(SequenceView_GetEvents_ColumnResizedRequest) returns (stream SequenceView_GetEvents_ColumnResizedResponse);
  rpc ReplyToEvent_ColumnResized(SequenceView_ReplyToEvent_ColumnResizedRequest) returns (SequenceView_ReplyToEvent_ColumnResizedResponse); 
  
  
  // Event: KeyDown
  //
  // Occurs when the user presses a key while the SequenceView control has input focus.
  //
  // The event has a registration method and a reply method.
  // GetEvents_KeyDown - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_KeyDown - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // SequenceView_GetEvents_KeyDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: SequenceViewInstance - The id of the SequenceView object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // SequenceView_GetEvents_KeyDownResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - keyCode: int32
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //
  // SequenceView_ReplyToEvent_KeyDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //  - keyCode: int32
  //
  // SequenceView_ReplyToEvent_KeyDownResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_KeyDown(SequenceView_GetEvents_KeyDownRequest) returns (stream SequenceView_GetEvents_KeyDownResponse);
  rpc ReplyToEvent_KeyDown(SequenceView_ReplyToEvent_KeyDownRequest) returns (SequenceView_ReplyToEvent_KeyDownResponse); 
  
  
  // Event: MouseMove
  //
  // Occurs when the user moves the mouse over the control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_MouseMove - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_MouseMove - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // SequenceView_GetEvents_MouseMoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: SequenceViewInstance - The id of the SequenceView object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // SequenceView_GetEvents_MouseMoveResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - btn: int32 - Specifies what mouse buttons are pressed. You can use any combination of the MouseButtons constants.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //  - x: int32 - Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //  - y: int32 - Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //
  // SequenceView_ReplyToEvent_MouseMoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // SequenceView_ReplyToEvent_MouseMoveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_MouseMove(SequenceView_GetEvents_MouseMoveRequest) returns (stream SequenceView_GetEvents_MouseMoveResponse);
  rpc ReplyToEvent_MouseMove(SequenceView_ReplyToEvent_MouseMoveRequest) returns (SequenceView_ReplyToEvent_MouseMoveResponse); 
  
  
  // Event: MouseDown
  //
  // Occurs when the user clicks the mouse on the control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_MouseDown - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_MouseDown - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // SequenceView_GetEvents_MouseDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: SequenceViewInstance - The id of the SequenceView object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // SequenceView_GetEvents_MouseDownResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - btn: int32 - Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //  - x: int32 - Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //  - y: int32 - Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //
  // SequenceView_ReplyToEvent_MouseDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // SequenceView_ReplyToEvent_MouseDownResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_MouseDown(SequenceView_GetEvents_MouseDownRequest) returns (stream SequenceView_GetEvents_MouseDownResponse);
  rpc ReplyToEvent_MouseDown(SequenceView_ReplyToEvent_MouseDownRequest) returns (SequenceView_ReplyToEvent_MouseDownResponse); 
  
  
  // Event: MouseUp
  //
  // Occurs when the user clicks the mouse on the control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_MouseUp - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_MouseUp - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // SequenceView_GetEvents_MouseUpRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: SequenceViewInstance - The id of the SequenceView object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // SequenceView_GetEvents_MouseUpResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - btn: int32 - Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //  - x: int32 - Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //  - y: int32 - Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //
  // SequenceView_ReplyToEvent_MouseUpRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // SequenceView_ReplyToEvent_MouseUpResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_MouseUp(SequenceView_GetEvents_MouseUpRequest) returns (stream SequenceView_GetEvents_MouseUpResponse);
  rpc ReplyToEvent_MouseUp(SequenceView_ReplyToEvent_MouseUpRequest) returns (SequenceView_ReplyToEvent_MouseUpResponse); 
  
  
  // Event: DblClick
  //
  // Occurs when the user double-clicks the mouse.
  //
  // The event has a registration method and a reply method.
  // GetEvents_DblClick - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_DblClick - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // SequenceView_GetEvents_DblClickRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: SequenceViewInstance - The id of the SequenceView object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // SequenceView_GetEvents_DblClickResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // SequenceView_ReplyToEvent_DblClickRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // SequenceView_ReplyToEvent_DblClickResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_DblClick(SequenceView_GetEvents_DblClickRequest) returns (stream SequenceView_GetEvents_DblClickResponse);
  rpc ReplyToEvent_DblClick(SequenceView_ReplyToEvent_DblClickRequest) returns (SequenceView_ReplyToEvent_DblClickResponse); 
  
  
  // Event: CreateContextMenu
  //
  // Occurs when the user right-clicks on the control so the application can build a context menu from which the user can select commands. Although you can implement context menus in most environments without using this event, some environments do not provide any other way to create a context menu. Also, creating a context menu using this event requires less code in most environments, especially when the context menu contains only TestStand commands.
  //
  // The event has a registration method and a reply method.
  // GetEvents_CreateContextMenu - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_CreateContextMenu - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // SequenceView_GetEvents_CreateContextMenuRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: SequenceViewInstance - The id of the SequenceView object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // SequenceView_GetEvents_CreateContextMenuResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - menuHandle: int32 - Specifies the Microsoft Windows menu handle (HMENU). When you add menu items to the menu handle, the control displays them in a context menu. Use the Commands.InsertIntoWin32Menu method to insert TestStand commands to the menu. You can also use the menu functions in the Windows Software Development Kit (SDK) to add other menu items. Menu items you add this way do not have an associated TestStand command. When the user selects an item that does not have a TestStand command, the control creates and executes a Command object of kind CommandKind_Custom. The control stores the menu item identifier (resource ID/command ID) as a long in the Command.UserData property and as a decimal string in the command display name. You can handle either the ApplicationMgr.PreCommandExecute or ApplicationMgr.PostCommandExecute event to receive a notification when the user selects a menu item you insert with the Windows SDK. When the context menu closes, the control disposes of the menu items. Thus, you do not need to dispose of menu items you insert.
  //  - x: int32 - Specifies the horizontal position of the right-mouse click, relative to the control.
  //  - y: int32 - Specifies the vertical position of the right-mouse click, relative to the control.
  //
  // SequenceView_ReplyToEvent_CreateContextMenuRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // SequenceView_ReplyToEvent_CreateContextMenuResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_CreateContextMenu(SequenceView_GetEvents_CreateContextMenuRequest) returns (stream SequenceView_GetEvents_CreateContextMenuResponse);
  rpc ReplyToEvent_CreateContextMenu(SequenceView_ReplyToEvent_CreateContextMenuRequest) returns (SequenceView_ReplyToEvent_CreateContextMenuResponse); 
  
  
  // Event: BorderDragged
  //
  // Occurs when the user drags a draggable border of a control with the mouse. The event provides the location and size to which you must set the control for the draggable borders to track the mouse cursor. However, you can choose to modify the location or size to which you set the control. For example, you can limit the width of the control so the left edge cannot be dragged off of the visible portion of the window.
  // In addition to changing the size and position of the control, you might also update the sizes and positions of the other controls on the window to account for the change.
  //
  // If you are using LabVIEW, you must add the Horizontal and Vertical components of the origin of the LabVIEW front panel to the newX and newY event parameter values before you can use the newX and newY event parameters to set the ActiveX Container (AxCont) Left and Top properties for the control. To obtain the origin of a LabVIEW front panel, place an ActiveX property node on the block diagram of the VI, right-click the node, and select Link to»Pane from the context menu. Right-click the node again and select Select Property»Origin.
  //
  // The event has a registration method and a reply method.
  // GetEvents_BorderDragged - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_BorderDragged - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // SequenceView_GetEvents_BorderDraggedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: SequenceViewInstance - The id of the SequenceView object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // SequenceView_GetEvents_BorderDraggedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - bordersChanged: WhichBorders - Specifies which borders the user dragged. Refer to the WhichBorders constants for more information about draggable borders.
  //  - newX: int32 - Specifies the new x-coordinate for the control.
  //  - newY: int32 - Specifies the new y-coordinate for the control.
  //  - newWidth: int32 - Specifies the new width for the control.
  //  - newHeight: int32 - Specifies the new height for the control.
  //  - finalResize: bool - Specifies whether the event is the final event for the drag operation the user performs.
  //
  // SequenceView_ReplyToEvent_BorderDraggedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // SequenceView_ReplyToEvent_BorderDraggedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_BorderDragged(SequenceView_GetEvents_BorderDraggedRequest) returns (stream SequenceView_GetEvents_BorderDraggedResponse);
  rpc ReplyToEvent_BorderDragged(SequenceView_ReplyToEvent_BorderDraggedRequest) returns (SequenceView_ReplyToEvent_BorderDraggedResponse); 
  
  
  // Event: ConnectionActivity
  //
  // Occurs after the connection to a manager control makes a change to a user interface control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_ConnectionActivity - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_ConnectionActivity - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // SequenceView_GetEvents_ConnectionActivityRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: SequenceViewInstance - The id of the SequenceView object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // SequenceView_GetEvents_ConnectionActivityResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - activity: ConnectionActivityTypes - Specifies the type of change.
  //
  // SequenceView_ReplyToEvent_ConnectionActivityRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // SequenceView_ReplyToEvent_ConnectionActivityResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_ConnectionActivity(SequenceView_GetEvents_ConnectionActivityRequest) returns (stream SequenceView_GetEvents_ConnectionActivityResponse);
  rpc ReplyToEvent_ConnectionActivity(SequenceView_ReplyToEvent_ConnectionActivityRequest) returns (SequenceView_ReplyToEvent_ConnectionActivityResponse); 
  
  
}
message SequenceViewInstance {
  // Specifies the handle of the SequenceView instance in the server.
  string id = 1;
}
message SequenceView_SequenceViewRequest {
}

message SequenceView_SequenceViewResponse {
  // The return type of the SequenceView object.
  SequenceViewInstance returnValue = 1;
}

message SequenceView_ItemIndexToStepRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies a zero-based index that specifies an item in the control. Item indexes increase from top to bottom.
  int32 ItemIndex = 2;
}

message SequenceView_ItemIndexToStepResponse {
  // Returns True when the item at itemIndex is a step. Returns False when the item is a step group start or end marker.
  bool returnValue = 1;
  // Returns the step group of the specified step.
  StepGroups group = 2;
  // Returns the index within the step group for the specified step. Returns -1 when the item is a start marker. Returns the number of steps in the step group when the item is an end marker.
  int32 stepIndex = 3;
}

message SequenceView_StepToItemIndexRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies a step group.
  StepGroups group = 2;
  // Specifies an index into the specified step group.
  int32 stepIndex = 3;
}

message SequenceView_StepToItemIndexResponse {
  // Returns a zero-based index. The index identifies the item that displays the specified step. When the step is within a collapsed group, the index identifies the step group start marker.
  int32 returnValue = 1;
}

message SequenceView_EditLabelRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_EditLabelResponse {
}

message SequenceView_BeginUpdateRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_BeginUpdateResponse {
}

message SequenceView_EndUpdateRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_EndUpdateResponse {
}

message SequenceView_HitTestRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies the x-coordinate of the location to test, in pixels, relative to the control.
  int32 x = 2;
  // Specifies the y-coordinate of the location to test, in pixels, relative to the control.
  int32 y = 3;
}

message SequenceView_HitTestResponse {
  // Returns a numeric item index.
  int32 returnValue = 1;
}

message SequenceView_LocalizeRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies the name of the section in the language files that contains the localized text.
  string sectionName = 2;
}

message SequenceView_LocalizeResponse {
}

message SequenceView_Get_hWndRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_hWndResponse {
  // Returns a Window handle for the control.
  int32 returnValue = 1;
}

message SequenceView_Set_TextColorRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies the default text color for the item text.
  uint32 val = 2;
}

message SequenceView_Set_TextColorResponse {
}

message SequenceView_Get_TextColorRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_TextColorResponse {
  // Specifies the default text color for the item text.
  uint32 returnValue = 1;
}

message SequenceView_Set_ShowCommentsRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies whether the control displays step comments.
  bool val = 2;
}

message SequenceView_Set_ShowCommentsResponse {
}

message SequenceView_Get_ShowCommentsRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_ShowCommentsResponse {
  // Specifies whether the control displays step comments.
  bool returnValue = 1;
}

message SequenceView_Set_CommentsColorRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies the color of the comments for step items.
  uint32 val = 2;
}

message SequenceView_Set_CommentsColorResponse {
}

message SequenceView_Get_CommentsColorRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_CommentsColorResponse {
  // Specifies the color of the comments for step items.
  uint32 returnValue = 1;
}

message SequenceView_Set_LinesColorRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies the color of gridlines.
  uint32 val = 2;
}

message SequenceView_Set_LinesColorResponse {
}

message SequenceView_Get_LinesColorRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_LinesColorResponse {
  // Specifies the color of gridlines.
  uint32 returnValue = 1;
}

message SequenceView_Set_ShowCommentsBarsRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // When this property is True and the SequenceView.ShowComments property is True, vertical lines display to the left of the step comments.
  bool val = 2;
}

message SequenceView_Set_ShowCommentsBarsResponse {
}

message SequenceView_Get_ShowCommentsBarsRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_ShowCommentsBarsResponse {
  // When this property is True and the SequenceView.ShowComments property is True, vertical lines display to the left of the step comments.
  bool returnValue = 1;
}

message SequenceView_Set_BackColorRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies the default background color.
  uint32 val = 2;
}

message SequenceView_Set_BackColorResponse {
}

message SequenceView_Get_BackColorRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_BackColorResponse {
  // Specifies the default background color.
  uint32 returnValue = 1;
}

message SequenceView_Set_TextFontRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies the font for the item text when the value of the SequenceView.TextFontSource property is FontSource_UseFontProperty.
  IFontDispInstance val = 2;
}

message SequenceView_Set_TextFontResponse {
}

message SequenceView_Get_TextFontRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_TextFontResponse {
  // Specifies the font for the item text when the value of the SequenceView.TextFontSource property is FontSource_UseFontProperty.
  IFontDispInstance returnValue = 1;
}

message SequenceView_Set_CommentsFontRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies the font for comments when the value of the SequenceView.CommentsFontSource property is FontSource_UseFontProperty.
  // 
  IFontDispInstance val = 2;
}

message SequenceView_Set_CommentsFontResponse {
}

message SequenceView_Get_CommentsFontRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_CommentsFontResponse {
  // Specifies the font for comments when the value of the SequenceView.CommentsFontSource property is FontSource_UseFontProperty.
  // 
  IFontDispInstance returnValue = 1;
}

message SequenceView_Set_HeaderFontRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies the font for the header, which labels each column when the value of the SequenceView.HeaderFontSource property is FontSource_UseFontProperty.
  IFontDispInstance val = 2;
}

message SequenceView_Set_HeaderFontResponse {
}

message SequenceView_Get_HeaderFontRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_HeaderFontResponse {
  // Specifies the font for the header, which labels each column when the value of the SequenceView.HeaderFontSource property is FontSource_UseFontProperty.
  IFontDispInstance returnValue = 1;
}

message SequenceView_Set_ShowItemTipStripsRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies whether the control displays tooltips.
  bool val = 2;
}

message SequenceView_Set_ShowItemTipStripsResponse {
}

message SequenceView_Get_ShowItemTipStripsRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_ShowItemTipStripsResponse {
  // Specifies whether the control displays tooltips.
  bool returnValue = 1;
}

message SequenceView_Get_ColumnsRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_ColumnsResponse {
  // Returns the collection of columns.
  SeqViewColumnsInstance returnValue = 1;
}

message SequenceView_Set_MaxCommentsHeightRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies the maximum number of comment lines visible per step.
  int32 val = 2;
}

message SequenceView_Set_MaxCommentsHeightResponse {
}

message SequenceView_Get_MaxCommentsHeightRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_MaxCommentsHeightResponse {
  // Specifies the maximum number of comment lines visible per step.
  int32 returnValue = 1;
}

message SequenceView_Set_CursorRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies the cursor index. The cursor indicates the active item in the view using a dotted box that outlines the item. Setting this property clears the current selection and selects the specified item.
  int32 val = 2;
}

message SequenceView_Set_CursorResponse {
}

message SequenceView_Get_CursorRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_CursorResponse {
  // Specifies the cursor index. The cursor indicates the active item in the view using a dotted box that outlines the item. Setting this property clears the current selection and selects the specified item.
  int32 returnValue = 1;
}

message SequenceView_Set_HorizLinesRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies whether the horizontal grid lines are visible.
  bool val = 2;
}

message SequenceView_Set_HorizLinesResponse {
}

message SequenceView_Get_HorizLinesRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_HorizLinesResponse {
  // Specifies whether the horizontal grid lines are visible.
  bool returnValue = 1;
}

message SequenceView_Set_VertLinesRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies whether the vertical grid lines are visible.
  bool val = 2;
}

message SequenceView_Set_VertLinesResponse {
}

message SequenceView_Get_VertLinesRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_VertLinesResponse {
  // Specifies whether the vertical grid lines are visible.
  bool returnValue = 1;
}

message SequenceView_Set_CommentsOffsetRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies the number of pixels to indent the comment text and comment bar to the right.
  int32 val = 2;
}

message SequenceView_Set_CommentsOffsetResponse {
}

message SequenceView_Get_CommentsOffsetRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_CommentsOffsetResponse {
  // Specifies the number of pixels to indent the comment text and comment bar to the right.
  int32 returnValue = 1;
}

message SequenceView_Set_AutoSizeColumnsRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies to make all columns fit within the width of the control. When the control resizes, the width of each column for which the SeqViewColumn.Autosizing property is a value other than AutoSizingOption_None adjusts so the columns fit the new size of the control. You must ensure that at least one column enables autosizing when you set this property to True.
  bool val = 2;
}

message SequenceView_Set_AutoSizeColumnsResponse {
}

message SequenceView_Get_AutoSizeColumnsRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_AutoSizeColumnsResponse {
  // Specifies to make all columns fit within the width of the control. When the control resizes, the width of each column for which the SeqViewColumn.Autosizing property is a value other than AutoSizingOption_None adjusts so the columns fit the new size of the control. You must ensure that at least one column enables autosizing when you set this property to True.
  bool returnValue = 1;
}

message SequenceView_Set_ItemBackColorExpressionRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies an expression which the SequenceView control uses at run time to determine the background color for individual items. This expression overrides the item color the SequenceView.BackColor property defines.
  string val = 2;
}

message SequenceView_Set_ItemBackColorExpressionResponse {
}

message SequenceView_Get_ItemBackColorExpressionRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_ItemBackColorExpressionResponse {
  // Specifies an expression which the SequenceView control uses at run time to determine the background color for individual items. This expression overrides the item color the SequenceView.BackColor property defines.
  string returnValue = 1;
}

message SequenceView_Set_ItemTextColorExpressionRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies an expression which the SequenceView control uses at run time to determine the text color for individual items. This expression overrides the text color the SequenceView.TextColor property defines.
  string val = 2;
}

message SequenceView_Set_ItemTextColorExpressionResponse {
}

message SequenceView_Get_ItemTextColorExpressionRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_ItemTextColorExpressionResponse {
  // Specifies an expression which the SequenceView control uses at run time to determine the text color for individual items. This expression overrides the text color the SequenceView.TextColor property defines.
  string returnValue = 1;
}

message SequenceView_Set_IconSizeRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies the size of icons in the SequenceView control.
  int32 val = 2;
}

message SequenceView_Set_IconSizeResponse {
}

message SequenceView_Get_IconSizeRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_IconSizeResponse {
  // Specifies the size of icons in the SequenceView control.
  int32 returnValue = 1;
}

message SequenceView_Set_HeaderFontSourceRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  FontSources val = 2;
}

message SequenceView_Set_HeaderFontSourceResponse {
}

message SequenceView_Get_HeaderFontSourceRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_HeaderFontSourceResponse {
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  FontSources returnValue = 1;
}

message SequenceView_Set_CommentsFontSourceRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  FontSources val = 2;
}

message SequenceView_Set_CommentsFontSourceResponse {
}

message SequenceView_Get_CommentsFontSourceRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_CommentsFontSourceResponse {
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  FontSources returnValue = 1;
}

message SequenceView_Set_TextFontSourceRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  FontSources val = 2;
}

message SequenceView_Set_TextFontSourceResponse {
}

message SequenceView_Get_TextFontSourceRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_TextFontSourceResponse {
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  FontSources returnValue = 1;
}

message SequenceView_Set_ScaleWithDPIRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  bool val = 2;
}

message SequenceView_Set_ScaleWithDPIResponse {
}

message SequenceView_Get_ScaleWithDPIRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_ScaleWithDPIResponse {
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  bool returnValue = 1;
}

message SequenceView_Set_ShadeAlternateColumnsRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies whether this control uses a darker color for the background of every other column.
  bool val = 2;
}

message SequenceView_Set_ShadeAlternateColumnsResponse {
}

message SequenceView_Get_ShadeAlternateColumnsRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_ShadeAlternateColumnsResponse {
  // Specifies whether this control uses a darker color for the background of every other column.
  bool returnValue = 1;
}

message SequenceView_Set_RoundItemRectsRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies whether this control uses rounded corners to draw the background for the individual cells.
  bool val = 2;
}

message SequenceView_Set_RoundItemRectsResponse {
}

message SequenceView_Get_RoundItemRectsRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_RoundItemRectsResponse {
  // Specifies whether this control uses rounded corners to draw the background for the individual cells.
  bool returnValue = 1;
}

message SequenceView_Get_BordersRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_BordersResponse {
  // Returns the frame and draggable borders that surround the control.
  BordersInstance returnValue = 1;
}

message SequenceView_Set_StepIconsEnabledRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies whether the SequenceView control displays the step icons.
  bool val = 2;
}

message SequenceView_Set_StepIconsEnabledResponse {
}

message SequenceView_Get_StepIconsEnabledRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_StepIconsEnabledResponse {
  // Specifies whether the SequenceView control displays the step icons.
  bool returnValue = 1;
}

message SequenceView_Set_BlockDisplayOptionsRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies how the SequenceView control displays the block structure of a sequence.
  BlockDisplayOptions val = 2;
}

message SequenceView_Set_BlockDisplayOptionsResponse {
}

message SequenceView_Get_BlockDisplayOptionsRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_BlockDisplayOptionsResponse {
  // Specifies how the SequenceView control displays the block structure of a sequence.
  BlockDisplayOptions returnValue = 1;
}

message SequenceView_Set_EditingFlagsRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies the types of editing the SequenceView control allows. Use any combination of the EditingFlags constants with this property.
  EditingFlags val = 2;
}

message SequenceView_Set_EditingFlagsResponse {
}

message SequenceView_Get_EditingFlagsRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_EditingFlagsResponse {
  // Specifies the types of editing the SequenceView control allows. Use any combination of the EditingFlags constants with this property.
  EditingFlags returnValue = 1;
}

message SequenceView_Get_CanEditLabelRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_CanEditLabelResponse {
  // Returns a value that indicates whether the SequenceView control can enter label-editing mode.
  bool returnValue = 1;
}

message SequenceView_Set_FocusIndexRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Specifies the index of the item with the input focus. A dotted rectangle around the item represents the input focus. This property is identical to the SequenceView.Cursor property except that setting this property does not change the selection.
  int32 val = 2;
}

message SequenceView_Set_FocusIndexResponse {
}

message SequenceView_Get_FocusIndexRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
}

message SequenceView_Get_FocusIndexResponse {
  // Specifies the index of the item with the input focus. A dotted rectangle around the item represents the input focus. This property is identical to the SequenceView.Cursor property except that setting this property does not change the selection.
  int32 returnValue = 1;
}

message SequenceView_GetEvents_CursorMovedRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message SequenceView_GetEvents_CursorMovedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the index of the element that became the cursor.
  int32 itemIdx = 2;
}

message SequenceView_ReplyToEvent_CursorMovedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message SequenceView_ReplyToEvent_CursorMovedResponse {
}

message SequenceView_GetEvents_ColumnResizedRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message SequenceView_GetEvents_ColumnResizedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the index of the resized column.
  int32 columnIndex = 2;
  // Specifies the new size of the column.
  int32 newSize = 3;
}

message SequenceView_ReplyToEvent_ColumnResizedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message SequenceView_ReplyToEvent_ColumnResizedResponse {
}

message SequenceView_GetEvents_KeyDownRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message SequenceView_GetEvents_KeyDownResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the KeyCodes constant of the key the user pressed.
  int32 keyCode = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
}

message SequenceView_ReplyToEvent_KeyDownRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  // Specifies the KeyCodes constant of the key the user pressed.
  int32 keyCode = 2;
}

message SequenceView_ReplyToEvent_KeyDownResponse {
}

message SequenceView_GetEvents_MouseMoveRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message SequenceView_GetEvents_MouseMoveResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies what mouse buttons are pressed. You can use any combination of the MouseButtons constants.
  int32 btn = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
  // Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 x = 4;
  // Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 y = 5;
}

message SequenceView_ReplyToEvent_MouseMoveRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message SequenceView_ReplyToEvent_MouseMoveResponse {
}

message SequenceView_GetEvents_MouseDownRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message SequenceView_GetEvents_MouseDownResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  int32 btn = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
  // Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 x = 4;
  // Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 y = 5;
}

message SequenceView_ReplyToEvent_MouseDownRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message SequenceView_ReplyToEvent_MouseDownResponse {
}

message SequenceView_GetEvents_MouseUpRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message SequenceView_GetEvents_MouseUpResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  int32 btn = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
  // Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 x = 4;
  // Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 y = 5;
}

message SequenceView_ReplyToEvent_MouseUpRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message SequenceView_ReplyToEvent_MouseUpResponse {
}

message SequenceView_GetEvents_DblClickRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message SequenceView_GetEvents_DblClickResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message SequenceView_ReplyToEvent_DblClickRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message SequenceView_ReplyToEvent_DblClickResponse {
}

message SequenceView_GetEvents_CreateContextMenuRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message SequenceView_GetEvents_CreateContextMenuResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the Microsoft Windows menu handle (HMENU). When you add menu items to the menu handle, the control displays them in a context menu. Use the Commands.InsertIntoWin32Menu method to insert TestStand commands to the menu.
  // You can also use the menu functions in the Windows Software Development Kit (SDK) to add other menu items. Menu items you add this way do not have an associated TestStand command. When the user selects an item that does not have a TestStand command, the control creates and executes a Command object of kind CommandKind_Custom. The control stores the menu item identifier (resource ID/command ID) as a long in the Command.UserData property and as a decimal string in the command display name. You can handle either the ApplicationMgr.PreCommandExecute or ApplicationMgr.PostCommandExecute event to receive a notification when the user selects a menu item you insert with the Windows SDK.
  // When the context menu closes, the control disposes of the menu items. Thus, you do not need to dispose of menu items you insert.
  int32 menuHandle = 2;
  // Specifies the horizontal position of the right-mouse click, relative to the control.
  int32 x = 3;
  // Specifies the vertical position of the right-mouse click, relative to the control.
  int32 y = 4;
}

message SequenceView_ReplyToEvent_CreateContextMenuRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message SequenceView_ReplyToEvent_CreateContextMenuResponse {
}

message SequenceView_GetEvents_BorderDraggedRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message SequenceView_GetEvents_BorderDraggedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies which borders the user dragged. Refer to the WhichBorders constants for more information about draggable borders.
  WhichBorders bordersChanged = 2;
  // Specifies the new x-coordinate for the control.
  int32 newX = 3;
  // Specifies the new y-coordinate for the control.
  int32 newY = 4;
  // Specifies the new width for the control.
  int32 newWidth = 5;
  // Specifies the new height for the control.
  int32 newHeight = 6;
  // Specifies whether the event is the final event for the drag operation the user performs.
  bool finalResize = 7;
}

message SequenceView_ReplyToEvent_BorderDraggedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message SequenceView_ReplyToEvent_BorderDraggedResponse {
}

message SequenceView_GetEvents_ConnectionActivityRequest {
  // The id of the SequenceView object.
  SequenceViewInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message SequenceView_GetEvents_ConnectionActivityResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the type of change.
  ConnectionActivityTypes activity = 2;
}

message SequenceView_ReplyToEvent_ConnectionActivityRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message SequenceView_ReplyToEvent_ConnectionActivityResponse {
}

// CheckBox
//
// Connect a manager control to a CheckBox control so users can toggle the state of a common user interface command, such as Break on Step Failure. When you connect to a command, the CheckBox control automatically updates the caption text, visibility, and enabled state. When you enable the checkbox, the checkbox executes the command, which toggles the state of the command.
// The CheckBox control supports the following commands:    * CommandKind_BreakonFirstStep    * CommandKind_BreakonSequenceFailure    * CommandKind_BreakonStepFailure    * CommandKind_ToggleBreakPoint    * CommandKind_TracingEnabled
//
service CheckBox {
  // Service: CheckBox
  //
  // Creates a new CheckBox instance
  //
  // CheckBoxRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //
  // CheckBoxResponse - The response message from the server. It provides the return value.
  //    - returnValue: CheckBoxInstance - The return type of the CheckBox object.
  //
  rpc CheckBox(CheckBox_CheckBoxRequest) returns (CheckBox_CheckBoxResponse);

  // Method: Localize
  //
  // Localizes the text caption on the button in this control.
  //
  // First, update a .ini file located in the TestStand Language directory with the required string. Second, use the string tag in the .ini file as the caption for the control.
  // When you call this method, the control replaces the caption with the string from the .ini file. If the caption is not a tag in the .ini file, the caption does not change.
  // Note: When you connect this control to a manager control, the manager control automatically sets a localized caption.
  //
  // CheckBox_LocalizeRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //    - sectionName: string - Specifies the name of the section in the language files that contains the localized text.
  //
  // CheckBox_LocalizeResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc Localize(CheckBox_LocalizeRequest) returns (CheckBox_LocalizeResponse);
  
  

  // Property: Enabled
  //
  // The control responds to user input only when this property is True.
  //
  // CheckBox_Set_EnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //    - val: bool - The control responds to user input only when this property is True. 
  //
  // CheckBox_Set_EnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CheckBox_Get_EnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //
  // CheckBox_Get_EnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The control responds to user input only when this property is True. 
  //
  rpc Set_Enabled(CheckBox_Set_EnabledRequest) returns (CheckBox_Set_EnabledResponse);
  rpc Get_Enabled(CheckBox_Get_EnabledRequest) returns (CheckBox_Get_EnabledResponse);
  
  
  // Property: Font
  //
  // Specifies the font for the control when the value of the CheckBox.FontSource property is FontSource_UseFontProperty.
  //
  // CheckBox_Set_FontRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //    - val: IFontDispInstance - Specifies the font for the control when the value of the CheckBox.FontSource property is FontSource_UseFontProperty. 
  //
  // CheckBox_Set_FontResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CheckBox_Get_FontRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //
  // CheckBox_Get_FontResponse - The response message from the server. It provides the return value.
  //    - returnValue: IFontDispInstance - Specifies the font for the control when the value of the CheckBox.FontSource property is FontSource_UseFontProperty. 
  //
  rpc Set_Font(CheckBox_Set_FontRequest) returns (CheckBox_Set_FontResponse);
  rpc Get_Font(CheckBox_Get_FontRequest) returns (CheckBox_Get_FontResponse);
  
  
  // Property: BackColor
  //
  // Specifies the background color for the control. This property does not change the appearance of a control when you set the CheckBox.Style property to CheckBoxStyle_Button.
  //
  // CheckBox_Set_BackColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //    - val: uint32 - Specifies the background color for the control. This property does not change the appearance of a control when you set the CheckBox.Style property to CheckBoxStyle_Button. 
  //
  // CheckBox_Set_BackColorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CheckBox_Get_BackColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //
  // CheckBox_Get_BackColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Specifies the background color for the control. This property does not change the appearance of a control when you set the CheckBox.Style property to CheckBoxStyle_Button. 
  //
  rpc Set_BackColor(CheckBox_Set_BackColorRequest) returns (CheckBox_Set_BackColorResponse);
  rpc Get_BackColor(CheckBox_Get_BackColorRequest) returns (CheckBox_Get_BackColorResponse);
  
  
  // Property: ForeColor
  //
  // Specifies the foreground color for the CheckBox control. This property does not change the appearance of a control when you set the CheckBox.Style property to CheckBoxStyle_Button.
  //
  // CheckBox_Set_ForeColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //    - val: uint32 - Specifies the foreground color for the CheckBox control. This property does not change the appearance of a control when you set the CheckBox.Style property to CheckBoxStyle_Button. 
  //
  // CheckBox_Set_ForeColorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CheckBox_Get_ForeColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //
  // CheckBox_Get_ForeColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Specifies the foreground color for the CheckBox control. This property does not change the appearance of a control when you set the CheckBox.Style property to CheckBoxStyle_Button. 
  //
  rpc Set_ForeColor(CheckBox_Set_ForeColorRequest) returns (CheckBox_Set_ForeColorResponse);
  rpc Get_ForeColor(CheckBox_Get_ForeColorRequest) returns (CheckBox_Get_ForeColorResponse);
  
  
  // Property: Caption
  //
  // Specifies the text the control displays.
  //
  // In the caption, include an ampersand (&) immediately before the character, if any, you want to designate as an accelerator character. The character displays as underlined. Press <Alt> and click the underlined character to move the focus to the control. To include an ampersand character in a caption without creating an accelerator character, include two consecutive ampersands. A single ampersand displays in the caption and no characters display as underlined.
  // When you connect this control to a manager control, the manager control sets this property automatically.
  //
  // CheckBox_Set_CaptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //    - val: string - Specifies the text the control displays. 
  //
  // CheckBox_Set_CaptionResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CheckBox_Get_CaptionRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //
  // CheckBox_Get_CaptionResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies the text the control displays. 
  //
  rpc Set_Caption(CheckBox_Set_CaptionRequest) returns (CheckBox_Set_CaptionResponse);
  rpc Get_Caption(CheckBox_Get_CaptionRequest) returns (CheckBox_Get_CaptionResponse);
  
  
  // Property: hWnd
  //
  // Returns a Window handle for the CheckBox control.
  //
  // You can use the returned Window handle with the Microsoft Windows API functions.
  // Note: Using Windows API functions with this property can cause undefined behavior.
  //
  // CheckBox_Get_hWndRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //
  // CheckBox_Get_hWndResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a Window handle for the CheckBox control. 
  //
  rpc Get_hWnd(CheckBox_Get_hWndRequest) returns (CheckBox_Get_hWndResponse);
  
  
  // Property: Image
  //
  // Specifies a custom graphic for the CheckBox control.
  //
  // This property is used only when the style of the control is CheckBoxStyle_Button.
  // Use the Engine.Images property to obtain the TestStand images collection, and use the Images.FindImage method to obtain a particular image reference. Icon files are located in the <TestStand>\Components\Icons and <TestStand Public>\Components\Icons directories.
  //
  // CheckBox_Set_ImageRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //    - val: IPictureDispInstance - Specifies a custom graphic for the CheckBox control. 
  //
  // CheckBox_Set_ImageResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CheckBox_Get_ImageRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //
  // CheckBox_Get_ImageResponse - The response message from the server. It provides the return value.
  //    - returnValue: IPictureDispInstance - Specifies a custom graphic for the CheckBox control. 
  //
  rpc Set_Image(CheckBox_Set_ImageRequest) returns (CheckBox_Set_ImageResponse);
  rpc Get_Image(CheckBox_Get_ImageRequest) returns (CheckBox_Get_ImageResponse);
  
  
  // Property: TextAlign
  //
  // Specifies the horizontal and vertical alignment of text on a CheckBox control.
  //
  // When the style of the control is CheckBoxStyle_Normal, the control supports only the ContentAlignmentStyle_MiddleLeft and ContentAlignmentStyle_MiddleRight values.
  //
  // CheckBox_Set_TextAlignRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //    - val: ContentAlignmentStyles - Specifies the horizontal and vertical alignment of text on a CheckBox control. 
  //
  // CheckBox_Set_TextAlignResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CheckBox_Get_TextAlignRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //
  // CheckBox_Get_TextAlignResponse - The response message from the server. It provides the return value.
  //    - returnValue: ContentAlignmentStyles - Specifies the horizontal and vertical alignment of text on a CheckBox control. 
  //
  rpc Set_TextAlign(CheckBox_Set_TextAlignRequest) returns (CheckBox_Set_TextAlignResponse);
  rpc Get_TextAlign(CheckBox_Get_TextAlignRequest) returns (CheckBox_Get_TextAlignResponse);
  
  
  // Property: Checked
  //
  // Specifies a value that indicates whether the CheckBox control is in the checked state.
  //
  // CheckBox_Set_CheckedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //    - pVal: bool - Specifies a value that indicates whether the CheckBox control is in the checked state. 
  //
  // CheckBox_Set_CheckedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CheckBox_Get_CheckedRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //
  // CheckBox_Get_CheckedResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies a value that indicates whether the CheckBox control is in the checked state. 
  //
  rpc Set_Checked(CheckBox_Set_CheckedRequest) returns (CheckBox_Set_CheckedResponse);
  rpc Get_Checked(CheckBox_Get_CheckedRequest) returns (CheckBox_Get_CheckedResponse);
  
  
  // Property: UseMaskColor
  //
  // The control uses the color the CheckBox.MaskColor property specifies as a mask color when this property is True. You can use the mask color to create transparent regions.
  //
  // This property is used only when the style of the control is CheckBoxStyle_Button.
  // 
  //
  // CheckBox_Set_UseMaskColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //    - val: bool - The control uses the color the CheckBox.MaskColor property specifies as a mask color when this property is True. You can use the mask color to create transparent regions. 
  //
  // CheckBox_Set_UseMaskColorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CheckBox_Get_UseMaskColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //
  // CheckBox_Get_UseMaskColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The control uses the color the CheckBox.MaskColor property specifies as a mask color when this property is True. You can use the mask color to create transparent regions. 
  //
  rpc Set_UseMaskColor(CheckBox_Set_UseMaskColorRequest) returns (CheckBox_Set_UseMaskColorResponse);
  rpc Get_UseMaskColor(CheckBox_Get_UseMaskColorRequest) returns (CheckBox_Get_UseMaskColorResponse);
  
  
  // Property: MaskColor
  //
  // Specifies a color in the picture of the control as a mask color. You can use the mask color to create transparent regions.
  //
  // The color specified is used as a mask color when the CheckBox.UseMaskColor property is True.
  // This property is used only when the style of the control is CheckBoxStyle_Button.
  //
  // CheckBox_Set_MaskColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //    - val: uint32 - Specifies a color in the picture of the control as a mask color. You can use the mask color to create transparent regions. 
  //
  // CheckBox_Set_MaskColorResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CheckBox_Get_MaskColorRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //
  // CheckBox_Get_MaskColorResponse - The response message from the server. It provides the return value.
  //    - returnValue: uint32 - Specifies a color in the picture of the control as a mask color. You can use the mask color to create transparent regions. 
  //
  rpc Set_MaskColor(CheckBox_Set_MaskColorRequest) returns (CheckBox_Set_MaskColorResponse);
  rpc Get_MaskColor(CheckBox_Get_MaskColorRequest) returns (CheckBox_Get_MaskColorResponse);
  
  
  // Property: Style
  //
  // Specifies the appearance of the control.
  //
  // CheckBox_Set_StyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //    - val: CheckBoxStyles - Specifies the appearance of the control. 
  //
  // CheckBox_Set_StyleResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CheckBox_Get_StyleRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //
  // CheckBox_Get_StyleResponse - The response message from the server. It provides the return value.
  //    - returnValue: CheckBoxStyles - Specifies the appearance of the control. 
  //
  rpc Set_Style(CheckBox_Set_StyleRequest) returns (CheckBox_Set_StyleResponse);
  rpc Get_Style(CheckBox_Get_StyleRequest) returns (CheckBox_Get_StyleResponse);
  
  
  // Property: FontSource
  //
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  //
  // When the value of this property is FontSource_UseFontProperty, the corresponding Font property specifies the particular font the control uses. Otherwise, the control uses the font from the source this property specifies. Refer to the FontSources enumeration for the list of valid font sources.
  // Set this property to a value other than FontSource_UseFontProperty if you expect the font the CheckBox.Font property specifies to not be present on a computer at run time. For example, a font present on an English version of the Microsoft Windows operating system might not be present on a Japanese version of the Windows operating system.
  //
  // CheckBox_Set_FontSourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //    - val: FontSources - Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont. 
  //
  // CheckBox_Set_FontSourceResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CheckBox_Get_FontSourceRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //
  // CheckBox_Get_FontSourceResponse - The response message from the server. It provides the return value.
  //    - returnValue: FontSources - Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont. 
  //
  rpc Set_FontSource(CheckBox_Set_FontSourceRequest) returns (CheckBox_Set_FontSourceResponse);
  rpc Get_FontSource(CheckBox_Get_FontSourceRequest) returns (CheckBox_Get_FontSourceResponse);
  
  
  // Property: ScaleWithDPI
  //
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  //
  // Some environments scale native controls based on the DPI settings of their display, while other environments do not. The TestStand User Interface Controls are designed to work in all environments.
  // The following are the recommended settings for various platforms:    * LabVIEW, LabWindows/CVI, C#, and Microsoft Visual Basic .NET—Set this property to False.    * Active Template Library (ATL)/Microsoft Foundation Class (MFC)—Set this property to True.
  //
  // CheckBox_Set_ScaleWithDPIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //    - val: bool - Specifies how the control scales based on the dots per inch (DPI) setting. 
  //
  // CheckBox_Set_ScaleWithDPIResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CheckBox_Get_ScaleWithDPIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //
  // CheckBox_Get_ScaleWithDPIResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies how the control scales based on the dots per inch (DPI) setting. 
  //
  rpc Set_ScaleWithDPI(CheckBox_Set_ScaleWithDPIRequest) returns (CheckBox_Set_ScaleWithDPIResponse);
  rpc Get_ScaleWithDPI(CheckBox_Get_ScaleWithDPIRequest) returns (CheckBox_Get_ScaleWithDPIResponse);
  
  
  // Property: ImageAlign
  //
  // Specifies the horizontal and vertical alignment of an Image on a CheckBox control.
  //
  // This property is used only when the style of the control is CheckBoxStyle_Button.
  //
  // CheckBox_Set_ImageAlignRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //    - val: ContentAlignmentStyles - Specifies the horizontal and vertical alignment of an Image on a CheckBox control. 
  //
  // CheckBox_Set_ImageAlignResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // CheckBox_Get_ImageAlignRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: CheckBoxInstance - The id of the CheckBox object.
  //
  // CheckBox_Get_ImageAlignResponse - The response message from the server. It provides the return value.
  //    - returnValue: ContentAlignmentStyles - Specifies the horizontal and vertical alignment of an Image on a CheckBox control. 
  //
  rpc Set_ImageAlign(CheckBox_Set_ImageAlignRequest) returns (CheckBox_Set_ImageAlignResponse);
  rpc Get_ImageAlign(CheckBox_Get_ImageAlignRequest) returns (CheckBox_Get_ImageAlignResponse);
  
  

  // Event: Click
  //
  // Occurs when you press and release the mouse on the control or when the checked state of the control changes.
  //
  // The event has a registration method and a reply method.
  // GetEvents_Click - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_Click - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // CheckBox_GetEvents_ClickRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: CheckBoxInstance - The id of the CheckBox object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // CheckBox_GetEvents_ClickResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //
  // CheckBox_ReplyToEvent_ClickRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // CheckBox_ReplyToEvent_ClickResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_Click(CheckBox_GetEvents_ClickRequest) returns (stream CheckBox_GetEvents_ClickResponse);
  rpc ReplyToEvent_Click(CheckBox_ReplyToEvent_ClickRequest) returns (CheckBox_ReplyToEvent_ClickResponse); 
  
  
  // Event: KeyDown
  //
  // Occurs when the user presses a key while the control has the input focus. This event occurs before the CheckBox.KeyPress event.
  //
  // The event has a registration method and a reply method.
  // GetEvents_KeyDown - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_KeyDown - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // CheckBox_GetEvents_KeyDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: CheckBoxInstance - The id of the CheckBox object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // CheckBox_GetEvents_KeyDownResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - keyCode: int32
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //
  // CheckBox_ReplyToEvent_KeyDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //  - keyCode: int32
  //
  // CheckBox_ReplyToEvent_KeyDownResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_KeyDown(CheckBox_GetEvents_KeyDownRequest) returns (stream CheckBox_GetEvents_KeyDownResponse);
  rpc ReplyToEvent_KeyDown(CheckBox_ReplyToEvent_KeyDownRequest) returns (CheckBox_ReplyToEvent_KeyDownResponse); 
  
  
  // Event: KeyPress
  //
  // Occurs when the user presses a key while a control is active. This event occurs after the CheckBox.KeyDown event.
  //
  // The event has a registration method and a reply method.
  // GetEvents_KeyPress - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_KeyPress - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // CheckBox_GetEvents_KeyPressRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: CheckBoxInstance - The id of the CheckBox object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // CheckBox_GetEvents_KeyPressResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - keyAscii: int32
  //
  // CheckBox_ReplyToEvent_KeyPressRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //  - keyAscii: int32
  //
  // CheckBox_ReplyToEvent_KeyPressResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_KeyPress(CheckBox_GetEvents_KeyPressRequest) returns (stream CheckBox_GetEvents_KeyPressResponse);
  rpc ReplyToEvent_KeyPress(CheckBox_ReplyToEvent_KeyPressRequest) returns (CheckBox_ReplyToEvent_KeyPressResponse); 
  
  
  // Event: KeyUp
  //
  // Occurs when the user releases a key while the control has the input focus.
  //
  // The event has a registration method and a reply method.
  // GetEvents_KeyUp - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_KeyUp - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // CheckBox_GetEvents_KeyUpRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: CheckBoxInstance - The id of the CheckBox object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // CheckBox_GetEvents_KeyUpResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - keyCode: int32 - Specifies the KeyCodes constant of the key the user pressed.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //
  // CheckBox_ReplyToEvent_KeyUpRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // CheckBox_ReplyToEvent_KeyUpResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_KeyUp(CheckBox_GetEvents_KeyUpRequest) returns (stream CheckBox_GetEvents_KeyUpResponse);
  rpc ReplyToEvent_KeyUp(CheckBox_ReplyToEvent_KeyUpRequest) returns (CheckBox_ReplyToEvent_KeyUpResponse); 
  
  
  // Event: MouseDown
  //
  // Occurs when the user clicks the mouse on the control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_MouseDown - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_MouseDown - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // CheckBox_GetEvents_MouseDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: CheckBoxInstance - The id of the CheckBox object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // CheckBox_GetEvents_MouseDownResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - btn: int32 - Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //  - x: int32 - Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //  - y: int32 - Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //
  // CheckBox_ReplyToEvent_MouseDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // CheckBox_ReplyToEvent_MouseDownResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_MouseDown(CheckBox_GetEvents_MouseDownRequest) returns (stream CheckBox_GetEvents_MouseDownResponse);
  rpc ReplyToEvent_MouseDown(CheckBox_ReplyToEvent_MouseDownRequest) returns (CheckBox_ReplyToEvent_MouseDownResponse); 
  
  
  // Event: MouseMove
  //
  // Occurs when the user moves the mouse over the control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_MouseMove - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_MouseMove - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // CheckBox_GetEvents_MouseMoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: CheckBoxInstance - The id of the CheckBox object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // CheckBox_GetEvents_MouseMoveResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - btn: int32 - Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //  - x: int32 - Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //  - y: int32 - Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //
  // CheckBox_ReplyToEvent_MouseMoveRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // CheckBox_ReplyToEvent_MouseMoveResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_MouseMove(CheckBox_GetEvents_MouseMoveRequest) returns (stream CheckBox_GetEvents_MouseMoveResponse);
  rpc ReplyToEvent_MouseMove(CheckBox_ReplyToEvent_MouseMoveRequest) returns (CheckBox_ReplyToEvent_MouseMoveResponse); 
  
  
  // Event: MouseUp
  //
  // Occurs when the user releases the mouse on the control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_MouseUp - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_MouseUp - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // CheckBox_GetEvents_MouseUpRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: CheckBoxInstance - The id of the CheckBox object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // CheckBox_GetEvents_MouseUpResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - btn: int32 - Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //  - x: int32 - Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //  - y: int32 - Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  //
  // CheckBox_ReplyToEvent_MouseUpRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // CheckBox_ReplyToEvent_MouseUpResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_MouseUp(CheckBox_GetEvents_MouseUpRequest) returns (stream CheckBox_GetEvents_MouseUpResponse);
  rpc ReplyToEvent_MouseUp(CheckBox_ReplyToEvent_MouseUpRequest) returns (CheckBox_ReplyToEvent_MouseUpResponse); 
  
  
  // Event: ConnectionActivity
  //
  // Occurs after the connection to a manager control makes a change to a user interface control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_ConnectionActivity - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_ConnectionActivity - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // CheckBox_GetEvents_ConnectionActivityRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: CheckBoxInstance - The id of the CheckBox object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // CheckBox_GetEvents_ConnectionActivityResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - activity: ConnectionActivityTypes - Specifies the type of change.
  //
  // CheckBox_ReplyToEvent_ConnectionActivityRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // CheckBox_ReplyToEvent_ConnectionActivityResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_ConnectionActivity(CheckBox_GetEvents_ConnectionActivityRequest) returns (stream CheckBox_GetEvents_ConnectionActivityResponse);
  rpc ReplyToEvent_ConnectionActivity(CheckBox_ReplyToEvent_ConnectionActivityRequest) returns (CheckBox_ReplyToEvent_ConnectionActivityResponse); 
  
  
}
message CheckBoxInstance {
  // Specifies the handle of the CheckBox instance in the server.
  string id = 1;
}
message CheckBox_CheckBoxRequest {
}

message CheckBox_CheckBoxResponse {
  // The return type of the CheckBox object.
  CheckBoxInstance returnValue = 1;
}

message CheckBox_LocalizeRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
  // Specifies the name of the section in the language files that contains the localized text.
  string sectionName = 2;
}

message CheckBox_LocalizeResponse {
}

message CheckBox_Set_EnabledRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
  // The control responds to user input only when this property is True.
  bool val = 2;
}

message CheckBox_Set_EnabledResponse {
}

message CheckBox_Get_EnabledRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
}

message CheckBox_Get_EnabledResponse {
  // The control responds to user input only when this property is True.
  bool returnValue = 1;
}

message CheckBox_Set_FontRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
  // Specifies the font for the control when the value of the CheckBox.FontSource property is FontSource_UseFontProperty.
  IFontDispInstance val = 2;
}

message CheckBox_Set_FontResponse {
}

message CheckBox_Get_FontRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
}

message CheckBox_Get_FontResponse {
  // Specifies the font for the control when the value of the CheckBox.FontSource property is FontSource_UseFontProperty.
  IFontDispInstance returnValue = 1;
}

message CheckBox_Set_BackColorRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
  // Specifies the background color for the control. This property does not change the appearance of a control when you set the CheckBox.Style property to CheckBoxStyle_Button.
  uint32 val = 2;
}

message CheckBox_Set_BackColorResponse {
}

message CheckBox_Get_BackColorRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
}

message CheckBox_Get_BackColorResponse {
  // Specifies the background color for the control. This property does not change the appearance of a control when you set the CheckBox.Style property to CheckBoxStyle_Button.
  uint32 returnValue = 1;
}

message CheckBox_Set_ForeColorRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
  // Specifies the foreground color for the CheckBox control. This property does not change the appearance of a control when you set the CheckBox.Style property to CheckBoxStyle_Button.
  uint32 val = 2;
}

message CheckBox_Set_ForeColorResponse {
}

message CheckBox_Get_ForeColorRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
}

message CheckBox_Get_ForeColorResponse {
  // Specifies the foreground color for the CheckBox control. This property does not change the appearance of a control when you set the CheckBox.Style property to CheckBoxStyle_Button.
  uint32 returnValue = 1;
}

message CheckBox_Set_CaptionRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
  // Specifies the text the control displays.
  string val = 2;
}

message CheckBox_Set_CaptionResponse {
}

message CheckBox_Get_CaptionRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
}

message CheckBox_Get_CaptionResponse {
  // Specifies the text the control displays.
  string returnValue = 1;
}

message CheckBox_Get_hWndRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
}

message CheckBox_Get_hWndResponse {
  // Returns a Window handle for the CheckBox control.
  int32 returnValue = 1;
}

message CheckBox_Set_ImageRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
  // Specifies a custom graphic for the CheckBox control.
  IPictureDispInstance val = 2;
}

message CheckBox_Set_ImageResponse {
}

message CheckBox_Get_ImageRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
}

message CheckBox_Get_ImageResponse {
  // Specifies a custom graphic for the CheckBox control.
  IPictureDispInstance returnValue = 1;
}

message CheckBox_Set_TextAlignRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
  // Specifies the horizontal and vertical alignment of text on a CheckBox control.
  ContentAlignmentStyles val = 2;
}

message CheckBox_Set_TextAlignResponse {
}

message CheckBox_Get_TextAlignRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
}

message CheckBox_Get_TextAlignResponse {
  // Specifies the horizontal and vertical alignment of text on a CheckBox control.
  ContentAlignmentStyles returnValue = 1;
}

message CheckBox_Set_CheckedRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
  // Specifies a value that indicates whether the CheckBox control is in the checked state.
  bool pVal = 2;
}

message CheckBox_Set_CheckedResponse {
}

message CheckBox_Get_CheckedRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
}

message CheckBox_Get_CheckedResponse {
  // Returns True when the CheckBox control is in the checked state. Otherwise, returns False.
  bool returnValue = 1;
}

message CheckBox_Set_UseMaskColorRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
  // The control uses the color the CheckBox.MaskColor property specifies as a mask color when this property is True. You can use the mask color to create transparent regions.
  bool val = 2;
}

message CheckBox_Set_UseMaskColorResponse {
}

message CheckBox_Get_UseMaskColorRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
}

message CheckBox_Get_UseMaskColorResponse {
  // The control uses the color the CheckBox.MaskColor property specifies as a mask color when this property is True. You can use the mask color to create transparent regions.
  bool returnValue = 1;
}

message CheckBox_Set_MaskColorRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
  // Specifies a color in the picture of the control as a mask color. You can use the mask color to create transparent regions.
  uint32 val = 2;
}

message CheckBox_Set_MaskColorResponse {
}

message CheckBox_Get_MaskColorRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
}

message CheckBox_Get_MaskColorResponse {
  // Specifies a color in the picture of the control as a mask color. You can use the mask color to create transparent regions.
  uint32 returnValue = 1;
}

message CheckBox_Set_StyleRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
  // Specifies the appearance of the control.
  CheckBoxStyles val = 2;
}

message CheckBox_Set_StyleResponse {
}

message CheckBox_Get_StyleRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
}

message CheckBox_Get_StyleResponse {
  // Specifies the appearance of the control.
  CheckBoxStyles returnValue = 1;
}

message CheckBox_Set_FontSourceRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  FontSources val = 2;
}

message CheckBox_Set_FontSourceResponse {
}

message CheckBox_Get_FontSourceRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
}

message CheckBox_Get_FontSourceResponse {
  // Specifies the font the control uses. The default value for this property is FontSource_UseGUIFont.
  FontSources returnValue = 1;
}

message CheckBox_Set_ScaleWithDPIRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  bool val = 2;
}

message CheckBox_Set_ScaleWithDPIResponse {
}

message CheckBox_Get_ScaleWithDPIRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
}

message CheckBox_Get_ScaleWithDPIResponse {
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  bool returnValue = 1;
}

message CheckBox_Set_ImageAlignRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
  // Specifies the horizontal and vertical alignment of an Image on a CheckBox control.
  ContentAlignmentStyles val = 2;
}

message CheckBox_Set_ImageAlignResponse {
}

message CheckBox_Get_ImageAlignRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
}

message CheckBox_Get_ImageAlignResponse {
  // Specifies the horizontal and vertical alignment of an Image on a CheckBox control.
  ContentAlignmentStyles returnValue = 1;
}

message CheckBox_GetEvents_ClickRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message CheckBox_GetEvents_ClickResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
}

message CheckBox_ReplyToEvent_ClickRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message CheckBox_ReplyToEvent_ClickResponse {
}

message CheckBox_GetEvents_KeyDownRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message CheckBox_GetEvents_KeyDownResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the KeyCodes constant of the key the user pressed.
  int32 keyCode = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
}

message CheckBox_ReplyToEvent_KeyDownRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  // Specifies the KeyCodes constant of the key the user pressed.
  int32 keyCode = 2;
}

message CheckBox_ReplyToEvent_KeyDownResponse {
}

message CheckBox_GetEvents_KeyPressRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message CheckBox_GetEvents_KeyPressResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the ASCII value of the pressed key.
  int32 keyAscii = 2;
}

message CheckBox_ReplyToEvent_KeyPressRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  // Specifies the ASCII value of the pressed key.
  int32 keyAscii = 2;
}

message CheckBox_ReplyToEvent_KeyPressResponse {
}

message CheckBox_GetEvents_KeyUpRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message CheckBox_GetEvents_KeyUpResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the KeyCodes constant of the key the user pressed.
  int32 keyCode = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
}

message CheckBox_ReplyToEvent_KeyUpRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message CheckBox_ReplyToEvent_KeyUpResponse {
}

message CheckBox_GetEvents_MouseDownRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message CheckBox_GetEvents_MouseDownResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  int32 btn = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
  // Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 x = 4;
  // Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 y = 5;
}

message CheckBox_ReplyToEvent_MouseDownRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message CheckBox_ReplyToEvent_MouseDownResponse {
}

message CheckBox_GetEvents_MouseMoveRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message CheckBox_GetEvents_MouseMoveResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  int32 btn = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
  // Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 x = 4;
  // Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 y = 5;
}

message CheckBox_ReplyToEvent_MouseMoveRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message CheckBox_ReplyToEvent_MouseMoveResponse {
}

message CheckBox_GetEvents_MouseUpRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message CheckBox_GetEvents_MouseUpResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the mouse button pressed to cause this event. You can use any one of the MouseButtons constants.
  int32 btn = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
  // Specifies the x-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 x = 4;
  // Specifies the y-coordinate of the mouse pointer, relative to the control, at the moment when the event occurs.
  int32 y = 5;
}

message CheckBox_ReplyToEvent_MouseUpRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message CheckBox_ReplyToEvent_MouseUpResponse {
}

message CheckBox_GetEvents_ConnectionActivityRequest {
  // The id of the CheckBox object.
  CheckBoxInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message CheckBox_GetEvents_ConnectionActivityResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the type of change.
  ConnectionActivityTypes activity = 2;
}

message CheckBox_ReplyToEvent_ConnectionActivityRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message CheckBox_ReplyToEvent_ConnectionActivityResponse {
}

// VariablesView
//
// Connect a SequenceFileView Manager or an ExecutionView Manager control to a VariablesView control to display the variables and properties in the selected file or execution. You can modify values of existing properties and variables, and you can insert and delete variables when editing a sequence file.
// 
//
service VariablesView {
  // Service: VariablesView
  //
  // Creates a new VariablesView instance
  //
  // VariablesViewRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: VariablesViewInstance - The id of the VariablesView object.
  //
  // VariablesViewResponse - The response message from the server. It provides the return value.
  //    - returnValue: VariablesViewInstance - The return type of the VariablesView object.
  //
  rpc VariablesView(VariablesView_VariablesViewRequest) returns (VariablesView_VariablesViewResponse);

  // Property: ScaleWithDPI
  //
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  //
  // Some environments scale native controls based on the DPI settings of their display, while other environments do not. The TestStand User Interface Controls are designed to work in all environments.
  // National Instruments recommends the following settings for various platforms:    * LabVIEW, LabWindows/CVI, C#, and Microsoft Visual Basic .NET—Set this property to False.    * Active Template Library (ATL)/Microsoft Foundation Class (MFC)—Set this property to True.
  //
  // VariablesView_Set_ScaleWithDPIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: VariablesViewInstance - The id of the VariablesView object.
  //    - val: bool - Specifies how the control scales based on the dots per inch (DPI) setting. 
  //
  // VariablesView_Set_ScaleWithDPIResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // VariablesView_Get_ScaleWithDPIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: VariablesViewInstance - The id of the VariablesView object.
  //
  // VariablesView_Get_ScaleWithDPIResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies how the control scales based on the dots per inch (DPI) setting. 
  //
  rpc Set_ScaleWithDPI(VariablesView_Set_ScaleWithDPIRequest) returns (VariablesView_Set_ScaleWithDPIResponse);
  rpc Get_ScaleWithDPI(VariablesView_Get_ScaleWithDPIRequest) returns (VariablesView_Get_ScaleWithDPIResponse);
  
  
  // Property: Enabled
  //
  // The control responds to user-generated events only when this property is True.
  //
  // When you connect this control to a manager control, the manager control automatically sets this property.
  //
  // VariablesView_Set_EnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: VariablesViewInstance - The id of the VariablesView object.
  //    - val: bool - The control responds to user-generated events only when this property is True. 
  //
  // VariablesView_Set_EnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // VariablesView_Get_EnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: VariablesViewInstance - The id of the VariablesView object.
  //
  // VariablesView_Get_EnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The control responds to user-generated events only when this property is True. 
  //
  rpc Set_Enabled(VariablesView_Set_EnabledRequest) returns (VariablesView_Set_EnabledResponse);
  rpc Get_Enabled(VariablesView_Get_EnabledRequest) returns (VariablesView_Get_EnabledResponse);
  
  
  // Property: hWnd
  //
  // Returns a Window handle for the control.
  //
  // You can use the returned Window handle with the Microsoft Windows API functions.
  // Note: Using Windows API functions with this property can cause undefined behavior.
  //
  // VariablesView_Get_hWndRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: VariablesViewInstance - The id of the VariablesView object.
  //
  // VariablesView_Get_hWndResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a Window handle for the control. 
  //
  rpc Get_hWnd(VariablesView_Get_hWndRequest) returns (VariablesView_Get_hWndResponse);
  
  
  // Property: Borders
  //
  // Returns the frame and draggable borders that surround the control.
  //
  // VariablesView_Get_BordersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: VariablesViewInstance - The id of the VariablesView object.
  //
  // VariablesView_Get_BordersResponse - The response message from the server. It provides the return value.
  //    - returnValue: BordersInstance - Returns the frame and draggable borders that surround the control. 
  //
  rpc Get_Borders(VariablesView_Get_BordersRequest) returns (VariablesView_Get_BordersResponse);
  
  

  // Event: BorderDragged
  //
  // Occurs when you drag a draggable border of a control. This event provides the location and size to which you must set the control for the draggable borders to track the mouse cursor. However, you can choose to modify the location or size to which you set the control. For example, you can limit the width of the control so the left edge of the control cannot be dragged off of the visible portion of the window.
  // 
  // In addition to changing the size and position of the control, you can also update the sizes and positions of the other controls on the window to account for the change.
  //
  // If you are using LabVIEW, you must add the Horizontal and Vertical components of the origin of the LabVIEW front panel to the newX and newY event parameter values before you can use the newX and newY event parameters to set the ActiveX Container (AxCont) Left and Top properties for the control. To obtain the origin of a LabVIEW front panel, place an ActiveX property node on the block diagram of the VI, right-click the node, and select Link to»Pane from the context menu. Right-click the node again and select Select Property»Origin.
  //
  // The event has a registration method and a reply method.
  // GetEvents_BorderDragged - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_BorderDragged - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // VariablesView_GetEvents_BorderDraggedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: VariablesViewInstance - The id of the VariablesView object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // VariablesView_GetEvents_BorderDraggedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - bordersChanged: WhichBorders - Specifies which borders you dragged. Refer to the WhichBorders constants for more information about draggable borders.
  //  - newX: int32 - Specifies the new x-coordinate for the control
  //  - newY: int32 - Specifies the new y-coordinate for the control.
  //  - newWidth: int32 - Specifies the new width for the control.
  //  - newHeight: int32 - Specifies the new height for the control.
  //  - finalResize: bool - Specifies whether the event is the final event for the drag operation the user performs.
  //
  // VariablesView_ReplyToEvent_BorderDraggedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // VariablesView_ReplyToEvent_BorderDraggedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_BorderDragged(VariablesView_GetEvents_BorderDraggedRequest) returns (stream VariablesView_GetEvents_BorderDraggedResponse);
  rpc ReplyToEvent_BorderDragged(VariablesView_ReplyToEvent_BorderDraggedRequest) returns (VariablesView_ReplyToEvent_BorderDraggedResponse); 
  
  
  // Event: ConnectionActivity
  //
  // Occurs after the connection to a manager control makes a change to a user interface control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_ConnectionActivity - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_ConnectionActivity - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // VariablesView_GetEvents_ConnectionActivityRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: VariablesViewInstance - The id of the VariablesView object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // VariablesView_GetEvents_ConnectionActivityResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - activity: ConnectionActivityTypes - Specifies the type of change.
  //
  // VariablesView_ReplyToEvent_ConnectionActivityRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // VariablesView_ReplyToEvent_ConnectionActivityResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_ConnectionActivity(VariablesView_GetEvents_ConnectionActivityRequest) returns (stream VariablesView_GetEvents_ConnectionActivityResponse);
  rpc ReplyToEvent_ConnectionActivity(VariablesView_ReplyToEvent_ConnectionActivityRequest) returns (VariablesView_ReplyToEvent_ConnectionActivityResponse); 
  
  
  // Event: KeyDown
  //
  // Occurs when the user presses any key while the control has the input focus.
  //
  // The event has a registration method and a reply method.
  // GetEvents_KeyDown - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_KeyDown - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // VariablesView_GetEvents_KeyDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: VariablesViewInstance - The id of the VariablesView object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // VariablesView_GetEvents_KeyDownResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - keyCode: int32
  //  - shift: int32 - Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //
  // VariablesView_ReplyToEvent_KeyDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //  - keyCode: int32
  //
  // VariablesView_ReplyToEvent_KeyDownResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_KeyDown(VariablesView_GetEvents_KeyDownRequest) returns (stream VariablesView_GetEvents_KeyDownResponse);
  rpc ReplyToEvent_KeyDown(VariablesView_ReplyToEvent_KeyDownRequest) returns (VariablesView_ReplyToEvent_KeyDownResponse); 
  
  
}
message VariablesViewInstance {
  // Specifies the handle of the VariablesView instance in the server.
  string id = 1;
}
message VariablesView_VariablesViewRequest {
}

message VariablesView_VariablesViewResponse {
  // The return type of the VariablesView object.
  VariablesViewInstance returnValue = 1;
}

message VariablesView_Set_ScaleWithDPIRequest {
  // The id of the VariablesView object.
  VariablesViewInstance instance = 1;
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  bool val = 2;
}

message VariablesView_Set_ScaleWithDPIResponse {
}

message VariablesView_Get_ScaleWithDPIRequest {
  // The id of the VariablesView object.
  VariablesViewInstance instance = 1;
}

message VariablesView_Get_ScaleWithDPIResponse {
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  bool returnValue = 1;
}

message VariablesView_Set_EnabledRequest {
  // The id of the VariablesView object.
  VariablesViewInstance instance = 1;
  // The control responds to user-generated events only when this property is True.
  bool val = 2;
}

message VariablesView_Set_EnabledResponse {
}

message VariablesView_Get_EnabledRequest {
  // The id of the VariablesView object.
  VariablesViewInstance instance = 1;
}

message VariablesView_Get_EnabledResponse {
  // The control responds to user-generated events only when this property is True.
  bool returnValue = 1;
}

message VariablesView_Get_hWndRequest {
  // The id of the VariablesView object.
  VariablesViewInstance instance = 1;
}

message VariablesView_Get_hWndResponse {
  // Returns a Window handle for the control.
  int32 returnValue = 1;
}

message VariablesView_Get_BordersRequest {
  // The id of the VariablesView object.
  VariablesViewInstance instance = 1;
}

message VariablesView_Get_BordersResponse {
  // Returns the frame and draggable borders that surround the control.
  BordersInstance returnValue = 1;
}

message VariablesView_GetEvents_BorderDraggedRequest {
  // The id of the VariablesView object.
  VariablesViewInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message VariablesView_GetEvents_BorderDraggedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies which borders you dragged. Refer to the WhichBorders constants for more information about draggable borders.
  WhichBorders bordersChanged = 2;
  // Specifies the new x-coordinate for the control
  int32 newX = 3;
  // Specifies the new y-coordinate for the control.
  int32 newY = 4;
  // Specifies the new width for the control.
  int32 newWidth = 5;
  // Specifies the new height for the control.
  int32 newHeight = 6;
  // Specifies whether the event is the final event for the drag operation the user performs.
  bool finalResize = 7;
}

message VariablesView_ReplyToEvent_BorderDraggedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message VariablesView_ReplyToEvent_BorderDraggedResponse {
}

message VariablesView_GetEvents_ConnectionActivityRequest {
  // The id of the VariablesView object.
  VariablesViewInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message VariablesView_GetEvents_ConnectionActivityResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the type of change.
  ConnectionActivityTypes activity = 2;
}

message VariablesView_ReplyToEvent_ConnectionActivityRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message VariablesView_ReplyToEvent_ConnectionActivityResponse {
}

message VariablesView_GetEvents_KeyDownRequest {
  // The id of the VariablesView object.
  VariablesViewInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message VariablesView_GetEvents_KeyDownResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the KeyCodes constant of the key the user pressed.
  int32 keyCode = 2;
  // Specifies a combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
}

message VariablesView_ReplyToEvent_KeyDownRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  // Specifies the KeyCodes constant of the key the user pressed.
  int32 keyCode = 2;
}

message VariablesView_ReplyToEvent_KeyDownResponse {
}

// InsertionPalette
//
// Connect a SequenceFileView Manager control to an InsertionPalette control so users can insert steps and template items into a sequence file by dragging or double-clicking.
// 
// Select Customize from the context menu of the Step Types list to launch the Step Type Menu Editor dialog box, in which you can customize the structure of the menu.
// 
// You can add sequences, steps, or variables to the Templates list by dragging sequences, steps, or variables to the InsertionPalette control from a ListBox, ListBar, SequenceView, or VariablesView control. You can rename, copy, paste, delete, import, and export the items in the Templates list using the context menu, and you can rearrange the items using drag and drop.
// 
// You can use one of the following operations to insert a step from the Step Types list or a sequence, step, or variable from the Templates list to a user interface control that displays a list of the corresponding object type:    * Double-click an item in the InsertionPalette control. TestStand inserts the item below the current step, sequence, or variable depending on the type of the item.    * Select an item in the InsertionPalette control and press <Enter>. TestStand inserts the item below the current step, sequence, or variable depending on the type of the item.    * Right-click an item in the InsertionPalette control and select Insert from the context menu. TestStand inserts the item below the current step, sequence, or variable depending on the type of the item.    * Drag an item from the InsertionPalette control and drop the item in the corresponding user interface control that contains a list of the type of items.
//
service InsertionPalette {
  // Service: InsertionPalette
  //
  // Creates a new InsertionPalette instance
  //
  // InsertionPaletteRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InsertionPaletteInstance - The id of the InsertionPalette object.
  //
  // InsertionPaletteResponse - The response message from the server. It provides the return value.
  //    - returnValue: InsertionPaletteInstance - The return type of the InsertionPalette object.
  //
  rpc InsertionPalette(InsertionPalette_InsertionPaletteRequest) returns (InsertionPalette_InsertionPaletteResponse);

  // Property: Enabled
  //
  // The control responds to user-generated events only when this property is True.
  //
  // When you connect this control to a manager control, the manager control automatically sets this property.
  //
  // InsertionPalette_Set_EnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InsertionPaletteInstance - The id of the InsertionPalette object.
  //    - val: bool - The control responds to user-generated events only when this property is True. 
  //
  // InsertionPalette_Set_EnabledResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // InsertionPalette_Get_EnabledRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InsertionPaletteInstance - The id of the InsertionPalette object.
  //
  // InsertionPalette_Get_EnabledResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - The control responds to user-generated events only when this property is True. 
  //
  rpc Set_Enabled(InsertionPalette_Set_EnabledRequest) returns (InsertionPalette_Set_EnabledResponse);
  rpc Get_Enabled(InsertionPalette_Get_EnabledRequest) returns (InsertionPalette_Get_EnabledResponse);
  
  
  // Property: hWnd
  //
  // Returns a Window handle for the control.
  //
  // You can use the returned Window handle with the Microsoft Windows API functions.
  // Note: Using Windows API functions with this property can cause undefined behavior.
  //
  // InsertionPalette_Get_hWndRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InsertionPaletteInstance - The id of the InsertionPalette object.
  //
  // InsertionPalette_Get_hWndResponse - The response message from the server. It provides the return value.
  //    - returnValue: int32 - Returns a Window handle for the control. 
  //
  rpc Get_hWnd(InsertionPalette_Get_hWndRequest) returns (InsertionPalette_Get_hWndResponse);
  
  
  // Property: Borders
  //
  // Returns the frame and draggable borders that surround the control.
  //
  // InsertionPalette_Get_BordersRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InsertionPaletteInstance - The id of the InsertionPalette object.
  //
  // InsertionPalette_Get_BordersResponse - The response message from the server. It provides the return value.
  //    - returnValue: BordersInstance - Returns the frame and draggable borders that surround the control. 
  //
  rpc Get_Borders(InsertionPalette_Get_BordersRequest) returns (InsertionPalette_Get_BordersResponse);
  
  
  // Property: ScaleWithDPI
  //
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  //
  // Some environments scale native controls based on the DPI settings of their display, while other environments do not. The TestStand User Interface Controls are designed to work in all environments.
  // National Instruments recommends the following settings for various platforms:    * LabVIEW, LabWindows/CVI, C#, and Microsoft Visual Basic .NET—Set this property to False.    * Active Template Library (ATL)/Microsoft Foundation Class (MFC)—Set this property to True.
  //
  // InsertionPalette_Set_ScaleWithDPIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InsertionPaletteInstance - The id of the InsertionPalette object.
  //    - val: bool - Specifies how the control scales based on the dots per inch (DPI) setting. 
  //
  // InsertionPalette_Set_ScaleWithDPIResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // InsertionPalette_Get_ScaleWithDPIRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InsertionPaletteInstance - The id of the InsertionPalette object.
  //
  // InsertionPalette_Get_ScaleWithDPIResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies how the control scales based on the dots per inch (DPI) setting. 
  //
  rpc Set_ScaleWithDPI(InsertionPalette_Set_ScaleWithDPIRequest) returns (InsertionPalette_Set_ScaleWithDPIResponse);
  rpc Get_ScaleWithDPI(InsertionPalette_Get_ScaleWithDPIRequest) returns (InsertionPalette_Get_ScaleWithDPIResponse);
  
  
  // Property: AllowEditing
  //
  // Specifies whether you can modify the templates list and step types list panels of the control.
  //
  // InsertionPalette_Set_AllowEditingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InsertionPaletteInstance - The id of the InsertionPalette object.
  //    - val: bool - Specifies whether you can modify the templates list and step types list panels of the control. 
  //
  // InsertionPalette_Set_AllowEditingResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // InsertionPalette_Get_AllowEditingRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InsertionPaletteInstance - The id of the InsertionPalette object.
  //
  // InsertionPalette_Get_AllowEditingResponse - The response message from the server. It provides the return value.
  //    - returnValue: bool - Specifies whether you can modify the templates list and step types list panels of the control. 
  //
  rpc Set_AllowEditing(InsertionPalette_Set_AllowEditingRequest) returns (InsertionPalette_Set_AllowEditingResponse);
  rpc Get_AllowEditing(InsertionPalette_Get_AllowEditingRequest) returns (InsertionPalette_Get_AllowEditingResponse);
  
  
  // Property: PaletteLayout
  //
  // Specifies a serialized string you use to persist the layout of the control. Use the serialized string to later restore the layout of the control.
  //
  // The layout information is composed of the state of the nodes in the Step Types list and the Templates list on the Insertion Palette pane, including information about the selected nodes and whether the nodes are expanded or collapsed.
  //
  // InsertionPalette_Set_PaletteLayoutRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InsertionPaletteInstance - The id of the InsertionPalette object.
  //    - val: string - Specifies a serialized string you use to persist the layout of the control. Use the serialized string to later restore the layout of the control. 
  //
  // InsertionPalette_Set_PaletteLayoutResponse - The response message from the server. It has no output parameters nor a return value.
  //
  // InsertionPalette_Get_PaletteLayoutRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InsertionPaletteInstance - The id of the InsertionPalette object.
  //
  // InsertionPalette_Get_PaletteLayoutResponse - The response message from the server. It provides the return value.
  //    - returnValue: string - Specifies a serialized string you use to persist the layout of the control. Use the serialized string to later restore the layout of the control. 
  //
  rpc Set_PaletteLayout(InsertionPalette_Set_PaletteLayoutRequest) returns (InsertionPalette_Set_PaletteLayoutResponse);
  rpc Get_PaletteLayout(InsertionPalette_Get_PaletteLayoutRequest) returns (InsertionPalette_Get_PaletteLayoutResponse);
  
  
  // Property: Pages
  //
  // Returns a collection of the InsertionPalette pages.
  //
  // InsertionPalette_Get_PagesRequest - The request message for the call. It provides the instance object associated with the call.
  //    - instance: InsertionPaletteInstance - The id of the InsertionPalette object.
  //
  // InsertionPalette_Get_PagesResponse - The response message from the server. It provides the return value.
  //    - returnValue: InsertionPalettePagesInstance - Returns a collection of the InsertionPalette pages. 
  //
  rpc Get_Pages(InsertionPalette_Get_PagesRequest) returns (InsertionPalette_Get_PagesResponse);
  
  

  // Event: BorderDragged
  //
  // Occurs when you drag a draggable border of a control. This event provides the location and size to which you must set the control for the draggable borders to track the mouse cursor. However, you can choose to modify the location or size to which you set the control. For example, you can limit the width of the control so the left edge of the control cannot be dragged off of the visible portion of the window.
  // 
  // In addition to changing the size and position of the control, you can also update the sizes and positions of the other controls on the window to account for the change.
  //
  // If you are using LabVIEW, you must add the Horizontal and Vertical components of the origin of the LabVIEW front panel to the newX and newY event parameter values before you can use the newX and newY event parameters to set the ActiveX Container (AxCont) Left and Top properties for the control. To obtain the origin of a LabVIEW front panel, place an ActiveX property node on the block diagram of the VI, right-click the node, and select Link to»Pane from the context menu. Right-click the node again and select Select Property»Origin.
  //
  // The event has a registration method and a reply method.
  // GetEvents_BorderDragged - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_BorderDragged - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // InsertionPalette_GetEvents_BorderDraggedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: InsertionPaletteInstance - The id of the InsertionPalette object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // InsertionPalette_GetEvents_BorderDraggedResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - bordersChanged: WhichBorders - Specifies which borders you dragged. Refer to the WhichBorders constants for more information about draggable borders.
  //  - newX: int32 - Specifies the new x-coordinate for the control.
  //  - newY: int32 - Specifies the new y-coordinate for the control.
  //  - newWidth: int32 - Specifies the new width for the control.
  //  - newHeight: int32 - Specifies the new height for the control.
  //  - finalResize: bool - Specifies whether the event is the final event for the drag operation the user performs.
  //
  // InsertionPalette_ReplyToEvent_BorderDraggedRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // InsertionPalette_ReplyToEvent_BorderDraggedResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_BorderDragged(InsertionPalette_GetEvents_BorderDraggedRequest) returns (stream InsertionPalette_GetEvents_BorderDraggedResponse);
  rpc ReplyToEvent_BorderDragged(InsertionPalette_ReplyToEvent_BorderDraggedRequest) returns (InsertionPalette_ReplyToEvent_BorderDraggedResponse); 
  
  
  // Event: ConnectionActivity
  //
  // Occurs after the connection to a manager control makes a change to a user interface control.
  //
  // The event has a registration method and a reply method.
  // GetEvents_ConnectionActivity - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_ConnectionActivity - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // InsertionPalette_GetEvents_ConnectionActivityRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: InsertionPaletteInstance - The id of the InsertionPalette object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // InsertionPalette_GetEvents_ConnectionActivityResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - activity: ConnectionActivityTypes - Specifies the type of change.
  //
  // InsertionPalette_ReplyToEvent_ConnectionActivityRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //
  // InsertionPalette_ReplyToEvent_ConnectionActivityResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_ConnectionActivity(InsertionPalette_GetEvents_ConnectionActivityRequest) returns (stream InsertionPalette_GetEvents_ConnectionActivityResponse);
  rpc ReplyToEvent_ConnectionActivity(InsertionPalette_ReplyToEvent_ConnectionActivityRequest) returns (InsertionPalette_ReplyToEvent_ConnectionActivityResponse); 
  
  
  // Event: KeyDown
  //
  // Occurs when the user presses any key while the control has the input focus.
  //
  // The event has a registration method and a reply method.
  // GetEvents_KeyDown - The registration method that returns a stream where each item read from the stream represents an event that occurred on the server.
  // ReplyToEvent_KeyDown - The reply method that must be called to reply to the event if the registration method's replyTimeout parameter is greater than zero.
  //
  // InsertionPalette_GetEvents_KeyDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - instance: InsertionPaletteInstance - The id of the InsertionPalette object.
  //  - minimumInstanceLifetime: double - Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  //    A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  //    you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  //    greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  //    unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  //  - replyTimeout: double - Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  //    the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  //    event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  //    expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  //    expires or the event returns default output values.
  //  - timeoutCancelsEvents: bool - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //  - discardMultipleEventsWithinPeriod: double - Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  //    than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  //    If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  //    the event provides.
  //
  // InsertionPalette_GetEvents_KeyDownResponse - The response message from the server. It provides the output parameters.
  //  - _eventId: string - Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  //    the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  //    request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  //  - keyCode: int32
  //  - shift: int32 - A combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  //
  // InsertionPalette_ReplyToEvent_KeyDownRequest - The request message for the call. It provides the instance object associated with the call and input parameters.
  //  - _eventId: string - Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  //    to which you are replying.
  //  - keyCode: int32
  //
  // InsertionPalette_ReplyToEvent_KeyDownResponse - The response message from the server. It has no output parameters nor a return value.
  //
  rpc GetEvents_KeyDown(InsertionPalette_GetEvents_KeyDownRequest) returns (stream InsertionPalette_GetEvents_KeyDownResponse);
  rpc ReplyToEvent_KeyDown(InsertionPalette_ReplyToEvent_KeyDownRequest) returns (InsertionPalette_ReplyToEvent_KeyDownResponse); 
  
  
}
message InsertionPaletteInstance {
  // Specifies the handle of the InsertionPalette instance in the server.
  string id = 1;
}
message InsertionPalette_InsertionPaletteRequest {
}

message InsertionPalette_InsertionPaletteResponse {
  // The return type of the InsertionPalette object.
  InsertionPaletteInstance returnValue = 1;
}

message InsertionPalette_Set_EnabledRequest {
  // The id of the InsertionPalette object.
  InsertionPaletteInstance instance = 1;
  // The control responds to user-generated events only when this property is True.
  bool val = 2;
}

message InsertionPalette_Set_EnabledResponse {
}

message InsertionPalette_Get_EnabledRequest {
  // The id of the InsertionPalette object.
  InsertionPaletteInstance instance = 1;
}

message InsertionPalette_Get_EnabledResponse {
  // The control responds to user-generated events only when this property is True.
  bool returnValue = 1;
}

message InsertionPalette_Get_hWndRequest {
  // The id of the InsertionPalette object.
  InsertionPaletteInstance instance = 1;
}

message InsertionPalette_Get_hWndResponse {
  // Returns a Window handle for the control.
  int32 returnValue = 1;
}

message InsertionPalette_Get_BordersRequest {
  // The id of the InsertionPalette object.
  InsertionPaletteInstance instance = 1;
}

message InsertionPalette_Get_BordersResponse {
  // Returns the frame and draggable borders that surround the control.
  BordersInstance returnValue = 1;
}

message InsertionPalette_Set_ScaleWithDPIRequest {
  // The id of the InsertionPalette object.
  InsertionPaletteInstance instance = 1;
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  bool val = 2;
}

message InsertionPalette_Set_ScaleWithDPIResponse {
}

message InsertionPalette_Get_ScaleWithDPIRequest {
  // The id of the InsertionPalette object.
  InsertionPaletteInstance instance = 1;
}

message InsertionPalette_Get_ScaleWithDPIResponse {
  // Specifies how the control scales based on the dots per inch (DPI) setting.
  bool returnValue = 1;
}

message InsertionPalette_Set_AllowEditingRequest {
  // The id of the InsertionPalette object.
  InsertionPaletteInstance instance = 1;
  // Specifies whether you can modify the templates list and step types list panels of the control.
  bool val = 2;
}

message InsertionPalette_Set_AllowEditingResponse {
}

message InsertionPalette_Get_AllowEditingRequest {
  // The id of the InsertionPalette object.
  InsertionPaletteInstance instance = 1;
}

message InsertionPalette_Get_AllowEditingResponse {
  // Specifies whether you can modify the templates list and step types list panels of the control.
  bool returnValue = 1;
}

message InsertionPalette_Set_PaletteLayoutRequest {
  // The id of the InsertionPalette object.
  InsertionPaletteInstance instance = 1;
  // Specifies a serialized string you use to persist the layout of the control. Use the serialized string to later restore the layout of the control.
  string val = 2;
}

message InsertionPalette_Set_PaletteLayoutResponse {
}

message InsertionPalette_Get_PaletteLayoutRequest {
  // The id of the InsertionPalette object.
  InsertionPaletteInstance instance = 1;
}

message InsertionPalette_Get_PaletteLayoutResponse {
  // Specifies a serialized string you use to persist the layout of the control. Use the serialized string to later restore the layout of the control.
  string returnValue = 1;
}

message InsertionPalette_Get_PagesRequest {
  // The id of the InsertionPalette object.
  InsertionPaletteInstance instance = 1;
}

message InsertionPalette_Get_PagesResponse {
  // Returns a collection of the InsertionPalette pages.
  InsertionPalettePagesInstance returnValue = 1;
}

message InsertionPalette_GetEvents_BorderDraggedRequest {
  // The id of the InsertionPalette object.
  InsertionPaletteInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message InsertionPalette_GetEvents_BorderDraggedResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies which borders you dragged. Refer to the WhichBorders constants for more information about draggable borders.
  WhichBorders bordersChanged = 2;
  // Specifies the new x-coordinate for the control.
  int32 newX = 3;
  // Specifies the new y-coordinate for the control.
  int32 newY = 4;
  // Specifies the new width for the control.
  int32 newWidth = 5;
  // Specifies the new height for the control.
  int32 newHeight = 6;
  // Specifies whether the event is the final event for the drag operation the user performs.
  bool finalResize = 7;
}

message InsertionPalette_ReplyToEvent_BorderDraggedRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message InsertionPalette_ReplyToEvent_BorderDraggedResponse {
}

message InsertionPalette_GetEvents_ConnectionActivityRequest {
  // The id of the InsertionPalette object.
  InsertionPaletteInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message InsertionPalette_GetEvents_ConnectionActivityResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the type of change.
  ConnectionActivityTypes activity = 2;
}

message InsertionPalette_ReplyToEvent_ConnectionActivityRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
}

message InsertionPalette_ReplyToEvent_ConnectionActivityResponse {
}

message InsertionPalette_GetEvents_KeyDownRequest {
  // The id of the InsertionPalette object.
  InsertionPaletteInstance instance = 1;
  // Together with replyTimeout, this value specifies the minimum lifetime in seconds for instance ids in the requested events.
  // A value of -1 seconds specifies an infinite lifetime. If you specify an infinite lifetime (-1) and a replyTimeout of zero (no replies expected),
  // you must call InstanceLifetime.Release on every instance id in each event message. If you specify a replyTimeout that is
  // greater than zero, then the minimum instance id lifetime extends until the reply timeout expires or all event replies are received,
  // unless the specified minimum lifetime is longer than the replyTimeout, in which case the minimumInstanceLifetime applies.
  double minimumInstanceLifetime = 2;
  // Specifies the minimum time in seconds that the server should wait for you to reply to each event. Specify 0.0 to indicate
  // the server should not wait for a reply. To reply to an event, call the ReplyToEvent_<event-name> RPC method. If your
  // event message contains object instances ids, their lifetime periods extend until you reply to the event or the timeout
  // expires. If your event expects output fields, your output values must be received in a reply before the timeout period
  // expires or the event returns default output values.
  double replyTimeout = 3;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  bool timeoutCancelsEvents = 4;
  // Specifies a period in seconds in which if multiple events occur, only the latest is sent. For events that occur at higher frequency
  // than the client requires, you can specify a value greater than 0.0 to reduce the frequency of events to improve performance.
  // If you specify a non-zero value, the value of replyTimeout must be 0.0 and you must not use any object instance ids that
  // the event provides.
  double discardMultipleEventsWithinPeriod = 5;
}

message InsertionPalette_GetEvents_KeyDownResponse {
  // Returns an identifier that specifies which occurrence of the event the message decribes and which event subscriber
  // the message was sent to. The format is "<eventNumber>|<subscriberNumber>". You pass this value back in the
  // request message if you respond to the event by calling the ReplyToEvent_<event-name> RPC method.
  string _eventId = 1;
  // Specifies the KeyCodes constant of the key the user pressed.
  int32 keyCode = 2;
  // A combination of the KeyModifiers constants that specifies the state of the <Shift>, <Ctrl>, and <Alt> keys.
  int32 shift = 3;
}

message InsertionPalette_ReplyToEvent_KeyDownRequest {
  // Pass the value of eventId you received in a <service-name>_GetEvents_<event-Name>Response message to identify the event
  // to which you are replying.
  string _eventId = 1;
  // Specifies the KeyCodes constant of the key the user pressed.
  int32 keyCode = 2;
}

message InsertionPalette_ReplyToEvent_KeyDownResponse {
}

///////////////////////// Referenced Types /////////////////////

// Generation of referenced types is disabled.

